(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{396:function(e,t,r){"use strict";r.r(t);var a=r(42),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"libde265-open-h-265-codec-implementation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#libde265-open-h-265-codec-implementation"}},[e._v("#")]),e._v(" libde265 - open h.265 codec implementation")]),e._v(" "),r("p",[r("img",{attrs:{src:"libde265.png",alt:"libde265"}})]),e._v(" "),r("p",[e._v("libde265 is an open source implementation of the h.265 video codec.\nIt is written from scratch and has a plain C API to enable\na simple integration into other software.")]),e._v(" "),r("p",[e._v("libde265 supports WPP and tile-based multithreading and includes SSE optimizations.\nThe decoder includes all features of the Main profile and correctly decodes almost all\nconformance streams (see ["),r("a",{attrs:{href:"https://github.com/strukturag/libde265/wiki/Decoder-conformance",target:"_blank",rel:"noopener noreferrer"}},[e._v("wiki page"),r("OutboundLink")],1),e._v("]).")]),e._v(" "),r("p",[e._v("A list of supported features are available in the "),r("a",{attrs:{href:"https://github.com/strukturag/libde265/wiki/Supported-decoding-features",target:"_blank",rel:"noopener noreferrer"}},[e._v("wiki"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("p",[e._v("For latest news check our website at http://www.libde265.org")]),e._v(" "),r("p",[e._v("The library comes with two example programs:")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("dec265, a simple player for raw h.265 bitstreams.\nIt serves nicely as an example program how to use libde265.")])]),e._v(" "),r("li",[r("p",[e._v("sherlock265, a Qt-based video player with the additional capability\nto overlay some graphical representations of the h.265\nbitstream (like CU-trees, intra-prediction modes).")])])]),e._v(" "),r("p",[e._v("Example bitstreams can be found, e.g., at this site:\nftp://ftp.kw.bbc.co.uk/hevc/hm-10.1-anchors/bitstreams/ra_main/")]),e._v(" "),r("p",[e._v("Approximate performance for WPP, non-tiles streams (measured using the "),r("code",[e._v("timehevc")]),e._v("\ntool from "),r("a",{attrs:{href:"https://github.com/strukturag/gstreamer-libde265",target:"_blank",rel:"noopener noreferrer"}},[e._v("the GStreamer plugin"),r("OutboundLink")],1),e._v(").\nThe tool plays a Matroska movie to the GStreamer fakesink and measures\nthe average framerate.")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("Resolution")]),e._v(" "),r("th",[e._v("avg. fps")]),e._v(" "),r("th",[e._v("CPU usage")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[r("a",{attrs:{href:"http://trailers.divx.com/hevc/TearsOfSteel_720p_24fps_27qp_831kbps_720p_GPSNR_41.65_HM11_2aud_7subs.mkv",target:"_blank",rel:"noopener noreferrer"}},[e._v("720p"),r("OutboundLink")],1)]),e._v(" "),r("td",[e._v("284 fps")]),e._v(" "),r("td",[e._v("39 %")])]),e._v(" "),r("tr",[r("td",[r("a",{attrs:{href:"http://trailers.divx.com/hevc/TearsOfSteel_1080p_24fps_27qp_1474kbps_GPSNR_42.29_HM11_2aud_7subs.mkv",target:"_blank",rel:"noopener noreferrer"}},[e._v("1080p"),r("OutboundLink")],1)]),e._v(" "),r("td",[e._v("150 fps")]),e._v(" "),r("td",[e._v("45 %")])]),e._v(" "),r("tr",[r("td",[r("a",{attrs:{href:"http://trailers.divx.com/hevc/TearsOfSteel_4K_24fps_9500kbps_2aud_9subs.mkv",target:"_blank",rel:"noopener noreferrer"}},[e._v("4K"),r("OutboundLink")],1)]),e._v(" "),r("td",[e._v("36 fps")]),e._v(" "),r("td",[e._v("56 %")])])])]),e._v(" "),r("p",[e._v("Environment:")]),e._v(" "),r("ul",[r("li",[e._v("Intel(R) Core(TM) i7-2700K CPU @ 3.50GHz (4 physical CPU cores)")]),e._v(" "),r("li",[e._v("Ubuntu 12.04, 64bit")]),e._v(" "),r("li",[e._v("GStreamer 0.10.36")])]),e._v(" "),r("h1",{attrs:{id:"building"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#building"}},[e._v("#")]),e._v(" Building")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://travis-ci.org/strukturag/libde265",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://travis-ci.org/strukturag/libde265.png?branch=master",alt:"Build Status"}}),r("OutboundLink")],1),e._v(" "),r("a",{attrs:{href:"https://ci.appveyor.com/project/strukturag/libde265",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://ci.appveyor.com/api/projects/status/github/strukturag/libde265?svg=true",alt:"Build Status"}}),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("If you got libde265 from the git repository, you will first need to run\nthe included "),r("code",[e._v("autogen.sh")]),e._v(" script to generate the "),r("code",[e._v("configure")]),e._v(" script.")]),e._v(" "),r("p",[e._v("libde265 has no dependencies on other libraries, but both optional example programs\nhave dependencies on:")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("SDL (optional for dec265's YUV overlay output),")])]),e._v(" "),r("li",[r("p",[e._v("Qt (required for sherlock265),")])]),e._v(" "),r("li",[r("p",[e._v("libswscale (required for sherlock265 if libvideogfx is not available).")])]),e._v(" "),r("li",[r("p",[e._v("libvideogfx (required for sherlock265 if libswscale is not available,\noptional for dec265).")])])]),e._v(" "),r("p",[e._v("Libvideogfx can be obtained from\nhttp://www.dirk-farin.net/software/libvideogfx/index.html\nor\nhttp://github.com/farindk/libvideogfx")]),e._v(" "),r("p",[e._v("You can disable building of the example programs by running "),r("code",[e._v("./configure")]),e._v(" with\n"),r("pre",[e._v("--disable-dec265        Do not build the dec265 decoder program.\n--disable-sherlock265   Do not build the sherlock265 visual inspection program.\n")])]),e._v(" "),r("p",[e._v("Additional logging information can be turned on and off using these "),r("code",[e._v("./configure")]),e._v(" flags:\n"),r("pre",[e._v("--enable-log-error      turn on logging at error level (default=yes)\n--enable-log-info       turn on logging at info level (default=no)\n--enable-log-trace      turn on logging at trace level (default=no)\n")])]),e._v(" "),r("h1",{attrs:{id:"build-using-cmake"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#build-using-cmake"}},[e._v("#")]),e._v(" Build using cmake")]),e._v(" "),r("p",[e._v("cmake scripts to build libde265 and the sample scripts "),r("code",[e._v("dec265")]),e._v(" and "),r("code",[e._v("enc265")]),e._v(" are\nincluded and can be compiled using these commands:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("mkdir build\ncd build\ncmake ..\nmake\n")])])]),r("p",[e._v("See the "),r("a",{attrs:{href:"http://www.cmake.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("cmake documentation"),r("OutboundLink")],1),e._v(" for further information on\nusing cmake on other platforms.")]),e._v(" "),r("h1",{attrs:{id:"prebuilt-binaries"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#prebuilt-binaries"}},[e._v("#")]),e._v(" Prebuilt binaries")]),e._v(" "),r("p",[e._v("Binary packages can be obtained from this "),r("a",{attrs:{href:"https://launchpad.net/~strukturag/+archive/libde265",target:"_blank",rel:"noopener noreferrer"}},[e._v("launchpad site"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("h1",{attrs:{id:"software-using-libde265"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#software-using-libde265"}},[e._v("#")]),e._v(" Software using libde265")]),e._v(" "),r("p",[e._v("Libde265 has been integrated into these applications:")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("gstreamer plugin, "),r("a",{attrs:{href:"https://github.com/strukturag/gstreamer-libde265",target:"_blank",rel:"noopener noreferrer"}},[e._v("source"),r("OutboundLink")],1),e._v(", "),r("a",{attrs:{href:"https://launchpad.net/~strukturag/+archive/libde265",target:"_blank",rel:"noopener noreferrer"}},[e._v("binary packages"),r("OutboundLink")],1),e._v(".")])]),e._v(" "),r("li",[r("p",[e._v("VLC plugin "),r("a",{attrs:{href:"https://github.com/strukturag/vlc-libde265",target:"_blank",rel:"noopener noreferrer"}},[e._v("source"),r("OutboundLink")],1),e._v(", "),r("a",{attrs:{href:"https://launchpad.net/~strukturag/+archive/libde265",target:"_blank",rel:"noopener noreferrer"}},[e._v("binary packages"),r("OutboundLink")],1),e._v(".")])]),e._v(" "),r("li",[r("p",[e._v("Windows DirectShow filters, https://github.com/strukturag/LAVFilters/releases")])]),e._v(" "),r("li",[r("p",[e._v("ffmpeg fork, https://github.com/farindk/ffmpeg")])]),e._v(" "),r("li",[r("p",[e._v("ffmpeg decoder "),r("a",{attrs:{href:"https://github.com/strukturag/libde265-ffmpeg",target:"_blank",rel:"noopener noreferrer"}},[e._v("source"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("libde265.js JavaScript decoder "),r("a",{attrs:{href:"https://github.com/strukturag/libde265.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("source"),r("OutboundLink")],1),e._v(", "),r("a",{attrs:{href:"https://strukturag.github.io/libde265.js/",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo"),r("OutboundLink")],1),e._v(".")])])]),e._v(" "),r("h1",{attrs:{id:"license"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#license"}},[e._v("#")]),e._v(" License")]),e._v(" "),r("p",[e._v("The library "),r("code",[e._v("libde265")]),e._v(" is distributed under the terms of the GNU Lesser\nGeneral Public License. The sample applications are distributed under\nthe terms of the GNU General Public License.")]),e._v(" "),r("p",[e._v("See "),r("code",[e._v("COPYING")]),e._v(" for more details.")]),e._v(" "),r("p",[e._v("Copyright (c) 2013-2014 Struktur AG\nContact: Dirk Farin "),r("a",{attrs:{href:"mailto:farin@struktur.de"}},[e._v("farin@struktur.de")])])])}),[],!1,null,null,null);t.default=n.exports}}]);
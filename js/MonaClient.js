//
//  Copyright (c) 2014 Sam Leitch. All rights reserved.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to
//  deal in the Software without restriction, including without limitation the
//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
//  sell copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
//  IN THE SOFTWARE.
//

// modified by Matthias Behrens (github.com/soliton4) for Broadway.js


// universal module definition
(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.WebGLCanvas = factory();
    }
}(this, function() {


    /**
     * This class can be used to render output pictures from an H264bsdDecoder to a canvas element.
     * If available the content is rendered using WebGL.
     */
    function H264bsdCanvas(canvas, forceNoGL, contextOptions) {
        this.canvasElement = canvas;
        this.contextOptions = contextOptions;

        if (!forceNoGL) this.initContextGL();

        if (this.contextGL) {
            this.initProgram();
            this.initBuffers();
            this.initTextures();
        };
    };

    /**
     * Returns true if the canvas supports WebGL
     */
    H264bsdCanvas.prototype.isWebGL = function() {
        return this.contextGL;
    };

    /**
     * Create the GL context from the canvas element
     */
    H264bsdCanvas.prototype.initContextGL = function() {
        var canvas = this.canvasElement;
        var gl = null;

        var validContextNames = ["webgl", "experimental-webgl", "moz-webgl", "webkit-3d"];
        var nameIndex = 0;

        while (!gl && nameIndex < validContextNames.length) {
            var contextName = validContextNames[nameIndex];

            try {
                if (this.contextOptions) {
                    gl = canvas.getContext(contextName, this.contextOptions);
                } else {
                    gl = canvas.getContext(contextName);
                };
            } catch (e) {
                gl = null;
            }

            if (!gl || typeof gl.getParameter !== "function") {
                gl = null;
            }

            ++nameIndex;
        };

        this.contextGL = gl;
    };

    /**
     * Initialize GL shader program
     */
    H264bsdCanvas.prototype.initProgram = function() {
        var gl = this.contextGL;

        var vertexShaderScript = [
            'attribute vec4 vertexPos;',
            'attribute vec4 texturePos;',
            'varying vec2 textureCoord;',

            'void main()',
            '{',
            'gl_Position = vertexPos;',
            'textureCoord = texturePos.xy;',
            '}'
        ].join('\n');

        var fragmentShaderScript = [
            'precision highp float;',
            'varying highp vec2 textureCoord;',
            'uniform sampler2D ySampler;',
            'uniform sampler2D uSampler;',
            'uniform sampler2D vSampler;',
            'const mat4 YUV2RGB = mat4',
            '(',
            '1.1643828125, 0, 1.59602734375, -.87078515625,',
            '1.1643828125, -.39176171875, -.81296875, .52959375,',
            '1.1643828125, 2.017234375, 0, -1.081390625,',
            '0, 0, 0, 1',
            ');',

            'void main(void) {',
            'highp float y = texture2D(ySampler,  textureCoord).r;',
            'highp float u = texture2D(uSampler,  textureCoord).r;',
            'highp float v = texture2D(vSampler,  textureCoord).r;',
            'gl_FragColor = vec4(y, u, v, 1) * YUV2RGB;',
            '}'
        ].join('\n');

        var vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertexShader, vertexShaderScript);
        gl.compileShader(vertexShader);
        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
            console.log('Vertex shader failed to compile: ' + gl.getShaderInfoLog(vertexShader));
        }

        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, fragmentShaderScript);
        gl.compileShader(fragmentShader);
        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
            console.log('Fragment shader failed to compile: ' + gl.getShaderInfoLog(fragmentShader));
        }

        var program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.log('Program failed to compile: ' + gl.getProgramInfoLog(program));
        }

        gl.useProgram(program);

        this.shaderProgram = program;
    };

    /**
     * Initialize vertex buffers and attach to shader program
     */
    H264bsdCanvas.prototype.initBuffers = function() {
        var gl = this.contextGL;
        var program = this.shaderProgram;

        var vertexPosBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]), gl.STATIC_DRAW);

        var vertexPosRef = gl.getAttribLocation(program, 'vertexPos');
        gl.enableVertexAttribArray(vertexPosRef);
        gl.vertexAttribPointer(vertexPosRef, 2, gl.FLOAT, false, 0, 0);

        var texturePosBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);

        var texturePosRef = gl.getAttribLocation(program, 'texturePos');
        gl.enableVertexAttribArray(texturePosRef);
        gl.vertexAttribPointer(texturePosRef, 2, gl.FLOAT, false, 0, 0);

        this.texturePosBuffer = texturePosBuffer;
    };

    /**
     * Initialize GL textures and attach to shader program
     */
    H264bsdCanvas.prototype.initTextures = function() {
        var gl = this.contextGL;
        var program = this.shaderProgram;

        var yTextureRef = this.initTexture();
        var ySamplerRef = gl.getUniformLocation(program, 'ySampler');
        gl.uniform1i(ySamplerRef, 0);
        this.yTextureRef = yTextureRef;

        var uTextureRef = this.initTexture();
        var uSamplerRef = gl.getUniformLocation(program, 'uSampler');
        gl.uniform1i(uSamplerRef, 1);
        this.uTextureRef = uTextureRef;

        var vTextureRef = this.initTexture();
        var vSamplerRef = gl.getUniformLocation(program, 'vSampler');
        gl.uniform1i(vSamplerRef, 2);
        this.vTextureRef = vTextureRef;
    };

    /**
     * Create and configure a single texture
     */
    H264bsdCanvas.prototype.initTexture = function() {
        var gl = this.contextGL;

        var textureRef = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, textureRef);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.bindTexture(gl.TEXTURE_2D, null);

        return textureRef;
    };

    /**
     * Draw picture data to the canvas.
     * If this object is using WebGL, the data must be an I420 formatted ArrayBuffer,
     * Otherwise, data must be an RGBA formatted ArrayBuffer.
     */
    H264bsdCanvas.prototype.drawNextOutputPicture = function(width, height, croppingParams, data) {
        var gl = this.contextGL;
        if (gl) {
            this.drawNextOuptutPictureGL(width, height, croppingParams, data);
        } else {
            this.drawNextOuptutPictureRGBA(width, height, croppingParams, data);
        }
    };

    /**
     * Draw the next output picture using WebGL
     */
    H264bsdCanvas.prototype.drawNextOuptutPictureGL = function(width, height, croppingParams, data) {
        var gl = this.contextGL;
        var texturePosBuffer = this.texturePosBuffer;
        var yTextureRef = this.yTextureRef;
        var uTextureRef = this.uTextureRef;
        var vTextureRef = this.vTextureRef;

        if (!croppingParams) {
            gl.viewport(0, 0, width, height);
        } else {
            gl.viewport(0, 0, croppingParams.width, croppingParams.height);

            var tTop = croppingParams.top / height;
            var tLeft = croppingParams.left / width;
            var tBottom = croppingParams.height / height;
            var tRight = croppingParams.width / width;
            var texturePosValues = new Float32Array([tRight, tTop, tLeft, tTop, tRight, tBottom, tLeft, tBottom]);

            gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, texturePosValues, gl.DYNAMIC_DRAW);
        }
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, yTextureRef);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width, height, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, data[0]);

        gl.activeTexture(gl.TEXTURE1);
        gl.bindTexture(gl.TEXTURE_2D, uTextureRef);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width / 2, height / 2, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, data[1]);

        gl.activeTexture(gl.TEXTURE2);
        gl.bindTexture(gl.TEXTURE_2D, vTextureRef);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width / 2, height / 2, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, data[2]);

        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    };

    /**
     * Draw next output picture using ARGB data on a 2d canvas.
     */
    H264bsdCanvas.prototype.drawNextOuptutPictureRGBA = function(width, height, croppingParams, data) {
        // var canvas = this.canvasElement;
        //var argbData = data;
        //var ctx = canvas.getContext('2d');
        // var imageData = ctx.getImageData(0, 0, width, height);
        //this.imageData = this.ctx2d.getImageData(0, 0, width, height);
        this.imageData.data.set(data);
        //Module.print(typeof this.imageData.data);
        if (!croppingParams) {
            this.ctx2d.putImageData(this.imageData, 0, 0);
        } else {
            this.ctx2d.putImageData(this.imageData, -croppingParams.left, -croppingParams.top, 0, 0, croppingParams.width, croppingParams.height);
        }
    };
    H264bsdCanvas.prototype.ctx2d = null;
    H264bsdCanvas.prototype.imageData = null;
    H264bsdCanvas.prototype.initRGB = function(width, height) {
        this.ctx2d = this.canvasElement.getContext('2d');
        this.imageData = this.ctx2d.getImageData(0, 0, width, height);
        //Module.print(this.imageData);
    };
    return H264bsdCanvas;

}));
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 67108864;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// === Body ===

var ASM_CONSTS = [function($0) { clearTimeout($0) },
 function($0) { return (new Date()).getTime(); }];

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}



STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 49888;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_MonaClient_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });


/* memory initializer */ allocate([180,146,0,0,68,173,0,0,112,147,0,0,54,173,0,0,0,0,0,0,8,0,0,0,112,147,0,0,39,173,0,0,1,0,0,0,8,0,0,0,180,146,0,0,40,171,0,0,140,147,0,0,195,170,0,0,0,0,0,0,1,0,0,0,80,0,0,0,0,0,0,0,180,146,0,0,2,171,0,0,180,146,0,0,135,174,0,0,112,147,0,0,123,174,0,0,0,0,0,0,88,0,0,0,112,147,0,0,110,174,0,0,1,0,0,0,88,0,0,0,180,146,0,0,34,174,0,0,220,146,0,0,80,174,0,0,128,0,0,0,0,0,0,0,180,146,0,0,175,177,0,0,180,146,0,0,206,177,0,0,180,146,0,0,237,177,0,0,180,146,0,0,12,178,0,0,180,146,0,0,43,178,0,0,180,146,0,0,74,178,0,0,180,146,0,0,105,178,0,0,180,146,0,0,136,178,0,0,180,146,0,0,167,178,0,0,180,146,0,0,198,178,0,0,180,146,0,0,229,178,0,0,180,146,0,0,4,179,0,0,140,147,0,0,35,179,0,0,0,0,0,0,1,0,0,0,80,0,0,0,0,0,0,0,140,147,0,0,98,179,0,0,0,0,0,0,1,0,0,0,80,0,0,0,0,0,0,0,180,146,0,0,185,189,0,0,220,146,0,0,25,190,0,0,64,1,0,0,0,0,0,0,220,146,0,0,198,189,0,0,80,1,0,0,0,0,0,0,180,146,0,0,231,189,0,0,220,146,0,0,244,189,0,0,48,1,0,0,0,0,0,0,220,146,0,0,60,191,0,0,40,1,0,0,0,0,0,0,220,146,0,0,73,191,0,0,40,1,0,0,0,0,0,0,220,146,0,0,89,191,0,0,120,1,0,0,0,0,0,0,220,146,0,0,106,191,0,0,120,1,0,0,0,0,0,0,220,146,0,0,159,191,0,0,64,1,0,0,0,0,0,0,220,146,0,0,123,191,0,0,168,1,0,0,0,0,0,0,220,146,0,0,193,191,0,0,64,1,0,0,0,0,0,0,84,147,0,0,233,191,0,0,84,147,0,0,235,191,0,0,84,147,0,0,238,191,0,0,84,147,0,0,240,191,0,0,84,147,0,0,242,191,0,0,84,147,0,0,244,191,0,0,84,147,0,0,246,191,0,0,84,147,0,0,248,191,0,0,84,147,0,0,250,191,0,0,84,147,0,0,252,191,0,0,84,147,0,0,254,191,0,0,84,147,0,0,0,192,0,0,84,147,0,0,2,192,0,0,84,147,0,0,4,192,0,0,220,146,0,0,6,192,0,0,48,1,0,0,0,0,0,0,172,147,0,0,228,147,0,0,4,148,0,0,0,0,0,0,6,148,0,0,0,0,3,0,22,148,0,0,0,0,3,0,54,148,0,0,0,0,3,0,0,0,0,0,0,0,0,0,86,148,0,0,0,0,3,0,138,148,0,0,0,0,4,0,194,148,0,0,0,0,4,0,66,149,0,0,0,0,4,0,198,149,0,0,0,0,4,0,50,150,0,0,0,0,4,0,254,150,0,0,0,0,4,0,206,151,0,0,0,0,4,0,142,152,0,0,0,0,4,0,0,0,0,0,0,0,0,0,170,155,0,0,0,0,4,0,162,158,0,0,1,0,4,0,162,158,0,0,2,0,4,0,162,158,0,0,3,0,4,0,162,158,0,0,4,0,4,0,162,158,0,0,6,0,4,0,162,158,0,0,8,0,4,0,162,158,0,0,10,0,4,0,162,158,0,0,13,0,4,0,198,161,0,0,4,0,4,0,198,161,0,0,5,0,4,0,198,161,0,0,6,0,4,0,198,161,0,0,7,0,4,0,198,161,0,0,8,0,4,0,198,161,0,0,9,0,4,0,198,161,0,0,11,0,4,0,198,161,0,0,13,0,4,0,0,0,0,0,249,255,255,255,53,0,0,0,141,255,255,255,253,1,0,0,248,250,255,255,108,6,0,0,100,219,255,255,72,73,0,0,156,36,0,0,108,6,0,0,8,5,0,0,253,1,0,0,115,0,0,0,53,0,0,0,7,0,0,0,0,0,0,0,249,255,255,255,53,0,0,0,141,255,255,255,253,1,0,0,248,250,255,255,108,6,0,0,100,219,255,255,72,73,0,0,156,36,0,0,108,6,0,0,8,5,0,0,253,1,0,0,115,0,0,0,53,0,0,0,7,0,0,0,0,0,0,0,248,255,255,255,55,0,0,0,126,255,255,255,244,1,0,0,157,250,255,255,210,5,0,0,150,217,255,255,60,73,0,0,206,34,0,0,248,6,0,0,173,4,0,0,4,2,0,0,100,0,0,0,52,0,0,0,7,0,0,0,0,0,0,0,248,255,255,255,55,0,0,0,126,255,255,255,244,1,0,0,157,250,255,255,210,5,0,0,150,217,255,255,60,73,0,0,206,34,0,0,248,6,0,0,173,4,0,0,4,2,0,0,100,0,0,0,52,0,0,0,7,0,0,0,0,0,0,0,247,255,255,255,56,0,0,0,111,255,255,255,232,1,0,0,66,250,255,255,42,5,0,0,202,215,255,255,26,73,0,0,0,33,0,0,118,7,0,0,82,4,0,0,8,2,0,0,87,0,0,0,51,0,0,0,6,0,0,0,0,0,0,0,247,255,255,255,56,0,0,0,111,255,255,255,232,1,0,0,66,250,255,255,42,5,0,0,202,215,255,255,26,73,0,0,0,33,0,0,118,7,0,0,82,4,0,0,8,2,0,0,87,0,0,0,51,0,0,0,6,0,0,0,0,0,0,0,246,255,255,255,56,0,0,0,95,255,255,255,217,1,0,0,233,249,255,255,116,4,0,0,0,214,255,255,226,72,0,0,51,31,0,0,231,7,0,0,248,3,0,0,10,2,0,0,74,0,0,0,49,0,0,0,5,0,0,0,0,0,0,0,246,255,255,255,56,0,0,0,95,255,255,255,217,1,0,0,233,249,255,255,116,4,0,0,0,214,255,255,226,72,0,0,51,31,0,0,231,7,0,0,248,3,0,0,10,2,0,0,74,0,0,0,49,0,0,0,5,0,0,0,0,0,0,0,246,255,255,255,57,0,0,0,78,255,255,255,200,1,0,0,145,249,255,255,176,3,0,0,59,212,255,255,146,72,0,0,104,29,0,0,75,8,0,0,158,3,0,0,9,2,0,0,61,0,0,0,48,0,0,0,5,0,0,0,0,0,0,0,246,255,255,255,57,0,0,0,78,255,255,255,200,1,0,0,145,249,255,255,176,3,0,0,59,212,255,255,146,72,0,0,104,29,0,0,75,8,0,0,158,3,0,0,9,2,0,0,61,0,0,0,48,0,0,0,5,0,0,0,0,0,0,0,245,255,255,255,57,0,0,0,61,255,255,255,179,1,0,0,58,249,255,255,222,2,0,0,122,210,255,255,45,72,0,0,160,27,0,0,162,8,0,0,70,3,0,0,7,2,0,0,49,0,0,0,46,0,0,0,4,0,0,0,0,0,0,0,245,255,255,255,57,0,0,0,61,255,255,255,179,1,0,0,58,249,255,255,222,2,0,0,122,210,255,255,45,72,0,0,160,27,0,0,162,8,0,0,70,3,0,0,7,2,0,0,49,0,0,0,46,0,0,0,4,0,0,0,0,0,0,0,244,255,255,255,57,0,0,0,44,255,255,255,155,1,0,0,230,248,255,255,253,1,0,0,190,208,255,255,178,71,0,0,221,25,0,0,237,8,0,0,239,2,0,0,2,2,0,0,38,0,0,0,44,0,0,0,4,0,0,0,0,0,0,0,244,255,255,255,57,0,0,0,44,255,255,255,155,1,0,0,230,248,255,255,253,1,0,0,190,208,255,255,178,71,0,0,221,25,0,0,237,8,0,0,239,2,0,0,2,2,0,0,38,0,0,0,44,0,0,0,4,0,0,0,255,255,255,255,243,255,255,255,57,0,0,0,26,255,255,255,128,1,0,0,149,248,255,255,15,1,0,0,10,207,255,255,33,71,0,0,30,24,0,0,43,9,0,0,154,2,0,0,252,1,0,0,28,0,0,0,42,0,0,0,4,0,0,0,255,255,255,255,243,255,255,255,57,0,0,0,26,255,255,255,128,1,0,0,149,248,255,255,15,1,0,0,10,207,255,255,33,71,0,0,30,24,0,0,43,9,0,0,154,2,0,0,252,1,0,0,28,0,0,0,42,0,0,0,4,0,0,0,255,255,255,255,241,255,255,255,56,0,0,0,8,255,255,255,98,1,0,0,70,248,255,255,18,0,0,0,93,205,255,255,122,70,0,0,100,22,0,0,94,9,0,0,71,2,0,0,244,1,0,0,18,0,0,0,40,0,0,0,3,0,0,0,255,255,255,255,241,255,255,255,56,0,0,0,8,255,255,255,98,1,0,0,70,248,255,255,18,0,0,0,93,205,255,255,122,70,0,0,100,22,0,0,94,9,0,0,71,2,0,0,244,1,0,0,18,0,0,0,40,0,0,0,3,0,0,0,255,255,255,255,240,255,255,255,55,0,0,0,246,254,255,255,64,1,0,0,252,247,255,255,6,255,255,255,184,203,255,255,191,69,0,0,177,20,0,0,134,9,0,0,246,1,0,0,235,1,0,0,9,0,0,0,39,0,0,0,3,0,0,0,255,255,255,255,240,255,255,255,55,0,0,0,246,254,255,255,64,1,0,0,252,247,255,255,6,255,255,255,184,203,255,255,191,69,0,0,177,20,0,0,134,9,0,0,246,1,0,0,235,1,0,0,9,0,0,0,39,0,0,0,3,0,0,0,255,255,255,255,239,255,255,255,54,0,0,0,228,254,255,255,27,1,0,0,181,247,255,255,237,253,255,255,29,202,255,255,240,68,0,0,6,19,0,0,162,9,0,0,167,1,0,0,224,1,0,0,1,0,0,0,37,0,0,0,3,0,0,0,255,255,255,255,239,255,255,255,54,0,0,0,228,254,255,255,27,1,0,0,181,247,255,255,237,253,255,255,29,202,255,255,240,68,0,0,6,19,0,0,162,9,0,0,167,1,0,0,224,1,0,0,1,0,0,0,37,0,0,0,3,0,0,0,255,255,255,255,238,255,255,255,52,0,0,0,209,254,255,255,243,0,0,0,115,247,255,255,199,252,255,255,141,200,255,255,12,68,0,0,98,17,0,0,180,9,0,0,91,1,0,0,212,1,0,0,249,255,255,255,35,0,0,0,2,0,0,0,255,255,255,255,238,255,255,255,52,0,0,0,209,254,255,255,243,0,0,0,115,247,255,255,199,252,255,255,141,200,255,255,12,68,0,0,98,17,0,0,180,9,0,0,91,1,0,0,212,1,0,0,249,255,255,255,35,0,0,0,2,0,0,0,255,255,255,255,236,255,255,255,50,0,0,0,191,254,255,255,199,0,0,0,54,247,255,255,147,251,255,255,9,199,255,255,21,67,0,0,199,15,0,0,188,9,0,0,18,1,0,0,198,1,0,0,242,255,255,255,33,0,0,0,2,0,0,0,255,255,255,255,236,255,255,255,50,0,0,0,191,254,255,255,199,0,0,0,54,247,255,255,147,251,255,255,9,199,255,255,21,67,0,0,199,15,0,0,188,9,0,0,18,1,0,0,198,1,0,0,242,255,255,255,33,0,0,0,2,0,0,0,255,255,255,255,235,255,255,255,47,0,0,0,173,254,255,255,151,0,0,0,255,246,255,255,81,250,255,255,144,197,255,255,11,66,0,0,53,14,0,0,186,9,0,0,204,0,0,0,184,1,0,0,235,255,255,255,31,0,0,0,2,0,0,0,255,255,255,255,235,255,255,255,47,0,0,0,173,254,255,255,151,0,0,0,255,246,255,255,81,250,255,255,144,197,255,255,11,66,0,0,53,14,0,0,186,9,0,0,204,0,0,0,184,1,0,0,235,255,255,255,31,0,0,0,2,0,0,0,255,255,255,255,233,255,255,255,44,0,0,0,155,254,255,255,101,0,0,0,206,246,255,255,3,249,255,255,38,196,255,255,240,64,0,0,173,12,0,0,175,9,0,0,136,0,0,0,169,1,0,0,229,255,255,255,29,0,0,0,2,0,0,0,255,255,255,255,233,255,255,255,44,0,0,0,155,254,255,255,101,0,0,0,206,246,255,255,3,249,255,255,38,196,255,255,240,64,0,0,173,12,0,0,175,9,0,0,136,0,0,0,169,1,0,0,229,255,255,255,29,0,0,0,2,0,0,0,255,255,255,255,232,255,255,255,41,0,0,0,137,254,255,255,46,0,0,0,164,246,255,255,169,247,255,255,201,194,255,255,195,63,0,0,48,11,0,0,156,9,0,0,72,0,0,0,153,1,0,0,224,255,255,255,28,0,0,0,2,0,0,0,255,255,255,255,232,255,255,255,41,0,0,0,137,254,255,255,46,0,0,0,164,246,255,255,169,247,255,255,201,194,255,255,195,63,0,0,48,11,0,0,156,9,0,0,72,0,0,0,153,1,0,0,224,255,255,255,28,0,0,0,2,0,0,0,255,255,255,255,230,255,255,255,37,0,0,0,120,254,255,255,245,255,255,255,128,246,255,255,66,246,255,255,123,193,255,255,133,62,0,0,190,9,0,0,128,9,0,0,11,0,0,0,136,1,0,0,219,255,255,255,26,0,0,0,1,0,0,0,255,255,255,255,230,255,255,255,37,0,0,0,120,254,255,255,245,255,255,255,128,246,255,255,66,246,255,255,123,193,255,255,133,62,0,0,190,9,0,0,128,9,0,0,11,0,0,0,136,1,0,0,219,255,255,255,26,0,0,0,1,0,0,0,171,167,0,0,193,167,0,0,232,167,0,0,14,168,0,0,36,168,0,0,75,168,0,0,113,168,0,0,135,168,0,0,174,168,0,0,212,168,0,0,234,168,0,0,17,169,0,0,53,169,0,0,75,169,0,0,114,169,0,0,53,169,0,0,150,169,0,0,189,169,0,0,53,169,0,0,150,169,0,0,189,169,0,0,53,169,0,0,150,169,0,0,189,169,0,0,225,169,0,0,247,169,0,0,30,170,0,0,0,0,0,0,0,0,0,20,190,40,10,29,205,165,83,36,169,127,89,38,117,98,70,44,114,140,115,45,129,252,177,46,0,0,0,52,215,32,174,52,148,214,98,53,150,174,29,54,244,71,222,54,122,79,164,55,101,190,55,60,36,200,159,60,190,40,10,61,245,198,118,61,11,140,229,61,97,99,86,62,46,58,201,62,62,255,61,63,188,162,180,63,5,139,22,68,205,165,83,68,106,155,145,68,251,101,208,68,0,0,16,69,81,100,80,69,21,142,145,69,187,120,211,69,243,31,22,70,169,127,89,70,0,148,157,70,76,89,226,70,17,204,39,71,252,232,109,71,227,172,180,71,191,20,252,71,215,14,34,76,117,98,70,76,231,3,107,76,232,241,143,76,63,43,181,76,192,174,218,76,73,123,0,77,198,143,38,77,42,235,76,77,114,140,115,77,165,114,154,77,211,156,193,77,18,10,233,77,130,185,16,78,72,170,56,78,145,219,96,78,144,76,137,78,129,252,177,78,161,234,218,78,54,22,4,79,139,126,45,79,239,34,87,79,184,2,129,79,62,29,171,79,224,113,213,79,0,0,0,84,129,99,21,84,42,227,42,84,177,126,64,84,207,53,86,84,62,8,108,84,187,245,129,84,3,254,151,84,215,32,174,84,246,93,196,84,36,181,218,84,36,38,241,84,188,176,7,85,177,84,30,85,203,17,53,85,212,231,75,85,148,214,98,85,216,221,121,85,108,253,144,85,28,53,168,85,184,132,191,85,14,236,214,85,239,106,238,85,43,1,6,86,150,174,29,86,2,115,53,86,67,78,77,86,45,64,101,86,150,72,125,86,83,103,149,86,61,156,173,86,43,231,197,86,244,71,222,86,115,190,246,86,128,74,15,87,247,235,39,87,178,162,64,87,141,110,89,87,100,79,114,87,20,69,139,87,122,79,164,87,117,110,189,87,226,161,214,87,161,233,239,87,201,162,4,92,202,90,17,92,196,28,30,92,167,232,42,92,101,190,55,92,238,157,68,92,51,135,81,92,38,122,94,92,185,118,107,92,220,124,120,92,131,140,133,92,159,165,146,92,36,200,159,92,2,244,172,92,46,41,186,92,154,103,199,92,58,175,212,92,0,0,226,92,224,89,239,92,206,188,252,92,190,40,10,93,164,157,23,93,115,27,37,93,32,162,50,93,160,49,64,93,231,201,77,93,233,106,91,93,156,20,105,93,245,198,118,93,233,129,132,93,109,69,146,93,118,17,160,93,250,229,173,93,239,194,187,93,74,168,201,93,1,150,215,93,11,140,229,93,93,138,243,93,238,144,1,94,179,159,15,94,165,182,29,94,184,213,43,94,228,252,57,94,31,44,72,94,97,99,86,94,160,162,100,94,212,233,114,94,243,56,129,94,245,143,143,94,209,238,157,94,127,85,172,94,246,195,186,94,46,58,201,94,31,184,215,94,192,61,230,94,9,203,244,94,243,95,3,95,117,252,17,95,135,160,32,95,34,76,47,95,62,255,61,95,211,185,76,95,219,123,91,95,76,69,106,95,32,22,121,95,80,238,135,95,212,205,150,95,165,180,165,95,188,162,180,95,18,152,195,95,160,148,210,95,95,152,225,95,72,163,240,95,84,181,255,95,63,103,7,100,94,247,14,100,5,139,22,100,48,34,30,100,221,188,37,100,7,91,45,100,173,252,52,100,201,161,60,100,90,74,68,100,93,246,75,100,205,165,83,100,169,88,91,100,237,14,99,100,150,200,106,100,162,133,114,100,12,70,122,100,211,9,130,100,244,208,137,100,106,155,145,100,53,105,153,100,80,58,161,100,186,14,169,100,110,230,176,100,108,193,184,100,175,159,192,100,53,129,200,100,251,101,208,100,255,77,216,100,62,57,224,100,182,39,232,100,99,25,240,100,68,14,248,100,85,6,0,101,149,1,8,101,0,0,16,101,148,1,24,101,79,6,32,101,45,14,40,101,46,25,48,101,78,39,56,101,138,56,64,101,226,76,72,101,81,100,80,101,213,126,88,101,110,156,96,101,23,189,104,101,207,224,112,101,147,7,121,101,98,49,129,101,57,94,137,101,21,142,145,101,244,192,153,101,213,246,161,101,181,47,170,101,146,107,178,101,105,170,186,101,57,236,194,101,0,49,203,101,187,120,211,101,104,195,219,101,5,17,228,101,144,97,236,101,7,181,244,101,104,11,253,101,177,100,5,102,224,192,13,102,243,31,22,102,232,129,30,102,188,230,38,102,111,78,47,102,253,184,55,102,102,38,64,102,167,150,72,102,190,9,81,102,169,127,89,102,103,248,97,102,245,115,106,102,82,242,114,102,124,115,123,102,113,247,131,102,47,126,140,102,181,7,149,102,0,148,157,102,15,35,166,102,224,180,174,102,113,73,183,102,192,224,191,102,204,122,200,102,148,23,209,102,20,183,217,102,76,89,226,102,58,254,234,102,220,165,243,102,48,80,252,102,53,253,4,103,234,172,13,103,75,95,22,103,89,20,31,103,17,204,39,103,113,134,48,103,120,67,57,103,37,3,66,103,117,197,74,103,103,138,83,103,250,81,92,103,44,28,101,103,252,232,109,103,103,184,118,103,109,138,127,103,11,95,136,103,65,54,145,103,12,16,154,103,108,236,162,103,95,203,171,103,227,172,180,103,246,144,189,103,152,119,198,103,199,96,207,103,129,76,216,103,197,58,225,103,146,43,234,103,230,30,243,103,191,20,252,103,142,134,2,108,255,3,7,108,176,130,11,108,161,2,16,108,209,131,20,108,64,6,25,108,237,137,29,108,215,14,34,108,254,148,38,108,96,28,43,108,254,164,47,108,215,46,52,108,233,185,56,108,53,70,61,108,185,211,65,108,117,98,70,108,105,242,74,108,147,131,79,108,243,21,84,108,137,169,88,108,83,62,93,108,81,212,97,108,131,107,102,108,231,3,107,108,126,157,111,108,71,56,116,108,64,212,120,108,106,113,125,108,195,15,130,108,76,175,134,108,3,80,139,108,232,241,143,108,251,148,148,108,58,57,153,108,165,222,157,108,60,133,162,108,254,44,167,108,234,213,171,108,0,128,176,108,63,43,181,108,167,215,185,108,55,133,190,108,238,51,195,108,204,227,199,108,209,148,204,108,251,70,209,108,75,250,213,108,192,174,218,108,88,100,223,108,20,27,228,108,243,210,232,108,245,139,237,108,24,70,242,108,93,1,247,108,195,189,251,108,73,123,0,109,239,57,5,109,180,249,9,109,152,186,14,109,154,124,19,109,186,63,24,109,247,3,29,109,80,201,33,109,198,143,38,109,87,87,43,109,3,32,48,109,202,233,52,109,171,180,57,109,166,128,62,109,185,77,67,109,229,27,72,109,42,235,76,109,133,187,81,109,248,140,86,109,129,95,91,109,33,51,96,109,214,7,101,109,160,221,105,109,127,180,110,109,114,140,115,109,120,101,120,109,146,63,125,109,191,26,130,109,253,246,134,109,78,212,139,109,176,178,144,109,34,146,149,109,165,114,154,109,56,84,159,109,218,54,164,109,140,26,169,109,76,255,173,109,26,229,178,109,245,203,183,109,222,179,188,109,211,156,193,109,213,134,198,109,226,113,203,109,251,93,208,109,31,75,213,109,77,57,218,109,133,40,223,109,199,24,228,109,18,10,233,109,102,252,237,109,194,239,242,109,38,228,247,109,146,217,252,109,4,208,1,110,125,199,6,110,253,191,11,110,130,185,16,110,12,180,21,110,156,175,26,110,47,172,31,110,199,169,36,110,99,168,41,110,2,168,46,110,163,168,51,110,72,170,56,110,238,172,61,110,150,176,66,110,63,181,71,110,233,186,76,110,147,193,81,110,61,201,86,110,231,209,91,110,145,219,96,110,57,230,101,110,223,241,106,110,132,254,111,110,38,12,117,110,198,26,122,110,98,42,127,110,251,58,132,110,144,76,137,110,33,95,142,110,174,114,147,110,53,135,152,110,183,156,157,110,51,179,162,110,169,202,167,110,24,227,172,110,129,252,177,110,226,22,183,110,59,50,188,110,141,78,193,110,214,107,198,110,23,138,203,110,78,169,208,110,124,201,213,110,161,234,218,110,187,12,224,110,202,47,229,110,207,83,234,110,200,120,239,110,182,158,244,110,151,197,249,110,109,237,254,110,54,22,4,111,242,63,9,111,160,106,14,111,65,150,19,111,211,194,24,111,88,240,29,111,205,30,35,111,52,78,40,111,139,126,45,111,210,175,50,111,9,226,55,111,48,21,61,111,70,73,66,111,75,126,71,111,62,180,76,111,32,235,81,111,239,34,87,111,172,91,92,111,87,149,97,111,238,207,102,111,114,11,108,111,226,71,113,111,62,133,118,111,133,195,123,111,184,2,129,111,214,66,134,111,222,131,139,111,209,197,144,111,174,8,150,111,116,76,155,111,36,145,160,111,189,214,165,111,62,29,171,111,168,100,176,111,251,172,181,111,53,246,186,111,86,64,192,111,95,139,197,111,78,215,202,111,36,36,208,111,224,113,213,111,131,192,218,111,10,16,224,111,120,96,229,111,202,177,234,111,1,4,240,111,29,87,245,111,28,171,250,111,0,0,0,116,227,170,2,116,56,86,5,116,255,1,8,116,55,174,10,116,224,90,13,116,250,7,16,116,134,181,18,116,129,99,21,116,238,17,24,116,203,192,26,116,24,112,29,116,213,31,32,116,3,208,34,116,160,128,37,116,173,49,40,116,42,227,42,116,22,149,45,116,114,71,48,116,61,250,50,116,118,173,53,116,31,97,56,116,54,21,59,116,188,201,61,116,177,126,64,116,20,52,67,116,229,233,69,116,36,160,72,116,209,86,75,116,236,13,78,116,117,197,80,116,107,125,83,116,207,53,86,116,159,238,88,116,221,167,91,116,136,97,94,116,160,27,97,116,37,214,99,116,22,145,102,116,116,76,105,116,62,8,108,116,116,196,110,116,22,129,113,116,37,62,116,116,159,251,118,116,132,185,121,116,214,119,124,116,147,54,127,116,187,245,129,116,78,181,132,116,76,117,135,116,182,53,138,116,138,246,140,116,200,183,143,116,114,121,146,116,133,59,149,116,3,254,151,116,235,192,154,116,62,132,157,116,250,71,160,116,32,12,163,116,175,208,165,116,168,149,168,116,11,91,171,116,215,32,174,116,12,231,176,116,170,173,179,116,177,116,182,116,33,60,185,116,250,3,188,116,59,204,190,116,228,148,193,116,246,93,196,116,113,39,199,116,83,241,201,116,157,187,204,116,79,134,207,116,105,81,210,116,235,28,213,116,212,232,215,116,36,181,218,116,220,129,221,116,251,78,224,116,129,28,227,116,110,234,229,116,194,184,232,116,124,135,235,116,157,86,238,116,36,38,241,116,18,246,243,116,102,198,246,116,33,151,249,116,65,104,252,116,199,57,255,116,179,11,2,117,5,222,4,117,188,176,7,117,216,131,10,117,91,87,13,117,66,43,16,117,142,255,18,117,64,212,21,117,86,169,24,117,209,126,27,117,177,84,30,117,245,42,33,117,158,1,36,117,171,216,38,117,29,176,41,117,242,135,44,117,44,96,47,117,202,56,50,117,203,17,53,117,48,235,55,117,249,196,58,117,37,159,61,117,181,121,64,117,168,84,67,117,254,47,70,117,183,11,73,117,212,231,75,117,83,196,78,117,52,161,81,117,121,126,84,117,32,92,87,117,42,58,90,117,150,24,93,117,100,247,95,117,148,214,98,117,39,182,101,117,27,150,104,117,113,118,107,117,41,87,110,117,67,56,113,117,190,25,116,117,154,251,118,117,216,221,121,117,119,192,124,117,120,163,127,117,217,134,130,117,155,106,133,117,190,78,136,117,66,51,139,117,39,24,142,117,108,253,144,117,17,227,147,117,23,201,150,117,125,175,153,117,67,150,156,117,106,125,159,117,240,100,162,117,214,76,165,117,28,53,168,117,194,29,171,117,199,6,174,117,43,240,176,117,240,217,179,117,19,196,182,117,149,174,185,117,119,153,188,117,184,132,191,117,87,112,194,117,86,92,197,117,179,72,200,117,110,53,203,117,137,34,206,117,1,16,209,117,216,253,211,117,14,236,214,117,161,218,217,117,147,201,220,117,226,184,223,117,144,168,226,117,155,152,229,117,4,137,232,117,203,121,235,117,239,106,238,117,112,92,241,117,79,78,244,117,139,64,247,117,36,51,250,117,27,38,253,117,110,25,0,118,30,13,3,118,43,1,6,118,149,245,8,118,92,234,11,118,127,223,14,118,254,212,17,118,218,202,20,118,18,193,23,118,166,183,26,118,150,174,29,118,227,165,32,118,139,157,35,118,143,149,38,118,239,141,41,118,170,134,44,118,193,127,47,118,52,121,50,118,2,115,53,118,43,109,56,118,176,103,59,118,144,98,62,118,203,93,65,118,96,89,68,118,81,85,71,118,156,81,74,118,67,78,77,118,68,75,80,118,159,72,83,118,85,70,86,118,101,68,89,118,208,66,92,118,149,65,95,118,180,64,98,118,45,64,101,118,0,64,104,118,45,64,107,118,179,64,110,118,148,65,113,118,206,66,116,118,98,68,119,118,79,70,122,118,150,72,125,118,54,75,128,118,47,78,131,118,129,81,134,118,44,85,137,118,49,89,140,118,142,93,143,118,69,98,146,118,83,103,149,118,187,108,152,118,123,114,155,118,148,120,158,118,5,127,161,118,207,133,164,118,241,140,167,118,107,148,170,118,61,156,173,118,104,164,176,118,234,172,179,118,196,181,182,118,246,190,185,118,128,200,188,118,97,210,191,118,154,220,194,118,43,231,197,118,19,242,200,118,82,253,203,118,233,8,207,118,215,20,210,118,28,33,213,118,184,45,216,118,170,58,219,118,244,71,222,118,149,85,225,118,141,99,228,118,219,113,231,118,127,128,234,118,123,143,237,118,204,158,240,118,117,174,243,118,115,190,246,118,200,206,249,118,114,223,252,118,115,240,255,118,202,1,3,119,119,19,6,119,122,37,9,119,210,55,12,119,128,74,15,119,132,93,18,119,222,112,21,119,141,132,24,119,145,152,27,119,235,172,30,119,154,193,33,119,158,214,36,119,247,235,39,119,166,1,43,119,169,23,46,119,1,46,49,119,174,68,52,119,176,91,55,119,7,115,58,119,178,138,61,119,178,162,64,119,6,187,67,119,175,211,70,119,172,236,73,119,254,5,77,119,163,31,80,119,157,57,83,119,235,83,86,119,141,110,89,119,131,137,92,119,204,164,95,119,106,192,98,119,91,220,101,119,160,248,104,119,56,21,108,119,36,50,111,119,100,79,114,119,247,108,117,119,221,138,120,119,22,169,123,119,163,199,126,119,131,230,129,119,181,5,133,119,59,37,136,119,20,69,139,119,63,101,142,119,190,133,145,119,143,166,148,119,178,199,151,119,41,233,154,119,241,10,158,119,12,45,161,119,122,79,164,119,58,114,167,119,76,149,170,119,176,184,173,119,103,220,176,119,111,0,180,119,202,36,183,119,118,73,186,119,117,110,189,119,197,147,192,119,103,185,195,119,90,223,198,119,159,5,202,119,54,44,205,119,30,83,208,119,87,122,211,119,226,161,214,119,190,201,217,119,236,241,220,119,106,26,224,119,58,67,227,119,90,108,230,119,204,149,233,119,142,191,236,119,161,233,239,119,5,20,243,119,186,62,246,119,192,105,249,119,22,149,252,119,188,192,255,119,89,118,1,124,125,12,3,124,201,162,4,124,61,57,6,124,217,207,7,124,157,102,9,124,137,253,10,124,158,148,12,124,218,43,14,124,62,195,15,124,202,90,17,124,126,242,18,124,90,138,20,124,93,34,22,124,137,186,23,124,220,82,25,124,87,235,26,124,250,131,28,124,196,28,30,124,182,181,31,124,208,78,33,124,17,232,34,124,121,129,36,124,10,27,38,124,194,180,39,124,161,78,41,124,167,232,42,124,214,130,44,124,43,29,46,124,168,183,47,124,76,82,49,124,23,237,50,124,10,136,52,124,36,35,54,124,101,190,55,124,205,89,57,124,93,245,58,124,19,145,60,124,241,44,62,124,246,200,63,124,34,101,65,124,116,1,67,124,238,157,68,124,143,58,70,124,86,215,71,124,69,116,73,124,90,17,75,124,150,174,76,124,249,75,78,124,131,233,79,124,51,135,81,124,10,37,83,124,8,195,84,124,45,97,86,124,120,255,87,124,234,157,89,124,130,60,91,124,65,219,92,124,38,122,94,124,50,25,96,124,100,184,97,124,189,87,99,124,60,247,100,124,226,150,102,124,174,54,104,124,160,214,105,124,185,118,107,124,247,22,109,124,92,183,110,124,232,87,112,124,153,248,113,124,113,153,115,124,111,58,117,124,146,219,118,124,220,124,120,124,76,30,122,124,226,191,123,124,158,97,125,124,128,3,127,124,136,165,128,124,182,71,130,124,10,234,131,124,131,140,133,124,34,47,135,124,232,209,136,124,211,116,138,124,227,23,140,124,26,187,141,124,118,94,143,124,248,1,145,124,159,165,146,124,108,73,148,124,95,237,149,124,119,145,151,124,181,53,153,124,25,218,154,124,161,126,156,124,80,35,158,124,36,200,159,124,29,109,161,124,59,18,163,124,127,183,164,124,232,92,166,124,119,2,168,124,43,168,169,124,4,78,171,124,2,244,172,124,38,154,174,124,110,64,176,124,220,230,177,124,111,141,179,124,39,52,181,124,5,219,182,124,7,130,184,124,46,41,186,124,122,208,187,124,236,119,189,124,130,31,191,124,61,199,192,124,29,111,194,124,34,23,196,124,76,191,197,124,154,103,199,124,13,16,201,124,166,184,202,124,99,97,204,124,68,10,206,124,75,179,207,124,118,92,209,124,197,5,211,124,58,175,212,124,210,88,214,124,144,2,216,124,114,172,217,124,121,86,219,124,164,0,221,124,243,170,222,124,103,85,224,124,0,0,226,124,189,170,227,124,158,85,229,124,163,0,231,124,205,171,232,124,28,87,234,124,142,2,236,124,37,174,237,124,224,89,239,124,191,5,241,124,195,177,242,124,234,93,244,124,54,10,246,124,166,182,247,124,58,99,249,124,242,15,251,124,206,188,252,124,206,105,254,124,243,22,0,125,59,196,1,125,167,113,3,125,55,31,5,125,235,204,6,125,194,122,8,125,190,40,10,125,222,214,11,125,33,133,13,125,136,51,15,125,19,226,16,125,194,144,18,125,148,63,20,125,138,238,21,125,164,157,23,125,225,76,25,125,66,252,26,125,199,171,28,125,111,91,30,125,58,11,32,125,42,187,33,125,61,107,35,125,115,27,37,125,205,203,38,125,74,124,40,125,234,44,42,125,174,221,43,125,150,142,45,125,161,63,47,125,207,240,48,125,32,162,50,125,149,83,52,125,45,5,54,125,232,182,55,125,198,104,57,125,200,26,59,125,237,204,60,125,53,127,62,125,160,49,64,125,46,228,65,125,223,150,67,125,180,73,69,125,171,252,70,125,198,175,72,125,3,99,74,125,99,22,76,125,231,201,77,125,141,125,79,125,86,49,81,125,66,229,82,125,81,153,84,125,131,77,86,125,216,1,88,125,79,182,89,125,233,106,91,125,166,31,93,125,134,212,94,125,136,137,96,125,173,62,98,125,245,243,99,125,96,169,101,125,237,94,103,125,156,20,105,125,111,202,106,125,100,128,108,125,123,54,110,125,181,236,111,125,17,163,113,125,144,89,115,125,50,16,117,125,245,198,118,125,220,125,120,125,228,52,122,125,15,236,123,125,93,163,125,125,204,90,127,125,94,18,129,125,18,202,130,125,233,129,132,125,226,57,134,125,253,241,135,125,58,170,137,125,154,98,139,125,27,27,141,125,191,211,142,125,133,140,144,125,109,69,146,125,119,254,147,125,163,183,149,125,241,112,151,125,97,42,153,125,243,227,154,125,168,157,156,125,126,87,158,125,118,17,160,125,144,203,161,125,204,133,163,125,42,64,165,125,169,250,166,125,75,181,168,125,14,112,170,125,243,42,172,125,250,229,173,125,35,161,175,125,109,92,177,125,217,23,179,125,103,211,180,125,22,143,182,125,231,74,184,125,218,6,186,125,239,194,187,125,37,127,189,125,124,59,191,125,245,247,192,125,144,180,194,125,76,113,196,125,42,46,198,125,41,235,199,125,74,168,201,125,140,101,203,125,239,34,205,125,116,224,206,125,27,158,208,125,226,91,210,125,203,25,212,125,213,215,213,125,1,150,215,125,78,84,217,125,188,18,219,125,76,209,220,125,252,143,222,125,206,78,224,125,193,13,226,125,213,204,227,125,11,140,229,125,97,75,231,125,217,10,233,125,114,202,234,125,43,138,236,125,6,74,238,125,2,10,240,125,31,202,241,125,93,138,243,125,188,74,245,125,60,11,247,125,220,203,248,125,158,140,250,125,129,77,252,125,132,14,254,125,168,207,255,125,238,144,1,126,84,82,3,126,218,19,5,126,130,213,6,126,74,151,8,126,52,89,10,126,61,27,12,126,104,221,13,126,179,159,15,126,31,98,17,126,172,36,19,126,89,231,20,126,39,170,22,126,22,109,24,126,37,48,26,126,84,243,27,126,165,182,29,126,21,122,31,126,167,61,33,126,88,1,35,126,42,197,36,126,29,137,38,126,48,77,40,126,100,17,42,126,184,213,43,126,44,154,45,126,193,94,47,126,118,35,49,126,75,232,50,126,65,173,52,126,87,114,54,126,141,55,56,126,228,252,57,126,91,194,59,126,242,135,61,126,169,77,63,126,128,19,65,126,120,217,66,126,143,159,68,126,199,101,70,126,31,44,72,126,151,242,73,126,47,185,75,126,232,127,77,126,192,70,79,126,184,13,81,126,208,212,82,126,9,156,84,126,97,99,86,126,217,42,88,126,113,242,89,126,41,186,91,126,1,130,93,126,249,73,95,126,17,18,97,126,73,218,98,126,160,162,100,126,23,107,102,126,174,51,104,126,101,252,105,126,60,197,107,126,50,142,109,126,72,87,111,126,126,32,113,126,212,233,114,126,73,179,116,126,222,124,118,126,146,70,120,126,102,16,122,126,90,218,123,126,109,164,125,126,160,110,127,126,243,56,129,126,101,3,131,126,246,205,132,126,168,152,134,126,120,99,136,126,104,46,138,126,120,249,139,126,167,196,141,126,245,143,143,126,99,91,145,126,240,38,147,126,156,242,148,126,104,190,150,126,84,138,152,126,94,86,154,126,136,34,156,126,209,238,157,126,58,187,159,126,193,135,161,126,104,84,163,126,47,33,165,126,20,238,166,126,24,187,168,126,60,136,170,126,127,85,172,126,225,34,174,126,98,240,175,126,3,190,177,126,194,139,179,126,161,89,181,126,158,39,183,126,187,245,184,126,246,195,186,126,81,146,188,126,203,96,190,126,99,47,192,126,27,254,193,126,241,204,195,126,231,155,197,126,251,106,199,126,46,58,201,126,129,9,203,126,242,216,204,126,129,168,206,126,48,120,208,126,254,71,210,126,234,23,212,126,245,231,213,126,31,184,215,126,104,136,217,126,207,88,219,126,85,41,221,126,250,249,222,126,190,202,224,126,160,155,226,126,161,108,228,126,192,61,230,126,254,14,232,126,91,224,233,126,214,177,235,126,112,131,237,126,41,85,239,126,0,39,241,126,245,248,242,126,9,203,244,126,60,157,246,126,141,111,248,126,253,65,250,126,139,20,252,126,55,231,253,126,2,186,255,126,235,140,1,127,243,95,3,127,25,51,5,127,93,6,7,127,192,217,8,127,65,173,10,127,225,128,12,127,159,84,14,127,123,40,16,127,117,252,17,127,141,208,19,127,196,164,21,127,25,121,23,127,140,77,25,127,30,34,27,127,206,246,28,127,155,203,30,127,135,160,32,127,145,117,34,127,185,74,36,127,0,32,38,127,100,245,39,127,231,202,41,127,135,160,43,127,70,118,45,127,34,76,47,127,29,34,49,127,53,248,50,127,108,206,52,127,193,164,54,127,51,123,56,127,196,81,58,127,114,40,60,127,62,255,61,127,40,214,63,127,48,173,65,127,86,132,67,127,154,91,69,127,252,50,71,127,123,10,73,127,24,226,74,127,211,185,76,127,172,145,78,127,163,105,80,127,183,65,82,127,233,25,84,127,57,242,85,127,167,202,87,127,50,163,89,127,219,123,91,127,161,84,93,127,133,45,95,127,135,6,97,127,166,223,98,127,227,184,100,127,62,146,102,127,182,107,104,127,76,69,106,127,255,30,108,127,208,248,109,127,190,210,111,127,202,172,113,127,243,134,115,127,58,97,117,127,158,59,119,127,32,22,121,127,191,240,122,127,124,203,124,127,86,166,126,127,77,129,128,127,98,92,130,127,148,55,132,127,227,18,134,127,80,238,135,127,218,201,137,127,129,165,139,127,70,129,141,127,40,93,143,127,39,57,145,127,67,21,147,127,125,241,148,127,212,205,150,127,72,170,152,127,217,134,154,127,136,99,156,127,83,64,158,127,60,29,160,127,66,250,161,127,101,215,163,127,165,180,165,127,2,146,167,127,125,111,169,127,20,77,171,127,200,42,173,127,154,8,175,127,136,230,176,127,148,196,178,127,188,162,180,127,2,129,182,127,100,95,184,127,228,61,186,127,128,28,188,127,57,251,189,127,15,218,191,127,2,185,193,127,18,152,195,127,63,119,197,127,137,86,199,127,239,53,201,127,115,21,203,127,19,245,204,127,208,212,206,127,170,180,208,127,160,148,210,127,179,116,212,127,228,84,214,127,48,53,216,127,154,21,218,127,32,246,219,127,195,214,221,127,131,183,223,127,95,152,225,127,88,121,227,127,110,90,229,127,160,59,231,127,239,28,233,127,90,254,234,127,226,223,236,127,135,193,238,127,72,163,240,127,38,133,242,127,32,103,244,127,55,73,246,127,106,43,248,127,186,13,250,127,38,240,251,127,175,210,253,127,84,181,255,127,11,204,0,132,122,189,1,132,247,174,2,132,131,160,3,132,28,146,4,132,196,131,5,132,122,117,6,132,63,103,7,132,17,89,8,132,241,74,9,132,224,60,10,132,221,46,11,132,232,32,12,132,1,19,13,132,41,5,14,132,94,247,14,132,161,233,15,132,243,219,16,132,83,206,17,132,193,192,18,132,61,179,19,132,199,165,20,132,95,152,21,132,5,139,22,132,185,125,23,132,124,112,24,132,76,99,25,132,42,86,26,132,23,73,27,132,17,60,28,132,26,47,29,132,48,34,30,132,85,21,31,132,136,8,32,132,200,251,32,132,23,239,33,132,115,226,34,132,222,213,35,132,86,201,36,132,221,188,37,132,113,176,38,132,20,164,39,132,196,151,40,132,131,139,41,132,79,127,42,132,41,115,43,132,17,103,44,132,7,91,45,132,11,79,46,132,29,67,47,132,61,55,48,132,107,43,49,132,166,31,50,132,240,19,51,132,71,8,52,132,173,252,52,132,32,241,53,132,161,229,54,132,47,218,55,132,204,206,56,132,119,195,57,132,47,184,58,132,245,172,59,132,201,161,60,132,171,150,61,132,155,139,62,132,152,128,63,132,163,117,64,132,188,106,65,132,227,95,66,132,24,85,67,132,90,74,68,132,171,63,69,132,8,53,70,132,116,42,71,132,238,31,72,132,117,21,73,132,10,11,74,132,172,0,75,132,93,246,75,132,27,236,76,132,231,225,77,132,192,215,78,132,168,205,79,132,156,195,80,132,159,185,81,132,175,175,82,132,205,165,83,132,249,155,84,132,50,146,85,132,121,136,86,132,206,126,87,132,48,117,88,132,160,107,89,132,30,98,90,132,169,88,91,132,66,79,92,132,233,69,93,132,157,60,94,132,94,51,95,132,46,42,96,132,11,33,97,132,245,23,98,132,237,14,99,132,243,5,100,132,6,253,100,132,39,244,101,132,85,235,102,132,145,226,103,132,219,217,104,132,50,209,105,132,150,200,106,132,9,192,107,132,136,183,108,132,21,175,109,132,176,166,110,132,88,158,111,132,14,150,112,132,209,141,113,132,162,133,114,132,128,125,115,132,108,117,116,132,101,109,117,132,107,101,118,132,127,93,119,132,161,85,120,132,208,77,121,132,12,70,122,132,86,62,123,132,174,54,124,132,18,47,125,132,132,39,126,132,4,32,127,132,145,24,128,132,43,17,129,132,211,9,130,132,136,2,131,132,75,251,131,132,27,244,132,132,248,236,133,132,227,229,134,132,219,222,135,132,225,215,136,132,244,208,137,132,20,202,138,132,65,195,139,132,124,188,140,132,196,181,141,132,26,175,142,132,125,168,143,132,237,161,144,132,106,155,145,132,245,148,146,132,141,142,147,132,51,136,148,132,229,129,149,132,165,123,150,132,115,117,151,132,77,111,152,132,53,105,153,132,42,99,154,132,44,93,155,132,60,87,156,132,89,81,157,132,131,75,158,132,186,69,159,132,254,63,160,132,80,58,161,132,175,52,162,132,27,47,163,132,149,41,164,132,27,36,165,132,175,30,166,132,80,25,167,132,254,19,168,132,186,14,169,132,130,9,170,132,88,4,171,132,59,255,171,132,43,250,172,132,40,245,173,132,50,240,174,132,74,235,175,132,110,230,176,132,160,225,177,132,223,220,178,132,43,216,179,132,132,211,180,132,234,206,181,132,94,202,182,132,222,197,183,132,108,193,184,132,6,189,185,132,174,184,186,132,99,180,187,132,36,176,188,132,243,171,189,132,207,167,190,132,184,163,191,132,175,159,192,132,178,155,193,132,194,151,194,132,223,147,195,132,9,144,196,132,65,140,197,132,133,136,198,132,214,132,199,132,53,129,200,132,160,125,201,132,24,122,202,132,158,118,203,132,48,115,204,132,207,111,205,132,123,108,206,132,53,105,207,132,251,101,208,132,206,98,209,132,174,95,210,132,155,92,211,132,149,89,212,132,156,86,213,132,176,83,214,132,209,80,215,132,255,77,216,132,58,75,217,132,129,72,218,132,214,69,219,132,55,67,220,132,166,64,221,132,33,62,222,132,169,59,223,132,62,57,224,132,224,54,225,132,143,52,226,132,75,50,227,132,19,48,228,132,233,45,229,132,203,43,230,132,186,41,231,132,182,39,232,132,191,37,233,132,212,35,234,132,247,33,235,132,38,32,236,132,98,30,237,132,171,28,238,132,1,27,239,132,99,25,240,132,211,23,241,132,79,22,242,132,216,20,243,132,109,19,244,132,16,18,245,132,191,16,246,132,123,15,247,132,68,14,248,132,25,13,249,132,252,11,250,132,235,10,251,132,231,9,252,132,239,8,253,132,5,8,254,132,39,7,255,132,85,6,0,133,145,5,1,133,217,4,2,133,46,4,3,133,143,3,4,133,254,2,5,133,121,2,6,133,0,2,7,133,149,1,8,133,54,1,9,133,227,0,10,133,158,0,11,133,101,0,12,133,57,0,13,133,25,0,14,133,6,0,15,133,0,0,16,133,6,0,17,133,25,0,18,133,57,0,19,133,101,0,20,133,158,0,21,133,227,0,22,133,53,1,23,133,148,1,24,133,255,1,25,133,119,2,26,133,252,2,27,133,141,3,28,133,42,4,29,133,212,4,30,133,139,5,31,133,79,6,32,133,31,7,33,133,251,7,34,133,228,8,35,133,218,9,36,133,220,10,37,133,234,11,38,133,6,13,39,133,45,14,40,133,98,15,41,133,163,16,42,133,240,17,43,133,74,19,44,133,176,20,45,133,35,22,46,133,162,23,47,133,46,25,48,133,198,26,49,133,107,28,50,133,28,30,51,133,218,31,52,133,164,33,53,133,123,35,54,133,94,37,55,133,78,39,56,133,74,41,57,133,82,43,58,133,103,45,59,133,137,47,60,133,182,49,61,133,241,51,62,133], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([55,54,63,133,138,56,64,133,234,58,65,133,86,61,66,133,206,63,67,133,83,66,68,133,228,68,69,133,129,71,70,133,43,74,71,133,226,76,72,133,164,79,73,133,115,82,74,133,78,85,75,133,54,88,76,133,42,91,77,133,43,94,78,133,56,97,79,133,81,100,80,133,118,103,81,133,168,106,82,133,230,109,83,133,49,113,84,133,135,116,85,133,234,119,86,133,90,123,87,133,213,126,88,133,94,130,89,133,242,133,90,133,146,137,91,133,63,141,92,133,249,144,93,133,190,148,94,133,144,152,95,133,110,156,96,133,88,160,97,133,79,164,98,133,81,168,99,133,96,172,100,133,124,176,101,133,163,180,102,133,215,184,103,133,23,189,104,133,99,193,105,133,188,197,106,133,32,202,107,133,145,206,108,133,14,211,109,133,152,215,110,133,45,220,111,133,207,224,112,133,125,229,113,133,55,234,114,133,253,238,115,133,208,243,116,133,174,248,117,133,153,253,118,133,144,2,120,133,147,7,121,133,163,12,122,133,190,17,123,133,230,22,124,133,26,28,125,133,89,33,126,133,166,38,127,133,254,43,128,133,98,49,129,133,210,54,130,133,79,60,131,133,216,65,132,133,108,71,133,133,13,77,134,133,186,82,135,133,115,88,136,133,57,94,137,133,10,100,138,133,231,105,139,133,209,111,140,133,198,117,141,133,200,123,142,133,213,129,143,133,239,135,144,133,21,142,145,133,71,148,146,133,132,154,147,133,206,160,148,133,36,167,149,133,134,173,150,133,244,179,151,133,110,186,152,133,244,192,153,133,134,199,154,133,37,206,155,133,207,212,156,133,133,219,157,133,71,226,158,133,21,233,159,133,239,239,160,133,213,246,161,133,199,253,162,133,197,4,164,133,207,11,165,133,229,18,166,133,7,26,167,133,53,33,168,133,111,40,169,133,181,47,170,133,7,55,171,133,101,62,172,133,206,69,173,133,68,77,174,133,198,84,175,133,83,92,176,133,237,99,177,133,146,107,178,133,67,115,179,133,0,123,180,133,201,130,181,133,158,138,182,133,127,146,183,133,108,154,184,133,101,162,185,133,105,170,186,133,122,178,187,133,150,186,188,133,190,194,189,133,242,202,190,133,50,211,191,133,126,219,192,133,214,227,193,133,57,236,194,133,169,244,195,133,36,253,196,133,171,5,198,133,62,14,199,133,221,22,200,133,135,31,201,133,62,40,202,133,0,49,203,133,206,57,204,133,168,66,205,133,141,75,206,133,127,84,207,133,124,93,208,133,133,102,209,133,154,111,210,133,187,120,211,133,231,129,212,133,31,139,213,133,99,148,214,133,179,157,215,133,15,167,216,133,118,176,217,133,233,185,218,133,104,195,219,133,242,204,220,133,137,214,221,133,43,224,222,133,216,233,223,133,146,243,224,133,87,253,225,133,40,7,227,133,5,17,228,133,237,26,229,133,225,36,230,133,225,46,231,133,237,56,232,133,4,67,233,133,39,77,234,133,86,87,235,133,144,97,236,133,214,107,237,133,40,118,238,133,133,128,239,133,238,138,240,133,99,149,241,133,227,159,242,133,111,170,243,133,7,181,244,133,171,191,245,133,90,202,246,133,20,213,247,133,219,223,248,133,173,234,249,133,138,245,250,133,115,0,252,133,104,11,253,133,105,22,254,133,117,33,255,133,141,44,0,134,176,55,1,134,223,66,2,134,25,78,3,134,95,89,4,134,177,100,5,134,15,112,6,134,119,123,7,134,236,134,8,134,108,146,9,134,248,157,10,134,143,169,11,134,50,181,12,134,224,192,13,134,154,204,14,134,96,216,15,134,49,228,16,134,13,240,17,134,245,251,18,134,233,7,20,134,232,19,21,134,243,31,22,134,9,44,23,134,43,56,24,134,88,68,25,134,145,80,26,134,213,92,27,134,37,105,28,134,129,117,29,134,232,129,30,134,90,142,31,134,216,154,32,134,97,167,33,134,246,179,34,134,150,192,35,134,66,205,36,134,249,217,37,134,188,230,38,134,138,243,39,134,100,0,41,134,73,13,42,134,58,26,43,134,54,39,44,134,61,52,45,134,80,65,46,134,111,78,47,134,153,91,48,134,206,104,49,134,15,118,50,134,91,131,51,134,178,144,52,134,21,158,53,134,131,171,54,134,253,184,55,134,130,198,56,134,19,212,57,134,175,225,58,134,86,239,59,134,9,253,60,134,199,10,62,134,145,24,63,134,102,38,64,134,70,52,65,134,50,66,66,134,41,80,67,134,43,94,68,134,57,108,69,134,82,122,70,134,119,136,71,134,167,150,72,134,226,164,73,134,40,179,74,134,122,193,75,134,216,207,76,134,64,222,77,134,180,236,78,134,51,251,79,134,190,9,81,134,84,24,82,134,245,38,83,134,161,53,84,134,89,68,85,134,28,83,86,134,234,97,87,134,196,112,88,134,169,127,89,134,153,142,90,134,149,157,91,134,156,172,92,134,174,187,93,134,203,202,94,134,244,217,95,134,40,233,96,134,103,248,97,134,177,7,99,134,7,23,100,134,104,38,101,134,212,53,102,134,76,69,103,134,206,84,104,134,92,100,105,134,245,115,106,134,154,131,107,134,73,147,108,134,4,163,109,134,202,178,110,134,155,194,111,134,120,210,112,134,95,226,113,134,82,242,114,134,80,2,116,134,90,18,117,134,110,34,118,134,142,50,119,134,185,66,120,134,239,82,121,134,48,99,122,134,124,115,123,134,212,131,124,134,54,148,125,134,164,164,126,134,29,181,127,134,162,197,128,134,49,214,129,134,203,230,130,134,113,247,131,134,34,8,133,134,222,24,134,134,165,41,135,134,119,58,136,134,85,75,137,134,61,92,138,134,49,109,139,134,47,126,140,134,57,143,141,134,78,160,142,134,110,177,143,134,153,194,144,134,207,211,145,134,17,229,146,134,93,246,147,134,181,7,149,134,23,25,150,134,133,42,151,134,254,59,152,134,130,77,153,134,17,95,154,134,171,112,155,134,80,130,156,134,0,148,157,134,187,165,158,134,129,183,159,134,83,201,160,134,47,219,161,134,22,237,162,134,9,255,163,134,6,17,165,134,15,35,166,134,34,53,167,134,65,71,168,134,106,89,169,134,159,107,170,134,223,125,171,134,41,144,172,134,127,162,173,134,224,180,174,134,75,199,175,134,194,217,176,134,67,236,177,134,208,254,178,134,104,17,180,134,10,36,181,134,184,54,182,134,113,73,183,134,52,92,184,134,3,111,185,134,220,129,186,134,193,148,187,134,176,167,188,134,170,186,189,134,176,205,190,134,192,224,191,134,219,243,192,134,2,7,194,134,51,26,195,134,111,45,196,134,182,64,197,134,8,84,198,134,101,103,199,134,204,122,200,134,63,142,201,134,189,161,202,134,69,181,203,134,217,200,204,134,119,220,205,134,32,240,206,134,212,3,208,134,148,23,209,134,94,43,210,134,50,63,211,134,18,83,212,134,253,102,213,134,242,122,214,134,243,142,215,134,254,162,216,134,20,183,217,134,53,203,218,134,97,223,219,134,152,243,220,134,217,7,222,134,38,28,223,134,125,48,224,134,223,68,225,134,76,89,226,134,196,109,227,134,70,130,228,134,212,150,229,134,108,171,230,134,15,192,231,134,189,212,232,134,118,233,233,134,58,254,234,134,8,19,236,134,226,39,237,134,198,60,238,134,180,81,239,134,174,102,240,134,179,123,241,134,194,144,242,134,220,165,243,134,1,187,244,134,48,208,245,134,107,229,246,134,176,250,247,134,0,16,249,134,90,37,250,134,192,58,251,134,48,80,252,134,171,101,253,134,49,123,254,134,194,144,255,134,93,166,0,135,3,188,1,135,180,209,2,135,111,231,3,135,53,253,4,135,6,19,6,135,226,40,7,135,201,62,8,135,186,84,9,135,182,106,10,135,188,128,11,135,206,150,12,135,234,172,13,135,16,195,14,135,66,217,15,135,126,239,16,135,197,5,18,135,23,28,19,135,115,50,20,135,218,72,21,135,75,95,22,135,200,117,23,135,79,140,24,135,224,162,25,135,125,185,26,135,36,208,27,135,214,230,28,135,146,253,29,135,89,20,31,135,43,43,32,135,7,66,33,135,238,88,34,135,224,111,35,135,220,134,36,135,227,157,37,135,244,180,38,135,17,204,39,135,56,227,40,135,105,250,41,135,165,17,43,135,236,40,44,135,61,64,45,135,153,87,46,135,0,111,47,135,113,134,48,135,237,157,49,135,115,181,50,135,4,205,51,135,160,228,52,135,70,252,53,135,247,19,55,135,178,43,56,135,120,67,57,135,73,91,58,135,36,115,59,135,10,139,60,135,250,162,61,135,245,186,62,135,250,210,63,135,10,235,64,135,37,3,66,135,74,27,67,135,122,51,68,135,180,75,69,135,248,99,70,135,72,124,71,135,162,148,72,135,6,173,73,135,117,197,74,135,238,221,75,135,114,246,76,135,1,15,78,135,154,39,79,135,62,64,80,135,236,88,81,135,164,113,82,135,103,138,83,135,53,163,84,135,13,188,85,135,240,212,86,135,221,237,87,135,213,6,89,135,215,31,90,135,227,56,91,135,250,81,92,135,28,107,93,135,72,132,94,135,127,157,95,135,192,182,96,135,11,208,97,135,97,233,98,135,193,2,100,135,44,28,101,135,162,53,102,135,34,79,103,135,172,104,104,135,64,130,105,135,224,155,106,135,137,181,107,135,61,207,108,135,252,232,109,135,197,2,111,135,152,28,112,135,118,54,113,135,94,80,114,135,81,106,115,135,78,132,116,135,85,158,117,135,103,184,118,135,131,210,119,135,170,236,120,135,219,6,122,135,23,33,123,135,93,59,124,135,173,85,125,135,8,112,126,135,109,138,127,135,220,164,128,135,86,191,129,135,218,217,130,135,105,244,131,135,2,15,133,135,165,41,134,135,83,68,135,135,11,95,136,135,206,121,137,135,154,148,138,135,114,175,139,135,83,202,140,135,63,229,141,135,53,0,143,135,54,27,144,135,65,54,145,135,86,81,146,135,118,108,147,135,160,135,148,135,212,162,149,135,19,190,150,135,92,217,151,135,175,244,152,135,12,16,154,135,116,43,155,135,231,70,156,135,99,98,157,135,234,125,158,135,123,153,159,135,22,181,160,135,188,208,161,135,108,236,162,135,39,8,164,135,235,35,165,135,186,63,166,135,147,91,167,135,119,119,168,135,100,147,169,135,92,175,170,135,95,203,171,135,107,231,172,135,130,3,174,135,163,31,175,135,207,59,176,135,4,88,177,135,68,116,178,135,142,144,179,135,227,172,180,135,65,201,181,135,170,229,182,135,29,2,184,135,155,30,185,135,34,59,186,135,180,87,187,135,80,116,188,135,246,144,189,135,167,173,190,135,97,202,191,135,38,231,192,135,245,3,194,135,207,32,195,135,178,61,196,135,160,90,197,135,152,119,198,135,154,148,199,135,167,177,200,135,189,206,201,135,222,235,202,135,9,9,204,135,62,38,205,135,125,67,206,135,199,96,207,135,27,126,208,135,121,155,209,135,225,184,210,135,83,214,211,135,207,243,212,135,86,17,214,135,230,46,215,135,129,76,216,135,38,106,217,135,213,135,218,135,143,165,219,135,82,195,220,135,32,225,221,135,247,254,222,135,217,28,224,135,197,58,225,135,188,88,226,135,188,118,227,135,198,148,228,135,219,178,229,135,249,208,230,135,34,239,231,135,85,13,233,135,146,43,234,135,217,73,235,135,42,104,236,135,134,134,237,135,235,164,238,135,91,195,239,135,212,225,240,135,88,0,242,135,230,30,243,135,126,61,244,135,32,92,245,135,204,122,246,135,130,153,247,135,66,184,248,135,12,215,249,135,225,245,250,135,191,20,252,135,168,51,253,135,154,82,254,135,151,113,255,135,79,72,0,140,215,215,0,140,100,103,1,140,247,246,1,140,142,134,2,140,43,22,3,140,204,165,3,140,115,53,4,140,30,197,4,140,207,84,5,140,132,228,5,140,63,116,6,140,255,3,7,140,195,147,7,140,141,35,8,140,91,179,8,140,47,67,9,140,8,211,9,140,229,98,10,140,200,242,10,140,176,130,11,140,156,18,12,140,142,162,12,140,132,50,13,140,128,194,13,140,129,82,14,140,134,226,14,140,145,114,15,140,161,2,16,140,181,146,16,140,207,34,17,140,237,178,17,140,17,67,18,140,57,211,18,140,103,99,19,140,153,243,19,140,209,131,20,140,13,20,21,140,79,164,21,140,149,52,22,140,225,196,22,140,49,85,23,140,134,229,23,140,225,117,24,140,64,6,25,140,164,150,25,140,13,39,26,140,123,183,26,140,239,71,27,140,103,216,27,140,228,104,28,140,102,249,28,140,237,137,29,140,121,26,30,140,10,171,30,140,159,59,31,140,58,204,31,140,218,92,32,140,127,237,32,140,40,126,33,140,215,14,34,140,138,159,34,140,67,48,35,140,0,193,35,140,195,81,36,140,138,226,36,140,86,115,37,140,40,4,38,140,254,148,38,140,217,37,39,140,185,182,39,140,158,71,40,140,136,216,40,140,118,105,41,140,106,250,41,140,99,139,42,140,96,28,43,140,99,173,43,140,106,62,44,140,119,207,44,140,136,96,45,140,158,241,45,140,185,130,46,140,217,19,47,140,254,164,47,140,40,54,48,140,87,199,48,140,139,88,49,140,195,233,49,140,1,123,50,140,67,12,51,140,138,157,51,140,215,46,52,140,40,192,52,140,126,81,53,140,217,226,53,140,57,116,54,140,158,5,55,140,7,151,55,140,118,40,56,140,233,185,56,140,97,75,57,140,223,220,57,140,97,110,58,140,232,255,58,140,116,145,59,140,5,35,60,140,154,180,60,140,53,70,61,140,212,215,61,140,121,105,62,140,34,251,62,140,208,140,63,140,131,30,64,140,59,176,64,140,247,65,65,140,185,211,65,140,128,101,66,140,75,247,66,140,27,137,67,140,240,26,68,140,202,172,68,140,169,62,69,140,141,208,69,140,117,98,70,140,99,244,70,140,85,134,71,140,76,24,72,140,72,170,72,140,73,60,73,140,79,206,73,140,89,96,74,140,105,242,74,140,125,132,75,140,150,22,76,140,180,168,76,140,215,58,77,140,255,204,77,140,43,95,78,140,93,241,78,140,147,131,79,140,206,21,80,140,14,168,80,140,83,58,81,140,156,204,81,140,235,94,82,140,62,241,82,140,150,131,83,140,243,21,84,140,85,168,84,140,187,58,85,140,39,205,85,140,151,95,86,140,12,242,86,140,134,132,87,140,5,23,88,140,137,169,88,140,17,60,89,140,158,206,89,140,48,97,90,140,199,243,90,140,99,134,91,140,3,25,92,140,169,171,92,140,83,62,93,140,2,209,93,140,182,99,94,140,110,246,94,140,43,137,95,140,238,27,96,140,181,174,96,140,128,65,97,140,81,212,97,140,39,103,98,140,1,250,98,140,224,140,99,140,196,31,100,140,172,178,100,140,154,69,101,140,140,216,101,140,131,107,102,140,127,254,102,140,127,145,103,140,133,36,104,140,143,183,104,140,158,74,105,140,178,221,105,140,202,112,106,140,231,3,107,140,10,151,107,140,49,42,108,140,92,189,108,140,141,80,109,140,194,227,109,140,252,118,110,140,59,10,111,140,126,157,111,140,199,48,112,140,20,196,112,140,102,87,113,140,188,234,113,140,24,126,114,140,120,17,115,140,221,164,115,140,71,56,116,140,181,203,116,140,41,95,117,140,161,242,117,140,29,134,118,140,159,25,119,140,37,173,119,140,176,64,120,140,64,212,120,140,213,103,121,140,110,251,121,140,12,143,122,140,175,34,123,140,87,182,123,140,3,74,124,140,180,221,124,140,106,113,125,140,36,5,126,140,228,152,126,140,168,44,127,140,113,192,127,140,62,84,128,140,17,232,128,140,232,123,129,140,195,15,130,140,164,163,130,140,137,55,131,140,115,203,131,140,98,95,132,140,85,243,132,140,77,135,133,140,74,27,134,140,76,175,134,140,82,67,135,140,93,215,135,140,109,107,136,140,130,255,136,140,155,147,137,140,185,39,138,140,220,187,138,140,3,80,139,140,47,228,139,140,96,120,140,140,150,12,141,140,208,160,141,140,15,53,142,140,83,201,142,140,155,93,143,140,232,241,143,140,58,134,144,140,145,26,145,140,236,174,145,140,76,67,146,140,176,215,146,140,26,108,147,140,136,0,148,140,251,148,148,140,114,41,149,140,238,189,149,140,111,82,150,140,245,230,150,140,127,123,151,140,14,16,152,140,161,164,152,140,58,57,153,140,215,205,153,140,120,98,154,140,31,247,154,140,202,139,155,140,122,32,156,140,46,181,156,140,231,73,157,140,165,222,157,140,103,115,158,140,47,8,159,140,250,156,159,140,203,49,160,140,160,198,160,140,122,91,161,140,89,240,161,140,60,133,162,140,36,26,163,140,16,175,163,140,1,68,164,140,247,216,164,140,242,109,165,140,241,2,166,140,245,151,166,140,254,44,167,140,11,194,167,140,29,87,168,140,51,236,168,140,78,129,169,140,110,22,170,140,147,171,170,140,188,64,171,140,234,213,171,140,28,107,172,140,83,0,173,140,143,149,173,140,208,42,174,140,21,192,174,140,94,85,175,140,173,234,175,140,0,128,176,140,87,21,177,140,180,170,177,140,21,64,178,140,122,213,178,140,228,106,179,140,83,0,180,140,199,149,180,140,63,43,181,140,188,192,181,140,61,86,182,140,195,235,182,140,78,129,183,140,221,22,184,140,113,172,184,140,10,66,185,140,167,215,185,140,73,109,186,140,239,2,187,140,154,152,187,140,74,46,188,140,254,195,188,140,183,89,189,140,116,239,189,140,55,133,190,140,253,26,191,140,201,176,191,140,153,70,192,140,109,220,192,140,71,114,193,140,36,8,194,140,7,158,194,140,238,51,195,140,218,201,195,140,202,95,196,140,191,245,196,140,184,139,197,140,182,33,198,140,185,183,198,140,192,77,199,140,204,227,199,140,221,121,200,140,242,15,201,140,12,166,201,140,42,60,202,140,77,210,202,140,116,104,203,140,160,254,203,140,209,148,204,140,6,43,205,140,64,193,205,140,127,87,206,140,194,237,206,140,9,132,207,140,85,26,208,140,166,176,208,140,251,70,209,140,85,221,209,140,180,115,210,140,23,10,211,140,127,160,211,140,235,54,212,140,92,205,212,140,209,99,213,140,75,250,213,140,202,144,214,140,77,39,215,140,213,189,215,140,97,84,216,140,242,234,216,140,135,129,217,140,33,24,218,140,192,174,218,140,99,69,219,140,10,220,219,140,183,114,220,140,103,9,221,140,29,160,221,140,215,54,222,140,149,205,222,140,88,100,223,140,32,251,223,140,236,145,224,140,188,40,225,140,146,191,225,140,107,86,226,140,74,237,226,140,45,132,227,140,20,27,228,140,0,178,228,140,241,72,229,140,230,223,229,140,223,118,230,140,222,13,231,140,224,164,231,140,231,59,232,140,243,210,232,140,4,106,233,140,24,1,234,140,50,152,234,140,80,47,235,140,114,198,235,140,153,93,236,140,197,244,236,140,245,139,237,140,41,35,238,140,99,186,238,140,160,81,239,140,226,232,239,140,41,128,240,140,116,23,241,140,196,174,241,140,24,70,242,140,113,221,242,140,207,116,243,140,48,12,244,140,151,163,244,140,2,59,245,140,113,210,245,140,229,105,246,140,93,1,247,140,218,152,247,140,92,48,248,140,226,199,248,140,108,95,249,140,251,246,249,140,143,142,250,140,39,38,251,140,195,189,251,140,100,85,252,140,10,237,252,140,180,132,253,140,98,28,254,140,21,180,254,140,205,75,255,140,137,227,255,140,73,123,0,141,14,19,1,141,216,170,1,141,166,66,2,141,120,218,2,141,79,114,3,141,43,10,4,141,11,162,4,141,239,57,5,141,216,209,5,141,197,105,6,141,183,1,7,141,174,153,7,141,169,49,8,141,168,201,8,141,172,97,9,141,180,249,9,141,193,145,10,141,210,41,11,141,232,193,11,141,2,90,12,141,33,242,12,141,68,138,13,141,108,34,14,141,152,186,14,141,201,82,15,141,254,234,15,141,55,131,16,141,117,27,17,141,184,179,17,141,255,75,18,141,74,228,18,141,154,124,19,141,238,20,20,141,71,173,20,141,165,69,21,141,6,222,21,141,109,118,22,141,215,14,23,141,70,167,23,141,186,63,24,141,50,216,24,141,174,112,25,141,47,9,26,141,181,161,26,141,63,58,27,141,205,210,27,141,96,107,28,141,247,3,29,141,146,156,29,141,50,53,30,141,215,205,30,141,128,102,31,141,45,255,31,141,223,151,32,141,149,48,33,141,80,201,33,141,15,98,34,141,211,250,34,141,155,147,35,141,104,44,36,141,56,197,36,141,14,94,37,141,232,246,37,141,198,143,38,141,169,40,39,141,144,193,39,141,123,90,40,141,107,243,40,141,95,140,41,141,88,37,42,141,85,190,42,141,87,87,43,141,93,240,43,141,104,137,44,141,119,34,45,141,138,187,45,141,162,84,46,141,190,237,46,141,222,134,47,141,3,32,48,141,45,185,48,141,91,82,49,141,141,235,49,141,196,132,50,141,255,29,51,141,62,183,51,141,130,80,52,141,202,233,52,141,23,131,53,141,104,28,54,141,190,181,54,141,23,79,55,141,118,232,55,141,217,129,56,141,64,27,57,141,171,180,57,141,27,78,58,141,143,231,58,141,8,129,59,141,133,26,60,141,7,180,60,141,141,77,61,141,23,231,61,141,166,128,62,141,57,26,63,141,208,179,63,141,108,77,64,141,12,231,64,141,177,128,65,141,90,26,66,141,7,180,66,141,185,77,67,141,111,231,67,141,42,129,68,141,233,26,69,141,172,180,69,141,116,78,70,141,64,232,70,141,17,130,71,141,229,27,72,141,191,181,72,141,156,79,73,141,126,233,73,141,100,131,74,141,79,29,75,141,62,183,75,141,50,81,76,141,42,235,76,141,38,133,77,141,38,31,78,141,43,185,78,141,52,83,79,141,66,237,79,141,84,135,80,141,107,33,81,141,133,187,81,141,164,85,82,141,200,239,82,141,240,137,83,141,28,36,84,141,76,190,84,141,129,88,85,141,186,242,85,141,248,140,86,141,58,39,87,141,128,193,87,141,203,91,88,141,26,246,88,141,109,144,89,141,197,42,90,141,33,197,90,141,129,95,91,141,230,249,91,141,79,148,92,141,189,46,93,141,46,201,93,141,165,99,94,141,31,254,94,141,158,152,95,141,33,51,96,141,168,205,96,141,52,104,97,141,196,2,98,141,89,157,98,141,242,55,99,141,143,210,99,141,48,109,100,141,214,7,101,141,128,162,101,141,47,61,102,141,225,215,102,141,152,114,103,141,84,13,104,141,20,168,104,141,216,66,105,141,160,221,105,141,109,120,106,141,62,19,107,141,19,174,107,141,237,72,108,141,203,227,108,141,173,126,109,141,148,25,110,141,127,180,110,141,110,79,111,141,98,234,111,141,90,133,112,141,86,32,113,141,86,187,113,141,91,86,114,141,100,241,114,141,114,140,115,141,132,39,116,141,154,194,116,141,180,93,117,141,211,248,117,141,246,147,118,141,29,47,119,141,73,202,119,141,120,101,120,141,173,0,121,141,229,155,121,141,34,55,122,141,99,210,122,141,168,109,123,141,242,8,124,141,64,164,124,141,146,63,125,141,233,218,125,141,68,118,126,141,163,17,127,141,6,173,127,141,110,72,128,141,218,227,128,141,74,127,129,141,191,26,130,141,56,182,130,141,181,81,131,141,54,237,131,141,188,136,132,141,70,36,133,141,212,191,133,141,103,91,134,141,253,246,134,141,152,146,135,141,56,46,136,141,220,201,136,141,131,101,137,141,48,1,138,141,224,156,138,141,149,56,139,141,78,212,139,141,11,112,140,141,205,11,141,141,147,167,141,141,93,67,142,141,43,223,142,141,254,122,143,141,213,22,144,141,176,178,144,141,143,78,145,141,115,234,145,141,91,134,146,141,71,34,147,141,55,190,147,141,44,90,148,141,37,246,148,141,34,146,149,141,36,46,150,141,42,202,150,141,52,102,151,141,66,2,152,141,84,158,152,141,107,58,153,141,134,214,153,141,165,114,154,141,201,14,155,141,241,170,155,141,29,71,156,141,77,227,156,141,129,127,157,141,186,27,158,141,247,183,158,141,56,84,159,141,126,240,159,141,199,140,160,141,21,41,161,141,103,197,161,141,190,97,162,141,24,254,162,141,119,154,163,141,218,54,164,141,66,211,164,141,173,111,165,141,29,12,166,141,145,168,166,141,10,69,167,141,134,225,167,141,7,126,168,141,140,26,169,141,21,183,169,141,162,83,170,141,52,240,170,141,202,140,171,141,100,41,172,141,2,198,172,141,165,98,173,141,76,255,173,141,247,155,174,141,166,56,175,141,89,213,175,141,17,114,176,141,205,14,177,141,141,171,177,141,81,72,178,141,26,229,178,141,230,129,179,141,183,30,180,141,140,187,180,141,102,88,181,141,67,245,181,141,37,146,182,141,11,47,183,141,245,203,183,141,227,104,184,141,214,5,185,141,205,162,185,141,200,63,186,141,199,220,186,141,202,121,187,141,210,22,188,141,222,179,188,141,238,80,189,141,2,238,189,141,26,139,190,141,55,40,191,141,88,197,191,141,125,98,192,141,166,255,192,141,211,156,193,141,5,58,194,141,58,215,194,141,116,116,195,141,178,17,196,141,245,174,196,141,59,76,197,141,134,233,197,141,213,134,198,141,40,36,199,141,127,193,199,141,218,94,200,141,58,252,200,141,158,153,201,141,6,55,202,141,114,212,202,141,226,113,203,141,87,15,204,141,207,172,204,141,76,74,205,141,205,231,205,141,82,133,206,141,220,34,207,141,105,192,207,141,251,93,208,141,145,251,208,141,43,153,209,141,201,54,210,141,108,212,210,141,18,114,211,141,189,15,212,141,108,173,212,141,31,75,213,141,214,232,213,141,145,134,214,141,81,36,215,141,21,194,215,141,220,95,216,141,168,253,216,141,121,155,217,141,77,57,218,141,38,215,218,141,2,117,219,141,227,18,220,141,200,176,220,141,177,78,221,141,158,236,221,141,144,138,222,141,133,40,223,141,127,198,223,141,125,100,224,141,127,2,225,141,133,160,225,141,143,62,226,141,158,220,226,141,176,122,227,141,199,24,228,141,226,182,228,141,1,85,229,141,36,243,229,141,76,145,230,141,119,47,231,141,167,205,231,141,218,107,232,141,18,10,233,141,78,168,233,141,142,70,234,141,211,228,234,141,27,131,235,141,104,33,236,141,184,191,236,141,13,94,237,141,102,252,237,141,195,154,238,141,36,57,239,141,138,215,239,141,243,117,240,141,97,20,241,141,211,178,241,141,72,81,242,141,194,239,242,141,64,142,243,141,195,44,244,141,73,203,244,141,211,105,245,141,98,8,246,141,245,166,246,141,139,69,247,141,38,228,247,141,197,130,248,141,105,33,249,141,16,192,249,141,187,94,250,141,107,253,250,141,30,156,251,141,214,58,252,141,146,217,252,141,82,120,253,141,22,23,254,141,222,181,254,141,170,84,255,141,123,243,255,141,79,146,0,142,40,49,1,142,4,208,1,142,229,110,2,142,202,13,3,142,179,172,3,142,160,75,4,142,145,234,4,142,135,137,5,142,128,40,6,142,125,199,6,142,127,102,7,142,133,5,8,142,143,164,8,142,156,67,9,142,174,226,9,142,196,129,10,142,223,32,11,142,253,191,11,142,31,95,12,142,70,254,12,142,112,157,13,142,159,60,14,142,209,219,14,142,8,123,15,142,67,26,16,142,130,185,16,142,197,88,17,142,12,248,17,142,87,151,18,142,166,54,19,142,250,213,19,142,81,117,20,142,173,20,21,142,12,180,21,142,112,83,22,142,216,242,22,142,67,146,23,142,179,49,24,142,39,209,24,142,159,112,25,142,27,16,26,142,156,175,26,142,32,79,27,142,168,238,27,142,52,142,28,142,197,45,29,142,89,205,29,142,242,108,30,142,143,12,31,142,47,172,31,142,212,75,32,142,125,235,32,142,42,139,33,142,219,42,34,142,144,202,34,142,73,106,35,142,6,10,36,142,199,169,36,142,141,73,37,142,86,233,37,142,35,137,38,142,245,40,39,142,202,200,39,142,164,104,40,142,129,8,41,142,99,168,41,142,73,72,42,142,50,232,42,142,32,136,43,142,18,40,44,142,8,200,44,142,2,104,45,142,0,8,46,142,2,168,46,142,8,72,47,142,18,232,47,142,32,136,48,142,50,40,49,142,73,200,49,142,99,104,50,142,129,8,51,142,163,168,51,142,202,72,52,142,244,232,52,142,35,137,53,142,85,41,54,142,140,201,54,142,198,105,55,142,5,10,56,142,72,170,56,142,142,74,57,142,217,234,57,142,40,139,58,142,123,43,59,142,209,203,59,142,44,108,60,142,139,12,61,142,238,172,61,142,85,77,62,142,192,237,62,142,47,142,63,142,162,46,64,142,25,207,64,142,148,111,65,142,19,16,66,142,150,176,66,142,29,81,67,142,168,241,67,142,55,146,68,142,202,50,69,142,97,211,69,142,252,115,70,142,156,20,71,142,63,181,71,142,230,85,72,142,145,246,72,142,64,151,73,142,244,55,74,142,171,216,74,142,102,121,75,142,37,26,76,142,233,186,76,142,176,91,77,142,123,252,77,142,75,157,78,142,30,62,79,142,245,222,79,142,208,127,80,142,176,32,81,142,147,193,81,142,122,98,82,142,102,3,83,142,85,164,83,142,72,69,84,142,64,230,84,142,59,135,85,142,58,40,86,142,61,201,86,142,69,106,87,142,80,11,88,142,95,172,88,142,115,77,89,142,138,238,89,142,165,143,90,142,196,48,91,142,231,209,91,142,15,115,92,142,58,20,93,142,105,181,93,142,156,86,94,142,211,247,94,142,14,153,95,142,78,58,96,142,145,219,96,142,216,124,97,142,35,30,98,142,114,191,98,142,197,96,99,142,28,2,100,142,119,163,100,142,214,68,101,142,57,230,101,142,160,135,102,142,11,41,103,142,121,202,103,142,236,107,104,142,99,13,105,142,222,174,105,142,93,80,106,142,223,241,106,142,102,147,107,142,241,52,108,142,127,214,108,142,18,120,109,142,169,25,110,142,67,187,110,142,226,92,111,142,132,254,111,142,42,160,112,142,213,65,113,142,131,227,113,142,53,133,114,142,236,38,115,142,166,200,115,142,100,106,116,142,38,12,117,142,236,173,117,142,182,79,118,142,132,241,118,142,86,147,119,142,44,53,120,142,6,215,120,142,228,120,121,142,198,26,122,142,172,188,122,142,149,94,123,142,131,0,124,142,117,162,124,142,106,68,125,142,100,230,125,142,97,136,126,142,98,42,127,142,104,204,127,142,113,110,128,142,126,16,129,142,143,178,129,142,164,84,130,142,189,246,130,142,218,152,131,142,251,58,132,142,32,221,132,142,73,127,133,142,118,33,134,142,166,195,134,142,219,101,135,142,20,8,136,142,80,170,136,142,144,76,137,142,213,238,137,142,29,145,138,142,105,51,139,142,185,213,139,142,14,120,140,142,102,26,141,142,193,188,141,142,33,95,142,142,133,1,143,142,237,163,143,142,88,70,144,142,200,232,144,142,60,139,145,142,179,45,146,142,46,208,146,142,174,114,147,142,49,21,148,142,184,183,148,142,67,90,149,142,210,252,149,142,101,159,150,142,251,65,151,142,150,228,151,142,53,135,152,142,215,41,153,142,126,204,153,142,40,111,154,142,214,17,155,142,137,180,155,142,63,87,156,142,249,249,156,142,183,156,157,142,120,63,158,142,62,226,158,142,8,133,159,142,213,39,160,142,167,202,160,142,124,109,161,142,85,16,162,142,51,179,162,142,20,86,163,142,249,248,163,142,226,155,164,142,206,62,165,142,191,225,165,142,180,132,166,142,172,39,167,142,169,202,167,142,169,109,168,142,173,16,169,142,181,179,169,142,193,86,170,142,209,249,170,142,229,156,171,142,252,63,172,142,24,227,172,142,55,134,173,142,91,41,174,142,130,204,174,142,173,111,175,142,220,18,176,142,15,182,176,142,70,89,177,142,129,252,177,142,191,159,178,142,2,67,179,142,72,230,179,142,146,137,180,142,224,44,181,142,50,208,181,142,136,115,182,142,226,22,183,142,63,186,183,142,161,93,184,142,6,1,185,142,112,164,185,142,221,71,186,142,78,235,186,142,195,142,187,142,59,50,188,142,184,213,188,142,57,121,189,142,189,28,190,142,69,192,190,142,209,99,191,142,97,7,192,142,245,170,192,142,141,78,193,142,41,242,193,142,200,149,194,142,108,57,195,142,19,221,195,142,190,128,196,142,109,36,197,142,32,200,197,142,214,107,198,142,145,15,199,142,79,179,199,142,18,87,200,142,216,250,200,142,162,158,201,142,112,66,202,142,65,230,202,142,23,138,203,142,240,45,204,142,206,209,204,142,175,117,205,142,148,25,206,142,125,189,206,142,105,97,207,142,90,5,208,142,78,169,208,142,71,77,209,142,67,241,209,142,67,149,210,142,71,57,211,142,78,221,211,142,90,129,212,142,105,37,213,142,124,201,213,142,147,109,214,142,174,17,215,142,205,181,215,142,240,89,216,142,22,254,216,142,64,162,217,142,111,70,218,142,161,234,218,142,214,142,219,142,16,51,220,142,77,215,220,142,143,123,221,142,212,31,222,142,29,196,222,142,106,104,223,142,187,12,224,142,15,177,224,142,103,85,225,142,196,249,225,142,36,158,226,142,135,66,227,142,239,230,227,142,91,139,228,142,202,47,229,142,61,212,229,142,180,120,230,142,47,29,231,142,174,193,231,142,48,102,232,142,183,10,233,142,65,175,233,142,207,83,234,142,96,248,234,142,246,156,235,142,143,65,236,142,45,230,236,142,206,138,237,142,115,47,238,142,27,212,238,142,200,120,239,142,120,29,240,142,44,194,240,142,228,102,241,142,160,11,242,142,96,176,242,142,35,85,243,142,235,249,243,142,182,158,244,142,133,67,245,142,87,232,245,142,46,141,246,142,8,50,247,142,230,214,247,142,200,123,248,142,174,32,249,142,151,197,249,142,133,106,250,142,118,15,251,142,107,180,251,142,100,89,252,142,96,254,252,142,97,163,253,142,101,72,254,142,109,237,254,142,121,146,255,142,136,55,0,143,156,220,0,143,179,129,1,143,206,38,2,143,237,203,2,143,15,113,3,143,54,22,4,143,96,187,4,143,142,96,5,143,192,5,6,143,245,170,6,143,47,80,7,143,108,245,7,143,173,154,8,143,242,63,9,143,58,229,9,143,134,138,10,143,215,47,11,143,42,213,11,143,130,122,12,143,222,31,13,143,61,197,13,143,160,106,14,143,7,16,15,143,113,181,15,143,224,90,16,143,82,0,17,143,200,165,17,143,66,75,18,143,191,240,18,143,65,150,19,143,198,59,20,143,79,225,20,143,219,134,21,143,108,44,22,143,0,210,22,143,152,119,23,143,52,29,24,143,211,194,24,143,119,104,25,143,30,14,26,143,201,179,26,143,119,89,27,143,42,255,27,143,224,164,28,143,154,74,29,143,88,240,29,143,25,150,30,143,222,59,31,143,168,225,31,143,116,135,32,143,69,45,33,143,25,211,33,143,241,120,34,143,205,30,35,143,173,196,35,143,144,106,36,143,119,16,37,143,98,182,37,143,81,92,38,143,68,2,39,143,58,168,39,143,52,78,40,143,49,244,40,143,51,154,41,143,56,64,42,143,65,230,42,143,78,140,43,143,94,50,44,143,115,216,44,143,139,126,45,143,167,36,46,143,198,202,46,143,233,112,47,143,16,23,48,143,59,189,48,143,106,99,49,143,156,9,50,143,210,175,50,143,12,86,51,143,73,252,51,143,139,162,52,143,208,72,53,143,24,239,53,143,101,149,54,143,181,59,55,143,9,226,55,143,97,136,56,143,188,46,57,143,28,213,57,143,127,123,58,143,229,33,59,143,80,200,59,143,190,110,60,143,48,21,61,143,166,187,61,143,31,98,62,143,156,8,63,143,29,175,63,143,162,85,64,143,42,252,64,143,182,162,65,143,70,73,66,143,217,239,66,143,113,150,67,143,12,61,68,143,170,227,68,143,77,138,69,143,243,48,70,143,157,215,70,143,75,126,71,143,252,36,72,143,177,203,72,143,106,114,73,143,39,25,74,143,231,191,74,143,171,102,75,143,115,13,76,143,62,180,76,143,13,91,77,143,224,1,78,143,183,168,78,143,145,79,79,143,111,246,79,143,81,157,80,143,55,68,81,143,32,235,81,143,13,146,82,143,253,56,83,143,242,223,83,143,234,134,84,143,230,45,85,143,229,212,85,143,232,123,86,143,239,34,87,143,250,201,87,143,8,113,88,143,26,24,89,143,48,191,89,143,74,102,90,143,103,13,91,143,136,180,91,143,172,91,92,143,213,2,93,143,1,170,93,143,48,81,94,143,100,248,94,143,155,159,95,143,214,70,96,143,20,238,96,143,87,149,97,143,157,60,98,143,230,227,98,143,52,139,99,143,133,50,100,143,217,217,100,143,50,129,101,143,142,40,102,143,238,207,102,143,81,119,103,143,185,30,104,143,36,198,104,143,146,109,105,143,5,21,106,143,123,188,106,143,244,99,107,143,114,11,108,143,243,178,108,143,120,90,109,143,0,2,110,143,140,169,110,143,28,81,111,143,176,248,111,143,71,160,112,143,226,71,113,143,128,239,113,143,35,151,114,143,201,62,115,143,114,230,115,143,32,142,116,143,209,53,117,143,133,221,117,143,62,133,118,143,250,44,119,143,186,212,119,143,125,124,120,143,68,36,121,143,15,204,121,143,221,115,122,143,175,27,123,143,133,195,123,143,95,107,124,143,60,19,125,143,29,187,125,143,1,99,126,143,233,10,127,143,213,178,127,143,197,90,128,143,184,2,129,143,175,170,129,143,170,82,130,143,168,250,130,143,170,162,131,143,175,74,132,143,184,242,132,143,197,154,133,143,214,66,134,143,234,234,134,143,2,147,135,143,30,59,136,143,61,227,136,143,96,139,137,143,134,51,138,143,176,219,138,143,222,131,139,143,16,44,140,143,69,212,140,143,126,124,141,143,186,36,142,143,251,204,142,143,62,117,143,143,134,29,144,143,209,197,144,143,32,110,145,143,114,22,146,143,200,190,146,143,34,103,147,143,128,15,148,143,225,183,148,143,69,96,149,143,174,8,150,143,26,177,150,143,138,89,151,143,253,1,152,143,116,170,152,143,238,82,153,143,109,251,153,143,239,163,154,143,116,76,155,143,253,244,155,143,138,157,156,143,27,70,157,143,175,238,157,143,71,151,158,143,226,63,159,143,129,232,159,143,36,145,160,143,202,57,161,143,116,226,161,143,34,139,162,143,211,51,163,143,136,220,163,143,65,133,164,143,253,45,165,143,189,214,165,143,128,127,166,143,71,40,167,143,18,209,167,143,225,121,168,143,179,34,169,143,136,203,169,143,98,116,170,143,62,29,171,143,31,198,171,143,3,111,172,143,235,23,173,143,214,192,173,143,198,105,174,143,184,18,175,143,175,187,175,143,168,100,176,143,166,13,177,143,167,182,177,143,172,95,178,143,181,8,179,143,193,177,179,143,208,90,180,143,228,3,181,143,251,172,181,143,21,86,182,143,51,255,182,143,85,168,183,143,123,81,184,143,164,250,184,143,208,163,185,143,1,77,186,143,53,246,186,143,108,159,187,143,167,72,188,143,230,241,188,143,40,155,189,143,110,68,190,143,184,237,190,143,5,151,191,143,86,64,192,143,170,233,192,143,2,147,193,143,94,60,194,143,189,229,194,143,32,143,195,143,135,56,196,143,241,225,196,143,95,139,197,143,208,52,198,143,69,222,198,143,189,135,199,143,57,49,200,143,185,218,200,143,60,132,201,143,195,45,202,143,78,215,202,143,220,128,203,143,110,42,204,143,3,212,204,143,156,125,205,143,57,39,206,143,217,208,206,143,125,122,207,143,36,36,208,143,207,205,208,143,126,119,209,143,48,33,210,143,229,202,210,143,159,116,211,143,92,30,212,143,28,200,212,143,224,113,213,143,168,27,214,143,115,197,214,143,66,111,215,143,21,25,216,143,235,194,216,143,196,108,217,143,162,22,218,143,131,192,218,143,103,106,219,143,79,20,220,143,59,190,220,143,42,104,221,143,29,18,222,143,19,188,222,143,13,102,223,143,10,16,224,143,12,186,224,143,16,100,225,143,25,14,226,143,36,184,226,143,52,98,227,143,71,12,228,143,94,182,228,143,120,96,229,143,149,10,230,143,183,180,230,143,220,94,231,143,4,9,232,143,48,179,232,143,96,93,233,143,147,7,234,143,202,177,234,143,4,92,235,143,66,6,236,143,132,176,236,143,201,90,237,143,18,5,238,143,94,175,238,143,174,89,239,143,1,4,240,143,88,174,240,143,179,88,241,143,17,3,242,143,114,173,242,143,216,87,243,143,64,2,244,143,173,172,244,143,29,87,245,143,144,1,246,143,7,172,246,143,130,86,247,143,0,1,248,143,130,171,248,143,7,86,249,143,144,0,250,143,28,171,250,143,172,85,251,143,64,0,252,143,215,170,252,143,114,85,253,143,16,0,254,143,178,170,254,143,87,85,255,143,0,0,0,148,86,85,0,148,174,170,0,148,8,0,1,148,99,85,1,148,193,170,1,148,32,0,2,148,129,85,2,148,227,170,2,148,72,0,3,148,174,85,3,148,22,171,3,148,128,0,4,148,235,85,4,148,89,171,4,148,200,0,5,148,56,86,5,148,171,171,5,148,31,1,6,148,150,86,6,148,14,172,6,148,135,1,7,148,3,87,7,148,128,172,7,148,255,1,8,148,128,87,8,148,2,173,8,148,135,2,9,148,13,88,9,148,149,173,9,148,30,3,10,148,170,88,10,148,55,174,10,148,198,3,11,148,87,89,11,148,233,174,11,148,126,4,12,148,20,90,12,148,171,175,12,148,69,5,13,148,224,90,13,148,125,176,13,148,28,6,14,148,189,91,14,148,95,177,14,148,3,7,15,148,169,92,15,148,81,178,15,148,250,7,16,148,166,93,16,148,83,179,16,148,1,9,17,148,178,94,17,148,100,180,17,148,24,10,18,148,206,95,18,148,134,181,18,148,63,11,19,148,250,96,19,148,183,182,19,148,117,12,20,148,54,98,20,148,248,183,20,148,188,13,21,148,129,99,21,148,73,185,21,148,18,15,22,148,221,100,22,148,170,186,22,148,120,16,23,148,72,102,23,148,26,188,23,148,238,17,24,148,195,103,24,148,155,189,24,148,116,19,25,148,78,105,25,148,43,191,25,148,9,21,26,148,233,106,26,148,203,192,26,148,174,22,27,148,148,108,27,148,123,194,27,148,99,24,28,148,78,110,28,148,58,196,28,148,40,26,29,148,24,112,29,148,10,198,29,148,253,27,30,148,242,113,30,148,233,199,30,148,225,29,31,148,220,115,31,148,216,201,31,148,213,31,32,148,213,117,32,148,214,203,32,148,217,33,33,148,222,119,33,148,229,205,33,148,237,35,34,148,247,121,34,148,3,208,34,148,17,38,35,148,32,124,35,148,49,210,35,148,68,40,36,148,88,126,36,148,110,212,36,148,135,42,37,148,160,128,37,148,188,214,37,148,217,44,38,148,248,130,38,148,25,217,38,148,59,47,39,148,96,133,39,148,134,219,39,148,173,49,40,148,215,135,40,148,2,222,40,148,47,52,41,148,94,138,41,148,142,224,41,148,192,54,42,148,244,140,42,148,42,227,42,148,98,57,43,148,155,143,43,148,214,229,43,148,18,60,44,148,81,146,44,148,145,232,44,148,211,62,45,148,22,149,45,148,92,235,45,148,163,65,46,148,236,151,46,148,54,238,46,148,130,68,47,148,209,154,47,148,32,241,47,148,114,71,48,148,197,157,48,148,26,244,48,148,113,74,49,148,201,160,49,148,35,247,49,148,127,77,50,148,221,163,50,148,61,250,50,148,158,80,51,148,1,167,51,148,101,253,51,148,204,83,52,148,52,170,52,148,157,0,53,148,9,87,53,148,118,173,53,148,229,3,54,148,86,90,54,148,201,176,54,148,61,7,55,148,179,93,55,148,42,180,55,148,164,10,56,148,31,97,56,148,156,183,56,148,26,14,57,148,155,100,57,148,29,187,57,148,161,17,58,148,38,104,58,148,173,190,58,148,54,21,59,148,193,107,59,148,77,194,59,148,220,24,60,148,108,111,60,148,253,197,60,148,145,28,61,148,38,115,61,148,188,201,61,148,85,32,62,148,239,118,62,148,139,205,62,148,41,36,63,148,200,122,63,148,105,209,63,148,12,40,64,148,177,126,64,148,87,213,64,148,255,43,65,148,169,130,65,148,85,217,65,148,2,48,66,148,177,134,66,148,97,221,66,148,20,52,67,148,200,138,67,148,126,225,67,148,53,56,68,148,239,142,68,148,170,229,68,148,102,60,69,148,37,147,69,148,229,233,69,148,167,64,70,148,106,151,70,148,48,238,70,148,247,68,71,148,192,155,71,148,138,242,71,148,86,73,72,148,36,160,72,148,244,246,72,148,197,77,73,148,152,164,73,148,109,251,73,148,67,82,74,148,28,169,74,148,246,255,74,148,209,86,75,148,175,173,75,148,142,4,76,148,111,91,76,148,81,178,76,148,53,9,77,148,27,96,77,148,3,183,77,148,236,13,78,148,215,100,78,148,196,187,78,148,179,18,79,148,163,105,79,148,149,192,79,148,136,23,80,148], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([126,110,80,148,117,197,80,148,110,28,81,148,104,115,81,148,100,202,81,148,98,33,82,148,98,120,82,148,99,207,82,148,102,38,83,148,107,125,83,148,114,212,83,148,122,43,84,148,132,130,84,148,143,217,84,148,156,48,85,148,171,135,85,148,188,222,85,148,207,53,86,148,227,140,86,148,249,227,86,148,16,59,87,148,41,146,87,148,68,233,87,148,97,64,88,148,127,151,88,148,159,238,88,148,193,69,89,148,229,156,89,148,10,244,89,148,49,75,90,148,89,162,90,148,132,249,90,148,176,80,91,148,221,167,91,148,13,255,91,148,62,86,92,148,113,173,92,148,165,4,93,148,220,91,93,148,19,179,93,148,77,10,94,148,136,97,94,148,197,184,94,148,4,16,95,148,69,103,95,148,135,190,95,148,203,21,96,148,16,109,96,148,87,196,96,148,160,27,97,148,235,114,97,148,55,202,97,148,133,33,98,148,213,120,98,148,38,208,98,148,122,39,99,148,206,126,99,148,37,214,99,148,125,45,100,148,215,132,100,148,51,220,100,148,144,51,101,148,239,138,101,148,80,226,101,148,178,57,102,148,22,145,102,148,124,232,102,148,227,63,103,148,77,151,103,148,183,238,103,148,36,70,104,148,146,157,104,148,2,245,104,148,116,76,105,148,231,163,105,148,92,251,105,148,211,82,106,148,75,170,106,148,197,1,107,148,65,89,107,148,191,176,107,148,62,8,108,148,191,95,108,148,65,183,108,148,197,14,109,148,75,102,109,148,211,189,109,148,92,21,110,148,231,108,110,148,116,196,110,148,2,28,111,148,146,115,111,148,36,203,111,148,184,34,112,148,77,122,112,148,228,209,112,148,124,41,113,148,22,129,113,148,178,216,113,148,80,48,114,148,239,135,114,148,144,223,114,148,51,55,115,148,215,142,115,148,125,230,115,148,37,62,116,148,206,149,116,148,121,237,116,148,38,69,117,148,212,156,117,148,132,244,117,148,54,76,118,148,234,163,118,148,159,251,118,148,86,83,119,148,14,171,119,148,200,2,120,148,132,90,120,148,66,178,120,148,1,10,121,148,194,97,121,148,132,185,121,148,73,17,122,148,15,105,122,148,214,192,122,148,160,24,123,148,107,112,123,148,55,200,123,148,6,32,124,148,214,119,124,148,168,207,124,148,123,39,125,148,80,127,125,148,39,215,125,148,255,46,126,148,217,134,126,148,181,222,126,148,147,54,127,148,114,142,127,148,83,230,127,148,53,62,128,148,25,150,128,148,255,237,128,148,231,69,129,148,208,157,129,148,187,245,129,148,167,77,130,148,149,165,130,148,133,253,130,148,119,85,131,148,106,173,131,148,95,5,132,148,86,93,132,148,78,181,132,148,72,13,133,148,68,101,133,148,65,189,133,148,64,21,134,148,64,109,134,148,67,197,134,148,71,29,135,148,76,117,135,148,84,205,135,148,93,37,136,148,103,125,136,148,116,213,136,148,130,45,137,148,145,133,137,148,163,221,137,148,182,53,138,148,202,141,138,148,225,229,138,148,249,61,139,148,18,150,139,148,46,238,139,148,75,70,140,148,105,158,140,148,138,246,140,148,172,78,141,148,207,166,141,148,245,254,141,148,28,87,142,148,68,175,142,148,111,7,143,148,155,95,143,148,200,183,143,148,248,15,144,148,41,104,144,148,91,192,144,148,144,24,145,148,198,112,145,148,253,200,145,148,55,33,146,148,114,121,146,148,174,209,146,148,237,41,147,148,44,130,147,148,110,218,147,148,177,50,148,148,246,138,148,148,61,227,148,148,133,59,149,148,207,147,149,148,27,236,149,148,104,68,150,148,183,156,150,148,8,245,150,148,90,77,151,148,174,165,151,148,3,254,151,148,90,86,152,148,179,174,152,148,14,7,153,148,106,95,153,148,200,183,153,148,39,16,154,148,137,104,154,148,235,192,154,148,80,25,155,148,182,113,155,148,30,202,155,148,135,34,156,148,242,122,156,148,95,211,156,148,206,43,157,148,62,132,157,148,175,220,157,148,35,53,158,148,152,141,158,148,14,230,158,148,135,62,159,148,1,151,159,148,124,239,159,148,250,71,160,148,121,160,160,148,249,248,160,148,124,81,161,148,255,169,161,148,133,2,162,148,12,91,162,148,149,179,162,148,32,12,163,148,172,100,163,148,58,189,163,148,201,21,164,148,90,110,164,148,237,198,164,148,129,31,165,148,24,120,165,148,175,208,165,148,73,41,166,148,228,129,166,148,128,218,166,148,31,51,167,148,191,139,167,148,96,228,167,148,3,61,168,148,168,149,168,148,79,238,168,148,247,70,169,148,161,159,169,148,76,248,169,148,250,80,170,148,168,169,170,148,89,2,171,148,11,91,171,148,191,179,171,148,116,12,172,148,43,101,172,148,228,189,172,148,158,22,173,148,90,111,173,148,24,200,173,148,215,32,174,148,152,121,174,148,90,210,174,148,30,43,175,148,228,131,175,148,172,220,175,148,117,53,176,148,64,142,176,148,12,231,176,148,218,63,177,148,170,152,177,148,123,241,177,148,78,74,178,148,34,163,178,148,249,251,178,148,209,84,179,148,170,173,179,148,133,6,180,148,98,95,180,148,64,184,180,148,32,17,181,148,2,106,181,148,230,194,181,148,203,27,182,148,177,116,182,148,153,205,182,148,131,38,183,148,111,127,183,148,92,216,183,148,75,49,184,148,59,138,184,148,45,227,184,148,33,60,185,148,22,149,185,148,13,238,185,148,6,71,186,148,0,160,186,148,252,248,186,148,250,81,187,148,249,170,187,148,250,3,188,148,252,92,188,148,0,182,188,148,6,15,189,148,13,104,189,148,22,193,189,148,33,26,190,148,45,115,190,148,59,204,190,148,74,37,191,148,91,126,191,148,110,215,191,148,131,48,192,148,153,137,192,148,176,226,192,148,202,59,193,148,228,148,193,148,1,238,193,148,31,71,194,148,63,160,194,148,96,249,194,148,131,82,195,148,168,171,195,148,206,4,196,148,246,93,196,148,32,183,196,148,75,16,197,148,120,105,197,148,167,194,197,148,215,27,198,148,8,117,198,148,60,206,198,148,113,39,199,148,167,128,199,148,223,217,199,148,25,51,200,148,85,140,200,148,146,229,200,148,209,62,201,148,17,152,201,148,83,241,201,148,151,74,202,148,220,163,202,148,35,253,202,148,107,86,203,148,181,175,203,148,1,9,204,148,78,98,204,148,157,187,204,148,238,20,205,148,64,110,205,148,148,199,205,148,233,32,206,148,64,122,206,148,153,211,206,148,243,44,207,148,79,134,207,148,173,223,207,148,12,57,208,148,109,146,208,148,207,235,208,148,51,69,209,148,153,158,209,148,0,248,209,148,105,81,210,148,212,170,210,148,64,4,211,148,174,93,211,148,29,183,211,148,142,16,212,148,1,106,212,148,117,195,212,148,235,28,213,148,98,118,213,148,219,207,213,148,86,41,214,148,210,130,214,148,80,220,214,148,208,53,215,148,81,143,215,148,212,232,215,148,88,66,216,148,222,155,216,148,102,245,216,148,239,78,217,148,122,168,217,148,7,2,218,148,149,91,218,148,36,181,218,148,182,14,219,148,73,104,219,148,221,193,219,148,115,27,220,148,11,117,220,148,165,206,220,148,64,40,221,148,220,129,221,148,122,219,221,148,26,53,222,148,188,142,222,148,95,232,222,148,3,66,223,148,170,155,223,148,82,245,223,148,251,78,224,148,166,168,224,148,83,2,225,148,1,92,225,148,177,181,225,148,99,15,226,148,22,105,226,148,203,194,226,148,129,28,227,148,57,118,227,148,243,207,227,148,174,41,228,148,107,131,228,148,41,221,228,148,233,54,229,148,171,144,229,148,110,234,229,148,51,68,230,148,249,157,230,148,193,247,230,148,139,81,231,148,86,171,231,148,35,5,232,148,242,94,232,148,194,184,232,148,147,18,233,148,103,108,233,148,59,198,233,148,18,32,234,148,234,121,234,148,196,211,234,148,159,45,235,148,124,135,235,148,91,225,235,148,59,59,236,148,28,149,236,148,0,239,236,148,229,72,237,148,203,162,237,148,179,252,237,148,157,86,238,148,136,176,238,148,117,10,239,148,100,100,239,148,84,190,239,148,70,24,240,148,57,114,240,148,46,204,240,148,36,38,241,148,29,128,241,148,22,218,241,148,18,52,242,148,15,142,242,148,13,232,242,148,13,66,243,148,15,156,243,148,18,246,243,148,23,80,244,148,30,170,244,148,38,4,245,148,48,94,245,148,59,184,245,148,72,18,246,148,86,108,246,148,102,198,246,148,120,32,247,148,139,122,247,148,160,212,247,148,183,46,248,148,207,136,248,148,233,226,248,148,4,61,249,148,33,151,249,148,63,241,249,148,95,75,250,148,129,165,250,148,164,255,250,148,201,89,251,148,239,179,251,148,23,14,252,148,65,104,252,148,108,194,252,148,153,28,253,148,199,118,253,148,247,208,253,148,41,43,254,148,92,133,254,148,145,223,254,148,199,57,255,148,255,147,255,148,56,238,255,148,116,72,0,149,176,162,0,149,239,252,0,149,46,87,1,149,112,177,1,149,179,11,2,149,248,101,2,149,62,192,2,149,134,26,3,149,207,116,3,149,26,207,3,149,103,41,4,149,181,131,4,149,5,222,4,149,86,56,5,149,169,146,5,149,253,236,5,149,84,71,6,149,171,161,6,149,4,252,6,149,95,86,7,149,188,176,7,149,26,11,8,149,121,101,8,149,219,191,8,149,61,26,9,149,162,116,9,149,8,207,9,149,111,41,10,149,216,131,10,149,67,222,10,149,175,56,11,149,29,147,11,149,141,237,11,149,254,71,12,149,113,162,12,149,229,252,12,149,91,87,13,149,210,177,13,149,75,12,14,149,197,102,14,149,65,193,14,149,191,27,15,149,62,118,15,149,191,208,15,149,66,43,16,149,198,133,16,149,75,224,16,149,211,58,17,149,91,149,17,149,230,239,17,149,114,74,18,149,255,164,18,149,142,255,18,149,31,90,19,149,177,180,19,149,69,15,20,149,218,105,20,149,113,196,20,149,10,31,21,149,164,121,21,149,64,212,21,149,221,46,22,149,124,137,22,149,28,228,22,149,190,62,23,149,98,153,23,149,7,244,23,149,174,78,24,149,86,169,24,149,0,4,25,149,171,94,25,149,88,185,25,149,7,20,26,149,183,110,26,149,105,201,26,149,28,36,27,149,209,126,27,149,135,217,27,149,64,52,28,149,249,142,28,149,180,233,28,149,113,68,29,149,47,159,29,149,239,249,29,149,177,84,30,149,116,175,30,149,56,10,31,149,255,100,31,149,198,191,31,149,144,26,32,149,91,117,32,149,39,208,32,149,245,42,33,149,197,133,33,149,150,224,33,149,105,59,34,149,61,150,34,149,19,241,34,149,234,75,35,149,195,166,35,149,158,1,36,149,122,92,36,149,88,183,36,149,55,18,37,149,24,109,37,149,251,199,37,149,223,34,38,149,196,125,38,149,171,216,38,149,148,51,39,149,126,142,39,149,106,233,39,149,87,68,40,149,70,159,40,149,55,250,40,149,41,85,41,149,29,176,41,149,18,11,42,149,9,102,42,149,1,193,42,149,251,27,43,149,247,118,43,149,244,209,43,149,242,44,44,149,242,135,44,149,244,226,44,149,247,61,45,149,252,152,45,149,3,244,45,149,11,79,46,149,20,170,46,149,31,5,47,149,44,96,47,149,58,187,47,149,74,22,48,149,91,113,48,149,110,204,48,149,131,39,49,149,153,130,49,149,176,221,49,149,202,56,50,149,228,147,50,149,1,239,50,149,30,74,51,149,62,165,51,149,95,0,52,149,129,91,52,149,165,182,52,149,203,17,53,149,242,108,53,149,27,200,53,149,69,35,54,149,113,126,54,149,159,217,54,149,206,52,55,149,254,143,55,149,48,235,55,149,100,70,56,149,153,161,56,149,208,252,56,149,8,88,57,149,66,179,57,149,125,14,58,149,186,105,58,149,249,196,58,149,57,32,59,149,123,123,59,149,190,214,59,149,3,50,60,149,73,141,60,149,145,232,60,149,218,67,61,149,37,159,61,149,114,250,61,149,192,85,62,149,15,177,62,149,97,12,63,149,179,103,63,149,8,195,63,149,94,30,64,149,181,121,64,149,14,213,64,149,104,48,65,149,196,139,65,149,34,231,65,149,129,66,66,149,226,157,66,149,68,249,66,149,168,84,67,149,13,176,67,149,116,11,68,149,221,102,68,149,71,194,68,149,178,29,69,149,31,121,69,149,142,212,69,149,254,47,70,149,112,139,70,149,227,230,70,149,88,66,71,149,206,157,71,149,70,249,71,149,192,84,72,149,59,176,72,149,183,11,73,149,53,103,73,149,181,194,73,149,54,30,74,149,185,121,74,149,61,213,74,149,195,48,75,149,75,140,75,149,212,231,75,149,94,67,76,149,234,158,76,149,120,250,76,149,7,86,77,149,151,177,77,149,42,13,78,149,189,104,78,149,83,196,78,149,233,31,79,149,130,123,79,149,28,215,79,149,183,50,80,149,84,142,80,149,243,233,80,149,147,69,81,149,52,161,81,149,216,252,81,149,124,88,82,149,35,180,82,149,202,15,83,149,116,107,83,149,31,199,83,149,203,34,84,149,121,126,84,149,41,218,84,149,218,53,85,149,140,145,85,149,64,237,85,149,246,72,86,149,173,164,86,149,102,0,87,149,32,92,87,149,220,183,87,149,153,19,88,149,88,111,88,149,25,203,88,149,219,38,89,149,158,130,89,149,99,222,89,149,42,58,90,149,242,149,90,149,187,241,90,149,135,77,91,149,83,169,91,149,34,5,92,149,241,96,92,149,195,188,92,149,150,24,93,149,106,116,93,149,64,208,93,149,23,44,94,149,240,135,94,149,203,227,94,149,167,63,95,149,133,155,95,149,100,247,95,149,68,83,96,149,39,175,96,149,10,11,97,149,240,102,97,149,215,194,97,149,191,30,98,149,169,122,98,149,148,214,98,149,129,50,99,149,112,142,99,149,96,234,99,149,81,70,100,149,68,162,100,149,57,254,100,149,47,90,101,149,39,182,101,149,32,18,102,149,26,110,102,149,23,202,102,149,20,38,103,149,20,130,103,149,21,222,103,149,23,58,104,149,27,150,104,149,32,242,104,149,39,78,105,149,48,170,105,149,58,6,106,149,69,98,106,149,82,190,106,149,97,26,107,149,113,118,107,149,131,210,107,149,150,46,108,149,171,138,108,149,193,230,108,149,217,66,109,149,242,158,109,149,13,251,109,149,41,87,110,149,71,179,110,149,102,15,111,149,135,107,111,149,170,199,111,149,205,35,112,149,243,127,112,149,26,220,112,149,67,56,113,149,109,148,113,149,152,240,113,149,197,76,114,149,244,168,114,149,36,5,115,149,86,97,115,149,137,189,115,149,190,25,116,149,244,117,116,149,44,210,116,149,101,46,117,149,160,138,117,149,220,230,117,149,26,67,118,149,89,159,118,149,154,251,118,149,221,87,119,149,33,180,119,149,102,16,120,149,173,108,120,149,245,200,120,149,63,37,121,149,139,129,121,149,216,221,121,149,39,58,122,149,119,150,122,149,200,242,122,149,28,79,123,149,112,171,123,149,198,7,124,149,30,100,124,149,119,192,124,149,210,28,125,149,46,121,125,149,140,213,125,149,235,49,126,149,76,142,126,149,174,234,126,149,18,71,127,149,120,163,127,149,222,255,127,149,71,92,128,149,177,184,128,149,28,21,129,149,137,113,129,149,247,205,129,149,103,42,130,149,217,134,130,149,76,227,130,149,192,63,131,149,54,156,131,149,174,248,131,149,39,85,132,149,161,177,132,149,30,14,133,149,155,106,133,149,26,199,133,149,155,35,134,149,29,128,134,149,161,220,134,149,38,57,135,149,172,149,135,149,53,242,135,149,190,78,136,149,73,171,136,149,214,7,137,149,100,100,137,149,244,192,137,149,133,29,138,149,24,122,138,149,172,214,138,149,66,51,139,149,217,143,139,149,114,236,139,149,12,73,140,149,168,165,140,149,70,2,141,149,228,94,141,149,133,187,141,149,39,24,142,149,202,116,142,149,111,209,142,149,21,46,143,149,189,138,143,149,102,231,143,149,17,68,144,149,190,160,144,149,108,253,144,149,27,90,145,149,204,182,145,149,126,19,146,149,50,112,146,149,232,204,146,149,159,41,147,149,87,134,147,149,17,227,147,149,205,63,148,149,138,156,148,149,72,249,148,149,8,86,149,149,202,178,149,149,140,15,150,149,81,108,150,149,23,201,150,149,222,37,151,149,167,130,151,149,114,223,151,149,62,60,152,149,12,153,152,149,219,245,152,149,171,82,153,149,125,175,153,149,81,12,154,149,38,105,154,149,252,197,154,149,212,34,155,149,174,127,155,149,137,220,155,149,101,57,156,149,67,150,156,149,35,243,156,149,4,80,157,149,230,172,157,149,203,9,158,149,176,102,158,149,151,195,158,149,128,32,159,149,106,125,159,149,85,218,159,149,66,55,160,149,49,148,160,149,33,241,160,149,18,78,161,149,5,171,161,149,250,7,162,149,240,100,162,149,231,193,162,149,225,30,163,149,219,123,163,149,215,216,163,149,213,53,164,149,212,146,164,149,212,239,164,149,214,76,165,149,218,169,165,149,223,6,166,149,229,99,166,149,237,192,166,149,247,29,167,149,2,123,167,149,14,216,167,149,28,53,168,149,44,146,168,149,60,239,168,149,79,76,169,149,99,169,169,149,120,6,170,149,143,99,170,149,168,192,170,149,194,29,171,149,221,122,171,149,250,215,171,149,24,53,172,149,56,146,172,149,90,239,172,149,125,76,173,149,161,169,173,149,199,6,174,149,238,99,174,149,23,193,174,149,65,30,175,149,109,123,175,149,155,216,175,149,201,53,176,149,250,146,176,149,43,240,176,149,95,77,177,149,148,170,177,149,202,7,178,149,2,101,178,149,59,194,178,149,118,31,179,149,178,124,179,149,240,217,179,149,47,55,180,149,111,148,180,149,178,241,180,149,245,78,181,149,58,172,181,149,129,9,182,149,201,102,182,149,19,196,182,149,94,33,183,149,171,126,183,149,249,219,183,149,72,57,184,149,153,150,184,149,236,243,184,149,64,81,185,149,149,174,185,149,236,11,186,149,69,105,186,149,159,198,186,149,250,35,187,149,87,129,187,149,182,222,187,149,22,60,188,149,119,153,188,149,218,246,188,149,62,84,189,149,164,177,189,149,11,15,190,149,116,108,190,149,223,201,190,149,74,39,191,149,184,132,191,149,38,226,191,149,151,63,192,149,8,157,192,149,124,250,192,149,240,87,193,149,102,181,193,149,222,18,194,149,87,112,194,149,210,205,194,149,78,43,195,149,203,136,195,149,75,230,195,149,203,67,196,149,77,161,196,149,209,254,196,149,86,92,197,149,220,185,197,149,100,23,198,149,237,116,198,149,120,210,198,149,5,48,199,149,147,141,199,149,34,235,199,149,179,72,200,149,69,166,200,149,217,3,201,149,110,97,201,149,5,191,201,149,157,28,202,149,55,122,202,149,210,215,202,149,110,53,203,149,13,147,203,149,172,240,203,149,77,78,204,149,240,171,204,149,148,9,205,149,57,103,205,149,224,196,205,149,137,34,206,149,51,128,206,149,222,221,206,149,139,59,207,149,57,153,207,149,233,246,207,149,154,84,208,149,77,178,208,149,1,16,209,149,183,109,209,149,110,203,209,149,39,41,210,149,225,134,210,149,157,228,210,149,90,66,211,149,24,160,211,149,216,253,211,149,154,91,212,149,93,185,212,149,33,23,213,149,231,116,213,149,175,210,213,149,120,48,214,149,66,142,214,149,14,236,214,149,219,73,215,149,170,167,215,149,122,5,216,149,76,99,216,149,31,193,216,149,244,30,217,149,202,124,217,149,161,218,217,149,122,56,218,149,85,150,218,149,49,244,218,149,14,82,219,149,237,175,219,149,206,13,220,149,175,107,220,149,147,201,220,149,120,39,221,149,94,133,221,149,70,227,221,149,47,65,222,149,26,159,222,149,6,253,222,149,243,90,223,149,226,184,223,149,211,22,224,149,197,116,224,149,184,210,224,149,173,48,225,149,164,142,225,149,156,236,225,149,149,74,226,149,144,168,226,149,140,6,227,149,138,100,227,149,137,194,227,149,138,32,228,149,140,126,228,149,143,220,228,149,148,58,229,149,155,152,229,149,163,246,229,149,172,84,230,149,183,178,230,149,196,16,231,149,210,110,231,149,225,204,231,149,242,42,232,149,4,137,232,149,24,231,232,149,45,69,233,149,67,163,233,149,92,1,234,149,117,95,234,149,144,189,234,149,173,27,235,149,203,121,235,149,234,215,235,149,11,54,236,149,45,148,236,149,81,242,236,149,118,80,237,149,157,174,237,149,197,12,238,149,239,106,238,149,26,201,238,149,70,39,239,149,116,133,239,149,164,227,239,149,213,65,240,149,7,160,240,149,59,254,240,149,112,92,241,149,167,186,241,149,223,24,242,149,25,119,242,149,84,213,242,149,144,51,243,149,207,145,243,149,14,240,243,149,79,78,244,149,145,172,244,149,213,10,245,149,27,105,245,149,97,199,245,149,170,37,246,149,243,131,246,149,63,226,246,149,139,64,247,149,217,158,247,149,41,253,247,149,122,91,248,149,204,185,248,149,32,24,249,149,117,118,249,149,204,212,249,149,36,51,250,149,126,145,250,149,217,239,250,149,54,78,251,149,148,172,251,149,243,10,252,149,84,105,252,149,183,199,252,149,27,38,253,149,128,132,253,149,231,226,253,149,79,65,254,149,185,159,254,149,36,254,254,149,145,92,255,149,255,186,255,149,110,25,0,150,223,119,0,150,81,214,0,150,197,52,1,150,59,147,1,150,177,241,1,150,42,80,2,150,163,174,2,150,30,13,3,150,155,107,3,150,25,202,3,150,152,40,4,150,25,135,4,150,156,229,4,150,31,68,5,150,165,162,5,150,43,1,6,150,180,95,6,150,61,190,6,150,200,28,7,150,85,123,7,150,227,217,7,150,114,56,8,150,3,151,8,150,149,245,8,150,41,84,9,150,190,178,9,150,85,17,10,150,237,111,10,150,134,206,10,150,33,45,11,150,190,139,11,150,92,234,11,150,251,72,12,150,156,167,12,150,62,6,13,150,225,100,13,150,135,195,13,150,45,34,14,150,213,128,14,150,127,223,14,150,41,62,15,150,214,156,15,150,131,251,15,150,51,90,16,150,227,184,16,150,149,23,17,150,73,118,17,150,254,212,17,150,180,51,18,150,108,146,18,150,37,241,18,150,224,79,19,150,156,174,19,150,90,13,20,150,25,108,20,150,218,202,20,150,156,41,21,150,95,136,21,150,36,231,21,150,234,69,22,150,178,164,22,150,123,3,23,150,70,98,23,150,18,193,23,150,223,31,24,150,174,126,24,150,126,221,24,150,80,60,25,150,36,155,25,150,248,249,25,150,206,88,26,150,166,183,26,150,127,22,27,150,89,117,27,150,53,212,27,150,19,51,28,150,241,145,28,150,210,240,28,150,179,79,29,150,150,174,29,150,123,13,30,150,97,108,30,150,72,203,30,150,49,42,31,150,27,137,31,150,7,232,31,150,244,70,32,150,227,165,32,150,211,4,33,150,196,99,33,150,183,194,33,150,171,33,34,150,161,128,34,150,152,223,34,150,145,62,35,150,139,157,35,150,134,252,35,150,131,91,36,150,130,186,36,150,129,25,37,150,131,120,37,150,133,215,37,150,137,54,38,150,143,149,38,150,150,244,38,150,158,83,39,150,168,178,39,150,179,17,40,150,192,112,40,150,206,207,40,150,222,46,41,150,239,141,41,150,1,237,41,150,21,76,42,150,42,171,42,150,65,10,43,150,89,105,43,150,115,200,43,150,142,39,44,150,170,134,44,150,200,229,44,150,232,68,45,150,8,164,45,150,42,3,46,150,78,98,46,150,115,193,46,150,154,32,47,150,193,127,47,150,235,222,47,150,22,62,48,150,66,157,48,150,111,252,48,150,158,91,49,150,207,186,49,150,1,26,50,150,52,121,50,150,105,216,50,150,159,55,51,150,215,150,51,150,16,246,51,150,74,85,52,150,134,180,52,150,195,19,53,150,2,115,53,150,66,210,53,150,132,49,54,150,199,144,54,150,11,240,54,150,81,79,55,150,153,174,55,150,225,13,56,150,43,109,56,150,119,204,56,150,196,43,57,150,18,139,57,150,98,234,57,150,180,73,58,150,6,169,58,150,90,8,59,150,176,103,59,150,7,199,59,150,95,38,60,150,185,133,60,150,20,229,60,150,113,68,61,150,207,163,61,150,47,3,62,150,144,98,62,150,242,193,62,150,86,33,63,150,187,128,63,150,34,224,63,150,138,63,64,150,243,158,64,150,94,254,64,150,203,93,65,150,56,189,65,150,167,28,66,150,24,124,66,150,138,219,66,150,253,58,67,150,114,154,67,150,233,249,67,150,96,89,68,150,217,184,68,150,84,24,69,150,208,119,69,150,77,215,69,150,204,54,70,150,76,150,70,150,206,245,70,150,81,85,71,150,213,180,71,150,91,20,72,150,227,115,72,150,107,211,72,150,246,50,73,150,129,146,73,150,14,242,73,150,156,81,74,150,44,177,74,150,190,16,75,150,80,112,75,150,228,207,75,150,122,47,76,150,17,143,76,150,169,238,76,150,67,78,77,150,222,173,77,150,122,13,78,150,24,109,78,150,184,204,78,150,89,44,79,150,251,139,79,150,158,235,79,150,68,75,80,150,234,170,80,150,146,10,81,150,59,106,81,150,230,201,81,150,146,41,82,150,64,137,82,150,239,232,82,150,159,72,83,150,81,168,83,150,4,8,84,150,185,103,84,150,111,199,84,150,38,39,85,150,223,134,85,150,153,230,85,150,85,70,86,150,18,166,86,150,208,5,87,150,144,101,87,150,82,197,87,150,20,37,88,150,217,132,88,150,158,228,88,150,101,68,89,150,46,164,89,150,247,3,90,150,195,99,90,150,143,195,90,150,93,35,91,150,45,131,91,150,254,226,91,150,208,66,92,150,163,162,92,150,121,2,93,150,79,98,93,150,39,194,93,150,0,34,94,150,219,129,94,150,183,225,94,150,149,65,95,150,116,161,95,150,84,1,96,150,54,97,96,150,25,193,96,150,253,32,97,150,227,128,97,150,203,224,97,150,180,64,98,150,158,160,98,150,137,0,99,150,119,96,99,150,101,192,99,150,85,32,100,150,70,128,100,150,57,224,100,150,45,64,101,150,34,160,101,150,25,0,102,150,17,96,102,150,11,192,102,150,6,32,103,150,3,128,103,150,0,224,103,150,0,64,104,150,0,160,104,150,3,0,105,150,6,96,105,150,11,192,105,150,17,32,106,150,25,128,106,150,34,224,106,150,45,64,107,150,57,160,107,150,70,0,108,150,85,96,108,150,101,192,108,150,118,32,109,150,137,128,109,150,158,224,109,150,179,64,110,150,203,160,110,150,227,0,111,150,253,96,111,150,24,193,111,150,53,33,112,150,83,129,112,150,115,225,112,150,148,65,113,150,182,161,113,150,218,1,114,150,255,97,114,150,38,194,114,150,78,34,115,150,119,130,115,150,162,226,115,150,206,66,116,150,252,162,116,150,43,3,117,150,91,99,117,150,141,195,117,150,192,35,118,150,244,131,118,150,42,228,118,150,98,68,119,150,155,164,119,150,213,4,120,150,16,101,120,150,77,197,120,150,140,37,121,150,203,133,121,150,12,230,121,150,79,70,122,150,147,166,122,150,216,6,123,150,31,103,123,150,103,199,123,150,177,39,124,150,252,135,124,150,72,232,124,150,150,72,125,150,229,168,125,150,53,9,126,150,135,105,126,150,218,201,126,150,47,42,127,150,133,138,127,150,221,234,127,150,54,75,128,150,144,171,128,150,235,11,129,150,73,108,129,150,167,204,129,150,7,45,130,150,104,141,130,150,203,237,130,150,47,78,131,150,148,174,131,150,251,14,132,150,99,111,132,150,205,207,132,150,56,48,133,150,164,144,133,150,18,241,133,150,129,81,134,150,242,177,134,150,100,18,135,150,215,114,135,150,76,211,135,150,194,51,136,150,57,148,136,150,178,244,136,150,44,85,137,150,168,181,137,150,37,22,138,150,164,118,138,150,36,215,138,150,165,55,139,150,39,152,139,150,172,248,139,150,49,89,140,150,184,185,140,150,64,26,141,150,202,122,141,150,84,219,141,150,225,59,142,150,111,156,142,150,254,252,142,150,142,93,143,150,32,190,143,150,180,30,144,150,72,127,144,150,222,223,144,150,118,64,145,150,15,161,145,150,169,1,146,150,69,98,146,150,226,194,146,150,128,35,147,150,32,132,147,150,193,228,147,150,99,69,148,150,7,166,148,150,173,6,149,150,83,103,149,150,252,199,149,150,165,40,150,150,80,137,150,150,252,233,150,150,170,74,151,150,89,171,151,150,9,12,152,150,187,108,152,150,110,205,152,150,35,46,153,150,217,142,153,150,144,239,153,150,73,80,154,150,3,177,154,150,191,17,155,150,123,114,155,150,58,211,155,150,249,51,156,150,186,148,156,150,125,245,156,150,65,86,157,150,6,183,157,150,204,23,158,150,148,120,158,150,94,217,158,150,40,58,159,150,244,154,159,150,194,251,159,150,145,92,160,150,97,189,160,150,50,30,161,150,5,127,161,150,218,223,161,150,176,64,162,150,135,161,162,150,95,2,163,150,57,99,163,150,20,196,163,150,241,36,164,150,207,133,164,150,174,230,164,150,143,71,165,150,113,168,165,150,85,9,166,150,58,106,166,150,32,203,166,150,8,44,167,150,241,140,167,150,219,237,167,150,199,78,168,150,180,175,168,150,163,16,169,150,147,113,169,150,132,210,169,150,119,51,170,150,107,148,170,150,97,245,170,150,87,86,171,150,80,183,171,150,73,24,172,150,68,121,172,150,65,218,172,150,62,59,173,150,61,156,173,150,62,253,173,150,64,94,174,150,67,191,174,150,71,32,175,150,77,129,175,150,85,226,175,150,94,67,176,150,104,164,176,150,115,5,177,150,128,102,177,150,142,199,177,150,158,40,178,150,175,137,178,150,193,234,178,150,213,75,179,150,234,172,179,150,0,14,180,150,24,111,180,150,49,208,180,150,76,49,181,150,104,146,181,150,133,243,181,150,164,84,182,150,196,181,182,150,230,22,183,150,8,120,183,150,45,217,183,150,82,58,184,150,121,155,184,150,161,252,184,150,203,93,185,150,246,190,185,150,35,32,186,150,80,129,186,150,128,226,186,150,176,67,187,150,226,164,187,150,21,6,188,150,74,103,188,150,128,200,188,150,183,41,189,150,240,138,189,150,42,236,189,150,102,77,190,150,163,174,190,150,225,15,191,150,32,113,191,150,97,210,191,150,164,51,192,150,231,148,192,150,44,246,192,150,115,87,193,150,187,184,193,150,4,26,194,150,78,123,194,150,154,220,194,150,232,61,195,150,54,159,195,150,134,0,196,150,216,97,196,150,42,195,196,150,127,36,197,150,212,133,197,150,43,231,197,150,131,72,198,150,221,169,198,150,56,11,199,150,148,108,199,150,242,205,199,150,81,47,200,150,177,144,200,150,19,242,200,150,118,83,201,150,218,180,201,150,64,22,202,150,168,119,202,150,16,217,202,150,122,58,203,150,229,155,203,150,82,253,203,150,192,94,204,150,48,192,204,150,160,33,205,150,19,131,205,150,134,228,205,150,251,69,206,150,113,167,206,150,233,8,207,150,98,106,207,150,220,203,207,150,88,45,208,150,213,142,208,150,83,240,208,150,211,81,209,150,84,179,209,150,215,20,210,150,90,118,210,150,224,215,210,150,102,57,211,150,238,154,211,150,119,252,211,150,2,94,212,150,142,191,212,150,28,33,213,150,170,130,213,150,58,228,213,150,204,69,214,150,95,167,214,150,243,8,215,150,136,106,215,150,31,204,215,150,184,45,216,150,81,143,216,150,236,240,216,150,136,82,217,150,38,180,217,150,197,21,218,150,102,119,218,150,7,217,218,150,170,58,219,150,79,156,219,150,245,253,219,150,156,95,220,150,69,193,220,150,238,34,221,150,154,132,221,150,70,230,221,150,244,71,222,150,164,169,222,150,84,11,223,150,6,109,223,150,186,206,223,150,111,48,224,150,37,146,224,150,220,243,224,150,149,85,225,150,79,183,225,150,11,25,226,150,200,122,226,150,134,220,226,150,70,62,227,150,7,160,227,150,201,1,228,150,141,99,228,150,82,197,228,150,24,39,229,150,224,136,229,150,169,234,229,150,115,76,230,150,63,174,230,150,12,16,231,150,219,113,231,150,171,211,231,150,124,53,232,150,78,151,232,150,34,249,232,150,248,90,233,150,206,188,233,150,166,30,234,150,127,128,234,150,90,226,234,150,54,68,235,150,20,166,235,150,242,7,236,150,210,105,236,150,180,203,236,150,151,45,237,150,123,143,237,150,96,241,237,150,71,83,238,150,47,181,238,150,25,23,239,150,4,121,239,150,240,218,239,150,222,60,240,150,204,158,240,150,189,0,241,150,174,98,241,150,161,196,241,150,150,38,242,150,139,136,242,150,130,234,242,150,123,76,243,150,117,174,243,150,112,16,244,150,108,114,244,150,106,212,244,150,105,54,245,150,105,152,245,150,107,250,245,150,110,92,246,150,115,190,246,150,121,32,247,150,128,130,247,150,137,228,247,150,147,70,248,150,158,168,248,150,170,10,249,150,184,108,249,150,200,206,249,150,216,48,250,150,234,146,250,150,254,244,250,150,18,87,251,150,40,185,251,150,64,27,252,150,88,125,252,150,114,223,252,150,142,65,253,150,171,163,253,150,201,5,254,150,232,103,254,150,9,202,254,150,43,44,255,150,79,142,255,150,115,240,255,150,154,82,0,151,193,180,0,151,234,22,1,151,20,121,1,151,64,219,1,151,108,61,2,151,155,159,2,151,202,1,3,151,251,99,3,151,45,198,3,151,97,40,4,151,150,138,4,151,204,236,4,151,4,79,5,151,61,177,5,151,119,19,6,151,179,117,6,151,240,215,6,151,46,58,7,151,110,156,7,151,175,254,7,151,241,96,8,151,53,195,8,151,122,37,9,151,192,135,9,151,8,234,9,151,81,76,10,151,155,174,10,151,231,16,11,151,52,115,11,151,131,213,11,151,210,55,12,151,35,154,12,151,118,252,12,151,202,94,13,151,31,193,13,151,117,35,14,151,205,133,14,151,38,232,14,151,128,74,15,151,220,172,15,151,57,15,16,151,152,113,16,151,248,211,16,151,89,54,17,151,187,152,17,151,31,251,17,151,132,93,18,151,235,191,18,151,83,34,19,151,188,132,19,151,38,231,19,151,146,73,20,151,255,171,20,151,110,14,21,151,222,112,21,151,79,211,21,151,193,53,22,151,53,152,22,151,170,250,22,151,33,93,23,151,153,191,23,151,18,34,24,151,141,132,24,151,9,231,24,151,134,73,25,151,4,172,25,151,132,14,26,151,5,113,26,151,136,211,26,151,12,54,27,151,145,152,27,151,24,251,27,151,159,93,28,151,41,192,28,151,179,34,29,151,63,133,29,151,204,231,29,151,91,74,30,151,235,172,30,151,124,15,31,151,14,114,31,151,162,212,31,151,55,55,32,151,206,153,32,151,102,252,32,151,255,94,33,151,154,193,33,151,54,36,34,151,211,134,34,151,113,233,34,151,17,76,35,151,178,174,35,151,85,17,36,151,249,115,36,151,158,214,36,151,68,57,37,151,236,155,37,151,149,254,37,151,64,97,38,151,236,195,38,151,153,38,39,151,71,137,39,151,247,235,39,151,168,78,40,151,91,177,40,151,15,20,41,151,196,118,41,151,122,217,41,151,50,60,42,151,235,158,42,151,166,1,43,151,97,100,43,151,30,199,43,151,221,41,44,151,157,140,44,151,94,239,44,151,32,82,45,151,228,180,45,151,169,23,46,151,111,122,46,151,55,221,46,151,0,64,47,151,202,162,47,151,150,5,48,151,99,104,48,151,50,203,48,151,1,46,49,151,210,144,49,151,165,243,49,151,120,86,50,151,77,185,50,151,35,28,51,151,251,126,51,151,212,225,51,151,174,68,52,151,138,167,52,151,103,10,53,151,69,109,53,151,37,208,53,151,6,51,54,151,232,149,54,151,203,248,54,151,176,91,55,151,150,190,55,151,126,33,56,151,103,132,56,151,81,231,56,151,61,74,57,151,41,173,57,151,23,16,58,151,7,115,58,151,248,213,58,151,234,56,59,151,221,155,59,151,210,254,59,151,200,97,60,151,191,196,60,151,184,39,61,151,178,138,61,151,174,237,61,151,170,80,62,151,168,179,62,151,168,22,63,151,168,121,63,151,170,220,63,151,173,63,64,151,178,162,64,151,184,5,65,151,191,104,65,151,200,203,65,151,210,46,66,151,221,145,66,151,233,244,66,151,247,87,67,151,6,187,67,151,23,30,68,151,41,129,68,151,60,228,68,151,80,71,69,151,102,170,69,151,125,13,70,151,149,112,70,151,175,211,70,151,202,54,71,151,231,153,71,151,4,253,71,151,35,96,72,151,68,195,72,151,101,38,73,151,136,137,73,151,172,236,73,151,210,79,74,151,249,178,74,151,33,22,75,151,75,121,75,151,117,220,75,151,161,63,76,151,207,162,76,151,254,5,77,151,46,105,77,151,95,204,77,151,146,47,78,151,198,146,78,151,251,245,78,151,50,89,79,151,106,188,79,151,163,31,80,151,222,130,80,151,26,230,80,151,87,73,81,151,150,172,81,151,214,15,82,151,23,115,82,151,89,214,82,151,157,57,83,151,226,156,83,151,41,0,84,151,113,99,84,151,186,198,84,151,4,42,85,151,80,141,85,151,157,240,85,151,235,83,86,151,59,183,86,151,140,26,87,151,222,125,87,151,49,225,87,151,134,68,88,151,221,167,88,151,52,11,89,151,141,110,89,151,231,209,89,151,66,53,90,151,159,152,90,151,253,251,90,151,93,95,91,151,189,194,91,151,31,38,92,151,131,137,92,151,231,236,92,151,77,80,93,151,181,179,93,151,29,23,94,151,135,122,94,151,242,221,94,151,95,65,95,151,204,164,95,151,59,8,96,151,172,107,96,151,30,207,96,151,145,50,97,151,5,150,97,151,123,249,97,151,242,92,98,151,106,192,98,151,227,35,99,151,94,135,99,151,219,234,99,151,88,78,100,151,215,177,100,151,87,21,101,151,216,120,101,151,91,220,101,151,223,63,102,151,100,163,102,151,235,6,103,151,115,106,103,151,252,205,103,151,135,49,104,151,19,149,104,151,160,248,104,151,46,92,105,151,190,191,105,151,79,35,106,151,226,134,106,151,117,234,106,151,10,78,107,151,161,177,107,151,56,21,108,151,209,120,108,151,108,220,108,151,7,64,109,151,164,163,109,151,66,7,110,151,226,106,110,151,130,206,110,151,36,50,111,151,200,149,111,151,108,249,111,151,18,93,112,151,186,192,112,151,98,36,113,151,12,136,113,151,183,235,113,151,100,79,114,151,18,179,114,151,193,22,115,151,113,122,115,151,35,222,115,151,214,65,116,151,138,165,116,151,64,9,117,151,247,108,117,151,175,208,117,151,104,52,118,151,35,152,118,151,223,251,118,151,157,95,119,151,92,195,119,151,28,39,120,151,221,138,120,151,159,238,120,151,99,82,121,151,41,182,121,151,239,25,122,151,183,125,122,151,128,225,122,151,75,69,123,151,22,169,123,151,227,12,124,151,178,112,124,151,129,212,124,151,82,56,125,151,36,156,125,151,248,255,125,151,205,99,126,151,163,199,126,151,122,43,127,151,83,143,127,151,45,243,127,151,8,87,128,151,229,186,128,151,195,30,129,151,162,130,129,151,131,230,129,151,100,74,130,151,71,174,130,151,44,18,131,151,18,118,131,151,249,217,131,151,225,61,132,151,202,161,132,151,181,5,133,151,162,105,133,151,143,205,133,151,126,49,134,151,110,149,134,151,95,249,134,151,82,93,135,151,70,193,135,151,59,37,136,151,50,137,136,151,42,237,136,151,35,81,137,151,29,181,137,151,25,25,138,151,22,125,138,151,20,225,138,151,20,69,139,151,21,169,139,151,23,13,140,151,26,113,140,151,31,213,140,151,37,57,141,151,45,157,141,151,53,1,142,151,63,101,142,151,75,201,142,151,87,45,143,151,101,145,143,151,116,245,143,151,133,89,144,151,150,189,144,151,169,33,145,151,190,133,145,151,211,233,145,151,234,77,146,151,2,178,146,151,28,22,147,151,55,122,147,151,83,222,147,151,112,66,148,151,143,166,148,151,175,10,149,151,208,110,149,151,242,210,149,151,22,55,150,151,59,155,150,151,98,255,150,151,137,99,151,151,178,199,151,151,221,43,152,151,8,144,152,151,53,244,152,151,99,88,153,151,146,188,153,151,195,32,154,151,245,132,154,151,41,233,154,151,93,77,155,151,147,177,155,151,202,21,156,151,3,122,156,151,60,222,156,151,119,66,157,151,180,166,157,151,241,10,158,151,48,111,158,151,112,211,158,151,178,55,159,151,245,155,159,151,57,0,160,151,126,100,160,151,197,200,160,151,12,45,161,151,86,145,161,151,160,245,161,151,236,89,162,151,57,190,162,151,135,34,163,151,215,134,163,151,40,235,163,151,122,79,164,151,206,179,164,151,34,24,165,151,120,124,165,151,208,224,165,151,40,69,166,151,130,169,166,151,221,13,167,151,58,114,167,151,152,214,167,151,247,58,168,151,87,159,168,151,185,3,169,151,28,104,169,151,128,204,169,151,229,48,170,151,76,149,170,151,180,249,170,151,30,94,171,151,136,194,171,151,244,38,172,151,97,139,172,151,208,239,172,151,63,84,173,151,176,184,173,151,35,29,174,151,150,129,174,151,11,230,174,151,129,74,175,151,249,174,175,151,114,19,176,151,236,119,176,151,103,220,176,151,228,64,177,151,97,165,177,151,225,9,178,151,97,110,178,151,227,210,178,151,102,55,179,151,234,155,179,151,111,0,180,151,246,100,180,151,126,201,180,151,8,46,181,151,146,146,181,151,30,247,181,151,172,91,182,151,58,192,182,151,202,36,183,151,91,137,183,151,237,237,183,151,129,82,184,151,22,183,184,151,172,27,185,151,68,128,185,151,220,228,185,151,118,73,186,151,18,174,186,151,174,18,187,151,76,119,187,151,235,219,187,151,140,64,188,151,45,165,188,151,208,9,189,151,117,110,189,151,26,211,189,151,193,55,190,151,105,156,190,151,19,1,191,151,189,101,191,151,105,202,191,151,22,47,192,151,197,147,192,151,117,248,192,151,38,93,193,151,216,193,193,151,139,38,194,151,64,139,194,151,246,239,194,151,174,84,195,151,103,185,195,151,33,30,196,151,220,130,196,151,152,231,196,151,86,76,197,151,21,177,197,151,214,21,198,151,151,122,198,151,90,223,198,151,30,68,199,151,228,168,199,151,170,13,200,151,114,114,200,151,60,215,200,151,6,60,201,151,210,160,201,151,159,5,202,151,109,106,202,151,61,207,202,151,14,52,203,151,224,152,203,151,180,253,203,151,136,98,204,151,94,199,204,151,54,44,205,151,14,145,205,151,232,245,205,151,195,90,206,151,160,191,206,151,125,36,207,151,92,137,207,151,60,238,207,151,30,83,208,151,1,184,208,151,229,28,209,151,202,129,209,151,176,230,209,151,152,75,210,151,129,176,210,151,108,21,211,151,87,122,211,151,68,223,211,151,50,68,212,151,34,169,212,151,19,14,213,151,5,115,213,151,248,215,213,151,236,60,214,151,226,161,214,151,217,6,215,151,210,107,215,151,203,208,215,151,198,53,216,151,194,154,216,151,192,255,216,151,190,100,217,151,190,201,217,151,191,46,218,151,194,147,218,151,198,248,218,151,203,93,219,151,209,194,219,151,217,39,220,151,225,140,220,151,236,241,220,151,247,86,221,151,4,188,221,151,17,33,222,151,33,134,222,151,49,235,222,151,67,80,223,151,86,181,223,151,106,26,224,151,128,127,224,151,150,228,224,151,174,73,225,151,200,174,225,151,226,19,226,151,254,120,226,151,27,222,226,151,58,67,227,151,89,168,227,151,122,13,228,151,156,114,228,151,192,215,228,151,228,60,229,151,10,162,229,151,50,7,230,151,90,108,230,151,132,209,230,151,175,54,231,151,219,155,231,151,9,1,232,151,56,102,232,151,104,203,232,151,153,48,233,151,204,149,233,151,0,251,233,151,53,96,234,151,107,197,234,151,163,42,235,151,220,143,235,151,22,245,235,151,81,90,236,151,142,191,236,151,204,36,237,151,11,138,237,151,76,239,237,151,142,84,238,151,209,185,238,151,21,31,239,151,91,132,239,151,161,233,239,151,233,78,240,151,51,180,240,151,125,25,241,151,201,126,241,151,22,228,241,151,101,73,242,151,181,174,242,151,5,20,243,151,88,121,243,151,171,222,243,151,0,68,244,151,86,169,244,151,173,14,245,151,5,116,245,151,95,217,245,151,186,62,246,151,22,164,246,151,116,9,247,151,211,110,247,151,51,212,247,151,148,57,248,151,247,158,248,151,90,4,249,151,192,105,249,151,38,207,249,151,142,52,250,151,246,153,250,151,96,255,250,151,204,100,251,151,56,202,251,151,166,47,252,151,22,149,252,151,134,250,252,151,248,95,253,151,107,197,253,151,223,42,254,151,84,144,254,151,203,245,254,151,67,91,255,151,188,192,255,151,27,19,0,156,217,69,0,156,151,120,0,156,87,171,0,156,22,222,0,156,215,16,1,156], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([152,67,1,156,89,118,1,156,28,169,1,156,223,219,1,156,162,14,2,156,102,65,2,156,43,116,2,156,240,166,2,156,182,217,2,156,125,12,3,156,68,63,3,156,12,114,3,156,213,164,3,156,158,215,3,156,104,10,4,156,50,61,4,156,253,111,4,156,201,162,4,156,149,213,4,156,98,8,5,156,48,59,5,156,254,109,5,156,205,160,5,156,156,211,5,156,108,6,6,156,61,57,6,156,14,108,6,156,224,158,6,156,179,209,6,156,134,4,7,156,90,55,7,156,46,106,7,156,3,157,7,156,217,207,7,156,175,2,8,156,134,53,8,156,94,104,8,156,54,155,8,156,15,206,8,156,232,0,9,156,194,51,9,156,157,102,9,156,120,153,9,156,84,204,9,156,49,255,9,156,14,50,10,156,236,100,10,156,203,151,10,156,170,202,10,156,137,253,10,156,106,48,11,156,75,99,11,156,44,150,11,156,14,201,11,156,241,251,11,156,213,46,12,156,185,97,12,156,158,148,12,156,131,199,12,156,105,250,12,156,79,45,13,156,55,96,13,156,30,147,13,156,7,198,13,156,240,248,13,156,218,43,14,156,196,94,14,156,175,145,14,156,155,196,14,156,135,247,14,156,116,42,15,156,97,93,15,156,79,144,15,156,62,195,15,156,45,246,15,156,29,41,16,156,14,92,16,156,255,142,16,156,241,193,16,156,227,244,16,156,214,39,17,156,202,90,17,156,190,141,17,156,179,192,17,156,169,243,17,156,159,38,18,156,150,89,18,156,141,140,18,156,133,191,18,156,126,242,18,156,119,37,19,156,113,88,19,156,108,139,19,156,103,190,19,156,99,241,19,156,95,36,20,156,92,87,20,156,90,138,20,156,88,189,20,156,87,240,20,156,86,35,21,156,87,86,21,156,87,137,21,156,89,188,21,156,91,239,21,156,93,34,22,156,97,85,22,156,100,136,22,156,105,187,22,156,110,238,22,156,116,33,23,156,122,84,23,156,129,135,23,156,137,186,23,156,145,237,23,156,154,32,24,156,163,83,24,156,173,134,24,156,184,185,24,156,195,236,24,156,207,31,25,156,220,82,25,156,233,133,25,156,247,184,25,156,5,236,25,156,21,31,26,156,36,82,26,156,52,133,26,156,69,184,26,156,87,235,26,156,105,30,27,156,124,81,27,156,143,132,27,156,163,183,27,156,184,234,27,156,205,29,28,156,227,80,28,156,250,131,28,156,17,183,28,156,40,234,28,156,65,29,29,156,90,80,29,156,115,131,29,156,142,182,29,156,168,233,29,156,196,28,30,156,224,79,30,156,253,130,30,156,26,182,30,156,56,233,30,156,87,28,31,156,118,79,31,156,150,130,31,156,182,181,31,156,215,232,31,156,249,27,32,156,27,79,32,156,62,130,32,156,97,181,32,156,133,232,32,156,170,27,33,156,208,78,33,156,246,129,33,156,28,181,33,156,67,232,33,156,107,27,34,156,148,78,34,156,189,129,34,156,230,180,34,156,17,232,34,156,60,27,35,156,103,78,35,156,147,129,35,156,192,180,35,156,238,231,35,156,28,27,36,156,74,78,36,156,121,129,36,156,169,180,36,156,218,231,36,156,11,27,37,156,61,78,37,156,111,129,37,156,162,180,37,156,214,231,37,156,10,27,38,156,63,78,38,156,116,129,38,156,170,180,38,156,225,231,38,156,24,27,39,156,80,78,39,156,136,129,39,156,194,180,39,156,251,231,39,156,54,27,40,156,113,78,40,156,172,129,40,156,232,180,40,156,37,232,40,156,99,27,41,156,161,78,41,156,223,129,41,156,31,181,41,156,95,232,41,156,159,27,42,156,224,78,42,156,34,130,42,156,100,181,42,156,167,232,42,156,235,27,43,156,47,79,43,156,116,130,43,156,186,181,43,156,0,233,43,156,70,28,44,156,142,79,44,156,214,130,44,156,30,182,44,156,103,233,44,156,177,28,45,156,251,79,45,156,70,131,45,156,146,182,45,156,222,233,45,156,43,29,46,156,120,80,46,156,198,131,46,156,21,183,46,156,100,234,46,156,180,29,47,156,5,81,47,156,86,132,47,156,168,183,47,156,250,234,47,156,77,30,48,156,161,81,48,156,245,132,48,156,74,184,48,156,159,235,48,156,245,30,49,156,76,82,49,156,163,133,49,156,251,184,49,156,84,236,49,156,173,31,50,156,6,83,50,156,97,134,50,156,188,185,50,156,23,237,50,156,116,32,51,156,208,83,51,156,46,135,51,156,140,186,51,156,234,237,51,156,74,33,52,156,170,84,52,156,10,136,52,156,107,187,52,156,205,238,52,156,47,34,53,156,146,85,53,156,246,136,53,156,90,188,53,156,191,239,53,156,36,35,54,156,138,86,54,156,241,137,54,156,88,189,54,156,192,240,54,156,40,36,55,156,145,87,55,156,251,138,55,156,101,190,55,156,208,241,55,156,60,37,56,156,168,88,56,156,20,140,56,156,130,191,56,156,240,242,56,156,94,38,57,156,205,89,57,156,61,141,57,156,174,192,57,156,31,244,57,156,144,39,58,156,2,91,58,156,117,142,58,156,233,193,58,156,93,245,58,156,210,40,59,156,71,92,59,156,189,143,59,156,51,195,59,156,170,246,59,156,34,42,60,156,154,93,60,156,19,145,60,156,141,196,60,156,7,248,60,156,130,43,61,156,253,94,61,156,121,146,61,156,246,197,61,156,115,249,61,156,241,44,62,156,112,96,62,156,239,147,62,156,110,199,62,156,239,250,62,156,111,46,63,156,241,97,63,156,115,149,63,156,246,200,63,156,121,252,63,156,253,47,64,156,130,99,64,156,7,151,64,156,141,202,64,156,19,254,64,156,154,49,65,156,34,101,65,156,170,152,65,156,51,204,65,156,188,255,65,156,70,51,66,156,209,102,66,156,92,154,66,156,232,205,66,156,116,1,67,156,1,53,67,156,143,104,67,156,29,156,67,156,172,207,67,156,60,3,68,156,204,54,68,156,93,106,68,156,238,157,68,156,128,209,68,156,19,5,69,156,166,56,69,156,57,108,69,156,206,159,69,156,99,211,69,156,248,6,70,156,143,58,70,156,37,110,70,156,189,161,70,156,85,213,70,156,238,8,71,156,135,60,71,156,33,112,71,156,187,163,71,156,86,215,71,156,242,10,72,156,142,62,72,156,43,114,72,156,201,165,72,156,103,217,72,156,5,13,73,156,165,64,73,156,69,116,73,156,229,167,73,156,134,219,73,156,40,15,74,156,202,66,74,156,109,118,74,156,17,170,74,156,181,221,74,156,90,17,75,156,255,68,75,156,165,120,75,156,76,172,75,156,243,223,75,156,155,19,76,156,67,71,76,156,236,122,76,156,150,174,76,156,64,226,76,156,235,21,77,156,151,73,77,156,67,125,77,156,239,176,77,156,157,228,77,156,75,24,78,156,249,75,78,156,168,127,78,156,88,179,78,156,8,231,78,156,185,26,79,156,107,78,79,156,29,130,79,156,207,181,79,156,131,233,79,156,55,29,80,156,235,80,80,156,160,132,80,156,86,184,80,156,13,236,80,156,196,31,81,156,123,83,81,156,51,135,81,156,236,186,81,156,165,238,81,156,95,34,82,156,26,86,82,156,213,137,82,156,145,189,82,156,77,241,82,156,10,37,83,156,200,88,83,156,134,140,83,156,69,192,83,156,5,244,83,156,197,39,84,156,133,91,84,156,70,143,84,156,8,195,84,156,203,246,84,156,142,42,85,156,81,94,85,156,22,146,85,156,219,197,85,156,160,249,85,156,102,45,86,156,45,97,86,156,244,148,86,156,188,200,86,156,132,252,86,156,78,48,87,156,23,100,87,156,226,151,87,156,172,203,87,156,120,255,87,156,68,51,88,156,17,103,88,156,222,154,88,156,172,206,88,156,123,2,89,156,74,54,89,156,25,106,89,156,234,157,89,156,187,209,89,156,140,5,90,156,94,57,90,156,49,109,90,156,4,161,90,156,216,212,90,156,173,8,91,156,130,60,91,156,88,112,91,156,46,164,91,156,5,216,91,156,221,11,92,156,181,63,92,156,142,115,92,156,103,167,92,156,65,219,92,156,27,15,93,156,247,66,93,156,210,118,93,156,175,170,93,156,140,222,93,156,105,18,94,156,71,70,94,156,38,122,94,156,6,174,94,156,230,225,94,156,198,21,95,156,167,73,95,156,137,125,95,156,108,177,95,156,79,229,95,156,50,25,96,156,22,77,96,156,251,128,96,156,225,180,96,156,199,232,96,156,173,28,97,156,148,80,97,156,124,132,97,156,100,184,97,156,77,236,97,156,55,32,98,156,33,84,98,156,12,136,98,156,247,187,98,156,227,239,98,156,208,35,99,156,189,87,99,156,171,139,99,156,153,191,99,156,136,243,99,156,120,39,100,156,104,91,100,156,89,143,100,156,74,195,100,156,60,247,100,156,47,43,101,156,34,95,101,156,22,147,101,156,10,199,101,156,255,250,101,156,245,46,102,156,235,98,102,156,226,150,102,156,217,202,102,156,209,254,102,156,202,50,103,156,195,102,103,156,189,154,103,156,183,206,103,156,178,2,104,156,174,54,104,156,170,106,104,156,167,158,104,156,164,210,104,156,162,6,105,156,161,58,105,156,160,110,105,156,160,162,105,156,160,214,105,156,161,10,106,156,163,62,106,156,165,114,106,156,168,166,106,156,171,218,106,156,175,14,107,156,179,66,107,156,185,118,107,156,190,170,107,156,197,222,107,156,204,18,108,156,211,70,108,156,219,122,108,156,228,174,108,156,238,226,108,156,247,22,109,156,2,75,109,156,13,127,109,156,25,179,109,156,37,231,109,156,50,27,110,156,64,79,110,156,78,131,110,156,92,183,110,156,108,235,110,156,124,31,111,156,140,83,111,156,157,135,111,156,175,187,111,156,193,239,111,156,212,35,112,156,232,87,112,156,252,139,112,156,17,192,112,156,38,244,112,156,60,40,113,156,82,92,113,156,105,144,113,156,129,196,113,156,153,248,113,156,178,44,114,156,204,96,114,156,230,148,114,156,0,201,114,156,27,253,114,156,55,49,115,156,84,101,115,156,113,153,115,156,142,205,115,156,173,1,116,156,203,53,116,156,235,105,116,156,11,158,116,156,44,210,116,156,77,6,117,156,111,58,117,156,145,110,117,156,180,162,117,156,215,214,117,156,252,10,118,156,32,63,118,156,70,115,118,156,108,167,118,156,146,219,118,156,186,15,119,156,225,67,119,156,10,120,119,156,51,172,119,156,92,224,119,156,134,20,120,156,177,72,120,156,220,124,120,156,8,177,120,156,53,229,120,156,98,25,121,156,143,77,121,156,190,129,121,156,237,181,121,156,28,234,121,156,76,30,122,156,125,82,122,156,174,134,122,156,224,186,122,156,18,239,122,156,70,35,123,156,121,87,123,156,173,139,123,156,226,191,123,156,24,244,123,156,78,40,124,156,132,92,124,156,187,144,124,156,243,196,124,156,44,249,124,156,101,45,125,156,158,97,125,156,216,149,125,156,19,202,125,156,78,254,125,156,138,50,126,156,199,102,126,156,4,155,126,156,66,207,126,156,128,3,127,156,191,55,127,156,255,107,127,156,63,160,127,156,127,212,127,156,193,8,128,156,2,61,128,156,69,113,128,156,136,165,128,156,204,217,128,156,16,14,129,156,85,66,129,156,154,118,129,156,224,170,129,156,39,223,129,156,110,19,130,156,182,71,130,156,254,123,130,156,71,176,130,156,145,228,130,156,219,24,131,156,38,77,131,156,113,129,131,156,189,181,131,156,10,234,131,156,87,30,132,156,164,82,132,156,243,134,132,156,66,187,132,156,145,239,132,156,225,35,133,156,50,88,133,156,131,140,133,156,213,192,133,156,39,245,133,156,122,41,134,156,206,93,134,156,34,146,134,156,119,198,134,156,204,250,134,156,34,47,135,156,121,99,135,156,208,151,135,156,40,204,135,156,128,0,136,156,217,52,136,156,51,105,136,156,141,157,136,156,232,209,136,156,67,6,137,156,159,58,137,156,251,110,137,156,88,163,137,156,182,215,137,156,20,12,138,156,115,64,138,156,211,116,138,156,51,169,138,156,147,221,138,156,245,17,139,156,86,70,139,156,185,122,139,156,28,175,139,156,127,227,139,156,227,23,140,156,72,76,140,156,173,128,140,156,19,181,140,156,122,233,140,156,225,29,141,156,73,82,141,156,177,134,141,156,26,187,141,156,131,239,141,156,237,35,142,156,88,88,142,156,195,140,142,156,47,193,142,156,155,245,142,156,8,42,143,156,118,94,143,156,228,146,143,156,83,199,143,156,194,251,143,156,50,48,144,156,163,100,144,156,20,153,144,156,134,205,144,156,248,1,145,156,107,54,145,156,222,106,145,156,82,159,145,156,199,211,145,156,60,8,146,156,178,60,146,156,40,113,146,156,159,165,146,156,23,218,146,156,143,14,147,156,8,67,147,156,129,119,147,156,251,171,147,156,118,224,147,156,241,20,148,156,108,73,148,156,233,125,148,156,102,178,148,156,227,230,148,156,97,27,149,156,224,79,149,156,95,132,149,156,223,184,149,156,95,237,149,156,224,33,150,156,98,86,150,156,228,138,150,156,103,191,150,156,234,243,150,156,110,40,151,156,242,92,151,156,119,145,151,156,253,197,151,156,131,250,151,156,10,47,152,156,146,99,152,156,26,152,152,156,162,204,152,156,44,1,153,156,181,53,153,156,64,106,153,156,203,158,153,156,86,211,153,156,226,7,154,156,111,60,154,156,252,112,154,156,138,165,154,156,25,218,154,156,168,14,155,156,55,67,155,156,200,119,155,156,88,172,155,156,234,224,155,156,124,21,156,156,14,74,156,156,161,126,156,156,53,179,156,156,202,231,156,156,94,28,157,156,244,80,157,156,138,133,157,156,33,186,157,156,184,238,157,156,80,35,158,156,232,87,158,156,129,140,158,156,27,193,158,156,181,245,158,156,80,42,159,156,235,94,159,156,135,147,159,156,36,200,159,156,193,252,159,156,94,49,160,156,253,101,160,156,155,154,160,156,59,207,160,156,219,3,161,156,123,56,161,156,29,109,161,156,190,161,161,156,97,214,161,156,4,11,162,156,167,63,162,156,75,116,162,156,240,168,162,156,149,221,162,156,59,18,163,156,226,70,163,156,137,123,163,156,48,176,163,156,216,228,163,156,129,25,164,156,43,78,164,156,213,130,164,156,127,183,164,156,42,236,164,156,214,32,165,156,130,85,165,156,47,138,165,156,221,190,165,156,139,243,165,156,57,40,166,156,232,92,166,156,152,145,166,156,72,198,166,156,249,250,166,156,171,47,167,156,93,100,167,156,16,153,167,156,195,205,167,156,119,2,168,156,43,55,168,156,224,107,168,156,150,160,168,156,76,213,168,156,3,10,169,156,186,62,169,156,114,115,169,156,43,168,169,156,228,220,169,156,157,17,170,156,88,70,170,156,19,123,170,156,206,175,170,156,138,228,170,156,71,25,171,156,4,78,171,156,194,130,171,156,128,183,171,156,63,236,171,156,254,32,172,156,190,85,172,156,127,138,172,156,64,191,172,156,2,244,172,156,197,40,173,156,136,93,173,156,75,146,173,156,15,199,173,156,212,251,173,156,153,48,174,156,95,101,174,156,38,154,174,156,237,206,174,156,180,3,175,156,125,56,175,156,69,109,175,156,15,162,175,156,217,214,175,156,163,11,176,156,110,64,176,156,58,117,176,156,6,170,176,156,211,222,176,156,161,19,177,156,111,72,177,156,61,125,177,156,12,178,177,156,220,230,177,156,173,27,178,156,125,80,178,156,79,133,178,156,33,186,178,156,244,238,178,156,199,35,179,156,155,88,179,156,111,141,179,156,68,194,179,156,26,247,179,156,240,43,180,156,199,96,180,156,158,149,180,156,118,202,180,156,78,255,180,156,39,52,181,156,1,105,181,156,219,157,181,156,182,210,181,156,145,7,182,156,109,60,182,156,74,113,182,156,39,166,182,156,5,219,182,156,227,15,183,156,194,68,183,156,161,121,183,156,129,174,183,156,98,227,183,156,67,24,184,156,36,77,184,156,7,130,184,156,234,182,184,156,205,235,184,156,177,32,185,156,150,85,185,156,123,138,185,156,97,191,185,156,71,244,185,156,46,41,186,156,22,94,186,156,254,146,186,156,230,199,186,156,208,252,186,156,185,49,187,156,164,102,187,156,143,155,187,156,122,208,187,156,102,5,188,156,83,58,188,156,64,111,188,156,46,164,188,156,29,217,188,156,12,14,189,156,251,66,189,156,236,119,189,156,220,172,189,156,206,225,189,156,192,22,190,156,178,75,190,156,165,128,190,156,153,181,190,156,141,234,190,156,130,31,191,156,119,84,191,156,109,137,191,156,100,190,191,156,91,243,191,156,82,40,192,156,75,93,192,156,67,146,192,156,61,199,192,156,55,252,192,156,49,49,193,156,45,102,193,156,40,155,193,156,37,208,193,156,33,5,194,156,31,58,194,156,29,111,194,156,27,164,194,156,27,217,194,156,26,14,195,156,27,67,195,156,28,120,195,156,29,173,195,156,31,226,195,156,34,23,196,156,37,76,196,156,41,129,196,156,45,182,196,156,50,235,196,156,56,32,197,156,62,85,197,156,68,138,197,156,76,191,197,156,83,244,197,156,92,41,198,156,101,94,198,156,110,147,198,156,120,200,198,156,131,253,198,156,142,50,199,156,154,103,199,156,167,156,199,156,180,209,199,156,193,6,200,156,207,59,200,156,222,112,200,156,237,165,200,156,253,218,200,156,13,16,201,156,30,69,201,156,48,122,201,156,66,175,201,156,85,228,201,156,104,25,202,156,124,78,202,156,145,131,202,156,166,184,202,156,187,237,202,156,209,34,203,156,232,87,203,156,0,141,203,156,23,194,203,156,48,247,203,156,73,44,204,156,99,97,204,156,125,150,204,156,152,203,204,156,179,0,205,156,207,53,205,156,235,106,205,156,8,160,205,156,38,213,205,156,68,10,206,156,99,63,206,156,130,116,206,156,162,169,206,156,195,222,206,156,228,19,207,156,6,73,207,156,40,126,207,156,75,179,207,156,110,232,207,156,146,29,208,156,182,82,208,156,219,135,208,156,1,189,208,156,39,242,208,156,78,39,209,156,118,92,209,156,158,145,209,156,198,198,209,156,239,251,209,156,25,49,210,156,67,102,210,156,110,155,210,156,153,208,210,156,197,5,211,156,242,58,211,156,31,112,211,156,77,165,211,156,123,218,211,156,170,15,212,156,217,68,212,156,9,122,212,156,58,175,212,156,107,228,212,156,156,25,213,156,207,78,213,156,1,132,213,156,53,185,213,156,105,238,213,156,157,35,214,156,210,88,214,156,8,142,214,156,62,195,214,156,117,248,214,156,173,45,215,156,229,98,215,156,29,152,215,156,86,205,215,156,144,2,216,156,202,55,216,156,5,109,216,156,64,162,216,156,124,215,216,156,185,12,217,156,246,65,217,156,52,119,217,156,114,172,217,156,177,225,217,156,240,22,218,156,48,76,218,156,113,129,218,156,178,182,218,156,244,235,218,156,54,33,219,156,121,86,219,156,188,139,219,156,0,193,219,156,68,246,219,156,138,43,220,156,207,96,220,156,22,150,220,156,92,203,220,156,164,0,221,156,236,53,221,156,52,107,221,156,125,160,221,156,199,213,221,156,17,11,222,156,92,64,222,156,167,117,222,156,243,170,222,156,64,224,222,156,141,21,223,156,219,74,223,156,41,128,223,156,120,181,223,156,199,234,223,156,23,32,224,156,103,85,224,156,184,138,224,156,10,192,224,156,92,245,224,156,175,42,225,156,2,96,225,156,86,149,225,156,171,202,225,156,0,0,226,156,85,53,226,156,172,106,226,156,2,160,226,156,90,213,226,156,178,10,227,156,10,64,227,156,99,117,227,156,189,170,227,156,23,224,227,156,114,21,228,156,205,74,228,156,41,128,228,156,133,181,228,156,226,234,228,156,64,32,229,156,158,85,229,156,253,138,229,156,92,192,229,156,188,245,229,156,28,43,230,156,125,96,230,156,223,149,230,156,65,203,230,156,163,0,231,156,7,54,231,156,107,107,231,156,207,160,231,156,52,214,231,156,153,11,232,156,0,65,232,156,102,118,232,156,205,171,232,156,53,225,232,156,158,22,233,156,7,76,233,156,112,129,233,156,218,182,233,156,69,236,233,156,176,33,234,156,28,87,234,156,136,140,234,156,245,193,234,156,98,247,234,156,208,44,235,156,63,98,235,156,174,151,235,156,30,205,235,156,142,2,236,156,255,55,236,156,113,109,236,156,227,162,236,156,85,216,236,156,200,13,237,156,60,67,237,156,176,120,237,156,37,174,237,156,154,227,237,156,16,25,238,156,135,78,238,156,254,131,238,156,118,185,238,156,238,238,238,156,103,36,239,156,224,89,239,156,90,143,239,156,213,196,239,156,80,250,239,156,203,47,240,156,71,101,240,156,196,154,240,156,65,208,240,156,191,5,241,156,62,59,241,156,189,112,241,156,60,166,241,156,189,219,241,156,61,17,242,156,191,70,242,156,64,124,242,156,195,177,242,156,70,231,242,156,201,28,243,156,77,82,243,156,210,135,243,156,87,189,243,156,221,242,243,156,100,40,244,156,234,93,244,156,114,147,244,156,250,200,244,156,131,254,244,156,12,52,245,156,150,105,245,156,32,159,245,156,171,212,245,156,54,10,246,156,194,63,246,156,79,117,246,156,220,170,246,156,106,224,246,156,248,21,247,156,135,75,247,156,22,129,247,156,166,182,247,156,55,236,247,156,200,33,248,156,89,87,248,156,236,140,248,156,126,194,248,156,18,248,248,156,166,45,249,156,58,99,249,156,207,152,249,156,101,206,249,156,251,3,250,156,146,57,250,156,41,111,250,156,193,164,250,156,89,218,250,156,242,15,251,156,140,69,251,156,38,123,251,156,193,176,251,156,92,230,251,156,248,27,252,156,148,81,252,156,49,135,252,156,206,188,252,156,108,242,252,156,11,40,253,156,170,93,253,156,74,147,253,156,234,200,253,156,139,254,253,156,44,52,254,156,206,105,254,156,113,159,254,156,20,213,254,156,184,10,255,156,92,64,255,156,1,118,255,156,166,171,255,156,76,225,255,156,243,22,0,157,154,76,0,157,65,130,0,157,233,183,0,157,146,237,0,157,59,35,1,157,229,88,1,157,144,142,1,157,59,196,1,157,230,249,1,157,146,47,2,157,63,101,2,157,236,154,2,157,154,208,2,157,72,6,3,157,247,59,3,157,167,113,3,157,87,167,3,157,7,221,3,157,185,18,4,157,106,72,4,157,29,126,4,157,207,179,4,157,131,233,4,157,55,31,5,157,235,84,5,157,160,138,5,157,86,192,5,157,12,246,5,157,195,43,6,157,122,97,6,157,50,151,6,157,235,204,6,157,164,2,7,157,93,56,7,157,23,110,7,157,210,163,7,157,141,217,7,157,73,15,8,157,6,69,8,157,194,122,8,157,128,176,8,157,62,230,8,157,253,27,9,157,188,81,9,157,124,135,9,157,60,189,9,157,253,242,9,157,190,40,10,157,128,94,10,157,67,148,10,157,6,202,10,157,201,255,10,157,142,53,11,157,82,107,11,157,24,161,11,157,222,214,11,157,164,12,12,157,107,66,12,157,51,120,12,157,251,173,12,157,196,227,12,157,141,25,13,157,5,127,131,9,51,79,80,11,205,79,116,13,0,0,0,16,10,254,6,19,102,158,160,22,153,159,232,26,205,79,116,13,51,79,80,11,5,127,131,9,0,0,0,8,230,39,186,6,154,39,168,5,131,191,193,4,0,0,0,4,243,19,93,3,205,19,212,2,193,223,96,2,0,0,0,2,250,137,174,1,230,9,106,1,225,111,48,1,51,79,80,11,0,0,0,8,154,39,168,5,0,0,0,4,205,19,212,2,0,0,0,2,230,9,106,1,0,0,0,1,243,4,181,0,0,0,128,0,122,130,90,0,0,0,64,0,61,65,45,0,0,0,32,0,158,160,22,0,0,0,0,0,47,150,97,3,116,61,219,5,0,0,0,8,140,194,36,10,209,105,158,12,0,0,0,16,129,74,184,13,127,157,27,14,207,173,49,15,21,168,187,15,23,164,237,15,200,143,252,15,76,150,255,15,211,248,255,15,25,160,196,247,46,201,115,248,236,103,252,250,47,226,22,253,198,159,124,254,121,52,88,255,185,215,197,255,76,216,240,255,250,51,248,31,147,234,185,31,32,209,61,31,105,217,132,30,207,107,144,29,139,100,98,28,15,16,253,26,139,38,99,25,164,198,151,23,91,111,158,21,64,249,122,19,243,142,49,17,7,165,198,14,83,241,62,12,197,97,159,9,197,18,237,6,68,69,45,4,124,84,101,1,62,170,178,0,162,162,22,2,98,137,118,3,226,176,207,4,170,120,31,6,132,82,99,7,121,199,152,8,160,124,189,9,173,55,207,10,82,227,203,11,70,147,177,12,7,136,126,13,69,50,49,14,232,53,200,14,181,108,66,15,144,232,158,15,73,245,220,15,253,25,252,15,253,25,252,15,73,245,220,15,144,232,158,15,181,108,66,15,232,53,200,14,69,50,49,14,7,136,126,13,70,147,177,12,82,227,203,11,173,55,207,10,160,124,189,9,121,199,152,8,132,82,99,7,170,120,31,6,226,176,207,4,98,137,118,3,162,162,22,2,62,170,178,0,160,124,189,9,24,202,55,241,94,93,233,253,73,245,220,15,86,135,224,249,186,108,78,243,186,108,78,243,170,120,31,6,73,245,220,15,162,162,22,2,24,202,55,241,96,131,66,246,170,120,31,6,24,202,55,241,232,53,200,14,86,135,224,249,86,135,224,249,232,53,200,14,24,202,55,241,86,135,224,249,170,120,31,6,232,53,200,14,232,53,200,14,170,120,31,6,162,162,22,2,86,135,224,249,160,124,189,9,186,108,78,243,232,53,200,14,183,10,35,240,183,10,35,240,24,202,55,241,186,108,78,243,96,131,66,246,86,135,224,249,94,93,233,253,162,162,22,2,170,120,31,6,160,124,189,9,70,147,177,12,232,53,200,14,73,245,220,15,73,245,220,15,232,53,200,14,70,147,177,12,160,124,189,9,170,120,31,6,162,162,22,2,0,0,0,0,0,125,0,0,0,250,0,0,0,119,1,0,0,244,1,0,0,113,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,101,4,0,0,226,4,0,0,95,5,0,0,220,5,0,0,89,6,0,0,214,6,0,0,0,0,0,0,125,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,0,113,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,226,4,0,0,220,5,0,0,0,0,0,0,125,0,0,64,156,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,0,113,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,226,4,0,0,0,0,0,0,125,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,128,50,2,0,0,113,2,0,128,175,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,0,0,0,64,31,0,0,128,62,0,0,192,93,0,0,0,125,0,0,64,156,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,128,50,2,0,0,113,2,0,68,172,0,0,128,187,0,0,0,125,0,0,16,0,0,0,216,1,0,0,16,0,0,0,48,0,0,0,48,0,0,0,16,0,0,0,48,0,0,0,216,1,0,0,16,0,0,0,48,0,0,0,16,0,0,0,48,0,0,0,56,0,0,0,56,0,0,0,56,0,0,0,216,1,0,0,56,0,0,0,48,0,0,0,48,0,0,0,216,1,0,0,56,0,0,0,216,1,0,0,48,0,0,0,24,2,0,0,40,2,0,0,96,0,0,0,16,0,0,0,216,1,0,0,96,0,0,0,48,0,0,0,232,1,0,0,24,2,0,0,96,0,0,0,48,0,0,0,24,2,0,0,24,2,0,0,216,1,0,0,96,0,0,0,56,0,0,0,216,1,0,0,96,0,0,0,216,1,0,0,56,0,0,0,0,0,0,0,136,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,128,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,216,1,0,0,32,2,0,0,32,2,0,0,24,2,0,0,56,145,0,0,5,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,11,0,0,0,209,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,48,1,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,0,0,0,0,88,1,0,0,13,0,0,0,21,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,104,1,0,0,25,0,0,0,26,0,0,0,27,0,0,0,0,0,0,0,120,1,0,0,28,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,136,1,0,0,28,0,0,0,31,0,0,0,30,0,0,0,0,0,0,0,152,1,0,0,28,0,0,0,32,0,0,0,30,0,0,0,0,0,0,0,200,1,0,0,13,0,0,0,33,0,0,0,15,0,0,0,16,0,0,0,34,0,0,0,0,0,0,0,184,1,0,0,13,0,0,0,35,0,0,0,15,0,0,0,16,0,0,0,36,0,0,0,0,0,0,0,72,2,0,0,13,0,0,0,37,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,4,1,68,1,130,1,162,1,73,0,137,0,41,0,25,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,213,0,245,0,181,0,117,0,229,0,165,0,147,0,147,0,99,0,195,0,83,0,51,0,249,0,121,0,185,0,57,0,217,0,89,0,153,0,25,0,233,0,105,0,169,0,41,0,201,0,73,0,137,0,9,0,1,0,23,1,7,1,21,0,21,0,3,0,3,0,3,0,3,0,134,0,23,1,7,1,23,0,3,0,3,0,3,0,3,0,39,2,7,2,21,2,21,2,37,1,37,1,37,0,37,0,134,0,23,0,21,1,21,1,5,1,5,1,5,0,5,0,39,2,7,2,21,2,21,2,37,1,37,1,37,0,37,0,136,0,23,1,7,1,23,0,3,0,3,0,3,0,3,0,130,1,57,2,55,1,55,1,25,3,9,3,57,0,41,2,23,2,23,2,39,1,39,1,7,2,7,2,39,0,39,0,51,3,35,3,6,1,130,1,162,1,25,2,41,1,41,0,7,1,7,1,21,1,21,1,21,1,21,1,23,0,23,0,7,0,7,0,55,3,7,3,37,3,37,3,53,2,53,2,53,0,53,0,19,3,51,1,35,2,3,2,8,1,8,2,4,3,25,1,7,1,7,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,68,3,130,3,162,3,25,5,89,1,194,3,89,0,226,3,41,4,73,2,23,4,23,4,71,1,71,1,71,0,71,0,9,4,41,3,57,2,9,3,23,3,23,3,55,1,55,1,55,0,55,0,39,2,39,2,21,2,21,2,21,2,21,2,35,1,35,1,5,2,37,0,85,5,69,5,85,4,85,3,51,5,67,4,35,5,83,2,3,5,51,4,67,3,51,3,8,1,8,2,25,2,41,1,21,1,21,1,21,1,21,1,7,1,7,1,23,0,23,0,5,0,5,0,5,0,5,0,6,3,132,3,194,3,25,5,89,1,226,3,2,4,41,4,73,2,25,4,71,1,71,1,9,4,73,0,41,3,57,2,25,3,57,1,9,3,57,0,37,2,37,2,37,2,37,2,5,2,5,2,5,2,5,2,37,0,37,0,37,0,37,0,87,5,87,4,69,5,69,5,83,3,83,3,83,3,83,3,53,5,69,4,35,5,35,5,83,2,3,5,51,4,67,3,83,0,51,3,8,1,6,2,132,2,196,2,2,3,25,2,41,1,41,0,23,1,23,1,7,1,7,1,23,0,23,0,7,0,7,0,34,3,57,5,89,3,66,3,73,4,41,5,89,2,25,5,87,1,87,1,55,4,55,4,71,3,71,3,89,0,9,4,39,4,71,2,55,3,71,0,21,4,21,4,69,1,69,1,37,3,53,2,19,3,19,3,51,1,51,1,5,3,53,0,35,2,3,2,83,5,67,5,83,4,3,5,8,1,8,2,4,3,25,1,7,1,7,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,70,3,196,3,6,4,130,4,164,4,228,4,36,5,25,7,121,1,98,5,132,5,196,5,25,6,105,1,105,0,2,6,34,6,66,6,25,4,73,1,73,0,41,3,57,2,9,3,23,3,23,3,55,1,55,1,55,0,55,0,39,2,39,2,21,2,37,1,5,2,37,0,119,7,103,7,119,6,87,7,119,5,103,6,69,7,69,7,117,4,85,6,101,5,53,7,117,3,117,3,69,6,69,6,87,5,87,4,101,3,101,3,35,7,115,2,101,4,5,7,115,0,115,0,99,2,99,2,69,5,53,5,3,6,3,6,85,3,69,4,51,6,35,6,37,5,85,2,19,5,19,5,83,1,83,1,53,4,69,3,3,5,83,0,35,4,67,2,51,3,3,4,8,1,8,2,8,3,6,4,25,2,130,4,23,1,23,1,7,1,7,1,23,0,23,0,5,0,5,0,5,0,5,0,164,4,230,4,100,5,162,5,196,5,41,7,121,2,2,6,119,1,119,1,25,7,121,0,57,6,105,3,105,0,34,6,66,6,25,5,103,2,103,2,41,6,9,6,23,6,23,6,103,1,103,1,89,1,57,4,89,0,98,6,41,4,73,2,25,4,73,1,9,4,73,0,39,3,39,3,55,2,55,2,21,3,21,3,21,3,21,3,53,1,53,1,53,1,53,1,7,3,55,0,37,2,37,2,35,1,35,1,35,1,35,1,3,2,35,0,117,7,101,7,117,6,117,5,101,6,101,6,69,7,69,7,117,4,117,4,87,7,87,5,85,6,101,5,51,7,51,7,115,3,67,6,69,5,85,4,53,5,85,3,99,4,3,7,67,4,35,5,83,2,3,5,67,3,51,3,8,1,8,2,8,3,4,4,70,4,194,4,25,2,41,1,226,4,9,0,23,1,23,1,7,1,7,1,23,0,23,0,4,5,66,5,98,5,130,5,89,6,57,7,162,5,41,7,121,2,73,6,105,4,25,7,121,1,194,5,57,6,105,3,73,5,89,4,73,4,226,5,39,6,39,6,103,2,103,2,103,1,103,1,25,6,105,0,57,5,89,3,41,5,89,2,23,5,23,5,87,1,87,1,55,4,55,4,71,3,71,3,89,0,9,4,39,4,39,4,71,2,71,2,23,4,23,4,53,3,69,1,37,3,53,2,71,0,7,3,53,0,53,0,19,3,19,3,19,3,19,3,51,1,35,2,3,2,35,0,117,7,101,7,115,6,115,6,83,7,115,5,99,6,67,7,115,4,99,5,115,3,83,5,3,7,115,0,3,6,3,5,8,1,8,2,8,3,4,4,25,1,9,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,72,4,72,5,72,6,72,7,72,8,72,9,70,10,198,10,70,11,198,11,70,12,198,12,66,13,100,13,166,13,34,14,68,14,132,14,196,14,4,15,137,1,66,15,98,15,130,15,164,15,226,15,25,5,89,1,2,16,34,16,66,16,25,4,71,1,71,1,9,4,73,0,41,3,57,2,23,3,23,3,55,1,55,1,7,3,7,3,55,0,55,0,39,2,39,2,21,2,37,1,5,2,37,0,104,16,104,17,104,18,102,19,228,19,36,20,102,20,228,20,34,21,68,21,132,21,196,21,4,22,68,22,25,15,249,1,249,0,130,22,162,22,194,22,233,2,226,22,25,14,233,1,2,23,34,23,66,23,98,23,130,23,162,23,201,6,57,13,194,23,41,13,217,2,25,13,185,7,226,23,2,24,201,3,34,24,73,11,215,1,215,1,9,13,217,0,137,10,169,8,73,12,201,4,105,11,185,6,55,12,55,12,39,12,39,12,199,2,199,2,87,11,87,11,185,5,137,9,23,12,23,12,199,1,199,1,153,8,9,12,199,0,199,0,185,4,105,10,169,6,121,9,55,11,55,11,183,3,183,3,137,8,89,10,39,11,39,11,169,5,105,9,167,4,167,4,121,8,137,7,151,4,151,4,121,7,121,6,181,2,181,2,181,2,181,2,21,11,21,11,181,1,181,1,7,11,183,0,151,6,71,10,55,10,167,3,87,9,151,5,37,10,37,10,165,2,165,2,21,10,21,10,165,1,165,1,7,10,103,8,165,0,165,0,135,6,71,9,149,3,149,3,55,9,87,8,135,5,103,7,37,9,37,9,149,2,149,2,87,7,119,5,53,8,53,8,133,3,133,3,103,6,71,7,119,4,87,6,103,5,119,3,19,9,147,1,5,9,149,0,69,8,133,4,117,2,117,2,71,6,103,4,35,8,35,8,35,8,35,8,131,2,19,8,53,7,37,7,19,7,19,7,115,1,115,1,85,5,5,7,117,0,53,6,101,3,69,5,85,4,37,6,101,2,53,5,3,8,131,0,19,6,99,1,3,6,99,0,85,3,69,4,35,5,35,5,83,2,3,5,51,4,67,3,83,0,35,4,67,2,51,3,70,24,249,15,233,15,217,15,233,14,201,15,217,14,185,15,249,11,201,14,217,12,194,24,231,12,231,12,215,13,215,13,249,10,201,13,183,14,183,14,231,11,231,11,151,15,151,15,247,9,247,9,231,10,231,10,183,13,183,13,215,11,215,11,135,15,135,15,247,8,247,8,199,12,199,12,169,14,153,14,135,14,135,14,121,15,121,14,245,7,245,7,245,7,245,7,213,10,213,10,167,13,183,12,199,11,247,6,101,15,101,15,229,8,85,15,149,13,213,9,245,5,229,7,165,12,181,11,69,15,69,15,245,4,245,4,199,10,231,6,245,3,245,3,51,15,51,15,133,13,213,8,35,15,243,2,101,14,149,12,3,15,3,15,197,9,85,14,163,11,163,11,117,13,213,7,67,14,67,14,197,8,213,6,51,14,51,14,179,9,179,9,149,11,165,10,179,10,227,5,227,4,131,12,99,13,227,3,35,14,3,14,227,0,83,13,211,5,115,12,195,7,67,13,131,11,179,8,211,4,147,10,163,9,99,12,211,3,115,11,83,12,195,5,147,9,115,10,163,7,147,7,247,14,247,12,245,13,245,13,227,13,227,13,227,13,227,13,163,15,227,9,8,1,8,2,8,3,8,4,8,5,6,6,134,6,4,7,66,7,98,7,23,1,23,1,9,1,25,0,7,0,7,0,136,7,136,8,136,9,136,10,136,11,134,12,6,13,136,13,134,14,6,15,134,15,6,16,132,16,198,16,70,17,196,17,4,18,68,18,132,18,196,18,4,19,68,19,132,19,196,19,2,20,34,20,66,20,100,20,162,20,194,20,228,20,34,21,66,21,98,21,153,1,130,21,162,21,194,21,226,21,2,22,41,8,137,2,25,8,137,1,34,22,66,22,98,22,130,22,41,7,121,2,105,4,25,7,89,5,121,1,162,22,57,6,105,3,73,5,89,4,41,6,105,2,25,6,194,22,57,5,103,1,103,1,89,3,73,4,39,5,39,5,87,2,87,2,23,5,23,5,87,1,87,1,9,5,89,0,55,4,55,4,71,3,39,4,71,2,55,3,69,1,69,1,23,4,7,4,37,3,37,3,53,2,53,2,71,0,7,3,21,3,21,3,53,1,53,0,35,2,35,2,19,2,35,1,3,2,35,0,226,22,2,23,233,14,34,23,66,23,98,23,249,11,130,23,217,13,169,15,249,10,185,14,233,11,201,13,217,12,153,15,249,9,233,10,185,13,217,11,137,15,249,8,201,12,153,14,233,9,121,15,249,7,169,13,217,10,185,12,105,15,162,23,199,11,199,11,247,6,247,6,137,14,233,8,89,15,153,13,247,5,247,5,119,14,119,14,231,7,231,7,167,12,167,12,199,10,199,10,183,11,183,11,217,9,137,13,71,15,71,15,247,4,247,4,55,15,55,15,247,3,247,3,215,8,215,8,231,6,231,6,39,15,39,15,247,2,247,2,105,14,249,0,23,15,23,15,247,1,247,1,151,12,151,12,199,9,199,9,87,14,167,11,183,10,231,5,119,13,215,7,71,14,231,4,135,12,199,8,55,14,103,13,215,6,231,3,151,11,183,9,39,14,39,14,167,10,167,10,231,2,231,2,23,14,23,14,231,1,231,1,9,14,233,0,87,13,87,13,215,5,215,5,119,12,199,7,71,13,135,11,213,4,213,4,183,8,151,10,167,9,103,12,199,6,55,13,213,3,213,3,213,2,213,2,39,13,7,13,21,13,21,13,117,11,117,11,181,7,181,7,213,1,213,1,87,12,215,0,197,5,197,5,133,10,133,10,165,8,69,12,197,4,101,11,181,6,181,6,151,9,7,12,53,12,53,12,197,3,197,3,117,10,117,10,165,7,165,7,165,6,165,6,199,0,7,11,195,2,195,2,37,12,85,11,181,5,21,12,133,9,149,8,197,1,69,11,181,4,101,10,53,11,117,9,179,3,179,3,149,7,133,8,37,11,85,10,179,2,179,2,165,5,21,11,179,1,179,1,181,0,101,9,149,6,69,10,165,4,117,8,133,7,53,10,163,3,163,3,83,9,147,5,35,10,163,2,19,10,163,1,5,10,165,0,99,8,99,8,131,6,67,9,147,4,51,9,147,3,147,3,117,7,5,9,83,8,131,5,35,9,99,7,115,6,147,2,19,9,147,0,67,8,131,4,83,7,115,5,51,8,131,3,99,6,67,7,115,4,3,8,131,0,83,6,99,5,51,7,115,3,67,6,3,7,115,0,3,6,99,0,243,15,227,15,243,14,211,15,243,13,195,15,243,12,211,14,227,13,179,15,195,14,227,12,163,14,3,15,8,1,8,2,8,3,4,4,25,1,9,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,70,4,198,4,68,5,249,15,132,5,194,5,232,5,249,2,226,6,25,15,249,1,8,7,8,8,8,9,8,10,8,11,8,12,6,13,134,13,6,14,134,14,6,15,134,15,6,16,132,16,196,16,2,17,36,17,100,17,162,17,89,1,194,17,226,17,2,18,34,18,25,4,73,1,66,18,41,3,57,2,23,3,23,3,55,1,55,1,9,3,57,0,39,2,39,2,21,2,37,1,5,2,37,0,231,15,247,14,215,15,247,13,199,15,247,12,183,15,247,11,165,15,165,15,247,10,151,15,247,9,247,8,133,15,133,15,117,15,245,7,101,15,245,6,85,15,245,5,67,15,67,15,243,4,243,3,243,0,243,0,243,0,243,0,243,0,243,0,243,0,243,0,53,15,53,15,53,15,53,15,104,18,102,19,230,19,102,20,35,15,3,15,228,20,36,21,100,21,162,21,196,21,4,22,66,22,100,22,164,22,228,22,36,23,233,3,98,23,130,23,162,23,194,23,226,23,2,24,34,24,9,13,66,24,98,24,130,24,57,12,162,24,25,12,201,0,194,24,231,2,231,2,41,14,25,14,217,3,41,13,217,2,217,1,57,11,226,24,23,13,23,13,201,4,105,11,201,3,169,7,39,12,39,12,201,2,185,5,201,1,9,12,73,11,185,4,105,10,169,6,183,3,183,3,89,10,169,5,39,11,39,11,183,2,183,2,23,11,23,11,183,1,183,1,9,11], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([185,0,105,9,153,6,73,10,169,4,121,8,137,7,167,3,167,3,57,10,89,9,39,10,39,10,153,5,105,8,167,1,167,1,137,6,121,7,151,4,151,4,73,9,89,7,103,7,103,7,165,2,165,2,165,2,165,2,21,10,21,10,7,10,167,0,55,9,151,3,87,8,135,5,37,9,37,9,149,2,149,2,119,6,7,9,21,9,21,9,149,1,149,1,151,0,71,8,135,4,119,5,55,8,135,3,103,6,39,8,133,2,133,2,71,7,119,4,21,8,21,8,133,1,133,1,133,0,133,0,7,8,87,6,53,7,53,7,117,3,117,3,103,5,71,6,37,7,37,7,117,2,117,2,103,4,87,5,5,7,5,7,19,7,19,7,19,7,19,7,115,1,115,1,117,0,53,6,101,3,69,5,85,4,37,6,99,2,19,6,99,1,99,1,5,6,101,0,83,3,83,3,53,5,69,4,35,5,83,2,19,5,3,5,51,4,67,3,83,0,35,4,67,2,51,3,3,4,67,0,201,14,2,25,215,14,215,14,231,9,231,9,233,10,217,9,229,14,229,14,229,14,229,14,231,13,231,13,231,11,231,11,181,14,181,14,197,13,197,13,215,12,215,11,165,14,165,14,197,12,197,12,167,13,215,10,119,14,167,12,197,10,197,10,199,9,119,13,85,14,85,14,179,13,179,13,179,13,179,13,147,14,147,14,181,12,197,11,133,14,229,8,149,13,229,7,181,11,133,13,213,8,101,14,227,6,147,12,165,11,181,10,229,5,213,7,67,14,67,14,229,4,133,12,195,8,51,14,99,13,99,13,213,6,149,11,181,9,165,10,227,1,227,1,211,4,211,4,181,8,165,9,115,11,115,11,181,7,213,0,3,14,227,0,83,13,211,5,115,12,195,7,67,13,131,11,147,10,99,12,195,6,51,13,83,12,195,5,131,10,163,8,147,9,67,12,179,6,115,10,83,11,131,9,147,8,115,9,147,7,131,8,227,12,211,13,8,1,8,2,8,3,249,15,8,4,8,5,8,6,8,7,8,8,8,9,6,10,132,10,25,1,9,1,25,0,9,0,233,15,249,14,217,15,249,13,201,15,249,12,185,15,249,11,247,10,247,10,169,15,153,15,247,9,247,9,247,8,247,8,137,15,121,15,247,7,247,7,103,15,103,15,247,6,247,6,87,15,87,15,247,5,247,5,71,15,71,15,247,4,247,4,55,15,55,15,247,3,247,3,39,15,39,15,247,2,247,2,247,1,247,1,25,15,249,0,198,10,70,11,198,11,70,12,200,12,198,13,70,14,198,14,68,15,132,15,196,15,4,16,68,16,132,16,196,16,4,17,68,17,134,17,4,18,68,18,132,18,198,18,68,19,134,19,2,20,36,20,100,20,162,20,196,20,2,21,34,21,66,21,98,21,130,21,162,21,194,21,226,21,2,22,34,22,66,22,98,22,130,22,162,22,194,22,226,22,2,23,36,23,98,23,132,23,121,3,194,23,121,2,73,6,105,4,89,5,121,1,57,6,105,3,73,5,89,4,41,6,105,2,25,6,105,1,226,23,57,5,89,3,73,4,41,5,89,2,25,5,2,24,87,1,87,1,57,4,73,3,39,4,39,4,71,2,71,2,55,3,55,3,23,4,23,4,71,1,71,1,9,4,73,0,39,3,39,3,55,2,55,2,21,3,21,3,21,3,21,3,53,1,53,1,53,1,53,1,7,3,55,0,37,2,37,2,19,2,19,2,19,2,19,2,35,1,35,1,5,2,37,0,3,15,3,15,3,15,3,15,231,14,215,14,231,13,199,14,231,12,215,13,183,14,231,11,199,13,215,12,167,14,231,10,183,13,215,11,199,12,151,14,231,9,167,13,215,10,183,12,199,11,135,14,231,8,151,13,215,9,119,14,231,7,167,12,199,10,199,10,183,11,183,11,135,13,135,13,215,8,215,8,9,14,233,0,7,13,7,13,229,6,229,6,229,6,229,6,103,14,151,12,197,9,197,9,85,14,85,14,181,10,181,10,229,5,229,5,167,11,119,13,213,7,213,7,229,4,229,4,133,12,133,12,197,8,197,8,71,14,39,14,53,14,53,14,101,13,213,6,229,3,149,11,181,9,165,10,229,2,21,14,229,1,85,13,213,5,117,12,197,7,69,13,133,11,181,8,213,4,149,10,165,9,101,12,197,6,53,13,213,3,37,13,213,2,21,13,117,11,181,7,213,1,85,12,197,5,133,10,165,8,149,9,69,12,197,4,101,11,101,11,181,6,181,6,215,0,7,12,53,12,53,12,197,3,117,10,165,7,37,12,197,2,85,11,181,5,21,12,133,9,149,8,197,1,69,11,199,0,7,11,53,11,53,11,183,0,7,10,21,10,21,10,179,4,179,4,101,10,165,6,117,9,117,9,149,7,149,7,167,0,7,9,149,0,149,0,179,3,131,8,37,11,85,10,179,2,179,2,165,5,21,11,181,1,101,9,147,6,163,4,69,10,117,8,131,7,131,7,51,10,163,3,83,9,147,5,35,10,163,2,163,1,99,8,131,6,115,7,67,9,147,4,51,9,147,3,83,8,131,5,35,9,99,7,115,6,147,2,19,9,147,1,67,8,131,4,83,7,115,5,51,8,131,3,99,6,35,8,131,2,19,8,67,7,115,4,131,1,131,1,5,8,133,0,83,6,99,5,19,7,19,7,5,7,117,0,51,7,35,7,3,6,99,0,3,5,83,0,0,0,5,128,15,128,10,0,27,128,30,0,20,0,17,128,51,128,54,0,60,0,57,128,40,0,45,128,39,128,34,0,99,128,102,0,108,0,105,128,120,0,125,128,119,128,114,0,80,0,85,128,95,128,90,0,75,128,78,0,68,0,65,128,195,128,198,0,204,0,201,128,216,0,221,128,215,128,210,0,240,0,245,128,255,128,250,0,235,128,238,0,228,0,225,128,160,0,165,128,175,128,170,0,187,128,190,0,180,0,177,128,147,128,150,0,156,0,153,128,136,0,141,128,135,128,130,0,131,129,134,1,140,1,137,129,152,1,157,129,151,129,146,1,176,1,181,129,191,129,186,1,171,129,174,1,164,1,161,129,224,1,229,129,239,129,234,1,251,129,254,1,244,1,241,129,211,129,214,1,220,1,217,129,200,1,205,129,199,129,194,1,64,1,69,129,79,129,74,1,91,129,94,1,84,1,81,129,115,129,118,1,124,1,121,129,104,1,109,129,103,129,98,1,35,129,38,1,44,1,41,129,56,1,61,129,55,129,50,1,16,1,21,129,31,129,26,1,11,129,14,1,4,1,1,129,3,131,6,3,12,3,9,131,24,3,29,131,23,131,18,3,48,3,53,131,63,131,58,3,43,131,46,3,36,3,33,131,96,3,101,131,111,131,106,3,123,131,126,3,116,3,113,131,83,131,86,3,92,3,89,131,72,3,77,131,71,131,66,3,192,3,197,131,207,131,202,3,219,131,222,3,212,3,209,131,243,131,246,3,252,3,249,131,232,3,237,131,231,131,226,3,163,131,166,3,172,3,169,131,184,3,189,131,183,131,178,3,144,3,149,131,159,131,154,3,139,131,142,3,132,3,129,131,128,2,133,130,143,130,138,2,155,130,158,2,148,2,145,130,179,130,182,2,188,2,185,130,168,2,173,130,167,130,162,2,227,130,230,2,236,2,233,130,248,2,253,130,247,130,242,2,208,2,213,130,223,130,218,2,203,130,206,2,196,2,193,130,67,130,70,2,76,2,73,130,88,2,93,130,87,130,82,2,112,2,117,130,127,130,122,2,107,130,110,2,100,2,97,130,32,2,37,130,47,130,42,2,59,130,62,2,52,2,49,130,19,130,22,2,28,2,25,130,8,2,13,130,7,130,2,2,108,97,121,101,114,51,46,99,0,6,5,5,5,9,9,9,9,6,9,9,9,6,5,7,3,9,9,12,6,6,9,12,6,11,10,0,0,18,18,0,0,15,18,0,0,7,7,7,0,12,12,12,0,6,15,12,0,6,6,6,3,12,9,9,6,6,12,9,6,8,8,5,0,15,12,9,0,6,18,9,0,0,0,0,1,0,2,0,3,3,0,1,1,1,2,1,3,2,1,2,2,2,3,3,1,3,2,3,3,4,2,4,3,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,3,3,3,2,0,114,101,113,117,97,110,116,105,122,101,32,111,118,101,114,102,108,111,119,32,40,37,102,32,42,32,50,94,37,100,41,10,0,45,98,105,116,115,95,108,101,102,116,32,60,61,32,77,65,68,95,66,85,70,70,69,82,95,71,85,65,82,68,32,42,32,67,72,65,82,95,66,73,84,0,73,73,73,95,104,117,102,102,100,101,99,111,100,101,0,4,4,4,4,4,4,6,6,6,8,10,12,16,18,22,28,34,40,46,54,54,192,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,10,10,10,12,12,12,14,14,14,16,16,16,20,20,20,26,26,26,66,66,66,4,4,4,4,4,4,6,6,4,4,4,6,6,6,6,6,6,10,10,10,12,12,12,14,14,14,16,16,16,20,20,20,26,26,26,66,66,66,4,4,4,4,4,4,6,6,8,8,10,12,16,20,24,28,34,42,50,54,76,158,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,22,22,22,30,30,30,56,56,56,4,4,4,4,4,4,6,6,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,22,22,22,30,30,30,56,56,56,4,4,4,4,4,4,6,6,8,10,12,16,20,24,30,38,46,56,68,84,102,26,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,12,12,12,16,16,16,20,20,20,26,26,26,34,34,34,42,42,42,12,12,12,4,4,4,4,4,4,6,6,4,4,4,6,6,6,8,8,8,12,12,12,16,16,16,20,20,20,26,26,26,34,34,34,42,42,42,12,12,12,6,6,6,6,6,6,8,10,12,14,16,18,22,26,32,38,46,54,62,70,76,36,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,32,32,32,44,44,44,12,12,12,6,6,6,6,6,6,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,32,32,32,44,44,44,12,12,12,6,6,6,6,6,6,8,10,12,14,16,20,24,28,32,38,46,52,60,68,58,54,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,8,8,8,10,10,10,14,14,14,18,18,18,26,26,26,32,32,32,42,42,42,18,18,18,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,10,10,10,14,14,14,18,18,18,26,26,26,32,32,32,42,42,42,18,18,18,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,30,30,30,40,40,40,18,18,18,6,6,6,6,6,6,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,30,30,30,40,40,40,18,18,18,12,12,12,12,12,12,16,20,24,28,32,40,48,56,64,76,90,2,2,2,2,2,8,8,8,8,8,8,8,8,8,12,12,12,16,16,16,20,20,20,24,24,24,28,28,28,36,36,36,2,2,2,2,2,2,2,2,2,26,26,26,12,12,12,4,4,4,8,8,8,12,12,12,16,16,16,20,20,20,24,24,24,28,28,28,36,36,36,2,2,2,2,2,2,2,2,2,26,26,26,100,101,110,111,109,32,33,61,32,48,0,116,105,109,101,114,46,99,0,115,99,97,108,101,95,114,97,116,105,111,110,97,108,0,105,105,0,118,0,77,111,110,97,67,108,105,101,110,116,0,118,105,0,36,111,110,87,115,77,101,115,115,97,103,101,0,118,105,105,105,0,36,111,110,87,115,79,112,101,110,0,103,101,116,87,101,98,83,111,99,107,101,116,0,105,105,105,105,0,99,108,111,115,101,0,118,105,105,0,36,99,111,110,110,101,99,116,0,105,105,105,105,105,105,105,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,50,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,87,101,98,83,111,99,107,101,116,0,119,115,58,47,47,0,47,0,98,105,110,97,114,121,84,121,112,101,0,97,114,114,97,121,98,117,102,102,101,114,0,98,105,110,100,0,111,110,111,112,101,110,0,111,110,109,101,115,115,97,103,101,0,111,110,87,115,69,114,114,111,114,0,111,110,101,114,114,111,114,0,111,110,87,115,67,108,111,115,101,0,111,110,99,108,111,115,101,0,110,101,116,83,116,114,101,97,109,32,100,101,108,101,116,101,100,33,32,37,100,0,123,99,108,101,97,114,84,105,109,101,111,117,116,40,36,48,41,125,0,97,117,100,105,111,32,100,101,99,111,100,101,114,32,114,101,108,101,97,115,101,10,0,97,117,100,105,111,32,100,101,99,111,100,101,114,32,114,101,108,101,97,115,101,33,10,0,119,101,98,115,111,99,107,101,116,32,111,112,101,110,33,0,111,110,87,115,79,112,101,110,0,100,97,116,97,0,111,110,87,115,77,101,115,115,97,103,101,0,79,110,108,121,32,115,117,112,112,111,114,116,32,118,105,100,101,111,32,104,46,50,54,52,47,97,118,99,32,111,114,32,104,46,50,54,53,47,104,101,118,99,32,99,111,100,101,99,46,32,97,99,116,117,97,108,61,37,100,0,123,32,114,101,116,117,114,110,32,40,110,101,119,32,68,97,116,101,40,41,41,46,103,101,116,84,105,109,101,40,41,59,32,125,0,99,111,100,101,0,78,101,116,83,116,114,101,97,109,46,80,108,97,121,46,83,116,97,114,116,0,111,110,78,101,116,83,116,97,116,117,115,0,115,101,116,84,105,109,101,111,117,116,32,116,111,32,112,108,97,121,32,118,105,100,101,111,32,98,117,102,102,101,114,32,37,100,0,99,104,101,99,107,86,105,100,101,111,66,117,102,102,101,114,0,97,108,108,111,99,97,116,111,114,60,84,62,58,58,97,108,108,111,99,97,116,101,40,115,105,122,101,95,116,32,110,41,32,39,110,39,32,101,120,99,101,101,100,115,32,109,97,120,105,109,117,109,32,115,117,112,112,111,114,116,101,100,32,115,105,122,101,0,112,108,97,121,65,117,100,105,111,0,80,75,49,48,77,111,110,97,67,108,105,101,110,116,0,80,49,48,77,111,110,97,67,108,105,101,110,116,0,49,48,77,111,110,97,67,108,105,101,110,116,0,78,101,116,83,116,114,101,97,109,0,105,105,105,0,95,97,116,116,97,99,104,67,97,110,118,97,115,0,118,105,105,105,105,0,95,105,110,105,116,65,117,100,105,111,0,105,105,105,105,105,105,0,112,108,97,121,0,100,101,99,111,100,101,86,105,100,101,111,66,117,102,102,101,114,0,98,117,102,102,101,114,84,105,109,101,0,78,101,116,83,116,114,101,97,109,46,66,117,102,102,101,114,46,69,109,112,116,121,0,91,34,95,95,112,108,97,121,34,44,34,0,34,93,0,115,101,110,100,0,109,112,51,32,105,110,105,116,33,0,97,117,100,105,111,32,105,110,105,116,33,32,37,100,0,116,114,117,101,0,102,97,108,115,101,0,119,101,98,103,108,58,37,115,0,118,105,100,101,111,32,100,101,99,111,100,101,114,32,114,101,108,101,97,115,101,33,10,0,99,111,100,101,99,32,61,32,37,100,0,49,50,86,105,100,101,111,68,101,99,111,100,101,114,0,100,114,97,119,0,99,97,110,118,97,115,58,37,100,44,37,100,0,115,101,116,86,105,100,101,111,83,105,122,101,0,54,70,70,109,112,101,103,0,110,101,116,83,116,114,101,97,109,32,99,111,110,110,101,99,116,33,32,37,100,0,80,75,57,78,101,116,83,116,114,101,97,109,0,80,57,78,101,116,83,116,114,101,97,109,0,57,78,101,116,83,116,114,101,97,109,0,118,111,105,100,0,98,111,111,108,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,68,110,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,108,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  
  var emval_symbols={};
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
          return readLatin1String(address);
      } else {
          return symbol;
      }
    }
  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __emval_new_cstring(v) {
      return __emval_register(getStringOrSymbol(v));
    }

   

   

  
  
  var emval_methodCallers=[];function __emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  
  
  
  var registeredTypes={};
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_lookupTypes(argCount, argTypes, argWireTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function __emval_get_method_caller(argCount, argTypes) {
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
          argsList += (i !== 0 ? ", " : "") + "arg" + i;
          params.push("argType" + i);
          args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody += 
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      return __emval_addMethodCaller(invokerFunction);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  var awaitingDependencies={};
  
  var typeDependencies={};
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function craftEmvalAllocator(argCount) {
      /*This function returns a new function that looks like this:
      function emval_allocator_3(constructor, argTypes, args) {
          var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
          var arg0 = argType0.readValueFromPointer(args);
          var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
          var arg1 = argType1.readValueFromPointer(args + 8);
          var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
          var arg2 = argType2.readValueFromPointer(args + 16);
          var obj = new constructor(arg0, arg1, arg2);
          return __emval_register(obj);
      } */
  
      var argsList = "";
      for(var i = 0; i < argCount; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
      }
  
      var functionBody =
          "return function emval_allocator_"+argCount+"(constructor, argTypes, args) {\n";
  
      for(var i = 0; i < argCount; ++i) {
          functionBody +=
              "var argType"+i+" = requireRegisteredType(HEAP32[(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
              "var arg"+i+" = argType"+i+".readValueFromPointer(args);\n" +
              "args += argType"+i+"['argPackAdvance'];\n";
      }
      functionBody +=
          "var obj = new constructor("+argsList+");\n" +
          "return __emval_register(obj);\n" +
          "}\n";
  
      /*jshint evil:true*/
      return (new Function("requireRegisteredType", "HEAP32", "__emval_register", functionBody))(
          requireRegisteredType, HEAP32, __emval_register);
    }
  
  var emval_newers={};
  
  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }function __emval_new(handle, argCount, argTypes, args) {
      handle = requireHandle(handle);
  
      var newer = emval_newers[argCount];
      if (!newer) {
          newer = craftEmvalAllocator(argCount);
          emval_newers[argCount] = newer;
      }
  
      return newer(handle, argTypes, args);
    }

  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }

  
  var PTHREAD_SPECIFIC={};
  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function _init() {
          var mc = window["MonaClient"] = Module["MonaClient"];
          var ns = window["NetStream"] = Module["NetStream"];
          ns.prototype.attachCanvas = function(canvas) {
              var webGLCanvas = new WebGLCanvas(canvas, Module["noWebGL"], {});
              this.setVideoSize = function(w, h, dataPtr) {
                  canvas.width = w;
                  canvas.height = h;
                  if (webGLCanvas.isWebGL()) {
                      this.draw = function() {
                          var y = HEAPU32[dataPtr];
                          var u = HEAPU32[dataPtr + 1];
                          var v = HEAPU32[dataPtr + 2];
                          var outputArray = [HEAPU8.subarray(y, y + w * h), HEAPU8.subarray(u, u + (w * h >> 2)), HEAPU8.subarray(v, v + (w * h >> 2))];
                          webGLCanvas.drawNextOutputPicture(w, h, null, outputArray);
                      };
                  } else {
                      var outputArray = HEAPU8.subarray(dataPtr, dataPtr + (w * h << 2));
                      webGLCanvas.initRGB(w, h);
                      this.draw = function() {
                          webGLCanvas.drawNextOutputPicture(w, h, null, outputArray);
                      };
                  }
              }.bind(this);
  
              this.getWebGL = function() {
                  return webGLCanvas;
              };
              this._attachCanvas(this, webGLCanvas.isWebGL());
          };
          ns.prototype.checkVideoBuffer = function(t) { return setTimeout(this.decodeVideoBuffer.bind(this), t); };
          ns.prototype.onNetStatus = function(info) {
  
          };
          ns.prototype.initAudio = function(frameCount, samplerate, channels) {
              var isPlaying = false;
              var audioBuffers = [];
              var allFrameCount = frameCount * channels;
              var audioBufferTime = frameCount * 1000 / samplerate;
              //var AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;
              var audioCtx = this.audioContext; //new AudioContext();
              if (!audioCtx) return false;
              var setCurrentAudioData;
              var resampled = samplerate < 22050;
              var audioBuffer = resampled ? audioCtx.createBuffer(channels, frameCount << 1, samplerate << 1) : audioCtx.createBuffer(channels, frameCount, samplerate);
              var outputPtr = this._initAudio(this, frameCount, channels);
              var audioOutputArray = HEAP16.subarray(outputPtr, outputPtr + allFrameCount);
              var playNextBuffer = function() {
                  isPlaying = false;
                  if (audioBuffers.length) {
                      playAudio(audioBuffers.shift());
                  }
                  if (audioBuffers.length > 1) audioBuffers.shift();
              };
              var copyAudioOutputArray = resampled ? function(target) {
                  for (var i = 0; i < allFrameCount; i++) {
                      var j = i << 1;
                      target[j] = target[j + 1] = audioOutputArray[i] / 32768;
                  }
              } : function(target) {
                  for (var i = 0; i < allFrameCount; i++) {
  
                      target[i] = audioOutputArray[i] / 32768;
                  }
              };
              var copyToCtxBuffer = channels > 1 ? function(fromBuffer) {
                  for (var channel = 0; channel < channels; channel++) {
                      var nowBuffering = audioBuffer.getChannelData(channel);
                      if (fromBuffer) {
                          for (var i = 0; i < frameCount; i++) {
                              nowBuffering[i] = fromBuffer[i * (channel + 1)];
                          }
                      } else {
                          for (var i = 0; i < frameCount; i++) {
                              nowBuffering[i] = audioOutputArray[i * (channel + 1)] / 32768;
                          }
                      }
                  }
              } : function(fromBuffer) {
                  var nowBuffering = audioBuffer.getChannelData(0);
                  if (fromBuffer) nowBuffering.set(fromBuffer);
                  else copyAudioOutputArray(nowBuffering);
              };
              var playAudio = function(fromBuffer) {
                  if (isPlaying) {
                      var buffer = new Float32Array(resampled ? allFrameCount * 2 : allFrameCount);
                      copyAudioOutputArray(buffer);
                      audioBuffers.push(buffer);
                      return;
                  }
                  isPlaying = true;
                  copyToCtxBuffer(fromBuffer);
                  var source = audioCtx.createBufferSource();
                  source.buffer = audioBuffer;
                  source.connect(audioCtx.destination);
                  source.onended = playNextBuffer;
                  //setTimeout(playNextBuffer, audioBufferTime-audioBuffers.length*200);
                  source.start();
              };
              this.playAudio = playAudio;
          };
          mc.prototype.connect = function(url, appName, roomName) {
              var ws = this.$connect(this, url, appName, roomName || "");
              this.send = function(ptr, length, output) {
                  var outputArray = HEAPU8.subarray(ptr, ptr + length);
                  ws.send(outputArray);
              };
          };
      }

  function __Z19avcodec_send_packetP14AVCodecContextPK8AVPacket() {
  Module['printErr']('missing function: _Z19avcodec_send_packetP14AVCodecContextPK8AVPacket'); abort(-1);
  }

  function __Z22avcodec_alloc_context3PK7AVCodec() {
  Module['printErr']('missing function: _Z22avcodec_alloc_context3PK7AVCodec'); abort(-1);
  }

   

  function __Z13avcodec_open2P14AVCodecContextPK7AVCodecPP12AVDictionary() {
  Module['printErr']('missing function: _Z13avcodec_open2P14AVCodecContextPK7AVCodecPP12AVDictionary'); abort(-1);
  }

  function __Z15av_parser_closeP20AVCodecParserContext() {
  Module['printErr']('missing function: _Z15av_parser_closeP20AVCodecParserContext'); abort(-1);
  }

  
  function __emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAP32[destructorsRef >> 2] = __emval_register(destructors);
      return destructors;
    }function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function __emval_run_destructors(handle) {
      var destructors = emval_handle_array[handle].value;
      runDestructors(destructors);
      __emval_decref(handle);
    }

  function __Z14av_frame_allocv() {
  Module['printErr']('missing function: _Z14av_frame_allocv'); abort(-1);
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  function __Z20avcodec_free_contextPP14AVCodecContext() {
  Module['printErr']('missing function: _Z20avcodec_free_contextPP14AVCodecContext'); abort(-1);
  }

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 

   

  function __Z14av_packet_freePP8AVPacket() {
  Module['printErr']('missing function: _Z14av_packet_freePP8AVPacket'); abort(-1);
  }

  function ___gxx_personality_v0() {
    }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

   

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }


  function __emval_new_object() {
      return __emval_register({});
    }

  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }

  function __Z21avcodec_receive_frameP14AVCodecContextP7AVFrame() {
  Module['printErr']('missing function: _Z21avcodec_receive_frameP14AVCodecContextP7AVFrame'); abort(-1);
  }

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function __Z15av_packet_allocv() {
  Module['printErr']('missing function: _Z15av_packet_allocv'); abort(-1);
  }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

   

   

  function _abort() {
      Module['abort']();
    }

  function __emval_as(handle, returnType, destructorsRef) {
      handle = requireHandle(handle);
      returnType = requireRegisteredType(returnType, 'emval::as');
      var destructors = [];
      var rd = __emval_register(destructors);
      HEAP32[destructorsRef >> 2] = rd;
      return returnType['toWireType'](destructors, handle);
    }

  function __emval_call_method(caller, handle, methodName, destructorsRef, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      return caller(handle, methodName, __emval_allocateDestructors(destructorsRef), args);
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _emscripten_asm_const_int=true;

  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function __Z16av_parser_parse2P20AVCodecParserContextP14AVCodecContextPPhPiPKhixxx() {
  Module['printErr']('missing function: _Z16av_parser_parse2P20AVCodecParserContextP14AVCodecContextPPhPiPKhixxx'); abort(-1);
  }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function __emval_set_property(handle, key, value) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      value = requireHandle(value);
      handle[key] = value;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function __Z20avcodec_find_decoder9AVCodecID() {
  Module['printErr']('missing function: _Z20avcodec_find_decoder9AVCodecID'); abort(-1);
  }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __emval_typeof(handle) {
      handle = requireHandle(handle);
      return __emval_register(typeof handle);
    }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function __emval_get_property(handle, key) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      return __emval_register(handle[key]);
    }

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function __Z14av_parser_initi() {
  Module['printErr']('missing function: _Z14av_parser_initi'); abort(-1);
  }

  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = varargs;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = HEAPF64[((argIndex)>>3)];
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[((argIndex)>>2)],
                 HEAP32[(((argIndex)+(4))>>2)]];
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[((argIndex)>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }
  
  
  
  function __emscripten_traverse_stack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for(i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        Runtime.warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        var stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
          stack_args = __emscripten_traverse_stack(stack_args[0]);
      }
      
      // Process all lines:
      lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
      
      for(l in lines) {
        var line = lines[l];
  
        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          jsSymbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
          cSymbolName = jsSymbolName;
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = '+jsSymbolName) : ('    at '+cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
        
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }function _emscripten_log_js(flags, str) {
      if (flags & 24/*EM_LOG_C_STACK | EM_LOG_JS_STACK*/) {
        str = str.replace(/\s+$/, ''); // Ensure the message and the callstack are joined cleanly with exactly one newline.
        str += (str.length > 0 ? '\n' : '') + _emscripten_get_callstack_js(flags);
      }
  
      if (flags & 1 /*EM_LOG_CONSOLE*/) {
        if (flags & 4 /*EM_LOG_ERROR*/) {
          console.error(str);
        } else if (flags & 2 /*EM_LOG_WARN*/) {
          console.warn(str);
        } else {
          console.log(str);
        }
      } else if (flags & 6 /*EM_LOG_ERROR|EM_LOG_WARN*/) {
        Module.printErr(str);
      } else {
        Module.print(str);
      }
    }function _emscripten_log(flags, varargs) {
      // Extract the (optionally-existing) printf format specifier field from varargs.
      var format = HEAP32[((varargs)>>2)];
      varargs += Math.max(Runtime.getNativeFieldSize('i32'), Runtime.getAlignSize('i32', null, true));
      var str = '';
      if (format) {
        var result = __formatString(format, varargs);
        for(var i = 0 ; i < result.length; ++i) {
          str += String.fromCharCode(result[i]);
        }
      }
      _emscripten_log_js(flags, str);
    }

  
  function emval_get_global() { return (function(){return Function;})()('return this')(); }function __emval_get_global(name) {
      if(name===0){
        return __emval_register(emval_get_global());
      } else {
        name = getStringOrSymbol(name);
        return __emval_register(emval_get_global()[name]);
      }
    }

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __Z13av_frame_freePP7AVFrame() {
  Module['printErr']('missing function: _Z13av_frame_freePP7AVFrame'); abort(-1);
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }
embind_init_charCodes();
init_emval();;
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "__emval_call_void_method": __emval_call_void_method, "_init": _init, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "upcastPointer": upcastPointer, "getLiveInheritedInstances": getLiveInheritedInstances, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "ClassHandle": ClassHandle, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "getShiftFromSize": getShiftFromSize, "__emval_get_property": __emval_get_property, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "__Z14av_parser_initi": __Z14av_parser_initi, "__embind_register_std_string": __embind_register_std_string, "__emval_get_global": __emval_get_global, "init_RegisteredPointer": init_RegisteredPointer, "__emscripten_traverse_stack": __emscripten_traverse_stack, "getStringOrSymbol": getStringOrSymbol, "flushPendingDeletes": flushPendingDeletes, "makeClassHandle": makeClassHandle, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "__embind_register_class_constructor": __embind_register_class_constructor, "__emval_allocateDestructors": __emval_allocateDestructors, "init_ClassHandle": init_ClassHandle, "___syscall140": ___syscall140, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "___syscall146": ___syscall146, "__Z15av_packet_allocv": __Z15av_packet_allocv, "craftEmvalAllocator": craftEmvalAllocator, "requireHandle": requireHandle, "__embind_register_integer": __embind_register_integer, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "embind_init_charCodes": embind_init_charCodes, "__emval_as": __emval_as, "___setErrNo": ___setErrNo, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "createNamedFunction": createNamedFunction, "validateThis": validateThis, "__embind_register_emval": __embind_register_emval, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "__Z22avcodec_alloc_context3PK7AVCodec": __Z22avcodec_alloc_context3PK7AVCodec, "init_embind": init_embind, "ClassHandle_clone": ClassHandle_clone, "__emval_addMethodCaller": __emval_addMethodCaller, "heap32VectorToArray": heap32VectorToArray, "__emval_lookupTypes": __emval_lookupTypes, "__emval_call_method": __emval_call_method, "__Z19avcodec_send_packetP14AVCodecContextPK8AVPacket": __Z19avcodec_send_packetP14AVCodecContextPK8AVPacket, "__emval_run_destructors": __emval_run_destructors, "ClassHandle_delete": ClassHandle_delete, "RegisteredPointer_destructor": RegisteredPointer_destructor, "__Z20avcodec_find_decoder9AVCodecID": __Z20avcodec_find_decoder9AVCodecID, "___syscall6": ___syscall6, "ensureOverloadTable": ensureOverloadTable, "new_": new_, "downcastPointer": downcastPointer, "replacePublicSymbol": replacePublicSymbol, "__embind_register_class": __embind_register_class, "__Z15av_parser_closeP20AVCodecParserContext": __Z15av_parser_closeP20AVCodecParserContext, "ClassHandle_deleteLater": ClassHandle_deleteLater, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "ClassHandle_isDeleted": ClassHandle_isDeleted, "__Z14av_frame_allocv": __Z14av_frame_allocv, "__emval_incref": __emval_incref, "___cxa_allocate_exception": ___cxa_allocate_exception, "__emval_take_value": __emval_take_value, "___cxa_end_catch": ___cxa_end_catch, "__Z16av_parser_parse2P20AVCodecParserContextP14AVCodecContextPPhPiPKhixxx": __Z16av_parser_parse2P20AVCodecParserContextP14AVCodecContextPPhPiPKhixxx, "getTypeName": getTypeName, "_pthread_getspecific": _pthread_getspecific, "__embind_register_class_function": __embind_register_class_function, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "runDestructors": runDestructors, "requireRegisteredType": requireRegisteredType, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "__emval_set_property": __emval_set_property, "_pthread_setspecific": _pthread_setspecific, "init_emval": init_emval, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "__Z13av_frame_freePP7AVFrame": __Z13av_frame_freePP7AVFrame, "_abort": _abort, "throwBindingError": throwBindingError, "__emval_new_object": __emval_new_object, "__embind_register_class_property": __embind_register_class_property, "exposePublicSymbol": exposePublicSymbol, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "___cxa_pure_virtual": ___cxa_pure_virtual, "__emval_get_method_caller": __emval_get_method_caller, "__Z21avcodec_receive_frameP14AVCodecContextP7AVFrame": __Z21avcodec_receive_frameP14AVCodecContextP7AVFrame, "RegisteredClass": RegisteredClass, "__embind_register_memory_view": __embind_register_memory_view, "getInheritedInstance": getInheritedInstance, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "__emval_typeof": __emval_typeof, "setDelayFunction": setDelayFunction, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "__embind_register_void": __embind_register_void, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "__reallyNegative": __reallyNegative, "__emval_register": __emval_register, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__embind_register_std_wstring": __embind_register_std_wstring, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "_embind_repr": _embind_repr, "RegisteredPointer": RegisteredPointer, "__Z20avcodec_free_contextPP14AVCodecContext": __Z20avcodec_free_contextPP14AVCodecContext, "readLatin1String": readLatin1String, "_emscripten_log_js": _emscripten_log_js, "getBasestPointer": getBasestPointer, "getInheritedInstanceCount": getInheritedInstanceCount, "__embind_register_float": __embind_register_float, "integerReadValueFromPointer": integerReadValueFromPointer, "__Z14av_packet_freePP8AVPacket": __Z14av_packet_freePP8AVPacket, "__emval_new": __emval_new, "emval_get_global": emval_get_global, "genericPointerToWireType": genericPointerToWireType, "registerType": registerType, "___cxa_throw": ___cxa_throw, "__emval_new_cstring": __emval_new_cstring, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "__formatString": __formatString, "_emscripten_log": _emscripten_log, "__Z13avcodec_open2P14AVCodecContextPK7AVCodecPP12AVDictionary": __Z13avcodec_open2P14AVCodecContextPK7AVCodecPP12AVDictionary, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var __emval_call_void_method=env.__emval_call_void_method;
  var _init=env._init;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var upcastPointer=env.upcastPointer;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ClassHandle=env.ClassHandle;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var getShiftFromSize=env.getShiftFromSize;
  var __emval_get_property=env.__emval_get_property;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var __Z14av_parser_initi=env.__Z14av_parser_initi;
  var __embind_register_std_string=env.__embind_register_std_string;
  var __emval_get_global=env.__emval_get_global;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var __emscripten_traverse_stack=env.__emscripten_traverse_stack;
  var getStringOrSymbol=env.getStringOrSymbol;
  var flushPendingDeletes=env.flushPendingDeletes;
  var makeClassHandle=env.makeClassHandle;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var __emval_allocateDestructors=env.__emval_allocateDestructors;
  var init_ClassHandle=env.init_ClassHandle;
  var ___syscall140=env.___syscall140;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var ___syscall146=env.___syscall146;
  var __Z15av_packet_allocv=env.__Z15av_packet_allocv;
  var craftEmvalAllocator=env.craftEmvalAllocator;
  var requireHandle=env.requireHandle;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var embind_init_charCodes=env.embind_init_charCodes;
  var __emval_as=env.__emval_as;
  var ___setErrNo=env.___setErrNo;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var createNamedFunction=env.createNamedFunction;
  var validateThis=env.validateThis;
  var __embind_register_emval=env.__embind_register_emval;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var __Z22avcodec_alloc_context3PK7AVCodec=env.__Z22avcodec_alloc_context3PK7AVCodec;
  var init_embind=env.init_embind;
  var ClassHandle_clone=env.ClassHandle_clone;
  var __emval_addMethodCaller=env.__emval_addMethodCaller;
  var heap32VectorToArray=env.heap32VectorToArray;
  var __emval_lookupTypes=env.__emval_lookupTypes;
  var __emval_call_method=env.__emval_call_method;
  var __Z19avcodec_send_packetP14AVCodecContextPK8AVPacket=env.__Z19avcodec_send_packetP14AVCodecContextPK8AVPacket;
  var __emval_run_destructors=env.__emval_run_destructors;
  var ClassHandle_delete=env.ClassHandle_delete;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var __Z20avcodec_find_decoder9AVCodecID=env.__Z20avcodec_find_decoder9AVCodecID;
  var ___syscall6=env.___syscall6;
  var ensureOverloadTable=env.ensureOverloadTable;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var replacePublicSymbol=env.replacePublicSymbol;
  var __embind_register_class=env.__embind_register_class;
  var __Z15av_parser_closeP20AVCodecParserContext=env.__Z15av_parser_closeP20AVCodecParserContext;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var __Z14av_frame_allocv=env.__Z14av_frame_allocv;
  var __emval_incref=env.__emval_incref;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __emval_take_value=env.__emval_take_value;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var __Z16av_parser_parse2P20AVCodecParserContextP14AVCodecContextPPhPiPKhixxx=env.__Z16av_parser_parse2P20AVCodecParserContextP14AVCodecContextPPhPiPKhixxx;
  var getTypeName=env.getTypeName;
  var _pthread_getspecific=env._pthread_getspecific;
  var __embind_register_class_function=env.__embind_register_class_function;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var runDestructors=env.runDestructors;
  var requireRegisteredType=env.requireRegisteredType;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var __emval_set_property=env.__emval_set_property;
  var _pthread_setspecific=env._pthread_setspecific;
  var init_emval=env.init_emval;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var __Z13av_frame_freePP7AVFrame=env.__Z13av_frame_freePP7AVFrame;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var __emval_new_object=env.__emval_new_object;
  var __embind_register_class_property=env.__embind_register_class_property;
  var exposePublicSymbol=env.exposePublicSymbol;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var __emval_get_method_caller=env.__emval_get_method_caller;
  var __Z21avcodec_receive_frameP14AVCodecContextP7AVFrame=env.__Z21avcodec_receive_frameP14AVCodecContextP7AVFrame;
  var RegisteredClass=env.RegisteredClass;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var getInheritedInstance=env.getInheritedInstance;
  var _emscripten_get_callstack_js=env._emscripten_get_callstack_js;
  var __emval_typeof=env.__emval_typeof;
  var setDelayFunction=env.setDelayFunction;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var __embind_register_void=env.__embind_register_void;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var __reallyNegative=env.__reallyNegative;
  var __emval_register=env.__emval_register;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var _embind_repr=env._embind_repr;
  var RegisteredPointer=env.RegisteredPointer;
  var __Z20avcodec_free_contextPP14AVCodecContext=env.__Z20avcodec_free_contextPP14AVCodecContext;
  var readLatin1String=env.readLatin1String;
  var _emscripten_log_js=env._emscripten_log_js;
  var getBasestPointer=env.getBasestPointer;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var __embind_register_float=env.__embind_register_float;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var __Z14av_packet_freePP8AVPacket=env.__Z14av_packet_freePP8AVPacket;
  var __emval_new=env.__emval_new;
  var emval_get_global=env.emval_get_global;
  var genericPointerToWireType=env.genericPointerToWireType;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var __emval_new_cstring=env.__emval_new_cstring;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var __formatString=env.__formatString;
  var _emscripten_log=env._emscripten_log;
  var __Z13avcodec_open2P14AVCodecContextPK7AVCodecPP12AVDictionary=env.__Z13avcodec_open2P14AVCodecContextPK7AVCodecPP12AVDictionary;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _mad_bit_init($bitptr,$byte) {
 $bitptr = $bitptr|0;
 $byte = $byte|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$bitptr>>2] = $byte;
 $0 = ((($bitptr)) + 4|0);
 HEAP16[$0>>1] = 0;
 $1 = ((($bitptr)) + 6|0);
 HEAP16[$1>>1] = 8;
 return;
}
function _mad_bit_length($begin,$end) {
 $begin = $begin|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($begin)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = HEAP32[$end>>2]|0;
 $4 = HEAP32[$begin>>2]|0;
 $5 = ((($4)) + 1|0);
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 << 3;
 $10 = ((($end)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($2) + 8)|0;
 $14 = (($13) - ($12))|0;
 $15 = (($14) + ($9))|0;
 return ($15|0);
}
function _mad_bit_nextbyte($bitptr) {
 $bitptr = $bitptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bitptr)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(8);
 $3 = HEAP32[$bitptr>>2]|0;
 $4 = ((($3)) + 1|0);
 $5 = $2 ? $3 : $4;
 return ($5|0);
}
function _mad_bit_skip($bitptr,$len) {
 $bitptr = $bitptr|0;
 $len = $len|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $len >>> 3;
 $1 = HEAP32[$bitptr>>2]|0;
 $2 = (($1) + ($0)|0);
 HEAP32[$bitptr>>2] = $2;
 $3 = $len & 7;
 $4 = ((($bitptr)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($6) - ($3))|0;
 $8 = $7&65535;
 HEAP16[$4>>1] = $8;
 $9 = $7 & 65535;
 $10 = ($9>>>0)>(8);
 if ($10) {
  $$sum = (($0) + 1)|0;
  $11 = (($1) + ($$sum)|0);
  HEAP32[$bitptr>>2] = $11;
  $12 = (($7) + 8)|0;
  $13 = $12&65535;
  HEAP16[$4>>1] = $13;
  $15 = $13;$17 = $11;
 } else {
  $15 = $8;$17 = $2;
 }
 $14 = ($15&65535)<(8);
 if (!($14)) {
  return;
 }
 $16 = HEAP8[$17>>0]|0;
 $18 = $16&255;
 $19 = ((($bitptr)) + 4|0);
 HEAP16[$19>>1] = $18;
 return;
}
function _mad_bit_read($bitptr,$len) {
 $bitptr = $bitptr|0;
 $len = $len|0;
 var $$0$lcssa = 0, $$01 = 0, $$01$ph = 0, $$02 = 0, $$lcssa = 0, $$lcssa10 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value$0$lcssa = 0, $value$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bitptr)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(8);
 if ($2) {
  $3 = HEAP32[$bitptr>>2]|0;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ((($bitptr)) + 4|0);
  HEAP16[$6>>1] = $5;
  $$pre$phiZ2D = $6;$10 = $5;
 } else {
  $$phi$trans$insert = ((($bitptr)) + 4|0);
  $$pre = HEAP16[$$phi$trans$insert>>1]|0;
  $$pre$phiZ2D = $$phi$trans$insert;$10 = $$pre;
 }
 $7 = $1&65535;
 $8 = ($7>>>0)>($len>>>0);
 $9 = $10&65535;
 $11 = 1 << $7;
 $12 = (($11) + 65535)|0;
 $13 = $12 & $9;
 do {
  if ($8) {
   $14 = (($7) - ($len))|0;
   $15 = $13 >>> $14;
   $$01$ph = $15;$$sink1 = $14;
  } else {
   $16 = (($len) - ($7))|0;
   $17 = HEAP32[$bitptr>>2]|0;
   $18 = ((($17)) + 1|0);
   HEAP32[$bitptr>>2] = $18;
   HEAP16[$0>>1] = 8;
   $19 = ($16>>>0)>(7);
   if ($19) {
    $20 = (($len) - ($7))|0;
    $$02 = $16;$23 = $18;$value$03 = $13;
    while(1) {
     $21 = $value$03 << 8;
     $22 = ((($23)) + 1|0);
     HEAP32[$bitptr>>2] = $22;
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = $25 | $21;
     $27 = (($$02) + -8)|0;
     $28 = ($27>>>0)>(7);
     if ($28) {
      $$02 = $27;$23 = $22;$value$03 = $26;
     } else {
      $$lcssa = $22;$$lcssa10 = $26;
      break;
     }
    }
    $29 = $20 & 7;
    $$0$lcssa = $29;$32 = $$lcssa;$value$0$lcssa = $$lcssa10;
   } else {
    $$0$lcssa = $16;$32 = $18;$value$0$lcssa = $13;
   }
   $30 = ($$0$lcssa|0)==(0);
   if ($30) {
    $$01 = $value$0$lcssa;
    return ($$01|0);
   } else {
    $31 = HEAP8[$32>>0]|0;
    $33 = $31&255;
    HEAP16[$$pre$phiZ2D>>1] = $33;
    $34 = $value$0$lcssa << $$0$lcssa;
    $35 = $31&255;
    $36 = (8 - ($$0$lcssa))|0;
    $37 = $35 >>> $36;
    $38 = $37 | $34;
    $$01$ph = $38;$$sink1 = $36;
    break;
   }
  }
 } while(0);
 $39 = $$sink1&65535;
 HEAP16[$0>>1] = $39;
 $$01 = $$01$ph;
 return ($$01|0);
}
function _mad_bit_crc($bitptr,$len,$init) {
 $bitptr = $bitptr|0;
 $len = $len|0;
 $init = $init|0;
 var $$ = 0, $$0$lcssa = 0, $$0$lcssa$i = 0, $$0$lcssa$i10 = 0, $$0$lcssa$i22 = 0, $$0$lcssa$i34 = 0, $$0$lcssa$i46 = 0, $$01$i = 0, $$01$i$ph = 0, $$01$i11 = 0, $$01$i11$ph = 0, $$01$i23 = 0, $$01$i23$ph = 0, $$01$i35 = 0, $$01$i35$ph = 0, $$01$i47 = 0, $$01$i47$ph = 0, $$02$i = 0, $$02$i19 = 0, $$02$i31 = 0;
 var $$02$i43 = 0, $$02$i7 = 0, $$060 = 0, $$1$ph = 0, $$in = 0, $$lcssa = 0, $$lcssa112 = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$masked = 0, $$ph = 0, $$ph1 = 0, $$ph3 = 0, $$ph7 = 0, $$phi$trans$insert = 0, $$phi$trans$insert$i13 = 0, $$phi$trans$insert$i25 = 0, $$phi$trans$insert$i37 = 0;
 var $$phi$trans$insert86 = 0, $$pre = 0, $$pre$i = 0, $$pre$i14 = 0, $$pre$i2 = 0, $$pre$i26 = 0, $$pre$i38 = 0, $$pre$phi$i1695Z2D = 0, $$pre$phi$i2893Z2D = 0, $$pre$phi$i4091Z2D = 0, $$pre$phi89Z2D = 0, $$pre$phiZ2D = 0, $$pre84 = 0, $$pre87 = 0, $$pre88 = 0, $$sink = 0, $$sink2 = 0, $$sink4 = 0, $$sink6 = 0, $$sink8 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $crc$0$lcssa = 0, $crc$059 = 0;
 var $crc$1 = 0, $crc$2 = 0, $crc$3$lcssa = 0, $crc$3$ph = 0, $crc$358 = 0, $scevgep$sum = 0, $scevgep77 = 0, $scevgep78 = 0, $scevgep79 = 0, $scevgep80 = 0, $scevgep81$sum = 0, $scevgep82 = 0, $value$0$lcssa$i = 0, $value$0$lcssa$i21 = 0, $value$0$lcssa$i33 = 0, $value$0$lcssa$i45 = 0, $value$0$lcssa$i9 = 0, $value$03$i = 0, $value$03$i18 = 0, $value$03$i30 = 0;
 var $value$03$i42 = 0, $value$03$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $init&65535;
 $1 = ($len>>>0)>(31);
 if ($1) {
  $2 = ((($bitptr)) + 6|0);
  $3 = ((($bitptr)) + 4|0);
  $$pre = HEAP16[$2>>1]|0;
  $$060 = $len;$5 = $$pre;$crc$059 = $0;
  while(1) {
   $4 = ($5<<16>>16)==(8);
   if ($4) {
    $6 = HEAP32[$bitptr>>2]|0;
    $7 = HEAP8[$6>>0]|0;
    $8 = $7&255;
    HEAP16[$3>>1] = $8;
    $9 = $5&65535;
    $10 = $7&255;
    $11 = 1 << $9;
    $12 = (($11) + 65535)|0;
    $13 = $10 & $12;
    $24 = 8;$310 = $13;
    label = 7;
   } else {
    $$pre$i = HEAP16[$3>>1]|0;
    $14 = $5&65535;
    $15 = ($5&65535)>(32);
    $16 = $$pre$i&65535;
    $17 = 1 << $14;
    $18 = (($17) + 65535)|0;
    $19 = $16 & $18;
    if ($15) {
     $20 = (($14) + -32)|0;
     $21 = $19 >>> $20;
     $22 = $20&65535;
     $$01$i$ph = $21;$$ph = $22;$$sink = $22;
     label = 13;
    } else {
     $24 = $14;$310 = $19;
     label = 7;
    }
   }
   if ((label|0) == 7) {
    label = 0;
    $23 = (32 - ($24))|0;
    $25 = HEAP32[$bitptr>>2]|0;
    $26 = ((($25)) + 1|0);
    HEAP32[$bitptr>>2] = $26;
    HEAP16[$2>>1] = 8;
    $27 = ($23>>>0)>(7);
    if ($27) {
     $28 = (24 - ($24))|0;
     $29 = $28 >>> 3;
     $$02$i = $23;$32 = $26;$value$03$i = $310;
     while(1) {
      $30 = $value$03$i << 8;
      $31 = ((($32)) + 1|0);
      HEAP32[$bitptr>>2] = $31;
      $33 = HEAP8[$32>>0]|0;
      $34 = $33&255;
      $35 = $34 | $30;
      $36 = (($$02$i) + -8)|0;
      $37 = ($36>>>0)>(7);
      if ($37) {
       $$02$i = $36;$32 = $31;$value$03$i = $35;
      } else {
       $$lcssa115 = $35;
       break;
      }
     }
     $scevgep81$sum = (($29) + 2)|0;
     $scevgep82 = (($25) + ($scevgep81$sum)|0);
     $38 = $23 & 7;
     $$0$lcssa$i = $38;$41 = $scevgep82;$value$0$lcssa$i = $$lcssa115;
    } else {
     $$0$lcssa$i = $23;$41 = $26;$value$0$lcssa$i = $310;
    }
    $39 = ($$0$lcssa$i|0)==(0);
    if ($39) {
     $$01$i = $value$0$lcssa$i;$311 = 8;
    } else {
     $40 = HEAP8[$41>>0]|0;
     $42 = $40&255;
     HEAP16[$3>>1] = $42;
     $43 = $value$0$lcssa$i << $$0$lcssa$i;
     $44 = $40&255;
     $45 = (8 - ($$0$lcssa$i))|0;
     $46 = $44 >>> $45;
     $47 = $46 | $43;
     $48 = $45&65535;
     $$01$i$ph = $47;$$ph = $48;$$sink = $48;
     label = 13;
    }
   }
   if ((label|0) == 13) {
    label = 0;
    HEAP16[$2>>1] = $$sink;
    $$01$i = $$01$i$ph;$311 = $$ph;
   }
   $49 = $crc$059 << 8;
   $50 = $crc$059 >>> 8;
   $51 = $$01$i >>> 24;
   $$masked = $50 & 255;
   $52 = $51 ^ $$masked;
   $53 = (42186 + ($52<<1)|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $56 = $55 ^ $49;
   $57 = $56 << 8;
   $58 = $56 >>> 8;
   $59 = $$01$i >>> 16;
   $60 = $58 ^ $59;
   $61 = $60 & 255;
   $62 = (42186 + ($61<<1)|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = $63&65535;
   $65 = $57 ^ $64;
   $66 = $65 << 8;
   $67 = $65 ^ $$01$i;
   $68 = $67 >>> 8;
   $69 = $68 & 255;
   $70 = (42186 + ($69<<1)|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71&65535;
   $73 = $66 ^ $72;
   $74 = $73 << 8;
   $75 = $73 >>> 8;
   $76 = $75 ^ $$01$i;
   $77 = $76 & 255;
   $78 = (42186 + ($77<<1)|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79&65535;
   $81 = $74 ^ $80;
   $82 = (($$060) + -32)|0;
   $83 = ($82>>>0)>(31);
   if ($83) {
    $$060 = $82;$5 = $311;$crc$059 = $81;
   } else {
    $$lcssa116 = $81;
    break;
   }
  }
  $84 = $len & 31;
  $$0$lcssa = $84;$crc$0$lcssa = $$lcssa116;
 } else {
  $$0$lcssa = $len;$crc$0$lcssa = $0;
 }
 $85 = $$0$lcssa >>> 3;
 switch ($85|0) {
 case 3:  {
  $86 = $crc$0$lcssa << 8;
  $87 = $crc$0$lcssa >>> 8;
  $88 = ((($bitptr)) + 6|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = ($89<<16>>16)==(8);
  if ($90) {
   $91 = HEAP32[$bitptr>>2]|0;
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = ((($bitptr)) + 4|0);
   HEAP16[$94>>1] = $93;
   $95 = $89&65535;
   $96 = $92&255;
   $97 = 1 << $95;
   $98 = (($97) + 65535)|0;
   $99 = $96 & $98;
   $$pre$phi$i4091Z2D = $94;$110 = 8;$312 = $99;
   label = 23;
  } else {
   $$phi$trans$insert$i37 = ((($bitptr)) + 4|0);
   $$pre$i38 = HEAP16[$$phi$trans$insert$i37>>1]|0;
   $100 = $89&65535;
   $101 = ($89&65535)>(8);
   $102 = $$pre$i38&65535;
   $103 = 1 << $100;
   $104 = (($103) + 65535)|0;
   $105 = $102 & $104;
   if ($101) {
    $106 = (($100) + -8)|0;
    $107 = $105 >>> $106;
    $108 = $106&65535;
    $$01$i47$ph = $107;$$ph1 = $108;$$sink2 = $108;
    label = 29;
   } else {
    $$pre$phi$i4091Z2D = $$phi$trans$insert$i37;$110 = $100;$312 = $105;
    label = 23;
   }
  }
  if ((label|0) == 23) {
   $109 = (8 - ($110))|0;
   $111 = HEAP32[$bitptr>>2]|0;
   $112 = ((($111)) + 1|0);
   HEAP32[$bitptr>>2] = $112;
   HEAP16[$88>>1] = 8;
   $113 = ($109>>>0)>(7);
   if ($113) {
    $114 = (0 - ($110))|0;
    $115 = $114 >>> 3;
    $116 = (($115) + 2)|0;
    $$02$i43 = $109;$119 = $112;$value$03$i42 = $312;
    while(1) {
     $117 = $value$03$i42 << 8;
     $118 = ((($119)) + 1|0);
     HEAP32[$bitptr>>2] = $118;
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = $121 | $117;
     $123 = (($$02$i43) + -8)|0;
     $124 = ($123>>>0)>(7);
     if ($124) {
      $$02$i43 = $123;$119 = $118;$value$03$i42 = $122;
     } else {
      $$lcssa114 = $122;
      break;
     }
    }
    $scevgep80 = (($111) + ($116)|0);
    $125 = $109 & 7;
    $$0$lcssa$i46 = $125;$128 = $scevgep80;$value$0$lcssa$i45 = $$lcssa114;
   } else {
    $$0$lcssa$i46 = $109;$128 = $112;$value$0$lcssa$i45 = $312;
   }
   $126 = ($$0$lcssa$i46|0)==(0);
   if ($126) {
    $$01$i47 = $value$0$lcssa$i45;$313 = 8;
   } else {
    $127 = HEAP8[$128>>0]|0;
    $129 = $127&255;
    HEAP16[$$pre$phi$i4091Z2D>>1] = $129;
    $130 = $value$0$lcssa$i45 << $$0$lcssa$i46;
    $131 = $127&255;
    $132 = (8 - ($$0$lcssa$i46))|0;
    $133 = $131 >>> $132;
    $134 = $133 | $130;
    $135 = $132&65535;
    $$01$i47$ph = $134;$$ph1 = $135;$$sink2 = $135;
    label = 29;
   }
  }
  if ((label|0) == 29) {
   HEAP16[$88>>1] = $$sink2;
   $$01$i47 = $$01$i47$ph;$313 = $$ph1;
  }
  $136 = $$01$i47 ^ $87;
  $137 = $136 & 255;
  $138 = (42186 + ($137<<1)|0);
  $139 = HEAP16[$138>>1]|0;
  $140 = $139&65535;
  $141 = $140 ^ $86;
  $$pre$phiZ2D = $88;$145 = $313;$crc$1 = $141;
  label = 31;
  break;
 }
 case 2:  {
  $$phi$trans$insert = ((($bitptr)) + 6|0);
  $$pre84 = HEAP16[$$phi$trans$insert>>1]|0;
  $$pre$phiZ2D = $$phi$trans$insert;$145 = $$pre84;$crc$1 = $crc$0$lcssa;
  label = 31;
  break;
 }
 case 1:  {
  $$phi$trans$insert86 = ((($bitptr)) + 6|0);
  $$pre87 = HEAP16[$$phi$trans$insert86>>1]|0;
  $$pre$phi89Z2D = $$phi$trans$insert86;$200 = $$pre87;$crc$2 = $crc$0$lcssa;
  label = 43;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$crc$3$ph = $crc$0$lcssa;
 }
 }
 if ((label|0) == 31) {
  $142 = $crc$1 << 8;
  $143 = $crc$1 >>> 8;
  $144 = ($145<<16>>16)==(8);
  if ($144) {
   $146 = HEAP32[$bitptr>>2]|0;
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = ((($bitptr)) + 4|0);
   HEAP16[$149>>1] = $148;
   $150 = $145&65535;
   $151 = $147&255;
   $152 = 1 << $150;
   $153 = (($152) + 65535)|0;
   $154 = $151 & $153;
   $$pre$phi$i2893Z2D = $149;$165 = 8;$314 = $154;
   label = 35;
  } else {
   $$phi$trans$insert$i25 = ((($bitptr)) + 4|0);
   $$pre$i26 = HEAP16[$$phi$trans$insert$i25>>1]|0;
   $155 = $145&65535;
   $156 = ($145&65535)>(8);
   $157 = $$pre$i26&65535;
   $158 = 1 << $155;
   $159 = (($158) + 65535)|0;
   $160 = $157 & $159;
   if ($156) {
    $161 = (($155) + -8)|0;
    $162 = $160 >>> $161;
    $163 = $161&65535;
    $$01$i35$ph = $162;$$ph3 = $163;$$sink4 = $163;
    label = 41;
   } else {
    $$pre$phi$i2893Z2D = $$phi$trans$insert$i25;$165 = $155;$314 = $160;
    label = 35;
   }
  }
  if ((label|0) == 35) {
   $164 = (8 - ($165))|0;
   $166 = HEAP32[$bitptr>>2]|0;
   $167 = ((($166)) + 1|0);
   HEAP32[$bitptr>>2] = $167;
   HEAP16[$$pre$phiZ2D>>1] = 8;
   $168 = ($164>>>0)>(7);
   if ($168) {
    $169 = (0 - ($165))|0;
    $170 = $169 >>> 3;
    $171 = (($170) + 2)|0;
    $$02$i31 = $164;$174 = $167;$value$03$i30 = $314;
    while(1) {
     $172 = $value$03$i30 << 8;
     $173 = ((($174)) + 1|0);
     HEAP32[$bitptr>>2] = $173;
     $175 = HEAP8[$174>>0]|0;
     $176 = $175&255;
     $177 = $176 | $172;
     $178 = (($$02$i31) + -8)|0;
     $179 = ($178>>>0)>(7);
     if ($179) {
      $$02$i31 = $178;$174 = $173;$value$03$i30 = $177;
     } else {
      $$lcssa113 = $177;
      break;
     }
    }
    $scevgep79 = (($166) + ($171)|0);
    $180 = $164 & 7;
    $$0$lcssa$i34 = $180;$183 = $scevgep79;$value$0$lcssa$i33 = $$lcssa113;
   } else {
    $$0$lcssa$i34 = $164;$183 = $167;$value$0$lcssa$i33 = $314;
   }
   $181 = ($$0$lcssa$i34|0)==(0);
   if ($181) {
    $$01$i35 = $value$0$lcssa$i33;$315 = 8;
   } else {
    $182 = HEAP8[$183>>0]|0;
    $184 = $182&255;
    HEAP16[$$pre$phi$i2893Z2D>>1] = $184;
    $185 = $value$0$lcssa$i33 << $$0$lcssa$i34;
    $186 = $182&255;
    $187 = (8 - ($$0$lcssa$i34))|0;
    $188 = $186 >>> $187;
    $189 = $188 | $185;
    $190 = $187&65535;
    $$01$i35$ph = $189;$$ph3 = $190;$$sink4 = $190;
    label = 41;
   }
  }
  if ((label|0) == 41) {
   HEAP16[$$pre$phiZ2D>>1] = $$sink4;
   $$01$i35 = $$01$i35$ph;$315 = $$ph3;
  }
  $191 = $$01$i35 ^ $143;
  $192 = $191 & 255;
  $193 = (42186 + ($192<<1)|0);
  $194 = HEAP16[$193>>1]|0;
  $195 = $194&65535;
  $196 = $195 ^ $142;
  $$pre$phi89Z2D = $$pre$phiZ2D;$200 = $315;$crc$2 = $196;
  label = 43;
 }
 if ((label|0) == 43) {
  $197 = $crc$2 << 8;
  $198 = $crc$2 >>> 8;
  $199 = ($200<<16>>16)==(8);
  if ($199) {
   $201 = HEAP32[$bitptr>>2]|0;
   $202 = HEAP8[$201>>0]|0;
   $203 = $202&255;
   $204 = ((($bitptr)) + 4|0);
   HEAP16[$204>>1] = $203;
   $205 = $200&65535;
   $206 = $202&255;
   $207 = 1 << $205;
   $208 = (($207) + 65535)|0;
   $209 = $206 & $208;
   $$pre$phi$i1695Z2D = $204;$219 = 8;$316 = $209;
   label = 47;
  } else {
   $$phi$trans$insert$i13 = ((($bitptr)) + 4|0);
   $$pre$i14 = HEAP16[$$phi$trans$insert$i13>>1]|0;
   $210 = $200&65535;
   $211 = ($200&65535)>(8);
   $212 = $$pre$i14&65535;
   $213 = 1 << $210;
   $214 = (($213) + 65535)|0;
   $215 = $212 & $214;
   if ($211) {
    $216 = (($210) + -8)|0;
    $217 = $215 >>> $216;
    $$01$i23$ph = $217;$$sink6 = $216;
    label = 53;
   } else {
    $$pre$phi$i1695Z2D = $$phi$trans$insert$i13;$219 = $210;$316 = $215;
    label = 47;
   }
  }
  if ((label|0) == 47) {
   $218 = (8 - ($219))|0;
   $220 = HEAP32[$bitptr>>2]|0;
   $221 = ((($220)) + 1|0);
   HEAP32[$bitptr>>2] = $221;
   HEAP16[$$pre$phi89Z2D>>1] = 8;
   $222 = ($218>>>0)>(7);
   if ($222) {
    $223 = (0 - ($219))|0;
    $224 = $223 >>> 3;
    $225 = (($224) + 2)|0;
    $$02$i19 = $218;$228 = $221;$value$03$i18 = $316;
    while(1) {
     $226 = $value$03$i18 << 8;
     $227 = ((($228)) + 1|0);
     HEAP32[$bitptr>>2] = $227;
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = $230 | $226;
     $232 = (($$02$i19) + -8)|0;
     $233 = ($232>>>0)>(7);
     if ($233) {
      $$02$i19 = $232;$228 = $227;$value$03$i18 = $231;
     } else {
      $$lcssa112 = $231;
      break;
     }
    }
    $scevgep78 = (($220) + ($225)|0);
    $234 = $218 & 7;
    $$0$lcssa$i22 = $234;$237 = $scevgep78;$value$0$lcssa$i21 = $$lcssa112;
   } else {
    $$0$lcssa$i22 = $218;$237 = $221;$value$0$lcssa$i21 = $316;
   }
   $235 = ($$0$lcssa$i22|0)==(0);
   if ($235) {
    $$01$i23 = $value$0$lcssa$i21;
   } else {
    $236 = HEAP8[$237>>0]|0;
    $238 = $236&255;
    HEAP16[$$pre$phi$i1695Z2D>>1] = $238;
    $239 = $value$0$lcssa$i21 << $$0$lcssa$i22;
    $240 = $236&255;
    $241 = (8 - ($$0$lcssa$i22))|0;
    $242 = $240 >>> $241;
    $243 = $242 | $239;
    $$01$i23$ph = $243;$$sink6 = $241;
    label = 53;
   }
  }
  if ((label|0) == 53) {
   $244 = $$sink6&65535;
   HEAP16[$$pre$phi89Z2D>>1] = $244;
   $$01$i23 = $$01$i23$ph;
  }
  $245 = $$01$i23 ^ $198;
  $246 = $245 & 255;
  $247 = (42186 + ($246<<1)|0);
  $248 = HEAP16[$247>>1]|0;
  $249 = $248&65535;
  $250 = $249 ^ $197;
  $251 = $$0$lcssa & 7;
  $$1$ph = $251;$crc$3$ph = $250;
 }
 $252 = ($$1$ph|0)==(0);
 if ($252) {
  $crc$3$lcssa = $crc$3$ph;
  $309 = $crc$3$lcssa&65535;
  return ($309|0);
 }
 $253 = ((($bitptr)) + 6|0);
 $254 = ((($bitptr)) + 4|0);
 $$pre88 = HEAP16[$253>>1]|0;
 $$in = $$1$ph;$257 = $$pre88;$crc$358 = $crc$3$ph;
 while(1) {
  $255 = (($$in) + -1)|0;
  $256 = ($257<<16>>16)==(8);
  if ($256) {
   $258 = HEAP32[$bitptr>>2]|0;
   $259 = HEAP8[$258>>0]|0;
   $260 = $259&255;
   HEAP16[$254>>1] = $260;
   $261 = $257&65535;
   $262 = $259&255;
   $263 = 1 << $261;
   $264 = (($263) + 65535)|0;
   $265 = $262 & $264;
   $273 = 8;$275 = $265;
   label = 60;
  } else {
   $$pre$i2 = HEAP16[$254>>1]|0;
   $266 = $257&65535;
   $267 = ($257&65535)>(1);
   $268 = $$pre$i2&65535;
   $269 = 1 << $266;
   $270 = (($269) + 65535)|0;
   $271 = $268 & $270;
   if ($267) {
    $273 = $266;$275 = $271;
    label = 60;
   } else {
    $277 = (1 - ($266))|0;
    $278 = HEAP32[$bitptr>>2]|0;
    $279 = ((($278)) + 1|0);
    HEAP32[$bitptr>>2] = $279;
    HEAP16[$253>>1] = 8;
    $280 = ($277>>>0)>(7);
    if ($280) {
     $281 = (-7 - ($266))|0;
     $282 = $281 >>> 3;
     $$02$i7 = $277;$285 = $279;$value$03$i6 = $271;
     while(1) {
      $283 = $value$03$i6 << 8;
      $284 = ((($285)) + 1|0);
      HEAP32[$bitptr>>2] = $284;
      $286 = HEAP8[$285>>0]|0;
      $287 = $286&255;
      $288 = $287 | $283;
      $289 = (($$02$i7) + -8)|0;
      $290 = ($289>>>0)>(7);
      if ($290) {
       $$02$i7 = $289;$285 = $284;$value$03$i6 = $288;
      } else {
       $$lcssa = $288;
       break;
      }
     }
     $scevgep$sum = (($282) + 2)|0;
     $scevgep77 = (($278) + ($scevgep$sum)|0);
     $291 = $277 & 7;
     $$0$lcssa$i10 = $291;$294 = $scevgep77;$value$0$lcssa$i9 = $$lcssa;
    } else {
     $$0$lcssa$i10 = $277;$294 = $279;$value$0$lcssa$i9 = $271;
    }
    $292 = ($$0$lcssa$i10|0)==(0);
    if ($292) {
     $$01$i11 = $value$0$lcssa$i9;$317 = 8;
    } else {
     $293 = HEAP8[$294>>0]|0;
     $295 = $293&255;
     HEAP16[$254>>1] = $295;
     $296 = $value$0$lcssa$i9 << $$0$lcssa$i10;
     $297 = $293&255;
     $298 = (8 - ($$0$lcssa$i10))|0;
     $299 = $297 >>> $298;
     $300 = $299 | $296;
     $301 = $298&65535;
     $$01$i11$ph = $300;$$ph7 = $301;$$sink8 = $301;
     label = 67;
    }
   }
  }
  if ((label|0) == 60) {
   label = 0;
   $272 = (($273) + -1)|0;
   $274 = $275 >>> $272;
   $276 = $272&65535;
   $$01$i11$ph = $274;$$ph7 = $276;$$sink8 = $276;
   label = 67;
  }
  if ((label|0) == 67) {
   label = 0;
   HEAP16[$253>>1] = $$sink8;
   $$01$i11 = $$01$i11$ph;$317 = $$ph7;
  }
  $302 = $crc$358 >>> 15;
  $303 = $$01$i11 ^ $302;
  $304 = $crc$358 << 1;
  $305 = $303 & 1;
  $306 = ($305|0)==(0);
  $307 = $304 ^ 32773;
  $$ = $306 ? $304 : $307;
  $308 = ($255|0)==(0);
  if ($308) {
   $crc$3$lcssa = $$;
   break;
  } else {
   $$in = $255;$257 = $317;$crc$358 = $$;
  }
 }
 $309 = $crc$3$lcssa&65535;
 return ($309|0);
}
function _mad_stream_init($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 28|0);
 ;HEAP32[$stream>>2]=0|0;HEAP32[$stream+4>>2]=0|0;HEAP32[$stream+8>>2]=0|0;HEAP32[$stream+12>>2]=0|0;HEAP32[$stream+16>>2]=0|0;HEAP32[$stream+20>>2]=0|0;HEAP32[$stream+24>>2]=0|0;
 _mad_bit_init($0,0);
 $1 = ((($stream)) + 36|0);
 _mad_bit_init($1,0);
 $2 = ((($stream)) + 44|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;
 return;
}
function _mad_frame_init($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond11$i = 0, $exitcond7$i = 0, $exitcond8$i = 0, $s$06$i = 0, $s$14$i = 0, $sb$05$i = 0, $sb$13$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($frame)) + 36|0);
 dest=$frame; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = 49256;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = ((($frame)) + 44|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($frame)) + 9264|0);
 HEAP32[$12>>2] = 0;
 $s$06$i = 0;
 while(1) {
  $sb$05$i = 0;
  while(1) {
   $13 = ((((($frame)) + 4656|0) + ($s$06$i<<7)|0) + ($sb$05$i<<2)|0);
   HEAP32[$13>>2] = 0;
   $14 = ((((($frame)) + 48|0) + ($s$06$i<<7)|0) + ($sb$05$i<<2)|0);
   HEAP32[$14>>2] = 0;
   $15 = (($sb$05$i) + 1)|0;
   $exitcond8$i = ($15|0)==(32);
   if ($exitcond8$i) {
    break;
   } else {
    $sb$05$i = $15;
   }
  }
  $16 = (($s$06$i) + 1)|0;
  $exitcond11$i = ($16|0)==(36);
  if ($exitcond11$i) {
   break;
  } else {
   $s$06$i = $16;
  }
 }
 $17 = HEAP32[$12>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  return;
 } else {
  $s$14$i = 0;
 }
 while(1) {
  $sb$13$i = 0;
  while(1) {
   $19 = ((((($17)) + 2304|0) + (($sb$13$i*72)|0)|0) + ($s$14$i<<2)|0);
   HEAP32[$19>>2] = 0;
   $20 = ((($17) + (($sb$13$i*72)|0)|0) + ($s$14$i<<2)|0);
   HEAP32[$20>>2] = 0;
   $21 = (($sb$13$i) + 1)|0;
   $exitcond$i = ($21|0)==(32);
   if ($exitcond$i) {
    break;
   } else {
    $sb$13$i = $21;
   }
  }
  $22 = (($s$14$i) + 1)|0;
  $exitcond7$i = ($22|0)==(18);
  if ($exitcond7$i) {
   break;
  } else {
   $s$14$i = $22;
  }
 }
 return;
}
function _mad_synth_init($synth) {
 $synth = $synth|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _mad_synth_mute($synth);
 $0 = ((($synth)) + 4096|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 return;
}
function _mad_synth_frame($synth,$frame) {
 $synth = $synth|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $phitmp = 0, $synth_frame$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($frame)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0);
 $3 = $2 ? 2 : 1;
 $4 = HEAP32[$frame>>2]|0;
 switch ($4|0) {
 case 1:  {
  $15 = 12;
  break;
 }
 case 3:  {
  $5 = ((($frame)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 4096;
  $8 = ($7|0)!=(0);
  $phitmp = $8 ? 18 : 36;
  $29 = $phitmp;
  label = 3;
  break;
 }
 default: {
  $29 = 36;
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $15 = $29;
 }
 $9 = ((($frame)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($synth)) + 4100|0);
 HEAP32[$11>>2] = $10;
 $12 = $3&65535;
 $13 = ((($synth)) + 4104|0);
 HEAP16[$13>>1] = $12;
 $14 = $15 << 5;
 $16 = $14&65535;
 $17 = ((($synth)) + 4106|0);
 HEAP16[$17>>1] = $16;
 $18 = ((($frame)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 2;
 $21 = ($20|0)==(0);
 if ($21) {
  $synth_frame$0 = 41;
 } else {
  $22 = $10 >>> 1;
  HEAP32[$11>>2] = $22;
  $23 = $15 << 4;
  $24 = $23 & 32752;
  $div = $24&65535;
  HEAP16[$17>>1] = $div;
  $synth_frame$0 = 42;
 }
 FUNCTION_TABLE_viiii[$synth_frame$0 & 127]($synth,$frame,$3,$15);
 $25 = ((($synth)) + 4096|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($15))|0;
 $28 = $27 & 15;
 HEAP32[$25>>2] = $28;
 return;
}
function _mad_frame_finish($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($frame)) + 9264|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 _free($1);
 HEAP32[$0>>2] = 0;
 return;
}
function _synth_half($synth,$frame,$nch,$ns) {
 $synth = $synth|0;
 $frame = $frame|0;
 $nch = $nch|0;
 $ns = $ns|0;
 var $$sum$us = 0, $$sum1$us = 0, $$sum10$us = 0, $$sum11$us = 0, $$sum12$us = 0, $$sum13$us = 0, $$sum2$us = 0, $$sum3$us = 0, $$sum35$us = 0, $$sum36$us = 0, $$sum37$us = 0, $$sum38$us = 0, $$sum39$us = 0, $$sum4$us = 0, $$sum40$us = 0, $$sum41$us = 0, $$sum43$us = 0, $$sum44$us = 0, $$sum45$us = 0, $$sum46$us = 0;
 var $$sum47$us = 0, $$sum48$us = 0, $$sum49$us = 0, $$sum5$us = 0, $$sum50$us = 0, $$sum6$us = 0, $$sum7$us = 0, $$sum8$us = 0, $$sum9$us = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Dptr$085$us = 0, $ch$089$us = 0, $exitcond = 0, $exitcond117 = 0, $exitcond118 = 0, $fe$083$us = 0, $fo$084$us = 0, $indvars$iv$in = 0, $indvars$iv113$in = 0, $pcm1$086$us = 0, $pcm1$181$us = 0, $pcm1$2$us = 0;
 var $pcm1$2$us$lcssa = 0, $pcm2$082$us = 0, $pcm2$1$us = 0, $phase$088$us = 0, $s$087$us = 0, $sb$080$us = 0, $scevgep = 0, $scevgep109 = 0, $scevgep111 = 0, $sum = 0, $sum100 = 0, $sum101 = 0, $sum102 = 0, $sum103 = 0, $sum104 = 0, $sum105 = 0, $sum106 = 0, $sum94 = 0, $sum95 = 0, $sum96 = 0;
 var $sum97 = 0, $sum98 = 0, $sum99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nch|0)==(0);
 if ($0) {
  return;
 }
 $1 = ((($synth)) + 4096|0);
 $2 = ($ns|0)==(0);
 if ($2) {
  return;
 }
 $scevgep = ((($synth)) + 1504|0);
 $scevgep111 = ((($synth)) + 1472|0);
 $ch$089$us = 0;$indvars$iv$in = $scevgep;$indvars$iv113$in = $scevgep111;
 while(1) {
  $337 = (((($synth)) + 4108|0) + (($ch$089$us*4608)|0)|0);
  $338 = HEAP32[$1>>2]|0;
  $pcm1$086$us = $337;$phase$088$us = $338;$s$087$us = 0;
  while(1) {
   $6 = ((((($frame)) + 48|0) + (($ch$089$us*4608)|0)|0) + ($s$087$us<<7)|0);
   $7 = $phase$088$us >>> 1;
   $8 = $phase$088$us & 1;
   $9 = ((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0);
   $10 = ((((($synth) + ($ch$089$us<<11)|0)) + 1024|0) + ($8<<9)|0);
   _dct32($6,$7,$9,$10);
   $11 = $phase$088$us & -2;
   $12 = (($phase$088$us) + 15)|0;
   $13 = $12 & 14;
   $14 = $13 | 1;
   $15 = $8 ^ 1;
   $16 = ((((($synth) + ($ch$089$us<<11)|0)) + 1024|0) + ($15<<9)|0);
   $17 = (864 + ($14<<2)|0);
   $18 = ((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$17>>2]|0;
   $21 = Math_imul($20, $19)|0;
   $22 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $$sum$us = (($14) + 14)|0;
   $24 = (864 + ($$sum$us<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = Math_imul($25, $23)|0;
   $27 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $$sum1$us = (($14) + 12)|0;
   $29 = (864 + ($$sum1$us<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = Math_imul($30, $28)|0;
   $32 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $$sum2$us = (($14) + 10)|0;
   $34 = (864 + ($$sum2$us<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = Math_imul($35, $33)|0;
   $37 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $$sum3$us = (($14) + 8)|0;
   $39 = (864 + ($$sum3$us<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = Math_imul($40, $38)|0;
   $42 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 20|0);
   $43 = HEAP32[$42>>2]|0;
   $$sum4$us = (($14) + 6)|0;
   $44 = (864 + ($$sum4$us<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = Math_imul($45, $43)|0;
   $47 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $$sum5$us = (($14) + 4)|0;
   $49 = (864 + ($$sum5$us<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = Math_imul($50, $48)|0;
   $52 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $$sum6$us = (($14) + 2)|0;
   $54 = (864 + ($$sum6$us<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = Math_imul($55, $53)|0;
   $57 = (864 + ($11<<2)|0);
   $58 = HEAP32[$9>>2]|0;
   $59 = HEAP32[$57>>2]|0;
   $60 = Math_imul($59, $58)|0;
   $sum = (($26) + ($21))|0;
   $sum94 = (($sum) + ($31))|0;
   $sum95 = (($sum94) + ($36))|0;
   $sum96 = (($sum95) + ($41))|0;
   $sum97 = (($sum96) + ($46))|0;
   $sum98 = (($sum97) + ($51))|0;
   $sum99 = (($sum98) + ($56))|0;
   $61 = (($60) - ($sum99))|0;
   $62 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $$sum7$us = (($11) + 14)|0;
   $64 = (864 + ($$sum7$us<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = Math_imul($65, $63)|0;
   $67 = (($61) + ($66))|0;
   $68 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $$sum8$us = (($11) + 12)|0;
   $70 = (864 + ($$sum8$us<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = Math_imul($71, $69)|0;
   $73 = (($67) + ($72))|0;
   $74 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $$sum9$us = (($11) + 10)|0;
   $76 = (864 + ($$sum9$us<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = Math_imul($77, $75)|0;
   $79 = (($73) + ($78))|0;
   $80 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 16|0);
   $81 = HEAP32[$80>>2]|0;
   $$sum10$us = (($11) + 8)|0;
   $82 = (864 + ($$sum10$us<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = Math_imul($83, $81)|0;
   $85 = (($79) + ($84))|0;
   $86 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 20|0);
   $87 = HEAP32[$86>>2]|0;
   $$sum11$us = (($11) + 6)|0;
   $88 = (864 + ($$sum11$us<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = Math_imul($89, $87)|0;
   $91 = (($85) + ($90))|0;
   $92 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 24|0);
   $93 = HEAP32[$92>>2]|0;
   $$sum12$us = (($11) + 4)|0;
   $94 = (864 + ($$sum12$us<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = Math_imul($95, $93)|0;
   $97 = (($91) + ($96))|0;
   $98 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 28|0);
   $99 = HEAP32[$98>>2]|0;
   $$sum13$us = (($11) + 2)|0;
   $100 = (864 + ($$sum13$us<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = Math_imul($101, $99)|0;
   $103 = (($97) + ($102))|0;
   $104 = $103 >> 2;
   $105 = ((($pcm1$086$us)) + 4|0);
   HEAP32[$pcm1$086$us>>2] = $104;
   $106 = ((($pcm1$086$us)) + 60|0);
   $$sum35$us = (29 - ($14))|0;
   $$sum36$us = (27 - ($14))|0;
   $$sum37$us = (25 - ($14))|0;
   $$sum38$us = (23 - ($14))|0;
   $$sum39$us = (21 - ($14))|0;
   $$sum40$us = (19 - ($14))|0;
   $$sum41$us = (17 - ($14))|0;
   $107 = $13 ^ 14;
   $$sum43$us = (15 - ($11))|0;
   $$sum44$us = (17 - ($11))|0;
   $$sum45$us = (19 - ($11))|0;
   $$sum46$us = (21 - ($11))|0;
   $$sum47$us = (23 - ($11))|0;
   $$sum48$us = (25 - ($11))|0;
   $$sum49$us = (27 - ($11))|0;
   $$sum50$us = (29 - ($11))|0;
   $108 = $phase$088$us & 1;
   $109 = $108 ^ 1;
   $scevgep109 = (($indvars$iv$in) + ($109<<9)|0);
   $Dptr$085$us = 864;$fe$083$us = $9;$fo$084$us = $16;$pcm1$181$us = $105;$pcm2$082$us = $106;$sb$080$us = 1;
   while(1) {
    $162 = ((($fe$083$us)) + 32|0);
    $163 = ((($Dptr$085$us)) + 128|0);
    $164 = $sb$080$us & 1;
    $165 = ($164|0)==(0);
    if ($165) {
     $166 = (((($Dptr$085$us)) + 128|0) + ($14<<2)|0);
     $167 = HEAP32[$fo$084$us>>2]|0;
     $168 = HEAP32[$166>>2]|0;
     $169 = Math_imul($168, $167)|0;
     $170 = ((($fo$084$us)) + 4|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = (((($Dptr$085$us)) + 128|0) + ($$sum$us<<2)|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = Math_imul($173, $171)|0;
     $175 = ((($fo$084$us)) + 8|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (((($Dptr$085$us)) + 128|0) + ($$sum1$us<<2)|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = Math_imul($178, $176)|0;
     $180 = ((($fo$084$us)) + 12|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = (((($Dptr$085$us)) + 128|0) + ($$sum2$us<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = Math_imul($183, $181)|0;
     $185 = ((($fo$084$us)) + 16|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = (((($Dptr$085$us)) + 128|0) + ($$sum3$us<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = Math_imul($188, $186)|0;
     $190 = ((($fo$084$us)) + 20|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (((($Dptr$085$us)) + 128|0) + ($$sum4$us<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = Math_imul($193, $191)|0;
     $195 = ((($fo$084$us)) + 24|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = (((($Dptr$085$us)) + 128|0) + ($$sum5$us<<2)|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = Math_imul($198, $196)|0;
     $200 = ((($fo$084$us)) + 28|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (((($Dptr$085$us)) + 128|0) + ($$sum6$us<<2)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = Math_imul($203, $201)|0;
     $205 = (((($Dptr$085$us)) + 128|0) + ($11<<2)|0);
     $206 = ((($fe$083$us)) + 60|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (((($Dptr$085$us)) + 128|0) + ($$sum13$us<<2)|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = Math_imul($209, $207)|0;
     $sum100 = (($174) + ($169))|0;
     $sum101 = (($sum100) + ($179))|0;
     $sum102 = (($sum101) + ($184))|0;
     $sum103 = (($sum102) + ($189))|0;
     $sum104 = (($sum103) + ($194))|0;
     $sum105 = (($sum104) + ($199))|0;
     $sum106 = (($sum105) + ($204))|0;
     $211 = (($210) - ($sum106))|0;
     $212 = ((($fe$083$us)) + 56|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = (((($Dptr$085$us)) + 128|0) + ($$sum12$us<<2)|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = Math_imul($215, $213)|0;
     $217 = (($211) + ($216))|0;
     $218 = ((($fe$083$us)) + 52|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = (((($Dptr$085$us)) + 128|0) + ($$sum11$us<<2)|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = Math_imul($221, $219)|0;
     $223 = (($217) + ($222))|0;
     $224 = ((($fe$083$us)) + 48|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = (((($Dptr$085$us)) + 128|0) + ($$sum10$us<<2)|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = Math_imul($227, $225)|0;
     $229 = (($223) + ($228))|0;
     $230 = ((($fe$083$us)) + 44|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = (((($Dptr$085$us)) + 128|0) + ($$sum9$us<<2)|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = Math_imul($233, $231)|0;
     $235 = (($229) + ($234))|0;
     $236 = ((($fe$083$us)) + 40|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = (((($Dptr$085$us)) + 128|0) + ($$sum8$us<<2)|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = Math_imul($239, $237)|0;
     $241 = (($235) + ($240))|0;
     $242 = ((($fe$083$us)) + 36|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = (((($Dptr$085$us)) + 128|0) + ($$sum7$us<<2)|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = Math_imul($245, $243)|0;
     $247 = (($241) + ($246))|0;
     $248 = HEAP32[$162>>2]|0;
     $249 = HEAP32[$205>>2]|0;
     $250 = Math_imul($249, $248)|0;
     $251 = (($247) + ($250))|0;
     $252 = $251 >> 2;
     $253 = ((($pcm1$181$us)) + 4|0);
     HEAP32[$pcm1$181$us>>2] = $252;
     $254 = HEAP32[$200>>2]|0;
     $255 = (((($Dptr$085$us)) + 128|0) + ($$sum35$us<<2)|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = Math_imul($256, $254)|0;
     $258 = HEAP32[$195>>2]|0;
     $259 = (((($Dptr$085$us)) + 128|0) + ($$sum36$us<<2)|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = Math_imul($260, $258)|0;
     $262 = (($261) + ($257))|0;
     $263 = HEAP32[$190>>2]|0;
     $264 = (((($Dptr$085$us)) + 128|0) + ($$sum37$us<<2)|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = Math_imul($265, $263)|0;
     $267 = (($262) + ($266))|0;
     $268 = HEAP32[$185>>2]|0;
     $269 = (((($Dptr$085$us)) + 128|0) + ($$sum38$us<<2)|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = Math_imul($270, $268)|0;
     $272 = (($267) + ($271))|0;
     $273 = HEAP32[$180>>2]|0;
     $274 = (((($Dptr$085$us)) + 128|0) + ($$sum39$us<<2)|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = Math_imul($275, $273)|0;
     $277 = (($272) + ($276))|0;
     $278 = HEAP32[$175>>2]|0;
     $279 = (((($Dptr$085$us)) + 128|0) + ($$sum40$us<<2)|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = Math_imul($280, $278)|0;
     $282 = (($277) + ($281))|0;
     $283 = HEAP32[$170>>2]|0;
     $284 = (((($Dptr$085$us)) + 128|0) + ($$sum41$us<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = Math_imul($285, $283)|0;
     $287 = (($282) + ($286))|0;
     $288 = HEAP32[$fo$084$us>>2]|0;
     $289 = (((($Dptr$085$us)) + 128|0) + ($107<<2)|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = Math_imul($290, $288)|0;
     $292 = (($287) + ($291))|0;
     $293 = HEAP32[$162>>2]|0;
     $294 = (((($Dptr$085$us)) + 128|0) + ($$sum43$us<<2)|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = Math_imul($295, $293)|0;
     $297 = (($292) + ($296))|0;
     $298 = HEAP32[$242>>2]|0;
     $299 = (((($Dptr$085$us)) + 128|0) + ($$sum44$us<<2)|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = Math_imul($300, $298)|0;
     $302 = (($297) + ($301))|0;
     $303 = HEAP32[$236>>2]|0;
     $304 = (((($Dptr$085$us)) + 128|0) + ($$sum45$us<<2)|0);
     $305 = HEAP32[$304>>2]|0;
     $306 = Math_imul($305, $303)|0;
     $307 = (($302) + ($306))|0;
     $308 = HEAP32[$230>>2]|0;
     $309 = (((($Dptr$085$us)) + 128|0) + ($$sum46$us<<2)|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = Math_imul($310, $308)|0;
     $312 = (($307) + ($311))|0;
     $313 = HEAP32[$224>>2]|0;
     $314 = (((($Dptr$085$us)) + 128|0) + ($$sum47$us<<2)|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = Math_imul($315, $313)|0;
     $317 = (($312) + ($316))|0;
     $318 = HEAP32[$218>>2]|0;
     $319 = (((($Dptr$085$us)) + 128|0) + ($$sum48$us<<2)|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = Math_imul($320, $318)|0;
     $322 = (($317) + ($321))|0;
     $323 = HEAP32[$212>>2]|0;
     $324 = (((($Dptr$085$us)) + 128|0) + ($$sum49$us<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = Math_imul($325, $323)|0;
     $327 = (($322) + ($326))|0;
     $328 = HEAP32[$206>>2]|0;
     $329 = (((($Dptr$085$us)) + 128|0) + ($$sum50$us<<2)|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = Math_imul($330, $328)|0;
     $332 = (($327) + ($331))|0;
     $333 = $332 >> 2;
     $334 = ((($pcm2$082$us)) + -4|0);
     HEAP32[$pcm2$082$us>>2] = $333;
     $pcm1$2$us = $253;$pcm2$1$us = $334;
    } else {
     $pcm1$2$us = $pcm1$181$us;$pcm2$1$us = $pcm2$082$us;
    }
    $335 = ((($fo$084$us)) + 32|0);
    $336 = (($sb$080$us) + 1)|0;
    $exitcond = ($336|0)==(16);
    if ($exitcond) {
     $pcm1$2$us$lcssa = $pcm1$2$us;
     break;
    } else {
     $Dptr$085$us = $163;$fe$083$us = $162;$fo$084$us = $335;$pcm1$181$us = $pcm1$2$us;$pcm2$082$us = $pcm2$1$us;$sb$080$us = $336;
    }
   }
   $110 = ((((2656)) + 256|0) + ($14<<2)|0);
   $111 = HEAP32[$scevgep109>>2]|0;
   $112 = HEAP32[$110>>2]|0;
   $113 = Math_imul($112, $111)|0;
   $114 = (((($indvars$iv113$in) + ($109<<9)|0)) + 36|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((((2656)) + 256|0) + ($$sum$us<<2)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = Math_imul($117, $115)|0;
   $119 = (($113) + ($118))|0;
   $120 = (((($indvars$iv113$in) + ($109<<9)|0)) + 40|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ((((2656)) + 256|0) + ($$sum1$us<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = Math_imul($123, $121)|0;
   $125 = (($119) + ($124))|0;
   $126 = (((($indvars$iv113$in) + ($109<<9)|0)) + 44|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ((((2656)) + 256|0) + ($$sum2$us<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = Math_imul($129, $127)|0;
   $131 = (($125) + ($130))|0;
   $132 = (((($indvars$iv113$in) + ($109<<9)|0)) + 48|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ((((2656)) + 256|0) + ($$sum3$us<<2)|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = Math_imul($135, $133)|0;
   $137 = (($131) + ($136))|0;
   $138 = (((($indvars$iv113$in) + ($109<<9)|0)) + 52|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((((2656)) + 256|0) + ($$sum4$us<<2)|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = Math_imul($141, $139)|0;
   $143 = (($137) + ($142))|0;
   $144 = (((($indvars$iv113$in) + ($109<<9)|0)) + 56|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ((((2656)) + 256|0) + ($$sum5$us<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = Math_imul($147, $145)|0;
   $149 = (($143) + ($148))|0;
   $150 = (((($indvars$iv113$in) + ($109<<9)|0)) + 60|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ((((2656)) + 256|0) + ($$sum6$us<<2)|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = Math_imul($153, $151)|0;
   $155 = (($149) + ($154))|0;
   $156 = (0 - ($155))|0;
   $157 = $156 >> 2;
   HEAP32[$pcm1$2$us$lcssa>>2] = $157;
   $158 = ((($pcm1$2$us$lcssa)) + 32|0);
   $159 = (($phase$088$us) + 1)|0;
   $160 = $159 & 15;
   $161 = (($s$087$us) + 1)|0;
   $exitcond117 = ($161|0)==($ns|0);
   if ($exitcond117) {
    break;
   } else {
    $pcm1$086$us = $158;$phase$088$us = $160;$s$087$us = $161;
   }
  }
  $3 = (($ch$089$us) + 1)|0;
  $4 = ((($indvars$iv$in)) + 2048|0);
  $5 = ((($indvars$iv113$in)) + 2048|0);
  $exitcond118 = ($3|0)==($nch|0);
  if ($exitcond118) {
   break;
  } else {
   $ch$089$us = $3;$indvars$iv$in = $4;$indvars$iv113$in = $5;
  }
 }
 return;
}
function _synth_full($synth,$frame,$nch,$ns) {
 $synth = $synth|0;
 $frame = $frame|0;
 $nch = $nch|0;
 $ns = $ns|0;
 var $$sum$us = 0, $$sum1$us = 0, $$sum10$us = 0, $$sum11$us = 0, $$sum12$us = 0, $$sum13$us = 0, $$sum2$us = 0, $$sum3$us = 0, $$sum35$us = 0, $$sum36$us = 0, $$sum37$us = 0, $$sum38$us = 0, $$sum39$us = 0, $$sum4$us = 0, $$sum40$us = 0, $$sum41$us = 0, $$sum42$us = 0, $$sum43$us = 0, $$sum44$us = 0, $$sum45$us = 0;
 var $$sum46$us = 0, $$sum47$us = 0, $$sum48$us = 0, $$sum49$us = 0, $$sum5$us = 0, $$sum6$us = 0, $$sum7$us = 0, $$sum8$us = 0, $$sum9$us = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Dptr$085$us = 0, $ch$090$us = 0, $exitcond = 0, $exitcond121 = 0, $exitcond122 = 0, $fe$083$us = 0, $fo$084$us = 0, $indvars$iv$in = 0, $indvars$iv116$in = 0, $pcm1$087$us = 0, $pcm1$087$us$pn = 0, $pcm1$186$us = 0, $pcm2$082$us = 0, $phase$089$us = 0, $s$088$us = 0, $sb$081$us = 0;
 var $scevgep = 0, $scevgep109 = 0, $scevgep112 = 0, $scevgep114 = 0, $sum = 0, $sum100 = 0, $sum101 = 0, $sum102 = 0, $sum103 = 0, $sum104 = 0, $sum105 = 0, $sum106 = 0, $sum107 = 0, $sum95 = 0, $sum96 = 0, $sum97 = 0, $sum98 = 0, $sum99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nch|0)==(0);
 if ($0) {
  return;
 }
 $1 = ((($synth)) + 4096|0);
 $2 = ($ns|0)==(0);
 if ($2) {
  return;
 }
 $scevgep109 = ((($synth)) + 1504|0);
 $scevgep114 = ((($synth)) + 1472|0);
 $ch$090$us = 0;$indvars$iv$in = $scevgep109;$indvars$iv116$in = $scevgep114;
 while(1) {
  $333 = (((($synth)) + 4108|0) + (($ch$090$us*4608)|0)|0);
  $334 = HEAP32[$1>>2]|0;
  $pcm1$087$us = $333;$phase$089$us = $334;$s$088$us = 0;
  while(1) {
   $6 = ((((($frame)) + 48|0) + (($ch$090$us*4608)|0)|0) + ($s$088$us<<7)|0);
   $7 = $phase$089$us >>> 1;
   $8 = $phase$089$us & 1;
   $9 = ((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0);
   $10 = ((((($synth) + ($ch$090$us<<11)|0)) + 1024|0) + ($8<<9)|0);
   _dct32($6,$7,$9,$10);
   $11 = $phase$089$us & -2;
   $12 = (($phase$089$us) + 15)|0;
   $13 = $12 & 14;
   $14 = $13 | 1;
   $15 = $8 ^ 1;
   $16 = ((((($synth) + ($ch$090$us<<11)|0)) + 1024|0) + ($15<<9)|0);
   $17 = (864 + ($14<<2)|0);
   $18 = ((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$17>>2]|0;
   $21 = Math_imul($20, $19)|0;
   $22 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $$sum$us = (($14) + 14)|0;
   $24 = (864 + ($$sum$us<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = Math_imul($25, $23)|0;
   $27 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $$sum1$us = (($14) + 12)|0;
   $29 = (864 + ($$sum1$us<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = Math_imul($30, $28)|0;
   $32 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $$sum2$us = (($14) + 10)|0;
   $34 = (864 + ($$sum2$us<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = Math_imul($35, $33)|0;
   $37 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $$sum3$us = (($14) + 8)|0;
   $39 = (864 + ($$sum3$us<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = Math_imul($40, $38)|0;
   $42 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 20|0);
   $43 = HEAP32[$42>>2]|0;
   $$sum4$us = (($14) + 6)|0;
   $44 = (864 + ($$sum4$us<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = Math_imul($45, $43)|0;
   $47 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $$sum5$us = (($14) + 4)|0;
   $49 = (864 + ($$sum5$us<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = Math_imul($50, $48)|0;
   $52 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $$sum6$us = (($14) + 2)|0;
   $54 = (864 + ($$sum6$us<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = Math_imul($55, $53)|0;
   $57 = (864 + ($11<<2)|0);
   $58 = HEAP32[$9>>2]|0;
   $59 = HEAP32[$57>>2]|0;
   $60 = Math_imul($59, $58)|0;
   $sum = (($26) + ($21))|0;
   $sum95 = (($sum) + ($31))|0;
   $sum96 = (($sum95) + ($36))|0;
   $sum97 = (($sum96) + ($41))|0;
   $sum98 = (($sum97) + ($46))|0;
   $sum99 = (($sum98) + ($51))|0;
   $sum100 = (($sum99) + ($56))|0;
   $61 = (($60) - ($sum100))|0;
   $62 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $$sum7$us = (($11) + 14)|0;
   $64 = (864 + ($$sum7$us<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = Math_imul($65, $63)|0;
   $67 = (($61) + ($66))|0;
   $68 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $$sum8$us = (($11) + 12)|0;
   $70 = (864 + ($$sum8$us<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = Math_imul($71, $69)|0;
   $73 = (($67) + ($72))|0;
   $74 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $$sum9$us = (($11) + 10)|0;
   $76 = (864 + ($$sum9$us<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = Math_imul($77, $75)|0;
   $79 = (($73) + ($78))|0;
   $80 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 16|0);
   $81 = HEAP32[$80>>2]|0;
   $$sum10$us = (($11) + 8)|0;
   $82 = (864 + ($$sum10$us<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = Math_imul($83, $81)|0;
   $85 = (($79) + ($84))|0;
   $86 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 20|0);
   $87 = HEAP32[$86>>2]|0;
   $$sum11$us = (($11) + 6)|0;
   $88 = (864 + ($$sum11$us<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = Math_imul($89, $87)|0;
   $91 = (($85) + ($90))|0;
   $92 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 24|0);
   $93 = HEAP32[$92>>2]|0;
   $$sum12$us = (($11) + 4)|0;
   $94 = (864 + ($$sum12$us<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = Math_imul($95, $93)|0;
   $97 = (($91) + ($96))|0;
   $98 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 28|0);
   $99 = HEAP32[$98>>2]|0;
   $$sum13$us = (($11) + 2)|0;
   $100 = (864 + ($$sum13$us<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = Math_imul($101, $99)|0;
   $103 = (($97) + ($102))|0;
   $104 = $103 >> 2;
   HEAP32[$pcm1$087$us>>2] = $104;
   $105 = ((($pcm1$087$us)) + 124|0);
   $$sum35$us = (15 - ($11))|0;
   $$sum36$us = (17 - ($11))|0;
   $$sum37$us = (19 - ($11))|0;
   $$sum38$us = (21 - ($11))|0;
   $$sum39$us = (23 - ($11))|0;
   $$sum40$us = (25 - ($11))|0;
   $$sum41$us = (27 - ($11))|0;
   $$sum42$us = (29 - ($11))|0;
   $$sum43$us = (29 - ($14))|0;
   $$sum44$us = (27 - ($14))|0;
   $$sum45$us = (25 - ($14))|0;
   $$sum46$us = (23 - ($14))|0;
   $$sum47$us = (21 - ($14))|0;
   $$sum48$us = (19 - ($14))|0;
   $$sum49$us = (17 - ($14))|0;
   $106 = $13 ^ 14;
   $107 = $phase$089$us & 1;
   $108 = $107 ^ 1;
   $scevgep112 = (($indvars$iv$in) + ($108<<9)|0);
   $Dptr$085$us = 864;$fe$083$us = $9;$fo$084$us = $16;$pcm1$087$us$pn = $pcm1$087$us;$pcm2$082$us = $105;$sb$081$us = 1;
   while(1) {
    $pcm1$186$us = ((($pcm1$087$us$pn)) + 4|0);
    $161 = ((($fe$083$us)) + 32|0);
    $162 = ((($Dptr$085$us)) + 128|0);
    $163 = (((($Dptr$085$us)) + 128|0) + ($14<<2)|0);
    $164 = HEAP32[$fo$084$us>>2]|0;
    $165 = HEAP32[$163>>2]|0;
    $166 = Math_imul($165, $164)|0;
    $167 = ((($fo$084$us)) + 4|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (((($Dptr$085$us)) + 128|0) + ($$sum$us<<2)|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = Math_imul($170, $168)|0;
    $172 = ((($fo$084$us)) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = (((($Dptr$085$us)) + 128|0) + ($$sum1$us<<2)|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = Math_imul($175, $173)|0;
    $177 = ((($fo$084$us)) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (((($Dptr$085$us)) + 128|0) + ($$sum2$us<<2)|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = Math_imul($180, $178)|0;
    $182 = ((($fo$084$us)) + 16|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (((($Dptr$085$us)) + 128|0) + ($$sum3$us<<2)|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = Math_imul($185, $183)|0;
    $187 = ((($fo$084$us)) + 20|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = (((($Dptr$085$us)) + 128|0) + ($$sum4$us<<2)|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = Math_imul($190, $188)|0;
    $192 = ((($fo$084$us)) + 24|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (((($Dptr$085$us)) + 128|0) + ($$sum5$us<<2)|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = Math_imul($195, $193)|0;
    $197 = ((($fo$084$us)) + 28|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = (((($Dptr$085$us)) + 128|0) + ($$sum6$us<<2)|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = Math_imul($200, $198)|0;
    $202 = (((($Dptr$085$us)) + 128|0) + ($11<<2)|0);
    $203 = ((($fe$083$us)) + 60|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = (((($Dptr$085$us)) + 128|0) + ($$sum13$us<<2)|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = Math_imul($206, $204)|0;
    $sum101 = (($171) + ($166))|0;
    $sum102 = (($sum101) + ($176))|0;
    $sum103 = (($sum102) + ($181))|0;
    $sum104 = (($sum103) + ($186))|0;
    $sum105 = (($sum104) + ($191))|0;
    $sum106 = (($sum105) + ($196))|0;
    $sum107 = (($sum106) + ($201))|0;
    $208 = (($207) - ($sum107))|0;
    $209 = ((($fe$083$us)) + 56|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = (((($Dptr$085$us)) + 128|0) + ($$sum12$us<<2)|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = Math_imul($212, $210)|0;
    $214 = (($208) + ($213))|0;
    $215 = ((($fe$083$us)) + 52|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = (((($Dptr$085$us)) + 128|0) + ($$sum11$us<<2)|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = Math_imul($218, $216)|0;
    $220 = (($214) + ($219))|0;
    $221 = ((($fe$083$us)) + 48|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = (((($Dptr$085$us)) + 128|0) + ($$sum10$us<<2)|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = Math_imul($224, $222)|0;
    $226 = (($220) + ($225))|0;
    $227 = ((($fe$083$us)) + 44|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = (((($Dptr$085$us)) + 128|0) + ($$sum9$us<<2)|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = Math_imul($230, $228)|0;
    $232 = (($226) + ($231))|0;
    $233 = ((($fe$083$us)) + 40|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (((($Dptr$085$us)) + 128|0) + ($$sum8$us<<2)|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = Math_imul($236, $234)|0;
    $238 = (($232) + ($237))|0;
    $239 = ((($fe$083$us)) + 36|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = (((($Dptr$085$us)) + 128|0) + ($$sum7$us<<2)|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = Math_imul($242, $240)|0;
    $244 = (($238) + ($243))|0;
    $245 = HEAP32[$161>>2]|0;
    $246 = HEAP32[$202>>2]|0;
    $247 = Math_imul($246, $245)|0;
    $248 = (($244) + ($247))|0;
    $249 = $248 >> 2;
    HEAP32[$pcm1$186$us>>2] = $249;
    $250 = HEAP32[$161>>2]|0;
    $251 = (((($Dptr$085$us)) + 128|0) + ($$sum35$us<<2)|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = Math_imul($252, $250)|0;
    $254 = HEAP32[$239>>2]|0;
    $255 = (((($Dptr$085$us)) + 128|0) + ($$sum36$us<<2)|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = Math_imul($256, $254)|0;
    $258 = (($257) + ($253))|0;
    $259 = HEAP32[$233>>2]|0;
    $260 = (((($Dptr$085$us)) + 128|0) + ($$sum37$us<<2)|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = Math_imul($261, $259)|0;
    $263 = (($258) + ($262))|0;
    $264 = HEAP32[$227>>2]|0;
    $265 = (((($Dptr$085$us)) + 128|0) + ($$sum38$us<<2)|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = Math_imul($266, $264)|0;
    $268 = (($263) + ($267))|0;
    $269 = HEAP32[$221>>2]|0;
    $270 = (((($Dptr$085$us)) + 128|0) + ($$sum39$us<<2)|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = Math_imul($271, $269)|0;
    $273 = (($268) + ($272))|0;
    $274 = HEAP32[$215>>2]|0;
    $275 = (((($Dptr$085$us)) + 128|0) + ($$sum40$us<<2)|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = Math_imul($276, $274)|0;
    $278 = (($273) + ($277))|0;
    $279 = HEAP32[$209>>2]|0;
    $280 = (((($Dptr$085$us)) + 128|0) + ($$sum41$us<<2)|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = Math_imul($281, $279)|0;
    $283 = (($278) + ($282))|0;
    $284 = HEAP32[$203>>2]|0;
    $285 = (((($Dptr$085$us)) + 128|0) + ($$sum42$us<<2)|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = Math_imul($286, $284)|0;
    $288 = (($283) + ($287))|0;
    $289 = HEAP32[$197>>2]|0;
    $290 = (((($Dptr$085$us)) + 128|0) + ($$sum43$us<<2)|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = Math_imul($291, $289)|0;
    $293 = (($288) + ($292))|0;
    $294 = HEAP32[$192>>2]|0;
    $295 = (((($Dptr$085$us)) + 128|0) + ($$sum44$us<<2)|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = Math_imul($296, $294)|0;
    $298 = (($293) + ($297))|0;
    $299 = HEAP32[$187>>2]|0;
    $300 = (((($Dptr$085$us)) + 128|0) + ($$sum45$us<<2)|0);
    $301 = HEAP32[$300>>2]|0;
    $302 = Math_imul($301, $299)|0;
    $303 = (($298) + ($302))|0;
    $304 = HEAP32[$182>>2]|0;
    $305 = (((($Dptr$085$us)) + 128|0) + ($$sum46$us<<2)|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = Math_imul($306, $304)|0;
    $308 = (($303) + ($307))|0;
    $309 = HEAP32[$177>>2]|0;
    $310 = (((($Dptr$085$us)) + 128|0) + ($$sum47$us<<2)|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = Math_imul($311, $309)|0;
    $313 = (($308) + ($312))|0;
    $314 = HEAP32[$172>>2]|0;
    $315 = (((($Dptr$085$us)) + 128|0) + ($$sum48$us<<2)|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = Math_imul($316, $314)|0;
    $318 = (($313) + ($317))|0;
    $319 = HEAP32[$167>>2]|0;
    $320 = (((($Dptr$085$us)) + 128|0) + ($$sum49$us<<2)|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = Math_imul($321, $319)|0;
    $323 = (($318) + ($322))|0;
    $324 = HEAP32[$fo$084$us>>2]|0;
    $325 = (((($Dptr$085$us)) + 128|0) + ($106<<2)|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = Math_imul($326, $324)|0;
    $328 = (($323) + ($327))|0;
    $329 = $328 >> 2;
    $330 = ((($pcm2$082$us)) + -4|0);
    HEAP32[$pcm2$082$us>>2] = $329;
    $331 = ((($fo$084$us)) + 32|0);
    $332 = (($sb$081$us) + 1)|0;
    $exitcond = ($332|0)==(16);
    if ($exitcond) {
     break;
    } else {
     $Dptr$085$us = $162;$fe$083$us = $161;$fo$084$us = $331;$pcm1$087$us$pn = $pcm1$186$us;$pcm2$082$us = $330;$sb$081$us = $332;
    }
   }
   $scevgep = ((($pcm1$087$us)) + 64|0);
   $109 = ((((2656)) + 256|0) + ($14<<2)|0);
   $110 = HEAP32[$scevgep112>>2]|0;
   $111 = HEAP32[$109>>2]|0;
   $112 = Math_imul($111, $110)|0;
   $113 = (((($indvars$iv116$in) + ($108<<9)|0)) + 36|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ((((2656)) + 256|0) + ($$sum$us<<2)|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = Math_imul($116, $114)|0;
   $118 = (($112) + ($117))|0;
   $119 = (((($indvars$iv116$in) + ($108<<9)|0)) + 40|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ((((2656)) + 256|0) + ($$sum1$us<<2)|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = Math_imul($122, $120)|0;
   $124 = (($118) + ($123))|0;
   $125 = (((($indvars$iv116$in) + ($108<<9)|0)) + 44|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ((((2656)) + 256|0) + ($$sum2$us<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = Math_imul($128, $126)|0;
   $130 = (($124) + ($129))|0;
   $131 = (((($indvars$iv116$in) + ($108<<9)|0)) + 48|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((((2656)) + 256|0) + ($$sum3$us<<2)|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = Math_imul($134, $132)|0;
   $136 = (($130) + ($135))|0;
   $137 = (((($indvars$iv116$in) + ($108<<9)|0)) + 52|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ((((2656)) + 256|0) + ($$sum4$us<<2)|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = Math_imul($140, $138)|0;
   $142 = (($136) + ($141))|0;
   $143 = (((($indvars$iv116$in) + ($108<<9)|0)) + 56|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ((((2656)) + 256|0) + ($$sum5$us<<2)|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = Math_imul($146, $144)|0;
   $148 = (($142) + ($147))|0;
   $149 = (((($indvars$iv116$in) + ($108<<9)|0)) + 60|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = ((((2656)) + 256|0) + ($$sum6$us<<2)|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = Math_imul($152, $150)|0;
   $154 = (($148) + ($153))|0;
   $155 = (0 - ($154))|0;
   $156 = $155 >> 2;
   HEAP32[$scevgep>>2] = $156;
   $157 = ((($pcm1$087$us)) + 128|0);
   $158 = (($phase$089$us) + 1)|0;
   $159 = $158 & 15;
   $160 = (($s$088$us) + 1)|0;
   $exitcond121 = ($160|0)==($ns|0);
   if ($exitcond121) {
    break;
   } else {
    $pcm1$087$us = $157;$phase$089$us = $159;$s$088$us = $160;
   }
  }
  $3 = (($ch$090$us) + 1)|0;
  $4 = ((($indvars$iv$in)) + 2048|0);
  $5 = ((($indvars$iv116$in)) + 2048|0);
  $exitcond122 = ($3|0)==($nch|0);
  if ($exitcond122) {
   break;
  } else {
   $ch$090$us = $3;$indvars$iv$in = $4;$indvars$iv116$in = $5;
  }
 }
 return;
}
function _dct32($in,$slot,$lo,$hi) {
 $in = $in|0;
 $slot = $slot|0;
 $lo = $lo|0;
 $hi = $hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in>>2]|0;
 $1 = ((($in)) + 124|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0))|0;
 $4 = (($0) + 2048)|0;
 $5 = (($4) - ($2))|0;
 $6 = $5 >> 12;
 $7 = ($6*4091)|0;
 $8 = ((($in)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($in)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9))|0;
 $13 = (($9) + 2048)|0;
 $14 = (($13) - ($11))|0;
 $15 = $14 >> 12;
 $16 = ($15*201)|0;
 $17 = (($16) + ($7))|0;
 $18 = (($7) + 2048)|0;
 $19 = (($18) - ($16))|0;
 $20 = $19 >> 12;
 $21 = ($20*4076)|0;
 $22 = (($12) + ($3))|0;
 $23 = (($3) + 2048)|0;
 $24 = (($23) - ($12))|0;
 $25 = $24 >> 12;
 $26 = ($25*4076)|0;
 $27 = ((($in)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($in)) + 96|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($28))|0;
 $32 = (($28) + 2048)|0;
 $33 = (($32) - ($30))|0;
 $34 = $33 >> 12;
 $35 = ($34*3035)|0;
 $36 = ((($in)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($in)) + 92|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($37))|0;
 $41 = (($37) + 2048)|0;
 $42 = (($41) - ($39))|0;
 $43 = $42 >> 12;
 $44 = ($43*2751)|0;
 $45 = (($44) + ($35))|0;
 $46 = (($35) + 2048)|0;
 $47 = (($46) - ($44))|0;
 $48 = $47 >> 12;
 $49 = ($48*401)|0;
 $50 = (($40) + ($31))|0;
 $51 = (($31) + 2048)|0;
 $52 = (($51) - ($40))|0;
 $53 = $52 >> 12;
 $54 = ($53*401)|0;
 $55 = ((($in)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($in)) + 112|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + ($56))|0;
 $60 = (($56) + 2048)|0;
 $61 = (($60) - ($58))|0;
 $62 = $61 >> 12;
 $63 = ($62*3857)|0;
 $64 = ((($in)) + 48|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($in)) + 76|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + ($65))|0;
 $69 = (($65) + 2048)|0;
 $70 = (($69) - ($67))|0;
 $71 = $70 >> 12;
 $72 = ($71*1380)|0;
 $73 = (($72) + ($63))|0;
 $74 = (($63) + 2048)|0;
 $75 = (($74) - ($72))|0;
 $76 = $75 >> 12;
 $77 = ($76*3166)|0;
 $78 = (($68) + ($59))|0;
 $79 = (($59) + 2048)|0;
 $80 = (($79) - ($68))|0;
 $81 = $80 >> 12;
 $82 = ($81*3166)|0;
 $83 = ((($in)) + 16|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($in)) + 108|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + ($84))|0;
 $88 = (($84) + 2048)|0;
 $89 = (($88) - ($86))|0;
 $90 = $89 >> 12;
 $91 = ($90*3703)|0;
 $92 = ((($in)) + 44|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($in)) + 80|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + ($93))|0;
 $97 = (($93) + 2048)|0;
 $98 = (($97) - ($95))|0;
 $99 = $98 >> 12;
 $100 = ($99*1751)|0;
 $101 = (($100) + ($91))|0;
 $102 = (($91) + 2048)|0;
 $103 = (($102) - ($100))|0;
 $104 = $103 >> 12;
 $105 = ($104*2598)|0;
 $106 = (($96) + ($87))|0;
 $107 = (($87) + 2048)|0;
 $108 = (($107) - ($96))|0;
 $109 = $108 >> 12;
 $110 = ($109*2598)|0;
 $111 = ((($in)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ((($in)) + 120|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (($114) + ($112))|0;
 $116 = (($112) + 2048)|0;
 $117 = (($116) - ($114))|0;
 $118 = $117 >> 12;
 $119 = ($118*4052)|0;
 $120 = ((($in)) + 56|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ((($in)) + 68|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (($123) + ($121))|0;
 $125 = (($121) + 2048)|0;
 $126 = (($125) - ($123))|0;
 $127 = $126 >> 12;
 $128 = ($127*601)|0;
 $129 = (($128) + ($119))|0;
 $130 = (($119) + 2048)|0;
 $131 = (($130) - ($128))|0;
 $132 = $131 >> 12;
 $133 = ($132*3920)|0;
 $134 = (($124) + ($115))|0;
 $135 = (($115) + 2048)|0;
 $136 = (($135) - ($124))|0;
 $137 = $136 >> 12;
 $138 = ($137*3920)|0;
 $139 = ((($in)) + 24|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ((($in)) + 100|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (($142) + ($140))|0;
 $144 = (($140) + 2048)|0;
 $145 = (($144) - ($142))|0;
 $146 = $145 >> 12;
 $147 = ($146*3290)|0;
 $148 = ((($in)) + 36|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ((($in)) + 88|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($151) + ($149))|0;
 $153 = (($149) + 2048)|0;
 $154 = (($153) - ($151))|0;
 $155 = $154 >> 12;
 $156 = ($155*2440)|0;
 $157 = (($156) + ($147))|0;
 $158 = (($147) + 2048)|0;
 $159 = (($158) - ($156))|0;
 $160 = $159 >> 12;
 $161 = ($160*1189)|0;
 $162 = (($152) + ($143))|0;
 $163 = (($143) + 2048)|0;
 $164 = (($163) - ($152))|0;
 $165 = $164 >> 12;
 $166 = ($165*1189)|0;
 $167 = ((($in)) + 8|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ((($in)) + 116|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = (($170) + ($168))|0;
 $172 = (($168) + 2048)|0;
 $173 = (($172) - ($170))|0;
 $174 = $173 >> 12;
 $175 = ($174*3973)|0;
 $176 = ((($in)) + 52|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ((($in)) + 72|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = (($179) + ($177))|0;
 $181 = (($177) + 2048)|0;
 $182 = (($181) - ($179))|0;
 $183 = $182 >> 12;
 $184 = ($183*995)|0;
 $185 = (($184) + ($175))|0;
 $186 = (($175) + 2048)|0;
 $187 = (($186) - ($184))|0;
 $188 = $187 >> 12;
 $189 = ($188*3612)|0;
 $190 = (($180) + ($171))|0;
 $191 = (($171) + 2048)|0;
 $192 = (($191) - ($180))|0;
 $193 = $192 >> 12;
 $194 = ($193*3612)|0;
 $195 = ((($in)) + 20|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = ((($in)) + 104|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = (($198) + ($196))|0;
 $200 = (($196) + 2048)|0;
 $201 = (($200) - ($198))|0;
 $202 = $201 >> 12;
 $203 = ($202*3513)|0;
 $204 = ((($in)) + 40|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ((($in)) + 84|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = (($207) + ($205))|0;
 $209 = (($205) + 2048)|0;
 $210 = (($209) - ($207))|0;
 $211 = $210 >> 12;
 $212 = ($211*2106)|0;
 $213 = (($212) + ($203))|0;
 $214 = (($203) + 2048)|0;
 $215 = (($214) - ($212))|0;
 $216 = $215 >> 12;
 $217 = ($216*1931)|0;
 $218 = (($208) + ($199))|0;
 $219 = (($199) + 2048)|0;
 $220 = (($219) - ($208))|0;
 $221 = $220 >> 12;
 $222 = ($221*1931)|0;
 $223 = (($50) + ($22))|0;
 $224 = (($22) + 2048)|0;
 $225 = (($224) - ($50))|0;
 $226 = $225 >> 12;
 $227 = ($226*4017)|0;
 $228 = (($106) + ($78))|0;
 $229 = (($78) + 2048)|0;
 $230 = (($229) - ($106))|0;
 $231 = $230 >> 12;
 $232 = ($231*799)|0;
 $233 = (($162) + ($134))|0;
 $234 = (($134) + 2048)|0;
 $235 = (($234) - ($162))|0;
 $236 = $235 >> 12;
 $237 = ($236*3406)|0;
 $238 = (($218) + ($190))|0;
 $239 = (($190) + 2048)|0;
 $240 = (($239) - ($218))|0;
 $241 = $240 >> 12;
 $242 = ($241*2276)|0;
 $243 = (($45) + ($17))|0;
 $244 = (($17) + 2048)|0;
 $245 = (($244) - ($45))|0;
 $246 = $245 >> 12;
 $247 = ($246*4017)|0;
 $248 = (($101) + ($73))|0;
 $249 = (($73) + 2048)|0;
 $250 = (($249) - ($101))|0;
 $251 = $250 >> 12;
 $252 = ($251*799)|0;
 $253 = (($157) + ($129))|0;
 $254 = (($129) + 2048)|0;
 $255 = (($254) - ($157))|0;
 $256 = $255 >> 12;
 $257 = ($256*3406)|0;
 $258 = (($213) + ($185))|0;
 $259 = (($185) + 2048)|0;
 $260 = (($259) - ($213))|0;
 $261 = $260 >> 12;
 $262 = ($261*2276)|0;
 $263 = (($54) + ($26))|0;
 $264 = (($26) + 2048)|0;
 $265 = (($264) - ($54))|0;
 $266 = $265 >> 12;
 $267 = ($266*4017)|0;
 $268 = (($110) + ($82))|0;
 $269 = (($82) + 2048)|0;
 $270 = (($269) - ($110))|0;
 $271 = $270 >> 12;
 $272 = ($271*799)|0;
 $273 = (($166) + ($138))|0;
 $274 = (($138) + 2048)|0;
 $275 = (($274) - ($166))|0;
 $276 = $275 >> 12;
 $277 = ($276*3406)|0;
 $278 = (($222) + ($194))|0;
 $279 = (($194) + 2048)|0;
 $280 = (($279) - ($222))|0;
 $281 = $280 >> 12;
 $282 = ($281*2276)|0;
 $283 = (($49) + ($21))|0;
 $284 = (($21) + 2048)|0;
 $285 = (($284) - ($49))|0;
 $286 = $285 >> 12;
 $287 = ($286*4017)|0;
 $288 = (($105) + ($77))|0;
 $289 = (($77) + 2048)|0;
 $290 = (($289) - ($105))|0;
 $291 = $290 >> 12;
 $292 = ($291*799)|0;
 $293 = (($161) + ($133))|0;
 $294 = (($133) + 2048)|0;
 $295 = (($294) - ($161))|0;
 $296 = $295 >> 12;
 $297 = ($296*3406)|0;
 $298 = (($217) + ($189))|0;
 $299 = (($189) + 2048)|0;
 $300 = (($299) - ($217))|0;
 $301 = $300 >> 12;
 $302 = ($301*2276)|0;
 $303 = (($228) + ($223))|0;
 $304 = (($238) + ($233))|0;
 $305 = (($303) + 2048)|0;
 $306 = (($305) + ($304))|0;
 $307 = $306 >> 12;
 $308 = (((($hi)) + 480|0) + ($slot<<2)|0);
 HEAP32[$308>>2] = $307;
 $309 = (($305) - ($304))|0;
 $310 = $309 >> 12;
 $311 = ($310*2896)|0;
 $312 = (($311) + 2048)|0;
 $313 = $312 >> 12;
 $314 = (($lo) + ($slot<<2)|0);
 HEAP32[$314>>2] = $313;
 $315 = (($248) + ($243))|0;
 $316 = (($258) + ($253))|0;
 $317 = (($316) + ($315))|0;
 $318 = (($317) + 2048)|0;
 $319 = $318 >> 12;
 $320 = (((($hi)) + 448|0) + ($slot<<2)|0);
 HEAP32[$320>>2] = $319;
 $321 = (($268) + ($263))|0;
 $322 = (($278) + ($273))|0;
 $323 = (($322) + ($321))|0;
 $324 = (($323) + 2048)|0;
 $325 = $324 >> 12;
 $326 = (((($hi)) + 416|0) + ($slot<<2)|0);
 HEAP32[$326>>2] = $325;
 $327 = (($288) + ($283))|0;
 $328 = (($298) + ($293))|0;
 $329 = (($328) + ($327))|0;
 $330 = $329 << 1;
 $331 = (($330) - ($317))|0;
 $332 = (($331) + 2048)|0;
 $333 = $332 >> 12;
 $334 = (((($hi)) + 384|0) + ($slot<<2)|0);
 HEAP32[$334>>2] = $333;
 $335 = (($232) + ($227))|0;
 $336 = (($242) + ($237))|0;
 $337 = (($336) + ($335))|0;
 $338 = (($337) + 2048)|0;
 $339 = $338 >> 12;
 $340 = (((($hi)) + 352|0) + ($slot<<2)|0);
 HEAP32[$340>>2] = $339;
 $341 = (($252) + ($247))|0;
 $342 = (($262) + ($257))|0;
 $343 = (($342) + ($341))|0;
 $344 = $343 << 1;
 $345 = (($344) - ($331))|0;
 $346 = (($345) + 2048)|0;
 $347 = $346 >> 12;
 $348 = (((($hi)) + 320|0) + ($slot<<2)|0);
 HEAP32[$348>>2] = $347;
 $349 = (($272) + ($267))|0;
 $350 = (($282) + ($277))|0;
 $351 = (($350) + ($349))|0;
 $352 = $351 << 1;
 $353 = (($352) - ($323))|0;
 $354 = (($353) + 2048)|0;
 $355 = $354 >> 12;
 $356 = (((($hi)) + 288|0) + ($slot<<2)|0);
 HEAP32[$356>>2] = $355;
 $357 = (($292) + ($287))|0;
 $358 = (($302) + ($297))|0;
 $359 = (($358) + ($357))|0;
 $360 = $359 << 1;
 $361 = (($360) - ($329))|0;
 $362 = $361 << 1;
 $363 = (($362) - ($345))|0;
 $364 = (($363) + 2048)|0;
 $365 = $364 >> 12;
 $366 = (((($hi)) + 256|0) + ($slot<<2)|0);
 HEAP32[$366>>2] = $365;
 $367 = (($223) + 2048)|0;
 $368 = (($367) - ($228))|0;
 $369 = $368 >> 12;
 $370 = ($369*3784)|0;
 $371 = (($233) + 2048)|0;
 $372 = (($371) - ($238))|0;
 $373 = $372 >> 12;
 $374 = ($373*1567)|0;
 $375 = (($374) + ($370))|0;
 $376 = (($375) + 2048)|0;
 $377 = $376 >> 12;
 $378 = (((($hi)) + 224|0) + ($slot<<2)|0);
 HEAP32[$378>>2] = $377;
 $379 = (($370) + 2048)|0;
 $380 = (($379) - ($374))|0;
 $381 = $380 >> 12;
 $382 = ($381*5792)|0;
 $383 = (2048 - ($375))|0;
 $384 = (($383) + ($382))|0;
 $385 = $384 >> 12;
 $386 = (((($lo)) + 256|0) + ($slot<<2)|0);
 HEAP32[$386>>2] = $385;
 $387 = (($243) + 2048)|0;
 $388 = (($387) - ($248))|0;
 $389 = $388 >> 12;
 $390 = ($389*3784)|0;
 $391 = (($253) + 2048)|0;
 $392 = (($391) - ($258))|0;
 $393 = $392 >> 12;
 $394 = ($393*1567)|0;
 $395 = (($394) + ($390))|0;
 $396 = $395 << 1;
 $397 = (($396) - ($363))|0;
 $398 = (($397) + 2048)|0;
 $399 = $398 >> 12;
 $400 = (((($hi)) + 192|0) + ($slot<<2)|0);
 HEAP32[$400>>2] = $399;
 $401 = (($263) + 2048)|0;
 $402 = (($401) - ($268))|0;
 $403 = $402 >> 12;
 $404 = ($403*3784)|0;
 $405 = (($273) + 2048)|0;
 $406 = (($405) - ($278))|0;
 $407 = $406 >> 12;
 $408 = ($407*1567)|0;
 $409 = (($408) + ($404))|0;
 $410 = $409 << 1;
 $411 = (($410) - ($353))|0;
 $412 = (($411) + 2048)|0;
 $413 = $412 >> 12;
 $414 = (((($hi)) + 160|0) + ($slot<<2)|0);
 HEAP32[$414>>2] = $413;
 $415 = (($283) + 2048)|0;
 $416 = (($415) - ($288))|0;
 $417 = $416 >> 12;
 $418 = ($417*3784)|0;
 $419 = (($293) + 2048)|0;
 $420 = (($419) - ($298))|0;
 $421 = $420 >> 12;
 $422 = ($421*1567)|0;
 $423 = (($422) + ($418))|0;
 $424 = $423 << 1;
 $425 = (($424) - ($361))|0;
 $426 = $425 << 1;
 $427 = (($426) - ($397))|0;
 $428 = (($427) + 2048)|0;
 $429 = $428 >> 12;
 $430 = (((($hi)) + 128|0) + ($slot<<2)|0);
 HEAP32[$430>>2] = $429;
 $431 = (($227) + 2048)|0;
 $432 = (($431) - ($232))|0;
 $433 = $432 >> 12;
 $434 = ($433*3784)|0;
 $435 = (($237) + 2048)|0;
 $436 = (($435) - ($242))|0;
 $437 = $436 >> 12;
 $438 = ($437*1567)|0;
 $439 = (($438) + ($434))|0;
 $440 = $439 << 1;
 $441 = (($440) - ($337))|0;
 $442 = (($441) + 2048)|0;
 $443 = $442 >> 12;
 $444 = (((($hi)) + 96|0) + ($slot<<2)|0);
 HEAP32[$444>>2] = $443;
 $445 = (($335) + 2048)|0;
 $446 = (($445) - ($336))|0;
 $447 = $446 >> 12;
 $448 = ($447*5792)|0;
 $449 = (($448) - ($441))|0;
 $450 = (($449) + 2048)|0;
 $451 = $450 >> 12;
 $452 = (((($lo)) + 128|0) + ($slot<<2)|0);
 HEAP32[$452>>2] = $451;
 $453 = (($434) + 2048)|0;
 $454 = (($453) - ($438))|0;
 $455 = $454 >> 12;
 $456 = ($455*5792)|0;
 $457 = (($456) - ($439))|0;
 $458 = $457 << 1;
 $459 = (2048 - ($449))|0;
 $460 = (($459) + ($458))|0;
 $461 = $460 >> 12;
 $462 = (((($lo)) + 384|0) + ($slot<<2)|0);
 HEAP32[$462>>2] = $461;
 $463 = (($247) + 2048)|0;
 $464 = (($463) - ($252))|0;
 $465 = $464 >> 12;
 $466 = ($465*3784)|0;
 $467 = (($257) + 2048)|0;
 $468 = (($467) - ($262))|0;
 $469 = $468 >> 12;
 $470 = ($469*1567)|0;
 $471 = (($470) + ($466))|0;
 $472 = $471 << 1;
 $473 = (($472) - ($343))|0;
 $474 = $473 << 1;
 $475 = (($474) - ($427))|0;
 $476 = (($475) + 2048)|0;
 $477 = $476 >> 12;
 $478 = (((($hi)) + 64|0) + ($slot<<2)|0);
 HEAP32[$478>>2] = $477;
 $479 = (($341) + 2048)|0;
 $480 = (($479) - ($342))|0;
 $481 = $480 >> 12;
 $482 = ($481*5792)|0;
 $483 = (($482) - ($473))|0;
 $484 = (($267) + 2048)|0;
 $485 = (($484) - ($272))|0;
 $486 = $485 >> 12;
 $487 = ($486*3784)|0;
 $488 = (($277) + 2048)|0;
 $489 = (($488) - ($282))|0;
 $490 = $489 >> 12;
 $491 = ($490*1567)|0;
 $492 = (($491) + ($487))|0;
 $493 = $492 << 1;
 $494 = (($493) - ($351))|0;
 $495 = $494 << 1;
 $496 = (($495) - ($411))|0;
 $497 = (($496) + 2048)|0;
 $498 = $497 >> 12;
 $499 = (((($hi)) + 32|0) + ($slot<<2)|0);
 HEAP32[$499>>2] = $498;
 $500 = (($321) + 2048)|0;
 $501 = (($500) - ($322))|0;
 $502 = $501 >> 12;
 $503 = ($502*5792)|0;
 $504 = (($503) - ($496))|0;
 $505 = (($504) + 2048)|0;
 $506 = $505 >> 12;
 $507 = (((($lo)) + 64|0) + ($slot<<2)|0);
 HEAP32[$507>>2] = $506;
 $508 = (($349) + 2048)|0;
 $509 = (($508) - ($350))|0;
 $510 = $509 >> 12;
 $511 = ($510*5792)|0;
 $512 = (($511) - ($494))|0;
 $513 = $512 << 1;
 $514 = (($513) - ($504))|0;
 $515 = (($514) + 2048)|0;
 $516 = $515 >> 12;
 $517 = (((($lo)) + 192|0) + ($slot<<2)|0);
 HEAP32[$517>>2] = $516;
 $518 = (($404) + 2048)|0;
 $519 = (($518) - ($408))|0;
 $520 = $519 >> 12;
 $521 = ($520*5792)|0;
 $522 = (($521) - ($409))|0;
 $523 = $522 << 1;
 $524 = (($523) - ($514))|0;
 $525 = (($524) + 2048)|0;
 $526 = $525 >> 12;
 $527 = (((($lo)) + 320|0) + ($slot<<2)|0);
 HEAP32[$527>>2] = $526;
 $528 = (($487) + 2048)|0;
 $529 = (($528) - ($491))|0;
 $530 = $529 >> 12;
 $531 = ($530*5792)|0;
 $532 = (($531) - ($492))|0;
 $533 = $532 << 1;
 $534 = (($533) - ($512))|0;
 $535 = $534 << 1;
 $536 = (2048 - ($524))|0;
 $537 = (($536) + ($535))|0;
 $538 = $537 >> 12;
 $539 = (((($lo)) + 448|0) + ($slot<<2)|0);
 HEAP32[$539>>2] = $538;
 $540 = (($287) + 2048)|0;
 $541 = (($540) - ($292))|0;
 $542 = $541 >> 12;
 $543 = ($542*3784)|0;
 $544 = (($297) + 2048)|0;
 $545 = (($544) - ($302))|0;
 $546 = $545 >> 12;
 $547 = ($546*1567)|0;
 $548 = (($547) + ($543))|0;
 $549 = $548 << 1;
 $550 = (($549) - ($359))|0;
 $551 = $550 << 1;
 $552 = (($551) - ($425))|0;
 $553 = (($327) + 2048)|0;
 $554 = (($553) - ($328))|0;
 $555 = $554 >> 12;
 $556 = ($555*5792)|0;
 $557 = (($556) - ($552))|0;
 $558 = $552 << 1;
 $559 = (($558) - ($475))|0;
 $560 = (($559) + 2048)|0;
 $561 = $560 >> 12;
 $562 = (($hi) + ($slot<<2)|0);
 HEAP32[$562>>2] = $561;
 $563 = (($315) + 2048)|0;
 $564 = (($563) - ($316))|0;
 $565 = $564 >> 12;
 $566 = ($565*5792)|0;
 $567 = (($566) - ($559))|0;
 $568 = (($567) + 2048)|0;
 $569 = $568 >> 12;
 $570 = (((($lo)) + 32|0) + ($slot<<2)|0);
 HEAP32[$570>>2] = $569;
 $571 = $557 << 1;
 $572 = (($571) - ($567))|0;
 $573 = (($572) + 2048)|0;
 $574 = $573 >> 12;
 $575 = (((($lo)) + 96|0) + ($slot<<2)|0);
 HEAP32[$575>>2] = $574;
 $576 = $483 << 1;
 $577 = (($576) - ($572))|0;
 $578 = (($577) + 2048)|0;
 $579 = $578 >> 12;
 $580 = (((($lo)) + 160|0) + ($slot<<2)|0);
 HEAP32[$580>>2] = $579;
 $581 = (($357) + 2048)|0;
 $582 = (($581) - ($358))|0;
 $583 = $582 >> 12;
 $584 = ($583*5792)|0;
 $585 = (($584) - ($550))|0;
 $586 = $585 << 1;
 $587 = (($586) - ($557))|0;
 $588 = $587 << 1;
 $589 = (($588) - ($577))|0;
 $590 = (($589) + 2048)|0;
 $591 = $590 >> 12;
 $592 = (((($lo)) + 224|0) + ($slot<<2)|0);
 HEAP32[$592>>2] = $591;
 $593 = (($390) + 2048)|0;
 $594 = (($593) - ($394))|0;
 $595 = $594 >> 12;
 $596 = ($595*5792)|0;
 $597 = (($596) - ($395))|0;
 $598 = $597 << 1;
 $599 = (($598) - ($589))|0;
 $600 = (($599) + 2048)|0;
 $601 = $600 >> 12;
 $602 = (((($lo)) + 288|0) + ($slot<<2)|0);
 HEAP32[$602>>2] = $601;
 $603 = (($418) + 2048)|0;
 $604 = (($603) - ($422))|0;
 $605 = $604 >> 12;
 $606 = ($605*5792)|0;
 $607 = (($606) - ($423))|0;
 $608 = $607 << 1;
 $609 = (($608) - ($587))|0;
 $610 = $609 << 1;
 $611 = (($610) - ($599))|0;
 $612 = (($611) + 2048)|0;
 $613 = $612 >> 12;
 $614 = (((($lo)) + 352|0) + ($slot<<2)|0);
 HEAP32[$614>>2] = $613;
 $615 = (($466) + 2048)|0;
 $616 = (($615) - ($470))|0;
 $617 = $616 >> 12;
 $618 = ($617*5792)|0;
 $619 = (($618) - ($471))|0;
 $620 = $619 << 1;
 $621 = (($620) - ($483))|0;
 $622 = $621 << 1;
 $623 = (($622) - ($611))|0;
 $624 = (($623) + 2048)|0;
 $625 = $624 >> 12;
 $626 = (((($lo)) + 416|0) + ($slot<<2)|0);
 HEAP32[$626>>2] = $625;
 $627 = (($543) + 2048)|0;
 $628 = (($627) - ($547))|0;
 $629 = $628 >> 12;
 $630 = ($629*5792)|0;
 $631 = (($630) - ($548))|0;
 $632 = $631 << 1;
 $633 = (($632) - ($585))|0;
 $634 = $633 << 1;
 $635 = (($634) - ($609))|0;
 $636 = $635 << 1;
 $637 = (($636) + 2048)|0;
 $638 = (($637) - ($623))|0;
 $639 = $638 >> 12;
 $640 = (((($lo)) + 480|0) + ($slot<<2)|0);
 HEAP32[$640>>2] = $639;
 return;
}
function _III_sideinfo($ptr,$nch,$lsf,$si,$data_bitlen,$priv_bitlen) {
 $ptr = $ptr|0;
 $nch = $nch|0;
 $lsf = $lsf|0;
 $si = $si|0;
 $data_bitlen = $data_bitlen|0;
 $priv_bitlen = $priv_bitlen|0;
 var $$$$result$1$us = 0, $$$result$1 = 0, $$$result$1$us = 0, $$result$1 = 0, $$result$1$us = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ch$020 = 0, $ch$113 = 0, $ch$113$us = 0, $exitcond = 0, $exitcond27 = 0, $exitcond28 = 0, $gr$017 = 0, $ngr$0 = 0, $or$cond = 0, $or$cond$us = 0, $or$cond5$us = 0, $result$016 = 0, $result$1$lcssa = 0, $result$1$lcssa$lcssa = 0, $result$115 = 0, $result$115$us = 0, $result$4$us = 0, $result$5 = 0;
 var $result$5$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$data_bitlen>>2] = 0;
 $0 = ($lsf|0)!=(0);
 $1 = ($nch|0)==(1);
 $2 = $1 ? 1 : 2;
 $3 = $1 ? 5 : 3;
 $4 = $0 ? $2 : $3;
 HEAP32[$priv_bitlen>>2] = $4;
 $5 = $0 ? 8 : 9;
 $6 = (_mad_bit_read($ptr,$5)|0);
 HEAP32[$si>>2] = $6;
 $7 = HEAP32[$priv_bitlen>>2]|0;
 $8 = (_mad_bit_read($ptr,$7)|0);
 $9 = ((($si)) + 4|0);
 HEAP32[$9>>2] = $8;
 if ($0) {
  $ngr$0 = 1;
 } else {
  $10 = ($nch|0)==(0);
  if ($10) {
   $ngr$0 = 2;
  } else {
   $ch$020 = 0;
   while(1) {
    $11 = (_mad_bit_read($ptr,4)|0);
    $12 = $11&255;
    $13 = (((($si)) + 8|0) + ($ch$020)|0);
    HEAP8[$13>>0] = $12;
    $14 = (($ch$020) + 1)|0;
    $exitcond28 = ($14|0)==($nch|0);
    if ($exitcond28) {
     $ngr$0 = 2;
     break;
    } else {
     $ch$020 = $14;
    }
   }
  }
 }
 $15 = ($nch|0)==(0);
 $16 = $0 ? 9 : 4;
 $17 = $0 ? 2 : 3;
 $gr$017 = 0;$result$016 = 0;
 while(1) {
  L8: do {
   if ($15) {
    $result$1$lcssa = $result$016;
   } else {
    if ($0) {
     $ch$113 = 0;$result$115 = $result$016;
     while(1) {
      $99 = (_mad_bit_read($ptr,12)|0);
      $100 = $99&65535;
      $101 = ((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0);
      HEAP16[$101>>1] = $100;
      $102 = (_mad_bit_read($ptr,9)|0);
      $103 = $102&65535;
      $104 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 2|0);
      HEAP16[$104>>1] = $103;
      $105 = (_mad_bit_read($ptr,8)|0);
      $106 = $105&65535;
      $107 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 4|0);
      HEAP16[$107>>1] = $106;
      $108 = (_mad_bit_read($ptr,$16)|0);
      $109 = $108&65535;
      $110 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 6|0);
      HEAP16[$110>>1] = $109;
      $111 = HEAP16[$101>>1]|0;
      $112 = $111&65535;
      $113 = HEAP32[$data_bitlen>>2]|0;
      $114 = (($113) + ($112))|0;
      HEAP32[$data_bitlen>>2] = $114;
      $115 = HEAP16[$104>>1]|0;
      $116 = ($115&65535)>(288);
      $117 = ($result$115|0)==(0);
      $or$cond = $117 & $116;
      $$result$1 = $or$cond ? 562 : $result$115;
      $118 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 8|0);
      HEAP8[$118>>0] = 0;
      $119 = (_mad_bit_read($ptr,1)|0);
      $120 = ($119|0)==(0);
      if ($120) {
       $153 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 9|0);
       HEAP8[$153>>0] = 0;
       $154 = (_mad_bit_read($ptr,5)|0);
       $155 = $154&255;
       $156 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 10|0);
       HEAP8[$156>>0] = $155;
       $157 = (_mad_bit_read($ptr,5)|0);
       $158 = $157&255;
       $159 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 11|0);
       HEAP8[$159>>0] = $158;
       $160 = (_mad_bit_read($ptr,5)|0);
       $161 = $160&255;
       $162 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 12|0);
       HEAP8[$162>>0] = $161;
       $163 = (_mad_bit_read($ptr,4)|0);
       $164 = $163&255;
       $165 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 16|0);
       HEAP8[$165>>0] = $164;
       $166 = (_mad_bit_read($ptr,3)|0);
       $167 = $166&255;
       $168 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 17|0);
       HEAP8[$168>>0] = $167;
       $result$5 = $$result$1;
      } else {
       $121 = (_mad_bit_read($ptr,2)|0);
       $122 = $121&255;
       $123 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 9|0);
       HEAP8[$123>>0] = $122;
       $124 = $121 & 255;
       $125 = $124 | $$result$1;
       $126 = ($125|0)==(0);
       $$$result$1 = $126 ? 563 : $$result$1;
       $127 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 16|0);
       HEAP8[$127>>0] = 7;
       $128 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 17|0);
       HEAP8[$128>>0] = 36;
       $129 = (_mad_bit_read($ptr,1)|0);
       $130 = ($129|0)==(0);
       if ($130) {
        $135 = HEAP8[$123>>0]|0;
        $136 = ($135<<24>>24)==(2);
        if ($136) {
         HEAP8[$127>>0] = 8;
        }
       } else {
        $131 = HEAP8[$118>>0]|0;
        $132 = $131&255;
        $133 = $132 | 8;
        $134 = $133&255;
        HEAP8[$118>>0] = $134;
       }
       $137 = (_mad_bit_read($ptr,5)|0);
       $138 = $137&255;
       $139 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 10|0);
       HEAP8[$139>>0] = $138;
       $140 = (_mad_bit_read($ptr,5)|0);
       $141 = $140&255;
       $142 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 11|0);
       HEAP8[$142>>0] = $141;
       $143 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 12|0);
       HEAP8[$143>>0] = 4;
       $144 = (_mad_bit_read($ptr,3)|0);
       $145 = $144&255;
       $146 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 13|0);
       HEAP8[$146>>0] = $145;
       $147 = (_mad_bit_read($ptr,3)|0);
       $148 = $147&255;
       $149 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 14|0);
       HEAP8[$149>>0] = $148;
       $150 = (_mad_bit_read($ptr,3)|0);
       $151 = $150&255;
       $152 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 15|0);
       HEAP8[$152>>0] = $151;
       $result$5 = $$$result$1;
      }
      $169 = (_mad_bit_read($ptr,$17)|0);
      $170 = HEAP8[$118>>0]|0;
      $171 = $170&255;
      $172 = $171 | $169;
      $173 = $172&255;
      HEAP8[$118>>0] = $173;
      $174 = (($ch$113) + 1)|0;
      $exitcond = ($174|0)==($nch|0);
      if ($exitcond) {
       $result$1$lcssa = $result$5;
       break L8;
      } else {
       $ch$113 = $174;$result$115 = $result$5;
      }
     }
    } else {
     $ch$113$us = 0;$result$115$us = $result$016;
    }
    while(1) {
     $18 = (_mad_bit_read($ptr,12)|0);
     $19 = $18&65535;
     $20 = ((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0);
     HEAP16[$20>>1] = $19;
     $21 = (_mad_bit_read($ptr,9)|0);
     $22 = $21&65535;
     $23 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 2|0);
     HEAP16[$23>>1] = $22;
     $24 = (_mad_bit_read($ptr,8)|0);
     $25 = $24&65535;
     $26 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 4|0);
     HEAP16[$26>>1] = $25;
     $27 = (_mad_bit_read($ptr,$16)|0);
     $28 = $27&65535;
     $29 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 6|0);
     HEAP16[$29>>1] = $28;
     $30 = HEAP16[$20>>1]|0;
     $31 = $30&65535;
     $32 = HEAP32[$data_bitlen>>2]|0;
     $33 = (($32) + ($31))|0;
     HEAP32[$data_bitlen>>2] = $33;
     $34 = HEAP16[$23>>1]|0;
     $35 = ($34&65535)>(288);
     $36 = ($result$115$us|0)==(0);
     $or$cond$us = $36 & $35;
     $$result$1$us = $or$cond$us ? 562 : $result$115$us;
     $37 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 8|0);
     HEAP8[$37>>0] = 0;
     $38 = (_mad_bit_read($ptr,1)|0);
     $39 = ($38|0)==(0);
     if ($39) {
      $61 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 9|0);
      HEAP8[$61>>0] = 0;
      $62 = (_mad_bit_read($ptr,5)|0);
      $63 = $62&255;
      $64 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 10|0);
      HEAP8[$64>>0] = $63;
      $65 = (_mad_bit_read($ptr,5)|0);
      $66 = $65&255;
      $67 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 11|0);
      HEAP8[$67>>0] = $66;
      $68 = (_mad_bit_read($ptr,5)|0);
      $69 = $68&255;
      $70 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 12|0);
      HEAP8[$70>>0] = $69;
      $71 = (_mad_bit_read($ptr,4)|0);
      $72 = $71&255;
      $73 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 16|0);
      HEAP8[$73>>0] = $72;
      $74 = (_mad_bit_read($ptr,3)|0);
      $75 = $74&255;
      $76 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 17|0);
      HEAP8[$76>>0] = $75;
      $result$5$us = $$result$1$us;
     } else {
      $40 = (_mad_bit_read($ptr,2)|0);
      $41 = $40&255;
      $42 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 9|0);
      HEAP8[$42>>0] = $41;
      $43 = $40 & 255;
      $44 = $43 | $$result$1$us;
      $45 = ($44|0)==(0);
      $$$result$1$us = $45 ? 563 : $$result$1$us;
      $46 = ($41<<24>>24)==(2);
      if ($46) {
       $47 = (((($si)) + 8|0) + ($ch$113$us)|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = ($48<<24>>24)!=(0);
       $50 = ($$$result$1$us|0)==(0);
       $or$cond5$us = $50 & $49;
       $$$$result$1$us = $or$cond5$us ? 564 : $$$result$1$us;
       $result$4$us = $$$$result$1$us;
      } else {
       $result$4$us = $$$result$1$us;
      }
      $51 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 16|0);
      HEAP8[$51>>0] = 7;
      $52 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 17|0);
      HEAP8[$52>>0] = 36;
      $53 = (_mad_bit_read($ptr,1)|0);
      $54 = ($53|0)==(0);
      if ($54) {
       $59 = HEAP8[$42>>0]|0;
       $60 = ($59<<24>>24)==(2);
       if ($60) {
        HEAP8[$51>>0] = 8;
       }
      } else {
       $55 = HEAP8[$37>>0]|0;
       $56 = $55&255;
       $57 = $56 | 8;
       $58 = $57&255;
       HEAP8[$37>>0] = $58;
      }
      $83 = (_mad_bit_read($ptr,5)|0);
      $84 = $83&255;
      $85 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 10|0);
      HEAP8[$85>>0] = $84;
      $86 = (_mad_bit_read($ptr,5)|0);
      $87 = $86&255;
      $88 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 11|0);
      HEAP8[$88>>0] = $87;
      $89 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 12|0);
      HEAP8[$89>>0] = 4;
      $90 = (_mad_bit_read($ptr,3)|0);
      $91 = $90&255;
      $92 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 13|0);
      HEAP8[$92>>0] = $91;
      $93 = (_mad_bit_read($ptr,3)|0);
      $94 = $93&255;
      $95 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 14|0);
      HEAP8[$95>>0] = $94;
      $96 = (_mad_bit_read($ptr,3)|0);
      $97 = $96&255;
      $98 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 15|0);
      HEAP8[$98>>0] = $97;
      $result$5$us = $result$4$us;
     }
     $77 = (_mad_bit_read($ptr,$17)|0);
     $78 = HEAP8[$37>>0]|0;
     $79 = $78&255;
     $80 = $79 | $77;
     $81 = $80&255;
     HEAP8[$37>>0] = $81;
     $82 = (($ch$113$us) + 1)|0;
     $exitcond27 = ($82|0)==($nch|0);
     if ($exitcond27) {
      $result$1$lcssa = $result$5$us;
      break;
     } else {
      $ch$113$us = $82;$result$115$us = $result$5$us;
     }
    }
   }
  } while(0);
  $175 = (($gr$017) + 1)|0;
  $176 = ($175>>>0)<($ngr$0>>>0);
  if ($176) {
   $gr$017 = $175;$result$016 = $result$1$lcssa;
  } else {
   $result$1$lcssa$lcssa = $result$1$lcssa;
   break;
  }
 }
 return ($result$1$lcssa$lcssa|0);
}
function _III_decode($ptr,$frame,$si,$nch) {
 $ptr = $ptr|0;
 $frame = $frame|0;
 $si = $si|0;
 $nch = $nch|0;
 var $$ = 0, $$0$i31 = 0, $$0$sum$i = 0, $$0$sum$i37 = 0, $$0$sum1$i = 0, $$0$sum1$i38 = 0, $$01$lcssa$i = 0, $$0175$i = 0, $$03$i30 = 0, $$05$i33 = 0, $$06$i = 0, $$1$i$ph = 0, $$1$i21 = 0, $$1$ph = 0, $$12$i = 0, $$2 = 0, $$21$i = 0, $$3 = 0, $$3$i = 0, $$348$i = 0;
 var $$4$i = 0, $$5$i = 0, $$idx = 0, $$idx$val = 0, $$in = 0, $$in$i = 0, $$in242 = 0, $$lcssa$i = 0, $$lcssa336 = 0, $$lcssa337 = 0, $$lcssa338 = 0, $$lobit = 0, $$pre$i = 0, $$pre241 = 0, $$pre94$i = 0, $$sink = 0, $$sink1 = 0, $$sink2 = 0, $$sink237 = 0, $$sink238 = 0;
 var $$sink239 = 0, $$sink3 = 0, $$sink5 = 0, $$sum = 0, $$sum105 = 0, $$sum116 = 0, $$sum116$1 = 0, $$sum117 = 0, $$sum117$1 = 0, $$sum118 = 0, $$sum68 = 0, $$sum69 = 0, $$sum70 = 0, $$sum71 = 0, $$sum72 = 0, $$sum73 = 0, $$sum74 = 0, $$sum75 = 0, $$sum78 = 0, $$sum80 = 0;
 var $$sum82 = 0, $$sum84 = 0, $$sum86 = 0, $$sum88 = 0, $$sum90 = 0, $$sum92 = 0, $$sum94 = 0, $$xrptr$2$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0;
 var $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0;
 var $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0;
 var $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0;
 var $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0;
 var $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0;
 var $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0;
 var $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0;
 var $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0;
 var $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0;
 var $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0;
 var $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0;
 var $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0;
 var $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0;
 var $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0;
 var $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0;
 var $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0;
 var $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0;
 var $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0;
 var $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0;
 var $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0;
 var $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0;
 var $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0;
 var $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0;
 var $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0;
 var $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0;
 var $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0;
 var $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0;
 var $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0;
 var $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0;
 var $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0;
 var $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0;
 var $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0;
 var $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0;
 var $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0.0, $751 = 0.0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0.0, $784 = 0.0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0.0, $836 = 0.0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0.0, $869 = 0.0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0.0;
 var $911 = 0.0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0.0, $957 = 0.0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bitcache$0$lcssa$i = 0, $bitcache$068$i = 0, $bitcache$1$i = 0;
 var $bitcache$10$i = 0, $bitcache$2$i = 0, $bitcache$3$i = 0, $bitcache$4$i = 0, $bitcache$5$i = 0, $bitcache$6$i = 0, $bitcache$7$i = 0, $bitcache$947$i = 0, $bits_left$0$lcssa$i = 0, $bits_left$063$i = 0, $bits_left$1$i = 0, $bits_left$10$i = 0, $bits_left$2$i = 0, $bits_left$3$i = 0, $bits_left$4$i = 0, $bits_left$5$i = 0, $bits_left$6$i = 0, $bits_left$7$i = 0, $bits_left$9$lcssa$i = 0, $bits_left$943$i = 0;
 var $bound$i = 0, $bound1$062$i = 0, $bound1$1$i = 0, $bound1$1$i$lcssa = 0, $cachesz$0$lcssa$i = 0, $cachesz$064$i = 0, $cachesz$1$i = 0, $cachesz$1144$i = 0, $cachesz$12$i = 0, $cachesz$13$i = 0, $cachesz$14$i = 0, $cachesz$15$i = 0, $cachesz$16$i = 0, $cachesz$17$i = 0, $cachesz$2$lcssa$i = 0, $cachesz$254$i = 0, $cachesz$3$i = 0, $cachesz$4$i = 0, $cachesz$5$i = 0, $cachesz$6$i = 0;
 var $cachesz$7$i = 0, $cachesz$8$i = 0, $cachesz$9$i = 0, $ch$0174 = 0, $ch$1193 = 0, $clumpsz$055$i = 0, $div$i = 0, $div2$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i18 = 0, $exitcond$i23 = 0, $exitcond$i28 = 0, $exitcond$i39 = 0, $exitcond$i42 = 0, $exitcond$i42$1 = 0, $exitcond$i44 = 0, $exitcond$i44$1 = 0, $exitcond$i47 = 0;
 var $exitcond$i54 = 0, $exitcond17$i$i = 0, $exitcond235 = 0, $exitcond236 = 0, $exitcond69$i = 0, $exitcond70$i = 0, $exitcond71$i = 0, $exitcond72$i = 0, $exitcond73$i = 0, $exp$0$lcssa$i = 0, $exp$061$i = 0, $exp$2$i = 0, $exp$441$i = 0, $exp$5$i = 0, $exp$6$i = 0, $exp$7$i = 0, $exp$8$i = 0, $exponents$i = 0, $expptr$0$lcssa$i = 0, $expptr$062$i = 0;
 var $expptr$1$i = 0, $expptr$342$i = 0, $expptr$4$i = 0, $expptr$5$i = 0, $f$03$i = 0, $f$1$i = 0, $f$1$in$i = 0, $gr$0202 = 0, $i$0 = 0, $i$0$lcssa = 0, $i$01$i = 0, $i$01$i$1 = 0, $i$01$i43 = 0, $i$01$i43$1 = 0, $i$01$i46 = 0, $i$01$i53 = 0, $i$015$1$i = 0, $i$015$2$i = 0, $i$015$3$i = 0, $i$015$i = 0;
 var $i$02$i = 0, $i$02$i36 = 0, $i$142$i = 0, $i$18$1$i = 0, $i$18$2$i = 0, $i$18$3$i = 0, $i$18$i = 0, $i$234$i = 0, $i$332$i = 0, $i$430$i = 0, $i$555$i = 0, $i$653$i = 0, $i$725$i = 0, $i$821$i = 0, $i$918$i = 0, $l$012$i$i = 0, $l$051$i = 0, $l$07$i = 0, $l$1$i$i = 0, $l$12$i = 0;
 var $l$180$i = 0, $l$210$i$i = 0, $l$239$i = 0, $l$3185 = 0, $l$364$i = 0, $l$4188 = 0, $l$427$i = 0, $l$523$i = 0, $l$619$i = 0, $linbits$072$i = 0, $linbits$1$i = 0, $linbits$2$i = 0, $lower$049$i = 0, $lower$1$i = 0, $lower$1$i$lcssa = 0, $lower$2$start$0$i = 0, $lower$275$i = 0, $lower$276$i = 0, $max$0$lcssa$i = 0, $max$036$i = 0;
 var $max$1$i = 0, $modes$i = 0, $n$1$lcssa$1$i = 0, $n$1$lcssa$2$i = 0, $n$1$lcssa$3$i = 0, $n$1$lcssa$i = 0, $n$114$1$i = 0, $n$114$2$i = 0, $n$114$3$i = 0, $n$4$lcssa$1$i = 0, $n$4$lcssa$2$i = 0, $n$4$lcssa$3$i = 0, $n$4$lcssa$i = 0, $n$47$1$i = 0, $n$47$2$i = 0, $n$47$3$i = 0, $n$56$i = 0, $nsfb$023$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond$i17 = 0, $or$cond$i9 = 0, $or$cond60$i = 0, $output = 0, $pair$0$i = 0, $pair$053$i = 0, $part2_length$0 = 0, $peek$i = 0, $quad$0$i = 0, $rcount$070$i = 0, $rcount$1$i = 0, $rcount$2$i = 0, $rcount$3$i = 0, $region$069$i = 0, $region$1$i = 0, $region$2$i = 0, $reqcache$i = 0, $reqhits$0$$i = 0, $reqhits$074$i = 0, $reqhits$2$i = 0;
 var $reqhits$3$i = 0, $reqhits$4$i = 0, $reqhits$5$i = 0, $reqhits$6$i = 0, $reqhits$7$i = 0, $reqhits$8$i = 0, $reqhits$9$i = 0, $requantized$0$i = 0, $requantized$0$i$i = 0, $requantized$0$i10$i = 0, $requantized$0$i12$i = 0, $requantized$0$i14$i = 0, $requantized$0$i16$i = 0, $requantized$0$i18$i = 0, $requantized$0$i20$i = 0, $requantized$0$i6$i = 0, $requantized$0$i8$i = 0, $requantized$1$i = 0, $requantized$2$i = 0, $requantized$3$i = 0;
 var $requantized2$0$ph$i = 0, $requantized2$049$i = 0, $requantized2$1$i = 0, $requantized2$2$i = 0, $requantized2$3$i = 0, $requantized2$4$i = 0, $right_xr$050$i = 0, $right_xr$179$i = 0, $right_xr$238$i = 0, $right_xr$363$i = 0, $sb$0$i = 0, $sb$2184 = 0, $sb$3187 = 0, $sb$4190 = 0, $sext$i$i = 0, $sfbi$013$i$i = 0, $sfbi$022$i = 0, $sfbi$052$i = 0, $sfbi$1$i$i = 0, $sfbi$211$i$i = 0;
 var $sfbi$240$i = 0, $sfbi$315$i$i = 0, $sfbi$365$i = 0, $sfbi$414$i$i = 0, $sfbi$428$i = 0, $sfbi$524$i = 0, $sfbi$620$i = 0, $sfbound$0$lcssa$i = 0, $sfbound$067$i = 0, $sfbound$1$i = 0, $sfbound$346$i = 0, $sfbound$4$i = 0, $sfbound$5$i = 0, $sfbwidth = 0, $sfreqi$0 = 0, $sfreqi$0$v = 0, $start$077$i = 0, $start$078$i = 0, $start$i = 0, $start$i4 = 0;
 var $startbits$073$i = 0, $startbits$1$i = 0, $startbits$2$i = 0, $storemerge$i = 0, $storemerge4$i = 0, $sw$i = 0, $table$071$i = 0, $table$1$i = 0, $table$2$i = 0, $tmp$i = 0, $tmp2$0$1$i = 0, $tmp2$0$1$i51 = 0, $tmp2$0$1$i58 = 0, $tmp2$0$1$i62 = 0, $tmp2$0$2$i = 0, $tmp2$0$2$i52 = 0, $tmp2$0$2$i59 = 0, $tmp2$0$2$i63 = 0, $tmp2$0$i = 0, $tmp2$0$i50 = 0;
 var $tmp2$0$i57 = 0, $tmp2$0$i61 = 0, $tmp2$01$i = 0, $tmp2$01$i49 = 0, $tmp2$01$i56 = 0, $tmp2$01$i60 = 0, $uglygep$i = 0, $uglygep$i6 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0;
 var $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr7 = 0, $w$037$i = 0, $w$129$i = 0, $w$14$i = 0, $w$2$i = 0, $xr = 0, $xr$pn4$i34 = 0, $xr$pn4$i34$phi = 0, $xrptr$0$lcssa$i = 0, $xrptr$065$i = 0, $xrptr$2$lcssa$i = 0, $xrptr$245$i = 0, $xrptr$440$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 7568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(7568|0);
 $vararg_buffer36 = sp + 152|0;
 $vararg_buffer32 = sp + 136|0;
 $vararg_buffer28 = sp + 120|0;
 $vararg_buffer24 = sp + 104|0;
 $vararg_buffer20 = sp + 88|0;
 $vararg_buffer16 = sp + 72|0;
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer8 = sp + 40|0;
 $vararg_buffer = sp + 24|0;
 $tmp$i = sp + 5176|0;
 $sw$i = sp + 5160|0;
 $modes$i = sp + 7480|0;
 $bound$i = sp + 5148|0;
 $exponents$i = sp + 4992|0;
 $peek$i = sp + 16|0;
 $reqcache$i = sp + 4928|0;
 $start$i4 = sp + 8|0;
 $start$i = sp;
 $sfbwidth = sp + 4920|0;
 $xr = sp + 312|0;
 $output = sp + 168|0;
 $0 = ((($frame)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($frame)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 16384;
 $5 = ($4|0)==(0);
 $$lobit = $4 >>> 14;
 $$3 = $1 << $$lobit;
 $6 = $$3 >>> 7;
 $7 = $6 & 15;
 $8 = $$3 >>> 15;
 $9 = $8 & 1;
 $sfreqi$0$v = $5 ? -8 : -5;
 $10 = (($9) + ($sfreqi$0$v))|0;
 $sfreqi$0 = (($10) + ($7))|0;
 $11 = $3 >>> 12;
 $12 = $11 & 1;
 $13 = (2 - ($12))|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $15 = ($nch|0)==(0);
 $16 = ((($frame)) + 4|0);
 $17 = ((($frame)) + 8|0);
 $18 = ((($xr)) + 2304|0);
 $19 = ((($bound$i)) + 8|0);
 $20 = ((($bound$i)) + 4|0);
 $21 = ((($frame)) + 9264|0);
 $22 = (3040 + (($sfreqi$0*12)|0)|0);
 $23 = (((3040 + (($sfreqi$0*12)|0)|0)) + 8|0);
 $24 = (((3040 + (($sfreqi$0*12)|0)|0)) + 4|0);
 $25 = ((($exponents$i)) + 4|0);
 $26 = HEAP32[9293]|0;
 $27 = ((($si)) + 184|0);
 $28 = ((($modes$i)) + 2|0);
 $29 = ((($modes$i)) + 4|0);
 $30 = ((($modes$i)) + 6|0);
 $31 = ((($modes$i)) + 8|0);
 $32 = ((($modes$i)) + 10|0);
 $33 = ((($modes$i)) + 12|0);
 $34 = ((($modes$i)) + 14|0);
 $35 = ((($modes$i)) + 16|0);
 $36 = ((($modes$i)) + 18|0);
 $37 = ((($modes$i)) + 20|0);
 $38 = ((($modes$i)) + 22|0);
 $39 = ((($modes$i)) + 24|0);
 $40 = ((($modes$i)) + 26|0);
 $41 = ((($modes$i)) + 28|0);
 $42 = ((($modes$i)) + 30|0);
 $43 = ((($modes$i)) + 32|0);
 $44 = ((($modes$i)) + 34|0);
 $45 = ((($modes$i)) + 36|0);
 $46 = ((($modes$i)) + 38|0);
 $47 = ((($modes$i)) + 40|0);
 $48 = ((($modes$i)) + 42|0);
 $49 = ((($modes$i)) + 44|0);
 $50 = ((($modes$i)) + 46|0);
 $51 = ((($modes$i)) + 48|0);
 $52 = ((($modes$i)) + 50|0);
 $53 = ((($modes$i)) + 52|0);
 $54 = ((($modes$i)) + 54|0);
 $55 = ((($modes$i)) + 56|0);
 $56 = ((($modes$i)) + 58|0);
 $57 = ((($modes$i)) + 60|0);
 $58 = ((($modes$i)) + 62|0);
 $59 = ((($modes$i)) + 64|0);
 $60 = ((($modes$i)) + 66|0);
 $61 = ((($modes$i)) + 68|0);
 $62 = ((($modes$i)) + 70|0);
 $63 = ((($modes$i)) + 72|0);
 $64 = ((($modes$i)) + 74|0);
 $65 = ((($modes$i)) + 76|0);
 $gr$0202 = 0;
 L4: while(1) {
  if (!($15)) {
   $66 = HEAP32[$22>>2]|0;
   $67 = ($gr$0202|0)==(0);
   $ch$0174 = 0;
   while(1) {
    $68 = ((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0);
    $69 = (($sfbwidth) + ($ch$0174<<2)|0);
    HEAP32[$69>>2] = $66;
    $70 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 9|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = ($71<<24>>24)==(2);
    if ($72) {
     $73 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 8|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 & 8;
     $76 = ($75<<24>>24)==(0);
     $$in = $76 ? $24 : $23;
     $77 = HEAP32[$$in>>2]|0;
     HEAP32[$69>>2] = $77;
     $$in242 = $77;
    } else {
     $$in242 = $66;
    }
    $78 = $$in242;
    $79 = HEAP32[$2>>2]|0;
    $80 = $79 & 4096;
    $81 = ($80|0)==(0);
    if ($81) {
     if ($67) {
      $373 = 0;
     } else {
      $266 = (((($si)) + 8|0) + ($ch$0174)|0);
      $267 = HEAP8[$266>>0]|0;
      $268 = $267&255;
      $373 = $268;
     }
     $269 = $ptr;
     $270 = $269;
     $271 = HEAP32[$270>>2]|0;
     $272 = (($269) + 4)|0;
     $273 = $272;
     $274 = HEAP32[$273>>2]|0;
     $275 = $start$i4;
     $276 = $275;
     HEAP32[$276>>2] = $271;
     $277 = (($275) + 4)|0;
     $278 = $277;
     HEAP32[$278>>2] = $274;
     $279 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 6|0);
     $280 = HEAP16[$279>>1]|0;
     $281 = $280&65535;
     $282 = (42779 + ($281<<1)|0);
     $283 = HEAP8[$282>>0]|0;
     $284 = $283&255;
     $285 = (((42779 + ($281<<1)|0)) + 1|0);
     $286 = HEAP8[$285>>0]|0;
     $287 = $286&255;
     if ($72) {
      $288 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 8|0);
      $289 = HEAP8[$288>>0]|0;
      $290 = $289 & 8;
      $291 = $290&255;
      $292 = $291 >>> 3;
      $293 = (18 - ($292))|0;
      $nsfb$023$i = $293;$sfbi$022$i = 0;
      while(1) {
       $366 = (($nsfb$023$i) + -1)|0;
       $367 = (_mad_bit_read($ptr,$284)|0);
       $368 = $367&255;
       $369 = (($sfbi$022$i) + 1)|0;
       $370 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($sfbi$022$i)|0);
       HEAP8[$370>>0] = $368;
       $371 = ($366|0)==(0);
       if ($371) {
        break;
       } else {
        $nsfb$023$i = $366;$sfbi$022$i = $369;
       }
      }
      $294 = (_mad_bit_read($ptr,$287)|0);
      $295 = $294&255;
      $296 = (($293) + 1)|0;
      $297 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($293)|0);
      HEAP8[$297>>0] = $295;
      $298 = (_mad_bit_read($ptr,$287)|0);
      $299 = $298&255;
      $300 = (($293) + 2)|0;
      $301 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($296)|0);
      HEAP8[$301>>0] = $299;
      $302 = (_mad_bit_read($ptr,$287)|0);
      $303 = $302&255;
      $304 = (($293) + 3)|0;
      $305 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($300)|0);
      HEAP8[$305>>0] = $303;
      $306 = (_mad_bit_read($ptr,$287)|0);
      $307 = $306&255;
      $308 = $293 | 4;
      $309 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($304)|0);
      HEAP8[$309>>0] = $307;
      $310 = (_mad_bit_read($ptr,$287)|0);
      $311 = $310&255;
      $312 = (($308) + 1)|0;
      $313 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($308)|0);
      HEAP8[$313>>0] = $311;
      $314 = (_mad_bit_read($ptr,$287)|0);
      $315 = $314&255;
      $316 = (($308) + 2)|0;
      $317 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($312)|0);
      HEAP8[$317>>0] = $315;
      $318 = (_mad_bit_read($ptr,$287)|0);
      $319 = $318&255;
      $320 = (($308) + 3)|0;
      $321 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($316)|0);
      HEAP8[$321>>0] = $319;
      $322 = (_mad_bit_read($ptr,$287)|0);
      $323 = $322&255;
      $324 = (($308) + 4)|0;
      $325 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($320)|0);
      HEAP8[$325>>0] = $323;
      $326 = (_mad_bit_read($ptr,$287)|0);
      $327 = $326&255;
      $328 = (($308) + 5)|0;
      $329 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($324)|0);
      HEAP8[$329>>0] = $327;
      $330 = (_mad_bit_read($ptr,$287)|0);
      $331 = $330&255;
      $332 = (($308) + 6)|0;
      $333 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($328)|0);
      HEAP8[$333>>0] = $331;
      $334 = (_mad_bit_read($ptr,$287)|0);
      $335 = $334&255;
      $336 = (($308) + 7)|0;
      $337 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($332)|0);
      HEAP8[$337>>0] = $335;
      $338 = (_mad_bit_read($ptr,$287)|0);
      $339 = $338&255;
      $340 = $293 | 12;
      $341 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($336)|0);
      HEAP8[$341>>0] = $339;
      $342 = (_mad_bit_read($ptr,$287)|0);
      $343 = $342&255;
      $344 = (($340) + 1)|0;
      $345 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($340)|0);
      HEAP8[$345>>0] = $343;
      $346 = (_mad_bit_read($ptr,$287)|0);
      $347 = $346&255;
      $348 = (($340) + 2)|0;
      $349 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($344)|0);
      HEAP8[$349>>0] = $347;
      $350 = (_mad_bit_read($ptr,$287)|0);
      $351 = $350&255;
      $352 = (($340) + 3)|0;
      $353 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($348)|0);
      HEAP8[$353>>0] = $351;
      $354 = (_mad_bit_read($ptr,$287)|0);
      $355 = $354&255;
      $356 = (($340) + 4)|0;
      $357 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($352)|0);
      HEAP8[$357>>0] = $355;
      $358 = (_mad_bit_read($ptr,$287)|0);
      $359 = $358&255;
      $360 = (($340) + 5)|0;
      $361 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($356)|0);
      HEAP8[$361>>0] = $359;
      $362 = (_mad_bit_read($ptr,$287)|0);
      $363 = $362&255;
      $364 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($360)|0);
      HEAP8[$364>>0] = $363;
      $365 = $293 | 36;
      $uglygep$i6 = (($68) + ($365)|0);
      ;HEAP8[$uglygep$i6>>0]=0|0;HEAP8[$uglygep$i6+1>>0]=0|0;HEAP8[$uglygep$i6+2>>0]=0|0;
     } else {
      $372 = $373 & 8;
      $374 = ($372|0)==(0);
      if ($374) {
       $392 = (_mad_bit_read($ptr,$284)|0);
       $393 = $392&255;
       $394 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0);
       HEAP8[$394>>0] = $393;
       $395 = (_mad_bit_read($ptr,$284)|0);
       $396 = $395&255;
       $397 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 19|0);
       HEAP8[$397>>0] = $396;
       $398 = (_mad_bit_read($ptr,$284)|0);
       $399 = $398&255;
       $400 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 20|0);
       HEAP8[$400>>0] = $399;
       $401 = (_mad_bit_read($ptr,$284)|0);
       $402 = $401&255;
       $403 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 21|0);
       HEAP8[$403>>0] = $402;
       $404 = (_mad_bit_read($ptr,$284)|0);
       $405 = $404&255;
       $406 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 22|0);
       HEAP8[$406>>0] = $405;
       $407 = (_mad_bit_read($ptr,$284)|0);
       $408 = $407&255;
       $$sink = $408;
      } else {
       $375 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 18|0);
       $376 = HEAP8[$375>>0]|0;
       $377 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0);
       HEAP8[$377>>0] = $376;
       $378 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 19|0);
       $379 = HEAP8[$378>>0]|0;
       $380 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 19|0);
       HEAP8[$380>>0] = $379;
       $381 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 20|0);
       $382 = HEAP8[$381>>0]|0;
       $383 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 20|0);
       HEAP8[$383>>0] = $382;
       $384 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 21|0);
       $385 = HEAP8[$384>>0]|0;
       $386 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 21|0);
       HEAP8[$386>>0] = $385;
       $387 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 22|0);
       $388 = HEAP8[$387>>0]|0;
       $389 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 22|0);
       HEAP8[$389>>0] = $388;
       $390 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 23|0);
       $391 = HEAP8[$390>>0]|0;
       $$sink = $391;
      }
      $409 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 23|0);
      HEAP8[$409>>0] = $$sink;
      $410 = $373 & 4;
      $411 = ($410|0)==(0);
      if ($411) {
       $426 = (_mad_bit_read($ptr,$284)|0);
       $427 = $426&255;
       $428 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 24|0);
       HEAP8[$428>>0] = $427;
       $429 = (_mad_bit_read($ptr,$284)|0);
       $430 = $429&255;
       $431 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 25|0);
       HEAP8[$431>>0] = $430;
       $432 = (_mad_bit_read($ptr,$284)|0);
       $433 = $432&255;
       $434 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 26|0);
       HEAP8[$434>>0] = $433;
       $435 = (_mad_bit_read($ptr,$284)|0);
       $436 = $435&255;
       $437 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 27|0);
       HEAP8[$437>>0] = $436;
       $438 = (_mad_bit_read($ptr,$284)|0);
       $439 = $438&255;
       $$sink237 = $439;
      } else {
       $412 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 24|0);
       $413 = HEAP8[$412>>0]|0;
       $414 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 24|0);
       HEAP8[$414>>0] = $413;
       $415 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 25|0);
       $416 = HEAP8[$415>>0]|0;
       $417 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 25|0);
       HEAP8[$417>>0] = $416;
       $418 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 26|0);
       $419 = HEAP8[$418>>0]|0;
       $420 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 26|0);
       HEAP8[$420>>0] = $419;
       $421 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 27|0);
       $422 = HEAP8[$421>>0]|0;
       $423 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 27|0);
       HEAP8[$423>>0] = $422;
       $424 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 28|0);
       $425 = HEAP8[$424>>0]|0;
       $$sink237 = $425;
      }
      $440 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 28|0);
      HEAP8[$440>>0] = $$sink237;
      $441 = $373 & 2;
      $442 = ($441|0)==(0);
      if ($442) {
       $457 = (_mad_bit_read($ptr,$287)|0);
       $458 = $457&255;
       $459 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 29|0);
       HEAP8[$459>>0] = $458;
       $460 = (_mad_bit_read($ptr,$287)|0);
       $461 = $460&255;
       $462 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 30|0);
       HEAP8[$462>>0] = $461;
       $463 = (_mad_bit_read($ptr,$287)|0);
       $464 = $463&255;
       $465 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 31|0);
       HEAP8[$465>>0] = $464;
       $466 = (_mad_bit_read($ptr,$287)|0);
       $467 = $466&255;
       $468 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 32|0);
       HEAP8[$468>>0] = $467;
       $469 = (_mad_bit_read($ptr,$287)|0);
       $470 = $469&255;
       $$sink238 = $470;
      } else {
       $443 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 29|0);
       $444 = HEAP8[$443>>0]|0;
       $445 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 29|0);
       HEAP8[$445>>0] = $444;
       $446 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 30|0);
       $447 = HEAP8[$446>>0]|0;
       $448 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 30|0);
       HEAP8[$448>>0] = $447;
       $449 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 31|0);
       $450 = HEAP8[$449>>0]|0;
       $451 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 31|0);
       HEAP8[$451>>0] = $450;
       $452 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 32|0);
       $453 = HEAP8[$452>>0]|0;
       $454 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 32|0);
       HEAP8[$454>>0] = $453;
       $455 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 33|0);
       $456 = HEAP8[$455>>0]|0;
       $$sink238 = $456;
      }
      $471 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 33|0);
      HEAP8[$471>>0] = $$sink238;
      $472 = $373 & 1;
      $473 = ($472|0)==(0);
      if ($473) {
       $488 = (_mad_bit_read($ptr,$287)|0);
       $489 = $488&255;
       $490 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 34|0);
       HEAP8[$490>>0] = $489;
       $491 = (_mad_bit_read($ptr,$287)|0);
       $492 = $491&255;
       $493 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 35|0);
       HEAP8[$493>>0] = $492;
       $494 = (_mad_bit_read($ptr,$287)|0);
       $495 = $494&255;
       $496 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 36|0);
       HEAP8[$496>>0] = $495;
       $497 = (_mad_bit_read($ptr,$287)|0);
       $498 = $497&255;
       $499 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 37|0);
       HEAP8[$499>>0] = $498;
       $500 = (_mad_bit_read($ptr,$287)|0);
       $501 = $500&255;
       $$sink239 = $501;
      } else {
       $474 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 34|0);
       $475 = HEAP8[$474>>0]|0;
       $476 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 34|0);
       HEAP8[$476>>0] = $475;
       $477 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 35|0);
       $478 = HEAP8[$477>>0]|0;
       $479 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 35|0);
       HEAP8[$479>>0] = $478;
       $480 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 36|0);
       $481 = HEAP8[$480>>0]|0;
       $482 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 36|0);
       HEAP8[$482>>0] = $481;
       $483 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 37|0);
       $484 = HEAP8[$483>>0]|0;
       $485 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 37|0);
       HEAP8[$485>>0] = $484;
       $486 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 38|0);
       $487 = HEAP8[$486>>0]|0;
       $$sink239 = $487;
      }
      $502 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 38|0);
      HEAP8[$502>>0] = $$sink239;
      $503 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 39|0);
      HEAP8[$503>>0] = 0;
     }
     $504 = (_mad_bit_length($start$i4,$ptr)|0);
     $part2_length$0 = $504;
    } else {
     $82 = ($ch$0174|0)==(0);
     $83 = $82 ? 0 : $27;
     $84 = HEAP32[$17>>2]|0;
     $85 = $ptr;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $88 = (($85) + 4)|0;
     $89 = $88;
     $90 = HEAP32[$89>>2]|0;
     $91 = $start$i;
     $92 = $91;
     HEAP32[$92>>2] = $87;
     $93 = (($91) + 4)|0;
     $94 = $93;
     HEAP32[$94>>2] = $90;
     $95 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 6|0);
     $96 = HEAP16[$95>>1]|0;
     $97 = $96&65535;
     if ($72) {
      $98 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 8|0);
      $99 = HEAP8[$98>>0]|0;
      $100 = $99 & 8;
      $101 = $100&255;
      $102 = $101 >>> 3;
      $103 = (($102) + 1)|0;
      $131 = $103;
     } else {
      $131 = 0;
     }
     $104 = $84 & 1;
     $105 = ($104|0)!=(0);
     $106 = ($83|0)!=(0|0);
     $or$cond$i = $106 & $105;
     if ($or$cond$i) {
      $147 = $97 >>> 1;
      $148 = ($96&65535)<(360);
      do {
       if ($148) {
        $div2$i = (($96&65535) / 72)&-1;
        $149 = $div2$i&65535;
        $150 = (($147>>>0) % 36)&-1;
        $151 = (($150>>>0) / 6)&-1;
        $152 = (($150>>>0) % 6)&-1;
        $$sink2 = 3;$165 = $149;$180 = $151;$200 = $152;
       } else {
        $153 = ($96&65535)<(488);
        if ($153) {
         $154 = (($147) + -180)|0;
         $155 = $154 >>> 4;
         $156 = $155 & 3;
         $157 = $154 >>> 2;
         $158 = $157 & 3;
         $159 = $154 & 3;
         $$sink2 = 4;$165 = $156;$180 = $158;$200 = $159;
         break;
        } else {
         $160 = (($147) + -244)|0;
         $161 = (($160>>>0) / 3)&-1;
         $162 = (($160>>>0) % 3)&-1;
         $$sink2 = 5;$165 = $161;$180 = $162;$200 = 0;
         break;
        }
       }
      } while(0);
      $163 = ((42707 + (($$sink2*12)|0)|0) + ($131<<2)|0);
      $164 = 1 << $165;
      $166 = (($164) + -1)|0;
      $167 = HEAP8[$163>>0]|0;
      $168 = ($167<<24>>24)==(0);
      if ($168) {
       $n$4$lcssa$i = 0;
      } else {
       $i$18$i = 0;
       while(1) {
        $169 = (_mad_bit_read($ptr,$165)|0);
        $170 = $169&255;
        $171 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($i$18$i)|0);
        HEAP8[$171>>0] = $170;
        $172 = ($169|0)==($166|0);
        $173 = $172&1;
        $174 = (($i$18$i) + 1)|0;
        $175 = (((($83)) + 18|0) + ($i$18$i)|0);
        HEAP8[$175>>0] = $173;
        $176 = HEAP8[$163>>0]|0;
        $177 = $176&255;
        $178 = ($174>>>0)<($177>>>0);
        if ($178) {
         $i$18$i = $174;
        } else {
         $n$4$lcssa$i = $174;
         break;
        }
       }
      }
      $179 = 1 << $180;
      $181 = (($179) + -1)|0;
      $182 = ((($163)) + 1|0);
      $183 = HEAP8[$182>>0]|0;
      $184 = ($183<<24>>24)==(0);
      if ($184) {
       $n$4$lcssa$1$i = $n$4$lcssa$i;
      } else {
       $i$18$1$i = 0;$n$47$1$i = $n$4$lcssa$i;
       while(1) {
        $188 = (_mad_bit_read($ptr,$180)|0);
        $189 = $188&255;
        $190 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$47$1$i)|0);
        HEAP8[$190>>0] = $189;
        $191 = ($188|0)==($181|0);
        $192 = $191&1;
        $193 = (($n$47$1$i) + 1)|0;
        $194 = (((($83)) + 18|0) + ($n$47$1$i)|0);
        HEAP8[$194>>0] = $192;
        $195 = (($i$18$1$i) + 1)|0;
        $196 = HEAP8[$182>>0]|0;
        $197 = $196&255;
        $198 = ($195>>>0)<($197>>>0);
        if ($198) {
         $i$18$1$i = $195;$n$47$1$i = $193;
        } else {
         $n$4$lcssa$1$i = $193;
         break;
        }
       }
      }
      $199 = 1 << $200;
      $201 = (($199) + -1)|0;
      $202 = ((($163)) + 2|0);
      $203 = HEAP8[$202>>0]|0;
      $204 = ($203<<24>>24)==(0);
      if ($204) {
       $n$4$lcssa$2$i = $n$4$lcssa$1$i;
      } else {
       $i$18$2$i = 0;$n$47$2$i = $n$4$lcssa$1$i;
       while(1) {
        $205 = (_mad_bit_read($ptr,$200)|0);
        $206 = $205&255;
        $207 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$47$2$i)|0);
        HEAP8[$207>>0] = $206;
        $208 = ($205|0)==($201|0);
        $209 = $208&1;
        $210 = (($n$47$2$i) + 1)|0;
        $211 = (((($83)) + 18|0) + ($n$47$2$i)|0);
        HEAP8[$211>>0] = $209;
        $212 = (($i$18$2$i) + 1)|0;
        $213 = HEAP8[$202>>0]|0;
        $214 = $213&255;
        $215 = ($212>>>0)<($214>>>0);
        if ($215) {
         $i$18$2$i = $212;$n$47$2$i = $210;
        } else {
         $n$4$lcssa$2$i = $210;
         break;
        }
       }
      }
      $216 = ((($163)) + 3|0);
      $217 = HEAP8[$216>>0]|0;
      $218 = ($217<<24>>24)==(0);
      if ($218) {
       $n$4$lcssa$3$i = $n$4$lcssa$2$i;
      } else {
       $i$18$3$i = 0;$n$47$3$i = $n$4$lcssa$2$i;
       while(1) {
        $219 = (_mad_bit_read($ptr,0)|0);
        $220 = $219&255;
        $221 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$47$3$i)|0);
        HEAP8[$221>>0] = $220;
        $222 = ($219|0)==(0);
        $223 = $222&1;
        $224 = (($n$47$3$i) + 1)|0;
        $225 = (((($83)) + 18|0) + ($n$47$3$i)|0);
        HEAP8[$225>>0] = $223;
        $226 = (($i$18$3$i) + 1)|0;
        $227 = HEAP8[$216>>0]|0;
        $228 = $227&255;
        $229 = ($226>>>0)<($228>>>0);
        if ($229) {
         $i$18$3$i = $226;$n$47$3$i = $224;
        } else {
         $n$4$lcssa$3$i = $224;
         break;
        }
       }
      }
      $230 = ($n$4$lcssa$3$i>>>0)<(39);
      if ($230) {
       $n$56$i = $n$4$lcssa$3$i;
       while(1) {
        $185 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$56$i)|0);
        HEAP8[$185>>0] = 0;
        $186 = (($n$56$i) + 1)|0;
        $187 = (((($83)) + 18|0) + ($n$56$i)|0);
        HEAP8[$187>>0] = 0;
        $exitcond$i = ($186|0)==(39);
        if ($exitcond$i) {
         break;
        } else {
         $n$56$i = $186;
        }
       }
      }
     } else {
      $107 = ($96&65535)<(400);
      do {
       if ($107) {
        $108 = $97 >>> 4;
        $div$i = (($96&65535) / 80)&-1;
        $109 = $div$i&65535;
        $110 = (($108>>>0) % 5)&-1;
        $111 = $96 & 12;
        $112 = $111&65535;
        $113 = $112 >>> 2;
        $114 = $96 & 3;
        $115 = $114&65535;
        $$sink1 = 0;$136 = $109;$231 = $110;$243 = $113;$255 = $115;
       } else {
        $116 = ($96&65535)<(500);
        if ($116) {
         $117 = (($97) + -400)|0;
         $118 = $117 >>> 2;
         $119 = (($117>>>0) / 20)&-1;
         $120 = (($118>>>0) % 5)&-1;
         $121 = $117 & 3;
         $$sink1 = 1;$136 = $119;$231 = $120;$243 = $121;$255 = 0;
         break;
        } else {
         $122 = (($97) + -500)|0;
         $123 = (($122>>>0) / 3)&-1;
         $124 = (($122>>>0) % 3)&-1;
         $125 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 8|0);
         $126 = HEAP8[$125>>0]|0;
         $127 = $126&255;
         $128 = $127 | 4;
         $129 = $128&255;
         HEAP8[$125>>0] = $129;
         $$sink1 = 2;$136 = $123;$231 = $124;$243 = 0;$255 = 0;
         break;
        }
       }
      } while(0);
      $130 = ((42707 + (($$sink1*12)|0)|0) + ($131<<2)|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = ($132<<24>>24)==(0);
      if ($133) {
       $n$1$lcssa$i = 0;
      } else {
       $i$015$i = 0;
       while(1) {
        $137 = (_mad_bit_read($ptr,$136)|0);
        $138 = $137&255;
        $139 = (($i$015$i) + 1)|0;
        $140 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($i$015$i)|0);
        HEAP8[$140>>0] = $138;
        $141 = HEAP8[$130>>0]|0;
        $142 = $141&255;
        $143 = ($139>>>0)<($142>>>0);
        if ($143) {
         $i$015$i = $139;
        } else {
         $n$1$lcssa$i = $139;
         break;
        }
       }
      }
      $144 = ((($130)) + 1|0);
      $145 = HEAP8[$144>>0]|0;
      $146 = ($145<<24>>24)==(0);
      if ($146) {
       $n$1$lcssa$1$i = $n$1$lcssa$i;
      } else {
       $i$015$1$i = 0;$n$114$1$i = $n$1$lcssa$i;
       while(1) {
        $232 = (_mad_bit_read($ptr,$231)|0);
        $233 = $232&255;
        $234 = (($n$114$1$i) + 1)|0;
        $235 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$114$1$i)|0);
        HEAP8[$235>>0] = $233;
        $236 = (($i$015$1$i) + 1)|0;
        $237 = HEAP8[$144>>0]|0;
        $238 = $237&255;
        $239 = ($236>>>0)<($238>>>0);
        if ($239) {
         $i$015$1$i = $236;$n$114$1$i = $234;
        } else {
         $n$1$lcssa$1$i = $234;
         break;
        }
       }
      }
      $240 = ((($130)) + 2|0);
      $241 = HEAP8[$240>>0]|0;
      $242 = ($241<<24>>24)==(0);
      if ($242) {
       $n$1$lcssa$2$i = $n$1$lcssa$1$i;
      } else {
       $i$015$2$i = 0;$n$114$2$i = $n$1$lcssa$1$i;
       while(1) {
        $244 = (_mad_bit_read($ptr,$243)|0);
        $245 = $244&255;
        $246 = (($n$114$2$i) + 1)|0;
        $247 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$114$2$i)|0);
        HEAP8[$247>>0] = $245;
        $248 = (($i$015$2$i) + 1)|0;
        $249 = HEAP8[$240>>0]|0;
        $250 = $249&255;
        $251 = ($248>>>0)<($250>>>0);
        if ($251) {
         $i$015$2$i = $248;$n$114$2$i = $246;
        } else {
         $n$1$lcssa$2$i = $246;
         break;
        }
       }
      }
      $252 = ((($130)) + 3|0);
      $253 = HEAP8[$252>>0]|0;
      $254 = ($253<<24>>24)==(0);
      if ($254) {
       $n$1$lcssa$3$i = $n$1$lcssa$2$i;
      } else {
       $i$015$3$i = 0;$n$114$3$i = $n$1$lcssa$2$i;
       while(1) {
        $256 = (_mad_bit_read($ptr,$255)|0);
        $257 = $256&255;
        $258 = (($n$114$3$i) + 1)|0;
        $259 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$114$3$i)|0);
        HEAP8[$259>>0] = $257;
        $260 = (($i$015$3$i) + 1)|0;
        $261 = HEAP8[$252>>0]|0;
        $262 = $261&255;
        $263 = ($260>>>0)<($262>>>0);
        if ($263) {
         $i$015$3$i = $260;$n$114$3$i = $258;
        } else {
         $n$1$lcssa$3$i = $258;
         break;
        }
       }
      }
      $264 = ($n$1$lcssa$3$i>>>0)<(39);
      if ($264) {
       $134 = (($n$1$lcssa$3$i) + 18)|0;
       $uglygep$i = (($68) + ($134)|0);
       $135 = (39 - ($n$1$lcssa$3$i))|0;
       _memset(($uglygep$i|0),0,($135|0))|0;
      }
     }
     $265 = (_mad_bit_length($start$i,$ptr)|0);
     $part2_length$0 = $265;
    }
    $505 = (($xr) + (($ch$0174*2304)|0)|0);
    $506 = HEAP16[$68>>1]|0;
    $507 = $506&65535;
    $508 = (($507) - ($part2_length$0))|0;
    $509 = ($508|0)<(0);
    if ($509) {
     $$1$i$ph = 566;
     label = 209;
     break L4;
    }
    $510 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 4|0);
    $511 = HEAP16[$510>>1]|0;
    $512 = $511&65535;
    $513 = (($512) + -210)|0;
    $514 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 8|0);
    $515 = HEAP8[$514>>0]|0;
    $516 = $515&255;
    $517 = $516 >>> 1;
    $518 = $517 & 1;
    $519 = (($518) + 1)|0;
    $520 = HEAP8[$70>>0]|0;
    $521 = ($520<<24>>24)==(2);
    if ($521) {
     $522 = $516 & 8;
     $523 = ($522|0)==(0);
     if ($523) {
      $l$1$i$i = 0;$sfbi$1$i$i = 0;
     } else {
      $524 = $516 << 29;
      $sext$i$i = $524 >> 31;
      $l$012$i$i = 0;$sfbi$013$i$i = 0;
      while(1) {
       $525 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($sfbi$013$i$i)|0);
       $526 = HEAP8[$525>>0]|0;
       $527 = $526&255;
       $528 = (42811 + ($sfbi$013$i$i)|0);
       $529 = HEAP8[$528>>0]|0;
       $530 = $529&255;
       $531 = $530 & $sext$i$i;
       $532 = (($531) + ($527))|0;
       $533 = $532 << $519;
       $534 = (($513) - ($533))|0;
       $535 = (($exponents$i) + ($sfbi$013$i$i<<2)|0);
       HEAP32[$535>>2] = $534;
       $536 = (($sfbi$013$i$i) + 1)|0;
       $537 = (($78) + ($sfbi$013$i$i)|0);
       $538 = HEAP8[$537>>0]|0;
       $539 = $538&255;
       $540 = (($539) + ($l$012$i$i))|0;
       $541 = ($540>>>0)<(36);
       if ($541) {
        $l$012$i$i = $540;$sfbi$013$i$i = $536;
       } else {
        $l$1$i$i = $540;$sfbi$1$i$i = $536;
        break;
       }
      }
     }
     $542 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 13|0);
     $543 = HEAP8[$542>>0]|0;
     $544 = $543&255;
     $545 = $544 << 3;
     $546 = (($513) - ($545))|0;
     $547 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 14|0);
     $548 = HEAP8[$547>>0]|0;
     $549 = $548&255;
     $550 = $549 << 3;
     $551 = (($513) - ($550))|0;
     $552 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 15|0);
     $553 = HEAP8[$552>>0]|0;
     $554 = $553&255;
     $555 = $554 << 3;
     $556 = (($513) - ($555))|0;
     $557 = ($l$1$i$i>>>0)<(576);
     if ($557) {
      $l$210$i$i = $l$1$i$i;$sfbi$211$i$i = $sfbi$1$i$i;
      while(1) {
       $558 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($sfbi$211$i$i)|0);
       $559 = HEAP8[$558>>0]|0;
       $560 = $559&255;
       $561 = $560 << $519;
       $562 = (($546) - ($561))|0;
       $563 = (($exponents$i) + ($sfbi$211$i$i<<2)|0);
       HEAP32[$563>>2] = $562;
       $564 = (($sfbi$211$i$i) + 1)|0;
       $565 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($564)|0);
       $566 = HEAP8[$565>>0]|0;
       $567 = $566&255;
       $568 = $567 << $519;
       $569 = (($551) - ($568))|0;
       $570 = (($exponents$i) + ($564<<2)|0);
       HEAP32[$570>>2] = $569;
       $571 = (($sfbi$211$i$i) + 2)|0;
       $572 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($571)|0);
       $573 = HEAP8[$572>>0]|0;
       $574 = $573&255;
       $575 = $574 << $519;
       $576 = (($556) - ($575))|0;
       $577 = (($exponents$i) + ($571<<2)|0);
       HEAP32[$577>>2] = $576;
       $578 = (($78) + ($sfbi$211$i$i)|0);
       $579 = HEAP8[$578>>0]|0;
       $580 = $579&255;
       $581 = ($580*3)|0;
       $582 = (($581) + ($l$210$i$i))|0;
       $583 = (($sfbi$211$i$i) + 3)|0;
       $584 = ($582>>>0)<(576);
       if ($584) {
        $l$210$i$i = $582;$sfbi$211$i$i = $583;
       } else {
        break;
       }
      }
     }
    } else {
     $585 = $516 & 4;
     $586 = ($585|0)==(0);
     if ($586) {
      $sfbi$414$i$i = 0;
      while(1) {
       $598 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($sfbi$414$i$i)|0);
       $599 = HEAP8[$598>>0]|0;
       $600 = $599&255;
       $601 = $600 << $519;
       $602 = (($513) - ($601))|0;
       $603 = (($exponents$i) + ($sfbi$414$i$i<<2)|0);
       HEAP32[$603>>2] = $602;
       $604 = (($sfbi$414$i$i) + 1)|0;
       $exitcond$i$i = ($604|0)==(22);
       if ($exitcond$i$i) {
        break;
       } else {
        $sfbi$414$i$i = $604;
       }
      }
     } else {
      $sfbi$315$i$i = 0;
      while(1) {
       $587 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($sfbi$315$i$i)|0);
       $588 = HEAP8[$587>>0]|0;
       $589 = $588&255;
       $590 = (42811 + ($sfbi$315$i$i)|0);
       $591 = HEAP8[$590>>0]|0;
       $592 = $591&255;
       $593 = (($592) + ($589))|0;
       $594 = $593 << $519;
       $595 = (($513) - ($594))|0;
       $596 = (($exponents$i) + ($sfbi$315$i$i<<2)|0);
       HEAP32[$596>>2] = $595;
       $597 = (($sfbi$315$i$i) + 1)|0;
       $exitcond17$i$i = ($597|0)==(22);
       if ($exitcond17$i$i) {
        break;
       } else {
        $sfbi$315$i$i = $597;
       }
      }
     }
    }
    $605 = $ptr;
    $606 = $605;
    $607 = HEAP32[$606>>2]|0;
    $608 = (($605) + 4)|0;
    $609 = $608;
    $610 = HEAP32[$609>>2]|0;
    $611 = $peek$i;
    $612 = $611;
    HEAP32[$612>>2] = $607;
    $613 = (($611) + 4)|0;
    $614 = $613;
    HEAP32[$614>>2] = $610;
    _mad_bit_skip($ptr,$508);
    $615 = (_bitshift64Lshr(($607|0),($610|0),48)|0);
    $616 = tempRet0;
    $617 = (31 - ($615))|0;
    $618 = $617 & -8;
    $619 = (($618) + ($615))|0;
    $620 = (_mad_bit_read($peek$i,$619)|0);
    $621 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 10|0);
    $622 = HEAP8[$621>>0]|0;
    $623 = $622&255;
    $624 = (608 + ($623<<3)|0);
    $625 = HEAP32[$624>>2]|0;
    $626 = ($625|0)==(0|0);
    if ($626) {
     label = 159;
     break L4;
    }
    $627 = HEAP8[$78>>0]|0;
    $628 = $627&255;
    $629 = ((($xr) + (($ch$0174*2304)|0)|0) + ($628<<2)|0);
    $630 = ((($78)) + 1|0);
    $631 = (($508) - ($619))|0;
    $632 = HEAP32[$exponents$i>>2]|0;
    $633 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 2|0);
    $634 = HEAP16[$633>>1]|0;
    $635 = ($634<<16>>16)!=(0);
    $636 = ($508|0)>(0);
    $or$cond60$i = $636 & $635;
    if ($or$cond60$i) {
     $637 = $634&65535;
     $638 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 16|0);
     $639 = HEAP8[$638>>0]|0;
     $640 = $639&255;
     $641 = (($640) + 1)|0;
     $642 = (((608 + ($623<<3)|0)) + 4|0);
     $643 = HEAP16[$642>>1]|0;
     $644 = $643&65535;
     $645 = (((608 + ($623<<3)|0)) + 6|0);
     $646 = HEAP16[$645>>1]|0;
     $647 = $646&65535;
     $648 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 17|0);
     $$0175$i = $630;$$in$i = $637;$bitcache$068$i = $620;$bits_left$063$i = $631;$cachesz$064$i = $619;$exp$061$i = $632;$expptr$062$i = $25;$linbits$072$i = $644;$rcount$070$i = $641;$region$069$i = 0;$reqhits$074$i = 0;$sfbound$067$i = $629;$startbits$073$i = $647;$table$071$i = $625;$xrptr$065$i = $505;
     while(1) {
      $649 = (($$in$i) + -1)|0;
      $650 = ($xrptr$065$i|0)==($sfbound$067$i|0);
      if ($650) {
       $651 = ((($$0175$i)) + 1|0);
       $652 = HEAP8[$$0175$i>>0]|0;
       $653 = $652&255;
       $654 = (($sfbound$067$i) + ($653<<2)|0);
       $655 = (($rcount$070$i) + -1)|0;
       $656 = ($655|0)==(0);
       if ($656) {
        $657 = ($region$069$i|0)==(0);
        if ($657) {
         $658 = HEAP8[$648>>0]|0;
         $659 = $658&255;
         $660 = (($659) + 1)|0;
         $rcount$1$i = $660;
        } else {
         $rcount$1$i = 0;
        }
        $661 = (($region$069$i) + 1)|0;
        $662 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 10|0) + ($661)|0);
        $663 = HEAP8[$662>>0]|0;
        $664 = $663&255;
        $665 = (608 + ($664<<3)|0);
        $666 = HEAP32[$665>>2]|0;
        $667 = (((608 + ($664<<3)|0)) + 4|0);
        $668 = HEAP16[$667>>1]|0;
        $669 = $668&65535;
        $670 = (((608 + ($664<<3)|0)) + 6|0);
        $671 = HEAP16[$670>>1]|0;
        $672 = $671&65535;
        $673 = ($666|0)==(0|0);
        if ($673) {
         label = 159;
         break L4;
        } else {
         $linbits$1$i = $669;$rcount$2$i = $rcount$1$i;$region$1$i = $661;$startbits$1$i = $672;$table$1$i = $666;
        }
       } else {
        $linbits$1$i = $linbits$072$i;$rcount$2$i = $655;$region$1$i = $region$069$i;$startbits$1$i = $startbits$073$i;$table$1$i = $table$071$i;
       }
       $674 = HEAP32[$expptr$062$i>>2]|0;
       $675 = ($exp$061$i|0)==($674|0);
       $reqhits$0$$i = $675 ? $reqhits$074$i : 0;
       $676 = ((($expptr$062$i)) + 4|0);
       $$12$i = $651;$exp$2$i = $674;$expptr$1$i = $676;$linbits$2$i = $linbits$1$i;$rcount$3$i = $rcount$2$i;$region$2$i = $region$1$i;$reqhits$2$i = $reqhits$0$$i;$sfbound$1$i = $654;$startbits$2$i = $startbits$1$i;$table$2$i = $table$1$i;
      } else {
       $$12$i = $$0175$i;$exp$2$i = $exp$061$i;$expptr$1$i = $expptr$062$i;$linbits$2$i = $linbits$072$i;$rcount$3$i = $rcount$070$i;$region$2$i = $region$069$i;$reqhits$2$i = $reqhits$074$i;$sfbound$1$i = $sfbound$067$i;$startbits$2$i = $startbits$073$i;$table$2$i = $table$071$i;
      }
      $677 = ($cachesz$064$i|0)<(21);
      if ($677) {
       $678 = (31 - ($cachesz$064$i))|0;
       $679 = $678 & -8;
       $680 = $bitcache$068$i << $679;
       $681 = (_mad_bit_read($peek$i,$679)|0);
       $682 = $681 | $680;
       $683 = (($679) + ($cachesz$064$i))|0;
       $684 = (($bits_left$063$i) - ($679))|0;
       $bitcache$1$i = $682;$bits_left$1$i = $684;$cachesz$1$i = $683;
      } else {
       $bitcache$1$i = $bitcache$068$i;$bits_left$1$i = $bits_left$063$i;$cachesz$1$i = $cachesz$064$i;
      }
      $685 = (($cachesz$1$i) - ($startbits$2$i))|0;
      $686 = $bitcache$1$i >>> $685;
      $687 = 1 << $startbits$2$i;
      $688 = (($687) + -1)|0;
      $689 = $686 & $688;
      $pair$053$i = (($table$2$i) + ($689<<1)|0);
      $690 = HEAP8[$pair$053$i>>0]|0;
      $691 = $690 & 1;
      $692 = ($691<<24>>24)==(0);
      if ($692) {
       $695 = $689;$cachesz$254$i = $cachesz$1$i;$clumpsz$055$i = $startbits$2$i;
       while(1) {
        $693 = (($cachesz$254$i) - ($clumpsz$055$i))|0;
        $694 = (($table$2$i) + ($695<<1)|0);
        $696 = HEAP16[$694>>1]|0;
        $697 = ($696&65535) >>> 1;
        $698 = $697 & 7;
        $699 = $698&65535;
        $700 = ($696&65535) >>> 4;
        $701 = $700&65535;
        $702 = (($693) - ($699))|0;
        $703 = $bitcache$1$i >>> $702;
        $704 = 1 << $699;
        $705 = (($704) + -1)|0;
        $706 = $703 & $705;
        $707 = (($706) + ($701))|0;
        $pair$0$i = (($table$2$i) + ($707<<1)|0);
        $708 = HEAP8[$pair$0$i>>0]|0;
        $709 = $708 & 1;
        $710 = ($709<<24>>24)==(0);
        if ($710) {
         $695 = $707;$cachesz$254$i = $693;$clumpsz$055$i = $699;
        } else {
         $712 = $707;$cachesz$2$lcssa$i = $693;
         break;
        }
       }
      } else {
       $712 = $689;$cachesz$2$lcssa$i = $cachesz$1$i;
      }
      $711 = (($table$2$i) + ($712<<1)|0);
      $713 = HEAP16[$711>>1]|0;
      $714 = ($713&65535) >>> 1;
      $715 = $714 & 7;
      $716 = $715&65535;
      $717 = (($cachesz$2$lcssa$i) - ($716))|0;
      $718 = ($linbits$2$i|0)==(0);
      $719 = ($713&65535) >>> 4;
      $720 = $719 & 15;
      $721 = $720&65535;
      L137: do {
       if ($718) {
        $888 = ($720<<16>>16)==(0);
        if ($888) {
         $cachesz$8$i = $717;$reqhits$7$i = $reqhits$2$i;$storemerge$i = 0;
        } else {
         $889 = 1 << $721;
         $890 = $889 & $reqhits$2$i;
         $891 = ($890|0)==(0);
         if ($891) {
          $894 = $889 | $reqhits$2$i;
          $895 = (($exp$2$i|0) % 4)&-1;
          $896 = (($exp$2$i|0) / 4)&-1;
          $897 = (3148 + ($721<<2)|0);
          $898 = HEAP32[$897>>2]|0;
          $899 = $898 & 134217727;
          $900 = $898 >>> 27;
          $901 = (($900) + ($896))|0;
          $902 = ($901|0)<(0);
          do {
           if ($902) {
            $903 = (0 - ($901))|0;
            $904 = ($903>>>0)>(31);
            if ($904) {
             $requantized$0$i14$i = 0;
             break;
            }
            $905 = $901 ^ -1;
            $906 = 1 << $905;
            $907 = (($906) + ($899))|0;
            $908 = $907 >> $903;
            $requantized$0$i14$i = $908;
           } else {
            $909 = ($901|0)>(4);
            if ($909) {
             $910 = (+($899|0));
             $911 = $910 * 3.7252902984619141E-9;
             HEAPF64[$vararg_buffer20>>3] = $911;
             $vararg_ptr23 = ((($vararg_buffer20)) + 8|0);
             HEAP32[$vararg_ptr23>>2] = $901;
             (_fprintf($26,42833,$vararg_buffer20)|0);
             $requantized$0$i14$i = 2147483647;
             break;
            } else {
             $912 = $899 << $901;
             $requantized$0$i14$i = $912;
             break;
            }
           }
          } while(0);
          $913 = ($895|0)==(0);
          if ($913) {
           $923 = $requantized$0$i14$i;
          } else {
           $914 = (($requantized$0$i14$i) + 2048)|0;
           $915 = $914 >> 12;
           $916 = (($895) + 3)|0;
           $917 = (35976 + ($916<<2)|0);
           $918 = HEAP32[$917>>2]|0;
           $919 = (($918) + 32768)|0;
           $920 = $919 >> 16;
           $921 = Math_imul($920, $915)|0;
           $923 = $921;
          }
          $922 = (($reqcache$i) + ($721<<2)|0);
          HEAP32[$922>>2] = $923;
          $reqhits$6$i = $894;$requantized$2$i = $923;
         } else {
          $892 = (($reqcache$i) + ($721<<2)|0);
          $893 = HEAP32[$892>>2]|0;
          $reqhits$6$i = $reqhits$2$i;$requantized$2$i = $893;
         }
         $924 = (($717) + -1)|0;
         $925 = 1 << $924;
         $926 = $925 & $bitcache$1$i;
         $927 = ($926|0)!=(0);
         $928 = (0 - ($requantized$2$i))|0;
         $929 = $927 ? $928 : $requantized$2$i;
         $cachesz$8$i = $924;$reqhits$7$i = $reqhits$6$i;$storemerge$i = $929;
        }
        HEAP32[$xrptr$065$i>>2] = $storemerge$i;
        $930 = HEAP16[$711>>1]|0;
        $931 = ($930&65535) >>> 8;
        $932 = $931 & 15;
        $933 = $932&65535;
        $934 = ($932<<16>>16)==(0);
        if ($934) {
         $$sink3 = 0;$bitcache$7$i = $bitcache$1$i;$bits_left$7$i = $bits_left$1$i;$cachesz$9$i = $cachesz$8$i;$reqhits$9$i = $reqhits$7$i;
        } else {
         $935 = 1 << $933;
         $936 = $935 & $reqhits$7$i;
         $937 = ($936|0)==(0);
         if ($937) {
          $940 = $935 | $reqhits$7$i;
          $941 = (($exp$2$i|0) % 4)&-1;
          $942 = (($exp$2$i|0) / 4)&-1;
          $943 = (3148 + ($933<<2)|0);
          $944 = HEAP32[$943>>2]|0;
          $945 = $944 & 134217727;
          $946 = $944 >>> 27;
          $947 = (($946) + ($942))|0;
          $948 = ($947|0)<(0);
          do {
           if ($948) {
            $949 = (0 - ($947))|0;
            $950 = ($949>>>0)>(31);
            if ($950) {
             $requantized$0$i16$i = 0;
             break;
            }
            $951 = $947 ^ -1;
            $952 = 1 << $951;
            $953 = (($952) + ($945))|0;
            $954 = $953 >> $949;
            $requantized$0$i16$i = $954;
           } else {
            $955 = ($947|0)>(4);
            if ($955) {
             $956 = (+($945|0));
             $957 = $956 * 3.7252902984619141E-9;
             HEAPF64[$vararg_buffer24>>3] = $957;
             $vararg_ptr27 = ((($vararg_buffer24)) + 8|0);
             HEAP32[$vararg_ptr27>>2] = $947;
             (_fprintf($26,42833,$vararg_buffer24)|0);
             $requantized$0$i16$i = 2147483647;
             break;
            } else {
             $958 = $945 << $947;
             $requantized$0$i16$i = $958;
             break;
            }
           }
          } while(0);
          $959 = ($941|0)==(0);
          if ($959) {
           $969 = $requantized$0$i16$i;
          } else {
           $960 = (($requantized$0$i16$i) + 2048)|0;
           $961 = $960 >> 12;
           $962 = (($941) + 3)|0;
           $963 = (35976 + ($962<<2)|0);
           $964 = HEAP32[$963>>2]|0;
           $965 = (($964) + 32768)|0;
           $966 = $965 >> 16;
           $967 = Math_imul($966, $961)|0;
           $969 = $967;
          }
          $968 = (($reqcache$i) + ($933<<2)|0);
          HEAP32[$968>>2] = $969;
          $reqhits$8$i = $940;$requantized$3$i = $969;
         } else {
          $938 = (($reqcache$i) + ($933<<2)|0);
          $939 = HEAP32[$938>>2]|0;
          $reqhits$8$i = $reqhits$7$i;$requantized$3$i = $939;
         }
         $970 = (($cachesz$8$i) + -1)|0;
         $971 = 1 << $970;
         $972 = $971 & $bitcache$1$i;
         $973 = ($972|0)!=(0);
         $974 = (0 - ($requantized$3$i))|0;
         $975 = $973 ? $974 : $requantized$3$i;
         $$sink3 = $975;$bitcache$7$i = $bitcache$1$i;$bits_left$7$i = $bits_left$1$i;$cachesz$9$i = $970;$reqhits$9$i = $reqhits$8$i;
        }
       } else {
        L174: do {
         switch ($721|0) {
         case 0:  {
          $bitcache$4$i = $bitcache$1$i;$bits_left$4$i = $bits_left$1$i;$cachesz$5$i = $717;$reqhits$4$i = $reqhits$2$i;$storemerge4$i = 0;
          break;
         }
         case 15:  {
          $722 = (($linbits$2$i) + 2)|0;
          $723 = ($717>>>0)<($722>>>0);
          if ($723) {
           $724 = $bitcache$1$i << 16;
           $725 = (_mad_bit_read($peek$i,16)|0);
           $726 = $725 | $724;
           $727 = (($717) + 16)|0;
           $728 = (($bits_left$1$i) + -16)|0;
           $bitcache$2$i = $726;$bits_left$2$i = $728;$cachesz$3$i = $727;
          } else {
           $bitcache$2$i = $bitcache$1$i;$bits_left$2$i = $bits_left$1$i;$cachesz$3$i = $717;
          }
          $729 = (($cachesz$3$i) - ($linbits$2$i))|0;
          $730 = $bitcache$2$i >>> $729;
          $731 = 1 << $linbits$2$i;
          $732 = (($731) + -1)|0;
          $733 = $730 & $732;
          $734 = (($733) + 15)|0;
          $735 = (($exp$2$i|0) % 4)&-1;
          $736 = (($exp$2$i|0) / 4)&-1;
          $737 = (3148 + ($734<<2)|0);
          $738 = HEAP32[$737>>2]|0;
          $739 = $738 & 134217727;
          $740 = $738 >>> 27;
          $741 = (($740) + ($736))|0;
          $742 = ($741|0)<(0);
          do {
           if ($742) {
            $743 = (0 - ($741))|0;
            $744 = ($743>>>0)>(31);
            if ($744) {
             $requantized$0$i6$i = 0;
             break;
            }
            $745 = $741 ^ -1;
            $746 = 1 << $745;
            $747 = (($746) + ($739))|0;
            $748 = $747 >> $743;
            $requantized$0$i6$i = $748;
           } else {
            $749 = ($741|0)>(4);
            if ($749) {
             $750 = (+($739|0));
             $751 = $750 * 3.7252902984619141E-9;
             HEAPF64[$vararg_buffer>>3] = $751;
             $vararg_ptr7 = ((($vararg_buffer)) + 8|0);
             HEAP32[$vararg_ptr7>>2] = $741;
             (_fprintf($26,42833,$vararg_buffer)|0);
             $requantized$0$i6$i = 2147483647;
             break;
            } else {
             $752 = $739 << $741;
             $requantized$0$i6$i = $752;
             break;
            }
           }
          } while(0);
          $753 = ($735|0)==(0);
          if ($753) {
           $bitcache$3$i = $bitcache$2$i;$bits_left$3$i = $bits_left$2$i;$cachesz$4$i = $729;$reqhits$3$i = $reqhits$2$i;$requantized$0$i = $requantized$0$i6$i;
           label = 108;
           break L174;
          }
          $754 = (($requantized$0$i6$i) + 2048)|0;
          $755 = $754 >> 12;
          $756 = (($735) + 3)|0;
          $757 = (35976 + ($756<<2)|0);
          $758 = HEAP32[$757>>2]|0;
          $759 = (($758) + 32768)|0;
          $760 = $759 >> 16;
          $761 = Math_imul($760, $755)|0;
          $bitcache$3$i = $bitcache$2$i;$bits_left$3$i = $bits_left$2$i;$cachesz$4$i = $729;$reqhits$3$i = $reqhits$2$i;$requantized$0$i = $761;
          label = 108;
          break;
         }
         default: {
          $762 = 1 << $721;
          $763 = $762 & $reqhits$2$i;
          $764 = ($763|0)==(0);
          if (!($764)) {
           $765 = (($reqcache$i) + ($721<<2)|0);
           $766 = HEAP32[$765>>2]|0;
           $bitcache$3$i = $bitcache$1$i;$bits_left$3$i = $bits_left$1$i;$cachesz$4$i = $717;$reqhits$3$i = $reqhits$2$i;$requantized$0$i = $766;
           label = 108;
           break L174;
          }
          $767 = $762 | $reqhits$2$i;
          $768 = (($exp$2$i|0) % 4)&-1;
          $769 = (($exp$2$i|0) / 4)&-1;
          $770 = (3148 + ($721<<2)|0);
          $771 = HEAP32[$770>>2]|0;
          $772 = $771 & 134217727;
          $773 = $771 >>> 27;
          $774 = (($773) + ($769))|0;
          $775 = ($774|0)<(0);
          do {
           if ($775) {
            $776 = (0 - ($774))|0;
            $777 = ($776>>>0)>(31);
            if ($777) {
             $requantized$0$i8$i = 0;
             break;
            }
            $778 = $774 ^ -1;
            $779 = 1 << $778;
            $780 = (($779) + ($772))|0;
            $781 = $780 >> $776;
            $requantized$0$i8$i = $781;
           } else {
            $782 = ($774|0)>(4);
            if ($782) {
             $783 = (+($772|0));
             $784 = $783 * 3.7252902984619141E-9;
             HEAPF64[$vararg_buffer8>>3] = $784;
             $vararg_ptr11 = ((($vararg_buffer8)) + 8|0);
             HEAP32[$vararg_ptr11>>2] = $774;
             (_fprintf($26,42833,$vararg_buffer8)|0);
             $requantized$0$i8$i = 2147483647;
             break;
            } else {
             $785 = $772 << $774;
             $requantized$0$i8$i = $785;
             break;
            }
           }
          } while(0);
          $786 = ($768|0)==(0);
          if ($786) {
           $796 = $requantized$0$i8$i;
          } else {
           $787 = (($requantized$0$i8$i) + 2048)|0;
           $788 = $787 >> 12;
           $789 = (($768) + 3)|0;
           $790 = (35976 + ($789<<2)|0);
           $791 = HEAP32[$790>>2]|0;
           $792 = (($791) + 32768)|0;
           $793 = $792 >> 16;
           $794 = Math_imul($793, $788)|0;
           $796 = $794;
          }
          $795 = (($reqcache$i) + ($721<<2)|0);
          HEAP32[$795>>2] = $796;
          $bitcache$3$i = $bitcache$1$i;$bits_left$3$i = $bits_left$1$i;$cachesz$4$i = $717;$reqhits$3$i = $767;$requantized$0$i = $796;
          label = 108;
         }
         }
        } while(0);
        if ((label|0) == 108) {
         label = 0;
         $797 = (($cachesz$4$i) + -1)|0;
         $798 = 1 << $797;
         $799 = $798 & $bitcache$3$i;
         $800 = ($799|0)!=(0);
         $801 = (0 - ($requantized$0$i))|0;
         $802 = $800 ? $801 : $requantized$0$i;
         $bitcache$4$i = $bitcache$3$i;$bits_left$4$i = $bits_left$3$i;$cachesz$5$i = $797;$reqhits$4$i = $reqhits$3$i;$storemerge4$i = $802;
        }
        HEAP32[$xrptr$065$i>>2] = $storemerge4$i;
        $803 = HEAP16[$711>>1]|0;
        $804 = ($803&65535) >>> 8;
        $805 = $804 & 15;
        $806 = $805&65535;
        L206: do {
         switch ($806|0) {
         case 0:  {
          $$sink3 = 0;$bitcache$7$i = $bitcache$4$i;$bits_left$7$i = $bits_left$4$i;$cachesz$9$i = $cachesz$5$i;$reqhits$9$i = $reqhits$4$i;
          break L137;
          break;
         }
         case 15:  {
          $807 = (($linbits$2$i) + 1)|0;
          $808 = ($cachesz$5$i>>>0)<($807>>>0);
          if ($808) {
           $809 = $bitcache$4$i << 16;
           $810 = (_mad_bit_read($peek$i,16)|0);
           $811 = $810 | $809;
           $812 = (($cachesz$5$i) + 16)|0;
           $813 = (($bits_left$4$i) + -16)|0;
           $bitcache$5$i = $811;$bits_left$5$i = $813;$cachesz$6$i = $812;
          } else {
           $bitcache$5$i = $bitcache$4$i;$bits_left$5$i = $bits_left$4$i;$cachesz$6$i = $cachesz$5$i;
          }
          $814 = (($cachesz$6$i) - ($linbits$2$i))|0;
          $815 = $bitcache$5$i >>> $814;
          $816 = 1 << $linbits$2$i;
          $817 = (($816) + -1)|0;
          $818 = $815 & $817;
          $819 = (($818) + 15)|0;
          $820 = (($exp$2$i|0) % 4)&-1;
          $821 = (($exp$2$i|0) / 4)&-1;
          $822 = (3148 + ($819<<2)|0);
          $823 = HEAP32[$822>>2]|0;
          $824 = $823 & 134217727;
          $825 = $823 >>> 27;
          $826 = (($825) + ($821))|0;
          $827 = ($826|0)<(0);
          do {
           if ($827) {
            $828 = (0 - ($826))|0;
            $829 = ($828>>>0)>(31);
            if ($829) {
             $requantized$0$i10$i = 0;
             break;
            }
            $830 = $826 ^ -1;
            $831 = 1 << $830;
            $832 = (($831) + ($824))|0;
            $833 = $832 >> $828;
            $requantized$0$i10$i = $833;
           } else {
            $834 = ($826|0)>(4);
            if ($834) {
             $835 = (+($824|0));
             $836 = $835 * 3.7252902984619141E-9;
             HEAPF64[$vararg_buffer12>>3] = $836;
             $vararg_ptr15 = ((($vararg_buffer12)) + 8|0);
             HEAP32[$vararg_ptr15>>2] = $826;
             (_fprintf($26,42833,$vararg_buffer12)|0);
             $requantized$0$i10$i = 2147483647;
             break;
            } else {
             $837 = $824 << $826;
             $requantized$0$i10$i = $837;
             break;
            }
           }
          } while(0);
          $838 = ($820|0)==(0);
          if ($838) {
           $bitcache$6$i = $bitcache$5$i;$bits_left$6$i = $bits_left$5$i;$cachesz$7$i = $814;$reqhits$5$i = $reqhits$4$i;$requantized$1$i = $requantized$0$i10$i;
           break L206;
          }
          $839 = (($requantized$0$i10$i) + 2048)|0;
          $840 = $839 >> 12;
          $841 = (($820) + 3)|0;
          $842 = (35976 + ($841<<2)|0);
          $843 = HEAP32[$842>>2]|0;
          $844 = (($843) + 32768)|0;
          $845 = $844 >> 16;
          $846 = Math_imul($845, $840)|0;
          $bitcache$6$i = $bitcache$5$i;$bits_left$6$i = $bits_left$5$i;$cachesz$7$i = $814;$reqhits$5$i = $reqhits$4$i;$requantized$1$i = $846;
          break;
         }
         default: {
          $847 = 1 << $806;
          $848 = $847 & $reqhits$4$i;
          $849 = ($848|0)==(0);
          if (!($849)) {
           $850 = (($reqcache$i) + ($806<<2)|0);
           $851 = HEAP32[$850>>2]|0;
           $bitcache$6$i = $bitcache$4$i;$bits_left$6$i = $bits_left$4$i;$cachesz$7$i = $cachesz$5$i;$reqhits$5$i = $reqhits$4$i;$requantized$1$i = $851;
           break L206;
          }
          $852 = $847 | $reqhits$4$i;
          $853 = (($exp$2$i|0) % 4)&-1;
          $854 = (($exp$2$i|0) / 4)&-1;
          $855 = (3148 + ($806<<2)|0);
          $856 = HEAP32[$855>>2]|0;
          $857 = $856 & 134217727;
          $858 = $856 >>> 27;
          $859 = (($858) + ($854))|0;
          $860 = ($859|0)<(0);
          do {
           if ($860) {
            $861 = (0 - ($859))|0;
            $862 = ($861>>>0)>(31);
            if ($862) {
             $requantized$0$i12$i = 0;
             break;
            }
            $863 = $859 ^ -1;
            $864 = 1 << $863;
            $865 = (($864) + ($857))|0;
            $866 = $865 >> $861;
            $requantized$0$i12$i = $866;
           } else {
            $867 = ($859|0)>(4);
            if ($867) {
             $868 = (+($857|0));
             $869 = $868 * 3.7252902984619141E-9;
             HEAPF64[$vararg_buffer16>>3] = $869;
             $vararg_ptr19 = ((($vararg_buffer16)) + 8|0);
             HEAP32[$vararg_ptr19>>2] = $859;
             (_fprintf($26,42833,$vararg_buffer16)|0);
             $requantized$0$i12$i = 2147483647;
             break;
            } else {
             $870 = $857 << $859;
             $requantized$0$i12$i = $870;
             break;
            }
           }
          } while(0);
          $871 = ($853|0)==(0);
          if ($871) {
           $881 = $requantized$0$i12$i;
          } else {
           $872 = (($requantized$0$i12$i) + 2048)|0;
           $873 = $872 >> 12;
           $874 = (($853) + 3)|0;
           $875 = (35976 + ($874<<2)|0);
           $876 = HEAP32[$875>>2]|0;
           $877 = (($876) + 32768)|0;
           $878 = $877 >> 16;
           $879 = Math_imul($878, $873)|0;
           $881 = $879;
          }
          $880 = (($reqcache$i) + ($806<<2)|0);
          HEAP32[$880>>2] = $881;
          $bitcache$6$i = $bitcache$4$i;$bits_left$6$i = $bits_left$4$i;$cachesz$7$i = $cachesz$5$i;$reqhits$5$i = $852;$requantized$1$i = $881;
         }
         }
        } while(0);
        $882 = (($cachesz$7$i) + -1)|0;
        $883 = 1 << $882;
        $884 = $883 & $bitcache$6$i;
        $885 = ($884|0)!=(0);
        $886 = (0 - ($requantized$1$i))|0;
        $887 = $885 ? $886 : $requantized$1$i;
        $$sink3 = $887;$bitcache$7$i = $bitcache$6$i;$bits_left$7$i = $bits_left$6$i;$cachesz$9$i = $882;$reqhits$9$i = $reqhits$5$i;
       }
      } while(0);
      $976 = ((($xrptr$065$i)) + 4|0);
      HEAP32[$976>>2] = $$sink3;
      $977 = ((($xrptr$065$i)) + 8|0);
      $978 = ($649|0)!=(0);
      $979 = (($cachesz$9$i) + ($bits_left$7$i))|0;
      $980 = ($979|0)>(0);
      $or$cond$i9 = $978 & $980;
      if ($or$cond$i9) {
       $$0175$i = $$12$i;$$in$i = $649;$bitcache$068$i = $bitcache$7$i;$bits_left$063$i = $bits_left$7$i;$cachesz$064$i = $cachesz$9$i;$exp$061$i = $exp$2$i;$expptr$062$i = $expptr$1$i;$linbits$072$i = $linbits$2$i;$rcount$070$i = $rcount$3$i;$region$069$i = $region$2$i;$reqhits$074$i = $reqhits$9$i;$sfbound$067$i = $sfbound$1$i;$startbits$073$i = $startbits$2$i;$table$071$i = $table$2$i;$xrptr$065$i = $977;
      } else {
       $$01$lcssa$i = $$12$i;$bitcache$0$lcssa$i = $bitcache$7$i;$bits_left$0$lcssa$i = $bits_left$7$i;$cachesz$0$lcssa$i = $cachesz$9$i;$exp$0$lcssa$i = $exp$2$i;$expptr$0$lcssa$i = $expptr$1$i;$sfbound$0$lcssa$i = $sfbound$1$i;$xrptr$0$lcssa$i = $977;
       break;
      }
     }
    } else {
     $$01$lcssa$i = $630;$bitcache$0$lcssa$i = $620;$bits_left$0$lcssa$i = $631;$cachesz$0$lcssa$i = $619;$exp$0$lcssa$i = $632;$expptr$0$lcssa$i = $25;$sfbound$0$lcssa$i = $629;$xrptr$0$lcssa$i = $505;
    }
    $981 = (($bits_left$0$lcssa$i) + ($cachesz$0$lcssa$i))|0;
    $982 = ($981|0)<(0);
    if ($982) {
     $$1$i$ph = 568;
     label = 209;
     break L4;
    }
    $983 = HEAP8[$514>>0]|0;
    $984 = $983&255;
    $985 = $984 & 1;
    $986 = (600 + ($985<<2)|0);
    $987 = HEAP32[$986>>2]|0;
    $988 = (($exp$0$lcssa$i|0) % 4)&-1;
    $989 = (($exp$0$lcssa$i|0) / 4)&-1;
    $990 = (($989) + 2)|0;
    $991 = ($exp$0$lcssa$i|0)<(-11);
    do {
     if ($991) {
      $992 = (-2 - ($989))|0;
      $993 = ($992>>>0)>(31);
      if ($993) {
       $requantized$0$i18$i = 0;
      } else {
       $994 = (-3 - ($989))|0;
       $995 = 1 << $994;
       $996 = (($995) + 67108864)|0;
       $997 = $996 >> $992;
       $requantized$0$i18$i = $997;
      }
     } else {
      $998 = ($990|0)>(4);
      if ($998) {
       HEAPF64[$vararg_buffer28>>3] = 0.25;
       $vararg_ptr31 = ((($vararg_buffer28)) + 8|0);
       HEAP32[$vararg_ptr31>>2] = $990;
       (_fprintf($26,42833,$vararg_buffer28)|0);
       $requantized$0$i18$i = 2147483647;
       break;
      } else {
       $999 = 67108864 << $990;
       $requantized$0$i18$i = $999;
       break;
      }
     }
    } while(0);
    $1000 = ($988|0)==(0);
    if ($1000) {
     $requantized2$0$ph$i = $requantized$0$i18$i;
    } else {
     $1001 = (($requantized$0$i18$i) + 2048)|0;
     $1002 = $1001 >> 12;
     $1003 = (($988) + 3)|0;
     $1004 = (35976 + ($1003<<2)|0);
     $1005 = HEAP32[$1004>>2]|0;
     $1006 = (($1005) + 32768)|0;
     $1007 = $1006 >> 16;
     $1008 = Math_imul($1007, $1002)|0;
     $requantized2$0$ph$i = $1008;
    }
    $1009 = ($981|0)>(0);
    $1010 = (((($xr) + (($ch$0174*2304)|0)|0)) + 2288|0);
    $1011 = ($xrptr$0$lcssa$i>>>0)<=($1010>>>0);
    $1012 = $1011 & $1009;
    if ($1012) {
     $$348$i = $$01$lcssa$i;$bitcache$947$i = $bitcache$0$lcssa$i;$bits_left$943$i = $bits_left$0$lcssa$i;$cachesz$1144$i = $cachesz$0$lcssa$i;$exp$441$i = $exp$0$lcssa$i;$expptr$342$i = $expptr$0$lcssa$i;$requantized2$049$i = $requantized2$0$ph$i;$sfbound$346$i = $sfbound$0$lcssa$i;$xrptr$245$i = $xrptr$0$lcssa$i;
     while(1) {
      $1013 = ($cachesz$1144$i|0)<(10);
      if ($1013) {
       $1014 = $bitcache$947$i << 16;
       $1015 = (_mad_bit_read($peek$i,16)|0);
       $1016 = $1015 | $1014;
       $1017 = (($cachesz$1144$i) + 16)|0;
       $1018 = (($bits_left$943$i) + -16)|0;
       $bitcache$10$i = $1016;$bits_left$10$i = $1018;$cachesz$12$i = $1017;
      } else {
       $bitcache$10$i = $bitcache$947$i;$bits_left$10$i = $bits_left$943$i;$cachesz$12$i = $cachesz$1144$i;
      }
      $1019 = (($cachesz$12$i) + -4)|0;
      $1020 = $bitcache$10$i >>> $1019;
      $1021 = $1020 & 15;
      $1022 = (($987) + ($1021<<1)|0);
      $1023 = HEAP8[$1022>>0]|0;
      $1024 = $1023 & 1;
      $1025 = ($1024<<24>>24)==(0);
      if ($1025) {
       $1026 = HEAP16[$1022>>1]|0;
       $1027 = ($1026&65535) >>> 4;
       $1028 = $1027&65535;
       $1029 = ($1026&65535) >>> 1;
       $1030 = $1029 & 7;
       $1031 = $1030&65535;
       $1032 = (($1019) - ($1031))|0;
       $1033 = $bitcache$10$i >>> $1032;
       $1034 = 1 << $1031;
       $1035 = (($1034) + -1)|0;
       $1036 = $1033 & $1035;
       $1037 = (($1036) + ($1028))|0;
       $1038 = (($987) + ($1037<<1)|0);
       $$pre$i = HEAP8[$1038>>0]|0;
       $1040 = $$pre$i;$cachesz$13$i = $1019;$quad$0$i = $1038;
      } else {
       $1040 = $1023;$cachesz$13$i = $cachesz$12$i;$quad$0$i = $1022;
      }
      $1039 = ($1040&255) >>> 1;
      $1041 = $1039 & 7;
      $1042 = $1041&255;
      $1043 = (($cachesz$13$i) - ($1042))|0;
      $1044 = ($xrptr$245$i|0)==($sfbound$346$i|0);
      if ($1044) {
       $1045 = ((($$348$i)) + 1|0);
       $1046 = HEAP8[$$348$i>>0]|0;
       $1047 = $1046&255;
       $1048 = (($sfbound$346$i) + ($1047<<2)|0);
       $1049 = HEAP32[$expptr$342$i>>2]|0;
       $1050 = ($exp$441$i|0)==($1049|0);
       do {
        if ($1050) {
         $exp$5$i = $exp$441$i;$requantized2$1$i = $requantized2$049$i;
        } else {
         $1051 = (($1049|0) % 4)&-1;
         $1052 = (($1049|0) / 4)&-1;
         $1053 = (($1052) + 2)|0;
         $1054 = ($1049|0)<(-11);
         do {
          if ($1054) {
           $1055 = (-2 - ($1052))|0;
           $1056 = ($1055>>>0)>(31);
           if ($1056) {
            $requantized$0$i20$i = 0;
            break;
           }
           $1057 = (-3 - ($1052))|0;
           $1058 = 1 << $1057;
           $1059 = (($1058) + 67108864)|0;
           $1060 = $1059 >> $1055;
           $requantized$0$i20$i = $1060;
          } else {
           $1061 = ($1053|0)>(4);
           if ($1061) {
            HEAPF64[$vararg_buffer32>>3] = 0.25;
            $vararg_ptr35 = ((($vararg_buffer32)) + 8|0);
            HEAP32[$vararg_ptr35>>2] = $1053;
            (_fprintf($26,42833,$vararg_buffer32)|0);
            $requantized$0$i20$i = 2147483647;
            break;
           } else {
            $1062 = 67108864 << $1053;
            $requantized$0$i20$i = $1062;
            break;
           }
          }
         } while(0);
         $1063 = ($1051|0)==(0);
         if ($1063) {
          $exp$5$i = $1049;$requantized2$1$i = $requantized$0$i20$i;
          break;
         }
         $1064 = (($requantized$0$i20$i) + 2048)|0;
         $1065 = $1064 >> 12;
         $1066 = (($1051) + 3)|0;
         $1067 = (35976 + ($1066<<2)|0);
         $1068 = HEAP32[$1067>>2]|0;
         $1069 = (($1068) + 32768)|0;
         $1070 = $1069 >> 16;
         $1071 = Math_imul($1070, $1065)|0;
         $exp$5$i = $1049;$requantized2$1$i = $1071;
        }
       } while(0);
       $1072 = ((($expptr$342$i)) + 4|0);
       $$pre94$i = HEAP8[$quad$0$i>>0]|0;
       $$4$i = $1045;$1074 = $$pre94$i;$exp$6$i = $exp$5$i;$expptr$4$i = $1072;$requantized2$2$i = $requantized2$1$i;$sfbound$4$i = $1048;
      } else {
       $$4$i = $$348$i;$1074 = $1040;$exp$6$i = $exp$441$i;$expptr$4$i = $expptr$342$i;$requantized2$2$i = $requantized2$049$i;$sfbound$4$i = $sfbound$346$i;
      }
      $1073 = $1074 & 16;
      $1075 = ($1073<<24>>24)==(0);
      if ($1075) {
       $1082 = 0;$cachesz$14$i = $1043;
      } else {
       $1076 = (($1043) + -1)|0;
       $1077 = 1 << $1076;
       $1078 = $1077 & $bitcache$10$i;
       $1079 = ($1078|0)!=(0);
       $1080 = (0 - ($requantized2$2$i))|0;
       $1081 = $1079 ? $1080 : $requantized2$2$i;
       $1082 = $1081;$cachesz$14$i = $1076;
      }
      HEAP32[$xrptr$245$i>>2] = $1082;
      $1083 = HEAP8[$quad$0$i>>0]|0;
      $1084 = $1083 & 32;
      $1085 = ($1084<<24>>24)==(0);
      if ($1085) {
       $1093 = 0;$cachesz$15$i = $cachesz$14$i;
      } else {
       $1086 = (($cachesz$14$i) + -1)|0;
       $1087 = 1 << $1086;
       $1088 = $1087 & $bitcache$10$i;
       $1089 = ($1088|0)!=(0);
       $1090 = (0 - ($requantized2$2$i))|0;
       $1091 = $1089 ? $1090 : $requantized2$2$i;
       $1093 = $1091;$cachesz$15$i = $1086;
      }
      $1092 = ((($xrptr$245$i)) + 4|0);
      HEAP32[$1092>>2] = $1093;
      $1094 = ((($xrptr$245$i)) + 8|0);
      $1095 = ($1094|0)==($sfbound$4$i|0);
      if ($1095) {
       $1096 = ((($$4$i)) + 1|0);
       $1097 = HEAP8[$$4$i>>0]|0;
       $1098 = $1097&255;
       $1099 = (($sfbound$4$i) + ($1098<<2)|0);
       $1100 = HEAP32[$expptr$4$i>>2]|0;
       $1101 = ($exp$6$i|0)==($1100|0);
       do {
        if ($1101) {
         $exp$7$i = $exp$6$i;$requantized2$3$i = $requantized2$2$i;
        } else {
         $1102 = (($1100|0) % 4)&-1;
         $1103 = (($1100|0) / 4)&-1;
         $1104 = (($1103) + 2)|0;
         $1105 = ($1100|0)<(-11);
         do {
          if ($1105) {
           $1106 = (-2 - ($1103))|0;
           $1107 = ($1106>>>0)>(31);
           if ($1107) {
            $requantized$0$i$i = 0;
            break;
           }
           $1108 = (-3 - ($1103))|0;
           $1109 = 1 << $1108;
           $1110 = (($1109) + 67108864)|0;
           $1111 = $1110 >> $1106;
           $requantized$0$i$i = $1111;
          } else {
           $1112 = ($1104|0)>(4);
           if ($1112) {
            HEAPF64[$vararg_buffer36>>3] = 0.25;
            $vararg_ptr39 = ((($vararg_buffer36)) + 8|0);
            HEAP32[$vararg_ptr39>>2] = $1104;
            (_fprintf($26,42833,$vararg_buffer36)|0);
            $requantized$0$i$i = 2147483647;
            break;
           } else {
            $1113 = 67108864 << $1104;
            $requantized$0$i$i = $1113;
            break;
           }
          }
         } while(0);
         $1114 = ($1102|0)==(0);
         if ($1114) {
          $exp$7$i = $1100;$requantized2$3$i = $requantized$0$i$i;
          break;
         }
         $1115 = (($requantized$0$i$i) + 2048)|0;
         $1116 = $1115 >> 12;
         $1117 = (($1102) + 3)|0;
         $1118 = (35976 + ($1117<<2)|0);
         $1119 = HEAP32[$1118>>2]|0;
         $1120 = (($1119) + 32768)|0;
         $1121 = $1120 >> 16;
         $1122 = Math_imul($1121, $1116)|0;
         $exp$7$i = $1100;$requantized2$3$i = $1122;
        }
       } while(0);
       $1123 = ((($expptr$4$i)) + 4|0);
       $$5$i = $1096;$exp$8$i = $exp$7$i;$expptr$5$i = $1123;$requantized2$4$i = $requantized2$3$i;$sfbound$5$i = $1099;
      } else {
       $$5$i = $$4$i;$exp$8$i = $exp$6$i;$expptr$5$i = $expptr$4$i;$requantized2$4$i = $requantized2$2$i;$sfbound$5$i = $sfbound$4$i;
      }
      $1124 = HEAP8[$quad$0$i>>0]|0;
      $1125 = $1124 & 64;
      $1126 = ($1125<<24>>24)==(0);
      if ($1126) {
       $1133 = 0;$cachesz$16$i = $cachesz$15$i;
      } else {
       $1127 = (($cachesz$15$i) + -1)|0;
       $1128 = 1 << $1127;
       $1129 = $1128 & $bitcache$10$i;
       $1130 = ($1129|0)!=(0);
       $1131 = (0 - ($requantized2$4$i))|0;
       $1132 = $1130 ? $1131 : $requantized2$4$i;
       $1133 = $1132;$cachesz$16$i = $1127;
      }
      HEAP32[$1094>>2] = $1133;
      $1134 = HEAP8[$quad$0$i>>0]|0;
      $1135 = ($1134<<24>>24)<(0);
      if ($1135) {
       $1136 = (($cachesz$16$i) + -1)|0;
       $1137 = 1 << $1136;
       $1138 = $1137 & $bitcache$10$i;
       $1139 = ($1138|0)!=(0);
       $1140 = (0 - ($requantized2$4$i))|0;
       $1141 = $1139 ? $1140 : $requantized2$4$i;
       $1143 = $1141;$cachesz$17$i = $1136;
      } else {
       $1143 = 0;$cachesz$17$i = $cachesz$16$i;
      }
      $1142 = ((($xrptr$245$i)) + 12|0);
      HEAP32[$1142>>2] = $1143;
      $1144 = ((($xrptr$245$i)) + 16|0);
      $1145 = (($cachesz$17$i) + ($bits_left$10$i))|0;
      $1146 = ($1145|0)>(0);
      $1147 = ($1144>>>0)<=($1010>>>0);
      $1148 = $1147 & $1146;
      if ($1148) {
       $$348$i = $$5$i;$bitcache$947$i = $bitcache$10$i;$bits_left$943$i = $bits_left$10$i;$cachesz$1144$i = $cachesz$17$i;$exp$441$i = $exp$8$i;$expptr$342$i = $expptr$5$i;$requantized2$049$i = $requantized2$4$i;$sfbound$346$i = $sfbound$5$i;$xrptr$245$i = $1144;
      } else {
       $$lcssa$i = $1145;$bits_left$9$lcssa$i = $bits_left$10$i;$xrptr$2$lcssa$i = $1144;
       break;
      }
     }
    } else {
     $$lcssa$i = $981;$bits_left$9$lcssa$i = $bits_left$0$lcssa$i;$xrptr$2$lcssa$i = $xrptr$0$lcssa$i;
    }
    $1149 = ($$lcssa$i|0)<(0);
    $1150 = ((($xrptr$2$lcssa$i)) + -16|0);
    $$xrptr$2$i = $1149 ? $1150 : $xrptr$2$lcssa$i;
    $1151 = ($bits_left$9$lcssa$i|0)>(-65);
    if (!($1151)) {
     label = 207;
     break L4;
    }
    $1152 = (((($xr) + (($ch$0174*2304)|0)|0)) + 2304|0);
    $1153 = ($$xrptr$2$i>>>0)<($1152>>>0);
    if ($1153) {
     $xrptr$440$i = $$xrptr$2$i;
     while(1) {
      HEAP32[$xrptr$440$i>>2] = 0;
      $1154 = ((($xrptr$440$i)) + 4|0);
      HEAP32[$1154>>2] = 0;
      $1155 = ((($xrptr$440$i)) + 8|0);
      $1156 = ($1155>>>0)<($1152>>>0);
      if ($1156) {
       $xrptr$440$i = $1155;
      } else {
       break;
      }
     }
    }
    $1157 = (($ch$0174) + 1)|0;
    $1158 = ($1157>>>0)<($nch>>>0);
    if ($1158) {
     $ch$0174 = $1157;
    } else {
     break;
    }
   }
  }
  $1159 = HEAP32[$16>>2]|0;
  $1160 = ($1159|0)==(2);
  if ($1160) {
   $1161 = HEAP32[$17>>2]|0;
   $1162 = ($1161|0)==(0);
   if (!($1162)) {
    $1163 = HEAP32[$sfbwidth>>2]|0;
    $1164 = (((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 9|0);
    $1165 = HEAP8[$1164>>0]|0;
    $1166 = (((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 67|0);
    $1167 = HEAP8[$1166>>0]|0;
    $1168 = ($1165<<24>>24)==($1167<<24>>24);
    if (!($1168)) {
     label = 271;
     break;
    }
    $1169 = (((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 8|0);
    $1170 = HEAP8[$1169>>0]|0;
    $1171 = (((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 66|0);
    $1172 = HEAP8[$1171>>0]|0;
    $1173 = $1172 ^ $1170;
    $1174 = $1173 & 8;
    $1175 = ($1174<<24>>24)==(0);
    if (!($1175)) {
     label = 271;
     break;
    }
    $1176 = $1161&65535;
    HEAP16[$modes$i>>1] = $1176;
    HEAP16[$28>>1] = $1176;
    HEAP16[$29>>1] = $1176;
    HEAP16[$30>>1] = $1176;
    HEAP16[$31>>1] = $1176;
    HEAP16[$32>>1] = $1176;
    HEAP16[$33>>1] = $1176;
    HEAP16[$34>>1] = $1176;
    HEAP16[$35>>1] = $1176;
    HEAP16[$36>>1] = $1176;
    HEAP16[$37>>1] = $1176;
    HEAP16[$38>>1] = $1176;
    HEAP16[$39>>1] = $1176;
    HEAP16[$40>>1] = $1176;
    HEAP16[$41>>1] = $1176;
    HEAP16[$42>>1] = $1176;
    HEAP16[$43>>1] = $1176;
    HEAP16[$44>>1] = $1176;
    HEAP16[$45>>1] = $1176;
    HEAP16[$46>>1] = $1176;
    HEAP16[$47>>1] = $1176;
    HEAP16[$48>>1] = $1176;
    HEAP16[$49>>1] = $1176;
    HEAP16[$50>>1] = $1176;
    HEAP16[$51>>1] = $1176;
    HEAP16[$52>>1] = $1176;
    HEAP16[$53>>1] = $1176;
    HEAP16[$54>>1] = $1176;
    HEAP16[$55>>1] = $1176;
    HEAP16[$56>>1] = $1176;
    HEAP16[$57>>1] = $1176;
    HEAP16[$58>>1] = $1176;
    HEAP16[$59>>1] = $1176;
    HEAP16[$60>>1] = $1176;
    HEAP16[$61>>1] = $1176;
    HEAP16[$62>>1] = $1176;
    HEAP16[$63>>1] = $1176;
    HEAP16[$64>>1] = $1176;
    HEAP16[$65>>1] = $1176;
    $1177 = $1161 & 1;
    $1178 = ($1177|0)==(0);
    L313: do {
     if (!($1178)) {
      $1179 = HEAP32[$2>>2]|0;
      $1180 = $1179 | 256;
      HEAP32[$2>>2] = $1180;
      $1181 = ($1165<<24>>24)==(2);
      if ($1181) {
       HEAP32[$19>>2] = 0;
       HEAP32[$20>>2] = 0;
       HEAP32[$bound$i>>2] = 0;
       $1182 = $1172 & 8;
       $1183 = ($1182<<24>>24)==(0);
       if ($1183) {
        $l$180$i = 0;$lower$276$i = 0;$right_xr$179$i = $18;$start$078$i = 0;
        label = 223;
       } else {
        $l$051$i = 0;$lower$049$i = 0;$right_xr$050$i = $18;$sfbi$052$i = 0;
        while(1) {
         $1184 = (($sfbi$052$i) + 1)|0;
         $1185 = (($1163) + ($sfbi$052$i)|0);
         $1186 = HEAP8[$1185>>0]|0;
         $1187 = $1186&255;
         $1188 = ($1186<<24>>24)==(0);
         L320: do {
          if ($1188) {
           $lower$1$i = $lower$049$i;
          } else {
           $i$142$i = 0;
           while(1) {
            $1191 = (($right_xr$050$i) + ($i$142$i<<2)|0);
            $1192 = HEAP32[$1191>>2]|0;
            $1193 = ($1192|0)==(0);
            $1190 = (($i$142$i) + 1)|0;
            if (!($1193)) {
             $lower$1$i = $1184;
             break L320;
            }
            $1189 = ($1190>>>0)<($1187>>>0);
            if ($1189) {
             $i$142$i = $1190;
            } else {
             $lower$1$i = $lower$049$i;
             break;
            }
           }
          }
         } while(0);
         $1194 = (($right_xr$050$i) + ($1187<<2)|0);
         $1195 = (($1187) + ($l$051$i))|0;
         $1196 = ($1195>>>0)<(36);
         if ($1196) {
          $l$051$i = $1195;$lower$049$i = $lower$1$i;$right_xr$050$i = $1194;$sfbi$052$i = $1184;
         } else {
          $$lcssa336 = $1184;$$lcssa337 = $1194;$$lcssa338 = $1195;$lower$1$i$lcssa = $lower$1$i;
          break;
         }
        }
        $1197 = ($$lcssa338>>>0)<(576);
        if ($1197) {
         $l$180$i = $$lcssa338;$lower$276$i = $lower$1$i$lcssa;$right_xr$179$i = $$lcssa337;$start$078$i = $$lcssa336;
         label = 223;
        } else {
         $lower$275$i = $lower$1$i$lcssa;$max$0$lcssa$i = 0;$start$077$i = $$lcssa336;
        }
       }
       if ((label|0) == 223) {
        label = 0;
        $l$239$i = $l$180$i;$max$036$i = 0;$right_xr$238$i = $right_xr$179$i;$sfbi$240$i = $start$078$i;$w$037$i = 0;
        while(1) {
         $1198 = (($sfbi$240$i) + 1)|0;
         $1199 = (($1163) + ($sfbi$240$i)|0);
         $1200 = HEAP8[$1199>>0]|0;
         $1201 = $1200&255;
         $1202 = ($1200<<24>>24)==(0);
         L330: do {
          if ($1202) {
           $max$1$i = $max$036$i;
          } else {
           $i$234$i = 0;
           while(1) {
            $1205 = (($right_xr$238$i) + ($i$234$i<<2)|0);
            $1206 = HEAP32[$1205>>2]|0;
            $1207 = ($1206|0)==(0);
            $1204 = (($i$234$i) + 1)|0;
            if (!($1207)) {
             break;
            }
            $1203 = ($1204>>>0)<($1201>>>0);
            if ($1203) {
             $i$234$i = $1204;
            } else {
             $max$1$i = $max$036$i;
             break L330;
            }
           }
           $1208 = (($bound$i) + ($w$037$i<<2)|0);
           HEAP32[$1208>>2] = $1198;
           $max$1$i = $1198;
          }
         } while(0);
         $1209 = (($right_xr$238$i) + ($1201<<2)|0);
         $1210 = (($1201) + ($l$239$i))|0;
         $1211 = (($w$037$i) + 1)|0;
         $1212 = (($1211>>>0) % 3)&-1;
         $1213 = ($1210>>>0)<(576);
         if ($1213) {
          $l$239$i = $1210;$max$036$i = $max$1$i;$right_xr$238$i = $1209;$sfbi$240$i = $1198;$w$037$i = $1212;
         } else {
          $lower$275$i = $lower$276$i;$max$0$lcssa$i = $max$1$i;$start$077$i = $start$078$i;
          break;
         }
        }
       }
       $1214 = ($max$0$lcssa$i|0)==(0);
       $lower$2$start$0$i = $1214 ? $lower$275$i : $start$077$i;
       $1215 = ($lower$2$start$0$i|0)==(0);
       if (!($1215)) {
        $1216 = $1161 & 65534;
        $1217 = $1216&65535;
        $i$332$i = 0;
        while(1) {
         $1221 = (($modes$i) + ($i$332$i<<1)|0);
         HEAP16[$1221>>1] = $1217;
         $1222 = (($i$332$i) + 1)|0;
         $exitcond72$i = ($1222|0)==($lower$2$start$0$i|0);
         if ($exitcond72$i) {
          break;
         } else {
          $i$332$i = $1222;
         }
        }
       }
       $1218 = ($start$077$i>>>0)<($max$0$lcssa$i>>>0);
       if ($1218) {
        $1219 = $1161 & 65534;
        $1220 = $1219&65535;
        $i$430$i = $start$077$i;$w$129$i = 0;
        while(1) {
         $1223 = (($bound$i) + ($w$129$i<<2)|0);
         $1224 = HEAP32[$1223>>2]|0;
         $1225 = ($i$430$i>>>0)<($1224>>>0);
         if ($1225) {
          $1226 = (($modes$i) + ($i$430$i<<1)|0);
          HEAP16[$1226>>1] = $1220;
         }
         $1227 = (($w$129$i) + 1)|0;
         $1228 = (($1227>>>0) % 3)&-1;
         $1229 = (($i$430$i) + 1)|0;
         $exitcond71$i = ($1229|0)==($max$0$lcssa$i|0);
         if ($exitcond71$i) {
          break;
         } else {
          $i$430$i = $1229;$w$129$i = $1228;
         }
        }
       }
      } else {
       $bound1$062$i = 0;$l$364$i = 0;$right_xr$363$i = $18;$sfbi$365$i = 0;
       while(1) {
        $1233 = (($sfbi$365$i) + 1)|0;
        $1234 = (($1163) + ($sfbi$365$i)|0);
        $1235 = HEAP8[$1234>>0]|0;
        $1236 = $1235&255;
        $1237 = ($1235<<24>>24)==(0);
        L350: do {
         if ($1237) {
          $bound1$1$i = $bound1$062$i;
         } else {
          $i$555$i = 0;
          while(1) {
           $1240 = (($right_xr$363$i) + ($i$555$i<<2)|0);
           $1241 = HEAP32[$1240>>2]|0;
           $1242 = ($1241|0)==(0);
           $1239 = (($i$555$i) + 1)|0;
           if (!($1242)) {
            $bound1$1$i = $1233;
            break L350;
           }
           $1238 = ($1239>>>0)<($1236>>>0);
           if ($1238) {
            $i$555$i = $1239;
           } else {
            $bound1$1$i = $bound1$062$i;
            break;
           }
          }
         }
        } while(0);
        $1243 = (($right_xr$363$i) + ($1236<<2)|0);
        $1244 = (($1236) + ($l$364$i))|0;
        $1245 = ($1244>>>0)<(576);
        if ($1245) {
         $bound1$062$i = $bound1$1$i;$l$364$i = $1244;$right_xr$363$i = $1243;$sfbi$365$i = $1233;
        } else {
         $bound1$1$i$lcssa = $bound1$1$i;
         break;
        }
       }
       $1230 = ($bound1$1$i$lcssa|0)==(0);
       if (!($1230)) {
        $1231 = $1161 & 65534;
        $1232 = $1231&65535;
        $i$653$i = 0;
        while(1) {
         $1246 = (($modes$i) + ($i$653$i<<1)|0);
         HEAP16[$1246>>1] = $1232;
         $1247 = (($i$653$i) + 1)|0;
         $exitcond73$i = ($1247|0)==($bound1$1$i$lcssa|0);
         if ($exitcond73$i) {
          break;
         } else {
          $i$653$i = $1247;
         }
        }
       }
      }
      $1248 = $1179 & 4096;
      $1249 = ($1248|0)==(0);
      if ($1249) {
       $l$523$i = 0;$sfbi$524$i = 0;
       while(1) {
        $1291 = (($1163) + ($sfbi$524$i)|0);
        $1292 = HEAP8[$1291>>0]|0;
        $1293 = $1292&255;
        $1294 = (($modes$i) + ($sfbi$524$i<<1)|0);
        $1295 = HEAP16[$1294>>1]|0;
        $1296 = $1295 << 16 >> 16;
        $1297 = $1296 & 1;
        $1298 = ($1297|0)==(0);
        do {
         if (!($1298)) {
          $1299 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 76|0) + ($sfbi$524$i)|0);
          $1300 = HEAP8[$1299>>0]|0;
          $1301 = $1300&255;
          $1302 = ($1300&255)>(6);
          if ($1302) {
           $1313 = $1296 & 65534;
           $1314 = $1313&65535;
           HEAP16[$1294>>1] = $1314;
           break;
          }
          $1303 = ($1292<<24>>24)==(0);
          if (!($1303)) {
           $1304 = (36124 + ($1301<<2)|0);
           $1305 = HEAP32[$1304>>2]|0;
           $1306 = (($1305) + 32768)|0;
           $1307 = $1306 >> 16;
           $1308 = (6 - ($1301))|0;
           $1309 = (36124 + ($1308<<2)|0);
           $1310 = HEAP32[$1309>>2]|0;
           $1311 = (($1310) + 32768)|0;
           $1312 = $1311 >> 16;
           $i$821$i = 0;
           while(1) {
            $1315 = (($i$821$i) + ($l$523$i))|0;
            $1316 = (($xr) + ($1315<<2)|0);
            $1317 = HEAP32[$1316>>2]|0;
            $1318 = (($1317) + 2048)|0;
            $1319 = $1318 >> 12;
            $1320 = Math_imul($1319, $1307)|0;
            HEAP32[$1316>>2] = $1320;
            $1321 = Math_imul($1319, $1312)|0;
            $1322 = (((($xr)) + 2304|0) + ($1315<<2)|0);
            HEAP32[$1322>>2] = $1321;
            $1323 = (($i$821$i) + 1)|0;
            $exitcond69$i = ($1323|0)==($1293|0);
            if ($exitcond69$i) {
             break;
            } else {
             $i$821$i = $1323;
            }
           }
          }
         }
        } while(0);
        $1324 = (($sfbi$524$i) + 1)|0;
        $1325 = (($1293) + ($l$523$i))|0;
        $1326 = ($1325>>>0)<(576);
        if ($1326) {
         $l$523$i = $1325;$sfbi$524$i = $1324;
        } else {
         break L313;
        }
       }
      }
      $1250 = (((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 64|0);
      $1251 = HEAP16[$1250>>1]|0;
      $1252 = $1251&65535;
      $1253 = $1252 & 1;
      $$sum118 = (($gr$0202) + 1)|0;
      $l$427$i = 0;$sfbi$428$i = 0;
      while(1) {
       $1254 = (($1163) + ($sfbi$428$i)|0);
       $1255 = HEAP8[$1254>>0]|0;
       $1256 = $1255&255;
       $1257 = (($modes$i) + ($sfbi$428$i<<1)|0);
       $1258 = HEAP16[$1257>>1]|0;
       $1259 = $1258 << 16 >> 16;
       $1260 = $1259 & 1;
       $1261 = ($1260|0)==(0);
       do {
        if (!($1261)) {
         $1262 = ((((((($si)) + 10|0) + (($$sum118*116)|0)|0)) + 76|0) + ($sfbi$428$i)|0);
         $1263 = HEAP8[$1262>>0]|0;
         $1264 = ($1263<<24>>24)==(0);
         if (!($1264)) {
          $1265 = $1259 & 65534;
          $1266 = $1265&65535;
          HEAP16[$1257>>1] = $1266;
          break;
         }
         $1267 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 76|0) + ($sfbi$428$i)|0);
         $1268 = HEAP8[$1267>>0]|0;
         $1269 = $1268&255;
         $1270 = ($1255<<24>>24)==(0);
         if (!($1270)) {
          $1271 = ($1268<<24>>24)==(0);
          $1272 = (($1269) + -1)|0;
          $1273 = $1272 >>> 1;
          $1274 = ((36004 + (($1253*60)|0)|0) + ($1273<<2)|0);
          $1275 = $1269 & 1;
          $1276 = ($1275|0)==(0);
          $i$725$i = 0;
          while(1) {
           $1277 = (($i$725$i) + ($l$427$i))|0;
           $1278 = (($xr) + ($1277<<2)|0);
           $1279 = HEAP32[$1278>>2]|0;
           do {
            if ($1271) {
             $$sink5 = $1279;
            } else {
             $1280 = (($1279) + 2048)|0;
             $1281 = $1280 >> 12;
             $1282 = HEAP32[$1274>>2]|0;
             $1283 = (($1282) + 32768)|0;
             $1284 = $1283 >> 16;
             $1285 = Math_imul($1284, $1281)|0;
             if ($1276) {
              $$sink5 = $1285;
              break;
             }
             HEAP32[$1278>>2] = $1285;
             $$sink5 = $1279;
            }
           } while(0);
           $1286 = (((($xr)) + 2304|0) + ($1277<<2)|0);
           HEAP32[$1286>>2] = $$sink5;
           $1287 = (($i$725$i) + 1)|0;
           $exitcond70$i = ($1287|0)==($1256|0);
           if ($exitcond70$i) {
            break;
           } else {
            $i$725$i = $1287;
           }
          }
         }
        }
       } while(0);
       $1288 = (($sfbi$428$i) + 1)|0;
       $1289 = (($1256) + ($l$427$i))|0;
       $1290 = ($1289>>>0)<(576);
       if ($1290) {
        $l$427$i = $1289;$sfbi$428$i = $1288;
       } else {
        break;
       }
      }
     }
    } while(0);
    $1327 = $1161 & 2;
    $1328 = ($1327|0)==(0);
    if (!($1328)) {
     $1329 = HEAP32[$2>>2]|0;
     $1330 = $1329 | 512;
     HEAP32[$2>>2] = $1330;
     $l$619$i = 0;$sfbi$620$i = 0;
     while(1) {
      $1331 = (($1163) + ($sfbi$620$i)|0);
      $1332 = HEAP8[$1331>>0]|0;
      $1333 = $1332&255;
      $1334 = (($modes$i) + ($sfbi$620$i<<1)|0);
      $1335 = HEAP16[$1334>>1]|0;
      $1336 = ($1335<<16>>16)!=(2);
      $1337 = ($1332<<24>>24)==(0);
      $or$cond$i17 = $1337 | $1336;
      if (!($or$cond$i17)) {
       $i$918$i = 0;
       while(1) {
        $1338 = (($i$918$i) + ($l$619$i))|0;
        $1339 = (($xr) + ($1338<<2)|0);
        $1340 = HEAP32[$1339>>2]|0;
        $1341 = (((($xr)) + 2304|0) + ($1338<<2)|0);
        $1342 = HEAP32[$1341>>2]|0;
        $1343 = (($1340) + 2048)|0;
        $1344 = (($1343) + ($1342))|0;
        $1345 = $1344 >> 12;
        $1346 = ($1345*2896)|0;
        HEAP32[$1339>>2] = $1346;
        $1347 = (($1343) - ($1342))|0;
        $1348 = $1347 >> 12;
        $1349 = ($1348*2896)|0;
        HEAP32[$1341>>2] = $1349;
        $1350 = (($i$918$i) + 1)|0;
        $exitcond$i18 = ($1350|0)==($1333|0);
        if ($exitcond$i18) {
         break;
        } else {
         $i$918$i = $1350;
        }
       }
      }
      $1351 = (($sfbi$620$i) + 1)|0;
      $1352 = (($1333) + ($l$619$i))|0;
      $1353 = ($1352>>>0)<(576);
      if ($1353) {
       $l$619$i = $1352;$sfbi$620$i = $1351;
      } else {
       break;
      }
     }
    }
   }
  }
  if (!($15)) {
   $1354 = ($gr$0202*18)|0;
   $$sum68 = $1354 | 1;
   $$sum = (($1354) + 3)|0;
   $$sum69 = (($1354) + 5)|0;
   $$sum70 = (($1354) + 7)|0;
   $$sum71 = (($1354) + 9)|0;
   $$sum72 = (($1354) + 11)|0;
   $$sum73 = (($1354) + 13)|0;
   $$sum74 = (($1354) + 15)|0;
   $$sum75 = (($1354) + 17)|0;
   $$sum78 = (($1354) + 2)|0;
   $$sum80 = (($1354) + 4)|0;
   $$sum82 = (($1354) + 6)|0;
   $$sum84 = (($1354) + 8)|0;
   $$sum86 = (($1354) + 10)|0;
   $$sum88 = (($1354) + 12)|0;
   $$sum90 = (($1354) + 14)|0;
   $$sum92 = (($1354) + 16)|0;
   $ch$1193 = 0;
   while(1) {
    $1355 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$1193*58)|0)|0)) + 9|0);
    $1356 = HEAP8[$1355>>0]|0;
    $1357 = ($1356<<24>>24)==(2);
    $1358 = (($xr) + (($ch$1193*2304)|0)|0);
    if ($1357) {
     $1359 = (($sfbwidth) + ($ch$1193<<2)|0);
     $1360 = HEAP32[$1359>>2]|0;
     $$idx = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$1193*58)|0)|0)) + 8|0);
     $$idx$val = HEAP8[$$idx>>0]|0;
     $1361 = $$idx$val & 8;
     $1362 = ($1361<<24>>24)==(0);
     if ($1362) {
      $$1$i21 = $1360;$sb$0$i = 0;
     } else {
      $$06$i = $1360;$l$07$i = 0;
      while(1) {
       $1363 = ((($$06$i)) + 1|0);
       $1364 = HEAP8[$$06$i>>0]|0;
       $1365 = $1364&255;
       $1366 = (($1365) + ($l$07$i))|0;
       $1367 = ($1366>>>0)<(36);
       if ($1367) {
        $$06$i = $1363;$l$07$i = $1366;
       } else {
        $$1$i21 = $1363;$sb$0$i = 2;
        break;
       }
      }
     }
     ;HEAP32[$sw$i>>2]=0|0;HEAP32[$sw$i+4>>2]=0|0;HEAP32[$sw$i+8>>2]=0|0;
     HEAP32[$bound$i>>2] = $sb$0$i;
     HEAP32[$20>>2] = $sb$0$i;
     HEAP32[$19>>2] = $sb$0$i;
     $1368 = ($sb$0$i*18)|0;
     $1369 = HEAP8[$$1$i21>>0]|0;
     $1370 = $1369&255;
     $1371 = ((($$1$i21)) + 1|0);
     $$21$i = $1371;$f$03$i = $1370;$l$12$i = $1368;$w$14$i = 0;
     while(1) {
      $1372 = ($f$03$i|0)==(0);
      if ($1372) {
       $1373 = ((($$21$i)) + 1|0);
       $1374 = HEAP8[$$21$i>>0]|0;
       $1375 = $1374&255;
       $1376 = (($w$14$i) + 1)|0;
       $1377 = (($1376>>>0) % 3)&-1;
       $$3$i = $1373;$f$1$in$i = $1375;$w$2$i = $1377;
      } else {
       $$3$i = $$21$i;$f$1$in$i = $f$03$i;$w$2$i = $w$14$i;
      }
      $f$1$i = (($f$1$in$i) + -1)|0;
      $1378 = ((($xr) + (($ch$1193*2304)|0)|0) + ($l$12$i<<2)|0);
      $1379 = HEAP32[$1378>>2]|0;
      $1380 = (($sw$i) + ($w$2$i<<2)|0);
      $1381 = HEAP32[$1380>>2]|0;
      $1382 = (($1381) + 1)|0;
      HEAP32[$1380>>2] = $1382;
      $1383 = (($bound$i) + ($w$2$i<<2)|0);
      $1384 = HEAP32[$1383>>2]|0;
      $1385 = (((($tmp$i) + (($1384*72)|0)|0) + (($w$2$i*24)|0)|0) + ($1381<<2)|0);
      HEAP32[$1385>>2] = $1379;
      $1386 = ($1382|0)==(6);
      if ($1386) {
       HEAP32[$1380>>2] = 0;
       $1387 = (($1384) + 1)|0;
       HEAP32[$1383>>2] = $1387;
      }
      $1388 = (($l$12$i) + 1)|0;
      $exitcond$i23 = ($1388|0)==(576);
      if ($exitcond$i23) {
       break;
      } else {
       $$21$i = $$3$i;$f$03$i = $f$1$i;$l$12$i = $1388;$w$14$i = $w$2$i;
      }
     }
     $1389 = ((($xr) + (($ch$1193*2304)|0)|0) + ($1368<<2)|0);
     $1390 = (($tmp$i) + (($sb$0$i*72)|0)|0);
     $1391 = (576 - ($1368))|0;
     $1392 = $1391 << 2;
     _memcpy(($1389|0),($1390|0),($1392|0))|0;
     if (!($1362)) {
      $i$02$i = 0;
      while(1) {
       $$0$sum$i = (17 - ($i$02$i))|0;
       $1393 = ((($xr) + (($ch$1193*2304)|0)|0) + ($$0$sum$i<<2)|0);
       $1394 = HEAP32[$1393>>2]|0;
       $$0$sum1$i = (($i$02$i) + 18)|0;
       $1395 = ((($xr) + (($ch$1193*2304)|0)|0) + ($$0$sum1$i<<2)|0);
       $1396 = HEAP32[$1395>>2]|0;
       $1397 = (($1394) + 2048)|0;
       $1398 = $1397 >> 12;
       $1399 = (36152 + ($i$02$i<<2)|0);
       $1400 = HEAP32[$1399>>2]|0;
       $1401 = (($1400) + 32768)|0;
       $1402 = $1401 >> 16;
       $1403 = Math_imul($1402, $1398)|0;
       $1404 = (2048 - ($1396))|0;
       $1405 = $1404 >> 12;
       $1406 = (36184 + ($i$02$i<<2)|0);
       $1407 = HEAP32[$1406>>2]|0;
       $1408 = (($1407) + 32768)|0;
       $1409 = $1408 >> 16;
       $1410 = Math_imul($1409, $1405)|0;
       $1411 = (($1410) + ($1403))|0;
       HEAP32[$1393>>2] = $1411;
       $1412 = (($1396) + 2048)|0;
       $1413 = $1412 >> 12;
       $1414 = Math_imul($1402, $1413)|0;
       $1415 = Math_imul($1409, $1398)|0;
       $1416 = (($1415) + ($1414))|0;
       HEAP32[$1395>>2] = $1416;
       $1417 = (($i$02$i) + 1)|0;
       $exitcond$i28 = ($1417|0)==(8);
       if ($exitcond$i28) {
        break;
       } else {
        $i$02$i = $1417;
       }
      }
     }
    } else {
     $1418 = (((($xr) + (($ch$1193*2304)|0)|0)) + 2304|0);
     $$03$i30 = (((($xr) + (($ch$1193*2304)|0)|0)) + 72|0);
     $$05$i33 = $$03$i30;$xr$pn4$i34 = $1358;
     while(1) {
      $i$02$i36 = 0;
      while(1) {
       $$0$sum$i37 = (17 - ($i$02$i36))|0;
       $1420 = (($xr$pn4$i34) + ($$0$sum$i37<<2)|0);
       $1421 = HEAP32[$1420>>2]|0;
       $$0$sum1$i38 = (($i$02$i36) + 18)|0;
       $1422 = (($xr$pn4$i34) + ($$0$sum1$i38<<2)|0);
       $1423 = HEAP32[$1422>>2]|0;
       $1424 = (($1421) + 2048)|0;
       $1425 = $1424 >> 12;
       $1426 = (36152 + ($i$02$i36<<2)|0);
       $1427 = HEAP32[$1426>>2]|0;
       $1428 = (($1427) + 32768)|0;
       $1429 = $1428 >> 16;
       $1430 = Math_imul($1429, $1425)|0;
       $1431 = (2048 - ($1423))|0;
       $1432 = $1431 >> 12;
       $1433 = (36184 + ($i$02$i36<<2)|0);
       $1434 = HEAP32[$1433>>2]|0;
       $1435 = (($1434) + 32768)|0;
       $1436 = $1435 >> 16;
       $1437 = Math_imul($1436, $1432)|0;
       $1438 = (($1437) + ($1430))|0;
       HEAP32[$1420>>2] = $1438;
       $1439 = (($1423) + 2048)|0;
       $1440 = $1439 >> 12;
       $1441 = Math_imul($1429, $1440)|0;
       $1442 = Math_imul($1436, $1425)|0;
       $1443 = (($1442) + ($1441))|0;
       HEAP32[$1422>>2] = $1443;
       $1444 = (($i$02$i36) + 1)|0;
       $exitcond$i39 = ($1444|0)==(8);
       if ($exitcond$i39) {
        break;
       } else {
        $i$02$i36 = $1444;
       }
      }
      $$0$i31 = ((($$05$i33)) + 72|0);
      $1419 = ($$0$i31>>>0)<($1418>>>0);
      if ($1419) {
       $xr$pn4$i34$phi = $$05$i33;$$05$i33 = $$0$i31;$xr$pn4$i34 = $xr$pn4$i34$phi;
      } else {
       break;
      }
     }
    }
    $1445 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$1193*58)|0)|0)) + 8|0);
    $1446 = HEAP8[$1445>>0]|0;
    $1447 = $1446 & 8;
    $1448 = ($1447<<24>>24)==(0);
    $or$cond = $1357 & $1448;
    if ($or$cond) {
     _III_imdct_s($1358,$output);
     $1449 = HEAP32[$21>>2]|0;
     $i$01$i43 = 0;
     while(1) {
      $1466 = (($output) + ($i$01$i43<<2)|0);
      $1467 = HEAP32[$1466>>2]|0;
      $1468 = ((($1449) + (($ch$1193*2304)|0)|0) + ($i$01$i43<<2)|0);
      $1469 = HEAP32[$1468>>2]|0;
      $1470 = (($1469) + ($1467))|0;
      $$sum117 = (($i$01$i43) + ($1354))|0;
      $1471 = ((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum117<<7)|0);
      HEAP32[$1471>>2] = $1470;
      $1472 = (($i$01$i43) + 18)|0;
      $1473 = (($output) + ($1472<<2)|0);
      $1474 = HEAP32[$1473>>2]|0;
      HEAP32[$1468>>2] = $1474;
      $1475 = (($i$01$i43) + 1)|0;
      $exitcond$i44 = ($1475|0)==(18);
      if ($exitcond$i44) {
       break;
      } else {
       $i$01$i43 = $1475;
      }
     }
     $1476 = (((($xr) + (($ch$1193*2304)|0)|0)) + 72|0);
     _III_imdct_s($1476,$output);
     $1477 = HEAP32[$21>>2]|0;
     $i$01$i43$1 = 0;
     while(1) {
      $1679 = (($output) + ($i$01$i43$1<<2)|0);
      $1680 = HEAP32[$1679>>2]|0;
      $1681 = ((((($1477) + (($ch$1193*2304)|0)|0)) + 72|0) + ($i$01$i43$1<<2)|0);
      $1682 = HEAP32[$1681>>2]|0;
      $1683 = (($1682) + ($1680))|0;
      $$sum117$1 = (($i$01$i43$1) + ($1354))|0;
      $1684 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum117$1<<7)|0)) + 4|0);
      HEAP32[$1684>>2] = $1683;
      $1685 = (($i$01$i43$1) + 18)|0;
      $1686 = (($output) + ($1685<<2)|0);
      $1687 = HEAP32[$1686>>2]|0;
      HEAP32[$1681>>2] = $1687;
      $1688 = (($i$01$i43$1) + 1)|0;
      $exitcond$i44$1 = ($1688|0)==(18);
      if ($exitcond$i44$1) {
       break;
      } else {
       $i$01$i43$1 = $1688;
      }
     }
    } else {
     $1450 = $1356&255;
     $1451 = $1446 & 8;
     $1452 = ($1451<<24>>24)!=(0);
     $$ = $1452 ? 0 : $1450;
     _III_imdct_l($1358,$output,$$);
     $1453 = HEAP32[$21>>2]|0;
     $i$01$i = 0;
     while(1) {
      $1454 = (($output) + ($i$01$i<<2)|0);
      $1455 = HEAP32[$1454>>2]|0;
      $1456 = ((($1453) + (($ch$1193*2304)|0)|0) + ($i$01$i<<2)|0);
      $1457 = HEAP32[$1456>>2]|0;
      $1458 = (($1457) + ($1455))|0;
      $$sum116 = (($i$01$i) + ($1354))|0;
      $1459 = ((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum116<<7)|0);
      HEAP32[$1459>>2] = $1458;
      $1460 = (($i$01$i) + 18)|0;
      $1461 = (($output) + ($1460<<2)|0);
      $1462 = HEAP32[$1461>>2]|0;
      HEAP32[$1456>>2] = $1462;
      $1463 = (($i$01$i) + 1)|0;
      $exitcond$i42 = ($1463|0)==(18);
      if ($exitcond$i42) {
       break;
      } else {
       $i$01$i = $1463;
      }
     }
     $1464 = (((($xr) + (($ch$1193*2304)|0)|0)) + 72|0);
     _III_imdct_l($1464,$output,$$);
     $1465 = HEAP32[$21>>2]|0;
     $i$01$i$1 = 0;
     while(1) {
      $1669 = (($output) + ($i$01$i$1<<2)|0);
      $1670 = HEAP32[$1669>>2]|0;
      $1671 = ((((($1465) + (($ch$1193*2304)|0)|0)) + 72|0) + ($i$01$i$1<<2)|0);
      $1672 = HEAP32[$1671>>2]|0;
      $1673 = (($1672) + ($1670))|0;
      $$sum116$1 = (($i$01$i$1) + ($1354))|0;
      $1674 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum116$1<<7)|0)) + 4|0);
      HEAP32[$1674>>2] = $1673;
      $1675 = (($i$01$i$1) + 18)|0;
      $1676 = (($output) + ($1675<<2)|0);
      $1677 = HEAP32[$1676>>2]|0;
      HEAP32[$1671>>2] = $1677;
      $1678 = (($i$01$i$1) + 1)|0;
      $exitcond$i42$1 = ($1678|0)==(18);
      if ($exitcond$i42$1) {
       break;
      } else {
       $i$01$i$1 = $1678;
      }
     }
    }
    $1478 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum68<<7)|0)) + 4|0);
    $1479 = HEAP32[$1478>>2]|0;
    $1480 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum<<7)|0)) + 4|0);
    $tmp2$01$i = HEAP32[$1480>>2]|0;
    $1481 = (0 - ($1479))|0;
    HEAP32[$1478>>2] = $1481;
    $1482 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum69<<7)|0)) + 4|0);
    $1483 = HEAP32[$1482>>2]|0;
    $1484 = (0 - ($tmp2$01$i))|0;
    HEAP32[$1480>>2] = $1484;
    $1485 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum70<<7)|0)) + 4|0);
    $tmp2$0$i = HEAP32[$1485>>2]|0;
    $1486 = (0 - ($1483))|0;
    HEAP32[$1482>>2] = $1486;
    $1487 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum71<<7)|0)) + 4|0);
    $1488 = HEAP32[$1487>>2]|0;
    $1489 = (0 - ($tmp2$0$i))|0;
    HEAP32[$1485>>2] = $1489;
    $1490 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum72<<7)|0)) + 4|0);
    $tmp2$0$1$i = HEAP32[$1490>>2]|0;
    $1491 = (0 - ($1488))|0;
    HEAP32[$1487>>2] = $1491;
    $1492 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum73<<7)|0)) + 4|0);
    $1493 = HEAP32[$1492>>2]|0;
    $1494 = (0 - ($tmp2$0$1$i))|0;
    HEAP32[$1490>>2] = $1494;
    $1495 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum74<<7)|0)) + 4|0);
    $tmp2$0$2$i = HEAP32[$1495>>2]|0;
    $1496 = (0 - ($1493))|0;
    HEAP32[$1492>>2] = $1496;
    $1497 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum75<<7)|0)) + 4|0);
    $1498 = HEAP32[$1497>>2]|0;
    $1499 = (0 - ($tmp2$0$2$i))|0;
    HEAP32[$1495>>2] = $1499;
    $1500 = (0 - ($1498))|0;
    HEAP32[$1497>>2] = $1500;
    $i$0 = 576;
    while(1) {
     $1501 = ($i$0>>>0)>(36);
     if (!($1501)) {
      $i$0$lcssa = $i$0;
      break;
     }
     $1502 = (($i$0) + -1)|0;
     $1503 = ((($xr) + (($ch$1193*2304)|0)|0) + ($1502<<2)|0);
     $1504 = HEAP32[$1503>>2]|0;
     $1505 = ($1504|0)==(0);
     if ($1505) {
      $i$0 = $1502;
     } else {
      $i$0$lcssa = $i$0;
      break;
     }
    }
    $1506 = (576 - ($i$0$lcssa))|0;
    $1507 = (($1506>>>0) / 18)&-1;
    $1508 = (32 - ($1507))|0;
    $1509 = HEAP8[$1355>>0]|0;
    $1510 = ($1509<<24>>24)==(2);
    $1511 = ($1508>>>0)>(2);
    L445: do {
     if ($1510) {
      if ($1511) {
       $l$4188 = 36;$sb$3187 = 2;
       while(1) {
        $1554 = ((($xr) + (($ch$1193*2304)|0)|0) + ($l$4188<<2)|0);
        _III_imdct_s($1554,$output);
        $1555 = HEAP32[$21>>2]|0;
        $i$01$i53 = 0;
        while(1) {
         $1556 = (($output) + ($i$01$i53<<2)|0);
         $1557 = HEAP32[$1556>>2]|0;
         $1558 = (((($1555) + (($ch$1193*2304)|0)|0) + (($sb$3187*72)|0)|0) + ($i$01$i53<<2)|0);
         $1559 = HEAP32[$1558>>2]|0;
         $1560 = (($1559) + ($1557))|0;
         $$sum105 = (($i$01$i53) + ($1354))|0;
         $1561 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum105<<7)|0) + ($sb$3187<<2)|0);
         HEAP32[$1561>>2] = $1560;
         $1562 = (($i$01$i53) + 18)|0;
         $1563 = (($output) + ($1562<<2)|0);
         $1564 = HEAP32[$1563>>2]|0;
         HEAP32[$1558>>2] = $1564;
         $1565 = (($i$01$i53) + 1)|0;
         $exitcond$i54 = ($1565|0)==(18);
         if ($exitcond$i54) {
          break;
         } else {
          $i$01$i53 = $1565;
         }
        }
        $1566 = $sb$3187 & 1;
        $1567 = ($1566|0)==(0);
        if (!($1567)) {
         $1568 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum68<<7)|0) + ($sb$3187<<2)|0);
         $1569 = HEAP32[$1568>>2]|0;
         $1570 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum<<7)|0) + ($sb$3187<<2)|0);
         $tmp2$01$i56 = HEAP32[$1570>>2]|0;
         $1571 = (0 - ($1569))|0;
         HEAP32[$1568>>2] = $1571;
         $1572 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum69<<7)|0) + ($sb$3187<<2)|0);
         $1573 = HEAP32[$1572>>2]|0;
         $1574 = (0 - ($tmp2$01$i56))|0;
         HEAP32[$1570>>2] = $1574;
         $1575 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum70<<7)|0) + ($sb$3187<<2)|0);
         $tmp2$0$i57 = HEAP32[$1575>>2]|0;
         $1576 = (0 - ($1573))|0;
         HEAP32[$1572>>2] = $1576;
         $1577 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum71<<7)|0) + ($sb$3187<<2)|0);
         $1578 = HEAP32[$1577>>2]|0;
         $1579 = (0 - ($tmp2$0$i57))|0;
         HEAP32[$1575>>2] = $1579;
         $1580 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum72<<7)|0) + ($sb$3187<<2)|0);
         $tmp2$0$1$i58 = HEAP32[$1580>>2]|0;
         $1581 = (0 - ($1578))|0;
         HEAP32[$1577>>2] = $1581;
         $1582 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum73<<7)|0) + ($sb$3187<<2)|0);
         $1583 = HEAP32[$1582>>2]|0;
         $1584 = (0 - ($tmp2$0$1$i58))|0;
         HEAP32[$1580>>2] = $1584;
         $1585 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum74<<7)|0) + ($sb$3187<<2)|0);
         $tmp2$0$2$i59 = HEAP32[$1585>>2]|0;
         $1586 = (0 - ($1583))|0;
         HEAP32[$1582>>2] = $1586;
         $1587 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum75<<7)|0) + ($sb$3187<<2)|0);
         $1588 = HEAP32[$1587>>2]|0;
         $1589 = (0 - ($tmp2$0$2$i59))|0;
         HEAP32[$1585>>2] = $1589;
         $1590 = (0 - ($1588))|0;
         HEAP32[$1587>>2] = $1590;
        }
        $1591 = (($sb$3187) + 1)|0;
        $1592 = (($l$4188) + 18)|0;
        $exitcond235 = ($1591|0)==($1508|0);
        if ($exitcond235) {
         label = 300;
         break;
        } else {
         $l$4188 = $1592;$sb$3187 = $1591;
        }
       }
      } else {
       $sb$4190 = $1508;
       label = 312;
      }
     } else {
      if ($1511) {
       $1515 = $1509;$l$3185 = 36;$sb$2184 = 2;
       while(1) {
        $1513 = ((($xr) + (($ch$1193*2304)|0)|0) + ($l$3185<<2)|0);
        $1514 = $1515&255;
        _III_imdct_l($1513,$output,$1514);
        $1516 = HEAP32[$21>>2]|0;
        $i$01$i46 = 0;
        while(1) {
         $1517 = (($output) + ($i$01$i46<<2)|0);
         $1518 = HEAP32[$1517>>2]|0;
         $1519 = (((($1516) + (($ch$1193*2304)|0)|0) + (($sb$2184*72)|0)|0) + ($i$01$i46<<2)|0);
         $1520 = HEAP32[$1519>>2]|0;
         $1521 = (($1520) + ($1518))|0;
         $$sum94 = (($i$01$i46) + ($1354))|0;
         $1522 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum94<<7)|0) + ($sb$2184<<2)|0);
         HEAP32[$1522>>2] = $1521;
         $1523 = (($i$01$i46) + 18)|0;
         $1524 = (($output) + ($1523<<2)|0);
         $1525 = HEAP32[$1524>>2]|0;
         HEAP32[$1519>>2] = $1525;
         $1526 = (($i$01$i46) + 1)|0;
         $exitcond$i47 = ($1526|0)==(18);
         if ($exitcond$i47) {
          break;
         } else {
          $i$01$i46 = $1526;
         }
        }
        $1527 = $sb$2184 & 1;
        $1528 = ($1527|0)==(0);
        if (!($1528)) {
         $1529 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum68<<7)|0) + ($sb$2184<<2)|0);
         $1530 = HEAP32[$1529>>2]|0;
         $1531 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum<<7)|0) + ($sb$2184<<2)|0);
         $tmp2$01$i49 = HEAP32[$1531>>2]|0;
         $1532 = (0 - ($1530))|0;
         HEAP32[$1529>>2] = $1532;
         $1533 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum69<<7)|0) + ($sb$2184<<2)|0);
         $1534 = HEAP32[$1533>>2]|0;
         $1535 = (0 - ($tmp2$01$i49))|0;
         HEAP32[$1531>>2] = $1535;
         $1536 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum70<<7)|0) + ($sb$2184<<2)|0);
         $tmp2$0$i50 = HEAP32[$1536>>2]|0;
         $1537 = (0 - ($1534))|0;
         HEAP32[$1533>>2] = $1537;
         $1538 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum71<<7)|0) + ($sb$2184<<2)|0);
         $1539 = HEAP32[$1538>>2]|0;
         $1540 = (0 - ($tmp2$0$i50))|0;
         HEAP32[$1536>>2] = $1540;
         $1541 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum72<<7)|0) + ($sb$2184<<2)|0);
         $tmp2$0$1$i51 = HEAP32[$1541>>2]|0;
         $1542 = (0 - ($1539))|0;
         HEAP32[$1538>>2] = $1542;
         $1543 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum73<<7)|0) + ($sb$2184<<2)|0);
         $1544 = HEAP32[$1543>>2]|0;
         $1545 = (0 - ($tmp2$0$1$i51))|0;
         HEAP32[$1541>>2] = $1545;
         $1546 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum74<<7)|0) + ($sb$2184<<2)|0);
         $tmp2$0$2$i52 = HEAP32[$1546>>2]|0;
         $1547 = (0 - ($1544))|0;
         HEAP32[$1543>>2] = $1547;
         $1548 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum75<<7)|0) + ($sb$2184<<2)|0);
         $1549 = HEAP32[$1548>>2]|0;
         $1550 = (0 - ($tmp2$0$2$i52))|0;
         HEAP32[$1546>>2] = $1550;
         $1551 = (0 - ($1549))|0;
         HEAP32[$1548>>2] = $1551;
        }
        $1552 = (($sb$2184) + 1)|0;
        $exitcond = ($1552|0)==($1508|0);
        if ($exitcond) {
         label = 300;
         break L445;
        }
        $1553 = (($l$3185) + 18)|0;
        $$pre241 = HEAP8[$1355>>0]|0;
        $1515 = $$pre241;$l$3185 = $1553;$sb$2184 = $1552;
       }
      } else {
       $sb$4190 = $1508;
       label = 312;
      }
     }
    } while(0);
    if ((label|0) == 300) {
     label = 0;
     $1512 = ($1508>>>0)<(32);
     if ($1512) {
      $sb$4190 = $1508;
      label = 312;
     }
    }
    if ((label|0) == 312) {
     while(1) {
      label = 0;
      $1593 = HEAP32[$21>>2]|0;
      $1594 = ((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0);
      $1595 = HEAP32[$1594>>2]|0;
      $1596 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($1354<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1596>>2] = $1595;
      HEAP32[$1594>>2] = 0;
      $1597 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 4|0);
      $1598 = HEAP32[$1597>>2]|0;
      $1599 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum68<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1599>>2] = $1598;
      HEAP32[$1597>>2] = 0;
      $1600 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 8|0);
      $1601 = HEAP32[$1600>>2]|0;
      $1602 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum78<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1602>>2] = $1601;
      HEAP32[$1600>>2] = 0;
      $1603 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 12|0);
      $1604 = HEAP32[$1603>>2]|0;
      $1605 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1605>>2] = $1604;
      HEAP32[$1603>>2] = 0;
      $1606 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 16|0);
      $1607 = HEAP32[$1606>>2]|0;
      $1608 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum80<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1608>>2] = $1607;
      HEAP32[$1606>>2] = 0;
      $1609 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 20|0);
      $1610 = HEAP32[$1609>>2]|0;
      $1611 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum69<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1611>>2] = $1610;
      HEAP32[$1609>>2] = 0;
      $1612 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 24|0);
      $1613 = HEAP32[$1612>>2]|0;
      $1614 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum82<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1614>>2] = $1613;
      HEAP32[$1612>>2] = 0;
      $1615 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 28|0);
      $1616 = HEAP32[$1615>>2]|0;
      $1617 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum70<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1617>>2] = $1616;
      HEAP32[$1615>>2] = 0;
      $1618 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 32|0);
      $1619 = HEAP32[$1618>>2]|0;
      $1620 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum84<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1620>>2] = $1619;
      HEAP32[$1618>>2] = 0;
      $1621 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 36|0);
      $1622 = HEAP32[$1621>>2]|0;
      $1623 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum71<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1623>>2] = $1622;
      HEAP32[$1621>>2] = 0;
      $1624 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 40|0);
      $1625 = HEAP32[$1624>>2]|0;
      $1626 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum86<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1626>>2] = $1625;
      HEAP32[$1624>>2] = 0;
      $1627 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 44|0);
      $1628 = HEAP32[$1627>>2]|0;
      $1629 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum72<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1629>>2] = $1628;
      HEAP32[$1627>>2] = 0;
      $1630 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 48|0);
      $1631 = HEAP32[$1630>>2]|0;
      $1632 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum88<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1632>>2] = $1631;
      HEAP32[$1630>>2] = 0;
      $1633 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 52|0);
      $1634 = HEAP32[$1633>>2]|0;
      $1635 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum73<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1635>>2] = $1634;
      HEAP32[$1633>>2] = 0;
      $1636 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 56|0);
      $1637 = HEAP32[$1636>>2]|0;
      $1638 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum90<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1638>>2] = $1637;
      HEAP32[$1636>>2] = 0;
      $1639 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 60|0);
      $1640 = HEAP32[$1639>>2]|0;
      $1641 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum74<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1641>>2] = $1640;
      HEAP32[$1639>>2] = 0;
      $1642 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 64|0);
      $1643 = HEAP32[$1642>>2]|0;
      $1644 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum92<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1644>>2] = $1643;
      HEAP32[$1642>>2] = 0;
      $1645 = ((((($1593) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 68|0);
      $1646 = HEAP32[$1645>>2]|0;
      $1647 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum75<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1647>>2] = $1646;
      HEAP32[$1645>>2] = 0;
      $1648 = $sb$4190 & 1;
      $1649 = ($1648|0)==(0);
      if (!($1649)) {
       $1650 = HEAP32[$1599>>2]|0;
       $tmp2$01$i60 = HEAP32[$1605>>2]|0;
       $1651 = (0 - ($1650))|0;
       HEAP32[$1599>>2] = $1651;
       $1652 = HEAP32[$1611>>2]|0;
       $1653 = (0 - ($tmp2$01$i60))|0;
       HEAP32[$1605>>2] = $1653;
       $tmp2$0$i61 = HEAP32[$1617>>2]|0;
       $1654 = (0 - ($1652))|0;
       HEAP32[$1611>>2] = $1654;
       $1655 = HEAP32[$1623>>2]|0;
       $1656 = (0 - ($tmp2$0$i61))|0;
       HEAP32[$1617>>2] = $1656;
       $tmp2$0$1$i62 = HEAP32[$1629>>2]|0;
       $1657 = (0 - ($1655))|0;
       HEAP32[$1623>>2] = $1657;
       $1658 = HEAP32[$1635>>2]|0;
       $1659 = (0 - ($tmp2$0$1$i62))|0;
       HEAP32[$1629>>2] = $1659;
       $tmp2$0$2$i63 = HEAP32[$1641>>2]|0;
       $1660 = (0 - ($1658))|0;
       HEAP32[$1635>>2] = $1660;
       $1661 = HEAP32[$1647>>2]|0;
       $1662 = (0 - ($tmp2$0$2$i63))|0;
       HEAP32[$1641>>2] = $1662;
       $1663 = (0 - ($1661))|0;
       HEAP32[$1647>>2] = $1663;
      }
      $1664 = (($sb$4190) + 1)|0;
      $1665 = ($1664>>>0)<(32);
      if ($1665) {
       $sb$4190 = $1664;
       label = 312;
      } else {
       break;
      }
     }
    }
    $1666 = (($ch$1193) + 1)|0;
    $exitcond236 = ($1666|0)==($nch|0);
    if ($exitcond236) {
     break;
    } else {
     $ch$1193 = $1666;
    }
   }
  }
  $1667 = (($gr$0202) + 1)|0;
  $1668 = ($1667>>>0)<($13>>>0);
  if ($1668) {
   $gr$0202 = $1667;
  } else {
   $$2 = 0;
   label = 318;
   break;
  }
 }
 if ((label|0) == 159) {
  $$1$i$ph = 567;
  label = 209;
 }
 else if ((label|0) == 207) {
  ___assert_fail((42866|0),(42698|0),1253,(42908|0));
  // unreachable;
 }
 else if ((label|0) == 271) {
  $$1$ph = 569;
 }
 else if ((label|0) == 318) {
  STACKTOP = sp;return ($$2|0);
 }
 if ((label|0) == 209) {
  $$1$ph = $$1$i$ph;
 }
 $$2 = $$1$ph;
 STACKTOP = sp;return ($$2|0);
}
function _III_imdct_s($X,$z) {
 $X = $X|0;
 $z = $z|0;
 var $$07 = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond12 = 0, $exitcond13 = 0, $i$05 = 0, $i$14 = 0, $s$06 = 0, $w$09 = 0, $wptr$03 = 0, $y = 0, $yptr$08 = 0;
 var $yptr$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $y = sp;
 $$07 = $X;$w$09 = 0;$yptr$08 = $y;
 while(1) {
  $0 = ((($$07)) + 4|0);
  $1 = ((($$07)) + 8|0);
  $2 = ((($$07)) + 12|0);
  $3 = ((($$07)) + 16|0);
  $4 = ((($$07)) + 20|0);
  $$pre = HEAP32[$$07>>2]|0;
  $$pre14 = HEAP32[$0>>2]|0;
  $$pre15 = HEAP32[$1>>2]|0;
  $$pre16 = HEAP32[$2>>2]|0;
  $$pre17 = HEAP32[$3>>2]|0;
  $$pre18 = HEAP32[$4>>2]|0;
  $5 = (($$pre) + 2048)|0;
  $6 = $5 >> 12;
  $7 = (($$pre14) + 2048)|0;
  $8 = $7 >> 12;
  $9 = (($$pre15) + 2048)|0;
  $10 = $9 >> 12;
  $11 = (($$pre16) + 2048)|0;
  $12 = $11 >> 12;
  $13 = (($$pre17) + 2048)|0;
  $14 = $13 >> 12;
  $15 = (($$pre18) + 2048)|0;
  $16 = $15 >> 12;
  $i$05 = 0;$s$06 = 36432;
  while(1) {
   $17 = HEAP32[$s$06>>2]|0;
   $18 = (($17) + 32768)|0;
   $19 = $18 >> 16;
   $20 = Math_imul($19, $6)|0;
   $21 = ((($s$06)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 32768)|0;
   $24 = $23 >> 16;
   $25 = Math_imul($24, $8)|0;
   $26 = (($25) + ($20))|0;
   $27 = ((($s$06)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 32768)|0;
   $30 = $29 >> 16;
   $31 = Math_imul($30, $10)|0;
   $32 = (($26) + ($31))|0;
   $33 = ((($s$06)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 32768)|0;
   $36 = $35 >> 16;
   $37 = Math_imul($36, $12)|0;
   $38 = (($32) + ($37))|0;
   $39 = ((($s$06)) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 32768)|0;
   $42 = $41 >> 16;
   $43 = Math_imul($42, $14)|0;
   $44 = (($38) + ($43))|0;
   $45 = ((($s$06)) + 20|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 32768)|0;
   $48 = $47 >> 16;
   $49 = Math_imul($48, $16)|0;
   $50 = (($44) + ($49))|0;
   $51 = (($yptr$08) + ($i$05<<2)|0);
   HEAP32[$51>>2] = $50;
   $52 = (0 - ($50))|0;
   $53 = (5 - ($i$05))|0;
   $54 = (($yptr$08) + ($53<<2)|0);
   HEAP32[$54>>2] = $52;
   $55 = ((($s$06)) + 24|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + 32768)|0;
   $58 = $57 >> 16;
   $59 = Math_imul($58, $6)|0;
   $60 = ((($s$06)) + 28|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 32768)|0;
   $63 = $62 >> 16;
   $64 = Math_imul($63, $8)|0;
   $65 = (($64) + ($59))|0;
   $66 = ((($s$06)) + 32|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + 32768)|0;
   $69 = $68 >> 16;
   $70 = Math_imul($69, $10)|0;
   $71 = (($65) + ($70))|0;
   $72 = ((($s$06)) + 36|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + 32768)|0;
   $75 = $74 >> 16;
   $76 = Math_imul($75, $12)|0;
   $77 = (($71) + ($76))|0;
   $78 = ((($s$06)) + 40|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + 32768)|0;
   $81 = $80 >> 16;
   $82 = Math_imul($81, $14)|0;
   $83 = (($77) + ($82))|0;
   $84 = ((($s$06)) + 44|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($85) + 32768)|0;
   $87 = $86 >> 16;
   $88 = Math_imul($87, $16)|0;
   $89 = (($83) + ($88))|0;
   $90 = (($i$05) + 6)|0;
   $91 = (($yptr$08) + ($90<<2)|0);
   HEAP32[$91>>2] = $89;
   $92 = (11 - ($i$05))|0;
   $93 = (($yptr$08) + ($92<<2)|0);
   HEAP32[$93>>2] = $89;
   $94 = ((($s$06)) + 48|0);
   $95 = (($i$05) + 1)|0;
   $exitcond12 = ($95|0)==(3);
   if ($exitcond12) {
    break;
   } else {
    $i$05 = $95;$s$06 = $94;
   }
  }
  $96 = ((($yptr$08)) + 48|0);
  $97 = ((($$07)) + 24|0);
  $98 = (($w$09) + 1)|0;
  $exitcond13 = ($98|0)==(3);
  if ($exitcond13) {
   $i$14 = 0;$wptr$03 = 36576;$yptr$12 = $y;
   break;
  } else {
   $$07 = $97;$w$09 = $98;$yptr$08 = $96;
  }
 }
 while(1) {
  $99 = (($z) + ($i$14<<2)|0);
  HEAP32[$99>>2] = 0;
  $100 = HEAP32[$yptr$12>>2]|0;
  $101 = (($100) + 2048)|0;
  $102 = $101 >> 12;
  $103 = HEAP32[$wptr$03>>2]|0;
  $104 = (($103) + 32768)|0;
  $105 = $104 >> 16;
  $106 = Math_imul($105, $102)|0;
  $107 = (($i$14) + 6)|0;
  $108 = (($z) + ($107<<2)|0);
  HEAP32[$108>>2] = $106;
  $109 = ((($yptr$12)) + 24|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($110) + 2048)|0;
  $112 = $111 >> 12;
  $113 = ((($wptr$03)) + 24|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + 32768)|0;
  $116 = $115 >> 16;
  $117 = Math_imul($116, $112)|0;
  $118 = ((($yptr$12)) + 48|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + 2048)|0;
  $121 = $120 >> 12;
  $122 = HEAP32[$wptr$03>>2]|0;
  $123 = (($122) + 32768)|0;
  $124 = $123 >> 16;
  $125 = Math_imul($124, $121)|0;
  $126 = (($125) + ($117))|0;
  $127 = (($i$14) + 12)|0;
  $128 = (($z) + ($127<<2)|0);
  HEAP32[$128>>2] = $126;
  $129 = ((($yptr$12)) + 72|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + 2048)|0;
  $132 = $131 >> 12;
  $133 = HEAP32[$113>>2]|0;
  $134 = (($133) + 32768)|0;
  $135 = $134 >> 16;
  $136 = Math_imul($135, $132)|0;
  $137 = ((($yptr$12)) + 96|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + 2048)|0;
  $140 = $139 >> 12;
  $141 = HEAP32[$wptr$03>>2]|0;
  $142 = (($141) + 32768)|0;
  $143 = $142 >> 16;
  $144 = Math_imul($143, $140)|0;
  $145 = (($144) + ($136))|0;
  $146 = (($i$14) + 18)|0;
  $147 = (($z) + ($146<<2)|0);
  HEAP32[$147>>2] = $145;
  $148 = ((($yptr$12)) + 120|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + 2048)|0;
  $151 = $150 >> 12;
  $152 = HEAP32[$113>>2]|0;
  $153 = (($152) + 32768)|0;
  $154 = $153 >> 16;
  $155 = Math_imul($154, $151)|0;
  $156 = (($i$14) + 24)|0;
  $157 = (($z) + ($156<<2)|0);
  HEAP32[$157>>2] = $155;
  $158 = (($i$14) + 30)|0;
  $159 = (($z) + ($158<<2)|0);
  HEAP32[$159>>2] = 0;
  $160 = ((($yptr$12)) + 4|0);
  $161 = ((($wptr$03)) + 4|0);
  $162 = (($i$14) + 1)|0;
  $exitcond = ($162|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $i$14 = $162;$wptr$03 = $161;$yptr$12 = $160;
  }
 }
 STACKTOP = sp;return;
}
function _III_imdct_l($X,$z,$block_type) {
 $X = $X|0;
 $z = $z|0;
 $block_type = $block_type|0;
 var $$neg11$i$i$i$i = 0, $$neg11$i2$i$i$i = 0, $$neg9$i$i$i$i = 0, $$neg9$i1$i$i$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert50 = 0, $$phi$trans$insert53 = 0, $$pre = 0, $$pre51 = 0, $$pre54 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$031$i$i = 0, $i$038 = 0, $i$141 = 0, $i$642 = 0, $tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $tmp$i$i = sp;
 $i$031$i$i = 0;
 while(1) {
  $0 = (($X) + ($i$031$i$i<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (($1) + 2048)|0;
  $3 = $2 >> 12;
  $4 = (36216 + ($i$031$i$i<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 32768)|0;
  $7 = $6 >> 16;
  $8 = Math_imul($7, $3)|0;
  $9 = (($tmp$i$i) + ($i$031$i$i<<2)|0);
  HEAP32[$9>>2] = $8;
  $10 = (($i$031$i$i) + 1)|0;
  $11 = (($X) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 2048)|0;
  $14 = $13 >> 12;
  $15 = (36216 + ($10<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 32768)|0;
  $18 = $17 >> 16;
  $19 = Math_imul($18, $14)|0;
  $20 = (($tmp$i$i) + ($10<<2)|0);
  HEAP32[$20>>2] = $19;
  $21 = (($i$031$i$i) + 2)|0;
  $22 = (($X) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 2048)|0;
  $25 = $24 >> 12;
  $26 = (36216 + ($21<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 32768)|0;
  $29 = $28 >> 16;
  $30 = Math_imul($29, $25)|0;
  $31 = (($tmp$i$i) + ($21<<2)|0);
  HEAP32[$31>>2] = $30;
  $32 = (($i$031$i$i) + 3)|0;
  $33 = ($32|0)<(18);
  if ($33) {
   $i$031$i$i = $32;
  } else {
   break;
  }
 }
 $34 = HEAP32[$tmp$i$i>>2]|0;
 $35 = ((($tmp$i$i)) + 68|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($34))|0;
 $38 = ((($tmp$i$i)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($tmp$i$i)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($39))|0;
 $43 = ((($tmp$i$i)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($tmp$i$i)) + 60|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($44))|0;
 $48 = ((($tmp$i$i)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($tmp$i$i)) + 56|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($49))|0;
 $53 = ((($tmp$i$i)) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($tmp$i$i)) + 52|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($54))|0;
 $58 = ((($tmp$i$i)) + 20|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($tmp$i$i)) + 48|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + ($59))|0;
 $63 = ((($tmp$i$i)) + 24|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($tmp$i$i)) + 44|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + ($64))|0;
 $68 = ((($tmp$i$i)) + 28|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($tmp$i$i)) + 40|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + ($69))|0;
 $73 = ((($tmp$i$i)) + 32|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($tmp$i$i)) + 36|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) + ($74))|0;
 $78 = (($62) + ($52))|0;
 $79 = (($52) - ($62))|0;
 $80 = (($67) + ($47))|0;
 $81 = (($67) - ($47))|0;
 $82 = (($72) + ($42))|0;
 $83 = (($77) + ($37))|0;
 $84 = (($77) - ($37))|0;
 $85 = (($80) + ($78))|0;
 $86 = (($85) + ($83))|0;
 $87 = (($79) + 2048)|0;
 $88 = (($81) + ($87))|0;
 $89 = $88 >> 12;
 $90 = Math_imul($89, -5266)|0;
 $91 = (($87) - ($84))|0;
 $92 = $91 >> 12;
 $93 = ($92*8068)|0;
 $94 = (($81) + 2048)|0;
 $95 = (($94) + ($84))|0;
 $96 = $95 >> 12;
 $97 = Math_imul($96, -2802)|0;
 $98 = (($87) - ($81))|0;
 $99 = (($98) + ($84))|0;
 $100 = $99 >> 12;
 $101 = (($42) + 2048)|0;
 $102 = (($101) - ($72))|0;
 $103 = $102 >> 12;
 $104 = Math_imul($103, -7094)|0;
 $105 = (($80) + 2048)|0;
 $106 = (($105) - ($83))|0;
 $107 = $106 >> 12;
 $108 = Math_imul($107, -7698)|0;
 $109 = (($78) + 2048)|0;
 $110 = (($109) - ($83))|0;
 $111 = $110 >> 12;
 $112 = Math_imul($111, -1423)|0;
 $113 = (($109) - ($80))|0;
 $114 = $113 >> 12;
 $115 = Math_imul($114, -6275)|0;
 $116 = (($82) + ($57))|0;
 $117 = $57 << 1;
 $118 = (($117) - ($82))|0;
 $119 = (($108) + ($118))|0;
 $120 = (($104) - ($97))|0;
 $121 = (($86) + ($116))|0;
 $$neg9$i$i$i$i = (($90) - ($104))|0;
 $122 = (($$neg9$i$i$i$i) + ($93))|0;
 $$neg11$i$i$i$i = (($115) - ($118))|0;
 $123 = (($$neg11$i$i$i$i) + ($108))|0;
 $124 = (($119) - ($112))|0;
 $125 = (($120) + ($93))|0;
 $126 = $116 << 1;
 $127 = (($86) - ($126))|0;
 $128 = (($104) + ($90))|0;
 $129 = (($128) + ($97))|0;
 $130 = (($118) + ($115))|0;
 $131 = (($130) + ($112))|0;
 $132 = (($34) + 2048)|0;
 $133 = (($132) - ($36))|0;
 $134 = $133 >> 12;
 $135 = ($134*8161)|0;
 $136 = (($39) + 2048)|0;
 $137 = (($136) - ($41))|0;
 $138 = $137 >> 12;
 $139 = ($138*7913)|0;
 $140 = (($44) + 2048)|0;
 $141 = (($140) - ($46))|0;
 $142 = $141 >> 12;
 $143 = ($142*7424)|0;
 $144 = (($49) + 2048)|0;
 $145 = (($144) - ($51))|0;
 $146 = $145 >> 12;
 $147 = ($146*6710)|0;
 $148 = (($54) + 2048)|0;
 $149 = (($148) - ($56))|0;
 $150 = $149 >> 12;
 $151 = ($150*5793)|0;
 $152 = (($59) + 2048)|0;
 $153 = (($152) - ($61))|0;
 $154 = $153 >> 12;
 $155 = ($154*4699)|0;
 $156 = (($64) + 2048)|0;
 $157 = (($156) - ($66))|0;
 $158 = $157 >> 12;
 $159 = ($158*3462)|0;
 $160 = (($69) + 2048)|0;
 $161 = (($160) - ($71))|0;
 $162 = $161 >> 12;
 $163 = ($162*2120)|0;
 $164 = (($74) + 2048)|0;
 $165 = (($164) - ($76))|0;
 $166 = $165 >> 12;
 $167 = ($166*714)|0;
 $168 = (($155) + ($147))|0;
 $169 = (($147) - ($155))|0;
 $170 = (($159) + ($143))|0;
 $171 = (($159) - ($143))|0;
 $172 = (($163) + ($139))|0;
 $173 = (($167) + ($135))|0;
 $174 = (($167) - ($135))|0;
 $175 = (($170) + ($168))|0;
 $176 = (($175) + ($173))|0;
 $177 = (($169) + 2048)|0;
 $178 = (($171) + ($177))|0;
 $179 = $178 >> 12;
 $180 = Math_imul($179, -5266)|0;
 $181 = (($177) - ($174))|0;
 $182 = $181 >> 12;
 $183 = ($182*8068)|0;
 $184 = (($171) + 2048)|0;
 $185 = (($184) + ($174))|0;
 $186 = $185 >> 12;
 $187 = Math_imul($186, -2802)|0;
 $188 = (($177) - ($171))|0;
 $189 = (($188) + ($174))|0;
 $190 = $189 >> 12;
 $191 = Math_imul($190, -7094)|0;
 $192 = (($139) + 2048)|0;
 $193 = (($192) - ($163))|0;
 $194 = $193 >> 12;
 $195 = Math_imul($194, -7094)|0;
 $196 = (($170) + 2048)|0;
 $197 = (($196) - ($173))|0;
 $198 = $197 >> 12;
 $199 = Math_imul($198, -7698)|0;
 $200 = (($168) + 2048)|0;
 $201 = (($200) - ($173))|0;
 $202 = $201 >> 12;
 $203 = Math_imul($202, -1423)|0;
 $204 = (($200) - ($170))|0;
 $205 = $204 >> 12;
 $206 = Math_imul($205, -6275)|0;
 $207 = (($172) + ($151))|0;
 $208 = ($150*11586)|0;
 $209 = (($208) - ($172))|0;
 $210 = (($199) + ($209))|0;
 $211 = (($195) - ($187))|0;
 $212 = (($176) + ($207))|0;
 $$neg9$i1$i$i$i = (($180) - ($195))|0;
 $$neg11$i2$i$i$i = (($206) - ($209))|0;
 $213 = (($$neg11$i2$i$i$i) + ($199))|0;
 $214 = (($210) - ($203))|0;
 $215 = (($211) + ($183))|0;
 $216 = $207 << 1;
 $217 = (($176) - ($216))|0;
 $218 = (($195) + ($180))|0;
 $219 = (($218) + ($187))|0;
 $220 = (($209) + ($206))|0;
 $221 = (($220) + ($203))|0;
 $222 = (($$neg9$i1$i$i$i) - ($212))|0;
 $223 = (($222) + ($183))|0;
 $224 = (($213) - ($223))|0;
 $225 = (($191) - ($224))|0;
 $226 = (($214) - ($225))|0;
 $227 = (($215) - ($226))|0;
 $228 = (($217) - ($227))|0;
 $229 = (($219) - ($228))|0;
 $230 = (($221) - ($229))|0;
 $231 = (($121|0) / 2)&-1;
 $232 = (($212|0) / 2)&-1;
 $233 = (($232) - ($231))|0;
 $234 = (($122|0) / 2)&-1;
 $235 = (($234) - ($233))|0;
 $236 = (($223|0) / 2)&-1;
 $237 = (($236) - ($235))|0;
 $238 = (($123|0) / 2)&-1;
 $239 = (($238) - ($237))|0;
 $240 = (($224|0) / 2)&-1;
 $241 = (($240) - ($239))|0;
 $242 = Math_imul($100, -3547)|0;
 $243 = (($242) - ($241))|0;
 $244 = (($225|0) / 2)&-1;
 $245 = (($244) - ($243))|0;
 $246 = (($124|0) / 2)&-1;
 $247 = (($246) - ($245))|0;
 $248 = (($226|0) / 2)&-1;
 $249 = (($248) - ($247))|0;
 $250 = (($125|0) / 2)&-1;
 $251 = (($250) - ($249))|0;
 $252 = (($227|0) / 2)&-1;
 $253 = (($252) - ($251))|0;
 $254 = (($127|0) / 2)&-1;
 $255 = (($254) - ($253))|0;
 $256 = (($228|0) / 2)&-1;
 $257 = (($256) - ($255))|0;
 $258 = (($129|0) / 2)&-1;
 $259 = (($258) - ($257))|0;
 $260 = (($229|0) / 2)&-1;
 $261 = (($260) - ($259))|0;
 $262 = (($131|0) / 2)&-1;
 $263 = (($262) - ($261))|0;
 $264 = (($230|0) / 2)&-1;
 $265 = (($264) - ($263))|0;
 HEAP32[$z>>2] = $249;
 $266 = ((($z)) + 4|0);
 HEAP32[$266>>2] = $251;
 $267 = ((($z)) + 8|0);
 HEAP32[$267>>2] = $253;
 $268 = ((($z)) + 12|0);
 HEAP32[$268>>2] = $255;
 $269 = ((($z)) + 16|0);
 HEAP32[$269>>2] = $257;
 $270 = ((($z)) + 20|0);
 HEAP32[$270>>2] = $259;
 $271 = ((($z)) + 24|0);
 HEAP32[$271>>2] = $261;
 $272 = ((($z)) + 28|0);
 HEAP32[$272>>2] = $263;
 $273 = ((($z)) + 32|0);
 HEAP32[$273>>2] = $265;
 $274 = (0 - ($265))|0;
 $275 = ((($z)) + 36|0);
 HEAP32[$275>>2] = $274;
 $276 = (0 - ($263))|0;
 $277 = ((($z)) + 40|0);
 HEAP32[$277>>2] = $276;
 $278 = (0 - ($261))|0;
 $279 = ((($z)) + 44|0);
 HEAP32[$279>>2] = $278;
 $280 = (0 - ($259))|0;
 $281 = ((($z)) + 48|0);
 HEAP32[$281>>2] = $280;
 $282 = (0 - ($257))|0;
 $283 = ((($z)) + 52|0);
 HEAP32[$283>>2] = $282;
 $284 = (0 - ($255))|0;
 $285 = ((($z)) + 56|0);
 HEAP32[$285>>2] = $284;
 $286 = (0 - ($253))|0;
 $287 = ((($z)) + 60|0);
 HEAP32[$287>>2] = $286;
 $288 = (0 - ($251))|0;
 $289 = ((($z)) + 64|0);
 HEAP32[$289>>2] = $288;
 $290 = (0 - ($249))|0;
 $291 = ((($z)) + 68|0);
 HEAP32[$291>>2] = $290;
 $292 = (0 - ($247))|0;
 $293 = ((($z)) + 72|0);
 HEAP32[$293>>2] = $292;
 $294 = (0 - ($245))|0;
 $295 = ((($z)) + 76|0);
 HEAP32[$295>>2] = $294;
 $296 = (0 - ($243))|0;
 $297 = ((($z)) + 80|0);
 HEAP32[$297>>2] = $296;
 $298 = (0 - ($241))|0;
 $299 = ((($z)) + 84|0);
 HEAP32[$299>>2] = $298;
 $300 = (0 - ($239))|0;
 $301 = ((($z)) + 88|0);
 HEAP32[$301>>2] = $300;
 $302 = (0 - ($237))|0;
 $303 = ((($z)) + 92|0);
 HEAP32[$303>>2] = $302;
 $304 = (0 - ($235))|0;
 $305 = ((($z)) + 96|0);
 HEAP32[$305>>2] = $304;
 $306 = (0 - ($233))|0;
 $307 = ((($z)) + 100|0);
 HEAP32[$307>>2] = $306;
 $308 = (0 - ($231))|0;
 $309 = ((($z)) + 104|0);
 HEAP32[$309>>2] = $308;
 $310 = ((($z)) + 108|0);
 HEAP32[$310>>2] = $308;
 $311 = ((($z)) + 112|0);
 HEAP32[$311>>2] = $306;
 $312 = ((($z)) + 116|0);
 HEAP32[$312>>2] = $304;
 $313 = ((($z)) + 120|0);
 HEAP32[$313>>2] = $302;
 $314 = ((($z)) + 124|0);
 HEAP32[$314>>2] = $300;
 $315 = ((($z)) + 128|0);
 HEAP32[$315>>2] = $298;
 $316 = ((($z)) + 132|0);
 HEAP32[$316>>2] = $296;
 $317 = ((($z)) + 136|0);
 HEAP32[$317>>2] = $294;
 $318 = ((($z)) + 140|0);
 HEAP32[$318>>2] = $292;
 switch ($block_type|0) {
 case 0:  {
  $339 = $249;$i$038 = 0;
  while(1) {
   $337 = (($z) + ($i$038<<2)|0);
   $338 = (($339) + 2048)|0;
   $340 = $338 >> 12;
   $341 = (36288 + ($i$038<<2)|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = (($342) + 32768)|0;
   $344 = $343 >> 16;
   $345 = Math_imul($344, $340)|0;
   HEAP32[$337>>2] = $345;
   $346 = $i$038 | 1;
   $347 = (($z) + ($346<<2)|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = (($348) + 2048)|0;
   $350 = $349 >> 12;
   $351 = (36288 + ($346<<2)|0);
   $352 = HEAP32[$351>>2]|0;
   $353 = (($352) + 32768)|0;
   $354 = $353 >> 16;
   $355 = Math_imul($354, $350)|0;
   HEAP32[$347>>2] = $355;
   $356 = $i$038 | 2;
   $357 = (($z) + ($356<<2)|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = (($358) + 2048)|0;
   $360 = $359 >> 12;
   $361 = (36288 + ($356<<2)|0);
   $362 = HEAP32[$361>>2]|0;
   $363 = (($362) + 32768)|0;
   $364 = $363 >> 16;
   $365 = Math_imul($364, $360)|0;
   HEAP32[$357>>2] = $365;
   $366 = $i$038 | 3;
   $367 = (($z) + ($366<<2)|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = (($368) + 2048)|0;
   $370 = $369 >> 12;
   $371 = (36288 + ($366<<2)|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = (($372) + 32768)|0;
   $374 = $373 >> 16;
   $375 = Math_imul($374, $370)|0;
   HEAP32[$367>>2] = $375;
   $376 = (($i$038) + 4)|0;
   $377 = ($376>>>0)<(36);
   if (!($377)) {
    break;
   }
   $$phi$trans$insert53 = (($z) + ($376<<2)|0);
   $$pre54 = HEAP32[$$phi$trans$insert53>>2]|0;
   $339 = $$pre54;$i$038 = $376;
  }
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $404 = $249;$i$141 = 0;
  while(1) {
   $402 = (($z) + ($i$141<<2)|0);
   $403 = (($404) + 2048)|0;
   $405 = $403 >> 12;
   $406 = (36288 + ($i$141<<2)|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = (($407) + 32768)|0;
   $409 = $408 >> 16;
   $410 = Math_imul($409, $405)|0;
   HEAP32[$402>>2] = $410;
   $411 = (($i$141) + 1)|0;
   $412 = (($z) + ($411<<2)|0);
   $413 = HEAP32[$412>>2]|0;
   $414 = (($413) + 2048)|0;
   $415 = $414 >> 12;
   $416 = (36288 + ($411<<2)|0);
   $417 = HEAP32[$416>>2]|0;
   $418 = (($417) + 32768)|0;
   $419 = $418 >> 16;
   $420 = Math_imul($419, $415)|0;
   HEAP32[$412>>2] = $420;
   $421 = (($i$141) + 2)|0;
   $422 = (($z) + ($421<<2)|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = (($423) + 2048)|0;
   $425 = $424 >> 12;
   $426 = (36288 + ($421<<2)|0);
   $427 = HEAP32[$426>>2]|0;
   $428 = (($427) + 32768)|0;
   $429 = $428 >> 16;
   $430 = Math_imul($429, $425)|0;
   HEAP32[$422>>2] = $430;
   $431 = (($i$141) + 3)|0;
   $432 = ($431>>>0)<(18);
   if (!($432)) {
    break;
   }
   $$phi$trans$insert50 = (($z) + ($431<<2)|0);
   $$pre51 = HEAP32[$$phi$trans$insert50>>2]|0;
   $404 = $$pre51;$i$141 = $431;
  }
  $378 = HEAP32[$305>>2]|0;
  $379 = (($378) + 2048)|0;
  $380 = $379 >> 12;
  $381 = ($380*4061)|0;
  HEAP32[$305>>2] = $381;
  $382 = HEAP32[$307>>2]|0;
  $383 = (($382) + 2048)|0;
  $384 = $383 >> 12;
  $385 = ($384*3784)|0;
  HEAP32[$307>>2] = $385;
  $386 = HEAP32[$309>>2]|0;
  $387 = (($386) + 2048)|0;
  $388 = $387 >> 12;
  $389 = ($388*3250)|0;
  HEAP32[$309>>2] = $389;
  $390 = HEAP32[$310>>2]|0;
  $391 = (($390) + 2048)|0;
  $392 = $391 >> 12;
  $393 = ($392*2493)|0;
  HEAP32[$310>>2] = $393;
  $394 = HEAP32[$311>>2]|0;
  $395 = (($394) + 2048)|0;
  $396 = $395 >> 12;
  $397 = ($396*1567)|0;
  HEAP32[$311>>2] = $397;
  $398 = HEAP32[$312>>2]|0;
  $399 = (($398) + 2048)|0;
  $400 = $399 >> 12;
  $401 = ($400*535)|0;
  HEAP32[$312>>2] = $401;
  ;HEAP32[$313>>2]=0|0;HEAP32[$313+4>>2]=0|0;HEAP32[$313+8>>2]=0|0;HEAP32[$313+12>>2]=0|0;HEAP32[$313+16>>2]=0|0;HEAP32[$313+20>>2]=0|0;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  ;HEAP32[$z>>2]=0|0;HEAP32[$z+4>>2]=0|0;HEAP32[$z+8>>2]=0|0;HEAP32[$z+12>>2]=0|0;HEAP32[$z+16>>2]=0|0;HEAP32[$z+20>>2]=0|0;
  $319 = (($261) + 2048)|0;
  $320 = $319 >> 12;
  $321 = ($320*535)|0;
  HEAP32[$271>>2] = $321;
  $322 = (($263) + 2048)|0;
  $323 = $322 >> 12;
  $324 = ($323*1567)|0;
  HEAP32[$272>>2] = $324;
  $325 = (($265) + 2048)|0;
  $326 = $325 >> 12;
  $327 = ($326*2493)|0;
  HEAP32[$273>>2] = $327;
  $328 = (2048 - ($265))|0;
  $329 = $328 >> 12;
  $330 = ($329*3250)|0;
  HEAP32[$275>>2] = $330;
  $331 = (2048 - ($263))|0;
  $332 = $331 >> 12;
  $333 = ($332*3784)|0;
  HEAP32[$277>>2] = $333;
  $334 = (2048 - ($261))|0;
  $335 = $334 >> 12;
  $336 = ($335*4061)|0;
  HEAP32[$279>>2] = $336;
  $435 = $292;$i$642 = 18;
  while(1) {
   $433 = (($z) + ($i$642<<2)|0);
   $434 = (($435) + 2048)|0;
   $436 = $434 >> 12;
   $437 = (36288 + ($i$642<<2)|0);
   $438 = HEAP32[$437>>2]|0;
   $439 = (($438) + 32768)|0;
   $440 = $439 >> 16;
   $441 = Math_imul($440, $436)|0;
   HEAP32[$433>>2] = $441;
   $442 = (($i$642) + 1)|0;
   $443 = (($z) + ($442<<2)|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = (($444) + 2048)|0;
   $446 = $445 >> 12;
   $447 = (36288 + ($442<<2)|0);
   $448 = HEAP32[$447>>2]|0;
   $449 = (($448) + 32768)|0;
   $450 = $449 >> 16;
   $451 = Math_imul($450, $446)|0;
   HEAP32[$443>>2] = $451;
   $452 = (($i$642) + 2)|0;
   $453 = (($z) + ($452<<2)|0);
   $454 = HEAP32[$453>>2]|0;
   $455 = (($454) + 2048)|0;
   $456 = $455 >> 12;
   $457 = (36288 + ($452<<2)|0);
   $458 = HEAP32[$457>>2]|0;
   $459 = (($458) + 32768)|0;
   $460 = $459 >> 16;
   $461 = Math_imul($460, $456)|0;
   HEAP32[$453>>2] = $461;
   $462 = (($i$642) + 3)|0;
   $463 = ($462>>>0)<(36);
   if (!($463)) {
    break;
   }
   $$phi$trans$insert = (($z) + ($462<<2)|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $435 = $$pre;$i$642 = $462;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _mad_stream_sync($stream) {
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr$0$lcssa = 0, $ptr$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 28|0);
 $1 = (_mad_bit_nextbyte($0)|0);
 $2 = ((($stream)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -1|0);
 $5 = ($1>>>0)<($4>>>0);
 L1: do {
  if ($5) {
   $ptr$02 = $1;
   while(1) {
    $6 = HEAP8[$ptr$02>>0]|0;
    $7 = ($6<<24>>24)==(-1);
    $8 = ((($ptr$02)) + 1|0);
    if ($7) {
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9&255)>(223);
     if ($10) {
      $ptr$0$lcssa = $ptr$02;
      break L1;
     }
    }
    $11 = ($8>>>0)<($4>>>0);
    if ($11) {
     $ptr$02 = $8;
    } else {
     $ptr$0$lcssa = $8;
     break;
    }
   }
  } else {
   $ptr$0$lcssa = $1;
  }
 } while(0);
 $12 = $3;
 $13 = $ptr$0$lcssa;
 $14 = (($12) - ($13))|0;
 $15 = ($14|0)<(8);
 if ($15) {
  $$0 = -1;
  return ($$0|0);
 }
 _mad_bit_init($0,$ptr$0$lcssa);
 $$0 = 0;
 return ($$0|0);
}
function _decode_header($header,$stream) {
 $header = $header|0;
 $stream = $stream|0;
 var $$0 = 0, $$byval_copy = 0, $$pn = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $0 = ((($header)) + 28|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($header)) + 32|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($stream)) + 28|0);
 _mad_bit_skip($2,11);
 $3 = (_mad_bit_read($2,1)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 | 16384;
  HEAP32[$0>>2] = $6;
 }
 $7 = (_mad_bit_read($2,1)|0);
 $8 = ($7|0)==(0);
 $9 = HEAP32[$0>>2]|0;
 if ($8) {
  $10 = $9 | 4096;
  HEAP32[$0>>2] = $10;
 } else {
  $11 = $9 & 16384;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($stream)) + 60|0);
   HEAP32[$13>>2] = 257;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $14 = (_mad_bit_read($2,2)|0);
 $15 = (4 - ($14))|0;
 HEAP32[$header>>2] = $15;
 $16 = ($14|0)==(0);
 if ($16) {
  $17 = ((($stream)) + 60|0);
  HEAP32[$17>>2] = 258;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (_mad_bit_read($2,1)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = HEAP32[$0>>2]|0;
  $21 = $20 | 16;
  HEAP32[$0>>2] = $21;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
  $22 = (_mad_bit_crc($$byval_copy,16,-1)|0);
  $23 = ((($header)) + 24|0);
  HEAP16[$23>>1] = $22;
 }
 $24 = (_mad_bit_read($2,4)|0);
 $25 = ($24|0)==(15);
 if ($25) {
  $26 = ((($stream)) + 60|0);
  HEAP32[$26>>2] = 259;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = $27 & 4096;
 $29 = ($28|0)==(0);
 $30 = HEAP32[$header>>2]|0;
 $31 = (($30) + -1)|0;
 $32 = $30 >>> 1;
 $33 = (($32) + 3)|0;
 $$pn = $29 ? $31 : $33;
 $$sink$in = ((36624 + (($$pn*60)|0)|0) + ($24<<2)|0);
 $$sink = HEAP32[$$sink$in>>2]|0;
 $34 = ((($header)) + 16|0);
 HEAP32[$34>>2] = $$sink;
 $35 = (_mad_bit_read($2,2)|0);
 $36 = ($35|0)==(3);
 if ($36) {
  $37 = ((($stream)) + 60|0);
  HEAP32[$37>>2] = 260;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = (36924 + ($35<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($header)) + 20|0);
 HEAP32[$40>>2] = $39;
 $41 = HEAP32[$0>>2]|0;
 $42 = $41 & 4096;
 $43 = ($42|0)==(0);
 if (!($43)) {
  $44 = $39 >>> 1;
  HEAP32[$40>>2] = $44;
  $45 = $41 & 16384;
  $46 = ($45|0)==(0);
  if (!($46)) {
   $47 = $39 >>> 2;
   HEAP32[$40>>2] = $47;
  }
 }
 $48 = (_mad_bit_read($2,1)|0);
 $49 = ($48|0)==(0);
 if (!($49)) {
  $50 = HEAP32[$0>>2]|0;
  $51 = $50 | 128;
  HEAP32[$0>>2] = $51;
 }
 $52 = (_mad_bit_read($2,1)|0);
 $53 = ($52|0)==(0);
 if (!($53)) {
  $54 = HEAP32[$1>>2]|0;
  $55 = $54 | 256;
  HEAP32[$1>>2] = $55;
 }
 $56 = (_mad_bit_read($2,2)|0);
 $57 = (3 - ($56))|0;
 $58 = ((($header)) + 4|0);
 HEAP32[$58>>2] = $57;
 $59 = (_mad_bit_read($2,2)|0);
 $60 = ((($header)) + 8|0);
 HEAP32[$60>>2] = $59;
 $61 = (_mad_bit_read($2,1)|0);
 $62 = ($61|0)==(0);
 if (!($62)) {
  $63 = HEAP32[$0>>2]|0;
  $64 = $63 | 32;
  HEAP32[$0>>2] = $64;
 }
 $65 = (_mad_bit_read($2,1)|0);
 $66 = ($65|0)==(0);
 if (!($66)) {
  $67 = HEAP32[$0>>2]|0;
  $68 = $67 | 64;
  HEAP32[$0>>2] = $68;
 }
 $69 = (_mad_bit_read($2,2)|0);
 $70 = ((($header)) + 12|0);
 HEAP32[$70>>2] = $69;
 $71 = HEAP32[$0>>2]|0;
 $72 = $71 & 16;
 $73 = ($72|0)==(0);
 if ($73) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $74 = (_mad_bit_read($2,16)|0);
 $75 = $74&65535;
 $76 = ((($header)) + 26|0);
 HEAP16[$76>>1] = $75;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _mad_timer_set($timer,$seconds,$numer,$denom) {
 $timer = $timer|0;
 $seconds = $seconds|0;
 $numer = $numer|0;
 $denom = $denom|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i1$i = 0, $$012$i$i = 0, $$012$i$i3 = 0, $$012$i$i3$lcssa = 0, $$03$i$i = 0, $$03$i$i$phi = 0, $$03$i$i2 = 0, $$03$i$i2$phi = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split2D = 0, $switch$split42D = 0, $switch$split72D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$timer>>2] = $seconds;
 $0 = ($numer>>>0)>=($denom>>>0);
 $1 = ($denom|0)!=(0);
 $or$cond = $0 & $1;
 if ($or$cond) {
  $2 = (($numer>>>0) / ($denom>>>0))&-1;
  $3 = (($2) + ($seconds))|0;
  HEAP32[$timer>>2] = $3;
  $4 = (($numer>>>0) % ($denom>>>0))&-1;
  $$0 = $4;$58 = $3;
 } else {
  $$0 = $numer;$58 = $seconds;
 }
 $switch$split2D = ($denom|0)<(16000);
 L4: do {
  if ($switch$split2D) {
   $switch$split12D = ($denom|0)<(8000);
   if ($switch$split12D) {
    switch ($denom|0) {
    case 1: case 0:  {
     break;
    }
    case 1000:  {
     $7 = ($$0*352800)|0;
     $8 = ((($timer)) + 4|0);
     HEAP32[$8>>2] = $7;
     $$pre$phiZ2D = $8;$55 = $7;
     break L4;
     break;
    }
    default: {
     $$012$i$i3 = $denom;$$03$i$i2 = $$0;
     label = 16;
     break L4;
    }
    }
    $5 = ((($timer)) + 4|0);
    HEAP32[$5>>2] = 0;
    return;
   }
   $switch$split72D = ($denom|0)<(11025);
   if ($switch$split72D) {
    switch ($denom|0) {
    case 8000:  {
     break;
    }
    default: {
     $$012$i$i3 = $denom;$$03$i$i2 = $$0;
     label = 16;
     break L4;
    }
    }
    $9 = ($$0*44100)|0;
    $10 = ((($timer)) + 4|0);
    HEAP32[$10>>2] = $9;
    $$pre$phiZ2D = $10;$55 = $9;
    break;
   }
   switch ($denom|0) {
   case 11025:  {
    $11 = ($$0*32000)|0;
    $12 = ((($timer)) + 4|0);
    HEAP32[$12>>2] = $11;
    $$pre$phiZ2D = $12;$55 = $11;
    break L4;
    break;
   }
   case 12000:  {
    $13 = ($$0*29400)|0;
    $14 = ((($timer)) + 4|0);
    HEAP32[$14>>2] = $13;
    $$pre$phiZ2D = $14;$55 = $13;
    break L4;
    break;
   }
   default: {
    $$012$i$i3 = $denom;$$03$i$i2 = $$0;
    label = 16;
    break L4;
   }
   }
  } else {
   $switch$split42D = ($denom|0)<(32000);
   if ($switch$split42D) {
    $switch$split102D = ($denom|0)<(22050);
    if ($switch$split102D) {
     switch ($denom|0) {
     case 16000:  {
      break;
     }
     default: {
      $$012$i$i3 = $denom;$$03$i$i2 = $$0;
      label = 16;
      break L4;
     }
     }
     $15 = ($$0*22050)|0;
     $16 = ((($timer)) + 4|0);
     HEAP32[$16>>2] = $15;
     $$pre$phiZ2D = $16;$55 = $15;
     break;
    }
    switch ($denom|0) {
    case 22050:  {
     $17 = ($$0*16000)|0;
     $18 = ((($timer)) + 4|0);
     HEAP32[$18>>2] = $17;
     $$pre$phiZ2D = $18;$55 = $17;
     break L4;
     break;
    }
    case 24000:  {
     $19 = ($$0*14700)|0;
     $20 = ((($timer)) + 4|0);
     HEAP32[$20>>2] = $19;
     $$pre$phiZ2D = $20;$55 = $19;
     break L4;
     break;
    }
    default: {
     $$012$i$i3 = $denom;$$03$i$i2 = $$0;
     label = 16;
     break L4;
    }
    }
   }
   $switch$split132D = ($denom|0)<(48000);
   if ($switch$split132D) {
    $switch$split162D = ($denom|0)<(44100);
    if ($switch$split162D) {
     switch ($denom|0) {
     case 32000:  {
      break;
     }
     default: {
      $$012$i$i3 = $denom;$$03$i$i2 = $$0;
      label = 16;
      break L4;
     }
     }
     $21 = ($$0*11025)|0;
     $22 = ((($timer)) + 4|0);
     HEAP32[$22>>2] = $21;
     $$pre$phiZ2D = $22;$55 = $21;
     break;
    } else {
     switch ($denom|0) {
     case 44100:  {
      break;
     }
     default: {
      $$012$i$i3 = $denom;$$03$i$i2 = $$0;
      label = 16;
      break L4;
     }
     }
     $23 = ($$0*8000)|0;
     $24 = ((($timer)) + 4|0);
     HEAP32[$24>>2] = $23;
     $$pre$phiZ2D = $24;$55 = $23;
     break;
    }
   } else {
    $switch$split192D = ($denom|0)<(352800000);
    if ($switch$split192D) {
     switch ($denom|0) {
     case 48000:  {
      break;
     }
     default: {
      $$012$i$i3 = $denom;$$03$i$i2 = $$0;
      label = 16;
      break L4;
     }
     }
     $25 = ($$0*7350)|0;
     $26 = ((($timer)) + 4|0);
     HEAP32[$26>>2] = $25;
     $$pre$phiZ2D = $26;$55 = $25;
     break;
    } else {
     switch ($denom|0) {
     case 352800000:  {
      break;
     }
     default: {
      $$012$i$i3 = $denom;$$03$i$i2 = $$0;
      label = 16;
      break L4;
     }
     }
     $6 = ((($timer)) + 4|0);
     HEAP32[$6>>2] = $$0;
     $$pre$phiZ2D = $6;$55 = $$0;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  while(1) {
   label = 0;
   $27 = (($$03$i$i2>>>0) % ($$012$i$i3>>>0))&-1;
   $28 = ($27|0)==(0);
   if ($28) {
    $$012$i$i3$lcssa = $$012$i$i3;
    break;
   } else {
    $$03$i$i2$phi = $$012$i$i3;$$012$i$i3 = $27;$$03$i$i2 = $$03$i$i2$phi;
    label = 16;
   }
  }
  $29 = (($$0>>>0) / ($$012$i$i3$lcssa>>>0))&-1;
  $30 = (($denom>>>0) / ($$012$i$i3$lcssa>>>0))&-1;
  $31 = ($30|0)==(0);
  if ($31) {
   $$0$lcssa$i1$i = 352800000;
  } else {
   $$012$i$i = $30;$$03$i$i = 352800000;
   while(1) {
    $32 = (($$03$i$i>>>0) % ($$012$i$i>>>0))&-1;
    $33 = ($32|0)==(0);
    if ($33) {
     $$0$lcssa$i1$i = $$012$i$i;
     break;
    } else {
     $$03$i$i$phi = $$012$i$i;$$012$i$i = $32;$$03$i$i = $$03$i$i$phi;
    }
   }
  }
  $34 = (352800000 / ($$0$lcssa$i1$i>>>0))&-1;
  $35 = (($30>>>0) / ($$0$lcssa$i1$i>>>0))&-1;
  $36 = ($35|0)==(0);
  if ($36) {
   ___assert_fail((43589|0),(43600|0),144,(43608|0));
   // unreachable;
  }
  $37 = ($35>>>0)<($34>>>0);
  do {
   if ($37) {
    $38 = (($34>>>0) / ($35>>>0))&-1;
    $39 = Math_imul($38, $29)|0;
    $40 = (($34>>>0) % ($35>>>0))&-1;
    $41 = Math_imul($40, $29)|0;
    $42 = (($41>>>0) / ($35>>>0))&-1;
    $43 = (($42) + ($39))|0;
    $$0$i = $43;
   } else {
    $44 = ($35>>>0)<($29>>>0);
    if ($44) {
     $45 = (($29>>>0) / ($35>>>0))&-1;
     $46 = Math_imul($45, $34)|0;
     $47 = (($29>>>0) % ($35>>>0))&-1;
     $48 = Math_imul($47, $34)|0;
     $49 = (($48>>>0) / ($35>>>0))&-1;
     $50 = (($49) + ($46))|0;
     $$0$i = $50;
     break;
    } else {
     $51 = Math_imul($34, $29)|0;
     $52 = (($51>>>0) / ($35>>>0))&-1;
     $$0$i = $52;
     break;
    }
   }
  } while(0);
  $53 = ((($timer)) + 4|0);
  HEAP32[$53>>2] = $$0$i;
  $$pre$phiZ2D = $53;$55 = $$0$i;
 }
 $54 = ($55>>>0)>(352799999);
 if (!($54)) {
  return;
 }
 $56 = (($55>>>0) / 352800000)&-1;
 $57 = (($58) + ($56))|0;
 HEAP32[$timer>>2] = $57;
 $59 = (($55>>>0) % 352800000)&-1;
 HEAP32[$$pre$phiZ2D>>2] = $59;
 return;
}
function _free_bitrate($stream,$header) {
 $stream = $stream|0;
 $header = $header|0;
 var $$02 = 0, $$lobit = 0, $$sink = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $peek_header = 0, $peek_stream = 0, $phitmp = 0, $rate$05 = 0, $rate$1 = 0, $rate$1$lcssa = 0, $rate$2 = 0, $rate$4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $peek_stream = sp + 48|0;
 $peek_header = sp;
 $0 = ((($stream)) + 28|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($header)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 7;
 $$lobit = $9 & 1;
 $10 = HEAP32[$header>>2]|0;
 $11 = ($10|0)==(3);
 if ($11) {
  $12 = $8 & 4096;
  $13 = ($12|0)!=(0);
  $phitmp = $13 ? 72 : 144;
  $42 = $phitmp;
 } else {
  $42 = 144;
 }
 $14 = (_mad_stream_sync($stream)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $20 = ((($peek_header)) + 20|0);
  $21 = ((($header)) + 20|0);
  $22 = ((($stream)) + 20|0);
  $23 = $$lobit << 2;
  $24 = (4 - ($23))|0;
  $25 = $$lobit ^ 1;
  $rate$05 = 0;
  while(1) {
   dest=$peek_stream; src=$stream; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   dest=$peek_header; src=$header; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $26 = (_decode_header($peek_header,$peek_stream)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = HEAP32[$peek_header>>2]|0;
    $29 = HEAP32[$header>>2]|0;
    $30 = ($28|0)==($29|0);
    if ($30) {
     $31 = HEAP32[$20>>2]|0;
     $32 = HEAP32[$21>>2]|0;
     $33 = ($31|0)==($32|0);
     if ($33) {
      $34 = (_mad_bit_nextbyte($0)|0);
      $35 = HEAP32[$22>>2]|0;
      $36 = $34;
      $37 = $35;
      $38 = (($36) - ($37))|0;
      $39 = HEAP32[$header>>2]|0;
      $40 = ($39|0)==(1);
      $41 = HEAP32[$21>>2]|0;
      $$sink = $40 ? $24 : $25;
      $$sink1 = $40 ? 48 : $42;
      $43 = (($$sink) + ($38))|0;
      $44 = Math_imul($43, $41)|0;
      $45 = (($44>>>0) / ($$sink1>>>0))&-1;
      $rate$1 = (($45>>>0) / 1000)&-1;
      $46 = ($45>>>0)>(7999);
      if ($46) {
       $rate$1$lcssa = $rate$1;
       label = 11;
       break;
      } else {
       $rate$2 = $rate$1;
      }
     } else {
      $rate$2 = $rate$05;
     }
    } else {
     $rate$2 = $rate$05;
    }
   } else {
    $rate$2 = $rate$05;
   }
   _mad_bit_skip($0,8);
   $47 = (_mad_stream_sync($stream)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    $rate$05 = $rate$2;
   } else {
    $rate$4 = $rate$2;
    break;
   }
  }
  if ((label|0) == 11) {
   $rate$4 = $rate$1$lcssa;
  }
  $49 = $0;
  $50 = $49;
  HEAP32[$50>>2] = $3;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = $6;
  $53 = ($rate$4>>>0)<(8);
  if (!($53)) {
   $54 = HEAP32[$header>>2]|0;
   $55 = ($54|0)==(3);
   $56 = ($rate$4>>>0)>(640);
   $or$cond = $56 & $55;
   if (!($or$cond)) {
    $58 = ($rate$4*1000)|0;
    $59 = ((($stream)) + 16|0);
    HEAP32[$59>>2] = $58;
    $$02 = 0;
    STACKTOP = sp;return ($$02|0);
   }
  }
 } else {
  $16 = $0;
  $17 = $16;
  HEAP32[$17>>2] = $3;
  $18 = (($16) + 4)|0;
  $19 = $18;
  HEAP32[$19>>2] = $6;
 }
 $57 = ((($stream)) + 60|0);
 HEAP32[$57>>2] = 257;
 $$02 = -1;
 STACKTOP = sp;return ($$02|0);
}
function _mad_synth_mute($synth) {
 $synth = $synth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond$1 = 0, $s$03 = 0, $s$03$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$03 = 0;
 while(1) {
  $0 = (((($synth)) + 1536|0) + ($s$03<<5)|0);
  HEAP32[$0>>2] = 0;
  $1 = (((($synth)) + 1024|0) + ($s$03<<5)|0);
  HEAP32[$1>>2] = 0;
  $2 = (((($synth)) + 512|0) + ($s$03<<5)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($synth) + ($s$03<<5)|0);
  HEAP32[$3>>2] = 0;
  $4 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 4|0);
  HEAP32[$4>>2] = 0;
  $5 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 4|0);
  HEAP32[$5>>2] = 0;
  $6 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 4|0);
  HEAP32[$6>>2] = 0;
  $7 = (((($synth) + ($s$03<<5)|0)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 8|0);
  HEAP32[$8>>2] = 0;
  $9 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 8|0);
  HEAP32[$9>>2] = 0;
  $10 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (((($synth) + ($s$03<<5)|0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 12|0);
  HEAP32[$12>>2] = 0;
  $13 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 12|0);
  HEAP32[$13>>2] = 0;
  $14 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 12|0);
  HEAP32[$14>>2] = 0;
  $15 = (((($synth) + ($s$03<<5)|0)) + 12|0);
  HEAP32[$15>>2] = 0;
  $16 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 16|0);
  HEAP32[$16>>2] = 0;
  $17 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 16|0);
  HEAP32[$17>>2] = 0;
  $18 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 16|0);
  HEAP32[$18>>2] = 0;
  $19 = (((($synth) + ($s$03<<5)|0)) + 16|0);
  HEAP32[$19>>2] = 0;
  $20 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 20|0);
  HEAP32[$20>>2] = 0;
  $21 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 20|0);
  HEAP32[$21>>2] = 0;
  $22 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 20|0);
  HEAP32[$22>>2] = 0;
  $23 = (((($synth) + ($s$03<<5)|0)) + 20|0);
  HEAP32[$23>>2] = 0;
  $24 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 24|0);
  HEAP32[$24>>2] = 0;
  $25 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 24|0);
  HEAP32[$25>>2] = 0;
  $26 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 24|0);
  HEAP32[$26>>2] = 0;
  $27 = (((($synth) + ($s$03<<5)|0)) + 24|0);
  HEAP32[$27>>2] = 0;
  $28 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 28|0);
  HEAP32[$28>>2] = 0;
  $29 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 28|0);
  HEAP32[$29>>2] = 0;
  $30 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 28|0);
  HEAP32[$30>>2] = 0;
  $31 = (((($synth) + ($s$03<<5)|0)) + 28|0);
  HEAP32[$31>>2] = 0;
  $32 = (($s$03) + 1)|0;
  $exitcond = ($32|0)==(16);
  if ($exitcond) {
   $s$03$1 = 0;
   break;
  } else {
   $s$03 = $32;
  }
 }
 while(1) {
  $33 = (((($synth)) + 3584|0) + ($s$03$1<<5)|0);
  HEAP32[$33>>2] = 0;
  $34 = (((($synth)) + 3072|0) + ($s$03$1<<5)|0);
  HEAP32[$34>>2] = 0;
  $35 = (((($synth)) + 2560|0) + ($s$03$1<<5)|0);
  HEAP32[$35>>2] = 0;
  $36 = (((($synth)) + 2048|0) + ($s$03$1<<5)|0);
  HEAP32[$36>>2] = 0;
  $37 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 4|0);
  HEAP32[$37>>2] = 0;
  $38 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 4|0);
  HEAP32[$38>>2] = 0;
  $39 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 4|0);
  HEAP32[$39>>2] = 0;
  $40 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 4|0);
  HEAP32[$40>>2] = 0;
  $41 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 8|0);
  HEAP32[$41>>2] = 0;
  $42 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 8|0);
  HEAP32[$42>>2] = 0;
  $43 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 8|0);
  HEAP32[$43>>2] = 0;
  $44 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 8|0);
  HEAP32[$44>>2] = 0;
  $45 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 12|0);
  HEAP32[$45>>2] = 0;
  $46 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 12|0);
  HEAP32[$46>>2] = 0;
  $47 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 12|0);
  HEAP32[$47>>2] = 0;
  $48 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 12|0);
  HEAP32[$48>>2] = 0;
  $49 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 16|0);
  HEAP32[$49>>2] = 0;
  $50 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 16|0);
  HEAP32[$50>>2] = 0;
  $51 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 16|0);
  HEAP32[$51>>2] = 0;
  $52 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 16|0);
  HEAP32[$52>>2] = 0;
  $53 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 20|0);
  HEAP32[$53>>2] = 0;
  $54 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 20|0);
  HEAP32[$54>>2] = 0;
  $55 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 20|0);
  HEAP32[$55>>2] = 0;
  $56 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 20|0);
  HEAP32[$56>>2] = 0;
  $57 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 24|0);
  HEAP32[$57>>2] = 0;
  $58 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 24|0);
  HEAP32[$58>>2] = 0;
  $59 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 24|0);
  HEAP32[$59>>2] = 0;
  $60 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 24|0);
  HEAP32[$60>>2] = 0;
  $61 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 28|0);
  HEAP32[$61>>2] = 0;
  $62 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 28|0);
  HEAP32[$62>>2] = 0;
  $63 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 28|0);
  HEAP32[$63>>2] = 0;
  $64 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 28|0);
  HEAP32[$64>>2] = 0;
  $65 = (($s$03$1) + 1)|0;
  $exitcond$1 = ($65|0)==(16);
  if ($exitcond$1) {
   break;
  } else {
   $s$03$1 = $65;
  }
 }
 return;
}
function __GLOBAL__sub_I_MonaClient_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_NetStreamC2Ev(0);
 __ZN39EmscriptenBindingInitializer_MonaClientC2Ev(0);
 return;
}
function __ZN38EmscriptenBindingInitializer_NetStreamC2Ev($0) {
 $0 = $0|0;
 var $$repack4$i$i = 0, $$repack4$i$i$i = 0, $$repack4$i$i16 = 0, $$repack4$i$i22 = 0, $$repack4$i$i28 = 0, $$repack4$i$i40$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_class((88|0),(96|0),(112|0),(0|0),(43623|0),(43|0),(43626|0),(0|0),(43626|0),(0|0),(44369|0),(43639|0),(44|0));
 __embind_register_class_constructor((88|0),2,(37036|0),(44379|0),(45|0),(46|0));
 $1 = (__Znwj(8)|0);
 HEAP32[$1>>2] = (47);
 $$repack4$i$i = ((($1)) + 4|0);
 HEAP32[$$repack4$i$i>>2] = 0;
 __embind_register_class_function((88|0),(44383|0),4,(37044|0),(44397|0),(48|0),($1|0),0);
 $2 = (__Znwj(8)|0);
 HEAP32[$2>>2] = (49);
 $$repack4$i$i16 = ((($2)) + 4|0);
 HEAP32[$$repack4$i$i16>>2] = 0;
 __embind_register_class_function((88|0),(44403|0),5,(37060|0),(44414|0),(50|0),($2|0),0);
 $3 = (__Znwj(8)|0);
 HEAP32[$3>>2] = (51);
 $$repack4$i$i22 = ((($3)) + 4|0);
 HEAP32[$$repack4$i$i22>>2] = 0;
 __embind_register_class_function((88|0),(44421|0),3,(37080|0),(43655|0),(52|0),($3|0),0);
 $4 = (__Znwj(8)|0);
 HEAP32[$4>>2] = (53);
 $$repack4$i$i28 = ((($4)) + 4|0);
 HEAP32[$$repack4$i$i28>>2] = 0;
 __embind_register_class_function((88|0),(44426|0),2,(37092|0),(43694|0),(54|0),($4|0),0);
 $5 = (__Znwj(8)|0);
 HEAP32[$5>>2] = (55);
 $$repack4$i$i40$i = ((($5)) + 4|0);
 HEAP32[$$repack4$i$i40$i>>2] = 0;
 $6 = (__Znwj(8)|0);
 HEAP32[$6>>2] = (56);
 $$repack4$i$i$i = ((($6)) + 4|0);
 HEAP32[$$repack4$i$i$i>>2] = 0;
 __embind_register_class_property((88|0),(44444|0),(48|0),(44379|0),(57|0),($5|0),(48|0),(43655|0),(58|0),($6|0));
 return;
}
function __ZN39EmscriptenBindingInitializer_MonaClientC2Ev($0) {
 $0 = $0|0;
 var $$repack4$i$i = 0, $$repack4$i$i14 = 0, $$repack4$i$i20 = 0, $$repack4$i$i26 = 0, $$repack4$i$i32 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_class((8|0),(16|0),(32|0),(0|0),(43623|0),(59|0),(43626|0),(0|0),(43626|0),(0|0),(43628|0),(43639|0),(60|0));
 __embind_register_class_constructor((8|0),1,(36936|0),(43623|0),(61|0),(62|0));
 $1 = (__Znwj(8)|0);
 HEAP32[$1>>2] = (63);
 $$repack4$i$i = ((($1)) + 4|0);
 HEAP32[$$repack4$i$i>>2] = 0;
 __embind_register_class_function((8|0),(43642|0),3,(36940|0),(43655|0),(64|0),($1|0),0);
 $2 = (__Znwj(8)|0);
 HEAP32[$2>>2] = (65);
 $$repack4$i$i14 = ((($2)) + 4|0);
 HEAP32[$$repack4$i$i14>>2] = 0;
 __embind_register_class_function((8|0),(43660|0),3,(36940|0),(43655|0),(64|0),($2|0),0);
 $3 = (__Znwj(8)|0);
 HEAP32[$3>>2] = (66);
 $$repack4$i$i20 = ((($3)) + 4|0);
 HEAP32[$$repack4$i$i20>>2] = 0;
 __embind_register_class_function((8|0),(43670|0),3,(36952|0),(43683|0),(67|0),($3|0),0);
 $4 = (__Znwj(8)|0);
 HEAP32[$4>>2] = (68);
 $$repack4$i$i26 = ((($4)) + 4|0);
 HEAP32[$$repack4$i$i26>>2] = 0;
 __embind_register_class_function((8|0),(43688|0),2,(36964|0),(43694|0),(69|0),($4|0),0);
 $5 = (__Znwj(8)|0);
 HEAP32[$5>>2] = (70);
 $$repack4$i$i32 = ((($5)) + 4|0);
 HEAP32[$$repack4$i$i32>>2] = 0;
 __embind_register_class_function((8|0),(43698|0),6,(36972|0),(43707|0),(71|0),($5|0),0);
 return;
}
function __ZN10emscripten8internal13getActualTypeI10MonaClientEEPKvPT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8|0);
}
function __ZN10emscripten8internal14raw_destructorI10MonaClientEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZN10MonaClientD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal7InvokerIP10MonaClientJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 127]()|0);
 return ($1|0);
}
function __ZN10emscripten8internal12operator_newI10MonaClientJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (__Znwj(64)|0);
 $1 = ((($0)) + 56|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 60|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 52|0);
 dest=$0; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$3>>2] = $1;
 return ($0|0);
}
function __ZN10MonaClient11OnWsMessageEN10emscripten3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i23 = 0, $$0$i$i$i38 = 0, $$0$i$i$i55 = 0, $$0$i$i29 = 0, $$0$i$i44 = 0, $$0$i$i61 = 0, $$0$ph$i$i$i = 0, $$0$ph$i$i$i20 = 0, $$0$ph$i$i$i35 = 0, $$0$ph$i$i$i52 = 0, $$020$i$i = 0, $$020$i$i24 = 0, $$020$i$i39 = 0, $$020$i$i56 = 0, $$024$i$i$i = 0, $$024$i$i$i22 = 0, $$024$i$i$i37 = 0;
 var $$024$i$i$i54 = 0, $$025$i$i$i = 0, $$025$i$i$i25 = 0, $$025$i$i$i40 = 0, $$025$i$i$i57 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$2 = 0, $$26 = 0, $$3 = 0, $$37 = 0, $$4 = 0, $$48 = 0, $$in$i$i$i = 0, $$in$i$i$i19 = 0, $$in$i$i$i34 = 0, $$in$i$i$i51 = 0, $$pre = 0, $$pre$i$i$i = 0;
 var $$pre$i$i$i27 = 0, $$pre$i$i$i42 = 0, $$pre$i$i$i59 = 0, $$pre150 = 0, $$pre151 = 0, $$pre152 = 0, $$sroa$0$0$insert$ext$i = 0, $$sroa$0$0$insert$ext$i70 = 0, $$sroa$0$0$insert$insert$i = 0, $$sroa$0$0$insert$insert$i73 = 0, $$sroa$4$0$insert$ext$i = 0, $$sroa$4$0$insert$ext$i68 = 0, $$sroa$4$0$insert$insert$i = 0, $$sroa$4$0$insert$insert$i72 = 0, $$sroa$4$0$insert$shift$i = 0, $$sroa$4$0$insert$shift$i69 = 0, $$sroa$5$0$insert$ext$i = 0, $$sroa$5$0$insert$ext$i66 = 0, $$sroa$5$0$insert$insert$i = 0, $$sroa$5$0$insert$insert$i71 = 0;
 var $$sroa$5$0$insert$shift$i = 0, $$sroa$5$0$insert$shift$i67 = 0, $$sroa$6$0$insert$ext$i = 0, $$sroa$6$0$insert$ext$i64 = 0, $$sroa$6$0$insert$shift$i = 0, $$sroa$6$0$insert$shift$i65 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp;
 $2 = sp + 84|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 64|0;
 $6 = sp + 48|0;
 $7 = sp + 32|0;
 $8 = sp + 16|0;
 $9 = sp + 4|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (__emval_new_cstring((44047|0))|0);
 __THREW__ = 0;
 $12 = (invoke_iii(72,($10|0),($11|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  __THREW__ = 0;
  invoke_vi(73,($11|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $23 = ___cxa_find_matching_catch_3(0|0)|0;
   $24 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable;
  } else {
   ___resumeException($19|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(73,($11|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch_3(0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 }
 __THREW__ = 0;
 $25 = (invoke_ii(74,($12|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 do {
  if ($27) {
   $72 = ___cxa_find_matching_catch_2()|0;
   $73 = tempRet0;
   $$0 = $73;$$04 = $72;
  } else {
   HEAP32[$3>>2] = $25;
   __THREW__ = 0;
   invoke_vii(75,($2|0),($3|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $74 = ___cxa_find_matching_catch_2()|0;
    $75 = tempRet0;
    $76 = HEAP32[$3>>2]|0;
    __THREW__ = 0;
    invoke_vi(73,($76|0));
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if (!($78)) {
     $$0 = $75;$$04 = $74;
     break;
    }
    $79 = ___cxa_find_matching_catch_3(0|0)|0;
    $80 = tempRet0;
    ___clang_call_terminate($79);
    // unreachable;
   }
   $30 = HEAP32[$3>>2]|0;
   __THREW__ = 0;
   invoke_vi(73,($30|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $33 = ___cxa_find_matching_catch_3(0|0)|0;
    $34 = tempRet0;
    ___clang_call_terminate($33);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(73,($12|0));
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    $37 = ___cxa_find_matching_catch_3(0|0)|0;
    $38 = tempRet0;
    ___clang_call_terminate($37);
    // unreachable;
   }
   $39 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   $40 = (invoke_ii(76,(44047|0))|0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   L23: do {
    if ($42) {
     $85 = ___cxa_find_matching_catch_2()|0;
     $86 = tempRet0;
     $eh$lpad$body$index2Z2D = $86;$eh$lpad$body$indexZ2D = $85;
     label = 32;
    } else {
     __THREW__ = 0;
     $43 = (invoke_iii(72,($39|0),($40|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $50 = ___cxa_find_matching_catch_2()|0;
      $51 = tempRet0;
      __THREW__ = 0;
      invoke_vi(73,($40|0));
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if (!($53)) {
       $eh$lpad$body$index2Z2D = $51;$eh$lpad$body$indexZ2D = $50;
       label = 32;
       break;
      }
      $54 = ___cxa_find_matching_catch_3(0|0)|0;
      $55 = tempRet0;
      ___clang_call_terminate($54);
      // unreachable;
     }
     HEAP32[$5>>2] = $43;
     __THREW__ = 0;
     invoke_vi(73,($40|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $48 = ___cxa_find_matching_catch_3(0|0)|0;
      $49 = tempRet0;
      ___clang_call_terminate($48);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vii(75,($4|0),($5|0));
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      $87 = ___cxa_find_matching_catch_2()|0;
      $88 = tempRet0;
      $89 = HEAP32[$5>>2]|0;
      __THREW__ = 0;
      invoke_vi(73,($89|0));
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if (!($91)) {
       $$1 = $88;$$15 = $87;
       label = 35;
       break;
      }
      $92 = ___cxa_find_matching_catch_3(0|0)|0;
      $93 = tempRet0;
      ___clang_call_terminate($92);
      // unreachable;
     }
     $58 = HEAP32[$5>>2]|0;
     __THREW__ = 0;
     invoke_vi(73,($58|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $61 = ___cxa_find_matching_catch_3(0|0)|0;
      $62 = tempRet0;
      ___clang_call_terminate($61);
      // unreachable;
     }
     $63 = ((($0)) + 52|0);
     $64 = ((($0)) + 60|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)==(0);
     L40: do {
      if (!($66)) {
       __THREW__ = 0;
       $67 = (invoke_iii(77,($4|0),0)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       L42: do {
        if ($69) {
         label = 36;
        } else {
         $70 = HEAP8[$67>>0]|0;
         $71 = $70 << 24 >> 24;
         switch ($71|0) {
         case 1:  {
          $96 = ((($0)) + 56|0);
          $97 = HEAP32[$96>>2]|0;
          $98 = ($97|0)==(0|0);
          do {
           if ($98) {
            $$020$i$i = $96;$$025$i$i$i = $96;
           } else {
            $99 = ((($0)) + 56|0);
            $$0$i$i$i = $99;$$024$i$i$i = $97;
            while(1) {
             $100 = ((($$024$i$i$i)) + 16|0);
             $101 = HEAP32[$100>>2]|0;
             $102 = ($101|0)>(0);
             if ($102) {
              $103 = HEAP32[$$024$i$i$i>>2]|0;
              $104 = ($103|0)==(0|0);
              if ($104) {
               label = 42;
               break;
              } else {
               $$0$ph$i$i$i = $$024$i$i$i;$$in$i$i$i = $103;
              }
             } else {
              $105 = ($101|0)<(0);
              if (!($105)) {
               label = 46;
               break;
              }
              $106 = ((($$024$i$i$i)) + 4|0);
              $107 = HEAP32[$106>>2]|0;
              $108 = ($107|0)==(0|0);
              if ($108) {
               label = 45;
               break;
              } else {
               $$0$ph$i$i$i = $106;$$in$i$i$i = $107;
              }
             }
             $$0$i$i$i = $$0$ph$i$i$i;$$024$i$i$i = $$in$i$i$i;
            }
            if ((label|0) == 42) {
             $$020$i$i = $$024$i$i$i;$$025$i$i$i = $$024$i$i$i;
             break;
            }
            else if ((label|0) == 45) {
             $$020$i$i = $$024$i$i$i;$$025$i$i$i = $106;
             break;
            }
            else if ((label|0) == 46) {
             $$020$i$i = $$024$i$i$i;$$025$i$i$i = $$0$i$i$i;
             break;
            }
           }
          } while(0);
          $109 = HEAP32[$$025$i$i$i>>2]|0;
          $110 = ($109|0)==(0|0);
          if ($110) {
           __THREW__ = 0;
           $111 = (invoke_ii(78,24)|0);
           $112 = __THREW__; __THREW__ = 0;
           $113 = $112&1;
           if ($113) {
            $187 = ___cxa_find_matching_catch_2()|0;
            $188 = tempRet0;
            $$2 = $188;$$26 = $187;
            break L42;
           }
           $114 = ((($111)) + 16|0);
           HEAP32[$114>>2] = 0;
           $115 = ((($111)) + 20|0);
           HEAP32[$115>>2] = 0;
           HEAP32[$111>>2] = 0;
           $116 = ((($111)) + 4|0);
           HEAP32[$116>>2] = 0;
           $117 = ((($111)) + 8|0);
           HEAP32[$117>>2] = $$020$i$i;
           HEAP32[$$025$i$i$i>>2] = $111;
           $118 = HEAP32[$63>>2]|0;
           $119 = HEAP32[$118>>2]|0;
           $120 = ($119|0)==(0|0);
           if ($120) {
            $124 = $111;
           } else {
            $121 = $119;
            HEAP32[$63>>2] = $121;
            $$pre$i$i$i = HEAP32[$$025$i$i$i>>2]|0;
            $124 = $$pre$i$i$i;
           }
           $122 = ((($0)) + 56|0);
           $123 = HEAP32[$122>>2]|0;
           __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($123,$124);
           $125 = HEAP32[$64>>2]|0;
           $126 = (($125) + 1)|0;
           HEAP32[$64>>2] = $126;
           $$0$i$i = $111;
          } else {
           $$0$i$i = $109;
          }
          $127 = ((($$0$i$i)) + 20|0);
          $128 = HEAP32[$127>>2]|0;
          $129 = HEAP32[$128>>2]|0;
          $130 = ($129|0)==(0|0);
          if ($130) {
           break L40;
          }
          __THREW__ = 0;
          invoke_viiiii(79,($7|0),($4|0),1,-1,($4|0));
          $131 = __THREW__; __THREW__ = 0;
          $132 = $131&1;
          if ($132) {
           $189 = ___cxa_find_matching_catch_2()|0;
           $190 = tempRet0;
           $$2 = $190;$$26 = $189;
           break L42;
          }
          ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
          $133 = ((($6)) + 12|0);
          HEAP32[$133>>2] = 0;
          $$pre151 = HEAP32[$96>>2]|0;
          $134 = ($$pre151|0)==(0|0);
          do {
           if ($134) {
            $$020$i$i24 = $96;$$025$i$i$i25 = $96;
           } else {
            $135 = ((($0)) + 56|0);
            $$0$i$i$i23 = $135;$$024$i$i$i22 = $$pre151;
            while(1) {
             $136 = ((($$024$i$i$i22)) + 16|0);
             $137 = HEAP32[$136>>2]|0;
             $138 = ($137|0)>(0);
             if ($138) {
              $139 = HEAP32[$$024$i$i$i22>>2]|0;
              $140 = ($139|0)==(0|0);
              if ($140) {
               label = 60;
               break;
              } else {
               $$0$ph$i$i$i20 = $$024$i$i$i22;$$in$i$i$i19 = $139;
              }
             } else {
              $141 = ($137|0)<(0);
              if (!($141)) {
               label = 64;
               break;
              }
              $142 = ((($$024$i$i$i22)) + 4|0);
              $143 = HEAP32[$142>>2]|0;
              $144 = ($143|0)==(0|0);
              if ($144) {
               label = 63;
               break;
              } else {
               $$0$ph$i$i$i20 = $142;$$in$i$i$i19 = $143;
              }
             }
             $$0$i$i$i23 = $$0$ph$i$i$i20;$$024$i$i$i22 = $$in$i$i$i19;
            }
            if ((label|0) == 60) {
             $$020$i$i24 = $$024$i$i$i22;$$025$i$i$i25 = $$024$i$i$i22;
             break;
            }
            else if ((label|0) == 63) {
             $$020$i$i24 = $$024$i$i$i22;$$025$i$i$i25 = $142;
             break;
            }
            else if ((label|0) == 64) {
             $$020$i$i24 = $$024$i$i$i22;$$025$i$i$i25 = $$0$i$i$i23;
             break;
            }
           }
          } while(0);
          $145 = HEAP32[$$025$i$i$i25>>2]|0;
          $146 = ($145|0)==(0|0);
          do {
           if ($146) {
            __THREW__ = 0;
            $147 = (invoke_ii(78,24)|0);
            $148 = __THREW__; __THREW__ = 0;
            $149 = $148&1;
            if ($149) {
             break;
            }
            $150 = ((($147)) + 16|0);
            HEAP32[$150>>2] = 0;
            $151 = ((($147)) + 20|0);
            HEAP32[$151>>2] = 0;
            HEAP32[$147>>2] = 0;
            $152 = ((($147)) + 4|0);
            HEAP32[$152>>2] = 0;
            $153 = ((($147)) + 8|0);
            HEAP32[$153>>2] = $$020$i$i24;
            HEAP32[$$025$i$i$i25>>2] = $147;
            $154 = HEAP32[$63>>2]|0;
            $155 = HEAP32[$154>>2]|0;
            $156 = ($155|0)==(0|0);
            if ($156) {
             $160 = $147;
            } else {
             $157 = $155;
             HEAP32[$63>>2] = $157;
             $$pre$i$i$i27 = HEAP32[$$025$i$i$i25>>2]|0;
             $160 = $$pre$i$i$i27;
            }
            $158 = ((($0)) + 56|0);
            $159 = HEAP32[$158>>2]|0;
            __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($159,$160);
            $161 = HEAP32[$64>>2]|0;
            $162 = (($161) + 1)|0;
            HEAP32[$64>>2] = $162;
            $$pre152 = HEAP32[$133>>2]|0;
            $$0$i$i29 = $147;$171 = $$pre152;
            label = 71;
           } else {
            $$0$i$i29 = $145;$171 = 0;
            label = 71;
           }
          } while(0);
          do {
           if ((label|0) == 71) {
            $163 = ((($$0$i$i29)) + 20|0);
            $164 = HEAP32[$163>>2]|0;
            $165 = ((($6)) + 11|0);
            $166 = HEAP8[$165>>0]|0;
            $167 = ($166<<24>>24)<(0);
            $168 = HEAP32[$6>>2]|0;
            $169 = $167 ? $168 : $6;
            $170 = (($169) + ($171)|0);
            $172 = ((($170)) + 4|0);
            $173 = ((($172)) + -1|0);
            $174 = HEAP8[$173>>0]|0;
            $175 = ((($173)) + -1|0);
            $176 = HEAP8[$175>>0]|0;
            $177 = ((($173)) + -2|0);
            $178 = HEAP8[$177>>0]|0;
            $179 = ((($173)) + -3|0);
            $180 = HEAP8[$179>>0]|0;
            $181 = (($171) + 4)|0;
            HEAP32[$133>>2] = $181;
            $$sroa$6$0$insert$ext$i = $180&255;
            $$sroa$6$0$insert$shift$i = $$sroa$6$0$insert$ext$i << 24;
            $$sroa$5$0$insert$ext$i = $178&255;
            $$sroa$5$0$insert$shift$i = $$sroa$5$0$insert$ext$i << 16;
            $$sroa$4$0$insert$ext$i = $176&255;
            $$sroa$4$0$insert$shift$i = $$sroa$4$0$insert$ext$i << 8;
            $$sroa$0$0$insert$ext$i = $174&255;
            $$sroa$5$0$insert$insert$i = $$sroa$4$0$insert$shift$i | $$sroa$0$0$insert$ext$i;
            $$sroa$4$0$insert$insert$i = $$sroa$5$0$insert$insert$i | $$sroa$5$0$insert$shift$i;
            $$sroa$0$0$insert$insert$i = $$sroa$4$0$insert$insert$i | $$sroa$6$0$insert$shift$i;
            __THREW__ = 0;
            (invoke_iiii(80,($164|0),($$sroa$0$0$insert$insert$i|0),($6|0))|0);
            $182 = __THREW__; __THREW__ = 0;
            $183 = $182&1;
            if ($183) {
             break;
            }
            $184 = HEAP8[$165>>0]|0;
            $185 = ($184<<24>>24)<(0);
            if ($185) {
             $186 = HEAP32[$6>>2]|0;
             __ZdlPv($186);
            }
            break L40;
           }
          } while(0);
          $191 = ___cxa_find_matching_catch_2()|0;
          $192 = tempRet0;
          $193 = ((($6)) + 11|0);
          $194 = HEAP8[$193>>0]|0;
          $195 = ($194<<24>>24)<(0);
          if ($195) {
           $196 = HEAP32[$6>>2]|0;
           __ZdlPv($196);
          }
          $$2 = $192;$$26 = $191;
          break L42;
          break;
         }
         case 2:  {
          $197 = ((($0)) + 56|0);
          $198 = HEAP32[$197>>2]|0;
          $199 = ($198|0)==(0|0);
          do {
           if ($199) {
            $$020$i$i39 = $197;$$025$i$i$i40 = $197;
           } else {
            $200 = ((($0)) + 56|0);
            $$0$i$i$i38 = $200;$$024$i$i$i37 = $198;
            while(1) {
             $201 = ((($$024$i$i$i37)) + 16|0);
             $202 = HEAP32[$201>>2]|0;
             $203 = ($202|0)>(0);
             if ($203) {
              $204 = HEAP32[$$024$i$i$i37>>2]|0;
              $205 = ($204|0)==(0|0);
              if ($205) {
               label = 85;
               break;
              } else {
               $$0$ph$i$i$i35 = $$024$i$i$i37;$$in$i$i$i34 = $204;
              }
             } else {
              $206 = ($202|0)<(0);
              if (!($206)) {
               label = 89;
               break;
              }
              $207 = ((($$024$i$i$i37)) + 4|0);
              $208 = HEAP32[$207>>2]|0;
              $209 = ($208|0)==(0|0);
              if ($209) {
               label = 88;
               break;
              } else {
               $$0$ph$i$i$i35 = $207;$$in$i$i$i34 = $208;
              }
             }
             $$0$i$i$i38 = $$0$ph$i$i$i35;$$024$i$i$i37 = $$in$i$i$i34;
            }
            if ((label|0) == 85) {
             $$020$i$i39 = $$024$i$i$i37;$$025$i$i$i40 = $$024$i$i$i37;
             break;
            }
            else if ((label|0) == 88) {
             $$020$i$i39 = $$024$i$i$i37;$$025$i$i$i40 = $207;
             break;
            }
            else if ((label|0) == 89) {
             $$020$i$i39 = $$024$i$i$i37;$$025$i$i$i40 = $$0$i$i$i38;
             break;
            }
           }
          } while(0);
          $210 = HEAP32[$$025$i$i$i40>>2]|0;
          $211 = ($210|0)==(0|0);
          if ($211) {
           __THREW__ = 0;
           $212 = (invoke_ii(78,24)|0);
           $213 = __THREW__; __THREW__ = 0;
           $214 = $213&1;
           if ($214) {
            $289 = ___cxa_find_matching_catch_2()|0;
            $290 = tempRet0;
            $$2 = $290;$$26 = $289;
            break L42;
           }
           $215 = ((($212)) + 16|0);
           HEAP32[$215>>2] = 0;
           $216 = ((($212)) + 20|0);
           HEAP32[$216>>2] = 0;
           HEAP32[$212>>2] = 0;
           $217 = ((($212)) + 4|0);
           HEAP32[$217>>2] = 0;
           $218 = ((($212)) + 8|0);
           HEAP32[$218>>2] = $$020$i$i39;
           HEAP32[$$025$i$i$i40>>2] = $212;
           $219 = HEAP32[$63>>2]|0;
           $220 = HEAP32[$219>>2]|0;
           $221 = ($220|0)==(0|0);
           if ($221) {
            $225 = $212;
           } else {
            $222 = $220;
            HEAP32[$63>>2] = $222;
            $$pre$i$i$i42 = HEAP32[$$025$i$i$i40>>2]|0;
            $225 = $$pre$i$i$i42;
           }
           $223 = ((($0)) + 56|0);
           $224 = HEAP32[$223>>2]|0;
           __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($224,$225);
           $226 = HEAP32[$64>>2]|0;
           $227 = (($226) + 1)|0;
           HEAP32[$64>>2] = $227;
           $$0$i$i44 = $212;
          } else {
           $$0$i$i44 = $210;
          }
          $228 = ((($$0$i$i44)) + 20|0);
          $229 = HEAP32[$228>>2]|0;
          $230 = ((($229)) + 4|0);
          $231 = HEAP32[$230>>2]|0;
          $232 = ($231|0)==(0|0);
          if ($232) {
           break L40;
          }
          __THREW__ = 0;
          invoke_viiiii(79,($9|0),($4|0),1,-1,($4|0));
          $233 = __THREW__; __THREW__ = 0;
          $234 = $233&1;
          if ($234) {
           $291 = ___cxa_find_matching_catch_2()|0;
           $292 = tempRet0;
           $$2 = $292;$$26 = $291;
           break L42;
          }
          ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
          $235 = ((($8)) + 12|0);
          HEAP32[$235>>2] = 0;
          $$pre = HEAP32[$197>>2]|0;
          $236 = ($$pre|0)==(0|0);
          do {
           if ($236) {
            $$020$i$i56 = $197;$$025$i$i$i57 = $197;
           } else {
            $237 = ((($0)) + 56|0);
            $$0$i$i$i55 = $237;$$024$i$i$i54 = $$pre;
            while(1) {
             $238 = ((($$024$i$i$i54)) + 16|0);
             $239 = HEAP32[$238>>2]|0;
             $240 = ($239|0)>(0);
             if ($240) {
              $241 = HEAP32[$$024$i$i$i54>>2]|0;
              $242 = ($241|0)==(0|0);
              if ($242) {
               label = 103;
               break;
              } else {
               $$0$ph$i$i$i52 = $$024$i$i$i54;$$in$i$i$i51 = $241;
              }
             } else {
              $243 = ($239|0)<(0);
              if (!($243)) {
               label = 107;
               break;
              }
              $244 = ((($$024$i$i$i54)) + 4|0);
              $245 = HEAP32[$244>>2]|0;
              $246 = ($245|0)==(0|0);
              if ($246) {
               label = 106;
               break;
              } else {
               $$0$ph$i$i$i52 = $244;$$in$i$i$i51 = $245;
              }
             }
             $$0$i$i$i55 = $$0$ph$i$i$i52;$$024$i$i$i54 = $$in$i$i$i51;
            }
            if ((label|0) == 103) {
             $$020$i$i56 = $$024$i$i$i54;$$025$i$i$i57 = $$024$i$i$i54;
             break;
            }
            else if ((label|0) == 106) {
             $$020$i$i56 = $$024$i$i$i54;$$025$i$i$i57 = $244;
             break;
            }
            else if ((label|0) == 107) {
             $$020$i$i56 = $$024$i$i$i54;$$025$i$i$i57 = $$0$i$i$i55;
             break;
            }
           }
          } while(0);
          $247 = HEAP32[$$025$i$i$i57>>2]|0;
          $248 = ($247|0)==(0|0);
          do {
           if ($248) {
            __THREW__ = 0;
            $249 = (invoke_ii(78,24)|0);
            $250 = __THREW__; __THREW__ = 0;
            $251 = $250&1;
            if ($251) {
             break;
            }
            $252 = ((($249)) + 16|0);
            HEAP32[$252>>2] = 0;
            $253 = ((($249)) + 20|0);
            HEAP32[$253>>2] = 0;
            HEAP32[$249>>2] = 0;
            $254 = ((($249)) + 4|0);
            HEAP32[$254>>2] = 0;
            $255 = ((($249)) + 8|0);
            HEAP32[$255>>2] = $$020$i$i56;
            HEAP32[$$025$i$i$i57>>2] = $249;
            $256 = HEAP32[$63>>2]|0;
            $257 = HEAP32[$256>>2]|0;
            $258 = ($257|0)==(0|0);
            if ($258) {
             $262 = $249;
            } else {
             $259 = $257;
             HEAP32[$63>>2] = $259;
             $$pre$i$i$i59 = HEAP32[$$025$i$i$i57>>2]|0;
             $262 = $$pre$i$i$i59;
            }
            $260 = ((($0)) + 56|0);
            $261 = HEAP32[$260>>2]|0;
            __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($261,$262);
            $263 = HEAP32[$64>>2]|0;
            $264 = (($263) + 1)|0;
            HEAP32[$64>>2] = $264;
            $$pre150 = HEAP32[$235>>2]|0;
            $$0$i$i61 = $249;$273 = $$pre150;
            label = 114;
           } else {
            $$0$i$i61 = $247;$273 = 0;
            label = 114;
           }
          } while(0);
          do {
           if ((label|0) == 114) {
            $265 = ((($$0$i$i61)) + 20|0);
            $266 = HEAP32[$265>>2]|0;
            $267 = ((($8)) + 11|0);
            $268 = HEAP8[$267>>0]|0;
            $269 = ($268<<24>>24)<(0);
            $270 = HEAP32[$8>>2]|0;
            $271 = $269 ? $270 : $8;
            $272 = (($271) + ($273)|0);
            $274 = ((($272)) + 4|0);
            $275 = ((($274)) + -1|0);
            $276 = HEAP8[$275>>0]|0;
            $277 = ((($275)) + -1|0);
            $278 = HEAP8[$277>>0]|0;
            $279 = ((($275)) + -2|0);
            $280 = HEAP8[$279>>0]|0;
            $281 = ((($275)) + -3|0);
            $282 = HEAP8[$281>>0]|0;
            $283 = (($273) + 4)|0;
            HEAP32[$235>>2] = $283;
            $$sroa$6$0$insert$ext$i64 = $282&255;
            $$sroa$6$0$insert$shift$i65 = $$sroa$6$0$insert$ext$i64 << 24;
            $$sroa$5$0$insert$ext$i66 = $280&255;
            $$sroa$5$0$insert$shift$i67 = $$sroa$5$0$insert$ext$i66 << 16;
            $$sroa$4$0$insert$ext$i68 = $278&255;
            $$sroa$4$0$insert$shift$i69 = $$sroa$4$0$insert$ext$i68 << 8;
            $$sroa$0$0$insert$ext$i70 = $276&255;
            $$sroa$5$0$insert$insert$i71 = $$sroa$4$0$insert$shift$i69 | $$sroa$0$0$insert$ext$i70;
            $$sroa$4$0$insert$insert$i72 = $$sroa$5$0$insert$insert$i71 | $$sroa$5$0$insert$shift$i67;
            $$sroa$0$0$insert$insert$i73 = $$sroa$4$0$insert$insert$i72 | $$sroa$6$0$insert$shift$i65;
            __THREW__ = 0;
            (invoke_iiii(81,($266|0),($$sroa$0$0$insert$insert$i73|0),($8|0))|0);
            $284 = __THREW__; __THREW__ = 0;
            $285 = $284&1;
            if ($285) {
             break;
            }
            $286 = HEAP8[$267>>0]|0;
            $287 = ($286<<24>>24)<(0);
            if ($287) {
             $288 = HEAP32[$8>>2]|0;
             __ZdlPv($288);
            }
            break L40;
           }
          } while(0);
          $293 = ___cxa_find_matching_catch_2()|0;
          $294 = tempRet0;
          $295 = ((($8)) + 11|0);
          $296 = HEAP8[$295>>0]|0;
          $297 = ($296<<24>>24)<(0);
          if ($297) {
           $298 = HEAP32[$8>>2]|0;
           __ZdlPv($298);
          }
          $$2 = $294;$$26 = $293;
          break L42;
          break;
         }
         default: {
          $299 = ((($4)) + 11|0);
          $300 = HEAP8[$299>>0]|0;
          $301 = ($300<<24>>24)<(0);
          $302 = HEAP32[$4>>2]|0;
          $303 = $301 ? $302 : $4;
          __THREW__ = 0;
          HEAP32[$vararg_buffer>>2] = $303;
          invoke_vii(82,0,($vararg_buffer|0));
          $304 = __THREW__; __THREW__ = 0;
          $305 = $304&1;
          if ($305) {
           label = 36;
           break L42;
          }
          $306 = ((($0)) + 12|0);
          $307 = HEAP32[$306>>2]|0;
          $308 = HEAP32[$307>>2]|0;
          __THREW__ = 0;
          invoke_viii(83,($308|0),(44052|0),($4|0));
          $309 = __THREW__; __THREW__ = 0;
          $310 = $309&1;
          if ($310) {
           label = 36;
           break L42;
          } else {
           break L40;
          }
         }
         }
        }
       } while(0);
       if ((label|0) == 36) {
        $94 = ___cxa_find_matching_catch_2()|0;
        $95 = tempRet0;
        $$2 = $95;$$26 = $94;
       }
       $319 = ((($4)) + 11|0);
       $320 = HEAP8[$319>>0]|0;
       $321 = ($320<<24>>24)<(0);
       if ($321) {
        $322 = HEAP32[$4>>2]|0;
        __ZdlPv($322);
       }
       $$3 = $$2;$$37 = $$26;
       break L23;
      }
     } while(0);
     $311 = ((($4)) + 11|0);
     $312 = HEAP8[$311>>0]|0;
     $313 = ($312<<24>>24)<(0);
     if ($313) {
      $314 = HEAP32[$4>>2]|0;
      __ZdlPv($314);
     }
     $315 = ((($2)) + 11|0);
     $316 = HEAP8[$315>>0]|0;
     $317 = ($316<<24>>24)<(0);
     if (!($317)) {
      STACKTOP = sp;return;
     }
     $318 = HEAP32[$2>>2]|0;
     __ZdlPv($318);
     STACKTOP = sp;return;
    }
   } while(0);
   if ((label|0) == 32) {
    $$1 = $eh$lpad$body$index2Z2D;$$15 = $eh$lpad$body$indexZ2D;
    label = 35;
   }
   if ((label|0) == 35) {
    $$3 = $$1;$$37 = $$15;
   }
   $323 = ((($2)) + 11|0);
   $324 = HEAP8[$323>>0]|0;
   $325 = ($324<<24>>24)<(0);
   if ($325) {
    $326 = HEAP32[$2>>2]|0;
    __ZdlPv($326);
   }
   $$4 = $$3;$$48 = $$37;
   ___resumeException($$48|0);
   // unreachable;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(73,($12|0));
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch_3(0|0)|0;
  $84 = tempRet0;
  ___clang_call_terminate($83);
  // unreachable;
 }
 $$4 = $$0;$$48 = $$04;
 ___resumeException($$48|0);
 // unreachable;
}
function __ZN10emscripten8internal13MethodInvokerIM10MonaClientFvNS_3valEEvPS2_JS3_EE6invokeERKS5_S6_PNS0_7_EM_VALE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $4 = $$unpack5 >> 1;
 $5 = (($1) + ($4)|0);
 $6 = $$unpack5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 HEAP32[$3>>2] = $2;
 __THREW__ = 0;
 invoke_vii($12|0,($5|0),($3|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch_2()|0;
  $21 = tempRet0;
  $22 = HEAP32[$3>>2]|0;
  __THREW__ = 0;
  invoke_vi(73,($22|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  } else {
   ___resumeException($20|0);
   // unreachable;
  }
 } else {
  $15 = HEAP32[$3>>2]|0;
  __THREW__ = 0;
  invoke_vi(73,($15|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch_3(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  } else {
   STACKTOP = sp;return;
  }
 }
}
function __ZN10MonaClient8OnWsOpenEN10emscripten3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp + 8|0;
 $2 = sp;
 HEAP32[$vararg_buffer>>2] = 44022;
 _emscripten_log(0,($vararg_buffer|0));
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP8[49200]|0;
 $7 = ($6<<24>>24)==(0);
 do {
  if ($7) {
   $8 = (___cxa_guard_acquire(49200)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    __THREW__ = 0;
    $10 = (invoke_iii(84,1,(36996|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     $13 = ___cxa_find_matching_catch_2()|0;
     $14 = tempRet0;
     ___resumeException($13|0);
     // unreachable;
    } else {
     HEAP32[12316] = $10;
     break;
    }
   }
  }
 } while(0);
 $15 = HEAP32[12316]|0;
 __emval_call_void_method(($15|0),($5|0),(44038|0),($2|0));
 STACKTOP = sp;return;
}
function __ZN10MonaClient12GetWebSocketEN10emscripten3valE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$0>>2] = $4;
 __emval_incref(($4|0));
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM10MonaClientFNS_3valES3_ES3_PS2_JS3_EE6invokeERKS5_S6_PNS0_7_EM_VALE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04 = 0, $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $5 = $$unpack6 >> 1;
 $6 = (($1) + ($5)|0);
 $7 = $$unpack6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $13 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $13 = $11;
 }
 HEAP32[$4>>2] = $2;
 __THREW__ = 0;
 invoke_viii($13|0,($3|0),($6|0),($4|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 do {
  if ($15) {
   $29 = ___cxa_find_matching_catch_2()|0;
   $30 = tempRet0;
   $$0 = $30;$$04 = $29;
  } else {
   $16 = HEAP32[$3>>2]|0;
   __THREW__ = 0;
   invoke_vi(85,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $31 = ___cxa_find_matching_catch_2()|0;
    $32 = tempRet0;
    $33 = HEAP32[$3>>2]|0;
    __THREW__ = 0;
    invoke_vi(73,($33|0));
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if (!($35)) {
     $$0 = $32;$$04 = $31;
     break;
    }
    $36 = ___cxa_find_matching_catch_3(0|0)|0;
    $37 = tempRet0;
    ___clang_call_terminate($36);
    // unreachable;
   }
   $19 = HEAP32[$3>>2]|0;
   __THREW__ = 0;
   invoke_vi(73,($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $22 = ___cxa_find_matching_catch_3(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   }
   $24 = HEAP32[$4>>2]|0;
   __THREW__ = 0;
   invoke_vi(73,($24|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch_3(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   } else {
    STACKTOP = sp;return ($19|0);
   }
  }
 } while(0);
 $38 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi(73,($38|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $41 = ___cxa_find_matching_catch_3(0|0)|0;
  $42 = tempRet0;
  ___clang_call_terminate($41);
  // unreachable;
 } else {
  ___resumeException($$04|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN10MonaClient5CloseEv($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$ph$i$i$i = 0, $$020$i$i = 0, $$024$i$i$i = 0, $$025$i$i$i = 0, $$in$i$i$i = 0, $$pre$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[49200]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire(49200)|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    __THREW__ = 0;
    $8 = (invoke_iii(84,1,(36996|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch_2()|0;
     $12 = tempRet0;
     ___resumeException($11|0);
     // unreachable;
    } else {
     HEAP32[12316] = $8;
     break;
    }
   }
  }
 } while(0);
 $13 = HEAP32[12316]|0;
 __emval_call_void_method(($13|0),($3|0),(43688|0),($1|0));
 $14 = ((($0)) + 52|0);
 $15 = ((($0)) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  __ZN10MonaClientD2Ev($0);
  __ZdlPv($0);
  STACKTOP = sp;return;
 }
 $18 = ((($0)) + 56|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 do {
  if ($20) {
   $$020$i$i = $18;$$025$i$i$i = $18;
  } else {
   $21 = ((($0)) + 56|0);
   $$0$i$i$i = $21;$$024$i$i$i = $19;
   while(1) {
    $22 = ((($$024$i$i$i)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)>(0);
    if ($24) {
     $25 = HEAP32[$$024$i$i$i>>2]|0;
     $26 = ($25|0)==(0|0);
     if ($26) {
      label = 12;
      break;
     } else {
      $$0$ph$i$i$i = $$024$i$i$i;$$in$i$i$i = $25;
     }
    } else {
     $27 = ($23|0)<(0);
     if (!($27)) {
      label = 16;
      break;
     }
     $28 = ((($$024$i$i$i)) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      label = 15;
      break;
     } else {
      $$0$ph$i$i$i = $28;$$in$i$i$i = $29;
     }
    }
    $$0$i$i$i = $$0$ph$i$i$i;$$024$i$i$i = $$in$i$i$i;
   }
   if ((label|0) == 12) {
    $$020$i$i = $$024$i$i$i;$$025$i$i$i = $$024$i$i$i;
    break;
   }
   else if ((label|0) == 15) {
    $$020$i$i = $$024$i$i$i;$$025$i$i$i = $28;
    break;
   }
   else if ((label|0) == 16) {
    $$020$i$i = $$024$i$i$i;$$025$i$i$i = $$0$i$i$i;
    break;
   }
  }
 } while(0);
 $31 = HEAP32[$$025$i$i$i>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $33 = (__Znwj(24)|0);
  $34 = ((($33)) + 16|0);
  HEAP32[$34>>2] = 0;
  $35 = ((($33)) + 20|0);
  HEAP32[$35>>2] = 0;
  HEAP32[$33>>2] = 0;
  $36 = ((($33)) + 4|0);
  HEAP32[$36>>2] = 0;
  $37 = ((($33)) + 8|0);
  HEAP32[$37>>2] = $$020$i$i;
  HEAP32[$$025$i$i$i>>2] = $33;
  $38 = HEAP32[$14>>2]|0;
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  if ($40) {
   $44 = $33;
  } else {
   $41 = $39;
   HEAP32[$14>>2] = $41;
   $$pre$i$i$i = HEAP32[$$025$i$i$i>>2]|0;
   $44 = $$pre$i$i$i;
  }
  $42 = ((($0)) + 56|0);
  $43 = HEAP32[$42>>2]|0;
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($43,$44);
  $45 = HEAP32[$15>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$15>>2] = $46;
  $$0$i$i = $33;
 } else {
  $$0$i$i = $31;
 }
 $47 = ((($$0$i$i)) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(0|0);
 if (!($49)) {
  __ZN9NetStreamD2Ev($48);
  __ZdlPv($48);
 }
 $50 = HEAP32[$18>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($14,$50);
 HEAP32[$15>>2] = 0;
 HEAP32[$14>>2] = $18;
 HEAP32[$18>>2] = 0;
 __ZN10MonaClientD2Ev($0);
 __ZdlPv($0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIM10MonaClientFvvEvPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $2 = $$unpack3 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$unpack3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$unpack;
  $10 = $9;
  FUNCTION_TABLE_vi[$10 & 127]($3);
  return;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$unpack)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
  FUNCTION_TABLE_vi[$10 & 127]($3);
  return;
 }
}
function __ZN10MonaClient7ConnectEN10emscripten3valENSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$03 = 0, $$1 = 0, $$11 = 0, $$1114 = 0, $$12 = 0, $$1215 = 0, $$14 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$47 = 0, $$5 = 0, $$58 = 0, $$6 = 0, $$69 = 0, $$7 = 0, $$710 = 0;
 var $$8 = 0, $$811 = 0, $$pre$phi114Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body31$index7Z2D = 0, $eh$lpad$body31$indexZ2D = 0, $eh$lpad$body36$index12Z2D = 0, $eh$lpad$body36$indexZ2D = 0, $eh$lpad$body42$index17Z2D = 0, $eh$lpad$body42$indexZ2D = 0, $eh$lpad$body49$index22Z2D = 0, $eh$lpad$body49$indexZ2D = 0, $eh$lpad$body55$index27Z2D = 0, $eh$lpad$body55$indexZ2D = 0, $eh$lpad$body61$index32Z2D = 0, $eh$lpad$body61$indexZ2D = 0, $eh$lpad$body66$index37Z2D = 0, $eh$lpad$body66$indexZ2D = 0, $eh$lpad$body72$index42Z2D = 0, $eh$lpad$body72$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 $9 = sp + 80|0;
 $10 = sp + 68|0;
 $11 = sp + 56|0;
 $12 = sp + 44|0;
 $13 = sp + 32|0;
 $14 = sp + 28|0;
 $15 = sp + 24|0;
 $16 = ((($1)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 do {
  if ($18) {
   $19 = (__Znwj(4)|0);
   $20 = HEAP32[$2>>2]|0;
   __THREW__ = 0;
   invoke_vi(85,($20|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if (!($22)) {
    $23 = HEAP32[$2>>2]|0;
    HEAP32[$8>>2] = $23;
    __THREW__ = 0;
    $24 = (invoke_iii(86,(48|0),($8|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     HEAP32[$19>>2] = $24;
     HEAP32[$16>>2] = $19;
     break;
    }
   }
   $27 = ___cxa_find_matching_catch_2()|0;
   $28 = tempRet0;
   __ZdlPv($19);
   $$12 = $28;$$1215 = $27;
   ___resumeException($$1215|0);
   // unreachable;
  }
 } while(0);
 $29 = (__emval_get_global((43835|0))|0);
 $30 = HEAP32[$1>>2]|0;
 $31 = ($30|0)==(0|0);
 L9: do {
  if ($31) {
   label = 19;
  } else {
   $32 = HEAP32[$30>>2]|0;
   $33 = HEAP8[49200]|0;
   $34 = ($33<<24>>24)==(0);
   do {
    if ($34) {
     $35 = (___cxa_guard_acquire(49200)|0);
     $36 = ($35|0)==(0);
     if (!($36)) {
      __THREW__ = 0;
      $37 = (invoke_iii(84,1,(36996|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       $40 = ___cxa_find_matching_catch_2()|0;
       $41 = tempRet0;
       $eh$lpad$body$index2Z2D = $41;$eh$lpad$body$indexZ2D = $40;
       label = 18;
       break L9;
      } else {
       HEAP32[12316] = $37;
       break;
      }
     }
    }
   } while(0);
   $42 = HEAP32[12316]|0;
   __THREW__ = 0;
   invoke_viiii(87,($42|0),($32|0),(43688|0),($7|0));
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    label = 17;
   } else {
    $45 = HEAP32[$1>>2]|0;
    $46 = ($45|0)==(0|0);
    if ($46) {
     label = 19;
    } else {
     $47 = HEAP32[$45>>2]|0;
     __THREW__ = 0;
     invoke_vi(73,($47|0));
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if ($49) {
      $50 = ___cxa_find_matching_catch_3(0|0)|0;
      $51 = tempRet0;
      ___clang_call_terminate($50);
      // unreachable;
     } else {
      __ZdlPv($45);
      label = 19;
      break;
     }
    }
   }
  }
 } while(0);
 L23: do {
  if ((label|0) == 19) {
   __THREW__ = 0;
   $54 = (invoke_ii(78,4)|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    label = 17;
   } else {
    __THREW__ = 0;
    invoke_viii(88,($13|0),(43845|0),($3|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     $305 = ___cxa_find_matching_catch_2()|0;
     $306 = tempRet0;
     $$4 = $306;$$47 = $305;
    } else {
     __THREW__ = 0;
     $59 = (invoke_iii(89,($13|0),(43851|0))|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      $307 = ___cxa_find_matching_catch_2()|0;
      $308 = tempRet0;
      $$3 = $308;$$36 = $307;
     } else {
      ;HEAP32[$12>>2]=HEAP32[$59>>2]|0;HEAP32[$12+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$59+8>>2]|0;
      ;HEAP32[$59>>2]=0|0;HEAP32[$59+4>>2]=0|0;HEAP32[$59+8>>2]=0|0;
      $62 = ((($4)) + 11|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = ($63<<24>>24)<(0);
      $65 = HEAP32[$4>>2]|0;
      $66 = $64 ? $65 : $4;
      $67 = ((($4)) + 4|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = $63&255;
      $70 = $64 ? $68 : $69;
      __THREW__ = 0;
      $71 = (invoke_iiii(90,($12|0),($66|0),($70|0))|0);
      $72 = __THREW__; __THREW__ = 0;
      $73 = $72&1;
      if ($73) {
       $309 = ___cxa_find_matching_catch_2()|0;
       $310 = tempRet0;
       $$2 = $310;$$25 = $309;
      } else {
       ;HEAP32[$11>>2]=HEAP32[$71>>2]|0;HEAP32[$11+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$71+8>>2]|0;
       ;HEAP32[$71>>2]=0|0;HEAP32[$71+4>>2]=0|0;HEAP32[$71+8>>2]=0|0;
       __THREW__ = 0;
       $74 = (invoke_iii(89,($11|0),(43851|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        $311 = ___cxa_find_matching_catch_2()|0;
        $312 = tempRet0;
        $$1 = $312;$$14 = $311;
       } else {
        ;HEAP32[$10>>2]=HEAP32[$74>>2]|0;HEAP32[$10+4>>2]=HEAP32[$74+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$74+8>>2]|0;
        ;HEAP32[$74>>2]=0|0;HEAP32[$74+4>>2]=0|0;HEAP32[$74+8>>2]=0|0;
        $77 = ((($5)) + 11|0);
        $78 = HEAP8[$77>>0]|0;
        $79 = ($78<<24>>24)<(0);
        $80 = HEAP32[$5>>2]|0;
        $81 = $79 ? $80 : $5;
        $82 = ((($5)) + 4|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = $78&255;
        $85 = $79 ? $83 : $84;
        __THREW__ = 0;
        $86 = (invoke_iiii(90,($10|0),($81|0),($85|0))|0);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        do {
         if ($88) {
          $313 = ___cxa_find_matching_catch_2()|0;
          $314 = tempRet0;
          $$0 = $314;$$03 = $313;
         } else {
          ;HEAP32[$9>>2]=HEAP32[$86>>2]|0;HEAP32[$9+4>>2]=HEAP32[$86+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$86+8>>2]|0;
          ;HEAP32[$86>>2]=0|0;HEAP32[$86+4>>2]=0|0;HEAP32[$86+8>>2]=0|0;
          $89 = ((($9)) + 11|0);
          $90 = HEAP8[$89>>0]|0;
          $91 = ($90<<24>>24)<(0);
          $92 = ((($9)) + 4|0);
          $93 = HEAP32[$92>>2]|0;
          $94 = $90&255;
          $95 = $91 ? $93 : $94;
          $96 = (($95) + 4)|0;
          $97 = (_malloc($96)|0);
          HEAP32[$97>>2] = $95;
          $98 = ((($97)) + 4|0);
          $99 = HEAP32[$9>>2]|0;
          $100 = $91 ? $99 : $9;
          _memcpy(($98|0),($100|0),($95|0))|0;
          HEAP32[$6>>2] = $97;
          __THREW__ = 0;
          $101 = (invoke_iiiii(91,($29|0),1,(37000|0),($6|0))|0);
          $102 = __THREW__; __THREW__ = 0;
          $103 = $102&1;
          if ($103) {
           $315 = ___cxa_find_matching_catch_2()|0;
           $316 = tempRet0;
           if (!($91)) {
            $$0 = $316;$$03 = $315;
            break;
           }
           __ZdlPv($99);
           $$0 = $316;$$03 = $315;
           break;
          }
          HEAP32[$54>>2] = $101;
          HEAP32[$1>>2] = $54;
          if ($91) {
           __ZdlPv($99);
          }
          $104 = ((($10)) + 11|0);
          $105 = HEAP8[$104>>0]|0;
          $106 = ($105<<24>>24)<(0);
          if ($106) {
           $107 = HEAP32[$10>>2]|0;
           __ZdlPv($107);
          }
          $108 = ((($11)) + 11|0);
          $109 = HEAP8[$108>>0]|0;
          $110 = ($109<<24>>24)<(0);
          if ($110) {
           $111 = HEAP32[$11>>2]|0;
           __ZdlPv($111);
          }
          $112 = ((($12)) + 11|0);
          $113 = HEAP8[$112>>0]|0;
          $114 = ($113<<24>>24)<(0);
          if ($114) {
           $115 = HEAP32[$12>>2]|0;
           __ZdlPv($115);
          }
          $116 = ((($13)) + 11|0);
          $117 = HEAP8[$116>>0]|0;
          $118 = ($117<<24>>24)<(0);
          if ($118) {
           $119 = HEAP32[$13>>2]|0;
           __ZdlPv($119);
          }
          $120 = HEAP32[$1>>2]|0;
          __THREW__ = 0;
          invoke_viii(92,($120|0),(43853|0),(43864|0));
          $121 = __THREW__; __THREW__ = 0;
          $122 = $121&1;
          if ($122) {
           label = 17;
           break L23;
          }
          $123 = HEAP32[$1>>2]|0;
          $124 = HEAP32[$2>>2]|0;
          __THREW__ = 0;
          $125 = (invoke_ii(76,(43660|0))|0);
          $126 = __THREW__; __THREW__ = 0;
          $127 = $126&1;
          do {
           if ($127) {
            $333 = ___cxa_find_matching_catch_2()|0;
            $334 = tempRet0;
            $eh$lpad$body31$index7Z2D = $334;$eh$lpad$body31$indexZ2D = $333;
            label = 122;
           } else {
            __THREW__ = 0;
            $128 = (invoke_iii(72,($124|0),($125|0))|0);
            $129 = __THREW__; __THREW__ = 0;
            $130 = $129&1;
            if ($130) {
             $135 = ___cxa_find_matching_catch_2()|0;
             $136 = tempRet0;
             __THREW__ = 0;
             invoke_vi(73,($125|0));
             $137 = __THREW__; __THREW__ = 0;
             $138 = $137&1;
             if (!($138)) {
              $eh$lpad$body31$index7Z2D = $136;$eh$lpad$body31$indexZ2D = $135;
              label = 122;
              break;
             }
             $139 = ___cxa_find_matching_catch_3(0|0)|0;
             $140 = tempRet0;
             ___clang_call_terminate($139);
             // unreachable;
            }
            __THREW__ = 0;
            invoke_vi(73,($125|0));
            $131 = __THREW__; __THREW__ = 0;
            $132 = $131&1;
            if ($132) {
             $133 = ___cxa_find_matching_catch_3(0|0)|0;
             $134 = tempRet0;
             ___clang_call_terminate($133);
             // unreachable;
            }
            __THREW__ = 0;
            invoke_viiii(93,($14|0),($128|0),(43876|0),($2|0));
            $141 = __THREW__; __THREW__ = 0;
            $142 = $141&1;
            do {
             if ($142) {
              $335 = ___cxa_find_matching_catch_2()|0;
              $336 = tempRet0;
              $$5 = $336;$$58 = $335;
             } else {
              $143 = HEAP32[$123>>2]|0;
              __THREW__ = 0;
              $144 = (invoke_ii(76,(43881|0))|0);
              $145 = __THREW__; __THREW__ = 0;
              $146 = $145&1;
              do {
               if ($146) {
                $337 = ___cxa_find_matching_catch_2()|0;
                $338 = tempRet0;
                $$pre$phi114Z2D = $14;$eh$lpad$body36$index12Z2D = $338;$eh$lpad$body36$indexZ2D = $337;
               } else {
                $147 = HEAP32[$14>>2]|0;
                __THREW__ = 0;
                invoke_viii(94,($143|0),($144|0),($147|0));
                $148 = __THREW__; __THREW__ = 0;
                $149 = $148&1;
                if ($149) {
                 $154 = ___cxa_find_matching_catch_2()|0;
                 $155 = tempRet0;
                 __THREW__ = 0;
                 invoke_vi(73,($144|0));
                 $156 = __THREW__; __THREW__ = 0;
                 $157 = $156&1;
                 if (!($157)) {
                  $$pre$phi114Z2D = $14;$eh$lpad$body36$index12Z2D = $155;$eh$lpad$body36$indexZ2D = $154;
                  break;
                 }
                 $158 = ___cxa_find_matching_catch_3(0|0)|0;
                 $159 = tempRet0;
                 ___clang_call_terminate($158);
                 // unreachable;
                }
                __THREW__ = 0;
                invoke_vi(73,($144|0));
                $150 = __THREW__; __THREW__ = 0;
                $151 = $150&1;
                if ($151) {
                 $152 = ___cxa_find_matching_catch_3(0|0)|0;
                 $153 = tempRet0;
                 ___clang_call_terminate($152);
                 // unreachable;
                }
                $160 = HEAP32[$14>>2]|0;
                __THREW__ = 0;
                invoke_vi(73,($160|0));
                $161 = __THREW__; __THREW__ = 0;
                $162 = $161&1;
                if ($162) {
                 $163 = ___cxa_find_matching_catch_3(0|0)|0;
                 $164 = tempRet0;
                 ___clang_call_terminate($163);
                 // unreachable;
                }
                __THREW__ = 0;
                invoke_vi(73,($128|0));
                $165 = __THREW__; __THREW__ = 0;
                $166 = $165&1;
                if ($166) {
                 $167 = ___cxa_find_matching_catch_3(0|0)|0;
                 $168 = tempRet0;
                 ___clang_call_terminate($167);
                 // unreachable;
                }
                $169 = HEAP32[$1>>2]|0;
                $170 = HEAP32[$2>>2]|0;
                __THREW__ = 0;
                $171 = (invoke_ii(76,(43642|0))|0);
                $172 = __THREW__; __THREW__ = 0;
                $173 = $172&1;
                do {
                 if ($173) {
                  $348 = ___cxa_find_matching_catch_2()|0;
                  $349 = tempRet0;
                  $eh$lpad$body42$index17Z2D = $349;$eh$lpad$body42$indexZ2D = $348;
                  label = 131;
                 } else {
                  __THREW__ = 0;
                  $174 = (invoke_iii(72,($170|0),($171|0))|0);
                  $175 = __THREW__; __THREW__ = 0;
                  $176 = $175&1;
                  if ($176) {
                   $181 = ___cxa_find_matching_catch_2()|0;
                   $182 = tempRet0;
                   __THREW__ = 0;
                   invoke_vi(73,($171|0));
                   $183 = __THREW__; __THREW__ = 0;
                   $184 = $183&1;
                   if (!($184)) {
                    $eh$lpad$body42$index17Z2D = $182;$eh$lpad$body42$indexZ2D = $181;
                    label = 131;
                    break;
                   }
                   $185 = ___cxa_find_matching_catch_3(0|0)|0;
                   $186 = tempRet0;
                   ___clang_call_terminate($185);
                   // unreachable;
                  }
                  __THREW__ = 0;
                  invoke_vi(73,($171|0));
                  $177 = __THREW__; __THREW__ = 0;
                  $178 = $177&1;
                  if ($178) {
                   $179 = ___cxa_find_matching_catch_3(0|0)|0;
                   $180 = tempRet0;
                   ___clang_call_terminate($179);
                   // unreachable;
                  }
                  __THREW__ = 0;
                  invoke_viiii(93,($15|0),($174|0),(43876|0),($2|0));
                  $187 = __THREW__; __THREW__ = 0;
                  $188 = $187&1;
                  do {
                   if ($188) {
                    $350 = ___cxa_find_matching_catch_2()|0;
                    $351 = tempRet0;
                    $$7 = $351;$$710 = $350;
                   } else {
                    $189 = HEAP32[$169>>2]|0;
                    __THREW__ = 0;
                    $190 = (invoke_ii(76,(43888|0))|0);
                    $191 = __THREW__; __THREW__ = 0;
                    $192 = $191&1;
                    do {
                     if ($192) {
                      $352 = ___cxa_find_matching_catch_2()|0;
                      $353 = tempRet0;
                      $$pre$phiZ2D = $15;$eh$lpad$body49$index22Z2D = $353;$eh$lpad$body49$indexZ2D = $352;
                     } else {
                      $193 = HEAP32[$15>>2]|0;
                      __THREW__ = 0;
                      invoke_viii(94,($189|0),($190|0),($193|0));
                      $194 = __THREW__; __THREW__ = 0;
                      $195 = $194&1;
                      if ($195) {
                       $200 = ___cxa_find_matching_catch_2()|0;
                       $201 = tempRet0;
                       __THREW__ = 0;
                       invoke_vi(73,($190|0));
                       $202 = __THREW__; __THREW__ = 0;
                       $203 = $202&1;
                       if (!($203)) {
                        $$pre$phiZ2D = $15;$eh$lpad$body49$index22Z2D = $201;$eh$lpad$body49$indexZ2D = $200;
                        break;
                       }
                       $204 = ___cxa_find_matching_catch_3(0|0)|0;
                       $205 = tempRet0;
                       ___clang_call_terminate($204);
                       // unreachable;
                      }
                      __THREW__ = 0;
                      invoke_vi(73,($190|0));
                      $196 = __THREW__; __THREW__ = 0;
                      $197 = $196&1;
                      if ($197) {
                       $198 = ___cxa_find_matching_catch_3(0|0)|0;
                       $199 = tempRet0;
                       ___clang_call_terminate($198);
                       // unreachable;
                      }
                      $206 = HEAP32[$15>>2]|0;
                      __THREW__ = 0;
                      invoke_vi(73,($206|0));
                      $207 = __THREW__; __THREW__ = 0;
                      $208 = $207&1;
                      if ($208) {
                       $209 = ___cxa_find_matching_catch_3(0|0)|0;
                       $210 = tempRet0;
                       ___clang_call_terminate($209);
                       // unreachable;
                      }
                      __THREW__ = 0;
                      invoke_vi(73,($174|0));
                      $211 = __THREW__; __THREW__ = 0;
                      $212 = $211&1;
                      if ($212) {
                       $213 = ___cxa_find_matching_catch_3(0|0)|0;
                       $214 = tempRet0;
                       ___clang_call_terminate($213);
                       // unreachable;
                      }
                      $215 = HEAP32[$1>>2]|0;
                      $216 = HEAP32[$2>>2]|0;
                      __THREW__ = 0;
                      $217 = (invoke_ii(76,(43898|0))|0);
                      $218 = __THREW__; __THREW__ = 0;
                      $219 = $218&1;
                      do {
                       if ($219) {
                        $363 = ___cxa_find_matching_catch_2()|0;
                        $364 = tempRet0;
                        $eh$lpad$body55$index27Z2D = $364;$eh$lpad$body55$indexZ2D = $363;
                       } else {
                        __THREW__ = 0;
                        $220 = (invoke_iii(72,($216|0),($217|0))|0);
                        $221 = __THREW__; __THREW__ = 0;
                        $222 = $221&1;
                        if ($222) {
                         $227 = ___cxa_find_matching_catch_2()|0;
                         $228 = tempRet0;
                         __THREW__ = 0;
                         invoke_vi(73,($217|0));
                         $229 = __THREW__; __THREW__ = 0;
                         $230 = $229&1;
                         if (!($230)) {
                          $eh$lpad$body55$index27Z2D = $228;$eh$lpad$body55$indexZ2D = $227;
                          break;
                         }
                         $231 = ___cxa_find_matching_catch_3(0|0)|0;
                         $232 = tempRet0;
                         ___clang_call_terminate($231);
                         // unreachable;
                        }
                        __THREW__ = 0;
                        invoke_vi(73,($217|0));
                        $223 = __THREW__; __THREW__ = 0;
                        $224 = $223&1;
                        if ($224) {
                         $225 = ___cxa_find_matching_catch_3(0|0)|0;
                         $226 = tempRet0;
                         ___clang_call_terminate($225);
                         // unreachable;
                        }
                        $233 = HEAP32[$215>>2]|0;
                        __THREW__ = 0;
                        $234 = (invoke_ii(76,(43908|0))|0);
                        $235 = __THREW__; __THREW__ = 0;
                        $236 = $235&1;
                        do {
                         if ($236) {
                          $365 = ___cxa_find_matching_catch_2()|0;
                          $366 = tempRet0;
                          $eh$lpad$body61$index32Z2D = $366;$eh$lpad$body61$indexZ2D = $365;
                         } else {
                          __THREW__ = 0;
                          invoke_viii(94,($233|0),($234|0),($220|0));
                          $237 = __THREW__; __THREW__ = 0;
                          $238 = $237&1;
                          if ($238) {
                           $243 = ___cxa_find_matching_catch_2()|0;
                           $244 = tempRet0;
                           __THREW__ = 0;
                           invoke_vi(73,($234|0));
                           $245 = __THREW__; __THREW__ = 0;
                           $246 = $245&1;
                           if (!($246)) {
                            $eh$lpad$body61$index32Z2D = $244;$eh$lpad$body61$indexZ2D = $243;
                            break;
                           }
                           $247 = ___cxa_find_matching_catch_3(0|0)|0;
                           $248 = tempRet0;
                           ___clang_call_terminate($247);
                           // unreachable;
                          }
                          __THREW__ = 0;
                          invoke_vi(73,($234|0));
                          $239 = __THREW__; __THREW__ = 0;
                          $240 = $239&1;
                          if ($240) {
                           $241 = ___cxa_find_matching_catch_3(0|0)|0;
                           $242 = tempRet0;
                           ___clang_call_terminate($241);
                           // unreachable;
                          }
                          __THREW__ = 0;
                          invoke_vi(73,($220|0));
                          $249 = __THREW__; __THREW__ = 0;
                          $250 = $249&1;
                          if ($250) {
                           $251 = ___cxa_find_matching_catch_3(0|0)|0;
                           $252 = tempRet0;
                           ___clang_call_terminate($251);
                           // unreachable;
                          }
                          $253 = HEAP32[$1>>2]|0;
                          $254 = HEAP32[$2>>2]|0;
                          __THREW__ = 0;
                          $255 = (invoke_ii(76,(43916|0))|0);
                          $256 = __THREW__; __THREW__ = 0;
                          $257 = $256&1;
                          do {
                           if ($257) {
                            $371 = ___cxa_find_matching_catch_2()|0;
                            $372 = tempRet0;
                            $eh$lpad$body66$index37Z2D = $372;$eh$lpad$body66$indexZ2D = $371;
                           } else {
                            __THREW__ = 0;
                            $258 = (invoke_iii(72,($254|0),($255|0))|0);
                            $259 = __THREW__; __THREW__ = 0;
                            $260 = $259&1;
                            if ($260) {
                             $265 = ___cxa_find_matching_catch_2()|0;
                             $266 = tempRet0;
                             __THREW__ = 0;
                             invoke_vi(73,($255|0));
                             $267 = __THREW__; __THREW__ = 0;
                             $268 = $267&1;
                             if (!($268)) {
                              $eh$lpad$body66$index37Z2D = $266;$eh$lpad$body66$indexZ2D = $265;
                              break;
                             }
                             $269 = ___cxa_find_matching_catch_3(0|0)|0;
                             $270 = tempRet0;
                             ___clang_call_terminate($269);
                             // unreachable;
                            }
                            __THREW__ = 0;
                            invoke_vi(73,($255|0));
                            $261 = __THREW__; __THREW__ = 0;
                            $262 = $261&1;
                            if ($262) {
                             $263 = ___cxa_find_matching_catch_3(0|0)|0;
                             $264 = tempRet0;
                             ___clang_call_terminate($263);
                             // unreachable;
                            }
                            $271 = HEAP32[$253>>2]|0;
                            __THREW__ = 0;
                            $272 = (invoke_ii(76,(43926|0))|0);
                            $273 = __THREW__; __THREW__ = 0;
                            $274 = $273&1;
                            do {
                             if ($274) {
                              $373 = ___cxa_find_matching_catch_2()|0;
                              $374 = tempRet0;
                              $eh$lpad$body72$index42Z2D = $374;$eh$lpad$body72$indexZ2D = $373;
                             } else {
                              __THREW__ = 0;
                              invoke_viii(94,($271|0),($272|0),($258|0));
                              $275 = __THREW__; __THREW__ = 0;
                              $276 = $275&1;
                              if ($276) {
                               $281 = ___cxa_find_matching_catch_2()|0;
                               $282 = tempRet0;
                               __THREW__ = 0;
                               invoke_vi(73,($272|0));
                               $283 = __THREW__; __THREW__ = 0;
                               $284 = $283&1;
                               if (!($284)) {
                                $eh$lpad$body72$index42Z2D = $282;$eh$lpad$body72$indexZ2D = $281;
                                break;
                               }
                               $285 = ___cxa_find_matching_catch_3(0|0)|0;
                               $286 = tempRet0;
                               ___clang_call_terminate($285);
                               // unreachable;
                              }
                              __THREW__ = 0;
                              invoke_vi(73,($272|0));
                              $277 = __THREW__; __THREW__ = 0;
                              $278 = $277&1;
                              if ($278) {
                               $279 = ___cxa_find_matching_catch_3(0|0)|0;
                               $280 = tempRet0;
                               ___clang_call_terminate($279);
                               // unreachable;
                              }
                              __THREW__ = 0;
                              invoke_vi(73,($258|0));
                              $287 = __THREW__; __THREW__ = 0;
                              $288 = $287&1;
                              if ($288) {
                               $289 = ___cxa_find_matching_catch_3(0|0)|0;
                               $290 = tempRet0;
                               ___clang_call_terminate($289);
                               // unreachable;
                              }
                              $291 = ((($1)) + 28|0);
                              __THREW__ = 0;
                              (invoke_iii(95,($291|0),($4|0))|0);
                              $292 = __THREW__; __THREW__ = 0;
                              $293 = $292&1;
                              if ($293) {
                               label = 17;
                               break L23;
                              }
                              $294 = ((($1)) + 40|0);
                              __THREW__ = 0;
                              (invoke_iii(95,($294|0),($5|0))|0);
                              $295 = __THREW__; __THREW__ = 0;
                              $296 = $295&1;
                              if ($296) {
                               label = 17;
                               break L23;
                              }
                              $297 = HEAP32[$1>>2]|0;
                              $298 = HEAP32[$297>>2]|0;
                              HEAP32[$0>>2] = $298;
                              __THREW__ = 0;
                              invoke_vi(85,($298|0));
                              $299 = __THREW__; __THREW__ = 0;
                              $300 = $299&1;
                              if ($300) {
                               label = 17;
                               break L23;
                              }
                              __THREW__ = 0;
                              invoke_vi(73,($29|0));
                              $301 = __THREW__; __THREW__ = 0;
                              $302 = $301&1;
                              if ($302) {
                               $303 = ___cxa_find_matching_catch_3(0|0)|0;
                               $304 = tempRet0;
                               ___clang_call_terminate($303);
                               // unreachable;
                              } else {
                               STACKTOP = sp;return;
                              }
                             }
                            } while(0);
                            __THREW__ = 0;
                            invoke_vi(73,($258|0));
                            $375 = __THREW__; __THREW__ = 0;
                            $376 = $375&1;
                            if (!($376)) {
                             $$11 = $eh$lpad$body72$index42Z2D;$$1114 = $eh$lpad$body72$indexZ2D;
                             break L23;
                            }
                            $377 = ___cxa_find_matching_catch_3(0|0)|0;
                            $378 = tempRet0;
                            ___clang_call_terminate($377);
                            // unreachable;
                           }
                          } while(0);
                          $$11 = $eh$lpad$body66$index37Z2D;$$1114 = $eh$lpad$body66$indexZ2D;
                          break L23;
                         }
                        } while(0);
                        __THREW__ = 0;
                        invoke_vi(73,($220|0));
                        $367 = __THREW__; __THREW__ = 0;
                        $368 = $367&1;
                        if (!($368)) {
                         $$11 = $eh$lpad$body61$index32Z2D;$$1114 = $eh$lpad$body61$indexZ2D;
                         break L23;
                        }
                        $369 = ___cxa_find_matching_catch_3(0|0)|0;
                        $370 = tempRet0;
                        ___clang_call_terminate($369);
                        // unreachable;
                       }
                      } while(0);
                      $$11 = $eh$lpad$body55$index27Z2D;$$1114 = $eh$lpad$body55$indexZ2D;
                      break L23;
                     }
                    } while(0);
                    $354 = HEAP32[$$pre$phiZ2D>>2]|0;
                    __THREW__ = 0;
                    invoke_vi(73,($354|0));
                    $355 = __THREW__; __THREW__ = 0;
                    $356 = $355&1;
                    if (!($356)) {
                     $$7 = $eh$lpad$body49$index22Z2D;$$710 = $eh$lpad$body49$indexZ2D;
                     break;
                    }
                    $357 = ___cxa_find_matching_catch_3(0|0)|0;
                    $358 = tempRet0;
                    ___clang_call_terminate($357);
                    // unreachable;
                   }
                  } while(0);
                  __THREW__ = 0;
                  invoke_vi(73,($174|0));
                  $359 = __THREW__; __THREW__ = 0;
                  $360 = $359&1;
                  if (!($360)) {
                   $$8 = $$7;$$811 = $$710;
                   break;
                  }
                  $361 = ___cxa_find_matching_catch_3(0|0)|0;
                  $362 = tempRet0;
                  ___clang_call_terminate($361);
                  // unreachable;
                 }
                } while(0);
                if ((label|0) == 131) {
                 $$8 = $eh$lpad$body42$index17Z2D;$$811 = $eh$lpad$body42$indexZ2D;
                }
                $$11 = $$8;$$1114 = $$811;
                break L23;
               }
              } while(0);
              $339 = HEAP32[$$pre$phi114Z2D>>2]|0;
              __THREW__ = 0;
              invoke_vi(73,($339|0));
              $340 = __THREW__; __THREW__ = 0;
              $341 = $340&1;
              if (!($341)) {
               $$5 = $eh$lpad$body36$index12Z2D;$$58 = $eh$lpad$body36$indexZ2D;
               break;
              }
              $342 = ___cxa_find_matching_catch_3(0|0)|0;
              $343 = tempRet0;
              ___clang_call_terminate($342);
              // unreachable;
             }
            } while(0);
            __THREW__ = 0;
            invoke_vi(73,($128|0));
            $344 = __THREW__; __THREW__ = 0;
            $345 = $344&1;
            if (!($345)) {
             $$6 = $$5;$$69 = $$58;
             break;
            }
            $346 = ___cxa_find_matching_catch_3(0|0)|0;
            $347 = tempRet0;
            ___clang_call_terminate($346);
            // unreachable;
           }
          } while(0);
          if ((label|0) == 122) {
           $$6 = $eh$lpad$body31$index7Z2D;$$69 = $eh$lpad$body31$indexZ2D;
          }
          $$11 = $$6;$$1114 = $$69;
          break L23;
         }
        } while(0);
        $317 = ((($10)) + 11|0);
        $318 = HEAP8[$317>>0]|0;
        $319 = ($318<<24>>24)<(0);
        if ($319) {
         $320 = HEAP32[$10>>2]|0;
         __ZdlPv($320);
         $$1 = $$0;$$14 = $$03;
        } else {
         $$1 = $$0;$$14 = $$03;
        }
       }
       $321 = ((($11)) + 11|0);
       $322 = HEAP8[$321>>0]|0;
       $323 = ($322<<24>>24)<(0);
       if ($323) {
        $324 = HEAP32[$11>>2]|0;
        __ZdlPv($324);
        $$2 = $$1;$$25 = $$14;
       } else {
        $$2 = $$1;$$25 = $$14;
       }
      }
      $325 = ((($12)) + 11|0);
      $326 = HEAP8[$325>>0]|0;
      $327 = ($326<<24>>24)<(0);
      if ($327) {
       $328 = HEAP32[$12>>2]|0;
       __ZdlPv($328);
       $$3 = $$2;$$36 = $$25;
      } else {
       $$3 = $$2;$$36 = $$25;
      }
     }
     $329 = ((($13)) + 11|0);
     $330 = HEAP8[$329>>0]|0;
     $331 = ($330<<24>>24)<(0);
     if ($331) {
      $332 = HEAP32[$13>>2]|0;
      __ZdlPv($332);
      $$4 = $$3;$$47 = $$36;
     } else {
      $$4 = $$3;$$47 = $$36;
     }
    }
    __ZdlPv($54);
    $$11 = $$4;$$1114 = $$47;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $52 = ___cxa_find_matching_catch_2()|0;
  $53 = tempRet0;
  $eh$lpad$body$index2Z2D = $53;$eh$lpad$body$indexZ2D = $52;
  label = 18;
 }
 if ((label|0) == 18) {
  $$11 = $eh$lpad$body$index2Z2D;$$1114 = $eh$lpad$body$indexZ2D;
 }
 __THREW__ = 0;
 invoke_vi(73,($29|0));
 $379 = __THREW__; __THREW__ = 0;
 $380 = $379&1;
 if ($380) {
  $381 = ___cxa_find_matching_catch_3(0|0)|0;
  $382 = tempRet0;
  ___clang_call_terminate($381);
  // unreachable;
 } else {
  $$12 = $$11;$$1215 = $$1114;
  ___resumeException($$1215|0);
  // unreachable;
 }
}
function __ZN10emscripten8internal13MethodInvokerIM10MonaClientFNS_3valES3_NSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_ES3_PS2_JS3_SA_SA_SA_EE6invokeERKSC_SD_PNS0_7_EM_VALEPNS0_11BindingTypeISA_EUt_ESM_SM_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$016$i$i$i = 0, $$016$i$i$i15 = 0, $$016$i$i$i21 = 0, $$017$i$i$i = 0, $$017$i$i$i16 = 0, $$017$i$i$i22 = 0, $$07 = 0, $$1 = 0, $$18 = 0, $$2 = 0, $$29 = 0, $$3 = 0, $$310 = 0, $$elt11 = 0, $$unpack = 0, $$unpack12 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 40|0;
 $7 = sp + 36|0;
 $8 = sp + 24|0;
 $9 = sp + 12|0;
 $10 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt11 = ((($0)) + 4|0);
 $$unpack12 = HEAP32[$$elt11>>2]|0;
 $11 = $$unpack12 >> 1;
 $12 = (($1) + ($11)|0);
 $13 = $$unpack12 & 1;
 $14 = ($13|0)==(0);
 if ($14) {
  $18 = $$unpack;
  $70 = $18;
 } else {
  $15 = HEAP32[$12>>2]|0;
  $16 = (($15) + ($$unpack)|0);
  $17 = HEAP32[$16>>2]|0;
  $70 = $17;
 }
 HEAP32[$7>>2] = $2;
 $19 = ((($3)) + 4|0);
 $20 = HEAP32[$3>>2]|0;
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
 $21 = ($20>>>0)>(4294967279);
 do {
  if ($21) {
   __THREW__ = 0;
   invoke_vi(96,($8|0));
   $22 = __THREW__; __THREW__ = 0;
   label = 38;
  } else {
   $23 = ($20>>>0)<(11);
   if ($23) {
    $32 = $20&255;
    $33 = ((($8)) + 11|0);
    HEAP8[$33>>0] = $32;
    $34 = ($20|0)==(0);
    if ($34) {
     $$017$i$i$i = $8;
    } else {
     $$016$i$i$i = $8;
     label = 10;
    }
   } else {
    $24 = (($20) + 16)|0;
    $25 = $24 & -16;
    __THREW__ = 0;
    $26 = (invoke_ii(78,($25|0))|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     label = 38;
     break;
    }
    HEAP32[$8>>2] = $26;
    $29 = $25 | -2147483648;
    $30 = ((($8)) + 8|0);
    HEAP32[$30>>2] = $29;
    $31 = ((($8)) + 4|0);
    HEAP32[$31>>2] = $20;
    $$016$i$i$i = $26;
    label = 10;
   }
   if ((label|0) == 10) {
    _memcpy(($$016$i$i$i|0),($19|0),($20|0))|0;
    $$017$i$i$i = $$016$i$i$i;
   }
   $35 = (($$017$i$i$i) + ($20)|0);
   HEAP8[$35>>0] = 0;
   $36 = ((($4)) + 4|0);
   $37 = HEAP32[$4>>2]|0;
   ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
   $38 = ($37>>>0)>(4294967279);
   do {
    if ($38) {
     __THREW__ = 0;
     invoke_vi(96,($9|0));
     $39 = __THREW__; __THREW__ = 0;
     label = 39;
    } else {
     $40 = ($37>>>0)<(11);
     if ($40) {
      $49 = $37&255;
      $50 = ((($9)) + 11|0);
      HEAP8[$50>>0] = $49;
      $51 = ($37|0)==(0);
      if ($51) {
       $$017$i$i$i16 = $9;
      } else {
       $$016$i$i$i15 = $9;
       label = 17;
      }
     } else {
      $41 = (($37) + 16)|0;
      $42 = $41 & -16;
      __THREW__ = 0;
      $43 = (invoke_ii(78,($42|0))|0);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       label = 39;
       break;
      }
      HEAP32[$9>>2] = $43;
      $46 = $42 | -2147483648;
      $47 = ((($9)) + 8|0);
      HEAP32[$47>>2] = $46;
      $48 = ((($9)) + 4|0);
      HEAP32[$48>>2] = $37;
      $$016$i$i$i15 = $43;
      label = 17;
     }
     if ((label|0) == 17) {
      _memcpy(($$016$i$i$i15|0),($36|0),($37|0))|0;
      $$017$i$i$i16 = $$016$i$i$i15;
     }
     $52 = (($$017$i$i$i16) + ($37)|0);
     HEAP8[$52>>0] = 0;
     $53 = ((($5)) + 4|0);
     $54 = HEAP32[$5>>2]|0;
     ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
     $55 = ($54>>>0)>(4294967279);
     do {
      if ($55) {
       __THREW__ = 0;
       invoke_vi(96,($10|0));
       $56 = __THREW__; __THREW__ = 0;
       label = 40;
      } else {
       $57 = ($54>>>0)<(11);
       if ($57) {
        $66 = $54&255;
        $67 = ((($10)) + 11|0);
        HEAP8[$67>>0] = $66;
        $68 = ($54|0)==(0);
        if ($68) {
         $$017$i$i$i22 = $10;
        } else {
         $$016$i$i$i21 = $10;
         label = 24;
        }
       } else {
        $58 = (($54) + 16)|0;
        $59 = $58 & -16;
        __THREW__ = 0;
        $60 = (invoke_ii(78,($59|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         label = 40;
         break;
        }
        HEAP32[$10>>2] = $60;
        $63 = $59 | -2147483648;
        $64 = ((($10)) + 8|0);
        HEAP32[$64>>2] = $63;
        $65 = ((($10)) + 4|0);
        HEAP32[$65>>2] = $54;
        $$016$i$i$i21 = $60;
        label = 24;
       }
       if ((label|0) == 24) {
        _memcpy(($$016$i$i$i21|0),($53|0),($54|0))|0;
        $$017$i$i$i22 = $$016$i$i$i21;
       }
       $69 = (($$017$i$i$i22) + ($54)|0);
       HEAP8[$69>>0] = 0;
       __THREW__ = 0;
       invoke_viiiiii($70|0,($6|0),($12|0),($7|0),($8|0),($9|0),($10|0));
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       do {
        if ($72) {
         $104 = ___cxa_find_matching_catch_2()|0;
         $105 = tempRet0;
         $$0 = $105;$$07 = $104;
        } else {
         $73 = HEAP32[$6>>2]|0;
         __THREW__ = 0;
         invoke_vi(85,($73|0));
         $74 = __THREW__; __THREW__ = 0;
         $75 = $74&1;
         if ($75) {
          $106 = ___cxa_find_matching_catch_2()|0;
          $107 = tempRet0;
          $108 = HEAP32[$6>>2]|0;
          __THREW__ = 0;
          invoke_vi(73,($108|0));
          $109 = __THREW__; __THREW__ = 0;
          $110 = $109&1;
          if (!($110)) {
           $$0 = $107;$$07 = $106;
           break;
          }
          $111 = ___cxa_find_matching_catch_3(0|0)|0;
          $112 = tempRet0;
          ___clang_call_terminate($111);
          // unreachable;
         }
         $76 = HEAP32[$6>>2]|0;
         __THREW__ = 0;
         invoke_vi(73,($76|0));
         $77 = __THREW__; __THREW__ = 0;
         $78 = $77&1;
         if ($78) {
          $79 = ___cxa_find_matching_catch_3(0|0)|0;
          $80 = tempRet0;
          ___clang_call_terminate($79);
          // unreachable;
         }
         $81 = ((($10)) + 11|0);
         $82 = HEAP8[$81>>0]|0;
         $83 = ($82<<24>>24)<(0);
         if ($83) {
          $84 = HEAP32[$10>>2]|0;
          __ZdlPv($84);
         }
         $85 = ((($9)) + 11|0);
         $86 = HEAP8[$85>>0]|0;
         $87 = ($86<<24>>24)<(0);
         if ($87) {
          $88 = HEAP32[$9>>2]|0;
          __ZdlPv($88);
         }
         $89 = ((($8)) + 11|0);
         $90 = HEAP8[$89>>0]|0;
         $91 = ($90<<24>>24)<(0);
         if ($91) {
          $92 = HEAP32[$8>>2]|0;
          __ZdlPv($92);
         }
         $93 = HEAP32[$7>>2]|0;
         __THREW__ = 0;
         invoke_vi(73,($93|0));
         $94 = __THREW__; __THREW__ = 0;
         $95 = $94&1;
         if ($95) {
          $96 = ___cxa_find_matching_catch_3(0|0)|0;
          $97 = tempRet0;
          ___clang_call_terminate($96);
          // unreachable;
         } else {
          STACKTOP = sp;return ($76|0);
         }
        }
       } while(0);
       $113 = ((($10)) + 11|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = ($114<<24>>24)<(0);
       if ($115) {
        $116 = HEAP32[$10>>2]|0;
        __ZdlPv($116);
        $$1 = $$0;$$18 = $$07;
       } else {
        $$1 = $$0;$$18 = $$07;
       }
      }
     } while(0);
     if ((label|0) == 40) {
      $102 = ___cxa_find_matching_catch_2()|0;
      $103 = tempRet0;
      $$1 = $103;$$18 = $102;
     }
     $117 = ((($9)) + 11|0);
     $118 = HEAP8[$117>>0]|0;
     $119 = ($118<<24>>24)<(0);
     if ($119) {
      $120 = HEAP32[$9>>2]|0;
      __ZdlPv($120);
      $$2 = $$1;$$29 = $$18;
     } else {
      $$2 = $$1;$$29 = $$18;
     }
    }
   } while(0);
   if ((label|0) == 39) {
    $100 = ___cxa_find_matching_catch_2()|0;
    $101 = tempRet0;
    $$2 = $101;$$29 = $100;
   }
   $121 = ((($8)) + 11|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = ($122<<24>>24)<(0);
   if ($123) {
    $124 = HEAP32[$8>>2]|0;
    __ZdlPv($124);
    $$3 = $$2;$$310 = $$29;
   } else {
    $$3 = $$2;$$310 = $$29;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $98 = ___cxa_find_matching_catch_2()|0;
  $99 = tempRet0;
  $$3 = $99;$$310 = $98;
 }
 $125 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 invoke_vi(73,($125|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if ($127) {
  $128 = ___cxa_find_matching_catch_3(0|0)|0;
  $129 = tempRet0;
  ___clang_call_terminate($128);
  // unreachable;
 } else {
  ___resumeException($$310|0);
  // unreachable;
 }
 return (0)|0;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (_strlen($1)|0);
 $4 = ((($2)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5&255;
 $10 = $6 ? $8 : $9;
 $11 = (($10) + ($3))|0;
 $12 = ($11>>>0)>(4294967279);
 do {
  if ($12) {
   __THREW__ = 0;
   invoke_vi(96,($0|0));
   $13 = __THREW__; __THREW__ = 0;
  } else {
   $14 = ($11>>>0)<(11);
   if ($14) {
    $15 = $3&255;
    $16 = ((($0)) + 11|0);
    HEAP8[$16>>0] = $15;
    $$0$i = $0;
   } else {
    $17 = (($11) + 16)|0;
    $18 = $17 & -16;
    __THREW__ = 0;
    $19 = (invoke_ii(78,($18|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     break;
    }
    HEAP32[$0>>2] = $19;
    $22 = $18 | -2147483648;
    $23 = ((($0)) + 8|0);
    HEAP32[$23>>2] = $22;
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $3;
    $$0$i = $19;
   }
   $25 = ($3|0)==(0);
   if (!($25)) {
    _memcpy(($$0$i|0),($1|0),($3|0))|0;
   }
   $26 = (($$0$i) + ($3)|0);
   HEAP8[$26>>0] = 0;
   $27 = HEAP32[$2>>2]|0;
   $28 = $6 ? $27 : $2;
   __THREW__ = 0;
   (invoke_iiii(90,($0|0),($28|0),($10|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    return;
   }
  }
 } while(0);
 $31 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 $33 = ((($0)) + 11|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ($34<<24>>24)<(0);
 if (!($35)) {
  ___resumeException($31|0);
  // unreachable;
 }
 $36 = HEAP32[$0>>2]|0;
 __ZdlPv($36);
 ___resumeException($31|0);
 // unreachable;
}
function __ZN10emscripten3val3setIA11_cA12_cEEvRKT_RKT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__emval_new_cstring(($1|0))|0);
 __THREW__ = 0;
 $5 = (invoke_ii(76,($2|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $$0 = $19;$$04 = $18;
  } else {
   __THREW__ = 0;
   invoke_viii(94,($3|0),($4|0),($5|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $20 = ___cxa_find_matching_catch_2()|0;
    $21 = tempRet0;
    __THREW__ = 0;
    invoke_vi(73,($5|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if (!($23)) {
     $$0 = $21;$$04 = $20;
     break;
    }
    $24 = ___cxa_find_matching_catch_3(0|0)|0;
    $25 = tempRet0;
    ___clang_call_terminate($24);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(73,($5|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $12 = ___cxa_find_matching_catch_3(0|0)|0;
    $13 = tempRet0;
    ___clang_call_terminate($12);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(73,($4|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch_3(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   } else {
    return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(73,($4|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $28 = ___cxa_find_matching_catch_3(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  ___resumeException($$04|0);
  // unreachable;
 }
}
function __ZN10emscripten8internal12MethodCallerINS_3valEJRS2_EE4callEPNS0_7_EM_VALEPKcS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = sp + 8|0;
 $6 = HEAP8[49208]|0;
 $7 = ($6<<24>>24)==(0);
 do {
  if ($7) {
   $8 = (___cxa_guard_acquire(49208)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    __THREW__ = 0;
    $10 = (invoke_iii(84,2,(37004|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     $13 = ___cxa_find_matching_catch_2()|0;
     $14 = tempRet0;
     ___resumeException($13|0);
     // unreachable;
    } else {
     HEAP32[12317] = $10;
     break;
    }
   }
  }
 } while(0);
 $15 = HEAP32[12317]|0;
 $16 = HEAP32[$3>>2]|0;
 __emval_incref(($16|0));
 $17 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $17;
 $18 = (+__emval_call_method(($15|0),($1|0),($2|0),($5|0),($4|0)));
 $19 = HEAP32[$5>>2]|0;
 $20 = (~~(($18))>>>0);
 $21 = $20;
 HEAP32[$0>>2] = $21;
 __THREW__ = 0;
 invoke_vi(97,($19|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $24 = ___cxa_find_matching_catch_3(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$$i50 = 0, $$$i51 = 0, $$$i53 = 0, $$061 = 0, $$phi$trans$insert76 = 0, $$phi$trans$insert82 = 0, $$pre = 0, $$pre78 = 0, $$pre81 = 0, $$pre84 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==($0|0);
 $3 = ((($1)) + 12|0);
 $4 = $2&1;
 HEAP8[$3>>0] = $4;
 if ($2) {
  return;
 } else {
  $$061 = $1;
 }
 while(1) {
  $5 = ((($$061)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 12|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if (!($9)) {
   label = 23;
   break;
  }
  $10 = ((($6)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($6|0);
  if ($13) {
   $14 = ((($11)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    label = 7;
    break;
   }
   $17 = ((($15)) + 12|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $$sink = $17;
   } else {
    label = 7;
    break;
   }
  } else {
   $53 = ($12|0)==(0|0);
   if ($53) {
    label = 16;
    break;
   }
   $54 = ((($12)) + 12|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $$sink = $54;
   } else {
    label = 16;
    break;
   }
  }
  HEAP8[$7>>0] = 1;
  $20 = ($11|0)==($0|0);
  $21 = ((($11)) + 12|0);
  $22 = $20&1;
  HEAP8[$21>>0] = $22;
  HEAP8[$$sink>>0] = 1;
  if ($20) {
   label = 23;
   break;
  } else {
   $$061 = $11;
  }
 }
 if ((label|0) == 7) {
  $23 = HEAP32[$6>>2]|0;
  $24 = ($23|0)==($$061|0);
  if ($24) {
   $38 = $6;$40 = $11;
  } else {
   $25 = $11;
   $26 = ((($6)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$26>>2] = $28;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $32 = $25;
   } else {
    $30 = ((($28)) + 8|0);
    HEAP32[$30>>2] = $6;
    $$pre81 = HEAP32[$10>>2]|0;
    $32 = $$pre81;
   }
   $31 = ((($27)) + 8|0);
   HEAP32[$31>>2] = $32;
   $33 = HEAP32[$10>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==($6|0);
   $36 = ((($33)) + 4|0);
   $$$i53 = $35 ? $33 : $36;
   HEAP32[$$$i53>>2] = $27;
   HEAP32[$27>>2] = $6;
   HEAP32[$10>>2] = $27;
   $$phi$trans$insert82 = ((($27)) + 8|0);
   $$pre84 = HEAP32[$$phi$trans$insert82>>2]|0;
   $38 = $27;$40 = $$pre84;
  }
  $37 = ((($38)) + 12|0);
  HEAP8[$37>>0] = 1;
  $39 = ((($40)) + 12|0);
  HEAP8[$39>>0] = 0;
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$40>>2] = $43;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   $45 = ((($43)) + 8|0);
   HEAP32[$45>>2] = $40;
  }
  $46 = ((($40)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($41)) + 8|0);
  HEAP32[$48>>2] = $47;
  $49 = HEAP32[$46>>2]|0;
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==($40|0);
  $52 = ((($49)) + 4|0);
  $$$i51 = $51 ? $49 : $52;
  HEAP32[$$$i51>>2] = $41;
  HEAP32[$42>>2] = $40;
  HEAP32[$46>>2] = $41;
  return;
 }
 else if ((label|0) == 16) {
  $57 = HEAP32[$6>>2]|0;
  $58 = ($57|0)==($$061|0);
  if ($58) {
   $59 = $11;
   $60 = HEAP32[$6>>2]|0;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   HEAP32[$6>>2] = $62;
   $63 = ($62|0)==(0|0);
   if ($63) {
    $66 = $59;
   } else {
    $64 = ((($62)) + 8|0);
    HEAP32[$64>>2] = $6;
    $$pre = HEAP32[$10>>2]|0;
    $66 = $$pre;
   }
   $65 = ((($60)) + 8|0);
   HEAP32[$65>>2] = $66;
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==($6|0);
   $70 = ((($67)) + 4|0);
   $$$i50 = $69 ? $67 : $70;
   HEAP32[$$$i50>>2] = $60;
   HEAP32[$61>>2] = $6;
   HEAP32[$10>>2] = $60;
   $$phi$trans$insert76 = ((($60)) + 8|0);
   $$pre78 = HEAP32[$$phi$trans$insert76>>2]|0;
   $72 = $60;$74 = $$pre78;
  } else {
   $72 = $6;$74 = $11;
  }
  $71 = ((($72)) + 12|0);
  HEAP8[$71>>0] = 1;
  $73 = ((($74)) + 12|0);
  HEAP8[$73>>0] = 0;
  $75 = ((($74)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  HEAP32[$75>>2] = $77;
  $78 = ($77|0)==(0|0);
  if (!($78)) {
   $79 = ((($77)) + 8|0);
   HEAP32[$79>>2] = $74;
  }
  $80 = ((($74)) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($76)) + 8|0);
  HEAP32[$82>>2] = $81;
  $83 = HEAP32[$80>>2]|0;
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)==($74|0);
  $86 = ((($83)) + 4|0);
  $$$i = $85 ? $83 : $86;
  HEAP32[$$$i>>2] = $76;
  HEAP32[$76>>2] = $74;
  HEAP32[$80>>2] = $76;
  return;
 }
 else if ((label|0) == 23) {
  return;
 }
}
function __ZN9NetStreamD2Ev($0) {
 $0 = $0|0;
 var $$08$i$i = 0, $$pre$i$i = 0, $$pre9$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 HEAP32[$vararg_buffer>>2] = 43934;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 invoke_vii(82,0,($vararg_buffer|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $14 = ___cxa_find_matching_catch_3(0|0)|0;
  $15 = tempRet0;
  $16 = ((($0)) + 28|0);
  __ZNSt3__25queueI11VideoPacketNS_5dequeIS1_NS_9allocatorIS1_EEEEED2Ev($16);
  ___clang_call_terminate($14);
  // unreachable;
 }
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = _emscripten_asm_const_ii(0, ($6|0))|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = HEAP32[$9>>2]|0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vi[$13 & 127]($9);
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  __THREW__ = 0;
  HEAP32[$vararg_buffer2>>2] = 43975;
  invoke_vii(82,0,($vararg_buffer2|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   $27 = ((($17)) + 12|0);
   __ZN10MP3DecoderD2Ev($27);
   ___clang_call_terminate($25);
   // unreachable;
  }
  $21 = ((($17)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  _free($22);
  __THREW__ = 0;
  HEAP32[$vararg_buffer5>>2] = 43998;
  invoke_vii(82,0,($vararg_buffer5|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   $27 = ((($17)) + 12|0);
   __ZN10MP3DecoderD2Ev($27);
   ___clang_call_terminate($25);
   // unreachable;
  }
  $28 = ((($17)) + 76|0);
  __THREW__ = 0;
  invoke_vi(98,($28|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $41 = ___cxa_find_matching_catch_3(0|0)|0;
   $42 = tempRet0;
   $43 = ((($17)) + 22684|0);
   __ZN12MemoryStreamD2Ev($43);
   $44 = ((($17)) + 22668|0);
   __ZN12MemoryStreamD2Ev($44);
   ___clang_call_terminate($41);
   // unreachable;
  }
  $31 = ((($17)) + 22684|0);
  $32 = ((($31)) + 11|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = ($33<<24>>24)<(0);
  if ($34) {
   $35 = HEAP32[$31>>2]|0;
   __ZdlPv($35);
  }
  $36 = ((($17)) + 22668|0);
  $37 = ((($36)) + 11|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = ($38<<24>>24)<(0);
  if ($39) {
   $40 = HEAP32[$36>>2]|0;
   __ZdlPv($40);
  }
  __ZdlPv($17);
 }
 $45 = ((($0)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 do {
  if (!($47)) {
   $48 = HEAP32[$46>>2]|0;
   __THREW__ = 0;
   invoke_vi(73,($48|0));
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if ($50) {
    $51 = ___cxa_find_matching_catch_3(0|0)|0;
    $52 = tempRet0;
    ___clang_call_terminate($51);
    // unreachable;
   } else {
    __ZdlPv($46);
    break;
   }
  }
 } while(0);
 $53 = ((($0)) + 28|0);
 __ZNSt3__212__deque_baseI11VideoPacketNS_9allocatorIS1_EEE5clearEv($53);
 $54 = ((($0)) + 32|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($0)) + 36|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($55|0)==($57|0);
 if (!($58)) {
  $$08$i$i = $55;
  while(1) {
   $59 = HEAP32[$$08$i$i>>2]|0;
   __ZdlPv($59);
   $60 = ((($$08$i$i)) + 4|0);
   $61 = ($60|0)==($57|0);
   if ($61) {
    break;
   } else {
    $$08$i$i = $60;
   }
  }
  $$pre$i$i = HEAP32[$54>>2]|0;
  $$pre9$i$i = HEAP32[$56>>2]|0;
  $62 = ($$pre9$i$i|0)==($$pre$i$i|0);
  if (!($62)) {
   $scevgep$i$i$i$i$i$i = ((($$pre9$i$i)) + -4|0);
   $63 = $scevgep$i$i$i$i$i$i;
   $64 = $$pre$i$i;
   $65 = (($63) - ($64))|0;
   $66 = $65 >>> 2;
   $67 = $66 ^ -1;
   $scevgep4$i$i$i$i$i$i = (($$pre9$i$i) + ($67<<2)|0);
   HEAP32[$56>>2] = $scevgep4$i$i$i$i$i$i;
  }
 }
 $68 = HEAP32[$53>>2]|0;
 $69 = ($68|0)==(0|0);
 if ($69) {
  STACKTOP = sp;return;
 }
 __ZdlPv($68);
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 } else {
  $3 = HEAP32[$1>>2]|0;
  __ZNSt3__26__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($0,$3);
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  __ZNSt3__26__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($0,$5);
  __ZdlPv($1);
  return;
 }
}
function __ZN10MonaClientD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi(73,($3|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $6 = ___cxa_find_matching_catch_3(0|0)|0;
    $7 = tempRet0;
    ___clang_call_terminate($6);
    // unreachable;
   } else {
    __ZdlPv($1);
    break;
   }
  }
 } while(0);
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 do {
  if (!($10)) {
   $11 = HEAP32[$9>>2]|0;
   __THREW__ = 0;
   invoke_vi(73,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch_3(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   } else {
    __ZdlPv($9);
    break;
   }
  }
 } while(0);
 $16 = ((($0)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 do {
  if (!($18)) {
   $19 = HEAP32[$17>>2]|0;
   __THREW__ = 0;
   invoke_vi(73,($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $22 = ___cxa_find_matching_catch_3(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   } else {
    __ZdlPv($17);
    break;
   }
  }
 } while(0);
 $24 = ((($0)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 do {
  if (!($26)) {
   $27 = HEAP32[$25>>2]|0;
   __THREW__ = 0;
   invoke_vi(73,($27|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $30 = ___cxa_find_matching_catch_3(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    __ZdlPv($25);
    break;
   }
  }
 } while(0);
 $32 = ((($0)) + 52|0);
 $33 = ((($0)) + 56|0);
 $34 = HEAP32[$33>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($32,$34);
 $35 = ((($0)) + 40|0);
 $36 = ((($35)) + 11|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = ($37<<24>>24)<(0);
 if ($38) {
  $39 = HEAP32[$35>>2]|0;
  __ZdlPv($39);
 }
 $40 = ((($0)) + 28|0);
 $41 = ((($40)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if ($43) {
  $44 = HEAP32[$40>>2]|0;
  __ZdlPv($44);
 }
 $45 = ((($0)) + 16|0);
 $46 = ((($45)) + 11|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = ($47<<24>>24)<(0);
 if (!($48)) {
  return;
 }
 $49 = HEAP32[$45>>2]|0;
 __ZdlPv($49);
 return;
}
function __ZNSt3__25queueI11VideoPacketNS_5dequeIS1_NS_9allocatorIS1_EEEEED2Ev($0) {
 $0 = $0|0;
 var $$08$i = 0, $$pre$i = 0, $$pre9$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i$i$i = 0;
 var $scevgep4$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212__deque_baseI11VideoPacketNS_9allocatorIS1_EEE5clearEv($0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if (!($5)) {
  $$08$i = $2;
  while(1) {
   $6 = HEAP32[$$08$i>>2]|0;
   __ZdlPv($6);
   $7 = ((($$08$i)) + 4|0);
   $8 = ($7|0)==($4|0);
   if ($8) {
    break;
   } else {
    $$08$i = $7;
   }
  }
  $$pre$i = HEAP32[$1>>2]|0;
  $$pre9$i = HEAP32[$3>>2]|0;
  $9 = ($$pre9$i|0)==($$pre$i|0);
  if (!($9)) {
   $scevgep$i$i$i$i$i = ((($$pre9$i)) + -4|0);
   $10 = $scevgep$i$i$i$i$i;
   $11 = $$pre$i;
   $12 = (($10) - ($11))|0;
   $13 = $12 >>> 2;
   $14 = $13 ^ -1;
   $scevgep4$i$i$i$i$i = (($$pre9$i) + ($14<<2)|0);
   HEAP32[$3>>2] = $scevgep4$i$i$i$i$i;
  }
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  return;
 }
 __ZdlPv($15);
 return;
}
function __ZN10MP3DecoderD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 __THREW__ = 0;
 invoke_vi(98,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $14 = ___cxa_find_matching_catch_3(0|0)|0;
  $15 = tempRet0;
  $16 = ((($0)) + 22672|0);
  __ZN12MemoryStreamD2Ev($16);
  $17 = ((($0)) + 22656|0);
  __ZN12MemoryStreamD2Ev($17);
  ___clang_call_terminate($14);
  // unreachable;
 }
 $4 = ((($0)) + 22672|0);
 $5 = ((($4)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$4>>2]|0;
  __ZdlPv($8);
 }
 $9 = ((($0)) + 22656|0);
 $10 = ((($9)) + 11|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if (!($12)) {
  return;
 }
 $13 = HEAP32[$9>>2]|0;
 __ZdlPv($13);
 return;
}
function __ZN12MemoryStreamD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if (!($3)) {
  return;
 }
 $4 = HEAP32[$0>>2]|0;
 __ZdlPv($4);
 return;
}
function __ZNSt3__212__deque_baseI11VideoPacketNS_9allocatorIS1_EEE5clearEv($0) {
 $0 = $0|0;
 var $$cast = 0, $$in = 0, $$lcssa = 0, $$sink = 0, $$sroa$011$0$ph = 0, $$sroa$6$0 = 0, $$sroa$6$0$ph = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4>>>0) / 204)&-1;
 $6 = (($2) + ($5<<2)|0);
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($2|0);
 if ($9) {
  $10 = ((($0)) + 20|0);
  $24 = 0;$25 = $10;$51 = 0;
 } else {
  $11 = HEAP32[$6>>2]|0;
  $12 = (($4>>>0) % 204)&-1;
  $13 = (($11) + (($12*20)|0)|0);
  $phitmp = $13;
  $14 = ((($0)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($4) + ($15))|0;
  $17 = (($16>>>0) / 204)&-1;
  $18 = (($2) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($16>>>0) % 204)&-1;
  $21 = (($19) + (($20*20)|0)|0);
  $24 = $21;$25 = $14;$51 = $phitmp;
 }
 $$sroa$011$0$ph = $6;$$sroa$6$0$ph = $51;
 L5: while(1) {
  $$sroa$6$0 = $$sroa$6$0$ph;
  while(1) {
   $22 = $$sroa$6$0;
   $23 = ($22|0)==($24|0);
   if ($23) {
    break L5;
   }
   $31 = ((($22)) + 4|0);
   $32 = ((($31)) + 11|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = ($33<<24>>24)<(0);
   if ($34) {
    $35 = HEAP32[$31>>2]|0;
    __ZdlPv($35);
   }
   $36 = ((($22)) + 20|0);
   $37 = $36;
   $38 = HEAP32[$$sroa$011$0$ph>>2]|0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)==(4080);
   if ($40) {
    break;
   } else {
    $$sroa$6$0 = $37;
   }
  }
  $41 = ((($$sroa$011$0$ph)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $$sroa$011$0$ph = $41;$$sroa$6$0$ph = $42;
 }
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$7>>2]|0;
 $27 = HEAP32[$1>>2]|0;
 $28 = (($26) - ($27))|0;
 $29 = $28 >> 2;
 $30 = ($29>>>0)>(2);
 if ($30) {
  $$in = $27;
  while(1) {
   $43 = $$in;
   $44 = HEAP32[$43>>2]|0;
   __ZdlPv($44);
   $45 = HEAP32[$1>>2]|0;
   $46 = ((($45)) + 4|0);
   HEAP32[$1>>2] = $46;
   $47 = HEAP32[$7>>2]|0;
   $$cast = $46;
   $48 = (($47) - ($$cast))|0;
   $49 = $48 >> 2;
   $50 = ($49>>>0)>(2);
   if ($50) {
    $$in = $$cast;
   } else {
    $$lcssa = $49;
    break;
   }
  }
 } else {
  $$lcssa = $29;
 }
 switch ($$lcssa|0) {
 case 1:  {
  $$sink = 102;
  break;
 }
 case 2:  {
  $$sink = 204;
  break;
 }
 default: {
  return;
 }
 }
 HEAP32[$3>>2] = $$sink;
 return;
}
function __ZNK10emscripten3val2asINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJEEET_DpT0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016$i$i$i$i = 0, $$017$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = (+__emval_as(($3|0),(56|0),($2|0)));
 $5 = HEAP32[$2>>2]|0;
 $6 = (~~(($4))>>>0);
 $7 = $6;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$7>>2]|0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $10 = ($9>>>0)>(4294967279);
 do {
  if ($10) {
   __THREW__ = 0;
   invoke_vi(96,($0|0));
   $11 = __THREW__; __THREW__ = 0;
  } else {
   $12 = ($9>>>0)<(11);
   if ($12) {
    $21 = $9&255;
    $22 = ((($0)) + 11|0);
    HEAP8[$22>>0] = $21;
    $23 = ($9|0)==(0);
    if ($23) {
     $$017$i$i$i$i = $0;
    } else {
     $$016$i$i$i$i = $0;
     label = 7;
    }
   } else {
    $13 = (($9) + 16)|0;
    $14 = $13 & -16;
    __THREW__ = 0;
    $15 = (invoke_ii(78,($14|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     break;
    }
    HEAP32[$0>>2] = $15;
    $18 = $14 | -2147483648;
    $19 = ((($0)) + 8|0);
    HEAP32[$19>>2] = $18;
    $20 = ((($0)) + 4|0);
    HEAP32[$20>>2] = $9;
    $$016$i$i$i$i = $15;
    label = 7;
   }
   if ((label|0) == 7) {
    _memcpy(($$016$i$i$i$i|0),($8|0),($9|0))|0;
    $$017$i$i$i$i = $$016$i$i$i$i;
   }
   $24 = (($$017$i$i$i$i) + ($9)|0);
   HEAP8[$24>>0] = 0;
   __THREW__ = 0;
   invoke_vi(97,($5|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch_3(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $29 = ___cxa_find_matching_catch_2()|0;
 $30 = tempRet0;
 __THREW__ = 0;
 invoke_vi(97,($5|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch_3(0|0)|0;
  $34 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable;
 } else {
  ___resumeException($29|0);
  // unreachable;
 }
}
function __ZN9NetStream11decodeAudioElR12MemoryStream($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($2)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = HEAP32[$2>>2]|0;
 $8 = $6 ? $7 : $2;
 $9 = ((($2)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + ($10)|0);
 $12 = ((($11)) + 1|0);
 $13 = ((($12)) + -1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = (($10) + 1)|0;
 HEAP32[$9>>2] = $15;
 $16 = HEAP32[$0>>2]|0;
 $17 = $14 & -16;
 $cond$i = ($17<<24>>24)==(32);
 if (!($cond$i)) {
  STACKTOP = sp;return 1;
 }
 $18 = ((($16)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($16)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + ($21)|0);
 $23 = HEAP32[$16>>2]|0;
 $24 = (($19) + ($23)|0);
 $25 = (__ZN12AudioDecoder9decodeMP3ER12MemoryStreamPhS2_($16,$2,$22,$24)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  STACKTOP = sp;return 1;
 }
 $27 = HEAP32[$20>>2]|0;
 $28 = (($27) + ($25))|0;
 $29 = HEAP32[$16>>2]|0;
 $30 = ($28|0)==($29|0);
 $$$i = $30 ? 0 : $28;
 HEAP32[$20>>2] = $$$i;
 if (!($30)) {
  STACKTOP = sp;return 1;
 }
 $31 = ((($0)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP8[49200]|0;
 $35 = ($34<<24>>24)==(0);
 do {
  if ($35) {
   $36 = (___cxa_guard_acquire(49200)|0);
   $37 = ($36|0)==(0);
   if (!($37)) {
    __THREW__ = 0;
    $38 = (invoke_iii(84,1,(36996|0))|0);
    $39 = __THREW__; __THREW__ = 0;
    $40 = $39&1;
    if ($40) {
     $41 = ___cxa_find_matching_catch_2()|0;
     $42 = tempRet0;
     ___resumeException($41|0);
     // unreachable;
    } else {
     HEAP32[12316] = $38;
     break;
    }
   }
  }
 } while(0);
 $43 = HEAP32[12316]|0;
 __emval_call_void_method(($43|0),($33|0),(44317|0),($3|0));
 STACKTOP = sp;return 1;
}
function __ZN9NetStream11decodeVideoElR12MemoryStream($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$031 = 0, $$3 = 0, $$mask = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $3 = sp;
 $4 = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 HEAP32[$4>>2] = $1;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 $10 = ((($2)) + 11|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 $13 = HEAP32[$2>>2]|0;
 $14 = $12 ? $13 : $2;
 $15 = ((($2)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($16)|0);
 $trunc = HEAP8[$17>>0]|0;
 $18 = $trunc & 15;
 $19 = $18&255;
 $trunc$clear = $trunc & 15;
 switch ($trunc$clear<<24>>24) {
 case 7: case 12:  {
  break;
 }
 default: {
  $20 = $trunc&255;
  HEAP32[$vararg_buffer>>2] = 44064;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $20;
  _emscripten_log(0,($vararg_buffer|0));
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 }
 $21 = ((($17)) + 1|0);
 $$mask = $trunc & -16;
 $22 = ($$mask<<24>>24)==(16);
 $23 = HEAP8[$21>>0]|0;
 $24 = ($23<<24>>24)==(0);
 $or$cond = $22 & $24;
 if ($or$cond) {
  $25 = ((($0)) + 12|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   $$3 = 1;
   STACKTOP = sp;return ($$3|0);
  }
  $28 = _emscripten_asm_const_ii(1, 0)|0;
  $29 = (($28) - ($1))|0;
  $30 = ((($0)) + 24|0);
  HEAP32[$30>>2] = $29;
  $31 = HEAP32[$7>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_viii[$34 & 127]($31,$2,$19);
  HEAP8[$25>>0] = 0;
  $$3 = 1;
  STACKTOP = sp;return ($$3|0);
 }
 $35 = ((($0)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if ($37) {
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 $38 = ((($0)) + 56|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0);
 do {
  if ($40) {
   $106 = $8;
  } else {
   $41 = _emscripten_asm_const_ii(1, 0)|0;
   $42 = ((($0)) + 24|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) - ($43))|0;
   $45 = HEAP32[$38>>2]|0;
   $46 = ($45*1000)|0;
   $47 = (($46) + ($1))|0;
   $48 = ($47|0)>($44|0);
   if (!($48)) {
    $$pre = HEAP32[$7>>2]|0;
    $106 = $$pre;
    break;
   }
   $49 = ((($0)) + 28|0);
   __ZNSt3__25dequeI11VideoPacketNS_9allocatorIS1_EEE12emplace_backIJRl12MemoryStreamEEEvDpOT_($49,$4,$2);
   $50 = ((($0)) + 52|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = ($51<<24>>24)==(0);
   if (!($52)) {
    $$3 = 0;
    STACKTOP = sp;return ($$3|0);
   }
   HEAP8[$50>>0] = 1;
   $53 = (__emval_new_object()|0);
   HEAP32[$5>>2] = $53;
   __THREW__ = 0;
   invoke_viii(99,($5|0),(44159|0),(44164|0));
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   L26: do {
    if ($55) {
     label = 25;
    } else {
     $56 = HEAP32[$35>>2]|0;
     $57 = HEAP32[$56>>2]|0;
     $58 = HEAP8[49224]|0;
     $59 = ($58<<24>>24)==(0);
     do {
      if ($59) {
       $60 = (___cxa_guard_acquire(49224)|0);
       $61 = ($60|0)==(0);
       if (!($61)) {
        __THREW__ = 0;
        $62 = (invoke_iii(84,2,(37020|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         $65 = ___cxa_find_matching_catch_2()|0;
         $66 = tempRet0;
         $eh$lpad$body$index7Z2D = $66;$eh$lpad$body$indexZ2D = $65;
         label = 26;
         break L26;
        } else {
         HEAP32[12319] = $62;
         break;
        }
       }
      }
     } while(0);
     $67 = HEAP32[12319]|0;
     $68 = HEAP32[$5>>2]|0;
     __THREW__ = 0;
     invoke_vi(85,($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 25;
     } else {
      $71 = HEAP32[$5>>2]|0;
      HEAP32[$3>>2] = $71;
      __THREW__ = 0;
      invoke_viiii(87,($67|0),($57|0),(44185|0),($3|0));
      $72 = __THREW__; __THREW__ = 0;
      $73 = $72&1;
      if ($73) {
       label = 25;
      } else {
       $74 = HEAP32[$4>>2]|0;
       $75 = (($74) - ($44))|0;
       $76 = HEAP32[$38>>2]|0;
       $77 = ($76*1000)|0;
       $78 = (($75) + ($77))|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer2>>2] = 44197;
       $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
       HEAP32[$vararg_ptr5>>2] = $78;
       invoke_vii(82,0,($vararg_buffer2|0));
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 25;
       } else {
        $81 = HEAP32[$35>>2]|0;
        $82 = HEAP32[$4>>2]|0;
        $83 = (($82) - ($44))|0;
        $84 = HEAP32[$38>>2]|0;
        $85 = ($84*1000)|0;
        $86 = (($83) + ($85))|0;
        HEAP32[$6>>2] = $86;
        $87 = HEAP32[$81>>2]|0;
        __THREW__ = 0;
        $88 = (invoke_iiii(100,($87|0),(44232|0),($6|0))|0);
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         $99 = ___cxa_find_matching_catch_2()|0;
         $100 = tempRet0;
         $$0 = $100;$$031 = $99;
         break;
        }
        $91 = ((($0)) + 60|0);
        HEAP32[$91>>2] = $88;
        $92 = HEAP32[$5>>2]|0;
        __THREW__ = 0;
        invoke_vi(73,($92|0));
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         $95 = ___cxa_find_matching_catch_3(0|0)|0;
         $96 = tempRet0;
         ___clang_call_terminate($95);
         // unreachable;
        }
        $$3 = 0;
        STACKTOP = sp;return ($$3|0);
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 25) {
    $97 = ___cxa_find_matching_catch_2()|0;
    $98 = tempRet0;
    $eh$lpad$body$index7Z2D = $98;$eh$lpad$body$indexZ2D = $97;
    label = 26;
   }
   if ((label|0) == 26) {
    $$0 = $eh$lpad$body$index7Z2D;$$031 = $eh$lpad$body$indexZ2D;
   }
   $101 = HEAP32[$5>>2]|0;
   __THREW__ = 0;
   invoke_vi(73,($101|0));
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   if ($103) {
    $104 = ___cxa_find_matching_catch_3(0|0)|0;
    $105 = tempRet0;
    ___clang_call_terminate($104);
    // unreachable;
   } else {
    ___resumeException($$031|0);
    // unreachable;
   }
  }
 } while(0);
 __ZN12VideoDecoder6decodeER12MemoryStream($106,$2);
 $$3 = 1;
 STACKTOP = sp;return ($$3|0);
}
function __ZN10emscripten8internal12MethodCallerIvJRNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE4callEPNS0_7_EM_VALEPKcS9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP8[49216]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire(49216)|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    __THREW__ = 0;
    $8 = (invoke_iii(84,2,(37012|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch_2()|0;
     $12 = tempRet0;
     ___resumeException($11|0);
     // unreachable;
    } else {
     HEAP32[12318] = $8;
     break;
    }
   }
  }
 } while(0);
 $13 = HEAP32[12318]|0;
 $14 = ((($2)) + 11|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)<(0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $15&255;
 $20 = $16 ? $18 : $19;
 $21 = (($20) + 4)|0;
 $22 = (_malloc($21)|0);
 HEAP32[$22>>2] = $20;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$2>>2]|0;
 $25 = $16 ? $24 : $2;
 _memcpy(($23|0),($25|0),($20|0))|0;
 HEAP32[$3>>2] = $22;
 __emval_call_void_method(($13|0),($0|0),($1|0),($3|0));
 STACKTOP = sp;return;
}
function __ZNSt3__25dequeI11VideoPacketNS_9allocatorIS1_EEE12emplace_backIJRl12MemoryStreamEEEvDpOT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i = 0, $$pre = 0, $$pre5 = 0, $$pre6 = 0, $$pre7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8|0)==(0);
 $10 = ($8*204)|0;
 $11 = (($10) + -1)|0;
 $$$i$i = $9 ? 0 : $11;
 $12 = ((($0)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $sum$i = (($15) + ($13))|0;
 $16 = ($$$i$i|0)==($sum$i|0);
 $17 = $6;
 $18 = $4;
 if ($16) {
  __ZNSt3__25dequeI11VideoPacketNS_9allocatorIS1_EEE19__add_back_capacityEv($0);
  $$pre = HEAP32[$14>>2]|0;
  $$pre5 = HEAP32[$12>>2]|0;
  $$pre6 = HEAP32[$5>>2]|0;
  $$pre7 = HEAP32[$3>>2]|0;
  $20 = $$pre;$21 = $$pre5;$23 = $$pre7;$24 = $$pre6;
 } else {
  $20 = $15;$21 = $13;$23 = $18;$24 = $17;
 }
 $19 = (($21) + ($20))|0;
 $22 = ($23|0)==($24|0);
 if ($22) {
  $31 = 0;
 } else {
  $25 = (($19>>>0) / 204)&-1;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($19>>>0) % 204)&-1;
  $29 = (($27) + (($28*20)|0)|0);
  $31 = $29;
 }
 $30 = HEAP32[$1>>2]|0;
 HEAP32[$31>>2] = $30;
 $32 = ((($31)) + 4|0);
 ;HEAP32[$32>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;
 $33 = ((($31)) + 16|0);
 $34 = ((($2)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $36 = ((($2)) + 11|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = ($37<<24>>24)<(0);
 $39 = HEAP32[$2>>2]|0;
 $40 = $38 ? $39 : $2;
 $41 = ((($2)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $37&255;
 $44 = $38 ? $42 : $43;
 __THREW__ = 0;
 (invoke_iiii(90,($32|0),($40|0),($44|0))|0);
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 if (!($46)) {
  $53 = HEAP32[$14>>2]|0;
  $54 = (($53) + 1)|0;
  HEAP32[$14>>2] = $54;
  return;
 }
 $47 = ___cxa_find_matching_catch_2()|0;
 $48 = tempRet0;
 $49 = ((($32)) + 11|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = ($50<<24>>24)<(0);
 if (!($51)) {
  ___resumeException($47|0);
  // unreachable;
 }
 $52 = HEAP32[$32>>2]|0;
 __ZdlPv($52);
 ___resumeException($47|0);
 // unreachable;
}
function __ZN10emscripten3val3setIA5_cA21_cEEvRKT_RKT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__emval_new_cstring(($1|0))|0);
 __THREW__ = 0;
 $5 = (invoke_ii(76,($2|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $$0 = $19;$$04 = $18;
  } else {
   __THREW__ = 0;
   invoke_viii(94,($3|0),($4|0),($5|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $20 = ___cxa_find_matching_catch_2()|0;
    $21 = tempRet0;
    __THREW__ = 0;
    invoke_vi(73,($5|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if (!($23)) {
     $$0 = $21;$$04 = $20;
     break;
    }
    $24 = ___cxa_find_matching_catch_3(0|0)|0;
    $25 = tempRet0;
    ___clang_call_terminate($24);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(73,($5|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $12 = ___cxa_find_matching_catch_3(0|0)|0;
    $13 = tempRet0;
    ___clang_call_terminate($12);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(73,($4|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch_3(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   } else {
    return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(73,($4|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $28 = ___cxa_find_matching_catch_3(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  ___resumeException($$04|0);
  // unreachable;
 }
}
function __ZN10emscripten8internal12MethodCallerIiJlEE4callEPNS0_7_EM_VALEPKcOl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = sp + 8|0;
 $5 = HEAP8[49232]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire(49232)|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iii(84,2,(37028|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch_2()|0;
     $13 = tempRet0;
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[12320] = $9;
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[12320]|0;
 $15 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $15;
 $16 = (+__emval_call_method(($14|0),($0|0),($1|0),($4|0),($3|0)));
 $17 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi(97,($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  $22 = (~~(($16)));
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function __ZN12VideoDecoder6decodeER12MemoryStream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink33 = 0, $$sroa$0$0 = 0, $$sroa$0$0$in = 0, $$sroa$0$0$insert$ext = 0, $$sroa$0$0$insert$insert = 0, $$sroa$12$0$insert$ext = 0, $$sroa$12$0$insert$insert = 0, $$sroa$12$0$insert$shift = 0, $$sroa$12$030 = 0, $$sroa$12$1 = 0, $$sroa$14$0$insert$ext = 0, $$sroa$14$0$insert$shift = 0, $$sroa$14$032 = 0, $$sroa$14$1 = 0, $$sroa$9$0$insert$ext = 0, $$sroa$9$0$insert$insert = 0, $$sroa$9$0$insert$shift = 0, $$sroa$9$031 = 0, $$sroa$9$1 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 5)|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($1)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $6&255;
 $11 = $7 ? $9 : $10;
 $12 = (($11) - ($4))|0;
 $13 = ($12|0)>(4);
 if (!($13)) {
  return;
 }
 $14 = ((($0)) + 32|0);
 $$sroa$12$030 = 0;$$sroa$14$032 = 0;$$sroa$9$031 = 0;$17 = $6;$21 = $4;
 while(1) {
  $15 = HEAP32[$14>>2]|0;
  switch ($15|0) {
  case 3:  {
   $16 = ($17<<24>>24)<(0);
   $18 = HEAP32[$1>>2]|0;
   $19 = $16 ? $18 : $1;
   $20 = (($19) + ($21)|0);
   $22 = ((($20)) + 4|0);
   $23 = ((($22)) + -1|0);
   $24 = ((($23)) + -1|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ((($23)) + -2|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = ((($23)) + -3|0);
   $29 = HEAP8[$28>>0]|0;
   $$sink33 = 4;$$sroa$0$0$in = $23;$$sroa$12$1 = $27;$$sroa$14$1 = $29;$$sroa$9$1 = $25;$60 = $18;
   break;
  }
  case 2:  {
   $30 = ($17<<24>>24)<(0);
   $31 = HEAP32[$1>>2]|0;
   $32 = $30 ? $31 : $1;
   $33 = (($32) + ($21)|0);
   $34 = ((($33)) + 3|0);
   $35 = ((($34)) + -1|0);
   $36 = ((($35)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = ((($35)) + -2|0);
   $39 = HEAP8[$38>>0]|0;
   $$sink33 = 3;$$sroa$0$0$in = $35;$$sroa$12$1 = $39;$$sroa$14$1 = $$sroa$14$032;$$sroa$9$1 = $37;$60 = $31;
   break;
  }
  case 1:  {
   $40 = ($17<<24>>24)<(0);
   $41 = HEAP32[$1>>2]|0;
   $42 = $40 ? $41 : $1;
   $43 = (($42) + ($21)|0);
   $44 = ((($43)) + 2|0);
   $45 = ((($44)) + -1|0);
   $46 = ((($45)) + -1|0);
   $47 = HEAP8[$46>>0]|0;
   $$sink33 = 2;$$sroa$0$0$in = $45;$$sroa$12$1 = $$sroa$12$030;$$sroa$14$1 = $$sroa$14$032;$$sroa$9$1 = $47;$60 = $41;
   break;
  }
  default: {
   $48 = ($17<<24>>24)<(0);
   $49 = HEAP32[$1>>2]|0;
   $50 = $48 ? $49 : $1;
   $51 = (($50) + ($21)|0);
   $52 = ((($51)) + 1|0);
   $53 = ((($52)) + -1|0);
   $$sink33 = 1;$$sroa$0$0$in = $53;$$sroa$12$1 = $$sroa$12$030;$$sroa$14$1 = $$sroa$14$032;$$sroa$9$1 = $$sroa$9$031;$60 = $49;
  }
  }
  $54 = (($21) + ($$sink33))|0;
  $$sroa$0$0 = HEAP8[$$sroa$0$0$in>>0]|0;
  HEAP32[$2>>2] = $54;
  $55 = HEAP32[$0>>2]|0;
  $56 = ((($55)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($17<<24>>24)<(0);
  $59 = $58 ? $60 : $1;
  $61 = (($59) + ($54)|0);
  $$sroa$14$0$insert$ext = $$sroa$14$1&255;
  $$sroa$14$0$insert$shift = $$sroa$14$0$insert$ext << 24;
  $$sroa$12$0$insert$ext = $$sroa$12$1&255;
  $$sroa$12$0$insert$shift = $$sroa$12$0$insert$ext << 16;
  $$sroa$9$0$insert$ext = $$sroa$9$1&255;
  $$sroa$9$0$insert$shift = $$sroa$9$0$insert$ext << 8;
  $$sroa$0$0$insert$ext = $$sroa$0$0&255;
  $$sroa$12$0$insert$insert = $$sroa$9$0$insert$shift | $$sroa$12$0$insert$shift;
  $$sroa$9$0$insert$insert = $$sroa$12$0$insert$insert | $$sroa$14$0$insert$shift;
  $$sroa$0$0$insert$insert = $$sroa$9$0$insert$insert | $$sroa$0$0$insert$ext;
  FUNCTION_TABLE_viii[$57 & 127]($0,$61,$$sroa$0$0$insert$insert);
  $62 = HEAP32[$2>>2]|0;
  $63 = (($62) + ($$sroa$0$0$insert$insert))|0;
  HEAP32[$2>>2] = $63;
  $64 = HEAP8[$5>>0]|0;
  $65 = ($64<<24>>24)<(0);
  $66 = HEAP32[$8>>2]|0;
  $67 = $64&255;
  $68 = $65 ? $66 : $67;
  $69 = (($68) - ($63))|0;
  $70 = ($69|0)>(4);
  if ($70) {
   $$sroa$12$030 = $$sroa$12$1;$$sroa$14$032 = $$sroa$14$1;$$sroa$9$031 = $$sroa$9$1;$17 = $64;$21 = $63;
  } else {
   break;
  }
 }
 return;
}
function __ZNSt3__25dequeI11VideoPacketNS_9allocatorIS1_EEE19__add_back_capacityEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$115 = 0, $$in$i = 0, $$in$i26 = 0, $$pre$i = 0, $$pre$i28 = 0, $$pre47$i = 0, $$pre47$i21 = 0, $$pre48$i = 0, $$pre48$i33 = 0, $$sroa$13$0$i = 0, $$sroa$13$0$i25 = 0, $$sroa$13$1$i = 0, $$sroa$13$1$i30 = 0, $$sroa$speculated = 0, $$sroa$speculated$i = 0, $$sroa$speculated$i23 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i16 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(203);
 if ($7) {
  $8 = (($6) + -204)|0;
  HEAP32[$5>>2] = $8;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($10)) + 4|0);
  HEAP32[$9>>2] = $12;
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)==($16|0);
  $18 = $16;
  $19 = $14;
  do {
   if ($17) {
    $20 = HEAP32[$0>>2]|0;
    $21 = ($12>>>0)>($20>>>0);
    $22 = $20;
    if ($21) {
     $23 = $12;
     $24 = (($23) - ($22))|0;
     $25 = $24 >> 2;
     $26 = (($25) + 1)|0;
     $27 = (($26|0) / -2)&-1;
     $28 = (($12) + ($27<<2)|0);
     $29 = (($19) - ($23))|0;
     $30 = $29 >> 2;
     $31 = ($30|0)==(0);
     if ($31) {
      $34 = $12;
     } else {
      _memmove(($28|0),($12|0),($29|0))|0;
      $$pre47$i = HEAP32[$9>>2]|0;
      $34 = $$pre47$i;
     }
     $32 = (($28) + ($30<<2)|0);
     HEAP32[$13>>2] = $32;
     $33 = (($34) + ($27<<2)|0);
     HEAP32[$9>>2] = $33;
     $63 = $32;
     break;
    }
    $35 = (($18) - ($22))|0;
    $36 = $35 >> 1;
    $37 = ($36|0)==(0);
    $$sroa$speculated$i = $37 ? 1 : $36;
    $38 = ($$sroa$speculated$i>>>0)>(1073741823);
    if ($38) {
     $39 = (___cxa_allocate_exception(8)|0);
     __THREW__ = 0;
     invoke_vii(101,($39|0),(44249|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $42 = ___cxa_find_matching_catch_2()|0;
      $43 = tempRet0;
      ___cxa_free_exception(($39|0));
      ___resumeException($42|0);
      // unreachable;
     } else {
      HEAP32[$39>>2] = (37676);
      ___cxa_throw(($39|0),(392|0),(28|0));
      // unreachable;
     }
    }
    $44 = $$sroa$speculated$i >>> 2;
    $45 = $$sroa$speculated$i << 2;
    $46 = (__Znwj($45)|0);
    $47 = $46;
    $48 = (($46) + ($44<<2)|0);
    $49 = $48;
    $50 = (($46) + ($$sroa$speculated$i<<2)|0);
    $51 = $50;
    $52 = ($12|0)==($14|0);
    if ($52) {
     $$sroa$13$1$i = $49;$61 = $20;
    } else {
     $$in$i = $48;$$sroa$13$0$i = $49;$54 = $12;
     while(1) {
      $53 = HEAP32[$54>>2]|0;
      HEAP32[$$in$i>>2] = $53;
      $55 = $$sroa$13$0$i;
      $56 = ((($55)) + 4|0);
      $57 = $56;
      $58 = ((($54)) + 4|0);
      $59 = ($58|0)==($14|0);
      if ($59) {
       break;
      } else {
       $$in$i = $56;$$sroa$13$0$i = $57;$54 = $58;
      }
     }
     $$pre$i = HEAP32[$0>>2]|0;
     $$sroa$13$1$i = $57;$61 = $$pre$i;
    }
    HEAP32[$0>>2] = $47;
    HEAP32[$9>>2] = $49;
    HEAP32[$13>>2] = $$sroa$13$1$i;
    HEAP32[$15>>2] = $51;
    $60 = ($61|0)==(0|0);
    $62 = $$sroa$13$1$i;
    if ($60) {
     $63 = $62;
    } else {
     __ZdlPv($61);
     $$pre48$i = HEAP32[$13>>2]|0;
     $63 = $$pre48$i;
    }
   } else {
    $63 = $14;
   }
  } while(0);
  HEAP32[$63>>2] = $11;
  $64 = HEAP32[$13>>2]|0;
  $65 = ((($64)) + 4|0);
  HEAP32[$13>>2] = $65;
  STACKTOP = sp;return;
 }
 $66 = ((($0)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($0)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($67) - ($69))|0;
 $71 = ((($0)) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[$0>>2]|0;
 $74 = (($72) - ($73))|0;
 $75 = ($70>>>0)<($74>>>0);
 if ($75) {
  $76 = ($72|0)==($67|0);
  if (!($76)) {
   $77 = (__Znwj(4080)|0);
   HEAP32[$1>>2] = $77;
   __ZNSt3__214__split_bufferIP11VideoPacketNS_9allocatorIS2_EEE9push_backEOS2_($0,$1);
   STACKTOP = sp;return;
  }
  $78 = (__Znwj(4080)|0);
  HEAP32[$2>>2] = $78;
  __ZNSt3__214__split_bufferIP11VideoPacketNS_9allocatorIS2_EEE10push_frontEOS2_($0,$2);
  $79 = HEAP32[$68>>2]|0;
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($79)) + 4|0);
  HEAP32[$68>>2] = $81;
  $82 = HEAP32[$66>>2]|0;
  $83 = HEAP32[$71>>2]|0;
  $84 = ($82|0)==($83|0);
  $85 = $83;
  $86 = $82;
  do {
   if ($84) {
    $87 = HEAP32[$0>>2]|0;
    $88 = ($81>>>0)>($87>>>0);
    $89 = $87;
    if ($88) {
     $90 = $81;
     $91 = (($90) - ($89))|0;
     $92 = $91 >> 2;
     $93 = (($92) + 1)|0;
     $94 = (($93|0) / -2)&-1;
     $95 = (($81) + ($94<<2)|0);
     $96 = (($86) - ($90))|0;
     $97 = $96 >> 2;
     $98 = ($97|0)==(0);
     if ($98) {
      $101 = $81;
     } else {
      _memmove(($95|0),($81|0),($96|0))|0;
      $$pre47$i21 = HEAP32[$68>>2]|0;
      $101 = $$pre47$i21;
     }
     $99 = (($95) + ($97<<2)|0);
     HEAP32[$66>>2] = $99;
     $100 = (($101) + ($94<<2)|0);
     HEAP32[$68>>2] = $100;
     $130 = $99;
     break;
    }
    $102 = (($85) - ($89))|0;
    $103 = $102 >> 1;
    $104 = ($103|0)==(0);
    $$sroa$speculated$i23 = $104 ? 1 : $103;
    $105 = ($$sroa$speculated$i23>>>0)>(1073741823);
    if ($105) {
     $106 = (___cxa_allocate_exception(8)|0);
     __THREW__ = 0;
     invoke_vii(101,($106|0),(44249|0));
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      $109 = ___cxa_find_matching_catch_2()|0;
      $110 = tempRet0;
      ___cxa_free_exception(($106|0));
      ___resumeException($109|0);
      // unreachable;
     } else {
      HEAP32[$106>>2] = (37676);
      ___cxa_throw(($106|0),(392|0),(28|0));
      // unreachable;
     }
    }
    $111 = $$sroa$speculated$i23 >>> 2;
    $112 = $$sroa$speculated$i23 << 2;
    $113 = (__Znwj($112)|0);
    $114 = $113;
    $115 = (($113) + ($111<<2)|0);
    $116 = $115;
    $117 = (($113) + ($$sroa$speculated$i23<<2)|0);
    $118 = $117;
    $119 = ($81|0)==($82|0);
    if ($119) {
     $$sroa$13$1$i30 = $116;$128 = $87;
    } else {
     $$in$i26 = $115;$$sroa$13$0$i25 = $116;$121 = $81;
     while(1) {
      $120 = HEAP32[$121>>2]|0;
      HEAP32[$$in$i26>>2] = $120;
      $122 = $$sroa$13$0$i25;
      $123 = ((($122)) + 4|0);
      $124 = $123;
      $125 = ((($121)) + 4|0);
      $126 = ($125|0)==($82|0);
      if ($126) {
       break;
      } else {
       $$in$i26 = $123;$$sroa$13$0$i25 = $124;$121 = $125;
      }
     }
     $$pre$i28 = HEAP32[$0>>2]|0;
     $$sroa$13$1$i30 = $124;$128 = $$pre$i28;
    }
    HEAP32[$0>>2] = $114;
    HEAP32[$68>>2] = $116;
    HEAP32[$66>>2] = $$sroa$13$1$i30;
    HEAP32[$71>>2] = $118;
    $127 = ($128|0)==(0|0);
    $129 = $$sroa$13$1$i30;
    if ($127) {
     $130 = $129;
    } else {
     __ZdlPv($128);
     $$pre48$i33 = HEAP32[$66>>2]|0;
     $130 = $$pre48$i33;
    }
   } else {
    $130 = $82;
   }
  } while(0);
  HEAP32[$130>>2] = $80;
  $131 = HEAP32[$66>>2]|0;
  $132 = ((($131)) + 4|0);
  HEAP32[$66>>2] = $132;
  STACKTOP = sp;return;
 }
 $133 = $74 >> 1;
 $134 = ($133|0)==(0);
 $$sroa$speculated = $134 ? 1 : $133;
 $135 = ((($0)) + 12|0);
 $136 = ((($3)) + 12|0);
 HEAP32[$136>>2] = 0;
 $137 = ((($3)) + 16|0);
 HEAP32[$137>>2] = $135;
 $138 = ($$sroa$speculated>>>0)>(1073741823);
 if ($138) {
  $139 = (___cxa_allocate_exception(8)|0);
  __THREW__ = 0;
  invoke_vii(101,($139|0),(44249|0));
  $140 = __THREW__; __THREW__ = 0;
  $141 = $140&1;
  if ($141) {
   $142 = ___cxa_find_matching_catch_2()|0;
   $143 = tempRet0;
   ___cxa_free_exception(($139|0));
   ___resumeException($142|0);
   // unreachable;
  } else {
   HEAP32[$139>>2] = (37676);
   ___cxa_throw(($139|0),(392|0),(28|0));
   // unreachable;
  }
 }
 $144 = $70 >> 2;
 $145 = $$sroa$speculated << 2;
 $146 = (__Znwj($145)|0);
 HEAP32[$3>>2] = $146;
 $147 = (($146) + ($144<<2)|0);
 $148 = ((($3)) + 8|0);
 HEAP32[$148>>2] = $147;
 $149 = ((($3)) + 4|0);
 HEAP32[$149>>2] = $147;
 $150 = (($146) + ($$sroa$speculated<<2)|0);
 $151 = ((($3)) + 12|0);
 HEAP32[$151>>2] = $150;
 __THREW__ = 0;
 $152 = (invoke_ii(78,4080)|0);
 $153 = __THREW__; __THREW__ = 0;
 $154 = $153&1;
 do {
  if ($154) {
   $176 = ___cxa_find_matching_catch_2()|0;
   $177 = tempRet0;
   $$1 = $177;$$115 = $176;
  } else {
   HEAP32[$4>>2] = $152;
   __THREW__ = 0;
   invoke_vii(102,($3|0),($4|0));
   $155 = __THREW__; __THREW__ = 0;
   $156 = $155&1;
   if ($156) {
    $183 = ___cxa_find_matching_catch_2()|0;
    $184 = tempRet0;
    __ZdlPv($152);
    $$1 = $184;$$115 = $183;
    break;
   }
   $157 = HEAP32[$66>>2]|0;
   $$0 = $157;
   while(1) {
    $158 = HEAP32[$68>>2]|0;
    $159 = ($$0|0)==($158|0);
    if ($159) {
     break;
    }
    $178 = ((($$0)) + -4|0);
    __THREW__ = 0;
    invoke_vii(103,($3|0),($178|0));
    $179 = __THREW__; __THREW__ = 0;
    $180 = $179&1;
    if ($180) {
     label = 50;
     break;
    } else {
     $$0 = $178;
    }
   }
   if ((label|0) == 50) {
    $181 = ___cxa_find_matching_catch_2()|0;
    $182 = tempRet0;
    $$1 = $182;$$115 = $181;
    break;
   }
   $160 = $158;
   $161 = HEAP32[$0>>2]|0;
   $162 = HEAP32[$3>>2]|0;
   HEAP32[$0>>2] = $162;
   HEAP32[$3>>2] = $161;
   $163 = HEAP32[$149>>2]|0;
   HEAP32[$68>>2] = $163;
   HEAP32[$149>>2] = $160;
   $164 = HEAP32[$66>>2]|0;
   $165 = HEAP32[$148>>2]|0;
   HEAP32[$66>>2] = $165;
   HEAP32[$148>>2] = $164;
   $166 = HEAP32[$71>>2]|0;
   $167 = HEAP32[$151>>2]|0;
   HEAP32[$71>>2] = $167;
   HEAP32[$151>>2] = $166;
   $168 = $164;
   $169 = ($168|0)==($$0|0);
   if (!($169)) {
    $scevgep$i$i$i$i16 = ((($168)) + -4|0);
    $170 = $scevgep$i$i$i$i16;
    $171 = (($170) - ($160))|0;
    $172 = $171 >>> 2;
    $173 = $172 ^ -1;
    $scevgep4$i$i$i$i17 = (($168) + ($173<<2)|0);
    HEAP32[$148>>2] = $scevgep4$i$i$i$i17;
   }
   $174 = ($161|0)==(0);
   if (!($174)) {
    $175 = $161;
    __ZdlPv($175);
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $185 = HEAP32[$149>>2]|0;
 $186 = HEAP32[$148>>2]|0;
 $187 = ($186|0)==($185|0);
 if (!($187)) {
  $scevgep$i$i$i$i = ((($186)) + -4|0);
  $188 = $scevgep$i$i$i$i;
  $189 = $185;
  $190 = (($188) - ($189))|0;
  $191 = $190 >>> 2;
  $192 = $191 ^ -1;
  $scevgep4$i$i$i$i = (($186) + ($192<<2)|0);
  HEAP32[$148>>2] = $scevgep4$i$i$i$i;
 }
 $193 = HEAP32[$3>>2]|0;
 $194 = ($193|0)==(0|0);
 if ($194) {
  ___resumeException($$115|0);
  // unreachable;
 }
 __ZdlPv($193);
 ___resumeException($$115|0);
 // unreachable;
}
function __ZNSt3__214__split_bufferIP11VideoPacketNS_9allocatorIS2_EEE9push_backEOS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 $7 = $5;
 $8 = $3;
 do {
  if ($6) {
   $9 = ((($0)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = ($10>>>0)>($11>>>0);
   $13 = $11;
   if ($12) {
    $14 = $10;
    $15 = (($14) - ($13))|0;
    $16 = $15 >> 2;
    $17 = (($16) + 1)|0;
    $18 = (($17|0) / -2)&-1;
    $19 = (($10) + ($18<<2)|0);
    $20 = (($8) - ($14))|0;
    $21 = $20 >> 2;
    $22 = ($21|0)==(0);
    if ($22) {
     $25 = $10;
    } else {
     _memmove(($19|0),($10|0),($20|0))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $25 = $$pre47;
    }
    $23 = (($19) + ($21<<2)|0);
    HEAP32[$2>>2] = $23;
    $24 = (($25) + ($18<<2)|0);
    HEAP32[$9>>2] = $24;
    $55 = $23;
    break;
   }
   $26 = (($7) - ($13))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(101,($30|0),(44249|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (37676);
     ___cxa_throw(($30|0),(392|0),(28|0));
     // unreachable;
    }
   }
   $35 = $$sroa$speculated >>> 2;
   $36 = $$sroa$speculated << 2;
   $37 = (__Znwj($36)|0);
   $38 = $37;
   $39 = (($37) + ($35<<2)|0);
   $40 = $39;
   $41 = (($37) + ($$sroa$speculated<<2)|0);
   $42 = $41;
   $43 = ($10|0)==($3|0);
   if ($43) {
    $$sroa$13$1 = $40;$52 = $11;
   } else {
    $$in = $39;$$sroa$13$0 = $40;$45 = $10;
    while(1) {
     $44 = HEAP32[$45>>2]|0;
     HEAP32[$$in>>2] = $44;
     $46 = $$sroa$13$0;
     $47 = ((($46)) + 4|0);
     $48 = $47;
     $49 = ((($45)) + 4|0);
     $50 = ($49|0)==($3|0);
     if ($50) {
      break;
     } else {
      $$in = $47;$$sroa$13$0 = $48;$45 = $49;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $48;$52 = $$pre;
   }
   HEAP32[$0>>2] = $38;
   HEAP32[$9>>2] = $40;
   HEAP32[$2>>2] = $$sroa$13$1;
   HEAP32[$4>>2] = $42;
   $51 = ($52|0)==(0|0);
   $53 = $$sroa$13$1;
   if ($51) {
    $55 = $53;
   } else {
    __ZdlPv($52);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = HEAP32[$1>>2]|0;
 HEAP32[$55>>2] = $54;
 $56 = HEAP32[$2>>2]|0;
 $57 = ((($56)) + 4|0);
 HEAP32[$2>>2] = $57;
 return;
}
function __ZNSt3__214__split_bufferIP11VideoPacketNS_9allocatorIS2_EEE10push_frontEOS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$cast = 0, $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)==($4|0);
 $6 = $4;
 do {
  if ($5) {
   $7 = ((($0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8>>>0)<($10>>>0);
   $$cast = $10;
   if ($11) {
    $12 = $8;
    $13 = (($$cast) - ($12))|0;
    $14 = $13 >> 2;
    $15 = (($14) + 1)|0;
    $16 = (($15|0) / 2)&-1;
    $17 = (($8) + ($16<<2)|0);
    $18 = $3;
    $19 = (($12) - ($18))|0;
    $20 = $19 >> 2;
    $21 = ($20|0)==(0);
    $22 = (0 - ($20))|0;
    $23 = (($17) + ($22<<2)|0);
    if ($21) {
     $$0$i$i = $17;$25 = $8;
    } else {
     _memmove(($23|0),($3|0),($19|0))|0;
     $$pre47 = HEAP32[$7>>2]|0;
     $$0$i$i = $23;$25 = $$pre47;
    }
    HEAP32[$2>>2] = $$0$i$i;
    $24 = (($25) + ($16<<2)|0);
    HEAP32[$7>>2] = $24;
    $55 = $$0$i$i;
    break;
   }
   $26 = (($$cast) - ($6))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(101,($30|0),(44249|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (37676);
     ___cxa_throw(($30|0),(392|0),(28|0));
     // unreachable;
    }
   }
   $35 = (($$sroa$speculated) + 3)|0;
   $36 = $35 >>> 2;
   $37 = $$sroa$speculated << 2;
   $38 = (__Znwj($37)|0);
   $39 = $38;
   $40 = (($38) + ($36<<2)|0);
   $41 = $40;
   $42 = (($38) + ($$sroa$speculated<<2)|0);
   $43 = $42;
   $44 = ($3|0)==($8|0);
   if ($44) {
    $$sroa$13$1 = $41;$53 = $3;
   } else {
    $$in = $40;$$sroa$13$0 = $41;$46 = $3;
    while(1) {
     $45 = HEAP32[$46>>2]|0;
     HEAP32[$$in>>2] = $45;
     $47 = $$sroa$13$0;
     $48 = ((($47)) + 4|0);
     $49 = $48;
     $50 = ((($46)) + 4|0);
     $51 = ($50|0)==($8|0);
     if ($51) {
      break;
     } else {
      $$in = $48;$$sroa$13$0 = $49;$46 = $50;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $49;$53 = $$pre;
   }
   HEAP32[$0>>2] = $39;
   HEAP32[$2>>2] = $41;
   HEAP32[$7>>2] = $$sroa$13$1;
   HEAP32[$9>>2] = $43;
   $52 = ($53|0)==(0|0);
   if ($52) {
    $55 = $40;
   } else {
    __ZdlPv($53);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = ((($55)) + -4|0);
 $56 = HEAP32[$1>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = HEAP32[$2>>2]|0;
 $58 = ((($57)) + -4|0);
 HEAP32[$2>>2] = $58;
 return;
}
function __ZNSt3__214__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEE9push_backEOS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 $7 = $5;
 $8 = $3;
 do {
  if ($6) {
   $9 = ((($0)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = ($10>>>0)>($11>>>0);
   $13 = $11;
   if ($12) {
    $14 = $10;
    $15 = (($14) - ($13))|0;
    $16 = $15 >> 2;
    $17 = (($16) + 1)|0;
    $18 = (($17|0) / -2)&-1;
    $19 = (($10) + ($18<<2)|0);
    $20 = (($8) - ($14))|0;
    $21 = $20 >> 2;
    $22 = ($21|0)==(0);
    if ($22) {
     $25 = $10;
    } else {
     _memmove(($19|0),($10|0),($20|0))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $25 = $$pre47;
    }
    $23 = (($19) + ($21<<2)|0);
    HEAP32[$2>>2] = $23;
    $24 = (($25) + ($18<<2)|0);
    HEAP32[$9>>2] = $24;
    $55 = $23;
    break;
   }
   $26 = (($7) - ($13))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(101,($30|0),(44249|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (37676);
     ___cxa_throw(($30|0),(392|0),(28|0));
     // unreachable;
    }
   }
   $35 = $$sroa$speculated >>> 2;
   $36 = $$sroa$speculated << 2;
   $37 = (__Znwj($36)|0);
   $38 = $37;
   $39 = (($37) + ($35<<2)|0);
   $40 = $39;
   $41 = (($37) + ($$sroa$speculated<<2)|0);
   $42 = $41;
   $43 = ($10|0)==($3|0);
   if ($43) {
    $$sroa$13$1 = $40;$52 = $11;
   } else {
    $$in = $39;$$sroa$13$0 = $40;$45 = $10;
    while(1) {
     $44 = HEAP32[$45>>2]|0;
     HEAP32[$$in>>2] = $44;
     $46 = $$sroa$13$0;
     $47 = ((($46)) + 4|0);
     $48 = $47;
     $49 = ((($45)) + 4|0);
     $50 = ($49|0)==($3|0);
     if ($50) {
      break;
     } else {
      $$in = $47;$$sroa$13$0 = $48;$45 = $49;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $48;$52 = $$pre;
   }
   HEAP32[$0>>2] = $38;
   HEAP32[$9>>2] = $40;
   HEAP32[$2>>2] = $$sroa$13$1;
   HEAP32[$4>>2] = $42;
   $51 = ($52|0)==(0|0);
   $53 = $$sroa$13$1;
   if ($51) {
    $55 = $53;
   } else {
    __ZdlPv($52);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = HEAP32[$1>>2]|0;
 HEAP32[$55>>2] = $54;
 $56 = HEAP32[$2>>2]|0;
 $57 = ((($56)) + 4|0);
 HEAP32[$2>>2] = $57;
 return;
}
function __ZNSt3__214__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEE10push_frontERKS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$cast = 0, $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)==($4|0);
 $6 = $4;
 do {
  if ($5) {
   $7 = ((($0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8>>>0)<($10>>>0);
   $$cast = $10;
   if ($11) {
    $12 = $8;
    $13 = (($$cast) - ($12))|0;
    $14 = $13 >> 2;
    $15 = (($14) + 1)|0;
    $16 = (($15|0) / 2)&-1;
    $17 = (($8) + ($16<<2)|0);
    $18 = $3;
    $19 = (($12) - ($18))|0;
    $20 = $19 >> 2;
    $21 = ($20|0)==(0);
    $22 = (0 - ($20))|0;
    $23 = (($17) + ($22<<2)|0);
    if ($21) {
     $$0$i$i = $17;$25 = $8;
    } else {
     _memmove(($23|0),($3|0),($19|0))|0;
     $$pre47 = HEAP32[$7>>2]|0;
     $$0$i$i = $23;$25 = $$pre47;
    }
    HEAP32[$2>>2] = $$0$i$i;
    $24 = (($25) + ($16<<2)|0);
    HEAP32[$7>>2] = $24;
    $55 = $$0$i$i;
    break;
   }
   $26 = (($$cast) - ($6))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(101,($30|0),(44249|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (37676);
     ___cxa_throw(($30|0),(392|0),(28|0));
     // unreachable;
    }
   }
   $35 = (($$sroa$speculated) + 3)|0;
   $36 = $35 >>> 2;
   $37 = $$sroa$speculated << 2;
   $38 = (__Znwj($37)|0);
   $39 = $38;
   $40 = (($38) + ($36<<2)|0);
   $41 = $40;
   $42 = (($38) + ($$sroa$speculated<<2)|0);
   $43 = $42;
   $44 = ($3|0)==($8|0);
   if ($44) {
    $$sroa$13$1 = $41;$53 = $3;
   } else {
    $$in = $40;$$sroa$13$0 = $41;$46 = $3;
    while(1) {
     $45 = HEAP32[$46>>2]|0;
     HEAP32[$$in>>2] = $45;
     $47 = $$sroa$13$0;
     $48 = ((($47)) + 4|0);
     $49 = $48;
     $50 = ((($46)) + 4|0);
     $51 = ($50|0)==($8|0);
     if ($51) {
      break;
     } else {
      $$in = $48;$$sroa$13$0 = $49;$46 = $50;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $49;$53 = $$pre;
   }
   HEAP32[$0>>2] = $39;
   HEAP32[$2>>2] = $41;
   HEAP32[$7>>2] = $$sroa$13$1;
   HEAP32[$9>>2] = $43;
   $52 = ($53|0)==(0|0);
   if ($52) {
    $55 = $40;
   } else {
    __ZdlPv($53);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = ((($55)) + -4|0);
 $56 = HEAP32[$1>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = HEAP32[$2>>2]|0;
 $58 = ((($57)) + -4|0);
 HEAP32[$2>>2] = $58;
 return;
}
function __ZN12AudioDecoder9decodeMP3ER12MemoryStreamPhS2_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$i = 0, $$$i$us$us = 0, $$$i53$us = 0, $$$op$i = 0, $$$op$i$us$us = 0, $$$op$i54$us = 0, $$042$ph$us87 = 0, $$043$ph$us86 = 0, $$04382 = 0, $$044$ph$us85 = 0, $$04481 = 0, $$04772 = 0, $$05071 = 0, $$148$lcssa = 0, $$148$ph$us84 = 0, $$14880 = 0, $$2 = 0, $$pn = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 $5 = ((($0)) + 22668|0);
 $6 = ((($5)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 if ($8) {
  $9 = ((($0)) + 22672|0);
  $10 = HEAP32[$9>>2]|0;
  $22 = $10;
 } else {
  $11 = $7&255;
  $22 = $11;
 }
 $12 = ((($1)) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 $15 = ((($1)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $13&255;
 $18 = $14 ? $16 : $17;
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($22) - ($20))|0;
 $23 = (($21) + ($18))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($5,$23,0);
 $24 = HEAP8[$6>>0]|0;
 $25 = ($24<<24>>24)<(0);
 if ($25) {
  $26 = HEAP32[$5>>2]|0;
  $28 = $26;
 } else {
  $28 = $5;
 }
 $27 = (($28) + ($22)|0);
 $29 = HEAP8[$12>>0]|0;
 $30 = ($29<<24>>24)<(0);
 $31 = HEAP32[$1>>2]|0;
 $32 = $30 ? $31 : $1;
 $33 = HEAP32[$19>>2]|0;
 $34 = (($32) + ($33)|0);
 $35 = HEAP32[$15>>2]|0;
 $36 = $29&255;
 $37 = $30 ? $35 : $36;
 $38 = (($37) - ($33))|0;
 _memcpy(($27|0),($34|0),($38|0))|0;
 $39 = (__ZN10MP3Decoder6decodeEv($4)|0);
 $40 = ($39|0)==(-1);
 if ($40) {
  $$2 = 0;
  return ($$2|0);
 }
 $41 = ((($0)) + 13448|0);
 $42 = ((($0)) + 13450|0);
 $43 = ((($0)) + 13452|0);
 $44 = ((($0)) + 18060|0);
 $$04772 = $2;$$05071 = 0;
 while(1) {
  $45 = HEAP16[$41>>1]|0;
  $46 = $45&65535;
  $47 = HEAP16[$42>>1]|0;
  $48 = $47&65535;
  $49 = $46 << 1;
  $50 = Math_imul($49, $48)|0;
  $51 = (($50) + ($$05071))|0;
  $52 = ($45<<16>>16)==(2);
  if ($52) {
   $55 = $48 << 2;
   $56 = ($47<<16>>16)==(0);
   if ($56) {
    $$pn = $55;
   } else {
    $$042$ph$us87 = $44;$$043$ph$us86 = $43;$$044$ph$us85 = $48;$$148$ph$us84 = $$04772;
    while(1) {
     $57 = (($$044$ph$us85) + -1)|0;
     $58 = ((($$043$ph$us86)) + 4|0);
     $59 = HEAP32[$$043$ph$us86>>2]|0;
     $60 = (($59) + 4096)|0;
     $61 = ($60|0)>(268435455);
     $62 = ($60|0)>(-268435456);
     $$$i$us$us = $62 ? $60 : -268435456;
     $$$op$i$us$us = $$$i$us$us >> 13;
     $63 = $61 ? 32767 : $$$op$i$us$us;
     $64 = $63&255;
     $65 = ((($$148$ph$us84)) + 1|0);
     HEAP8[$$148$ph$us84>>0] = $64;
     $66 = $63 >>> 8;
     $67 = $66&255;
     $68 = ((($$148$ph$us84)) + 2|0);
     HEAP8[$65>>0] = $67;
     $69 = ((($$042$ph$us87)) + 4|0);
     $70 = HEAP32[$$042$ph$us87>>2]|0;
     $71 = (($70) + 4096)|0;
     $72 = ($71|0)>(268435455);
     $73 = ($71|0)>(-268435456);
     $$$i53$us = $73 ? $71 : -268435456;
     $$$op$i54$us = $$$i53$us >> 13;
     $74 = $72 ? 32767 : $$$op$i54$us;
     $75 = $74&255;
     $76 = ((($$148$ph$us84)) + 3|0);
     HEAP8[$68>>0] = $75;
     $77 = $74 >>> 8;
     $78 = $77&255;
     $79 = ((($$148$ph$us84)) + 4|0);
     HEAP8[$76>>0] = $78;
     $80 = ($57|0)==(0);
     if ($80) {
      $$pn = $55;
      break;
     } else {
      $$042$ph$us87 = $69;$$043$ph$us86 = $58;$$044$ph$us85 = $57;$$148$ph$us84 = $79;
     }
    }
   }
  } else {
   $53 = $48 << 1;
   $54 = ($47<<16>>16)==(0);
   if ($54) {
    $$pn = $53;
   } else {
    $$04382 = $43;$$04481 = $48;$$14880 = $$04772;
    while(1) {
     $81 = (($$04481) + -1)|0;
     $82 = ((($$04382)) + 4|0);
     $83 = HEAP32[$$04382>>2]|0;
     $84 = (($83) + 4096)|0;
     $85 = ($84|0)>(268435455);
     $86 = ($84|0)>(-268435456);
     $$$i = $86 ? $84 : -268435456;
     $$$op$i = $$$i >> 13;
     $87 = $85 ? 32767 : $$$op$i;
     $88 = $87&255;
     $89 = ((($$14880)) + 1|0);
     HEAP8[$$14880>>0] = $88;
     $90 = $87 >>> 8;
     $91 = $90&255;
     $92 = ((($$14880)) + 2|0);
     HEAP8[$89>>0] = $91;
     $93 = ($81|0)==(0);
     if ($93) {
      $$pn = $53;
      break;
     } else {
      $$04382 = $82;$$04481 = $81;$$14880 = $92;
     }
    }
   }
  }
  $$148$lcssa = (($$04772) + ($$pn)|0);
  $94 = ($$148$lcssa>>>0)<($3>>>0);
  if (!($94)) {
   $$2 = $51;
   label = 16;
   break;
  }
  $95 = (__ZN10MP3Decoder6decodeEv($4)|0);
  $96 = ($95|0)==(-1);
  if ($96) {
   $$2 = $51;
   label = 16;
   break;
  } else {
   $$04772 = $$148$lcssa;$$05071 = $51;
  }
 }
 if ((label|0) == 16) {
  return ($$2|0);
 }
 return (0)|0;
}
function __ZN10MP3Decoder6decodeEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$1 = 0, $$pn = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre58 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$$i = 0, $or$cond = 0, $tmpcast$i$byval_copy = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $tmpcast$i$byval_copy = sp + 296|0;
 $1 = sp + 288|0;
 $2 = sp;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = ((($0)) + 22656|0);
 $9 = ((($8)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 if ($11) {
  $12 = HEAP32[$8>>2]|0;
  $16 = $12;
 } else {
  $16 = $8;
 }
 $13 = ((($0)) + 22668|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($16) + ($14)|0);
 $17 = (__ZN10MP3Decoder12decodeHeaderEPKh($0,$15)|0);
 $18 = ($17|0)==(-1);
 if ($18) {
  $$1 = -1;
  STACKTOP = sp;return ($$1|0);
 }
 $19 = HEAP32[$13>>2]|0;
 $20 = (($19) + ($17))|0;
 HEAP32[$13>>2] = $20;
 $21 = HEAP8[$9>>0]|0;
 $22 = ($21<<24>>24)<(0);
 if ($22) {
  $23 = ((($0)) + 22660|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 } else {
  $25 = $21&255;
  $27 = $25;
 }
 $26 = ($27|0)==($20|0);
 if ($26) {
  HEAP32[$13>>2] = $19;
  $$1 = -1;
  STACKTOP = sp;return ($$1|0);
 }
 $28 = ((($0)) + 9328|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = (_calloc(1152,4)|0);
  HEAP32[$28>>2] = $31;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $33 = ((($0)) + 60|0);
   HEAP32[$33>>2] = 49;
   $$pre = ((($0)) + 68|0);
   $$pre58 = ((($0)) + 92|0);
   $$pre$phi59Z2D = $$pre58;$$pre$phiZ2D = $$pre;
  } else {
   label = 13;
  }
 } else {
  label = 13;
 }
 if ((label|0) == 13) {
  $34 = ((($0)) + 68|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($0)) + 92|0);
  $37 = HEAP32[$36>>2]|0;
  $not$$i = ($35|0)==(0);
  $38 = $37 & 16;
  $39 = ($38|0)==(0);
  if ($39) {
   $$pre$phi59Z2D = $36;$$pre$phiZ2D = $34;
  } else {
   $40 = $37 & 4096;
   $41 = ($40|0)!=(0);
   $42 = $not$$i ? 72 : 136;
   $43 = $not$$i ? 136 : 256;
   $44 = $41 ? $42 : $43;
   $45 = ((($0)) + 28|0);
   $46 = $45;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 4)|0;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = $2;
   $53 = $52;
   HEAP32[$53>>2] = $48;
   $54 = (($52) + 4)|0;
   $55 = $54;
   HEAP32[$55>>2] = $51;
   $56 = ((($0)) + 88|0);
   $57 = HEAP16[$56>>1]|0;
   ;HEAP32[$tmpcast$i$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$tmpcast$i$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
   $58 = (_mad_bit_crc($tmpcast$i$byval_copy,$44,$57)|0);
   HEAP16[$56>>1] = $58;
   $59 = ((($0)) + 90|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = ($58<<16>>16)==($60<<16>>16);
   if ($61) {
    $$pre$phi59Z2D = $36;$$pre$phiZ2D = $34;
   } else {
    $62 = ((($0)) + 108|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 1;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = ((($0)) + 60|0);
     HEAP32[$66>>2] = 513;
     $$pre$phi59Z2D = $36;$$pre$phiZ2D = $34;
    } else {
     $$pre$phi59Z2D = $36;$$pre$phiZ2D = $34;
    }
   }
  }
 }
 $67 = ((($0)) + 64|0);
 $68 = HEAP32[$$pre$phiZ2D>>2]|0;
 $69 = ($68|0)!=(0);
 $70 = $69 ? 2 : 1;
 $71 = ((($0)) + 28|0);
 $72 = HEAP32[$$pre$phi59Z2D>>2]|0;
 $73 = $72 & 4096;
 (_III_sideinfo($71,$70,$73,$3,$5,$4)|0);
 $74 = HEAP32[$4>>2]|0;
 $75 = HEAP32[$$pre$phi59Z2D>>2]|0;
 $76 = $75 | $74;
 HEAP32[$$pre$phi59Z2D>>2] = $76;
 $77 = ((($3)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($0)) + 96|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $80 | $78;
 HEAP32[$79>>2] = $81;
 $82 = (_mad_bit_nextbyte($71)|0);
 $83 = $82;
 $84 = $15;
 $85 = (($84) - ($83))|0;
 $86 = (($85) + ($17))|0;
 $87 = HEAP8[$9>>0]|0;
 $88 = ($87<<24>>24)<(0);
 if ($88) {
  $89 = HEAP32[$8>>2]|0;
  $92 = $89;
 } else {
  $92 = $8;
 }
 $90 = HEAP32[$13>>2]|0;
 $91 = (($92) + ($90)|0);
 _mad_bit_init($1,$91);
 $93 = (_mad_bit_read($1,32)|0);
 $94 = $93 & -1703936;
 $95 = ($94|0)==(-1966080);
 if ($95) {
  $96 = $93 & 65536;
  $97 = ($96|0)==(0);
  if ($97) {
   _mad_bit_skip($1,16);
  }
  $98 = $93 >>> 19;
  $99 = $98 & 1;
  $100 = $99 | 8;
  $101 = (_mad_bit_read($1,$100)|0);
  $$0$i = $101;
 } else {
  $$0$i = 0;
 }
 $102 = ((($0)) + 22672|0);
 $103 = ((($102)) + 11|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104<<24>>24)<(0);
 if ($105) {
  $106 = ((($0)) + 22676|0);
  $107 = HEAP32[$106>>2]|0;
  $112 = $107;
 } else {
  $108 = $104&255;
  $112 = $108;
 }
 $109 = ((($0)) + 22684|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (($112) - ($110))|0;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(104,($6|0),($86|0),0);
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $133 = ___cxa_find_matching_catch_2()|0;
  $134 = tempRet0;
  $135 = ((($6)) + 11|0);
  $136 = HEAP8[$135>>0]|0;
  $137 = ($136<<24>>24)<(0);
  if (!($137)) {
   ___resumeException($133|0);
   // unreachable;
  }
  $138 = HEAP32[$6>>2]|0;
  __ZdlPv($138);
  ___resumeException($133|0);
  // unreachable;
 }
 $115 = ((($6)) + 12|0);
 $116 = ((($6)) + 11|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = ($117<<24>>24)<(0);
 $119 = HEAP32[$6>>2]|0;
 $120 = $118 ? $119 : $6;
 $121 = HEAP32[$115>>2]|0;
 $122 = (($120) + ($121)|0);
 _memcpy(($122|0),($82|0),($86|0))|0;
 $123 = HEAP8[$116>>0]|0;
 $124 = ($123<<24>>24)<(0);
 $125 = HEAP32[$6>>2]|0;
 $126 = $124 ? $125 : $6;
 $127 = ((($6)) + 4|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $123&255;
 $130 = $124 ? $128 : $129;
 __THREW__ = 0;
 (invoke_iiii(90,($102|0),($126|0),($130|0))|0);
 $131 = __THREW__; __THREW__ = 0;
 $132 = $131&1;
 if ($132) {
  $167 = ___cxa_find_matching_catch_2()|0;
  $168 = tempRet0;
  $169 = HEAP8[$116>>0]|0;
  $170 = ($169<<24>>24)<(0);
  if (!($170)) {
   ___resumeException($167|0);
   // unreachable;
  }
  $171 = HEAP32[$6>>2]|0;
  __ZdlPv($171);
  ___resumeException($167|0);
  // unreachable;
 }
 $139 = HEAP8[$116>>0]|0;
 $140 = ($139<<24>>24)<(0);
 if ($140) {
  $141 = HEAP32[$6>>2]|0;
  __ZdlPv($141);
 }
 $142 = HEAP8[$9>>0]|0;
 $143 = ($142<<24>>24)<(0);
 if ($143) {
  $144 = ((($0)) + 22660|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = HEAP32[$13>>2]|0;
  $147 = (($145) - ($146))|0;
  $148 = HEAP32[$8>>2]|0;
  $153 = $148;$154 = $146;$155 = $147;
 } else {
  $149 = $142&255;
  $150 = HEAP32[$13>>2]|0;
  $151 = (($149) - ($150))|0;
  $153 = $8;$154 = $150;$155 = $151;
 }
 $152 = (($153) + ($154)|0);
 _memmove(($153|0),($152|0),($155|0))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($8,$155,0);
 HEAP32[$13>>2] = 0;
 $156 = HEAP8[$103>>0]|0;
 $157 = ($156<<24>>24)<(0);
 if ($157) {
  $158 = ((($0)) + 22676|0);
  $159 = HEAP32[$158>>2]|0;
  $163 = $159;
 } else {
  $160 = $156&255;
  $163 = $160;
 }
 $161 = HEAP32[$109>>2]|0;
 $162 = (($163) - ($161))|0;
 $164 = HEAP32[$3>>2]|0;
 $165 = ($111>>>0)<($164>>>0);
 $166 = ($162>>>0)<($$0$i>>>0);
 $or$cond = $165 | $166;
 if ($or$cond) {
  $$0 = -1;
 } else {
  $172 = (($111) - ($164))|0;
  HEAP32[$109>>2] = $172;
  $173 = (($162) - ($$0$i))|0;
  $174 = (($173) - ($172))|0;
  if ($157) {
   $175 = HEAP32[$102>>2]|0;
   $177 = $175;
  } else {
   $177 = $102;
  }
  $176 = (($177) + ($172)|0);
  _mad_bit_init($7,$176);
  (_III_decode($7,$67,$3,$70)|0);
  $178 = ((($0)) + 9332|0);
  _mad_synth_frame($178,$67);
  $179 = HEAP32[$109>>2]|0;
  $180 = (($174) + ($179))|0;
  HEAP32[$109>>2] = $180;
  $181 = HEAP8[$103>>0]|0;
  $182 = ($181<<24>>24)<(0);
  if ($182) {
   $183 = ((($0)) + 22676|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = HEAP32[$102>>2]|0;
   $$pn = $184;$189 = $185;
  } else {
   $186 = $181&255;
   $$pn = $186;$189 = $102;
  }
  $187 = (($$pn) - ($180))|0;
  $188 = (($189) + ($180)|0);
  _memmove(($189|0),($188|0),($187|0))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($102,$187,0);
  HEAP32[$109>>2] = 0;
  $$0 = 0;
 }
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function __ZN10MP3Decoder12decodeHeaderEPKh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$lobit = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre36 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, $phitmp34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 64|0);
 $3 = ((($0)) + 28|0);
 _mad_bit_init($3,$1);
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = $1;
 (_decode_header($2,$0)|0);
 $5 = ((($0)) + 100|0);
 $6 = HEAP32[$2>>2]|0;
 switch ($6|0) {
 case 1:  {
  $13 = 384;
  break;
 }
 case 3:  {
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 4096;
  $10 = ($9|0)!=(0);
  $phitmp = $10 ? 576 : 1152;
  $44 = $phitmp;
  label = 3;
  break;
 }
 default: {
  $44 = 1152;
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $13 = $44;
 }
 $11 = ((($0)) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 _mad_timer_set($5,0,$13,$12);
 $14 = ((($0)) + 80|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = ((($0)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   label = 8;
  } else {
   $20 = HEAP32[$2>>2]|0;
   $21 = ($20|0)==(3);
   $22 = ($18>>>0)>(640000);
   $or$cond = $22 & $21;
   if ($or$cond) {
    label = 8;
   } else {
    $25 = $18;
   }
  }
  do {
   if ((label|0) == 8) {
    $23 = (_free_bitrate($0,$2)|0);
    $24 = ($23|0)==(-1);
    if ($24) {
     $$0 = -1;
     return ($$0|0);
    } else {
     $$pre = HEAP32[$17>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  } while(0);
  HEAP32[$14>>2] = $25;
  $26 = ((($0)) + 92|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 | 1024;
  HEAP32[$26>>2] = $28;
  $30 = $28;$34 = $25;
 } else {
  $$phi$trans$insert = ((($0)) + 92|0);
  $$pre36 = HEAP32[$$phi$trans$insert>>2]|0;
  $30 = $$pre36;$34 = $15;
 }
 $29 = $30 >>> 7;
 $$lobit = $29 & 1;
 $31 = HEAP32[$2>>2]|0;
 $32 = HEAP32[$11>>2]|0;
 switch ($31|0) {
 case 1:  {
  $33 = ($34*12)|0;
  $35 = (($33>>>0) / ($32>>>0))&-1;
  $36 = (($35) + ($$lobit))|0;
  $37 = $36 << 2;
  $$0 = $37;
  return ($$0|0);
  break;
 }
 case 3:  {
  $38 = $30 & 4096;
  $39 = ($38|0)!=(0);
  $phitmp34 = $39 ? 72 : 144;
  $41 = $phitmp34;
  break;
 }
 default: {
  $41 = 144;
 }
 }
 $40 = Math_imul($41, $34)|0;
 $42 = (($40>>>0) / ($32>>>0))&-1;
 $43 = (($42) + ($$lobit))|0;
 $$0 = $43;
 return ($$0|0);
}
function __ZN10emscripten8internal13getActualTypeI9NetStreamEEPKvPT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (88|0);
}
function __ZN10emscripten8internal14raw_destructorI9NetStreamEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZN9NetStreamD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal7InvokerIP9NetStreamJOP10MonaClientEE6invokeEPFS3_S6_ES5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $1;
 $3 = (FUNCTION_TABLE_ii[$0 & 127]($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal12operator_newI9NetStreamJP10MonaClientEEEPT_DpOT0_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(64)|0);
 $2 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vii(105,($1|0),($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  __ZdlPv($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  return ($1|0);
 }
 return (0)|0;
}
function __ZN9NetStream12attachCanvasEN10emscripten3valEb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$05 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $3 = sp;
 $4 = $2&1;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ((($0)) + 14|0);
 HEAP8[$8>>0] = $4;
 $9 = $2 ? 44523 : 44528;
 HEAP32[$vararg_buffer>>2] = 44534;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $9;
 _emscripten_log(0,($vararg_buffer|0));
 $10 = (__Znwj(60)|0);
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($10)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($10)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($10)) + 32|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($10)) + 36|0);
 HEAP8[$15>>0] = 0;
 HEAP32[$10>>2] = (37116);
 $16 = ((($10)) + 48|0);
 HEAP32[$16>>2] = 0;
 __THREW__ = 0;
 $17 = (invoke_i(106)|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch_2()|0;
  $21 = tempRet0;
  HEAP32[$10>>2] = (37140);
  $22 = HEAP8[$15>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $24 = HEAP32[$11>>2]|0;
   $25 = ($24|0)==(0|0);
   if (!($25)) {
    _free($24);
   }
  }
  __THREW__ = 0;
  HEAP32[$vararg_buffer2>>2] = 44543;
  invoke_vii(82,0,($vararg_buffer2|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   $28 = ___cxa_find_matching_catch_3(0|0)|0;
   $29 = tempRet0;
   ___clang_call_terminate($28);
   // unreachable;
  }
  __ZdlPv($10);
  $$0 = $21;$$05 = $20;
  ___resumeException($$05|0);
  // unreachable;
 }
 $30 = ((($10)) + 56|0);
 HEAP32[$30>>2] = $17;
 HEAP32[$5>>2] = $10;
 $31 = ((($0)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 $34 = $32;
 do {
  if ($33) {
   $35 = (__Znwj(4)|0);
   $36 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi(85,($36|0));
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if (!($38)) {
    $39 = HEAP32[$1>>2]|0;
    HEAP32[$3>>2] = $39;
    __THREW__ = 0;
    $40 = (invoke_iii(86,(48|0),($3|0))|0);
    $41 = __THREW__; __THREW__ = 0;
    $42 = $41&1;
    if (!($42)) {
     HEAP32[$35>>2] = $40;
     HEAP32[$31>>2] = $35;
     $43 = $35;
     $$pre = HEAP32[$5>>2]|0;
     $47 = $$pre;$48 = $43;
     break;
    }
   }
   $44 = ___cxa_find_matching_catch_2()|0;
   $45 = tempRet0;
   __ZdlPv($35);
   $$0 = $45;$$05 = $44;
   ___resumeException($$05|0);
   // unreachable;
  } else {
   $47 = $10;$48 = $34;
  }
 } while(0);
 $46 = ((($47)) + 4|0);
 HEAP32[$46>>2] = $48;
 $49 = ((($47)) + 36|0);
 HEAP8[$49>>0] = $4;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIM9NetStreamFvNS_3valEbEvPS2_JS3_bEE6invokeERKS5_S6_PNS0_7_EM_VALEb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $5 = $$unpack6 >> 1;
 $6 = (($1) + ($5)|0);
 $7 = $$unpack6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $13 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $13 = $11;
 }
 HEAP32[$4>>2] = $2;
 __THREW__ = 0;
 invoke_viii($13|0,($6|0),($4|0),($3|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  $23 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_vi(73,($23|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $26 = ___cxa_find_matching_catch_3(0|0)|0;
   $27 = tempRet0;
   ___clang_call_terminate($26);
   // unreachable;
  } else {
   ___resumeException($21|0);
   // unreachable;
  }
 } else {
  $16 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_vi(73,($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $19 = ___cxa_find_matching_catch_3(0|0)|0;
   $20 = tempRet0;
   ___clang_call_terminate($19);
   // unreachable;
  } else {
   STACKTOP = sp;return;
  }
 }
}
function __ZN9NetStream9initAudioEN10emscripten3valEii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$04 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index8Z2D = 0, $eh$lpad$body$indexZ2D = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $8 = (__Znwj(4)|0);
   $9 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi(85,($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$1>>2]|0;
    HEAP32[$4>>2] = $12;
    __THREW__ = 0;
    $13 = (invoke_iii(86,(48|0),($4|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     HEAP32[$8>>2] = $13;
     HEAP32[$5>>2] = $8;
     break;
    }
   }
   $16 = ___cxa_find_matching_catch_2()|0;
   $17 = tempRet0;
   __ZdlPv($8);
   $$0 = $17;$$04 = $16;
   ___resumeException($$04|0);
   // unreachable;
  }
 } while(0);
 $18 = (__Znwj(22700)|0);
 $19 = $2 << 1;
 $20 = Math_imul($19, $3)|0;
 HEAP32[$18>>2] = $20;
 $21 = ((($18)) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($18)) + 12|0);
 $23 = ((($18)) + 22668|0);
 $24 = ((($18)) + 22684|0);
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;HEAP32[$23+12>>2]=0|0;HEAP32[$23+16>>2]=0|0;HEAP32[$23+20>>2]=0|0;HEAP32[$23+24>>2]=0|0;HEAP32[$23+28>>2]=0|0;
 __THREW__ = 0;
 invoke_vi(107,($22|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  label = 10;
 } else {
  $27 = ((($18)) + 76|0);
  __THREW__ = 0;
  invoke_vi(108,($27|0));
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   label = 10;
  } else {
   $30 = ((($18)) + 9344|0);
   __THREW__ = 0;
   invoke_vi(109,($30|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    label = 10;
   } else {
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = 44498;
    invoke_vii(82,0,($vararg_buffer|0));
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     label = 10;
    } else {
     $45 = HEAP32[$18>>2]|0;
     $46 = (_malloc($45)|0);
     $47 = ((($18)) + 8|0);
     HEAP32[$47>>2] = $46;
     __THREW__ = 0;
     HEAP32[$vararg_buffer1>>2] = 44508;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $18;
     invoke_vii(82,0,($vararg_buffer1|0));
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if (!($49)) {
      HEAP32[$0>>2] = $18;
      $64 = HEAP32[$47>>2]|0;
      $65 = $64 >> 1;
      STACKTOP = sp;return ($65|0);
     }
     $50 = ___cxa_find_matching_catch_2()|0;
     $51 = tempRet0;
     __THREW__ = 0;
     invoke_vi(98,($27|0));
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      $62 = ___cxa_find_matching_catch_3(0|0)|0;
      $63 = tempRet0;
      __ZN12MemoryStreamD2Ev($24);
      __ZN12MemoryStreamD2Ev($23);
      ___clang_call_terminate($62);
      // unreachable;
     }
     $54 = ((($18)) + 22695|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = ($55<<24>>24)<(0);
     if ($56) {
      $57 = HEAP32[$24>>2]|0;
      __ZdlPv($57);
     }
     $58 = ((($18)) + 22679|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = ($59<<24>>24)<(0);
     if ($60) {
      $61 = HEAP32[$23>>2]|0;
      __ZdlPv($61);
      $eh$lpad$body$index8Z2D = $51;$eh$lpad$body$indexZ2D = $50;
     } else {
      $eh$lpad$body$index8Z2D = $51;$eh$lpad$body$indexZ2D = $50;
     }
    }
   }
  }
 }
 if ((label|0) == 10) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $37 = ((($18)) + 22695|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = ($38<<24>>24)<(0);
  if ($39) {
   $40 = HEAP32[$24>>2]|0;
   __ZdlPv($40);
  }
  $41 = ((($18)) + 22679|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = ($42<<24>>24)<(0);
  if ($43) {
   $44 = HEAP32[$23>>2]|0;
   __ZdlPv($44);
   $eh$lpad$body$index8Z2D = $36;$eh$lpad$body$indexZ2D = $35;
  } else {
   $eh$lpad$body$index8Z2D = $36;$eh$lpad$body$indexZ2D = $35;
  }
 }
 __ZdlPv($18);
 $$0 = $eh$lpad$body$index8Z2D;$$04 = $eh$lpad$body$indexZ2D;
 ___resumeException($$04|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal13MethodInvokerIM9NetStreamFiNS_3valEiiEiPS2_JS3_iiEE6invokeERKS5_S6_PNS0_7_EM_VALEii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $6 = $$unpack7 >> 1;
 $7 = (($1) + ($6)|0);
 $8 = $$unpack7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $14 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 HEAP32[$5>>2] = $2;
 __THREW__ = 0;
 $15 = (invoke_iiiii($14|0,($7|0),($5|0),($3|0),($4|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  $25 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  invoke_vi(73,($25|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   $28 = ___cxa_find_matching_catch_3(0|0)|0;
   $29 = tempRet0;
   ___clang_call_terminate($28);
   // unreachable;
  } else {
   ___resumeException($23|0);
   // unreachable;
  }
 } else {
  $18 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  invoke_vi(73,($18|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $21 = ___cxa_find_matching_catch_3(0|0)|0;
   $22 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  } else {
   STACKTOP = sp;return ($15|0);
  }
 }
 return (0)|0;
}
function __ZN9NetStream4playENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 12|0;
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($3,44478,$1);
 __THREW__ = 0;
 $6 = (invoke_iii(89,($3|0),(44490|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = tempRet0;
   $$0 = $22;$$02 = $21;
  } else {
   ;HEAP32[$2>>2]=HEAP32[$6>>2]|0;HEAP32[$2+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$6+8>>2]|0;
   ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
   $9 = HEAP32[$5>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   __THREW__ = 0;
   invoke_viii(110,($10|0),(44493|0),($2|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = tempRet0;
    $25 = ((($2)) + 11|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)<(0);
    if (!($27)) {
     $$0 = $24;$$02 = $23;
     break;
    }
    $28 = HEAP32[$2>>2]|0;
    __ZdlPv($28);
    $$0 = $24;$$02 = $23;
    break;
   }
   $13 = ((($2)) + 11|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)<(0);
   if ($15) {
    $16 = HEAP32[$2>>2]|0;
    __ZdlPv($16);
   }
   $17 = ((($3)) + 11|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)<(0);
   if (!($19)) {
    STACKTOP = sp;return;
   }
   $20 = HEAP32[$3>>2]|0;
   __ZdlPv($20);
   STACKTOP = sp;return;
  }
 } while(0);
 $29 = ((($3)) + 11|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = ($30<<24>>24)<(0);
 if (!($31)) {
  ___resumeException($$02|0);
  // unreachable;
 }
 $32 = HEAP32[$3>>2]|0;
 __ZdlPv($32);
 ___resumeException($$02|0);
 // unreachable;
}
function __ZN10emscripten8internal13MethodInvokerIM9NetStreamFvNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEvPS2_JS9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_EUt_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016$i$i$i = 0, $$017$i$i$i = 0, $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $4 = $$unpack5 >> 1;
 $5 = (($1) + ($4)|0);
 $6 = $$unpack5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $26 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $26 = $10;
 }
 $12 = ((($2)) + 4|0);
 $13 = HEAP32[$2>>2]|0;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $14 = ($13>>>0)>(4294967279);
 if ($14) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($3);
  // unreachable;
 }
 $15 = ($13>>>0)<(11);
 if ($15) {
  $22 = $13&255;
  $23 = ((($3)) + 11|0);
  HEAP8[$23>>0] = $22;
  $24 = ($13|0)==(0);
  if ($24) {
   $$017$i$i$i = $3;
  } else {
   $$016$i$i$i = $3;
   label = 9;
  }
 } else {
  $16 = (($13) + 16)|0;
  $17 = $16 & -16;
  $18 = (__Znwj($17)|0);
  HEAP32[$3>>2] = $18;
  $19 = $17 | -2147483648;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $21 = ((($3)) + 4|0);
  HEAP32[$21>>2] = $13;
  $$016$i$i$i = $18;
  label = 9;
 }
 if ((label|0) == 9) {
  _memcpy(($$016$i$i$i|0),($12|0),($13|0))|0;
  $$017$i$i$i = $$016$i$i$i;
 }
 $25 = (($$017$i$i$i) + ($13)|0);
 HEAP8[$25>>0] = 0;
 __THREW__ = 0;
 invoke_vii($26|0,($5|0),($3|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  $35 = ((($3)) + 11|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = ($36<<24>>24)<(0);
  if (!($37)) {
   ___resumeException($33|0);
   // unreachable;
  }
  $38 = HEAP32[$3>>2]|0;
  __ZdlPv($38);
  ___resumeException($33|0);
  // unreachable;
 } else {
  $29 = ((($3)) + 11|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)<(0);
  if (!($31)) {
   STACKTOP = sp;return;
  }
  $32 = HEAP32[$3>>2]|0;
  __ZdlPv($32);
  STACKTOP = sp;return;
 }
}
function __ZN9NetStream17decodeVideoBufferEv($0) {
 $0 = $0|0;
 var $$pre = 0, $$pre$i$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = ((($0)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12>>>0) / 204)&-1;
  $14 = (($10) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($12>>>0) % 204)&-1;
  $17 = (((($15) + (($16*20)|0)|0)) + 4|0);
  __ZN12VideoDecoder6decodeER12MemoryStream($8,$17);
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$11>>2]|0;
  $20 = (($19>>>0) / 204)&-1;
  $21 = (($18) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($19>>>0) % 204)&-1;
  $24 = (((($22) + (($23*20)|0)|0)) + 4|0);
  $25 = ((($24)) + 11|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)<(0);
  if ($27) {
   $28 = HEAP32[$24>>2]|0;
   __ZdlPv($28);
   $$pre$i$i = HEAP32[$11>>2]|0;
   $32 = $$pre$i$i;
  } else {
   $32 = $19;
  }
  $29 = HEAP32[$4>>2]|0;
  $30 = (($29) + -1)|0;
  HEAP32[$4>>2] = $30;
  $31 = (($32) + 1)|0;
  HEAP32[$11>>2] = $31;
  $33 = ($31>>>0)>(407);
  if ($33) {
   $34 = HEAP32[$9>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   __ZdlPv($35);
   $36 = HEAP32[$9>>2]|0;
   $37 = ((($36)) + 4|0);
   HEAP32[$9>>2] = $37;
   $38 = HEAP32[$11>>2]|0;
   $39 = (($38) + -204)|0;
   HEAP32[$11>>2] = $39;
   $$pre = HEAP32[$4>>2]|0;
   $41 = $$pre;$44 = $39;
  } else {
   $41 = $30;$44 = $31;
  }
  $40 = ($41|0)==(0);
  if ($40) {
   $66 = ((($0)) + 52|0);
   HEAP8[$66>>0] = 0;
   STACKTOP = sp;return;
  }
  $42 = HEAP32[$9>>2]|0;
  $43 = (($44>>>0) / 204)&-1;
  $45 = (($42) + ($43<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44>>>0) % 204)&-1;
  $48 = (($46) + (($47*20)|0)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = _emscripten_asm_const_ii(1, 0)|0;
  $51 = ((($0)) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) - ($52))|0;
  $54 = ((($0)) + 56|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55*1000)|0;
  $57 = (($56) + ($49))|0;
  $58 = ($57|0)>($53|0);
  if ($58) {
   $59 = ((($0)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($49) - ($53))|0;
   $62 = (($61) + ($56))|0;
   HEAP32[$2>>2] = $62;
   $63 = HEAP32[$60>>2]|0;
   $64 = (__ZN10emscripten8internal12MethodCallerIiJlEE4callEPNS0_7_EM_VALEPKcOl($63,44232,$2)|0);
   $65 = ((($0)) + 60|0);
   HEAP32[$65>>2] = $64;
   STACKTOP = sp;return;
  } else {
   __ZN9NetStream17decodeVideoBufferEv($0);
   STACKTOP = sp;return;
  }
 }
 $67 = ((($0)) + 52|0);
 HEAP8[$67>>0] = 0;
 $68 = (__emval_new_object()|0);
 HEAP32[$3>>2] = $68;
 __THREW__ = 0;
 invoke_viii(111,($3|0),(44159|0),(44455|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 L19: do {
  if ($70) {
   label = 23;
  } else {
   $71 = ((($0)) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP8[49224]|0;
   $75 = ($74<<24>>24)==(0);
   do {
    if ($75) {
     $76 = (___cxa_guard_acquire(49224)|0);
     $77 = ($76|0)==(0);
     if (!($77)) {
      __THREW__ = 0;
      $78 = (invoke_iii(84,2,(37020|0))|0);
      $79 = __THREW__; __THREW__ = 0;
      $80 = $79&1;
      if ($80) {
       $81 = ___cxa_find_matching_catch_2()|0;
       $82 = tempRet0;
       $eh$lpad$body$index2Z2D = $82;$eh$lpad$body$indexZ2D = $81;
       break L19;
      } else {
       HEAP32[12319] = $78;
       break;
      }
     }
    }
   } while(0);
   $83 = HEAP32[12319]|0;
   $84 = HEAP32[$3>>2]|0;
   __THREW__ = 0;
   invoke_vi(85,($84|0));
   $85 = __THREW__; __THREW__ = 0;
   $86 = $85&1;
   if ($86) {
    label = 23;
   } else {
    $87 = HEAP32[$3>>2]|0;
    HEAP32[$1>>2] = $87;
    __THREW__ = 0;
    invoke_viiii(87,($83|0),($73|0),(44185|0),($1|0));
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     label = 23;
    } else {
     $90 = HEAP32[$3>>2]|0;
     __THREW__ = 0;
     invoke_vi(73,($90|0));
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      $93 = ___cxa_find_matching_catch_3(0|0)|0;
      $94 = tempRet0;
      ___clang_call_terminate($93);
      // unreachable;
     }
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $95 = ___cxa_find_matching_catch_2()|0;
  $96 = tempRet0;
  $eh$lpad$body$index2Z2D = $96;$eh$lpad$body$indexZ2D = $95;
 }
 $97 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 invoke_vi(73,($97|0));
 $98 = __THREW__; __THREW__ = 0;
 $99 = $98&1;
 if ($99) {
  $100 = ___cxa_find_matching_catch_3(0|0)|0;
  $101 = tempRet0;
  ___clang_call_terminate($100);
  // unreachable;
 } else {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
}
function __ZN10emscripten8internal13MethodInvokerIM9NetStreamFvvEvPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $2 = $$unpack3 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$unpack3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$unpack;
  $10 = $9;
  FUNCTION_TABLE_vi[$10 & 127]($3);
  return;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$unpack)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
  FUNCTION_TABLE_vi[$10 & 127]($3);
  return;
 }
}
function __ZNK9NetStream13getBufferTimeEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($1)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = (__emval_take_value((536|0),($2|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN9NetStream13setBufferTimeEN10emscripten3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = (+__emval_as(($3|0),(536|0),($2|0)));
 $5 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi(97,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_3(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  $10 = (~~(($4)));
  $11 = ((($0)) + 56|0);
  HEAP32[$11>>2] = $10;
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal12GetterPolicyIM9NetStreamKFNS_3valEvEE3getIS2_EEPNS0_7_EM_VALERKS5_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $3 = $$unpack4 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 FUNCTION_TABLE_vii[$11 & 127]($2,$4);
 $12 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi(85,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch_2()|0;
  $21 = tempRet0;
  $22 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi(73,($22|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  } else {
   ___resumeException($20|0);
   // unreachable;
  }
 } else {
  $15 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi(73,($15|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch_3(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  } else {
   STACKTOP = sp;return ($15|0);
  }
 }
 return (0)|0;
}
function __ZN10emscripten8internal12SetterPolicyIM9NetStreamFvNS_3valEEE3setIS2_EEvRKS5_RT_PNS0_7_EM_VALE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $4 = $$unpack5 >> 1;
 $5 = (($1) + ($4)|0);
 $6 = $$unpack5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 HEAP32[$3>>2] = $2;
 __THREW__ = 0;
 invoke_vii($12|0,($5|0),($3|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch_2()|0;
  $21 = tempRet0;
  $22 = HEAP32[$3>>2]|0;
  __THREW__ = 0;
  invoke_vi(73,($22|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  } else {
   ___resumeException($20|0);
   // unreachable;
  }
 } else {
  $15 = HEAP32[$3>>2]|0;
  __THREW__ = 0;
  invoke_vi(73,($15|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch_3(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  } else {
   STACKTOP = sp;return;
  }
 }
}
function __ZN10emscripten3val3setIA5_cA23_cEEvRKT_RKT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__emval_new_cstring(($1|0))|0);
 __THREW__ = 0;
 $5 = (invoke_ii(76,($2|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $$0 = $19;$$04 = $18;
  } else {
   __THREW__ = 0;
   invoke_viii(94,($3|0),($4|0),($5|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $20 = ___cxa_find_matching_catch_2()|0;
    $21 = tempRet0;
    __THREW__ = 0;
    invoke_vi(73,($5|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if (!($23)) {
     $$0 = $21;$$04 = $20;
     break;
    }
    $24 = ___cxa_find_matching_catch_3(0|0)|0;
    $25 = tempRet0;
    ___clang_call_terminate($24);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(73,($5|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $12 = ___cxa_find_matching_catch_3(0|0)|0;
    $13 = tempRet0;
    ___clang_call_terminate($12);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(73,($4|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch_3(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   } else {
    return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(73,($4|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $28 = ___cxa_find_matching_catch_3(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  ___resumeException($$04|0);
  // unreachable;
 }
}
function __ZN10emscripten8internal12MethodCallerIvJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE4callEPNS0_7_EM_VALEPKcSA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP8[49240]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire(49240)|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    __THREW__ = 0;
    $8 = (invoke_iii(84,2,(37100|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch_2()|0;
     $12 = tempRet0;
     ___resumeException($11|0);
     // unreachable;
    } else {
     HEAP32[12321] = $8;
     break;
    }
   }
  }
 } while(0);
 $13 = HEAP32[12321]|0;
 $14 = ((($2)) + 11|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)<(0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $15&255;
 $20 = $16 ? $18 : $19;
 $21 = (($20) + 4)|0;
 $22 = (_malloc($21)|0);
 HEAP32[$22>>2] = $20;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$2>>2]|0;
 $25 = $16 ? $24 : $2;
 _memcpy(($23|0),($25|0),($20|0))|0;
 HEAP32[$3>>2] = $22;
 __emval_call_void_method(($13|0),($0|0),($1|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12VideoDecoderD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$0>>2] = (37140);
 $1 = ((($0)) + 36|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _free($5);
  }
 }
 __THREW__ = 0;
 HEAP32[$vararg_buffer>>2] = 44543;
 invoke_vii(82,0,($vararg_buffer|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_3(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN12VideoDecoderD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$0>>2] = (37140);
 $1 = ((($0)) + 36|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _free($5);
  }
 }
 __THREW__ = 0;
 HEAP32[$vararg_buffer>>2] = 44543;
 invoke_vii(82,0,($vararg_buffer|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_3(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  __ZdlPv($0);
  STACKTOP = sp;return;
 }
}
function __ZN12VideoDecoder12decodeHeaderER12MemoryStreami($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre166 = 0, $$sroa$0$0$insert$ext = 0, $$sroa$0$0$insert$insert = 0, $$sroa$0100$0$insert$ext = 0, $$sroa$0100$0$insert$insert = 0, $$sroa$0126$0$insert$ext = 0, $$sroa$0126$0$insert$insert = 0, $$sroa$047$0$insert$ext = 0, $$sroa$047$0$insert$insert = 0, $$sroa$071$0$insert$ext = 0, $$sroa$071$0$insert$insert = 0, $$sroa$5$0$insert$ext = 0, $$sroa$5$0$insert$shift = 0, $$sroa$6$0$insert$ext52 = 0, $$sroa$6$0$insert$shift53 = 0, $$sroa$6105$0$insert$ext = 0, $$sroa$6105$0$insert$shift = 0, $$sroa$676$0$insert$ext = 0, $$sroa$676$0$insert$shift = 0;
 var $$sroa$7$0$insert$ext135 = 0, $$sroa$7$0$insert$shift136 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = 44567;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 _emscripten_log(0,($vararg_buffer|0));
 switch ($2|0) {
 case 7:  {
  $5 = ((($1)) + 11|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)<(0);
  $8 = HEAP32[$1>>2]|0;
  $9 = $7 ? $8 : $1;
  $10 = HEAP32[$3>>2]|0;
  $11 = (($9) + ($10)|0);
  $12 = ((($11)) + 9|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 & 3;
  $15 = $14&255;
  $16 = ((($0)) + 32|0);
  HEAP32[$16>>2] = $15;
  $17 = (($4) + 11)|0;
  HEAP32[$3>>2] = $17;
  $18 = HEAP32[$1>>2]|0;
  $19 = $7 ? $18 : $1;
  $20 = (($19) + ($17)|0);
  $21 = ((($20)) + 2|0);
  $22 = ((($21)) + -1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = ((($22)) + -1|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = (($4) + 13)|0;
  HEAP32[$3>>2] = $26;
  $$sroa$7$0$insert$ext135 = $25&255;
  $$sroa$7$0$insert$shift136 = $$sroa$7$0$insert$ext135 << 8;
  $$sroa$0126$0$insert$ext = $23&255;
  $$sroa$0126$0$insert$insert = $$sroa$7$0$insert$shift136 | $$sroa$0126$0$insert$ext;
  $27 = ($$sroa$0126$0$insert$insert|0)==(0);
  if ($27) {
   $35 = $26;$37 = $6;$39 = $18;
  } else {
   $28 = HEAP32[$0>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($19) + ($26)|0);
   FUNCTION_TABLE_viii[$30 & 127]($0,$31,$$sroa$0126$0$insert$insert);
   $32 = HEAP32[$3>>2]|0;
   $33 = (($32) + ($$sroa$0126$0$insert$insert))|0;
   HEAP32[$3>>2] = $33;
   $$pre = HEAP8[$5>>0]|0;
   $$pre166 = HEAP32[$1>>2]|0;
   $35 = $33;$37 = $$pre;$39 = $$pre166;
  }
  $34 = (($35) + 1)|0;
  HEAP32[$3>>2] = $34;
  $36 = ($37<<24>>24)<(0);
  $38 = $36 ? $39 : $1;
  $40 = (($38) + ($34)|0);
  $41 = ((($40)) + 2|0);
  $42 = ((($41)) + -1|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = ((($42)) + -1|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = (($35) + 3)|0;
  HEAP32[$3>>2] = $46;
  $$sroa$6105$0$insert$ext = $45&255;
  $$sroa$6105$0$insert$shift = $$sroa$6105$0$insert$ext << 8;
  $$sroa$0100$0$insert$ext = $43&255;
  $$sroa$0100$0$insert$insert = $$sroa$6105$0$insert$shift | $$sroa$0100$0$insert$ext;
  $47 = ($$sroa$0100$0$insert$insert|0)==(0);
  if ($47) {
   STACKTOP = sp;return;
  }
  $48 = HEAP32[$0>>2]|0;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($38) + ($46)|0);
  FUNCTION_TABLE_viii[$50 & 127]($0,$51,$$sroa$0100$0$insert$insert);
  STACKTOP = sp;return;
  break;
 }
 case 12:  {
  $52 = ((($1)) + 11|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = ($53<<24>>24)<(0);
  $55 = HEAP32[$1>>2]|0;
  $56 = $54 ? $55 : $1;
  $57 = HEAP32[$3>>2]|0;
  $58 = (($56) + ($57)|0);
  $59 = ((($58)) + 27|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60 & 3;
  $62 = $61&255;
  $63 = ((($0)) + 32|0);
  HEAP32[$63>>2] = $62;
  $64 = (($4) + 31)|0;
  HEAP32[$3>>2] = $64;
  $65 = HEAP32[$1>>2]|0;
  $66 = $54 ? $65 : $1;
  $67 = (($66) + ($64)|0);
  $68 = ((($67)) + 2|0);
  $69 = ((($68)) + -1|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = ((($69)) + -1|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = (($4) + 33)|0;
  HEAP32[$3>>2] = $73;
  $74 = HEAP32[$0>>2]|0;
  $75 = ((($74)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($66) + ($73)|0);
  $$sroa$676$0$insert$ext = $72&255;
  $$sroa$676$0$insert$shift = $$sroa$676$0$insert$ext << 8;
  $$sroa$071$0$insert$ext = $70&255;
  $$sroa$071$0$insert$insert = $$sroa$676$0$insert$shift | $$sroa$071$0$insert$ext;
  FUNCTION_TABLE_viii[$76 & 127]($0,$77,$$sroa$071$0$insert$insert);
  $78 = HEAP32[$3>>2]|0;
  $79 = (($$sroa$071$0$insert$insert) + 3)|0;
  $80 = (($79) + ($78))|0;
  HEAP32[$3>>2] = $80;
  $81 = HEAP8[$52>>0]|0;
  $82 = ($81<<24>>24)<(0);
  $83 = HEAP32[$1>>2]|0;
  $84 = $82 ? $83 : $1;
  $85 = (($84) + ($80)|0);
  $86 = ((($85)) + 2|0);
  $87 = ((($86)) + -1|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = ((($87)) + -1|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = (($80) + 2)|0;
  HEAP32[$3>>2] = $91;
  $92 = HEAP32[$0>>2]|0;
  $93 = ((($92)) + 12|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($84) + ($91)|0);
  $$sroa$6$0$insert$ext52 = $90&255;
  $$sroa$6$0$insert$shift53 = $$sroa$6$0$insert$ext52 << 8;
  $$sroa$047$0$insert$ext = $88&255;
  $$sroa$047$0$insert$insert = $$sroa$6$0$insert$shift53 | $$sroa$047$0$insert$ext;
  FUNCTION_TABLE_viii[$94 & 127]($0,$95,$$sroa$047$0$insert$insert);
  $96 = HEAP32[$3>>2]|0;
  $97 = (($$sroa$047$0$insert$insert) + 3)|0;
  $98 = (($97) + ($96))|0;
  HEAP32[$3>>2] = $98;
  $99 = HEAP8[$52>>0]|0;
  $100 = ($99<<24>>24)<(0);
  $101 = HEAP32[$1>>2]|0;
  $102 = $100 ? $101 : $1;
  $103 = (($102) + ($98)|0);
  $104 = ((($103)) + 2|0);
  $105 = ((($104)) + -1|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = ((($105)) + -1|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = (($98) + 2)|0;
  HEAP32[$3>>2] = $109;
  $110 = HEAP32[$0>>2]|0;
  $111 = ((($110)) + 12|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($102) + ($109)|0);
  $$sroa$5$0$insert$ext = $108&255;
  $$sroa$5$0$insert$shift = $$sroa$5$0$insert$ext << 8;
  $$sroa$0$0$insert$ext = $106&255;
  $$sroa$0$0$insert$insert = $$sroa$5$0$insert$shift | $$sroa$0$0$insert$ext;
  FUNCTION_TABLE_viii[$112 & 127]($0,$113,$$sroa$0$0$insert$insert);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZN6FFmpegD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$0>>2] = (37116);
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(112,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $5 = ((($0)) + 48|0);
  __THREW__ = 0;
  invoke_vi(113,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   $8 = ((($0)) + 52|0);
   __THREW__ = 0;
   invoke_vi(114,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = ((($0)) + 56|0);
    __THREW__ = 0;
    invoke_vi(115,($11|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     HEAP32[$0>>2] = (37140);
     $14 = ((($0)) + 36|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      $17 = ((($0)) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = ($18|0)==(0|0);
      if (!($19)) {
       _free($18);
      }
     }
     __THREW__ = 0;
     HEAP32[$vararg_buffer>>2] = 44543;
     invoke_vii(82,0,($vararg_buffer|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = tempRet0;
      ___clang_call_terminate($22);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $24 = ___cxa_find_matching_catch_3(0|0)|0;
 $25 = tempRet0;
 __ZN12VideoDecoderD2Ev($0);
 ___clang_call_terminate($24);
 // unreachable;
}
function __ZN6FFmpegD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6FFmpegD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN6FFmpeg12decodeHeaderER12MemoryStreami($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(12);
 $4 = $3 ? 173 : 27;
 $5 = (__Z20avcodec_find_decoder9AVCodecID(($4|0))|0);
 $6 = ((($0)) + 40|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__Z14av_parser_initi(($8|0))|0);
 $10 = ((($0)) + 44|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$6>>2]|0;
 $12 = (__Z22avcodec_alloc_context3PK7AVCodec(($11|0))|0);
 $13 = ((($0)) + 48|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$6>>2]|0;
 (__Z13avcodec_open2P14AVCodecContextPK7AVCodecPP12AVDictionary(($12|0),($14|0),(0|0))|0);
 $15 = (__Z14av_frame_allocv()|0);
 $16 = ((($0)) + 52|0);
 HEAP32[$16>>2] = $15;
 __ZN12VideoDecoder12decodeHeaderER12MemoryStreami($0,$1,$2);
 return;
}
function __ZN6FFmpeg7_decodeEPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = ((($9)) + 28|0);
 (__Z16av_parser_parse2P20AVCodecParserContextP14AVCodecContextPPhPiPKhixxx(($5|0),($7|0),($10|0),($11|0),($1|0),($2|0),0,-2147483648,0,-2147483648,0,0)|0);
 $12 = HEAP32[$8>>2]|0;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$6>>2]|0;
 $17 = (__Z19avcodec_send_packetP14AVCodecContextPK8AVPacket(($16|0),($12|0))|0);
 $18 = ($17|0)>(-1);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = ((($0)) + 52|0);
 $20 = ((($0)) + 20|0);
 $21 = ((($0)) + 24|0);
 $22 = ((($0)) + 28|0);
 $23 = ((($0)) + 12|0);
 $24 = ((($0)) + 36|0);
 $25 = ((($0)) + 20|0);
 $26 = ((($0)) + 8|0);
 $27 = ((($0)) + 16|0);
 $28 = ((($0)) + 4|0);
 L7: while(1) {
  $29 = HEAP32[$6>>2]|0;
  $30 = HEAP32[$19>>2]|0;
  $31 = (__Z21avcodec_receive_frameP14AVCodecContextP7AVFrame(($29|0),($30|0))|0);
  $switch$split2D = ($31|0)<(-11);
  if ($switch$split2D) {
   switch ($31|0) {
   case -541478725:  {
    label = 15;
    break L7;
    break;
   }
   default: {
   }
   }
  } else {
   switch ($31|0) {
   case -11:  {
    label = 15;
    break L7;
    break;
   }
   default: {
   }
   }
  }
  $32 = HEAP32[$19>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$20>>2] = $33;
  $34 = ((($32)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$21>>2] = $35;
  $36 = ((($32)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[$22>>2] = $37;
  $38 = HEAP32[$23>>2]|0;
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = ((($32)) + 68|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($32)) + 72|0);
   $43 = HEAP32[$42>>2]|0;
   __ZN12VideoDecoder15decodeVideoSizeEjj($0,$41,$43);
  }
  $44 = HEAP8[$24>>0]|0;
  $45 = ($44<<24>>24)==(0);
  if ($45) {
   $46 = HEAP32[$25>>2]|0;
   $47 = HEAP32[$21>>2]|0;
   $48 = HEAP32[$22>>2]|0;
   $49 = HEAP32[$26>>2]|0;
   $50 = HEAP32[$23>>2]|0;
   $51 = HEAP32[$27>>2]|0;
   __Z11yuv420toRGBPhS_S_S_jj($46,$47,$48,$49,$50,$51);
  }
  $52 = HEAP32[$28>>2]|0;
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP8[49200]|0;
  $55 = ($54<<24>>24)==(0);
  if ($55) {
   $56 = (___cxa_guard_acquire(49200)|0);
   $57 = ($56|0)==(0);
   if (!($57)) {
    __THREW__ = 0;
    $58 = (invoke_iii(84,1,(36996|0))|0);
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     label = 13;
     break;
    }
    HEAP32[12316] = $58;
   }
  }
  $63 = HEAP32[12316]|0;
  __emval_call_void_method(($63|0),($53|0),(44593|0),($3|0));
  $64 = ($31|0)>(-1);
  if (!($64)) {
   label = 15;
   break;
  }
 }
 if ((label|0) == 13) {
  $61 = ___cxa_find_matching_catch_2()|0;
  $62 = tempRet0;
  ___resumeException($61|0);
  // unreachable;
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
}
function __ZN12VideoDecoder15decodeVideoSizeEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $$cast19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $umax = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp + 48|0;
 $3 = sp + 24|0;
 $4 = sp;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = $2;
 HEAP32[$vararg_buffer>>2] = 44598;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 _emscripten_log(0,($vararg_buffer|0));
 $7 = ((($0)) + 36|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $30 = HEAP32[$6>>2]|0;
  $31 = $30 << 2;
  $32 = Math_imul($31, $30)|0;
  $33 = (($32) + 33554432)|0;
  $34 = ($33>>>0)>(16777216);
  $umax = $34 ? $33 : 16777216;
  $35 = (($umax) + 16777215)|0;
  $36 = $35 & -16777216;
  $37 = (_malloc($36)|0);
  $38 = ((($0)) + 8|0);
  HEAP32[$38>>2] = $37;
  $39 = ((($0)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $$cast = $37;
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP8[49248]|0;
  $43 = ($42<<24>>24)==(0);
  do {
   if ($43) {
    $44 = (___cxa_guard_acquire(49248)|0);
    $45 = ($44|0)==(0);
    if (!($45)) {
     __THREW__ = 0;
     $46 = (invoke_iii(84,4,(37156|0))|0);
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      $49 = ___cxa_find_matching_catch_2()|0;
      $50 = tempRet0;
      ___resumeException($49|0);
      // unreachable;
     } else {
      HEAP32[12322] = $46;
      break;
     }
    }
   }
  } while(0);
  $51 = HEAP32[12322]|0;
  $52 = HEAP32[$5>>2]|0;
  HEAP32[$3>>2] = $52;
  $53 = ((($3)) + 8|0);
  $54 = HEAP32[$6>>2]|0;
  HEAP32[$53>>2] = $54;
  $55 = ((($3)) + 16|0);
  HEAP32[$55>>2] = $$cast;
  __emval_call_void_method(($51|0),($41|0),(44611|0),($3|0));
  STACKTOP = sp;return;
 } else {
  $10 = ((($0)) + 20|0);
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$cast19 = $10;
  $14 = $$cast19 >> 2;
  $15 = HEAP32[$13>>2]|0;
  $16 = HEAP8[49248]|0;
  $17 = ($16<<24>>24)==(0);
  do {
   if ($17) {
    $18 = (___cxa_guard_acquire(49248)|0);
    $19 = ($18|0)==(0);
    if (!($19)) {
     __THREW__ = 0;
     $20 = (invoke_iii(84,4,(37156|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      $23 = ___cxa_find_matching_catch_2()|0;
      $24 = tempRet0;
      ___resumeException($23|0);
      // unreachable;
     } else {
      HEAP32[12322] = $20;
      break;
     }
    }
   }
  } while(0);
  $25 = HEAP32[12322]|0;
  $26 = HEAP32[$5>>2]|0;
  HEAP32[$4>>2] = $26;
  $27 = ((($4)) + 8|0);
  $28 = HEAP32[$6>>2]|0;
  HEAP32[$27>>2] = $28;
  $29 = ((($4)) + 16|0);
  HEAP32[$29>>2] = $14;
  __emval_call_void_method(($25|0),($15|0),(44611|0),($4|0));
  STACKTOP = sp;return;
 }
}
function __Z11yuv420toRGBPhS_S_S_jj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i127 = 0, $$0$i136 = 0, $$0$i145 = 0, $$0117163 = 0, $$0119154 = 0, $$0120162 = 0, $$0121161 = 0, $$0123160 = 0, $$0164 = 0, $$093$i = 0, $$093$i130 = 0, $$093$i139 = 0, $$093$i148 = 0, $$094$i = 0, $$094$i133 = 0, $$094$i142 = 0, $$094$i151 = 0, $$1118$lcssa = 0, $$1118155 = 0;
 var $$1122$lcssa = 0, $$1122153 = 0, $$1124$lcssa = 0, $$1124152 = 0, $$1156 = 0, $$lcssa = 0, $$sroa$speculated$i = 0, $$sroa$speculated$i132 = 0, $$sroa$speculated$i141 = 0, $$sroa$speculated$i150 = 0, $$sroa$speculated35$i = 0, $$sroa$speculated35$i129 = 0, $$sroa$speculated35$i138 = 0, $$sroa$speculated35$i147 = 0, $$sroa$speculated47$i = 0, $$sroa$speculated47$i126 = 0, $$sroa$speculated47$i135 = 0, $$sroa$speculated47$i144 = 0, $$sroa$speculated57$i = 0, $$sroa$speculated57$i131 = 0;
 var $$sroa$speculated57$i140 = 0, $$sroa$speculated57$i149 = 0, $$sroa$speculated71$i = 0, $$sroa$speculated71$i128 = 0, $$sroa$speculated71$i137 = 0, $$sroa$speculated71$i146 = 0, $$sroa$speculated85$i = 0, $$sroa$speculated85$i125 = 0, $$sroa$speculated85$i134 = 0, $$sroa$speculated85$i143 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $4 << 2;
 $7 = Math_imul($6, $5)|0;
 $8 = (($3) + ($7)|0);
 $9 = ($5|0)==(0);
 if ($9) {
  return;
 }
 $10 = ($4|0)==(0);
 $11 = (($4) + -1)|0;
 $12 = $11 >>> 1;
 $13 = $12 << 3;
 $14 = (($13) + 8)|0;
 $15 = (($12) + 1)|0;
 $16 = $12 << 1;
 $17 = (($16) + ($4))|0;
 $18 = (($17) + 2)|0;
 $$0117163 = 0;$$0120162 = 0;$$0121161 = 0;$$0123160 = 0;$$0164 = 0;
 while(1) {
  $19 = (($$0164) + ($4))|0;
  if ($10) {
   $$1118$lcssa = $$0117163;$$1122$lcssa = $$0121161;$$1124$lcssa = $$0123160;$$lcssa = $19;
  } else {
   $20 = (($14) + ($$0117163))|0;
   $21 = (($15) + ($$0121161))|0;
   $$0119154 = 0;$$1118155 = $$0117163;$$1122153 = $$0121161;$$1124152 = $$0123160;$$1156 = $$0164;$26 = $19;
   while(1) {
    $22 = (($0) + ($$1156)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = (($0) + ($26)|0);
    $27 = HEAP8[$25>>0]|0;
    $28 = $27&255;
    $29 = (($1) + ($$1124152)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = (($2) + ($$1122153)|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = $24 << 16;
    $36 = $31 << 8;
    $37 = $36 | $35;
    $38 = $37 | $34;
    $39 = (($8) + ($38)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(0);
    if ($41) {
     $42 = ($24*1192)|0;
     $43 = (($42) + -19072)|0;
     $44 = (($34) + -128)|0;
     $45 = ($44*1634)|0;
     $46 = (($31) + -128)|0;
     $47 = ($46*2066)|0;
     $48 = (($45) + ($43))|0;
     $49 = $48 >> 10;
     $50 = Math_imul($44, -832)|0;
     $51 = Math_imul($46, -400)|0;
     $52 = (($51) + ($43))|0;
     $53 = (($52) + ($50))|0;
     $54 = $53 >> 10;
     $55 = (($47) + ($43))|0;
     $56 = $55 >> 10;
     $57 = $49 & 255;
     $58 = ($57|0)==($49|0);
     $59 = ($49|0)>(0);
     $$sroa$speculated85$i = $59 ? $49 : 0;
     $60 = ($$sroa$speculated85$i|0)<(255);
     $$sroa$speculated47$i = $60 ? $$sroa$speculated85$i : 255;
     $$0$i = $58 ? $49 : $$sroa$speculated47$i;
     $61 = $54 & 255;
     $62 = ($61|0)==($54|0);
     $63 = ($54|0)>(0);
     $$sroa$speculated71$i = $63 ? $54 : 0;
     $64 = ($$sroa$speculated71$i|0)<(255);
     $$sroa$speculated35$i = $64 ? $$sroa$speculated71$i : 255;
     $$093$i = $62 ? $54 : $$sroa$speculated35$i;
     $65 = $56 & 255;
     $66 = ($65|0)==($56|0);
     $67 = ($56|0)>(0);
     $$sroa$speculated57$i = $67 ? $56 : 0;
     $68 = ($$sroa$speculated57$i|0)<(255);
     $$sroa$speculated$i = $68 ? $$sroa$speculated57$i : 255;
     $$094$i = $66 ? $56 : $$sroa$speculated$i;
     $69 = $$094$i << 8;
     $70 = (($69) + 16711680)|0;
     $71 = (($70) + ($$093$i))|0;
     $72 = $71 << 8;
     $73 = (($72) + ($$0$i))|0;
     HEAP32[$39>>2] = $73;
     $75 = $73;
    } else {
     $75 = $40;
    }
    $74 = (($3) + ($$1118155)|0);
    HEAP32[$74>>2] = $75;
    $76 = $28 << 16;
    $77 = $36 | $76;
    $78 = $77 | $34;
    $79 = (($8) + ($78)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80|0)==(0);
    if ($81) {
     $82 = ($28*1192)|0;
     $83 = (($82) + -19072)|0;
     $84 = (($34) + -128)|0;
     $85 = ($84*1634)|0;
     $86 = (($31) + -128)|0;
     $87 = ($86*2066)|0;
     $88 = (($85) + ($83))|0;
     $89 = $88 >> 10;
     $90 = Math_imul($84, -832)|0;
     $91 = Math_imul($86, -400)|0;
     $92 = (($91) + ($83))|0;
     $93 = (($92) + ($90))|0;
     $94 = $93 >> 10;
     $95 = (($87) + ($83))|0;
     $96 = $95 >> 10;
     $97 = $89 & 255;
     $98 = ($97|0)==($89|0);
     $99 = ($89|0)>(0);
     $$sroa$speculated85$i143 = $99 ? $89 : 0;
     $100 = ($$sroa$speculated85$i143|0)<(255);
     $$sroa$speculated47$i144 = $100 ? $$sroa$speculated85$i143 : 255;
     $$0$i145 = $98 ? $89 : $$sroa$speculated47$i144;
     $101 = $94 & 255;
     $102 = ($101|0)==($94|0);
     $103 = ($94|0)>(0);
     $$sroa$speculated71$i146 = $103 ? $94 : 0;
     $104 = ($$sroa$speculated71$i146|0)<(255);
     $$sroa$speculated35$i147 = $104 ? $$sroa$speculated71$i146 : 255;
     $$093$i148 = $102 ? $94 : $$sroa$speculated35$i147;
     $105 = $96 & 255;
     $106 = ($105|0)==($96|0);
     $107 = ($96|0)>(0);
     $$sroa$speculated57$i149 = $107 ? $96 : 0;
     $108 = ($$sroa$speculated57$i149|0)<(255);
     $$sroa$speculated$i150 = $108 ? $$sroa$speculated57$i149 : 255;
     $$094$i151 = $106 ? $96 : $$sroa$speculated$i150;
     $109 = $$094$i151 << 8;
     $110 = (($109) + 16711680)|0;
     $111 = (($110) + ($$093$i148))|0;
     $112 = $111 << 8;
     $113 = (($112) + ($$0$i145))|0;
     HEAP32[$79>>2] = $113;
     $116 = $113;
    } else {
     $116 = $80;
    }
    $114 = (($$1118155) + ($6))|0;
    $115 = (($3) + ($114)|0);
    HEAP32[$115>>2] = $116;
    $117 = (($$1118155) + 4)|0;
    $118 = (($$1156) + 1)|0;
    $119 = (($0) + ($118)|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120&255;
    $122 = (($118) + ($4))|0;
    $123 = (($0) + ($122)|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = $124&255;
    $126 = $121 << 16;
    $127 = $34 | $36;
    $128 = $127 | $126;
    $129 = (($8) + ($128)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($130|0)==(0);
    if ($131) {
     $132 = ($121*1192)|0;
     $133 = (($132) + -19072)|0;
     $134 = (($34) + -128)|0;
     $135 = ($134*1634)|0;
     $136 = (($31) + -128)|0;
     $137 = ($136*2066)|0;
     $138 = (($133) + ($135))|0;
     $139 = $138 >> 10;
     $140 = Math_imul($134, -832)|0;
     $141 = Math_imul($136, -400)|0;
     $142 = (($140) + ($141))|0;
     $143 = (($142) + ($133))|0;
     $144 = $143 >> 10;
     $145 = (($133) + ($137))|0;
     $146 = $145 >> 10;
     $147 = $139 & 255;
     $148 = ($147|0)==($139|0);
     $149 = ($139|0)>(0);
     $$sroa$speculated85$i134 = $149 ? $139 : 0;
     $150 = ($$sroa$speculated85$i134|0)<(255);
     $$sroa$speculated47$i135 = $150 ? $$sroa$speculated85$i134 : 255;
     $$0$i136 = $148 ? $139 : $$sroa$speculated47$i135;
     $151 = $144 & 255;
     $152 = ($151|0)==($144|0);
     $153 = ($144|0)>(0);
     $$sroa$speculated71$i137 = $153 ? $144 : 0;
     $154 = ($$sroa$speculated71$i137|0)<(255);
     $$sroa$speculated35$i138 = $154 ? $$sroa$speculated71$i137 : 255;
     $$093$i139 = $152 ? $144 : $$sroa$speculated35$i138;
     $155 = $146 & 255;
     $156 = ($155|0)==($146|0);
     $157 = ($146|0)>(0);
     $$sroa$speculated57$i140 = $157 ? $146 : 0;
     $158 = ($$sroa$speculated57$i140|0)<(255);
     $$sroa$speculated$i141 = $158 ? $$sroa$speculated57$i140 : 255;
     $$094$i142 = $156 ? $146 : $$sroa$speculated$i141;
     $159 = $$094$i142 << 8;
     $160 = (($159) + 16711680)|0;
     $161 = (($160) + ($$093$i139))|0;
     $162 = $161 << 8;
     $163 = (($162) + ($$0$i136))|0;
     HEAP32[$129>>2] = $163;
     $165 = $163;
    } else {
     $165 = $130;
    }
    $164 = (($3) + ($117)|0);
    HEAP32[$164>>2] = $165;
    $166 = $125 << 16;
    $167 = $127 | $166;
    $168 = (($8) + ($167)|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = ($169|0)==(0);
    if ($170) {
     $171 = ($125*1192)|0;
     $172 = (($171) + -19072)|0;
     $173 = (($34) + -128)|0;
     $174 = ($173*1634)|0;
     $175 = (($31) + -128)|0;
     $176 = ($175*2066)|0;
     $177 = (($172) + ($174))|0;
     $178 = $177 >> 10;
     $179 = Math_imul($173, -832)|0;
     $180 = Math_imul($175, -400)|0;
     $181 = (($179) + ($180))|0;
     $182 = (($181) + ($172))|0;
     $183 = $182 >> 10;
     $184 = (($172) + ($176))|0;
     $185 = $184 >> 10;
     $186 = $178 & 255;
     $187 = ($186|0)==($178|0);
     $188 = ($178|0)>(0);
     $$sroa$speculated85$i125 = $188 ? $178 : 0;
     $189 = ($$sroa$speculated85$i125|0)<(255);
     $$sroa$speculated47$i126 = $189 ? $$sroa$speculated85$i125 : 255;
     $$0$i127 = $187 ? $178 : $$sroa$speculated47$i126;
     $190 = $183 & 255;
     $191 = ($190|0)==($183|0);
     $192 = ($183|0)>(0);
     $$sroa$speculated71$i128 = $192 ? $183 : 0;
     $193 = ($$sroa$speculated71$i128|0)<(255);
     $$sroa$speculated35$i129 = $193 ? $$sroa$speculated71$i128 : 255;
     $$093$i130 = $191 ? $183 : $$sroa$speculated35$i129;
     $194 = $185 & 255;
     $195 = ($194|0)==($185|0);
     $196 = ($185|0)>(0);
     $$sroa$speculated57$i131 = $196 ? $185 : 0;
     $197 = ($$sroa$speculated57$i131|0)<(255);
     $$sroa$speculated$i132 = $197 ? $$sroa$speculated57$i131 : 255;
     $$094$i133 = $195 ? $185 : $$sroa$speculated$i132;
     $198 = $$094$i133 << 8;
     $199 = (($198) + 16711680)|0;
     $200 = (($199) + ($$093$i130))|0;
     $201 = $200 << 8;
     $202 = (($201) + ($$0$i127))|0;
     HEAP32[$168>>2] = $202;
     $205 = $202;
    } else {
     $205 = $169;
    }
    $203 = (($117) + ($6))|0;
    $204 = (($3) + ($203)|0);
    HEAP32[$204>>2] = $205;
    $206 = (($$1118155) + 8)|0;
    $207 = (($$1156) + 2)|0;
    $208 = (($$1124152) + 1)|0;
    $209 = (($$1122153) + 1)|0;
    $210 = (($$0119154) + 2)|0;
    $211 = ($210>>>0)<($4>>>0);
    $212 = (($207) + ($4))|0;
    if ($211) {
     $$0119154 = $210;$$1118155 = $206;$$1122153 = $209;$$1124152 = $208;$$1156 = $207;$26 = $212;
    } else {
     break;
    }
   }
   $213 = (($15) + ($$0123160))|0;
   $214 = (($18) + ($$0164))|0;
   $$1118$lcssa = $20;$$1122$lcssa = $21;$$1124$lcssa = $213;$$lcssa = $214;
  }
  $215 = (($$1118$lcssa) + ($6))|0;
  $216 = (($$0120162) + 2)|0;
  $217 = ($216>>>0)<($5>>>0);
  if ($217) {
   $$0117163 = $215;$$0120162 = $216;$$0121161 = $$1122$lcssa;$$0123160 = $$1124$lcssa;$$0164 = $$lcssa;
  } else {
   break;
  }
 }
 return;
}
function __ZN9NetStreamC2EP10MonaClient($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$08$i$i = 0, $$pre$i$i = 0, $$pre9$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $scevgep$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 12|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($0)) + 14|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 28|0);
 $9 = ((($0)) + 60|0);
 HEAP32[$9>>2] = 0;
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;HEAP32[$8+20>>2]=0|0;HEAP8[$8+24>>0]=0|0;
 HEAP32[$2>>2] = (2);
 __THREW__ = 0;
 invoke_vii(116,($0|0),($2|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $12 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi(73,($12|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $15 = ___cxa_find_matching_catch_3(0|0)|0;
   $16 = tempRet0;
   ___clang_call_terminate($15);
   // unreachable;
  } else {
   STACKTOP = sp;return;
  }
 }
 $17 = ___cxa_find_matching_catch_2()|0;
 $18 = tempRet0;
 $19 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi(73,($19|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 }
 __ZNSt3__212__deque_baseI11VideoPacketNS_9allocatorIS1_EEE5clearEv($8);
 $24 = ((($0)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($0)) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)==($27|0);
 if (!($28)) {
  $$08$i$i = $25;
  while(1) {
   $29 = HEAP32[$$08$i$i>>2]|0;
   __ZdlPv($29);
   $30 = ((($$08$i$i)) + 4|0);
   $31 = ($30|0)==($27|0);
   if ($31) {
    break;
   } else {
    $$08$i$i = $30;
   }
  }
  $$pre$i$i = HEAP32[$24>>2]|0;
  $$pre9$i$i = HEAP32[$26>>2]|0;
  $32 = ($$pre9$i$i|0)==($$pre$i$i|0);
  if (!($32)) {
   $scevgep$i$i$i$i$i$i = ((($$pre9$i$i)) + -4|0);
   $33 = $scevgep$i$i$i$i$i$i;
   $34 = $$pre$i$i;
   $35 = (($33) - ($34))|0;
   $36 = $35 >>> 2;
   $37 = $36 ^ -1;
   $scevgep4$i$i$i$i$i$i = (($$pre9$i$i) + ($37<<2)|0);
   HEAP32[$26>>2] = $scevgep4$i$i$i$i$i$i;
  }
 }
 $38 = HEAP32[$8>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  ___resumeException($17|0);
  // unreachable;
 }
 __ZdlPv($38);
 ___resumeException($17|0);
 // unreachable;
}
function __ZN9NetStream9onConnectEON10emscripten3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$ph$i$i$i = 0, $$020$i$i = 0, $$024$i$i$i = 0, $$025$i$i$i = 0, $$in$i$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==((2)|0);
 do {
  if ($4) {
   $13 = 0;
  } else {
   $5 = (+__emval_as(($3|0),(536|0),($2|0)));
   $6 = HEAP32[$2>>2]|0;
   __THREW__ = 0;
   invoke_vi(97,($6|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch_3(0|0)|0;
    $10 = tempRet0;
    ___clang_call_terminate($9);
    // unreachable;
   } else {
    $11 = (~~(($5)));
    $13 = $11;
    break;
   }
  }
 } while(0);
 $12 = ((($0)) + 20|0);
 HEAP32[$12>>2] = $13;
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 52|0);
 $17 = ((($15)) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 do {
  if ($19) {
   $$020$i$i = $17;$$025$i$i$i = $17;
  } else {
   $20 = ((($15)) + 56|0);
   $$0$i$i$i = $20;$$024$i$i$i = $18;
   while(1) {
    $21 = ((($$024$i$i$i)) + 16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($13|0)<($22|0);
    if ($23) {
     $24 = HEAP32[$$024$i$i$i>>2]|0;
     $25 = ($24|0)==(0|0);
     if ($25) {
      label = 10;
      break;
     } else {
      $$0$ph$i$i$i = $$024$i$i$i;$$in$i$i$i = $24;
     }
    } else {
     $26 = ($22|0)<($13|0);
     if (!($26)) {
      label = 14;
      break;
     }
     $27 = ((($$024$i$i$i)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0|0);
     if ($29) {
      label = 13;
      break;
     } else {
      $$0$ph$i$i$i = $27;$$in$i$i$i = $28;
     }
    }
    $$0$i$i$i = $$0$ph$i$i$i;$$024$i$i$i = $$in$i$i$i;
   }
   if ((label|0) == 10) {
    $$020$i$i = $$024$i$i$i;$$025$i$i$i = $$024$i$i$i;
    break;
   }
   else if ((label|0) == 13) {
    $$020$i$i = $$024$i$i$i;$$025$i$i$i = $27;
    break;
   }
   else if ((label|0) == 14) {
    $$020$i$i = $$024$i$i$i;$$025$i$i$i = $$0$i$i$i;
    break;
   }
  }
 } while(0);
 $30 = HEAP32[$$025$i$i$i>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  $$0$i$i = $30;$48 = $13;
  $47 = ((($$0$i$i)) + 20|0);
  HEAP32[$47>>2] = $0;
  HEAP32[$vararg_buffer>>2] = 44632;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $48;
  _emscripten_log(0,($vararg_buffer|0));
  STACKTOP = sp;return;
 }
 $32 = (__Znwj(24)|0);
 $33 = ((($32)) + 16|0);
 HEAP32[$33>>2] = $13;
 $34 = ((($32)) + 20|0);
 HEAP32[$34>>2] = 0;
 HEAP32[$32>>2] = 0;
 $35 = ((($32)) + 4|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($32)) + 8|0);
 HEAP32[$36>>2] = $$020$i$i;
 HEAP32[$$025$i$i$i>>2] = $32;
 $37 = HEAP32[$16>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $43 = $32;
 } else {
  $40 = $38;
  HEAP32[$16>>2] = $40;
  $$pre$i$i$i = HEAP32[$$025$i$i$i>>2]|0;
  $43 = $$pre$i$i$i;
 }
 $41 = ((($15)) + 56|0);
 $42 = HEAP32[$41>>2]|0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($42,$43);
 $44 = ((($15)) + 60|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[$44>>2] = $46;
 $$pre = HEAP32[$12>>2]|0;
 $$0$i$i = $32;$48 = $$pre;
 $47 = ((($$0$i$i)) + 20|0);
 HEAP32[$47>>2] = $0;
 HEAP32[$vararg_buffer>>2] = 44632;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $48;
 _emscripten_log(0,($vararg_buffer|0));
 STACKTOP = sp;return;
}
function _main() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _init();
 return 0;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(49864);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($2|0),(44690|0));
 $3 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($3|0),(44695|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(44700);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(44705);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(44717);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(44731);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(44737);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(44752);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(44756);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(44769);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(44774);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(44788);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(44794);
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(44801|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($5|0),(44813|0));
 $6 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($6|0),4,(44846|0));
 $7 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($7|0),(44859|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(44875);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(44905);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(44942);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(44981);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(45012);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(45052);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(45081);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(45119);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(45149);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(45188);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(45220);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(45253);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(45286);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(45320);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(45353);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(45387);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(45418);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(45450);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 255;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $3 = $1;
 $4 = -32768 << 16 >> 16;
 $5 = 32767 << 16 >> 16;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 65535;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (152|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (160|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (168|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (176|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (184|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (192|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (200|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (208|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (216|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (224|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (232|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (240|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (48|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (248|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (272|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (56|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (576|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (568|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (560|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (552|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (544|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (536|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (528|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (520|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (504|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (512|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (496|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (488|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (472|0);
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (___strdup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024370$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0;
 var $$124469$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i200 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0;
 var $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0;
 var $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0;
 var $not$$i$i = 0, $not$$i197 = 0, $not$$i209 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i201 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i199 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[12323]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (49332 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[12323] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(49300)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (49332 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65|0)==($69|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[12323] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($79) + ($76)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(49312)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (49332 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[12323] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(49300)>>2] = $76;
     HEAP32[(49312)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(49296)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (49596 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $not$3$i = ($130|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $131 = (((($124)) + 16|0) + ($$sink14$i<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(0|0);
     if ($133) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01726$i = $124;$$01735$i = $128;$135 = $132;
      while(1) {
       $134 = ((($135)) + 4|0);
       $136 = HEAP32[$134>>2]|0;
       $137 = $136 & -8;
       $138 = (($137) - ($6))|0;
       $139 = ($138>>>0)<($$01735$i>>>0);
       $$$0173$i = $139 ? $138 : $$01735$i;
       $$$0172$i = $139 ? $135 : $$01726$i;
       $140 = ((($135)) + 16|0);
       $141 = HEAP32[$140>>2]|0;
       $not$$i = ($141|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $142 = (((($135)) + 16|0) + ($$sink1$i<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$135 = $143;
       }
      }
     }
     $145 = (($$0172$lcssa$i) + ($6)|0);
     $146 = ($$0172$lcssa$i>>>0)<($145>>>0);
     if ($146) {
      $147 = ((($$0172$lcssa$i)) + 24|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($$0172$lcssa$i)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==($$0172$lcssa$i|0);
      do {
       if ($151) {
        $156 = ((($$0172$lcssa$i)) + 20|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         $159 = ((($$0172$lcssa$i)) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $160;$$1178$i = $159;
         }
        } else {
         $$1176$i = $157;$$1178$i = $156;
        }
        while(1) {
         $162 = ((($$1176$i)) + 20|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0|0);
         if (!($164)) {
          $$1176$i = $163;$$1178$i = $162;
          continue;
         }
         $165 = ((($$1176$i)) + 16|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if ($167) {
          break;
         } else {
          $$1176$i = $166;$$1178$i = $165;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $152 = ((($$0172$lcssa$i)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 12|0);
        HEAP32[$154>>2] = $150;
        $155 = ((($150)) + 8|0);
        HEAP32[$155>>2] = $153;
        $$3$i = $150;
       }
      } while(0);
      $168 = ($148|0)==(0|0);
      do {
       if (!($168)) {
        $169 = ((($$0172$lcssa$i)) + 28|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (49596 + ($170<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($$0172$lcssa$i|0)==($172|0);
        if ($173) {
         HEAP32[$171>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $174 = 1 << $170;
          $175 = $174 ^ -1;
          $176 = $98 & $175;
          HEAP32[(49296)>>2] = $176;
          break;
         }
        } else {
         $177 = ((($148)) + 16|0);
         $178 = HEAP32[$177>>2]|0;
         $not$1$i = ($178|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $179 = (((($148)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$179>>2] = $$3$i;
         $180 = ($$3$i|0)==(0|0);
         if ($180) {
          break;
         }
        }
        $181 = ((($$3$i)) + 24|0);
        HEAP32[$181>>2] = $148;
        $182 = ((($$0172$lcssa$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $185 = ((($$3$i)) + 16|0);
         HEAP32[$185>>2] = $183;
         $186 = ((($183)) + 24|0);
         HEAP32[$186>>2] = $$3$i;
        }
        $187 = ((($$0172$lcssa$i)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if (!($189)) {
         $190 = ((($$3$i)) + 20|0);
         HEAP32[$190>>2] = $188;
         $191 = ((($188)) + 24|0);
         HEAP32[$191>>2] = $$3$i;
        }
       }
      } while(0);
      $192 = ($$0173$lcssa$i>>>0)<(16);
      if ($192) {
       $193 = (($$0173$lcssa$i) + ($6))|0;
       $194 = $193 | 3;
       $195 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$195>>2] = $194;
       $196 = (($$0172$lcssa$i) + ($193)|0);
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $198 | 1;
       HEAP32[$197>>2] = $199;
      } else {
       $200 = $6 | 3;
       $201 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$201>>2] = $200;
       $202 = $$0173$lcssa$i | 1;
       $203 = ((($145)) + 4|0);
       HEAP32[$203>>2] = $202;
       $204 = (($145) + ($$0173$lcssa$i)|0);
       HEAP32[$204>>2] = $$0173$lcssa$i;
       $205 = ($33|0)==(0);
       if (!($205)) {
        $206 = HEAP32[(49312)>>2]|0;
        $207 = $33 >>> 3;
        $208 = $207 << 1;
        $209 = (49332 + ($208<<2)|0);
        $210 = 1 << $207;
        $211 = $8 & $210;
        $212 = ($211|0)==(0);
        if ($212) {
         $213 = $8 | $210;
         HEAP32[12323] = $213;
         $$pre$i = ((($209)) + 8|0);
         $$0$i = $209;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $214 = ((($209)) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $$0$i = $215;$$pre$phi$iZ2D = $214;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $206;
        $216 = ((($$0$i)) + 12|0);
        HEAP32[$216>>2] = $206;
        $217 = ((($206)) + 8|0);
        HEAP32[$217>>2] = $$0$i;
        $218 = ((($206)) + 12|0);
        HEAP32[$218>>2] = $209;
       }
       HEAP32[(49300)>>2] = $$0173$lcssa$i;
       HEAP32[(49312)>>2] = $145;
      }
      $219 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $219;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $220 = ($0>>>0)>(4294967231);
   if ($220) {
    $$0192 = -1;
   } else {
    $221 = (($0) + 11)|0;
    $222 = $221 & -8;
    $223 = HEAP32[(49296)>>2]|0;
    $224 = ($223|0)==(0);
    if ($224) {
     $$0192 = $222;
    } else {
     $225 = (0 - ($222))|0;
     $226 = $221 >>> 8;
     $227 = ($226|0)==(0);
     if ($227) {
      $$0336$i = 0;
     } else {
      $228 = ($222>>>0)>(16777215);
      if ($228) {
       $$0336$i = 31;
      } else {
       $229 = (($226) + 1048320)|0;
       $230 = $229 >>> 16;
       $231 = $230 & 8;
       $232 = $226 << $231;
       $233 = (($232) + 520192)|0;
       $234 = $233 >>> 16;
       $235 = $234 & 4;
       $236 = $235 | $231;
       $237 = $232 << $235;
       $238 = (($237) + 245760)|0;
       $239 = $238 >>> 16;
       $240 = $239 & 2;
       $241 = $236 | $240;
       $242 = (14 - ($241))|0;
       $243 = $237 << $240;
       $244 = $243 >>> 15;
       $245 = (($242) + ($244))|0;
       $246 = $245 << 1;
       $247 = (($245) + 7)|0;
       $248 = $222 >>> $247;
       $249 = $248 & 1;
       $250 = $249 | $246;
       $$0336$i = $250;
      }
     }
     $251 = (49596 + ($$0336$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     L74: do {
      if ($253) {
       $$2333$i = 0;$$3$i200 = 0;$$3328$i = $225;
       label = 57;
      } else {
       $254 = ($$0336$i|0)==(31);
       $255 = $$0336$i >>> 1;
       $256 = (25 - ($255))|0;
       $257 = $254 ? 0 : $256;
       $258 = $222 << $257;
       $$0320$i = 0;$$0325$i = $225;$$0331$i = $252;$$0337$i = $258;$$0340$i = 0;
       while(1) {
        $259 = ((($$0331$i)) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 & -8;
        $262 = (($261) - ($222))|0;
        $263 = ($262>>>0)<($$0325$i>>>0);
        if ($263) {
         $264 = ($262|0)==(0);
         if ($264) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $262;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $265 = ((($$0331$i)) + 20|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $$0337$i >>> 31;
        $268 = (((($$0331$i)) + 16|0) + ($267<<2)|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ($266|0)==(0|0);
        $271 = ($266|0)==($269|0);
        $or$cond2$i199 = $270 | $271;
        $$1341$i = $or$cond2$i199 ? $$0340$i : $266;
        $272 = ($269|0)==(0|0);
        $not$5$i = $272 ^ 1;
        $273 = $not$5$i&1;
        $$0337$$i = $$0337$i << $273;
        if ($272) {
         $$2333$i = $$1341$i;$$3$i200 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $269;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $274 = ($$2333$i|0)==(0|0);
      $275 = ($$3$i200|0)==(0|0);
      $or$cond$i201 = $274 & $275;
      if ($or$cond$i201) {
       $276 = 2 << $$0336$i;
       $277 = (0 - ($276))|0;
       $278 = $276 | $277;
       $279 = $223 & $278;
       $280 = ($279|0)==(0);
       if ($280) {
        $$0192 = $222;
        break;
       }
       $281 = (0 - ($279))|0;
       $282 = $279 & $281;
       $283 = (($282) + -1)|0;
       $284 = $283 >>> 12;
       $285 = $284 & 16;
       $286 = $283 >>> $285;
       $287 = $286 >>> 5;
       $288 = $287 & 8;
       $289 = $288 | $285;
       $290 = $286 >>> $288;
       $291 = $290 >>> 2;
       $292 = $291 & 4;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 2;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = $298 >>> 1;
       $300 = $299 & 1;
       $301 = $297 | $300;
       $302 = $298 >>> $300;
       $303 = (($301) + ($302))|0;
       $304 = (49596 + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $305;
      } else {
       $$4$ph$i = $$3$i200;$$4335$ph$i = $$2333$i;
      }
      $306 = ($$4335$ph$i|0)==(0|0);
      if ($306) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $307 = ((($$43359$i)) + 4|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $308 & -8;
       $310 = (($309) - ($222))|0;
       $311 = ($310>>>0)<($$432910$i>>>0);
       $$$4329$i = $311 ? $310 : $$432910$i;
       $$4335$$4$i = $311 ? $$43359$i : $$411$i;
       $312 = ((($$43359$i)) + 16|0);
       $313 = HEAP32[$312>>2]|0;
       $not$1$i203 = ($313|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $314 = (((($$43359$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = ($315|0)==(0|0);
       if ($316) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $315;
        label = 61;
       }
      }
     }
     $317 = ($$4$lcssa$i|0)==(0|0);
     if ($317) {
      $$0192 = $222;
     } else {
      $318 = HEAP32[(49300)>>2]|0;
      $319 = (($318) - ($222))|0;
      $320 = ($$4329$lcssa$i>>>0)<($319>>>0);
      if ($320) {
       $321 = (($$4$lcssa$i) + ($222)|0);
       $322 = ($$4$lcssa$i>>>0)<($321>>>0);
       if (!($322)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $323 = ((($$4$lcssa$i)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($$4$lcssa$i)) + 12|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==($$4$lcssa$i|0);
       do {
        if ($327) {
         $332 = ((($$4$lcssa$i)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(0|0);
         if ($334) {
          $335 = ((($$4$lcssa$i)) + 16|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ($336|0)==(0|0);
          if ($337) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $336;$$1351$i = $335;
          }
         } else {
          $$1347$i = $333;$$1351$i = $332;
         }
         while(1) {
          $338 = ((($$1347$i)) + 20|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = ($339|0)==(0|0);
          if (!($340)) {
           $$1347$i = $339;$$1351$i = $338;
           continue;
          }
          $341 = ((($$1347$i)) + 16|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ($342|0)==(0|0);
          if ($343) {
           break;
          } else {
           $$1347$i = $342;$$1351$i = $341;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $328 = ((($$4$lcssa$i)) + 8|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 12|0);
         HEAP32[$330>>2] = $326;
         $331 = ((($326)) + 8|0);
         HEAP32[$331>>2] = $329;
         $$3349$i = $326;
        }
       } while(0);
       $344 = ($324|0)==(0|0);
       do {
        if ($344) {
         $426 = $223;
        } else {
         $345 = ((($$4$lcssa$i)) + 28|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (49596 + ($346<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($$4$lcssa$i|0)==($348|0);
         if ($349) {
          HEAP32[$347>>2] = $$3349$i;
          $cond$i208 = ($$3349$i|0)==(0|0);
          if ($cond$i208) {
           $350 = 1 << $346;
           $351 = $350 ^ -1;
           $352 = $223 & $351;
           HEAP32[(49296)>>2] = $352;
           $426 = $352;
           break;
          }
         } else {
          $353 = ((($324)) + 16|0);
          $354 = HEAP32[$353>>2]|0;
          $not$$i209 = ($354|0)!=($$4$lcssa$i|0);
          $$sink3$i = $not$$i209&1;
          $355 = (((($324)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$355>>2] = $$3349$i;
          $356 = ($$3349$i|0)==(0|0);
          if ($356) {
           $426 = $223;
           break;
          }
         }
         $357 = ((($$3349$i)) + 24|0);
         HEAP32[$357>>2] = $324;
         $358 = ((($$4$lcssa$i)) + 16|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==(0|0);
         if (!($360)) {
          $361 = ((($$3349$i)) + 16|0);
          HEAP32[$361>>2] = $359;
          $362 = ((($359)) + 24|0);
          HEAP32[$362>>2] = $$3349$i;
         }
         $363 = ((($$4$lcssa$i)) + 20|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if ($365) {
          $426 = $223;
         } else {
          $366 = ((($$3349$i)) + 20|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
          $426 = $223;
         }
        }
       } while(0);
       $368 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($368) {
         $369 = (($$4329$lcssa$i) + ($222))|0;
         $370 = $369 | 3;
         $371 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$371>>2] = $370;
         $372 = (($$4$lcssa$i) + ($369)|0);
         $373 = ((($372)) + 4|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 | 1;
         HEAP32[$373>>2] = $375;
        } else {
         $376 = $222 | 3;
         $377 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$377>>2] = $376;
         $378 = $$4329$lcssa$i | 1;
         $379 = ((($321)) + 4|0);
         HEAP32[$379>>2] = $378;
         $380 = (($321) + ($$4329$lcssa$i)|0);
         HEAP32[$380>>2] = $$4329$lcssa$i;
         $381 = $$4329$lcssa$i >>> 3;
         $382 = ($$4329$lcssa$i>>>0)<(256);
         if ($382) {
          $383 = $381 << 1;
          $384 = (49332 + ($383<<2)|0);
          $385 = HEAP32[12323]|0;
          $386 = 1 << $381;
          $387 = $385 & $386;
          $388 = ($387|0)==(0);
          if ($388) {
           $389 = $385 | $386;
           HEAP32[12323] = $389;
           $$pre$i210 = ((($384)) + 8|0);
           $$0345$i = $384;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $390 = ((($384)) + 8|0);
           $391 = HEAP32[$390>>2]|0;
           $$0345$i = $391;$$pre$phi$i211Z2D = $390;
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $321;
          $392 = ((($$0345$i)) + 12|0);
          HEAP32[$392>>2] = $321;
          $393 = ((($321)) + 8|0);
          HEAP32[$393>>2] = $$0345$i;
          $394 = ((($321)) + 12|0);
          HEAP32[$394>>2] = $384;
          break;
         }
         $395 = $$4329$lcssa$i >>> 8;
         $396 = ($395|0)==(0);
         if ($396) {
          $$0339$i = 0;
         } else {
          $397 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($397) {
           $$0339$i = 31;
          } else {
           $398 = (($395) + 1048320)|0;
           $399 = $398 >>> 16;
           $400 = $399 & 8;
           $401 = $395 << $400;
           $402 = (($401) + 520192)|0;
           $403 = $402 >>> 16;
           $404 = $403 & 4;
           $405 = $404 | $400;
           $406 = $401 << $404;
           $407 = (($406) + 245760)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 2;
           $410 = $405 | $409;
           $411 = (14 - ($410))|0;
           $412 = $406 << $409;
           $413 = $412 >>> 15;
           $414 = (($411) + ($413))|0;
           $415 = $414 << 1;
           $416 = (($414) + 7)|0;
           $417 = $$4329$lcssa$i >>> $416;
           $418 = $417 & 1;
           $419 = $418 | $415;
           $$0339$i = $419;
          }
         }
         $420 = (49596 + ($$0339$i<<2)|0);
         $421 = ((($321)) + 28|0);
         HEAP32[$421>>2] = $$0339$i;
         $422 = ((($321)) + 16|0);
         $423 = ((($422)) + 4|0);
         HEAP32[$423>>2] = 0;
         HEAP32[$422>>2] = 0;
         $424 = 1 << $$0339$i;
         $425 = $426 & $424;
         $427 = ($425|0)==(0);
         if ($427) {
          $428 = $426 | $424;
          HEAP32[(49296)>>2] = $428;
          HEAP32[$420>>2] = $321;
          $429 = ((($321)) + 24|0);
          HEAP32[$429>>2] = $420;
          $430 = ((($321)) + 12|0);
          HEAP32[$430>>2] = $321;
          $431 = ((($321)) + 8|0);
          HEAP32[$431>>2] = $321;
          break;
         }
         $432 = HEAP32[$420>>2]|0;
         $433 = ($$0339$i|0)==(31);
         $434 = $$0339$i >>> 1;
         $435 = (25 - ($434))|0;
         $436 = $433 ? 0 : $435;
         $437 = $$4329$lcssa$i << $436;
         $$0322$i = $437;$$0323$i = $432;
         while(1) {
          $438 = ((($$0323$i)) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = $439 & -8;
          $441 = ($440|0)==($$4329$lcssa$i|0);
          if ($441) {
           label = 97;
           break;
          }
          $442 = $$0322$i >>> 31;
          $443 = (((($$0323$i)) + 16|0) + ($442<<2)|0);
          $444 = $$0322$i << 1;
          $445 = HEAP32[$443>>2]|0;
          $446 = ($445|0)==(0|0);
          if ($446) {
           label = 96;
           break;
          } else {
           $$0322$i = $444;$$0323$i = $445;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$443>>2] = $321;
          $447 = ((($321)) + 24|0);
          HEAP32[$447>>2] = $$0323$i;
          $448 = ((($321)) + 12|0);
          HEAP32[$448>>2] = $321;
          $449 = ((($321)) + 8|0);
          HEAP32[$449>>2] = $321;
          break;
         }
         else if ((label|0) == 97) {
          $450 = ((($$0323$i)) + 8|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = ((($451)) + 12|0);
          HEAP32[$452>>2] = $321;
          HEAP32[$450>>2] = $321;
          $453 = ((($321)) + 8|0);
          HEAP32[$453>>2] = $451;
          $454 = ((($321)) + 12|0);
          HEAP32[$454>>2] = $$0323$i;
          $455 = ((($321)) + 24|0);
          HEAP32[$455>>2] = 0;
          break;
         }
        }
       } while(0);
       $456 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $456;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $222;
      }
     }
    }
   }
  }
 } while(0);
 $457 = HEAP32[(49300)>>2]|0;
 $458 = ($457>>>0)<($$0192>>>0);
 if (!($458)) {
  $459 = (($457) - ($$0192))|0;
  $460 = HEAP32[(49312)>>2]|0;
  $461 = ($459>>>0)>(15);
  if ($461) {
   $462 = (($460) + ($$0192)|0);
   HEAP32[(49312)>>2] = $462;
   HEAP32[(49300)>>2] = $459;
   $463 = $459 | 1;
   $464 = ((($462)) + 4|0);
   HEAP32[$464>>2] = $463;
   $465 = (($462) + ($459)|0);
   HEAP32[$465>>2] = $459;
   $466 = $$0192 | 3;
   $467 = ((($460)) + 4|0);
   HEAP32[$467>>2] = $466;
  } else {
   HEAP32[(49300)>>2] = 0;
   HEAP32[(49312)>>2] = 0;
   $468 = $457 | 3;
   $469 = ((($460)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($460) + ($457)|0);
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | 1;
   HEAP32[$471>>2] = $473;
  }
  $474 = ((($460)) + 8|0);
  $$0 = $474;
  STACKTOP = sp;return ($$0|0);
 }
 $475 = HEAP32[(49304)>>2]|0;
 $476 = ($475>>>0)>($$0192>>>0);
 if ($476) {
  $477 = (($475) - ($$0192))|0;
  HEAP32[(49304)>>2] = $477;
  $478 = HEAP32[(49316)>>2]|0;
  $479 = (($478) + ($$0192)|0);
  HEAP32[(49316)>>2] = $479;
  $480 = $477 | 1;
  $481 = ((($479)) + 4|0);
  HEAP32[$481>>2] = $480;
  $482 = $$0192 | 3;
  $483 = ((($478)) + 4|0);
  HEAP32[$483>>2] = $482;
  $484 = ((($478)) + 8|0);
  $$0 = $484;
  STACKTOP = sp;return ($$0|0);
 }
 $485 = HEAP32[12441]|0;
 $486 = ($485|0)==(0);
 if ($486) {
  HEAP32[(49772)>>2] = 4096;
  HEAP32[(49768)>>2] = 4096;
  HEAP32[(49776)>>2] = -1;
  HEAP32[(49780)>>2] = -1;
  HEAP32[(49784)>>2] = 0;
  HEAP32[(49736)>>2] = 0;
  $487 = $1;
  $488 = $487 & -16;
  $489 = $488 ^ 1431655768;
  HEAP32[$1>>2] = $489;
  HEAP32[12441] = $489;
  $493 = 4096;
 } else {
  $$pre$i195 = HEAP32[(49772)>>2]|0;
  $493 = $$pre$i195;
 }
 $490 = (($$0192) + 48)|0;
 $491 = (($$0192) + 47)|0;
 $492 = (($493) + ($491))|0;
 $494 = (0 - ($493))|0;
 $495 = $492 & $494;
 $496 = ($495>>>0)>($$0192>>>0);
 if (!($496)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $497 = HEAP32[(49732)>>2]|0;
 $498 = ($497|0)==(0);
 if (!($498)) {
  $499 = HEAP32[(49724)>>2]|0;
  $500 = (($499) + ($495))|0;
  $501 = ($500>>>0)<=($499>>>0);
  $502 = ($500>>>0)>($497>>>0);
  $or$cond1$i = $501 | $502;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $503 = HEAP32[(49736)>>2]|0;
 $504 = $503 & 4;
 $505 = ($504|0)==(0);
 L167: do {
  if ($505) {
   $506 = HEAP32[(49316)>>2]|0;
   $507 = ($506|0)==(0|0);
   L169: do {
    if ($507) {
     label = 118;
    } else {
     $$0$i20$i = (49740);
     while(1) {
      $508 = HEAP32[$$0$i20$i>>2]|0;
      $509 = ($508>>>0)>($506>>>0);
      if (!($509)) {
       $510 = ((($$0$i20$i)) + 4|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($508) + ($511)|0);
       $513 = ($512>>>0)>($506>>>0);
       if ($513) {
        break;
       }
      }
      $514 = ((($$0$i20$i)) + 8|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if ($516) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $515;
      }
     }
     $539 = (($492) - ($475))|0;
     $540 = $539 & $494;
     $541 = ($540>>>0)<(2147483647);
     if ($541) {
      $542 = (_sbrk(($540|0))|0);
      $543 = HEAP32[$$0$i20$i>>2]|0;
      $544 = HEAP32[$510>>2]|0;
      $545 = (($543) + ($544)|0);
      $546 = ($542|0)==($545|0);
      if ($546) {
       $547 = ($542|0)==((-1)|0);
       if ($547) {
        $$2234243136$i = $540;
       } else {
        $$723947$i = $540;$$748$i = $542;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $542;$$2253$ph$i = $540;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $517 = (_sbrk(0)|0);
     $518 = ($517|0)==((-1)|0);
     if ($518) {
      $$2234243136$i = 0;
     } else {
      $519 = $517;
      $520 = HEAP32[(49768)>>2]|0;
      $521 = (($520) + -1)|0;
      $522 = $521 & $519;
      $523 = ($522|0)==(0);
      $524 = (($521) + ($519))|0;
      $525 = (0 - ($520))|0;
      $526 = $524 & $525;
      $527 = (($526) - ($519))|0;
      $528 = $523 ? 0 : $527;
      $$$i = (($528) + ($495))|0;
      $529 = HEAP32[(49724)>>2]|0;
      $530 = (($$$i) + ($529))|0;
      $531 = ($$$i>>>0)>($$0192>>>0);
      $532 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $531 & $532;
      if ($or$cond$i) {
       $533 = HEAP32[(49732)>>2]|0;
       $534 = ($533|0)==(0);
       if (!($534)) {
        $535 = ($530>>>0)<=($529>>>0);
        $536 = ($530>>>0)>($533>>>0);
        $or$cond2$i = $535 | $536;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $537 = (_sbrk(($$$i|0))|0);
       $538 = ($537|0)==($517|0);
       if ($538) {
        $$723947$i = $$$i;$$748$i = $517;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $537;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $548 = (0 - ($$2253$ph$i))|0;
     $549 = ($$2247$ph$i|0)!=((-1)|0);
     $550 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $550 & $549;
     $551 = ($490>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $551 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $561 = ($$2247$ph$i|0)==((-1)|0);
      if ($561) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $552 = HEAP32[(49772)>>2]|0;
     $553 = (($491) - ($$2253$ph$i))|0;
     $554 = (($553) + ($552))|0;
     $555 = (0 - ($552))|0;
     $556 = $554 & $555;
     $557 = ($556>>>0)<(2147483647);
     if (!($557)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $558 = (_sbrk(($556|0))|0);
     $559 = ($558|0)==((-1)|0);
     if ($559) {
      (_sbrk(($548|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $560 = (($556) + ($$2253$ph$i))|0;
      $$723947$i = $560;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $562 = HEAP32[(49736)>>2]|0;
   $563 = $562 | 4;
   HEAP32[(49736)>>2] = $563;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $564 = ($495>>>0)<(2147483647);
  if ($564) {
   $565 = (_sbrk(($495|0))|0);
   $566 = (_sbrk(0)|0);
   $567 = ($565|0)!=((-1)|0);
   $568 = ($566|0)!=((-1)|0);
   $or$cond5$i = $567 & $568;
   $569 = ($565>>>0)<($566>>>0);
   $or$cond11$i = $569 & $or$cond5$i;
   $570 = $566;
   $571 = $565;
   $572 = (($570) - ($571))|0;
   $573 = (($$0192) + 40)|0;
   $574 = ($572>>>0)>($573>>>0);
   $$$4236$i = $574 ? $572 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $575 = ($565|0)==((-1)|0);
   $not$$i197 = $574 ^ 1;
   $576 = $575 | $not$$i197;
   $or$cond49$i = $576 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $565;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $577 = HEAP32[(49724)>>2]|0;
  $578 = (($577) + ($$723947$i))|0;
  HEAP32[(49724)>>2] = $578;
  $579 = HEAP32[(49728)>>2]|0;
  $580 = ($578>>>0)>($579>>>0);
  if ($580) {
   HEAP32[(49728)>>2] = $578;
  }
  $581 = HEAP32[(49316)>>2]|0;
  $582 = ($581|0)==(0|0);
  do {
   if ($582) {
    $583 = HEAP32[(49308)>>2]|0;
    $584 = ($583|0)==(0|0);
    $585 = ($$748$i>>>0)<($583>>>0);
    $or$cond12$i = $584 | $585;
    if ($or$cond12$i) {
     HEAP32[(49308)>>2] = $$748$i;
    }
    HEAP32[(49740)>>2] = $$748$i;
    HEAP32[(49744)>>2] = $$723947$i;
    HEAP32[(49752)>>2] = 0;
    $586 = HEAP32[12441]|0;
    HEAP32[(49328)>>2] = $586;
    HEAP32[(49324)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $587 = $$01$i$i << 1;
     $588 = (49332 + ($587<<2)|0);
     $589 = ((($588)) + 12|0);
     HEAP32[$589>>2] = $588;
     $590 = ((($588)) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($591|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $591;
     }
    }
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(49316)>>2] = $600;
    HEAP32[(49304)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($600) + ($601)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(49780)>>2]|0;
    HEAP32[(49320)>>2] = $606;
   } else {
    $$024370$i = (49740);
    while(1) {
     $607 = HEAP32[$$024370$i>>2]|0;
     $608 = ((($$024370$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 145;
      break;
     }
     $612 = ((($$024370$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024370$i = $613;
     }
    }
    if ((label|0) == 145) {
     $615 = ((($$024370$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($581>>>0)>=($607>>>0);
      $620 = ($581>>>0)<($$748$i>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(49304)>>2]|0;
       $623 = ((($581)) + 8|0);
       $624 = $623;
       $625 = $624 & 7;
       $626 = ($625|0)==(0);
       $627 = (0 - ($624))|0;
       $628 = $627 & 7;
       $629 = $626 ? 0 : $628;
       $630 = (($581) + ($629)|0);
       $631 = (($$723947$i) - ($629))|0;
       $632 = (($622) + ($631))|0;
       HEAP32[(49316)>>2] = $630;
       HEAP32[(49304)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($630)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($630) + ($632)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(49780)>>2]|0;
       HEAP32[(49320)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(49308)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(49308)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (49740);
    while(1) {
     $641 = HEAP32[$$124469$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 153;
      break;
     }
     $643 = ((($$124469$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124469$i = $644;
     }
    }
    if ((label|0) == 153) {
     $646 = ((($$124469$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $650 = ((($$124469$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($668|0)==($581|0);
      do {
       if ($676) {
        $677 = HEAP32[(49304)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(49304)>>2] = $678;
        HEAP32[(49316)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(49312)>>2]|0;
        $682 = ($668|0)==($681|0);
        if ($682) {
         $683 = HEAP32[(49300)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(49300)>>2] = $684;
         HEAP32[(49312)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L237: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[12323]|0;
            $703 = $702 & $701;
            HEAP32[12323] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (49596 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($668|0)==($731|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(49296)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(49296)>>2] = $736;
             break L237;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $not$$i$i = ($738|0)!=($668|0);
             $$sink1$i$i = $not$$i$i&1;
             $739 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$739>>2] = $$3$i$i;
             $740 = ($$3$i$i|0)==(0|0);
             if ($740) {
              break L237;
             }
            }
           } while(0);
           $741 = ((($$3$i$i)) + 24|0);
           HEAP32[$741>>2] = $707;
           $742 = ((($668)) + 16|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = ($743|0)==(0|0);
           if (!($744)) {
            $745 = ((($$3$i$i)) + 16|0);
            HEAP32[$745>>2] = $743;
            $746 = ((($743)) + 24|0);
            HEAP32[$746>>2] = $$3$i$i;
           }
           $747 = ((($742)) + 4|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ($748|0)==(0|0);
           if ($749) {
            break;
           }
           $750 = ((($$3$i$i)) + 20|0);
           HEAP32[$750>>2] = $748;
           $751 = ((($748)) + 24|0);
           HEAP32[$751>>2] = $$3$i$i;
          }
         } while(0);
         $752 = (($668) + ($692)|0);
         $753 = (($692) + ($673))|0;
         $$0$i$i = $752;$$0260$i$i = $753;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $754 = ((($$0$i$i)) + 4|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = $755 & -2;
        HEAP32[$754>>2] = $756;
        $757 = $$0260$i$i | 1;
        $758 = ((($672)) + 4|0);
        HEAP32[$758>>2] = $757;
        $759 = (($672) + ($$0260$i$i)|0);
        HEAP32[$759>>2] = $$0260$i$i;
        $760 = $$0260$i$i >>> 3;
        $761 = ($$0260$i$i>>>0)<(256);
        if ($761) {
         $762 = $760 << 1;
         $763 = (49332 + ($762<<2)|0);
         $764 = HEAP32[12323]|0;
         $765 = 1 << $760;
         $766 = $764 & $765;
         $767 = ($766|0)==(0);
         if ($767) {
          $768 = $764 | $765;
          HEAP32[12323] = $768;
          $$pre$i17$i = ((($763)) + 8|0);
          $$0268$i$i = $763;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $769 = ((($763)) + 8|0);
          $770 = HEAP32[$769>>2]|0;
          $$0268$i$i = $770;$$pre$phi$i18$iZ2D = $769;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $771 = ((($$0268$i$i)) + 12|0);
         HEAP32[$771>>2] = $672;
         $772 = ((($672)) + 8|0);
         HEAP32[$772>>2] = $$0268$i$i;
         $773 = ((($672)) + 12|0);
         HEAP32[$773>>2] = $763;
         break;
        }
        $774 = $$0260$i$i >>> 8;
        $775 = ($774|0)==(0);
        do {
         if ($775) {
          $$0269$i$i = 0;
         } else {
          $776 = ($$0260$i$i>>>0)>(16777215);
          if ($776) {
           $$0269$i$i = 31;
           break;
          }
          $777 = (($774) + 1048320)|0;
          $778 = $777 >>> 16;
          $779 = $778 & 8;
          $780 = $774 << $779;
          $781 = (($780) + 520192)|0;
          $782 = $781 >>> 16;
          $783 = $782 & 4;
          $784 = $783 | $779;
          $785 = $780 << $783;
          $786 = (($785) + 245760)|0;
          $787 = $786 >>> 16;
          $788 = $787 & 2;
          $789 = $784 | $788;
          $790 = (14 - ($789))|0;
          $791 = $785 << $788;
          $792 = $791 >>> 15;
          $793 = (($790) + ($792))|0;
          $794 = $793 << 1;
          $795 = (($793) + 7)|0;
          $796 = $$0260$i$i >>> $795;
          $797 = $796 & 1;
          $798 = $797 | $794;
          $$0269$i$i = $798;
         }
        } while(0);
        $799 = (49596 + ($$0269$i$i<<2)|0);
        $800 = ((($672)) + 28|0);
        HEAP32[$800>>2] = $$0269$i$i;
        $801 = ((($672)) + 16|0);
        $802 = ((($801)) + 4|0);
        HEAP32[$802>>2] = 0;
        HEAP32[$801>>2] = 0;
        $803 = HEAP32[(49296)>>2]|0;
        $804 = 1 << $$0269$i$i;
        $805 = $803 & $804;
        $806 = ($805|0)==(0);
        if ($806) {
         $807 = $803 | $804;
         HEAP32[(49296)>>2] = $807;
         HEAP32[$799>>2] = $672;
         $808 = ((($672)) + 24|0);
         HEAP32[$808>>2] = $799;
         $809 = ((($672)) + 12|0);
         HEAP32[$809>>2] = $672;
         $810 = ((($672)) + 8|0);
         HEAP32[$810>>2] = $672;
         break;
        }
        $811 = HEAP32[$799>>2]|0;
        $812 = ($$0269$i$i|0)==(31);
        $813 = $$0269$i$i >>> 1;
        $814 = (25 - ($813))|0;
        $815 = $812 ? 0 : $814;
        $816 = $$0260$i$i << $815;
        $$0261$i$i = $816;$$0262$i$i = $811;
        while(1) {
         $817 = ((($$0262$i$i)) + 4|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = $818 & -8;
         $820 = ($819|0)==($$0260$i$i|0);
         if ($820) {
          label = 194;
          break;
         }
         $821 = $$0261$i$i >>> 31;
         $822 = (((($$0262$i$i)) + 16|0) + ($821<<2)|0);
         $823 = $$0261$i$i << 1;
         $824 = HEAP32[$822>>2]|0;
         $825 = ($824|0)==(0|0);
         if ($825) {
          label = 193;
          break;
         } else {
          $$0261$i$i = $823;$$0262$i$i = $824;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$822>>2] = $672;
         $826 = ((($672)) + 24|0);
         HEAP32[$826>>2] = $$0262$i$i;
         $827 = ((($672)) + 12|0);
         HEAP32[$827>>2] = $672;
         $828 = ((($672)) + 8|0);
         HEAP32[$828>>2] = $672;
         break;
        }
        else if ((label|0) == 194) {
         $829 = ((($$0262$i$i)) + 8|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = ((($830)) + 12|0);
         HEAP32[$831>>2] = $672;
         HEAP32[$829>>2] = $672;
         $832 = ((($672)) + 8|0);
         HEAP32[$832>>2] = $830;
         $833 = ((($672)) + 12|0);
         HEAP32[$833>>2] = $$0262$i$i;
         $834 = ((($672)) + 24|0);
         HEAP32[$834>>2] = 0;
         break;
        }
       }
      } while(0);
      $959 = ((($660)) + 8|0);
      $$0 = $959;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (49740);
    while(1) {
     $835 = HEAP32[$$0$i$i$i>>2]|0;
     $836 = ($835>>>0)>($581>>>0);
     if (!($836)) {
      $837 = ((($$0$i$i$i)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) + ($838)|0);
      $840 = ($839>>>0)>($581>>>0);
      if ($840) {
       break;
      }
     }
     $841 = ((($$0$i$i$i)) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $$0$i$i$i = $842;
    }
    $843 = ((($839)) + -47|0);
    $844 = ((($843)) + 8|0);
    $845 = $844;
    $846 = $845 & 7;
    $847 = ($846|0)==(0);
    $848 = (0 - ($845))|0;
    $849 = $848 & 7;
    $850 = $847 ? 0 : $849;
    $851 = (($843) + ($850)|0);
    $852 = ((($581)) + 16|0);
    $853 = ($851>>>0)<($852>>>0);
    $854 = $853 ? $581 : $851;
    $855 = ((($854)) + 8|0);
    $856 = ((($854)) + 24|0);
    $857 = (($$723947$i) + -40)|0;
    $858 = ((($$748$i)) + 8|0);
    $859 = $858;
    $860 = $859 & 7;
    $861 = ($860|0)==(0);
    $862 = (0 - ($859))|0;
    $863 = $862 & 7;
    $864 = $861 ? 0 : $863;
    $865 = (($$748$i) + ($864)|0);
    $866 = (($857) - ($864))|0;
    HEAP32[(49316)>>2] = $865;
    HEAP32[(49304)>>2] = $866;
    $867 = $866 | 1;
    $868 = ((($865)) + 4|0);
    HEAP32[$868>>2] = $867;
    $869 = (($865) + ($866)|0);
    $870 = ((($869)) + 4|0);
    HEAP32[$870>>2] = 40;
    $871 = HEAP32[(49780)>>2]|0;
    HEAP32[(49320)>>2] = $871;
    $872 = ((($854)) + 4|0);
    HEAP32[$872>>2] = 27;
    ;HEAP32[$855>>2]=HEAP32[(49740)>>2]|0;HEAP32[$855+4>>2]=HEAP32[(49740)+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[(49740)+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[(49740)+12>>2]|0;
    HEAP32[(49740)>>2] = $$748$i;
    HEAP32[(49744)>>2] = $$723947$i;
    HEAP32[(49752)>>2] = 0;
    HEAP32[(49748)>>2] = $855;
    $874 = $856;
    while(1) {
     $873 = ((($874)) + 4|0);
     HEAP32[$873>>2] = 7;
     $875 = ((($874)) + 8|0);
     $876 = ($875>>>0)<($839>>>0);
     if ($876) {
      $874 = $873;
     } else {
      break;
     }
    }
    $877 = ($854|0)==($581|0);
    if (!($877)) {
     $878 = $854;
     $879 = $581;
     $880 = (($878) - ($879))|0;
     $881 = HEAP32[$872>>2]|0;
     $882 = $881 & -2;
     HEAP32[$872>>2] = $882;
     $883 = $880 | 1;
     $884 = ((($581)) + 4|0);
     HEAP32[$884>>2] = $883;
     HEAP32[$854>>2] = $880;
     $885 = $880 >>> 3;
     $886 = ($880>>>0)<(256);
     if ($886) {
      $887 = $885 << 1;
      $888 = (49332 + ($887<<2)|0);
      $889 = HEAP32[12323]|0;
      $890 = 1 << $885;
      $891 = $889 & $890;
      $892 = ($891|0)==(0);
      if ($892) {
       $893 = $889 | $890;
       HEAP32[12323] = $893;
       $$pre$i$i = ((($888)) + 8|0);
       $$0206$i$i = $888;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $894 = ((($888)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $$0206$i$i = $895;$$pre$phi$i$iZ2D = $894;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $581;
      $896 = ((($$0206$i$i)) + 12|0);
      HEAP32[$896>>2] = $581;
      $897 = ((($581)) + 8|0);
      HEAP32[$897>>2] = $$0206$i$i;
      $898 = ((($581)) + 12|0);
      HEAP32[$898>>2] = $888;
      break;
     }
     $899 = $880 >>> 8;
     $900 = ($899|0)==(0);
     if ($900) {
      $$0207$i$i = 0;
     } else {
      $901 = ($880>>>0)>(16777215);
      if ($901) {
       $$0207$i$i = 31;
      } else {
       $902 = (($899) + 1048320)|0;
       $903 = $902 >>> 16;
       $904 = $903 & 8;
       $905 = $899 << $904;
       $906 = (($905) + 520192)|0;
       $907 = $906 >>> 16;
       $908 = $907 & 4;
       $909 = $908 | $904;
       $910 = $905 << $908;
       $911 = (($910) + 245760)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 2;
       $914 = $909 | $913;
       $915 = (14 - ($914))|0;
       $916 = $910 << $913;
       $917 = $916 >>> 15;
       $918 = (($915) + ($917))|0;
       $919 = $918 << 1;
       $920 = (($918) + 7)|0;
       $921 = $880 >>> $920;
       $922 = $921 & 1;
       $923 = $922 | $919;
       $$0207$i$i = $923;
      }
     }
     $924 = (49596 + ($$0207$i$i<<2)|0);
     $925 = ((($581)) + 28|0);
     HEAP32[$925>>2] = $$0207$i$i;
     $926 = ((($581)) + 20|0);
     HEAP32[$926>>2] = 0;
     HEAP32[$852>>2] = 0;
     $927 = HEAP32[(49296)>>2]|0;
     $928 = 1 << $$0207$i$i;
     $929 = $927 & $928;
     $930 = ($929|0)==(0);
     if ($930) {
      $931 = $927 | $928;
      HEAP32[(49296)>>2] = $931;
      HEAP32[$924>>2] = $581;
      $932 = ((($581)) + 24|0);
      HEAP32[$932>>2] = $924;
      $933 = ((($581)) + 12|0);
      HEAP32[$933>>2] = $581;
      $934 = ((($581)) + 8|0);
      HEAP32[$934>>2] = $581;
      break;
     }
     $935 = HEAP32[$924>>2]|0;
     $936 = ($$0207$i$i|0)==(31);
     $937 = $$0207$i$i >>> 1;
     $938 = (25 - ($937))|0;
     $939 = $936 ? 0 : $938;
     $940 = $880 << $939;
     $$0201$i$i = $940;$$0202$i$i = $935;
     while(1) {
      $941 = ((($$0202$i$i)) + 4|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = $942 & -8;
      $944 = ($943|0)==($880|0);
      if ($944) {
       label = 216;
       break;
      }
      $945 = $$0201$i$i >>> 31;
      $946 = (((($$0202$i$i)) + 16|0) + ($945<<2)|0);
      $947 = $$0201$i$i << 1;
      $948 = HEAP32[$946>>2]|0;
      $949 = ($948|0)==(0|0);
      if ($949) {
       label = 215;
       break;
      } else {
       $$0201$i$i = $947;$$0202$i$i = $948;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$946>>2] = $581;
      $950 = ((($581)) + 24|0);
      HEAP32[$950>>2] = $$0202$i$i;
      $951 = ((($581)) + 12|0);
      HEAP32[$951>>2] = $581;
      $952 = ((($581)) + 8|0);
      HEAP32[$952>>2] = $581;
      break;
     }
     else if ((label|0) == 216) {
      $953 = ((($$0202$i$i)) + 8|0);
      $954 = HEAP32[$953>>2]|0;
      $955 = ((($954)) + 12|0);
      HEAP32[$955>>2] = $581;
      HEAP32[$953>>2] = $581;
      $956 = ((($581)) + 8|0);
      HEAP32[$956>>2] = $954;
      $957 = ((($581)) + 12|0);
      HEAP32[$957>>2] = $$0202$i$i;
      $958 = ((($581)) + 24|0);
      HEAP32[$958>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $960 = HEAP32[(49304)>>2]|0;
  $961 = ($960>>>0)>($$0192>>>0);
  if ($961) {
   $962 = (($960) - ($$0192))|0;
   HEAP32[(49304)>>2] = $962;
   $963 = HEAP32[(49316)>>2]|0;
   $964 = (($963) + ($$0192)|0);
   HEAP32[(49316)>>2] = $964;
   $965 = $962 | 1;
   $966 = ((($964)) + 4|0);
   HEAP32[$966>>2] = $965;
   $967 = $$0192 | 3;
   $968 = ((($963)) + 4|0);
   HEAP32[$968>>2] = $967;
   $969 = ((($963)) + 8|0);
   $$0 = $969;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $970 = (___errno_location()|0);
 HEAP32[$970>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(49308)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(49312)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $78 = ((($7)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 3;
    $81 = ($80|0)==(3);
    if (!($81)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    $82 = (($14) + ($15)|0);
    $83 = ((($14)) + 4|0);
    $84 = $15 | 1;
    $85 = $79 & -2;
    HEAP32[(49300)>>2] = $15;
    HEAP32[$78>>2] = $85;
    HEAP32[$83>>2] = $84;
    HEAP32[$82>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[12323]|0;
     $29 = $28 & $27;
     HEAP32[12323] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (49596 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($14|0)==($57|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond374 = ($$3|0)==(0|0);
     if ($cond374) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(49296)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(49296)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $not$370 = ($64|0)!=($14|0);
     $$sink3 = $not$370&1;
     $65 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$65>>2] = $$3;
     $66 = ($$3|0)==(0|0);
     if ($66) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $67 = ((($$3)) + 24|0);
    HEAP32[$67>>2] = $33;
    $68 = ((($14)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($$3)) + 16|0);
     HEAP32[$71>>2] = $69;
     $72 = ((($69)) + 24|0);
     HEAP32[$72>>2] = $$3;
    }
    $73 = ((($68)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $76 = ((($$3)) + 20|0);
     HEAP32[$76>>2] = $74;
     $77 = ((($74)) + 24|0);
     HEAP32[$77>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $86 = ($87>>>0)<($7>>>0);
 if (!($86)) {
  return;
 }
 $88 = ((($7)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  return;
 }
 $92 = $89 & 2;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[(49316)>>2]|0;
  $95 = ($7|0)==($94|0);
  $96 = HEAP32[(49312)>>2]|0;
  if ($95) {
   $97 = HEAP32[(49304)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(49304)>>2] = $98;
   HEAP32[(49316)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = ($$1|0)==($96|0);
   if (!($101)) {
    return;
   }
   HEAP32[(49312)>>2] = 0;
   HEAP32[(49300)>>2] = 0;
   return;
  }
  $102 = ($7|0)==($96|0);
  if ($102) {
   $103 = HEAP32[(49300)>>2]|0;
   $104 = (($103) + ($$1347))|0;
   HEAP32[(49300)>>2] = $104;
   HEAP32[(49312)>>2] = $87;
   $105 = $104 | 1;
   $106 = ((($$1)) + 4|0);
   HEAP32[$106>>2] = $105;
   $107 = (($87) + ($104)|0);
   HEAP32[$107>>2] = $104;
   return;
  }
  $108 = $89 & -8;
  $109 = (($108) + ($$1347))|0;
  $110 = $89 >>> 3;
  $111 = ($89>>>0)<(256);
  do {
   if ($111) {
    $112 = ((($7)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($7)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)==($113|0);
    if ($116) {
     $117 = 1 << $110;
     $118 = $117 ^ -1;
     $119 = HEAP32[12323]|0;
     $120 = $119 & $118;
     HEAP32[12323] = $120;
     break;
    } else {
     $121 = ((($113)) + 12|0);
     HEAP32[$121>>2] = $115;
     $122 = ((($115)) + 8|0);
     HEAP32[$122>>2] = $113;
     break;
    }
   } else {
    $123 = ((($7)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($7)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==($7|0);
    do {
     if ($127) {
      $132 = ((($7)) + 16|0);
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       $136 = HEAP32[$132>>2]|0;
       $137 = ($136|0)==(0|0);
       if ($137) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $136;$$1367 = $132;
       }
      } else {
       $$1363 = $134;$$1367 = $133;
      }
      while(1) {
       $138 = ((($$1363)) + 20|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if (!($140)) {
        $$1363 = $139;$$1367 = $138;
        continue;
       }
       $141 = ((($$1363)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $$1363 = $142;$$1367 = $141;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $128 = ((($7)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 12|0);
      HEAP32[$130>>2] = $126;
      $131 = ((($126)) + 8|0);
      HEAP32[$131>>2] = $129;
      $$3365 = $126;
     }
    } while(0);
    $144 = ($124|0)==(0|0);
    if (!($144)) {
     $145 = ((($7)) + 28|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (49596 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($7|0)==($148|0);
     if ($149) {
      HEAP32[$147>>2] = $$3365;
      $cond375 = ($$3365|0)==(0|0);
      if ($cond375) {
       $150 = 1 << $146;
       $151 = $150 ^ -1;
       $152 = HEAP32[(49296)>>2]|0;
       $153 = $152 & $151;
       HEAP32[(49296)>>2] = $153;
       break;
      }
     } else {
      $154 = ((($124)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $not$ = ($155|0)!=($7|0);
      $$sink5 = $not$&1;
      $156 = (((($124)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$156>>2] = $$3365;
      $157 = ($$3365|0)==(0|0);
      if ($157) {
       break;
      }
     }
     $158 = ((($$3365)) + 24|0);
     HEAP32[$158>>2] = $124;
     $159 = ((($7)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if (!($161)) {
      $162 = ((($$3365)) + 16|0);
      HEAP32[$162>>2] = $160;
      $163 = ((($160)) + 24|0);
      HEAP32[$163>>2] = $$3365;
     }
     $164 = ((($159)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(0|0);
     if (!($166)) {
      $167 = ((($$3365)) + 20|0);
      HEAP32[$167>>2] = $165;
      $168 = ((($165)) + 24|0);
      HEAP32[$168>>2] = $$3365;
     }
    }
   }
  } while(0);
  $169 = $109 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($87) + ($109)|0);
  HEAP32[$171>>2] = $109;
  $172 = HEAP32[(49312)>>2]|0;
  $173 = ($$1|0)==($172|0);
  if ($173) {
   HEAP32[(49300)>>2] = $109;
   return;
  } else {
   $$2 = $109;
  }
 } else {
  $174 = $89 & -2;
  HEAP32[$88>>2] = $174;
  $175 = $$1347 | 1;
  $176 = ((($$1)) + 4|0);
  HEAP32[$176>>2] = $175;
  $177 = (($87) + ($$1347)|0);
  HEAP32[$177>>2] = $$1347;
  $$2 = $$1347;
 }
 $178 = $$2 >>> 3;
 $179 = ($$2>>>0)<(256);
 if ($179) {
  $180 = $178 << 1;
  $181 = (49332 + ($180<<2)|0);
  $182 = HEAP32[12323]|0;
  $183 = 1 << $178;
  $184 = $182 & $183;
  $185 = ($184|0)==(0);
  if ($185) {
   $186 = $182 | $183;
   HEAP32[12323] = $186;
   $$pre = ((($181)) + 8|0);
   $$0368 = $181;$$pre$phiZ2D = $$pre;
  } else {
   $187 = ((($181)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $$0368 = $188;$$pre$phiZ2D = $187;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $189 = ((($$0368)) + 12|0);
  HEAP32[$189>>2] = $$1;
  $190 = ((($$1)) + 8|0);
  HEAP32[$190>>2] = $$0368;
  $191 = ((($$1)) + 12|0);
  HEAP32[$191>>2] = $181;
  return;
 }
 $192 = $$2 >>> 8;
 $193 = ($192|0)==(0);
 if ($193) {
  $$0361 = 0;
 } else {
  $194 = ($$2>>>0)>(16777215);
  if ($194) {
   $$0361 = 31;
  } else {
   $195 = (($192) + 1048320)|0;
   $196 = $195 >>> 16;
   $197 = $196 & 8;
   $198 = $192 << $197;
   $199 = (($198) + 520192)|0;
   $200 = $199 >>> 16;
   $201 = $200 & 4;
   $202 = $201 | $197;
   $203 = $198 << $201;
   $204 = (($203) + 245760)|0;
   $205 = $204 >>> 16;
   $206 = $205 & 2;
   $207 = $202 | $206;
   $208 = (14 - ($207))|0;
   $209 = $203 << $206;
   $210 = $209 >>> 15;
   $211 = (($208) + ($210))|0;
   $212 = $211 << 1;
   $213 = (($211) + 7)|0;
   $214 = $$2 >>> $213;
   $215 = $214 & 1;
   $216 = $215 | $212;
   $$0361 = $216;
  }
 }
 $217 = (49596 + ($$0361<<2)|0);
 $218 = ((($$1)) + 28|0);
 HEAP32[$218>>2] = $$0361;
 $219 = ((($$1)) + 16|0);
 $220 = ((($$1)) + 20|0);
 HEAP32[$220>>2] = 0;
 HEAP32[$219>>2] = 0;
 $221 = HEAP32[(49296)>>2]|0;
 $222 = 1 << $$0361;
 $223 = $221 & $222;
 $224 = ($223|0)==(0);
 do {
  if ($224) {
   $225 = $221 | $222;
   HEAP32[(49296)>>2] = $225;
   HEAP32[$217>>2] = $$1;
   $226 = ((($$1)) + 24|0);
   HEAP32[$226>>2] = $217;
   $227 = ((($$1)) + 12|0);
   HEAP32[$227>>2] = $$1;
   $228 = ((($$1)) + 8|0);
   HEAP32[$228>>2] = $$1;
  } else {
   $229 = HEAP32[$217>>2]|0;
   $230 = ($$0361|0)==(31);
   $231 = $$0361 >>> 1;
   $232 = (25 - ($231))|0;
   $233 = $230 ? 0 : $232;
   $234 = $$2 << $233;
   $$0348 = $234;$$0349 = $229;
   while(1) {
    $235 = ((($$0349)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     label = 73;
     break;
    }
    $239 = $$0348 >>> 31;
    $240 = (((($$0349)) + 16|0) + ($239<<2)|0);
    $241 = $$0348 << 1;
    $242 = HEAP32[$240>>2]|0;
    $243 = ($242|0)==(0|0);
    if ($243) {
     label = 72;
     break;
    } else {
     $$0348 = $241;$$0349 = $242;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$240>>2] = $$1;
    $244 = ((($$1)) + 24|0);
    HEAP32[$244>>2] = $$0349;
    $245 = ((($$1)) + 12|0);
    HEAP32[$245>>2] = $$1;
    $246 = ((($$1)) + 8|0);
    HEAP32[$246>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $247 = ((($$0349)) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 12|0);
    HEAP32[$249>>2] = $$1;
    HEAP32[$247>>2] = $$1;
    $250 = ((($$1)) + 8|0);
    HEAP32[$250>>2] = $248;
    $251 = ((($$1)) + 12|0);
    HEAP32[$251>>2] = $$0349;
    $252 = ((($$1)) + 24|0);
    HEAP32[$252>>2] = 0;
    break;
   }
  }
 } while(0);
 $253 = HEAP32[(49324)>>2]|0;
 $254 = (($253) + -1)|0;
 HEAP32[(49324)>>2] = $254;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0195$in$i = (49748);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $256 = ($$0195$i|0)==(0|0);
  $257 = ((($$0195$i)) + 8|0);
  if ($256) {
   break;
  } else {
   $$0195$in$i = $257;
  }
 }
 HEAP32[(49324)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49788|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_738($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_108()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_108() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37300|0);
}
function _dummy_738($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 127]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((45985 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 46449;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$248 = $212;$250 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 46449;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 46449 : (46451);
     $$$ = $238 ? $$ : (46450);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 46449;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 46449;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 46459;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_674($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 46449;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (46449 + ($208)|0);
    $$289 = $or$cond283 ? 46449 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$248 = $197;$250 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$248 = $242;$250 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 46449;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_674($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248|0)!=(0);
   $249 = ($250|0)!=(0);
   $251 = $247 | $249;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_674($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_674($0,32,$$2261,$312,$$6268);
  _out($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_674($0,48,$$2261,$312,$314);
  _pad_674($0,48,$$$5,$310,0);
  _out($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_674($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $325 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325|0)<(10);
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (46501 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_105()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_674($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_675($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 46466;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (46467) : (46472);
  $$$ = $16 ? $$ : (46469);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_675($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (46501 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_674($0,32,$2,$104,$4);
    _out($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_674($0,48,$2,$104,$105);
    _out($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_674($0,48,$106,0,0);
    _out($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_674($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$122 = $$pr;
    while(1) {
     $121 = ($122|0)<(29);
     $123 = $121 ? $122 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_674($0,32,$2,$320,$4);
   _out($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_674($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out($0,46517,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_674($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out($0,46517,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_674($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_674($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 46485 : 46489;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 46493 : 46497;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_674($0,32,$2,$32,$33);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_674($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_675($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_448()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_448() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_105() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (46519 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 46607;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 46607;
  } else {
   $$01214 = 46607;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 127]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 127]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 127]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 127]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(360|0),(25|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwj($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (37656);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(117,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(101,($1|0),(48411|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (37676);
  ___cxa_throw(($1|0),(392|0),(28|0));
  // unreachable;
 }
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(101,($1|0),(48411|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (37696);
  ___cxa_throw(($1|0),(408|0),(28|0));
  // unreachable;
 }
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 return;
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 return ($1|0);
}
function __ZNSt3__211char_traitsIcE6assignEPcjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if (!($3)) {
  $4 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($2)|0);
  $5 = $4&255;
  _memset(($0|0),($5|0),($1|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__211char_traitsIcE11to_int_typeEc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 return ($1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $6 = ((($1)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7&255;
 $12 = $8 ? $10 : $11;
 $13 = ($12>>>0)<($2>>>0);
 if ($13) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = $8 ? $14 : $1;
 $16 = (($15) + ($2)|0);
 $17 = (($12) - ($2))|0;
 $18 = ($17>>>0)<($3>>>0);
 $$sroa$speculated = $18 ? $17 : $3;
 $19 = ($$sroa$speculated>>>0)>(4294967279);
 if ($19) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $20 = ($$sroa$speculated>>>0)<(11);
 if ($20) {
  $21 = $$sroa$speculated&255;
  $22 = ((($0)) + 11|0);
  HEAP8[$22>>0] = $21;
  $$0$i = $0;
 } else {
  $23 = (($$sroa$speculated) + 16)|0;
  $24 = $23 & -16;
  $25 = (__Znwj($24)|0);
  HEAP32[$0>>2] = $25;
  $26 = $24 | -2147483648;
  $27 = ((($0)) + 8|0);
  HEAP32[$27>>2] = $26;
  $28 = ((($0)) + 4|0);
  HEAP32[$28>>2] = $$sroa$speculated;
  $$0$i = $25;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i,$16,$$sroa$speculated)|0);
 $29 = (($$0$i) + ($$sroa$speculated)|0);
 HEAP8[$5>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($29,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = ((($1)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$1>>2]|0;
  $7 = $5 ? $6 : $1;
  $8 = ((($1)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $4&255;
  $11 = $5 ? $9 : $10;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$7,$11)|0);
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $11 = $phitmp$i;
 } else {
  $11 = 10;
 }
 $10 = ($11>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($6) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $5&255;
    $23 = $21;
   }
   $22 = (($2) - ($11))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$11,$22,$23,0,$23,$2,$1);
  } else {
   if ($6) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($13,$1,$2)|0);
   $14 = (($13) + ($2)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
   $15 = HEAP8[$4>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$4>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memmove(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (-18 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $25 = $14;
 } else {
  $25 = $0;
 }
 $15 = ($1>>>0)<(2147483623);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(11);
  $20 = (($$sroa$speculated) + 16)|0;
  $21 = $20 & -16;
  $phitmp = $19 ? 11 : $21;
  $22 = $phitmp;
 } else {
  $22 = -17;
 }
 $23 = (__Znwj($22)|0);
 $24 = ($4|0)==(0);
 if (!($24)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($23,$25,$4)|0);
 }
 $26 = ($6|0)==(0);
 if (!($26)) {
  $27 = (($23) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($27,$7,$6)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($23) + ($4)|0);
  $32 = (($31) + ($6)|0);
  $33 = (($25) + ($4)|0);
  $34 = (($33) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($32,$34,$29)|0);
 }
 $35 = ($1|0)==(10);
 if (!($35)) {
  __ZdlPv($25);
 }
 HEAP32[$0>>2] = $23;
 $36 = $22 | -2147483648;
 $37 = ((($0)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($28) + ($6))|0;
 $39 = ((($0)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($23) + ($38)|0);
 HEAP8[$8>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($40,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 1|0;
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = ($12>>>0)<($1>>>0);
 do {
  if ($11) {
   $13 = (($1) - ($12))|0;
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$13,$2)|0);
  } else {
   if ($7) {
    $14 = HEAP32[$0>>2]|0;
    $15 = (($14) + ($1)|0);
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($15,$3);
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $1;
    break;
   } else {
    $17 = (($0) + ($1)|0);
    HEAP8[$4>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($17,$4);
    $18 = $1&255;
    HEAP8[$5>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0);
 if (!($4)) {
  $5 = ((($0)) + 11|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)<(0);
  if ($7) {
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 2147483647;
   $phitmp$i = (($10) + -1)|0;
   $11 = ((($0)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $12;$16 = $phitmp$i;
  } else {
   $13 = $6&255;
   $15 = $13;$16 = 10;
  }
  $14 = (($16) - ($15))|0;
  $17 = ($14>>>0)<($1>>>0);
  $18 = (($15) + ($1))|0;
  if ($17) {
   $19 = (($18) - ($16))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$16,$19,$15,$15,0,0);
   $$pre = HEAP8[$5>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $6;
  }
  $20 = ($21<<24>>24)<(0);
  if ($20) {
   $22 = HEAP32[$0>>2]|0;
   $24 = $22;
  } else {
   $24 = $0;
  }
  $23 = (($24) + ($15)|0);
  (__ZNSt3__211char_traitsIcE6assignEPcjc($23,$1,$2)|0);
  $25 = HEAP8[$5>>0]|0;
  $26 = ($25<<24>>24)<(0);
  if ($26) {
   $27 = ((($0)) + 4|0);
   HEAP32[$27>>2] = $18;
  } else {
   $28 = $18&255;
   HEAP8[$5>>0] = $28;
  }
  $29 = (($24) + ($18)|0);
  HEAP8[$3>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($29,$3);
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (-17 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $23 = $12;
 } else {
  $23 = $0;
 }
 $13 = ($1>>>0)<(2147483623);
 if ($13) {
  $14 = (($2) + ($1))|0;
  $15 = $1 << 1;
  $16 = ($14>>>0)<($15>>>0);
  $$sroa$speculated = $16 ? $15 : $14;
  $17 = ($$sroa$speculated>>>0)<(11);
  $18 = (($$sroa$speculated) + 16)|0;
  $19 = $18 & -16;
  $phitmp = $17 ? 11 : $19;
  $20 = $phitmp;
 } else {
  $20 = -17;
 }
 $21 = (__Znwj($20)|0);
 $22 = ($4|0)==(0);
 if (!($22)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($21,$23,$4)|0);
 }
 $24 = (($3) - ($5))|0;
 $25 = (($24) - ($4))|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($21) + ($4)|0);
  $28 = (($27) + ($6)|0);
  $29 = (($23) + ($4)|0);
  $30 = (($29) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($28,$30,$25)|0);
 }
 $31 = ($1|0)==(10);
 if (!($31)) {
  __ZdlPv($23);
 }
 HEAP32[$0>>2] = $21;
 $32 = $20 | -2147483648;
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = $32;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = ($9>>>0)>($1>>>0);
 if (!($8)) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 if ($4) {
  $10 = HEAP32[$0>>2]|0;
  $12 = $10;
 } else {
  $12 = $0;
 }
 $11 = (($12) + ($1)|0);
 return ($11|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;$15 = $phitmp$i;
 } else {
  $12 = $5&255;
  $14 = $12;$15 = 10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($2>>>0);
 $17 = (($14) + ($2))|0;
 if ($16) {
  $27 = (($17) - ($15))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$15,$27,$14,$14,0,$2,$1);
 } else {
  $18 = ($2|0)==(0);
  if (!($18)) {
   if ($6) {
    $19 = HEAP32[$0>>2]|0;
    $21 = $19;
   } else {
    $21 = $0;
   }
   $20 = (($21) + ($14)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($20,$1,$2)|0);
   $22 = HEAP8[$4>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $17;
   } else {
    $25 = $17&255;
    HEAP8[$4>>0] = $25;
   }
   $26 = (($21) + ($17)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 48560;
    _abort_message(48510,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[74]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 127](296,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 127]($30)|0);
    HEAP32[$vararg_buffer>>2] = 48560;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(48424,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 48560;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(48469,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(48548,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((49852|0),(118|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[12464]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(48699,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[9293]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,320,304,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 127]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    $13 = ((($1)) + 32|0);
    if (!($12)) {
     $14 = ((($1)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($2|0);
     if (!($16)) {
      HEAP32[$13>>2] = $3;
      HEAP32[$14>>2] = $2;
      $18 = ((($1)) + 40|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($19) + 1)|0;
      HEAP32[$18>>2] = $20;
      $21 = ((($1)) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(1);
      if ($23) {
       $24 = ((($1)) + 24|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(2);
       if ($26) {
        $27 = ((($1)) + 54|0);
        HEAP8[$27>>0] = 1;
       }
      }
      $28 = ((($1)) + 44|0);
      HEAP32[$28>>2] = 4;
      break;
     }
    }
    $17 = ($3|0)==(1);
    if ($17) {
     HEAP32[$13>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = ((($1)) + 36|0);
 $8 = ((($1)) + 24|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   HEAP32[$8>>2] = $3;
   HEAP32[$7>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $12 = HEAP32[$7>>2]|0;
    $13 = (($12) + 1)|0;
    HEAP32[$7>>2] = $13;
    HEAP32[$8>>2] = 2;
    $14 = ((($1)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $10 = HEAP32[$8>>2]|0;
   $11 = ($10|0)==(2);
   if ($11) {
    HEAP32[$8>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   $13 = ((($1)) + 54|0);
   $14 = ((($1)) + 48|0);
   $15 = ((($1)) + 24|0);
   $16 = ((($1)) + 36|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    HEAP32[$15>>2] = $4;
    HEAP32[$16>>2] = 1;
    $17 = HEAP32[$14>>2]|0;
    $18 = ($17|0)==(1);
    $19 = ($4|0)==(1);
    $or$cond = $18 & $19;
    if (!($or$cond)) {
     break;
    }
    HEAP8[$13>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $27 = HEAP32[$16>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$16>>2] = $28;
    HEAP8[$13>>0] = 1;
    break;
   }
   $21 = HEAP32[$15>>2]|0;
   $22 = ($21|0)==(2);
   if ($22) {
    HEAP32[$15>>2] = $4;
    $26 = $4;
   } else {
    $26 = $21;
   }
   $23 = HEAP32[$14>>2]|0;
   $24 = ($23|0)==(1);
   $25 = ($26|0)==(1);
   $or$cond22 = $24 & $25;
   if ($or$cond22) {
    HEAP8[$13>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 127]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 127]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 127]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   $10 = ((($0)) + 8|0);
   if (!($9)) {
    $41 = HEAP32[$10>>2]|0;
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 24|0);
    $44 = HEAP32[$43>>2]|0;
    FUNCTION_TABLE_viiiii[$44 & 127]($41,$1,$2,$3,$4);
    break;
   }
   $11 = ((($1)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($2|0);
   $14 = ((($1)) + 32|0);
   if (!($13)) {
    $15 = ((($1)) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($2|0);
    if (!($17)) {
     HEAP32[$14>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = HEAP32[$10>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ((($25)) + 20|0);
     $27 = HEAP32[$26>>2]|0;
     FUNCTION_TABLE_viiiiii[$27 & 127]($24,$1,$2,$2,1,$4);
     $28 = HEAP8[$23>>0]|0;
     $29 = ($28<<24>>24)==(0);
     if ($29) {
      $$037$off038 = 4;
      label = 11;
     } else {
      $30 = HEAP8[$22>>0]|0;
      $not$ = ($30<<24>>24)==(0);
      if ($not$) {
       $$037$off038 = 3;
       label = 11;
      } else {
       $$037$off039 = 3;
      }
     }
     if ((label|0) == 11) {
      HEAP32[$15>>2] = $2;
      $31 = ((($1)) + 40|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + 1)|0;
      HEAP32[$31>>2] = $33;
      $34 = ((($1)) + 36|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(1);
      if ($36) {
       $37 = ((($1)) + 24|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(2);
       if ($39) {
        $40 = ((($1)) + 54|0);
        HEAP8[$40>>0] = 1;
        $$037$off039 = $$037$off038;
       } else {
        $$037$off039 = $$037$off038;
       }
      } else {
       $$037$off039 = $$037$off038;
      }
     }
     HEAP32[$19>>2] = $$037$off039;
     break;
    }
   }
   $18 = ($3|0)==(1);
   if ($18) {
    HEAP32[$14>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 127]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((49856|0),(119|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(48748,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[12464]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(48798,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(120)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($19);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($0|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  invoke_vii(121,(48851|0),($vararg_buffer|0));
  $3 = __THREW__; __THREW__ = 0;
 }
 $4 = ___cxa_find_matching_catch_3(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(121,(48891|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 __THREW__ = 0;
 invoke_v(122);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  ___clang_call_terminate($7);
  // unreachable;
 }
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9386]|0;HEAP32[9386] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9bad_allocD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (48941|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (37656);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0)|0);
 if ($1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_214($2)|0);
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+-1)|0);
  $6 = (($5) + -1)|0;
  $7 = ($6|0)<(0);
  if ($7) {
   __ZdlPv($3);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_214($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -12|0);
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt12out_of_rangeD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = (__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,0)|0);
 if ($6) {
  $$4 = 1;
 } else {
  $7 = ($1|0)==(0|0);
  if ($7) {
   $$4 = 0;
  } else {
   $8 = (___dynamic_cast($1,320,440,0)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$4 = 0;
   } else {
    $10 = ((($8)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 ^ -1;
    $15 = $11 & $14;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = ((($0)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($8)) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($18,$20,0)|0);
     if ($21) {
      $$4 = 1;
     } else {
      $22 = HEAP32[$17>>2]|0;
      $23 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($22,472,0)|0);
      if ($23) {
       $$4 = 1;
      } else {
       $24 = HEAP32[$17>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        $$4 = 0;
       } else {
        $26 = (___dynamic_cast($24,320,304,0)|0);
        $27 = ($26|0)==(0|0);
        if ($27) {
         $$4 = 0;
        } else {
         $28 = HEAP32[$19>>2]|0;
         $29 = ($28|0)==(0|0);
         if ($29) {
          $$4 = 0;
         } else {
          $30 = (___dynamic_cast($28,320,304,0)|0);
          $31 = ($30|0)==(0|0);
          if ($31) {
           $$4 = 0;
          } else {
           $32 = ((($3)) + 4|0);
           dest=$32; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           HEAP32[$3>>2] = $30;
           $33 = ((($3)) + 8|0);
           HEAP32[$33>>2] = $26;
           $34 = ((($3)) + 12|0);
           HEAP32[$34>>2] = -1;
           $35 = ((($3)) + 48|0);
           HEAP32[$35>>2] = 1;
           $36 = HEAP32[$30>>2]|0;
           $37 = ((($36)) + 28|0);
           $38 = HEAP32[$37>>2]|0;
           $39 = HEAP32[$2>>2]|0;
           FUNCTION_TABLE_viiii[$38 & 127]($30,$3,$39,1);
           $40 = ((($3)) + 24|0);
           $41 = HEAP32[$40>>2]|0;
           $42 = ($41|0)==(1);
           if ($42) {
            $43 = ((($3)) + 16|0);
            $44 = HEAP32[$43>>2]|0;
            HEAP32[$2>>2] = $44;
            $$0 = 1;
           } else {
            $$0 = 0;
           }
           $$4 = $$0;
          }
         }
        }
       }
      }
     }
    } else {
     $$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($3) {
  $$0 = 1;
 } else {
  $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($1,480,0)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = ($15|0)>(1);
  L4: do {
   if ($17) {
    $18 = ((($0)) + 24|0);
    $19 = ((($1)) + 24|0);
    $20 = ((($1)) + 54|0);
    $21 = ((($0)) + 8|0);
    $$0 = $18;
    while(1) {
     $22 = HEAP8[$20>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $31 = HEAP8[$11>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = HEAP32[$21>>2]|0;
       $34 = $33 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        break L4;
       }
      }
     } else {
      $26 = HEAP32[$19>>2]|0;
      $27 = ($26|0)==(1);
      if ($27) {
       break L4;
      }
      $28 = HEAP32[$21>>2]|0;
      $29 = $28 & 2;
      $30 = ($29|0)==(0);
      if ($30) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $36 = ((($$0)) + 8|0);
     $37 = ($36>>>0)<($16>>>0);
     if ($37) {
      $$0 = $36;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $10;
  HEAP8[$11>>0] = $12;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   $10 = ((($0)) + 12|0);
   $11 = ((($1)) + 24|0);
   $12 = ((($1)) + 36|0);
   $13 = ((($1)) + 54|0);
   $14 = ((($0)) + 8|0);
   $15 = ((($0)) + 16|0);
   if (!($9)) {
    $55 = HEAP32[$10>>2]|0;
    $56 = (((($0)) + 16|0) + ($55<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15,$1,$2,$3,$4);
    $57 = ((($0)) + 24|0);
    $58 = ($55|0)>(1);
    if (!($58)) {
     break;
    }
    $59 = HEAP32[$14>>2]|0;
    $60 = $59 & 2;
    $61 = ($60|0)==(0);
    if ($61) {
     $62 = HEAP32[$12>>2]|0;
     $63 = ($62|0)==(1);
     if ($63) {
      $$0 = $57;
     } else {
      $68 = $59 & 1;
      $69 = ($68|0)==(0);
      if ($69) {
       $$2 = $57;
       while(1) {
        $78 = HEAP8[$13>>0]|0;
        $79 = ($78<<24>>24)==(0);
        if (!($79)) {
         break L1;
        }
        $80 = HEAP32[$12>>2]|0;
        $81 = ($80|0)==(1);
        if ($81) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $82 = ((($$2)) + 8|0);
        $83 = ($82>>>0)<($56>>>0);
        if ($83) {
         $$2 = $82;
        } else {
         break L1;
        }
       }
      } else {
       $$1 = $57;
      }
      while(1) {
       $70 = HEAP8[$13>>0]|0;
       $71 = ($70<<24>>24)==(0);
       if (!($71)) {
        break L1;
       }
       $72 = HEAP32[$12>>2]|0;
       $73 = ($72|0)==(1);
       if ($73) {
        $74 = HEAP32[$11>>2]|0;
        $75 = ($74|0)==(1);
        if ($75) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $76 = ((($$1)) + 8|0);
       $77 = ($76>>>0)<($56>>>0);
       if ($77) {
        $$1 = $76;
       } else {
        break L1;
       }
      }
     }
    } else {
     $$0 = $57;
    }
    while(1) {
     $64 = HEAP8[$13>>0]|0;
     $65 = ($64<<24>>24)==(0);
     if (!($65)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $66 = ((($$0)) + 8|0);
     $67 = ($66>>>0)<($56>>>0);
     if ($67) {
      $$0 = $66;
     } else {
      break L1;
     }
    }
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   $19 = ((($1)) + 32|0);
   if (!($18)) {
    $20 = ((($1)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==($2|0);
    if (!($22)) {
     HEAP32[$19>>2] = $3;
     $24 = ((($1)) + 44|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(4);
     if ($26) {
      break;
     }
     $27 = HEAP32[$10>>2]|0;
     $28 = (((($0)) + 16|0) + ($27<<3)|0);
     $29 = ((($1)) + 52|0);
     $30 = ((($1)) + 53|0);
     $$081$off0 = 0;$$084 = $15;$$085$off0 = 0;
     L29: while(1) {
      $31 = ($$084>>>0)<($28>>>0);
      if (!($31)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      HEAP8[$29>>0] = 0;
      HEAP8[$30>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $32 = HEAP8[$13>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      $34 = HEAP8[$30>>0]|0;
      $35 = ($34<<24>>24)==(0);
      do {
       if ($35) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $36 = HEAP8[$29>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $43 = HEAP32[$14>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$283$off0 = 1;
          label = 18;
          break L29;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $38 = HEAP32[$11>>2]|0;
        $39 = ($38|0)==(1);
        if ($39) {
         label = 23;
         break L29;
        }
        $40 = HEAP32[$14>>2]|0;
        $41 = $40 & 2;
        $42 = ($41|0)==(0);
        if ($42) {
         label = 23;
         break L29;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $46 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $46;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 18) {
       if (!($$085$off0)) {
        HEAP32[$20>>2] = $2;
        $47 = ((($1)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($48) + 1)|0;
        HEAP32[$47>>2] = $49;
        $50 = HEAP32[$12>>2]|0;
        $51 = ($50|0)==(1);
        if ($51) {
         $52 = HEAP32[$11>>2]|0;
         $53 = ($52|0)==(2);
         if ($53) {
          HEAP8[$13>>0] = 1;
          if ($$283$off0) {
           label = 23;
           break;
          } else {
           $54 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23;
       } else {
        $54 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $54 = 3;
     }
     HEAP32[$24>>2] = $54;
     break;
    }
   }
   $23 = ($3|0)==(1);
   if ($23) {
    HEAP32[$19>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)!=(0);
 $19 = $18 ? $3 : 2;
 FUNCTION_TABLE_viiii[$15 & 127]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)!=(0);
 $21 = $20 ? $4 : 2;
 FUNCTION_TABLE_viiiiii[$17 & 127]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)!=(0);
 $20 = $19 ? $3 : 2;
 FUNCTION_TABLE_viiiii[$16 & 127]($13,$1,$17,$20,$4);
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP8[$0>>0] = 1;
  $$0 = 1;
 }
 return ($$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (37636);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[12465]|0;HEAP32[12465] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 127]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (___dynamic_cast($0,320,440,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $4 = $phitmp;
 }
 $3 = $4&1;
 return ($3|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&127]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&127](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2() {
 ; nullFunc_i(2);return 0;
}
function __Z15av_packet_allocv__wrapper() {
 ; return __Z15av_packet_allocv()|0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function __emval_decref__wrapper(p0) {
 p0 = p0|0; __emval_decref(p0|0);
}
function __emval_incref__wrapper(p0) {
 p0 = p0|0; __emval_incref(p0|0);
}
function __emval_run_destructors__wrapper(p0) {
 p0 = p0|0; __emval_run_destructors(p0|0);
}
function __Z15av_parser_closeP20AVCodecParserContext__wrapper(p0) {
 p0 = p0|0; __Z15av_parser_closeP20AVCodecParserContext(p0|0);
}
function __Z20avcodec_free_contextPP14AVCodecContext__wrapper(p0) {
 p0 = p0|0; __Z20avcodec_free_contextPP14AVCodecContext(p0|0);
}
function __Z13av_frame_freePP7AVFrame__wrapper(p0) {
 p0 = p0|0; __Z13av_frame_freePP7AVFrame(p0|0);
}
function __Z14av_packet_freePP8AVPacket__wrapper(p0) {
 p0 = p0|0; __Z14av_packet_freePP8AVPacket(p0|0);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function _emscripten_log__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_log(p0|0,p1|0);
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function __emval_typeof__wrapper(p0) {
 p0 = p0|0; return __emval_typeof(p0|0)|0;
}
function __emval_new_cstring__wrapper(p0) {
 p0 = p0|0; return __emval_new_cstring(p0|0)|0;
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7);
}
function __emval_set_property__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; __emval_set_property(p0|0,p1|0,p2|0);
}
function b8() {
 ; nullFunc_v(8);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(9);return 0;
}
function __emval_new__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return __emval_new(p0|0,p1|0,p2|0,p3|0)|0;
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b11(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(11);return 0;
}
function __emval_get_property__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return __emval_get_property(p0|0,p1|0)|0;
}
function __emval_get_method_caller__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return __emval_get_method_caller(p0|0,p1|0)|0;
}
function __emval_take_value__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return __emval_take_value(p0|0,p1|0)|0;
}
function b12(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(12);return 0;
}
function b13(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(13);
}
function __emval_call_void_method__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; __emval_call_void_method(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_write,___stdio_seek,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal13MethodInvokerIM10MonaClientFNS_3valES3_ES3_PS2_JS3_EE6invokeERKS5_S6_PNS0_7_EM_VALE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN9NetStream11decodeAudioElR12MemoryStream,__ZN9NetStream11decodeVideoElR12MemoryStream,b0,b0,b0,b0,b0,b0,b0
,b0,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal12MethodCallerIiJlEE4callEPNS0_7_EM_VALEPKcOl,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,__ZN10emscripten8internal12operator_newI10MonaClientJEEEPT_DpOT0_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__Z15av_packet_allocv__wrapper,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,___cxa_get_globals_fast,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,__ZN6FFmpegD2Ev,__ZN6FFmpegD0Ev,b3,b3,__ZN12VideoDecoderD2Ev,__ZN12VideoDecoderD0Ev,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev
,__ZNSt11logic_errorD0Ev,b3,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b3,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal14raw_destructorI9NetStreamEEvPT_,b3,b3,b3,b3,b3,b3,b3,b3,__ZN9NetStream17decodeVideoBufferEv,b3,b3,b3,b3,b3
,b3,__ZN10emscripten8internal14raw_destructorI10MonaClientEEvPT_,b3,b3,b3,b3,b3,b3,b3,__ZN10MonaClient5CloseEv,b3,b3,b3,b3,__emval_decref__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__emval_incref__wrapper,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv,__emval_run_destructors__wrapper,_mad_frame_finish,b3,b3,b3,b3,b3,b3,b3,b3,_mad_stream_init,_mad_frame_init,_mad_synth_init,b3,b3,__Z15av_parser_closeP20AVCodecParserContext__wrapper,__Z20avcodec_free_contextPP14AVCodecContext__wrapper,__Z13av_frame_freePP7AVFrame__wrapper,__Z14av_packet_freePP8AVPacket__wrapper,b3,b3,b3
,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN9NetStream4playENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,__ZN10emscripten8internal13MethodInvokerIM9NetStreamFvvEvPS2_JEE6invokeERKS4_S5_,__ZNK9NetStream13getBufferTimeEv,__ZN9NetStream13setBufferTimeEN10emscripten3valE,b4,b4
,b4,b4,b4,b4,__ZN10MonaClient11OnWsMessageEN10emscripten3valE,b4,__ZN10MonaClient8OnWsOpenEN10emscripten3valE,b4,b4,b4,__ZN10emscripten8internal13MethodInvokerIM10MonaClientFvvEvPS2_JEE6invokeERKS4_S5_,b4,b4,b4,b4,b4,__ZNK10emscripten3val2asINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJEEET_DpT0_,b4,b4,b4,b4,b4,b4,_emscripten_log__wrapper,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt11logic_errorC2EPKc,__ZNSt3__214__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEE9push_backEOS2_,__ZNSt3__214__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEE10push_frontERKS2_,b4,__ZN9NetStreamC2EP10MonaClient,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN9NetStream9onConnectEON10emscripten3valE,__ZNSt3__218__libcpp_refstringC2EPKc,b4
,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN10emscripten8internal13MethodInvokerIM10MonaClientFNS_3valES3_NSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_ES3_PS2_JS3_SA_SA_SA_EE6invokeERKSC_SD_PNS0_7_EM_VALEPNS0_11BindingTypeISA_EUt_ESM_SM_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,___stdio_close,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6
,b6,__ZNKSt11logic_error4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal13getActualTypeI9NetStreamEEPKvPT_,b6,b6,__ZN10emscripten8internal12operator_newI9NetStreamJP10MonaClientEEEPT_DpOT0_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZN10emscripten8internal13getActualTypeI10MonaClientEEPKvPT_,b6,__ZN10emscripten8internal7InvokerIP10MonaClientJEE6invokeEPFS3_vE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__emval_typeof__wrapper,b6,__emval_new_cstring__wrapper,b6,__Znwj,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viii = [b7,b7,b7,__ZN6FFmpeg12decodeHeaderER12MemoryStreami,__ZN6FFmpeg7_decodeEPKci,b7,b7,__ZN12VideoDecoder12decodeHeaderER12MemoryStreami,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN9NetStream12attachCanvasEN10emscripten3valEb,b7,b7,b7,b7,__ZN10emscripten8internal13MethodInvokerIM9NetStreamFvNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEvPS2_JS9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_EUt_E,b7,b7,b7,b7,b7,__ZN10emscripten8internal12SetterPolicyIM9NetStreamFvNS_3valEEE3setIS2_EEvRKS5_RT_PNS0_7_EM_VALE
,b7,b7,b7,b7,b7,__ZN10emscripten8internal13MethodInvokerIM10MonaClientFvNS_3valEEvPS2_JS3_EE6invokeERKS5_S6_PNS0_7_EM_VALE,b7,__ZN10MonaClient12GetWebSocketEN10emscripten3valE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN10emscripten8internal12MethodCallerIvJRNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE4callEPNS0_7_EM_VALEPKcS9_,b7,b7,b7,b7,__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_
,b7,b7,b7,__ZN10emscripten3val3setIA11_cA12_cEEvRKT_RKT0_,b7,__emval_set_property__wrapper,b7,b7,b7,b7,__ZN10emscripten3val3setIA5_cA21_cEEvRKT_RKT0_,b7,b7,b7,b7,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b7,b7,b7,b7,b7,__ZN10emscripten8internal12MethodCallerIvJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE4callEPNS0_7_EM_VALEPKcSA_,__ZN10emscripten3val3setIA5_cA23_cEEvRKT_RKT0_,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_v = [b8,b8,b8,b8,b8,b8,b8,b8,___cxa_pure_virtual__wrapper,b8,b8,b8,__ZL25default_terminate_handlerv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev
,b8,b8,b8,___cxa_end_catch__wrapper,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN9NetStream9initAudioEN10emscripten3valEii,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,__emval_new__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN10MonaClient7ConnectEN10emscripten3valENSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_iii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10emscripten8internal7InvokerIP9NetStreamJOP10MonaClientEE6invokeEPFS3_S6_ES5_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10emscripten8internal12GetterPolicyIM9NetStreamKFNS_3valEvEE3getIS2_EEPNS0_7_EM_VALERKS5_RKT_,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__emval_get_property__wrapper,b11,b11,b11,b11,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj,b11,b11,b11,b11,b11,b11,__emval_get_method_caller__wrapper,b11,__emval_take_value__wrapper,b11,b11
,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b11,b11,b11,b11,b11,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN10emscripten8internal13MethodInvokerIM9NetStreamFiNS_3valEiiEiPS2_JS3_iiEE6invokeERKS5_S6_PNS0_7_EM_VALEii,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b13,b13,b13,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,_synth_full,_synth_half,b13,b13,b13,b13,b13,__ZN10emscripten8internal13MethodInvokerIM9NetStreamFvNS_3valEbEvPS2_JS3_bEE6invokeERKS5_S6_PNS0_7_EM_VALEb,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__emval_call_void_method__wrapper,b13
,b13,b13,b13,b13,__ZN10emscripten8internal12MethodCallerINS_3valEJRS2_EE4callEPNS0_7_EM_VALEPKcS3_,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13];

  return { _strlen: _strlen, _main: _main, stackSave: stackSave, _i64Subtract: _i64Subtract, ___udivdi3: ___udivdi3, dynCall_iiiiiii: dynCall_iiiiiii, setThrew: setThrew, dynCall_viii: dynCall_viii, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_MonaClient_cpp: __GLOBAL__sub_I_MonaClient_cpp, dynCall_iiiii: dynCall_iiiii, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, stackAlloc: stackAlloc, dynCall_vii: dynCall_vii, ___uremdi3: ___uremdi3, dynCall_vi: dynCall_vi, getTempRet0: getTempRet0, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, setTempRet0: setTempRet0, _i64Add: _i64Add, dynCall_iiii: dynCall_iiii, dynCall_ii: dynCall_ii, _emscripten_get_global_libc: _emscripten_get_global_libc, ___getTypeName: ___getTypeName, dynCall_i: dynCall_i, dynCall_viiii: dynCall_viiii, dynCall_iiiiii: dynCall_iiiiii, _llvm_bswap_i32: _llvm_bswap_i32, dynCall_viiiii: dynCall_viiiii, ___cxa_can_catch: ___cxa_can_catch, _free: _free, runPostSets: runPostSets, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, _memmove: _memmove, stackRestore: stackRestore, _malloc: _malloc, dynCall_iii: dynCall_iii, dynCall_v: dynCall_v };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strlen.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__sub_I_MonaClient_cpp = asm["__GLOBAL__sub_I_MonaClient_cpp"]; asm["__GLOBAL__sub_I_MonaClient_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_MonaClient_cpp.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};
var _strlen = Module["_strlen"] = asm["_strlen"];
var _main = Module["_main"] = asm["_main"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__sub_I_MonaClient_cpp = Module["__GLOBAL__sub_I_MonaClient_cpp"] = asm["__GLOBAL__sub_I_MonaClient_cpp"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;






/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}




//
//  Copyright (c) 2014 Sam Leitch. All rights reserved.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to
//  deal in the Software without restriction, including without limitation the
//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
//  sell copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
//  IN THE SOFTWARE.
//

// modified by Matthias Behrens (github.com/soliton4) for Broadway.js


// universal module definition
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.WebGLCanvas = factory();
    }
}(this, function () {


/**
 * This class can be used to render output pictures from an H264bsdDecoder to a canvas element.
 * If available the content is rendered using WebGL.
 */
  function H264bsdCanvas(canvas, forceNoGL, contextOptions) {
    this.canvasElement = canvas;
    this.contextOptions = contextOptions;

    if(!forceNoGL) this.initContextGL();

    if(this.contextGL) {
      this.initProgram();
      this.initBuffers();
      this.initTextures();
    };
  };

/**
 * Returns true if the canvas supports WebGL
 */
H264bsdCanvas.prototype.isWebGL = function() {
    return this.contextGL;
};

/**
 * Create the GL context from the canvas element
 */
  H264bsdCanvas.prototype.initContextGL = function() {
    var canvas = this.canvasElement;
    var gl = null;

    var validContextNames = ["webgl", "experimental-webgl", "moz-webgl", "webkit-3d"];
    var nameIndex = 0;

    while(!gl && nameIndex < validContextNames.length) {
      var contextName = validContextNames[nameIndex];

      try {
        if (this.contextOptions){
          gl = canvas.getContext(contextName, this.contextOptions);
        }else{
          gl = canvas.getContext(contextName);
        };
      } catch (e) {
        gl = null;
      }

      if(!gl || typeof gl.getParameter !== "function") {
        gl = null;
      }    

      ++nameIndex;
    };

    this.contextGL = gl;
  };

/**
 * Initialize GL shader program
 */
H264bsdCanvas.prototype.initProgram = function() {
    var gl = this.contextGL;

    var vertexShaderScript = [
        'attribute vec4 vertexPos;',
        'attribute vec4 texturePos;',
        'varying vec2 textureCoord;',

        'void main()',
        '{',
            'gl_Position = vertexPos;',
            'textureCoord = texturePos.xy;',
        '}'
        ].join('\n');

    var fragmentShaderScript = [
        'precision highp float;',
        'varying highp vec2 textureCoord;',
        'uniform sampler2D ySampler;',
        'uniform sampler2D uSampler;',
        'uniform sampler2D vSampler;',
        'const mat4 YUV2RGB = mat4',
        '(',
            '1.1643828125, 0, 1.59602734375, -.87078515625,',
            '1.1643828125, -.39176171875, -.81296875, .52959375,',
            '1.1643828125, 2.017234375, 0, -1.081390625,',
            '0, 0, 0, 1',
        ');',
      
        'void main(void) {',
            'highp float y = texture2D(ySampler,  textureCoord).r;',
            'highp float u = texture2D(uSampler,  textureCoord).r;',
            'highp float v = texture2D(vSampler,  textureCoord).r;',
            'gl_FragColor = vec4(y, u, v, 1) * YUV2RGB;',
        '}'
        ].join('\n');

    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, vertexShaderScript);
    gl.compileShader(vertexShader);
    if(!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
        console.log('Vertex shader failed to compile: ' + gl.getShaderInfoLog(vertexShader));
    }

    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, fragmentShaderScript);
    gl.compileShader(fragmentShader);
    if(!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
        console.log('Fragment shader failed to compile: ' + gl.getShaderInfoLog(fragmentShader));
    }

    var program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if(!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        console.log('Program failed to compile: ' + gl.getProgramInfoLog(program));
    }

    gl.useProgram(program);
    
    this.shaderProgram = program;
};

/**
 * Initialize vertex buffers and attach to shader program
 */
H264bsdCanvas.prototype.initBuffers = function() {
    var gl = this.contextGL;
    var program = this.shaderProgram;

    var vertexPosBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]), gl.STATIC_DRAW);

    var vertexPosRef = gl.getAttribLocation(program, 'vertexPos');
    gl.enableVertexAttribArray(vertexPosRef);
    gl.vertexAttribPointer(vertexPosRef, 2, gl.FLOAT, false, 0, 0);

    var texturePosBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);

    var texturePosRef = gl.getAttribLocation(program, 'texturePos');
    gl.enableVertexAttribArray(texturePosRef);
    gl.vertexAttribPointer(texturePosRef, 2, gl.FLOAT, false, 0, 0);

    this.texturePosBuffer = texturePosBuffer;
};

/**
 * Initialize GL textures and attach to shader program
 */
H264bsdCanvas.prototype.initTextures = function() {
    var gl = this.contextGL;
    var program = this.shaderProgram;

    var yTextureRef = this.initTexture();
    var ySamplerRef = gl.getUniformLocation(program, 'ySampler');
    gl.uniform1i(ySamplerRef, 0);
    this.yTextureRef = yTextureRef;

    var uTextureRef = this.initTexture();
    var uSamplerRef = gl.getUniformLocation(program, 'uSampler');
    gl.uniform1i(uSamplerRef, 1);
    this.uTextureRef = uTextureRef;

    var vTextureRef = this.initTexture();
    var vSamplerRef = gl.getUniformLocation(program, 'vSampler');
    gl.uniform1i(vSamplerRef, 2);
    this.vTextureRef = vTextureRef;
};

/**
 * Create and configure a single texture
 */
H264bsdCanvas.prototype.initTexture = function() {
    var gl = this.contextGL;

    var textureRef = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, textureRef);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.bindTexture(gl.TEXTURE_2D, null);

    return textureRef;
};

/**
 * Draw picture data to the canvas.
 * If this object is using WebGL, the data must be an I420 formatted ArrayBuffer,
 * Otherwise, data must be an RGBA formatted ArrayBuffer.
 */
H264bsdCanvas.prototype.drawNextOutputPicture = function(width, height, croppingParams,data) {
    var gl = this.contextGL;
    if(gl) {
        this.drawNextOuptutPictureGL(width, height, croppingParams, data);
    } else {
        this.drawNextOuptutPictureRGBA(width, height, croppingParams, data);
    }
};

/**
 * Draw the next output picture using WebGL
 */
H264bsdCanvas.prototype.drawNextOuptutPictureGL = function(width, height, croppingParams,data) {
    var gl = this.contextGL;
    var texturePosBuffer = this.texturePosBuffer;
    var yTextureRef = this.yTextureRef;
    var uTextureRef = this.uTextureRef;
    var vTextureRef = this.vTextureRef;    

    if(croppingParams === null) {
        gl.viewport(0, 0, width, height);
    } else {
        gl.viewport(0, 0, croppingParams.width, croppingParams.height);

        var tTop = croppingParams.top / height;
        var tLeft = croppingParams.left / width;
        var tBottom = croppingParams.height / height;
        var tRight = croppingParams.width / width;
        var texturePosValues = new Float32Array([tRight, tTop, tLeft, tTop, tRight, tBottom, tLeft, tBottom]);

        gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, texturePosValues, gl.DYNAMIC_DRAW);
    }
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, yTextureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width, height, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, data[0]);

    gl.activeTexture(gl.TEXTURE1);
    gl.bindTexture(gl.TEXTURE_2D, uTextureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width/2, height/2, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, data[1]);

    gl.activeTexture(gl.TEXTURE2);
    gl.bindTexture(gl.TEXTURE_2D, vTextureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width/2, height/2, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, data[2]);

    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4); 
};

/**
 * Draw next output picture using ARGB data on a 2d canvas.
 */
H264bsdCanvas.prototype.drawNextOuptutPictureRGBA = function(width, height, croppingParams, data) {
   // var canvas = this.canvasElement;
    //var argbData = data;
   // var ctx = canvas.getContext('2d');
   // var imageData = ctx.getImageData(0, 0, width, height);
    this.imageData.data.set(data);
    Module.print(typeof this.imageData.data);
    if(croppingParams === null) {
        this.ctx2d.putImageData(this.imageData, 0, 0);
    } else {
        this.ctx2d.putImageData(this.imageData, -croppingParams.left, -croppingParams.top, 0, 0, croppingParams.width, croppingParams.height);
    }
};
H264bsdCanvas.prototype.ctx2d = null;
H264bsdCanvas.prototype.imageData = null;
    H264bsdCanvas.prototype.initRGB = function(width,height) {
        this.ctx2d = this.canvasElement.getContext('2d');
        this.imageData = this.ctx2d.getImageData(0, 0, width, height);
        Module.print(this.imageData);
    };
  return H264bsdCanvas;
  
}));
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 67108864;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [function() { var mc = window["MonaClient"] = Module["MonaClient"]; var ns = window["NetStream"] = Module["NetStream"]; ns.prototype.attachCanvas = function(canvas) { var webGLCanvas = new WebGLCanvas(canvas, Module["noWebGL"], {}); this.setVideoSize = function(w, h, dataPtr) { canvas.width = w; canvas.height = h; if (webGLCanvas.isWebGL()) { this.draw = function() { var y = HEAPU32[dataPtr]; var u = HEAPU32[dataPtr + 1]; var v = HEAPU32[dataPtr + 2]; var outputArray = [HEAPU8.subarray(y, y + w*h), HEAPU8.subarray(u, u + (w*h >> 2)), HEAPU8.subarray(v, v + (w*h >> 2))]; webGLCanvas.drawNextOutputPicture(w, h, null, outputArray); }; }else { var outputArray = HEAPU8.subarray(dataPtr, dataPtr + (w*h << 2)); webGLCanvas.initRGB(w, h); this.draw = function() { webGLCanvas.drawNextOutputPicture(w, h, null, outputArray); }; } }.bind(this); this.getWebGL = function() { return webGLCanvas; }; this._attachCanvas(this, webGLCanvas.isWebGL()); }; ns.prototype.checkVideoBuffer = function(t) { return setTimeout(this.decodeVideoBuffer.bind(this), t); }; ns.prototype.onNetStatus = function(info){ }; ns.prototype.initAudio = function(frameCount, samplerate, channels) { var isPlaying = false; var audioBuffers = []; var allFrameCount = frameCount*channels; var audioBufferTime = frameCount * 1000 /samplerate; var audioCtx = this.audioContext; if (!audioCtx)return false; var setCurrentAudioData; var resampled = samplerate < 22050; var audioBuffer = resampled? audioCtx.createBuffer(channels, frameCount<<1, samplerate<<1) : audioCtx.createBuffer(channels, frameCount, samplerate); var outputPtr = this._initAudio(this, frameCount, channels); var audioOutputArray = HEAP16.subarray(outputPtr, outputPtr + allFrameCount); var playNextBuffer = function() { isPlaying = false; if (audioBuffers.length) { playAudio(audioBuffers.shift()); } if(audioBuffers.length>1)audioBuffers.shift(); }; var copyAudioOutputArray = resampled ? function(target) { for (var i = 0; i < allFrameCount; i++) { var j = i << 1; target[j] = target[j+1] = audioOutputArray[i] / 32768; } } : function(target) { for (var i = 0; i < allFrameCount; i++) { target[i] = audioOutputArray[i] / 32768; } }; var copyToCtxBuffer =channels>1? function(fromBuffer) { for (var channel = 0; channel < channels; channel++) { var nowBuffering = audioBuffer.getChannelData(channel); if (fromBuffer) { for (var i = 0; i < frameCount; i++) { nowBuffering[i] = fromBuffer[i* (channel + 1)]; } } else { for (var i = 0; i < frameCount; i++) { nowBuffering[i] = audioOutputArray[i* (channel + 1)] / 32768; } } } }:function(fromBuffer) { var nowBuffering = audioBuffer.getChannelData(0); if (fromBuffer)nowBuffering.set(fromBuffer); else copyAudioOutputArray(nowBuffering); }; var playAudio = function(fromBuffer) { if (isPlaying) { var buffer = new Float32Array(resampled ? allFrameCount *2: allFrameCount); copyAudioOutputArray(buffer); audioBuffers.push(buffer); return; } isPlaying = true; copyToCtxBuffer(fromBuffer); var source = audioCtx.createBufferSource(); source.buffer = audioBuffer; source.connect(audioCtx.destination); source.onended = playNextBuffer; source.start(); }; this.playAudio = playAudio; }; mc.prototype.connect = function(url, appName, roomName) { var ws = this.$connect(this, url, appName, roomName || ""); this.send = function(ptr, length, output) { var outputArray = HEAPU8.subarray(ptr, ptr + length); ws.send(outputArray); }; }; },
 function($0) { {clearTimeout($0)} },
 function($0) { { return (new Date()).getTime(); } }];

function _emscripten_asm_const_0(code) {
 return ASM_CONSTS[code]();
}

function _emscripten_asm_const_1(code, a0) {
 return ASM_CONSTS[code](a0);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 78048;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_MonaClient_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });
  

/* memory initializer */ allocate([200,166,0,0,55,4,1,0,64,167,0,0,28,4,1,0,0,0,0,0,64,0,0,0,24,167,0,0,183,3,1,0,0,0,0,0,1,0,0,0,56,0,0,0,0,0,0,0,200,166,0,0,246,3,1,0,200,166,0,0,42,4,1,0,64,167,0,0,79,4,1,0,1,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,167,0,0,194,5,1,0,0,0,0,0,160,0,0,0,200,166,0,0,206,5,1,0,64,167,0,0,126,6,1,0,1,0,0,0,160,0,0,0,200,166,0,0,69,13,1,0,200,166,0,0,100,13,1,0,200,166,0,0,131,13,1,0,200,166,0,0,162,13,1,0,200,166,0,0,193,13,1,0,200,166,0,0,224,13,1,0,200,166,0,0,255,13,1,0,200,166,0,0,30,14,1,0,200,166,0,0,61,14,1,0,200,166,0,0,92,14,1,0,200,166,0,0,123,14,1,0,200,166,0,0,154,14,1,0,24,167,0,0,185,14,1,0,0,0,0,0,1,0,0,0,56,0,0,0,0,0,0,0,24,167,0,0,248,14,1,0,0,0,0,0,1,0,0,0,56,0,0,0,0,0,0,0,240,166,0,0,56,15,1,0,88,1,0,0,0,0,0,0,200,166,0,0,69,15,1,0,240,166,0,0,82,15,1,0,88,1,0,0,0,0,0,0,200,166,0,0,100,15,1,0,240,166,0,0,113,15,1,0,88,1,0,0,0,0,0,0,240,166,0,0,125,15,1,0,112,1,0,0,0,0,0,0,240,166,0,0,158,15,1,0,136,1,0,0,0,0,0,0,240,166,0,0,228,15,1,0,136,1,0,0,0,0,0,0,240,166,0,0,192,15,1,0,168,1,0,0,0,0,0,0,240,166,0,0,6,16,1,0,136,1,0,0,0,0,0,0,172,166,0,0,46,16,1,0,172,166,0,0,48,16,1,0,172,166,0,0,51,16,1,0,172,166,0,0,53,16,1,0,172,166,0,0,55,16,1,0,172,166,0,0,57,16,1,0,172,166,0,0,59,16,1,0,172,166,0,0,61,16,1,0,172,166,0,0,63,16,1,0,172,166,0,0,65,16,1,0,172,166,0,0,111,45,1,0,172,166,0,0,67,16,1,0,172,166,0,0,69,16,1,0,172,166,0,0,71,16,1,0,240,166,0,0,73,16,1,0,152,1,0,0,0,0,0,0,240,166,0,0,110,16,1,0,152,1,0,0,0,0,0,0,240,166,0,0,240,37,1,0,216,2,0,0,0,0,0,0,240,166,0,0,47,38,1,0,216,2,0,0,0,0,0,0,240,166,0,0,71,38,1,0,208,2,0,0,0,0,0,0,240,166,0,0,96,38,1,0,208,2,0,0,0,0,0,0,200,166,0,0,120,38,1,0,240,166,0,0,138,38,1,0,168,2,0,0,0,0,0,0,240,166,0,0,180,38,1,0,168,2,0,0,0,0,0,0,200,166,0,0,222,38,1,0,200,166,0,0,15,39,1,0,24,167,0,0,64,39,1,0,0,0,0,0,1,0,0,0,176,2,0,0,3,244,255,255,24,167,0,0,111,39,1,0,0,0,0,0,1,0,0,0,192,2,0,0,3,244,255,255,24,167,0,0,158,39,1,0,0,0,0,0,1,0,0,0,176,2,0,0,3,244,255,255,24,167,0,0,205,39,1,0,0,0,0,0,1,0,0,0,192,2,0,0,3,244,255,255,240,166,0,0,29,40,1,0,48,10,0,0,0,0,0,0,24,167,0,0,51,40,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,96,9,0,0,2,0,0,0,24,167,0,0,69,40,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,104,9,0,0,2,0,0,0,24,167,0,0,103,40,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,104,9,0,0,2,0,0,0,24,167,0,0,138,40,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,104,9,0,0,2,0,0,0,240,166,0,0,173,40,1,0,176,3,0,0,0,0,0,0,240,166,0,0,207,40,1,0,176,3,0,0,0,0,0,0,24,167,0,0,242,40,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,104,9,0,0,2,0,0,0,240,166,0,0,20,41,1,0,64,3,0,0,0,0,0,0,240,166,0,0,42,41,1,0,64,3,0,0,0,0,0,0,240,166,0,0,62,41,1,0,64,3,0,0,0,0,0,0,24,167,0,0,82,41,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,96,9,0,0,2,0,0,0,240,166,0,0,100,41,1,0,64,3,0,0,0,0,0,0,240,166,0,0,121,41,1,0,64,3,0,0,0,0,0,0,24,167,0,0,142,41,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,112,9,0,0,0,0,0,0,24,167,0,0,210,41,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,136,9,0,0,0,0,0,0,24,167,0,0,22,42,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,160,9,0,0,0,0,0,0,24,167,0,0,90,42,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,184,9,0,0,0,0,0,0,24,167,0,0,158,42,1,0,0,0,0,0,3,0,0,0,64,3,0,0,2,0,0,0,208,9,0,0,2,0,0,0,216,9,0,0,0,8,0,0,24,167,0,0,227,42,1,0,0,0,0,0,3,0,0,0,64,3,0,0,2,0,0,0,208,9,0,0,2,0,0,0,224,9,0,0,0,8,0,0,24,167,0,0,40,43,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,232,9,0,0,0,8,0,0,24,167,0,0,109,43,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,232,9,0,0,0,8,0,0,24,167,0,0,178,43,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,240,9,0,0,2,0,0,0,24,167,0,0,206,43,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,240,9,0,0,2,0,0,0,24,167,0,0,234,43,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,240,9,0,0,2,0,0,0,24,167,0,0,6,44,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,240,9,0,0,2,0,0,0,24,167,0,0,34,44,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,248,9,0,0,0,0,0,0,24,167,0,0,104,44,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,0,10,0,0,0,0,0,0,24,167,0,0,174,44,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,8,10,0,0,0,0,0,0,24,167,0,0,244,44,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,16,10,0,0,0,0,0,0,24,167,0,0,58,45,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,24,10,0,0,2,0,0,0,24,167,0,0,79,45,1,0,0,0,0,0,2,0,0,0,64,3,0,0,2,0,0,0,24,10,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,166,0,0,171,48,1,0,200,166,0,0,148,48,1,0,24,167,0,0,126,48,1,0,0,0,0,0,1,0,0,0,40,10,0,0,0,0,0,0,24,167,0,0,79,48,1,0,0,0,0,0,1,0,0,0,40,10,0,0,0,0,0,0,24,167,0,0,57,48,1,0,0,0,0,0,1,0,0,0,32,10,0,0,0,0,0,0,24,167,0,0,10,48,1,0,0,0,0,0,1,0,0,0,32,10,0,0,0,0,0,0,200,166,0,0,247,47,1,0,200,166,0,0,213,47,1,0,200,166,0,0,179,47,1,0,200,166,0,0,158,47,1,0,200,166,0,0,137,47,1,0,200,166,0,0,112,47,1,0,200,166,0,0,87,47,1,0,200,166,0,0,62,47,1,0,200,166,0,0,37,47,1,0,200,166,0,0,13,47,1,0,200,166,0,0,32,48,1,0,200,166,0,0,101,48,1,0,200,166,0,0,192,48,1,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,34,0,0,0,35,0,0,0,35,0,0,0,36,0,0,0,36,0,0,0,37,0,0,0,37,0,0,0,37,0,0,0,38,0,0,0,38,0,0,0,38,0,0,0,39,0,0,0,39,0,0,0,39,0,0,0,39,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,8,0,0,0,12,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,8,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,12,0,0,0,12,0,0,0,8,0,0,0,8,0,0,0,12,0,0,0,12,0,0,0,10,0,0,0,13,0,0,0,16,0,0,0,11,0,0,0,14,0,0,0,18,0,0,0,13,0,0,0,16,0,0,0,20,0,0,0,14,0,0,0,18,0,0,0,23,0,0,0,16,0,0,0,20,0,0,0,25,0,0,0,18,0,0,0,23,0,0,0,29,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,12,0,0,0,13,0,0,0,10,0,0,0,11,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,15,0,0,0,4,0,0,0,10,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,12,0,0,0,4,0,0,0,11,0,0,0,4,0,0,0,14,0,0,0,0,0,0,0,17,0,0,0,4,0,0,0,16,0,0,0,0,0,0,0,19,0,0,0,4,0,0,0,18,0,0,0,0,0,0,0,21,0,0,0,4,0,0,0,20,0,0,0,0,0,0,0,23,0,0,0,4,0,0,0,22,0,0,0,1,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,7,0,0,0,4,0,0,0,12,0,0,0,4,0,0,0,13,0,0,0,1,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,4,0,0,0,16,0,0,0,4,0,0,0,17,0,0,0,1,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,4,0,0,0,20,0,0,0,4,0,0,0,21,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,4,0,0,0,1,0,0,0,255,0,0,0,4,0,0,0,1,0,0,0,15,0,0,0,2,0,0,0,10,0,0,0,4,0,0,0,5,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,9,0,0,0,255,0,0,0,12,0,0,0,4,0,0,0,7,0,0,0,255,0,0,0,2,0,0,0,4,0,0,0,13,0,0,0,255,0,0,0,8,0,0,0,1,0,0,0,19,0,0,0,2,0,0,0,18,0,0,0,4,0,0,0,17,0,0,0,255,0,0,0,16,0,0,0,1,0,0,0,23,0,0,0,2,0,0,0,22,0,0,0,4,0,0,0,21,0,0,0,255,0,0,0,20,0,0,0,3,0,0,0,15,0,0,0,1,0,0,0,10,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,19,0,0,0,1,0,0,0,18,0,0,0,0,0,0,0,17,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,23,0,0,0,1,0,0,0,22,0,0,0,0,0,0,0,21,0,0,0,4,0,0,0,20,0,0,0,0,0,0,0,5,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,0,0,0,0,13,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,15,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,15,0,0,0,4,0,0,0,10,0,0,0,4,0,0,0,9,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,11,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,12,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,12,0,0,0,4,0,0,0,11,0,0,0,4,0,0,0,14,0,0,0,1,0,0,0,10,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,4,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,14,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,4,0,0,0,4,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,2,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,6,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,12,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,7,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,7,0,0,0,4,0,0,0,12,0,0,0,4,0,0,0,13,0,0,0,1,0,0,0,14,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,255,0,0,0,4,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,4,0,0,0,1,0,0,0,255,0,0,0,4,0,0,0,2,0,0,0,10,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,2,0,0,0,10,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,15,0,0,0,2,0,0,0,10,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,15,0,0,0,2,0,0,0,10,0,0,0,4,0,0,0,5,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,255,0,0,0,12,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,9,0,0,0,255,0,0,0,12,0,0,0,255,0,0,0,2,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,2,0,0,0,255,0,0,0,8,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,7,0,0,0,255,0,0,0,2,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,7,0,0,0,255,0,0,0,2,0,0,0,4,0,0,0,13,0,0,0,255,0,0,0,8,0,0,0,3,0,0,0,15,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,3,0,0,0,15,0,0,0,0,0,0,0,5,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,3,0,0,0,15,0,0,0,1,0,0,0,10,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,3,0,0,0,15,0,0,0,1,0,0,0,10,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,4,0,0,0,1,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,1,0,0,0,14,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,13,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,3,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,9,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,9,0,0,0,4,0,0,0,12,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,8,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,216,1,0,0,16,0,0,0,8,0,0,0,16,0,0,0,8,0,0,0,216,1,0,0,16,0,0,0,8,0,0,0,16,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,32,0,0,0,0,0,0,0,216,1,0,0,32,0,0,0,0,0,0,0,216,1,0,0,0,0,0,0,216,1,0,0,32,0,0,0,0,0,0,0,216,1,0,0,32,2,0,0,32,2,0,0,24,2,0,0,0,0,0,0,24,2,0,0,40,2,0,0,0,0,0,0,216,1,0,0,8,0,0,0,216,1,0,0,144,0,0,0,216,1,0,0,144,0,0,0,32,0,0,0,24,2,0,0,144,0,0,0,8,0,0,0,24,2,0,0,24,2,0,0,216,1,0,0,144,0,0,0,8,0,0,0,232,1,0,0,144,0,0,0,16,0,0,0,252,215,0,0,52,216,0,0,84,216,0,0,0,0,0,0,86,216,0,0,0,0,3,0,102,216,0,0,0,0,3,0,134,216,0,0,0,0,3,0,0,0,0,0,0,0,0,0,166,216,0,0,0,0,3,0,218,216,0,0,0,0,4,0,18,217,0,0,0,0,4,0,146,217,0,0,0,0,4,0,22,218,0,0,0,0,4,0,130,218,0,0,0,0,4,0,78,219,0,0,0,0,4,0,30,220,0,0,0,0,4,0,222,220,0,0,0,0,4,0,0,0,0,0,0,0,0,0,250,223,0,0,0,0,4,0,242,226,0,0,1,0,4,0,242,226,0,0,2,0,4,0,242,226,0,0,3,0,4,0,242,226,0,0,4,0,4,0,242,226,0,0,6,0,4,0,242,226,0,0,8,0,4,0,242,226,0,0,10,0,4,0,242,226,0,0,13,0,4,0,22,230,0,0,4,0,4,0,22,230,0,0,5,0,4,0,22,230,0,0,6,0,4,0,22,230,0,0,7,0,4,0,22,230,0,0,8,0,4,0,22,230,0,0,9,0,4,0,22,230,0,0,11,0,4,0,22,230,0,0,13,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,0,0,0,250,0,0,0,119,1,0,0,244,1,0,0,113,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,101,4,0,0,226,4,0,0,95,5,0,0,220,5,0,0,89,6,0,0,214,6,0,0,0,0,0,0,125,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,0,113,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,226,4,0,0,220,5,0,0,0,0,0,0,125,0,0,64,156,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,0,113,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,226,4,0,0,0,0,0,0,125,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,128,50,2,0,0,113,2,0,128,175,2,0,0,238,2,0,0,107,3,0,0,232,3,0,0,0,0,0,64,31,0,0,128,62,0,0,192,93,0,0,0,125,0,0,64,156,0,0,128,187,0,0,192,218,0,0,0,250,0,0,128,56,1,0,0,119,1,0,128,181,1,0,0,244,1,0,128,50,2,0,0,113,2,0,68,172,0,0,128,187,0,0,0,125,0,0,142,7,1,0,164,7,1,0,203,7,1,0,241,7,1,0,7,8,1,0,46,8,1,0,84,8,1,0,106,8,1,0,145,8,1,0,183,8,1,0,205,8,1,0,244,8,1,0,24,9,1,0,46,9,1,0,85,9,1,0,24,9,1,0,121,9,1,0,160,9,1,0,24,9,1,0,121,9,1,0,160,9,1,0,24,9,1,0,121,9,1,0,160,9,1,0,196,9,1,0,218,9,1,0,1,10,1,0,0,0,0,0,0,0,0,20,190,40,10,29,205,165,83,36,169,127,89,38,117,98,70,44,114,140,115,45,129,252,177,46,0,0,0,52,215,32,174,52,148,214,98,53,150,174,29,54,244,71,222,54,122,79,164,55,101,190,55,60,36,200,159,60,190,40,10,61,245,198,118,61,11,140,229,61,97,99,86,62,46,58,201,62,62,255,61,63,188,162,180,63,5,139,22,68,205,165,83,68,106,155,145,68,251,101,208,68,0,0,16,69,81,100,80,69,21,142,145,69,187,120,211,69,243,31,22,70,169,127,89,70,0,148,157,70,76,89,226,70,17,204,39,71,252,232,109,71,227,172,180,71,191,20,252,71,215,14,34,76,117,98,70,76,231,3,107,76,232,241,143,76,63,43,181,76,192,174,218,76,73,123,0,77,198,143,38,77,42,235,76,77,114,140,115,77,165,114,154,77,211,156,193,77,18,10,233,77,130,185,16,78,72,170,56,78,145,219,96,78,144,76,137,78,129,252,177,78,161,234,218,78,54,22,4,79,139,126,45,79,239,34,87,79,184,2,129,79,62,29,171,79,224,113,213,79,0,0,0,84,129,99,21,84,42,227,42,84,177,126,64,84,207,53,86,84,62,8,108,84,187,245,129,84,3,254,151,84,215,32,174,84,246,93,196,84,36,181,218,84,36,38,241,84,188,176,7,85,177,84,30,85,203,17,53,85,212,231,75,85,148,214,98,85,216,221,121,85,108,253,144,85,28,53,168,85,184,132,191,85,14,236,214,85,239,106,238,85,43,1,6,86,150,174,29,86,2,115,53,86,67,78,77,86,45,64,101,86,150,72,125,86,83,103,149,86,61,156,173,86,43,231,197,86,244,71,222,86,115,190,246,86,128,74,15,87,247,235,39,87,178,162,64,87,141,110,89,87,100,79,114,87,20,69,139,87,122,79,164,87,117,110,189,87,226,161,214,87,161,233,239,87,201,162,4,92,202,90,17,92,196,28,30,92,167,232,42,92,101,190,55,92,238,157,68,92,51,135,81,92,38,122,94,92,185,118,107,92,220,124,120,92,131,140,133,92,159,165,146,92,36,200,159,92,2,244,172,92,46,41,186,92,154,103,199,92,58,175,212,92,0,0,226,92,224,89,239,92,206,188,252,92,190,40,10,93,164,157,23,93,115,27,37,93,32,162,50,93,160,49,64,93,231,201,77,93,233,106,91,93,156,20,105,93,245,198,118,93,233,129,132,93,109,69,146,93,118,17,160,93,250,229,173,93,239,194,187,93,74,168,201,93,1,150,215,93,11,140,229,93,93,138,243,93,238,144,1,94,179,159,15,94,165,182,29,94,184,213,43,94,228,252,57,94,31,44,72,94,97,99,86,94,160,162,100,94,212,233,114,94,243,56,129,94,245,143,143,94,209,238,157,94,127,85,172,94,246,195,186,94,46,58,201,94,31,184,215,94,192,61,230,94,9,203,244,94,243,95,3,95,117,252,17,95,135,160,32,95,34,76,47,95,62,255,61,95,211,185,76,95,219,123,91,95,76,69,106,95,32,22,121,95,80,238,135,95,212,205,150,95,165,180,165,95,188,162,180,95,18,152,195,95,160,148,210,95,95,152,225,95,72,163,240,95,84,181,255,95,63,103,7,100,94,247,14,100,5,139,22,100,48,34,30,100,221,188,37,100,7,91,45,100,173,252,52,100,201,161,60,100,90,74,68,100,93,246,75,100,205,165,83,100,169,88,91,100,237,14,99,100,150,200,106,100,162,133,114,100,12,70,122,100,211,9,130,100,244,208,137,100,106,155,145,100,53,105,153,100,80,58,161,100,186,14,169,100,110,230,176,100,108,193,184,100,175,159,192,100,53,129,200,100,251,101,208,100,255,77,216,100,62,57,224,100,182,39,232,100,99,25,240,100,68,14,248,100,85,6,0,101,149,1,8,101,0,0,16,101,148,1,24,101,79,6,32,101,45,14,40,101,46,25,48,101,78,39,56,101,138,56,64,101,226,76,72,101,81,100,80,101,213,126,88,101,110,156,96,101,23,189,104,101,207,224,112,101,147,7,121,101,98,49,129,101,57,94,137,101,21,142,145,101,244,192,153,101,213,246,161,101,181,47,170,101,146,107,178,101,105,170,186,101,57,236,194,101,0,49,203,101,187,120,211,101,104,195,219,101,5,17,228,101,144,97,236,101,7,181,244,101,104,11,253,101,177,100,5,102,224,192,13,102,243,31,22,102,232,129,30,102,188,230,38,102,111,78,47,102,253,184,55,102,102,38,64,102,167,150,72,102,190,9,81,102,169,127,89,102,103,248,97,102,245,115,106,102,82,242,114,102,124,115,123,102,113,247,131,102,47,126,140,102,181,7,149,102,0,148,157,102,15,35,166,102,224,180,174,102,113,73,183,102,192,224,191,102,204,122,200,102,148,23,209,102,20,183,217,102,76,89,226,102,58,254,234,102,220,165,243,102,48,80,252,102,53,253,4,103,234,172,13,103,75,95,22,103,89,20,31,103,17,204,39,103,113,134,48,103,120,67,57,103,37,3,66,103,117,197,74,103,103,138,83,103,250,81,92,103,44,28,101,103,252,232,109,103,103,184,118,103,109,138,127,103,11,95,136,103,65,54,145,103,12,16,154,103,108,236,162,103,95,203,171,103,227,172,180,103,246,144,189,103,152,119,198,103,199,96,207,103,129,76,216,103,197,58,225,103,146,43,234,103,230,30,243,103,191,20,252,103,142,134,2,108,255,3,7,108,176,130,11,108,161,2,16,108,209,131,20,108,64,6,25,108,237,137,29,108,215,14,34,108,254,148,38,108,96,28,43,108,254,164,47,108,215,46,52,108,233,185,56,108,53,70,61,108,185,211,65,108,117,98,70,108,105,242,74,108,147,131,79,108,243,21,84,108,137,169,88,108,83,62,93,108,81,212,97,108,131,107,102,108,231,3,107,108,126,157,111,108,71,56,116,108,64,212,120,108,106,113,125,108,195,15,130,108,76,175,134,108,3,80,139,108,232,241,143,108,251,148,148,108,58,57,153,108,165,222,157,108,60,133,162,108,254,44,167,108,234,213,171,108,0,128,176,108,63,43,181,108,167,215,185,108,55,133,190,108,238,51,195,108,204,227,199,108,209,148,204,108,251,70,209,108,75,250,213,108,192,174,218,108,88,100,223,108,20,27,228,108,243,210,232,108,245,139,237,108,24,70,242,108,93,1,247,108,195,189,251,108,73,123,0,109,239,57,5,109,180,249,9,109,152,186,14,109,154,124,19,109,186,63,24,109,247,3,29,109,80,201,33,109,198,143,38,109,87,87,43,109,3,32,48,109,202,233,52,109,171,180,57,109,166,128,62,109,185,77,67,109,229,27,72,109,42,235,76,109,133,187,81,109,248,140,86,109,129,95,91,109,33,51,96,109,214,7,101,109,160,221,105,109,127,180,110,109,114,140,115,109,120,101,120,109,146,63,125,109,191,26,130,109,253,246,134,109,78,212,139,109,176,178,144,109,34,146,149,109,165,114,154,109,56,84,159,109,218,54,164,109,140,26,169,109,76,255,173,109,26,229,178,109,245,203,183,109,222,179,188,109,211,156,193,109,213,134,198,109,226,113,203,109,251,93,208,109,31,75,213,109,77,57,218,109,133,40,223,109,199,24,228,109,18,10,233,109,102,252,237,109,194,239,242,109,38,228,247,109,146,217,252,109,4,208,1,110,125,199,6,110,253,191,11,110,130,185,16,110,12,180,21,110,156,175,26,110,47,172,31,110,199,169,36,110,99,168,41,110,2,168,46,110,163,168,51,110,72,170,56,110,238,172,61,110,150,176,66,110,63,181,71,110,233,186,76,110,147,193,81,110,61,201,86,110,231,209,91,110,145,219,96,110,57,230,101,110,223,241,106,110,132,254,111,110,38,12,117,110,198,26,122,110,98,42,127,110,251,58,132,110,144,76,137,110,33,95,142,110,174,114,147,110,53,135,152,110,183,156,157,110,51,179,162,110,169,202,167,110,24,227,172,110,129,252,177,110,226,22,183,110,59,50,188,110,141,78,193,110,214,107,198,110,23,138,203,110,78,169,208,110,124,201,213,110,161,234,218,110,187,12,224,110,202,47,229,110,207,83,234,110,200,120,239,110,182,158,244,110,151,197,249,110,109,237,254,110,54,22,4,111,242,63,9,111,160,106,14,111,65,150,19,111,211,194,24,111,88,240,29,111,205,30,35,111,52,78,40,111,139,126,45,111,210,175,50,111,9,226,55,111,48,21,61,111,70,73,66,111,75,126,71,111,62,180,76,111,32,235,81,111,239,34,87,111,172,91,92,111,87,149,97,111,238,207,102,111,114,11,108,111,226,71,113,111,62,133,118,111,133,195,123,111,184,2,129,111,214,66,134,111,222,131,139,111,209,197,144,111,174,8,150,111,116,76,155,111,36,145,160,111,189,214,165,111,62,29,171,111,168,100,176,111,251,172,181,111,53,246,186,111,86,64,192,111,95,139,197,111,78,215,202,111,36,36,208,111,224,113,213,111,131,192,218,111,10,16,224,111,120,96,229,111,202,177,234,111,1,4,240,111,29,87,245,111,28,171,250,111,0,0,0,116,227,170,2,116,56,86,5,116,255,1,8,116,55,174,10,116,224,90,13,116,250,7,16,116,134,181,18,116,129,99,21,116,238,17,24,116,203,192,26,116,24,112,29,116,213,31,32,116,3,208,34,116,160,128,37,116,173,49,40,116,42,227,42,116,22,149,45,116,114,71,48,116,61,250,50,116,118,173,53,116,31,97,56,116,54,21,59,116,188,201,61,116,177,126,64,116,20,52,67,116,229,233,69,116,36,160,72,116,209,86,75,116,236,13,78,116,117,197,80,116,107,125,83,116,207,53,86,116,159,238,88,116,221,167,91,116,136,97,94,116,160,27,97,116,37,214,99,116,22,145,102,116,116,76,105,116,62,8,108,116,116,196,110,116,22,129,113,116,37,62,116,116,159,251,118,116,132,185,121,116,214,119,124,116,147,54,127,116,187,245,129,116,78,181,132,116,76,117,135,116,182,53,138,116,138,246,140,116,200,183,143,116,114,121,146,116,133,59,149,116,3,254,151,116,235,192,154,116,62,132,157,116,250,71,160,116,32,12,163,116,175,208,165,116,168,149,168,116,11,91,171,116,215,32,174,116,12,231,176,116,170,173,179,116,177,116,182,116,33,60,185,116,250,3,188,116,59,204,190,116,228,148,193,116,246,93,196,116,113,39,199,116,83,241,201,116,157,187,204,116,79,134,207,116,105,81,210,116,235,28,213,116,212,232,215,116,36,181,218,116,220,129,221,116,251,78,224,116,129,28,227,116,110,234,229,116,194,184,232,116,124,135,235,116,157,86,238,116,36,38,241,116,18,246,243,116,102,198,246,116,33,151,249,116,65,104,252,116,199,57,255,116,179,11,2,117,5,222,4,117,188,176,7,117,216,131,10,117,91,87,13,117,66,43,16,117,142,255,18,117,64,212,21,117,86,169,24,117,209,126,27,117,177,84,30,117,245,42,33,117,158,1,36,117,171,216,38,117,29,176,41,117,242,135,44,117,44,96,47,117,202,56,50,117,203,17,53,117,48,235,55,117,249,196,58,117,37,159,61,117,181,121,64,117,168,84,67,117,254,47,70,117,183,11,73,117,212,231,75,117,83,196,78,117,52,161,81,117,121,126,84,117,32,92,87,117,42,58,90,117,150,24,93,117,100,247,95,117,148,214,98,117,39,182,101,117,27,150,104,117,113,118,107,117,41,87,110,117,67,56,113,117,190,25,116,117,154,251,118,117,216,221,121,117,119,192,124,117,120,163,127,117,217,134,130,117,155,106,133,117,190,78,136,117,66,51,139,117,39,24,142,117,108,253,144,117,17,227,147,117,23,201,150,117,125,175,153,117,67,150,156,117,106,125,159,117,240,100,162,117,214,76,165,117,28,53,168,117,194,29,171,117,199,6,174,117,43,240,176,117,240,217,179,117,19,196,182,117,149,174,185,117,119,153,188,117,184,132,191,117,87,112,194,117,86,92,197,117,179,72,200,117,110,53,203,117,137,34,206,117,1,16,209,117,216,253,211,117,14,236,214,117,161,218,217,117,147,201,220,117,226,184,223,117,144,168,226,117,155,152,229,117,4,137,232,117,203,121,235,117,239,106,238,117,112,92,241,117,79,78,244,117,139,64,247,117,36,51,250,117,27,38,253,117,110,25,0,118,30,13,3,118,43,1,6,118,149,245,8,118,92,234,11,118,127,223,14,118,254,212,17,118,218,202,20,118,18,193,23,118,166,183,26,118,150,174,29,118,227,165,32,118,139,157,35,118,143,149,38,118,239,141,41,118,170,134,44,118,193,127,47,118,52,121,50,118,2,115,53,118,43,109,56,118,176,103,59,118,144,98,62,118,203,93,65,118,96,89,68,118,81,85,71,118,156,81,74,118,67,78,77,118,68,75,80,118,159,72,83,118,85,70,86,118,101,68,89,118,208,66,92,118,149,65,95,118,180,64,98,118,45,64,101,118,0,64,104,118,45,64,107,118,179,64,110,118,148,65,113,118,206,66,116,118,98,68,119,118,79,70,122,118,150,72,125,118,54,75,128,118,47,78,131,118,129,81,134,118,44,85,137,118,49,89,140,118,142,93,143,118,69,98,146,118,83,103,149,118,187,108,152,118,123,114,155,118,148,120,158,118,5,127,161,118,207,133,164,118,241,140,167,118,107,148,170,118,61,156,173,118,104,164,176,118,234,172,179,118,196,181,182,118,246,190,185,118,128,200,188,118,97,210,191,118,154,220,194,118,43,231,197,118,19,242,200,118,82,253,203,118,233,8,207,118,215,20,210,118,28,33,213,118,184,45,216,118,170,58,219,118,244,71,222,118,149,85,225,118,141,99,228,118,219,113,231,118,127,128,234,118,123,143,237,118,204,158,240,118,117,174,243,118,115,190,246,118,200,206,249,118,114,223,252,118,115,240,255,118,202,1,3,119,119,19,6,119,122,37,9,119,210,55,12,119,128,74,15,119,132,93,18,119,222,112,21,119,141,132,24,119,145,152,27,119,235,172,30,119,154,193,33,119,158,214,36,119,247,235,39,119,166,1,43,119,169,23,46,119,1,46,49,119,174,68,52,119,176,91,55,119,7,115,58,119,178,138,61,119,178,162,64,119,6,187,67,119,175,211,70,119,172,236,73,119,254,5,77,119,163,31,80,119,157,57,83,119,235,83,86,119,141,110,89,119,131,137,92,119,204,164,95,119,106,192,98,119,91,220,101,119,160,248,104,119,56,21,108,119,36,50,111,119,100,79,114,119,247,108,117,119,221,138,120,119,22,169,123,119,163,199,126,119,131,230,129,119,181,5,133,119,59,37,136,119,20,69,139,119,63,101,142,119,190,133,145,119], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([143,166,148,119,178,199,151,119,41,233,154,119,241,10,158,119,12,45,161,119,122,79,164,119,58,114,167,119,76,149,170,119,176,184,173,119,103,220,176,119,111,0,180,119,202,36,183,119,118,73,186,119,117,110,189,119,197,147,192,119,103,185,195,119,90,223,198,119,159,5,202,119,54,44,205,119,30,83,208,119,87,122,211,119,226,161,214,119,190,201,217,119,236,241,220,119,106,26,224,119,58,67,227,119,90,108,230,119,204,149,233,119,142,191,236,119,161,233,239,119,5,20,243,119,186,62,246,119,192,105,249,119,22,149,252,119,188,192,255,119,89,118,1,124,125,12,3,124,201,162,4,124,61,57,6,124,217,207,7,124,157,102,9,124,137,253,10,124,158,148,12,124,218,43,14,124,62,195,15,124,202,90,17,124,126,242,18,124,90,138,20,124,93,34,22,124,137,186,23,124,220,82,25,124,87,235,26,124,250,131,28,124,196,28,30,124,182,181,31,124,208,78,33,124,17,232,34,124,121,129,36,124,10,27,38,124,194,180,39,124,161,78,41,124,167,232,42,124,214,130,44,124,43,29,46,124,168,183,47,124,76,82,49,124,23,237,50,124,10,136,52,124,36,35,54,124,101,190,55,124,205,89,57,124,93,245,58,124,19,145,60,124,241,44,62,124,246,200,63,124,34,101,65,124,116,1,67,124,238,157,68,124,143,58,70,124,86,215,71,124,69,116,73,124,90,17,75,124,150,174,76,124,249,75,78,124,131,233,79,124,51,135,81,124,10,37,83,124,8,195,84,124,45,97,86,124,120,255,87,124,234,157,89,124,130,60,91,124,65,219,92,124,38,122,94,124,50,25,96,124,100,184,97,124,189,87,99,124,60,247,100,124,226,150,102,124,174,54,104,124,160,214,105,124,185,118,107,124,247,22,109,124,92,183,110,124,232,87,112,124,153,248,113,124,113,153,115,124,111,58,117,124,146,219,118,124,220,124,120,124,76,30,122,124,226,191,123,124,158,97,125,124,128,3,127,124,136,165,128,124,182,71,130,124,10,234,131,124,131,140,133,124,34,47,135,124,232,209,136,124,211,116,138,124,227,23,140,124,26,187,141,124,118,94,143,124,248,1,145,124,159,165,146,124,108,73,148,124,95,237,149,124,119,145,151,124,181,53,153,124,25,218,154,124,161,126,156,124,80,35,158,124,36,200,159,124,29,109,161,124,59,18,163,124,127,183,164,124,232,92,166,124,119,2,168,124,43,168,169,124,4,78,171,124,2,244,172,124,38,154,174,124,110,64,176,124,220,230,177,124,111,141,179,124,39,52,181,124,5,219,182,124,7,130,184,124,46,41,186,124,122,208,187,124,236,119,189,124,130,31,191,124,61,199,192,124,29,111,194,124,34,23,196,124,76,191,197,124,154,103,199,124,13,16,201,124,166,184,202,124,99,97,204,124,68,10,206,124,75,179,207,124,118,92,209,124,197,5,211,124,58,175,212,124,210,88,214,124,144,2,216,124,114,172,217,124,121,86,219,124,164,0,221,124,243,170,222,124,103,85,224,124,0,0,226,124,189,170,227,124,158,85,229,124,163,0,231,124,205,171,232,124,28,87,234,124,142,2,236,124,37,174,237,124,224,89,239,124,191,5,241,124,195,177,242,124,234,93,244,124,54,10,246,124,166,182,247,124,58,99,249,124,242,15,251,124,206,188,252,124,206,105,254,124,243,22,0,125,59,196,1,125,167,113,3,125,55,31,5,125,235,204,6,125,194,122,8,125,190,40,10,125,222,214,11,125,33,133,13,125,136,51,15,125,19,226,16,125,194,144,18,125,148,63,20,125,138,238,21,125,164,157,23,125,225,76,25,125,66,252,26,125,199,171,28,125,111,91,30,125,58,11,32,125,42,187,33,125,61,107,35,125,115,27,37,125,205,203,38,125,74,124,40,125,234,44,42,125,174,221,43,125,150,142,45,125,161,63,47,125,207,240,48,125,32,162,50,125,149,83,52,125,45,5,54,125,232,182,55,125,198,104,57,125,200,26,59,125,237,204,60,125,53,127,62,125,160,49,64,125,46,228,65,125,223,150,67,125,180,73,69,125,171,252,70,125,198,175,72,125,3,99,74,125,99,22,76,125,231,201,77,125,141,125,79,125,86,49,81,125,66,229,82,125,81,153,84,125,131,77,86,125,216,1,88,125,79,182,89,125,233,106,91,125,166,31,93,125,134,212,94,125,136,137,96,125,173,62,98,125,245,243,99,125,96,169,101,125,237,94,103,125,156,20,105,125,111,202,106,125,100,128,108,125,123,54,110,125,181,236,111,125,17,163,113,125,144,89,115,125,50,16,117,125,245,198,118,125,220,125,120,125,228,52,122,125,15,236,123,125,93,163,125,125,204,90,127,125,94,18,129,125,18,202,130,125,233,129,132,125,226,57,134,125,253,241,135,125,58,170,137,125,154,98,139,125,27,27,141,125,191,211,142,125,133,140,144,125,109,69,146,125,119,254,147,125,163,183,149,125,241,112,151,125,97,42,153,125,243,227,154,125,168,157,156,125,126,87,158,125,118,17,160,125,144,203,161,125,204,133,163,125,42,64,165,125,169,250,166,125,75,181,168,125,14,112,170,125,243,42,172,125,250,229,173,125,35,161,175,125,109,92,177,125,217,23,179,125,103,211,180,125,22,143,182,125,231,74,184,125,218,6,186,125,239,194,187,125,37,127,189,125,124,59,191,125,245,247,192,125,144,180,194,125,76,113,196,125,42,46,198,125,41,235,199,125,74,168,201,125,140,101,203,125,239,34,205,125,116,224,206,125,27,158,208,125,226,91,210,125,203,25,212,125,213,215,213,125,1,150,215,125,78,84,217,125,188,18,219,125,76,209,220,125,252,143,222,125,206,78,224,125,193,13,226,125,213,204,227,125,11,140,229,125,97,75,231,125,217,10,233,125,114,202,234,125,43,138,236,125,6,74,238,125,2,10,240,125,31,202,241,125,93,138,243,125,188,74,245,125,60,11,247,125,220,203,248,125,158,140,250,125,129,77,252,125,132,14,254,125,168,207,255,125,238,144,1,126,84,82,3,126,218,19,5,126,130,213,6,126,74,151,8,126,52,89,10,126,61,27,12,126,104,221,13,126,179,159,15,126,31,98,17,126,172,36,19,126,89,231,20,126,39,170,22,126,22,109,24,126,37,48,26,126,84,243,27,126,165,182,29,126,21,122,31,126,167,61,33,126,88,1,35,126,42,197,36,126,29,137,38,126,48,77,40,126,100,17,42,126,184,213,43,126,44,154,45,126,193,94,47,126,118,35,49,126,75,232,50,126,65,173,52,126,87,114,54,126,141,55,56,126,228,252,57,126,91,194,59,126,242,135,61,126,169,77,63,126,128,19,65,126,120,217,66,126,143,159,68,126,199,101,70,126,31,44,72,126,151,242,73,126,47,185,75,126,232,127,77,126,192,70,79,126,184,13,81,126,208,212,82,126,9,156,84,126,97,99,86,126,217,42,88,126,113,242,89,126,41,186,91,126,1,130,93,126,249,73,95,126,17,18,97,126,73,218,98,126,160,162,100,126,23,107,102,126,174,51,104,126,101,252,105,126,60,197,107,126,50,142,109,126,72,87,111,126,126,32,113,126,212,233,114,126,73,179,116,126,222,124,118,126,146,70,120,126,102,16,122,126,90,218,123,126,109,164,125,126,160,110,127,126,243,56,129,126,101,3,131,126,246,205,132,126,168,152,134,126,120,99,136,126,104,46,138,126,120,249,139,126,167,196,141,126,245,143,143,126,99,91,145,126,240,38,147,126,156,242,148,126,104,190,150,126,84,138,152,126,94,86,154,126,136,34,156,126,209,238,157,126,58,187,159,126,193,135,161,126,104,84,163,126,47,33,165,126,20,238,166,126,24,187,168,126,60,136,170,126,127,85,172,126,225,34,174,126,98,240,175,126,3,190,177,126,194,139,179,126,161,89,181,126,158,39,183,126,187,245,184,126,246,195,186,126,81,146,188,126,203,96,190,126,99,47,192,126,27,254,193,126,241,204,195,126,231,155,197,126,251,106,199,126,46,58,201,126,129,9,203,126,242,216,204,126,129,168,206,126,48,120,208,126,254,71,210,126,234,23,212,126,245,231,213,126,31,184,215,126,104,136,217,126,207,88,219,126,85,41,221,126,250,249,222,126,190,202,224,126,160,155,226,126,161,108,228,126,192,61,230,126,254,14,232,126,91,224,233,126,214,177,235,126,112,131,237,126,41,85,239,126,0,39,241,126,245,248,242,126,9,203,244,126,60,157,246,126,141,111,248,126,253,65,250,126,139,20,252,126,55,231,253,126,2,186,255,126,235,140,1,127,243,95,3,127,25,51,5,127,93,6,7,127,192,217,8,127,65,173,10,127,225,128,12,127,159,84,14,127,123,40,16,127,117,252,17,127,141,208,19,127,196,164,21,127,25,121,23,127,140,77,25,127,30,34,27,127,206,246,28,127,155,203,30,127,135,160,32,127,145,117,34,127,185,74,36,127,0,32,38,127,100,245,39,127,231,202,41,127,135,160,43,127,70,118,45,127,34,76,47,127,29,34,49,127,53,248,50,127,108,206,52,127,193,164,54,127,51,123,56,127,196,81,58,127,114,40,60,127,62,255,61,127,40,214,63,127,48,173,65,127,86,132,67,127,154,91,69,127,252,50,71,127,123,10,73,127,24,226,74,127,211,185,76,127,172,145,78,127,163,105,80,127,183,65,82,127,233,25,84,127,57,242,85,127,167,202,87,127,50,163,89,127,219,123,91,127,161,84,93,127,133,45,95,127,135,6,97,127,166,223,98,127,227,184,100,127,62,146,102,127,182,107,104,127,76,69,106,127,255,30,108,127,208,248,109,127,190,210,111,127,202,172,113,127,243,134,115,127,58,97,117,127,158,59,119,127,32,22,121,127,191,240,122,127,124,203,124,127,86,166,126,127,77,129,128,127,98,92,130,127,148,55,132,127,227,18,134,127,80,238,135,127,218,201,137,127,129,165,139,127,70,129,141,127,40,93,143,127,39,57,145,127,67,21,147,127,125,241,148,127,212,205,150,127,72,170,152,127,217,134,154,127,136,99,156,127,83,64,158,127,60,29,160,127,66,250,161,127,101,215,163,127,165,180,165,127,2,146,167,127,125,111,169,127,20,77,171,127,200,42,173,127,154,8,175,127,136,230,176,127,148,196,178,127,188,162,180,127,2,129,182,127,100,95,184,127,228,61,186,127,128,28,188,127,57,251,189,127,15,218,191,127,2,185,193,127,18,152,195,127,63,119,197,127,137,86,199,127,239,53,201,127,115,21,203,127,19,245,204,127,208,212,206,127,170,180,208,127,160,148,210,127,179,116,212,127,228,84,214,127,48,53,216,127,154,21,218,127,32,246,219,127,195,214,221,127,131,183,223,127,95,152,225,127,88,121,227,127,110,90,229,127,160,59,231,127,239,28,233,127,90,254,234,127,226,223,236,127,135,193,238,127,72,163,240,127,38,133,242,127,32,103,244,127,55,73,246,127,106,43,248,127,186,13,250,127,38,240,251,127,175,210,253,127,84,181,255,127,11,204,0,132,122,189,1,132,247,174,2,132,131,160,3,132,28,146,4,132,196,131,5,132,122,117,6,132,63,103,7,132,17,89,8,132,241,74,9,132,224,60,10,132,221,46,11,132,232,32,12,132,1,19,13,132,41,5,14,132,94,247,14,132,161,233,15,132,243,219,16,132,83,206,17,132,193,192,18,132,61,179,19,132,199,165,20,132,95,152,21,132,5,139,22,132,185,125,23,132,124,112,24,132,76,99,25,132,42,86,26,132,23,73,27,132,17,60,28,132,26,47,29,132,48,34,30,132,85,21,31,132,136,8,32,132,200,251,32,132,23,239,33,132,115,226,34,132,222,213,35,132,86,201,36,132,221,188,37,132,113,176,38,132,20,164,39,132,196,151,40,132,131,139,41,132,79,127,42,132,41,115,43,132,17,103,44,132,7,91,45,132,11,79,46,132,29,67,47,132,61,55,48,132,107,43,49,132,166,31,50,132,240,19,51,132,71,8,52,132,173,252,52,132,32,241,53,132,161,229,54,132,47,218,55,132,204,206,56,132,119,195,57,132,47,184,58,132,245,172,59,132,201,161,60,132,171,150,61,132,155,139,62,132,152,128,63,132,163,117,64,132,188,106,65,132,227,95,66,132,24,85,67,132,90,74,68,132,171,63,69,132,8,53,70,132,116,42,71,132,238,31,72,132,117,21,73,132,10,11,74,132,172,0,75,132,93,246,75,132,27,236,76,132,231,225,77,132,192,215,78,132,168,205,79,132,156,195,80,132,159,185,81,132,175,175,82,132,205,165,83,132,249,155,84,132,50,146,85,132,121,136,86,132,206,126,87,132,48,117,88,132,160,107,89,132,30,98,90,132,169,88,91,132,66,79,92,132,233,69,93,132,157,60,94,132,94,51,95,132,46,42,96,132,11,33,97,132,245,23,98,132,237,14,99,132,243,5,100,132,6,253,100,132,39,244,101,132,85,235,102,132,145,226,103,132,219,217,104,132,50,209,105,132,150,200,106,132,9,192,107,132,136,183,108,132,21,175,109,132,176,166,110,132,88,158,111,132,14,150,112,132,209,141,113,132,162,133,114,132,128,125,115,132,108,117,116,132,101,109,117,132,107,101,118,132,127,93,119,132,161,85,120,132,208,77,121,132,12,70,122,132,86,62,123,132,174,54,124,132,18,47,125,132,132,39,126,132,4,32,127,132,145,24,128,132,43,17,129,132,211,9,130,132,136,2,131,132,75,251,131,132,27,244,132,132,248,236,133,132,227,229,134,132,219,222,135,132,225,215,136,132,244,208,137,132,20,202,138,132,65,195,139,132,124,188,140,132,196,181,141,132,26,175,142,132,125,168,143,132,237,161,144,132,106,155,145,132,245,148,146,132,141,142,147,132,51,136,148,132,229,129,149,132,165,123,150,132,115,117,151,132,77,111,152,132,53,105,153,132,42,99,154,132,44,93,155,132,60,87,156,132,89,81,157,132,131,75,158,132,186,69,159,132,254,63,160,132,80,58,161,132,175,52,162,132,27,47,163,132,149,41,164,132,27,36,165,132,175,30,166,132,80,25,167,132,254,19,168,132,186,14,169,132,130,9,170,132,88,4,171,132,59,255,171,132,43,250,172,132,40,245,173,132,50,240,174,132,74,235,175,132,110,230,176,132,160,225,177,132,223,220,178,132,43,216,179,132,132,211,180,132,234,206,181,132,94,202,182,132,222,197,183,132,108,193,184,132,6,189,185,132,174,184,186,132,99,180,187,132,36,176,188,132,243,171,189,132,207,167,190,132,184,163,191,132,175,159,192,132,178,155,193,132,194,151,194,132,223,147,195,132,9,144,196,132,65,140,197,132,133,136,198,132,214,132,199,132,53,129,200,132,160,125,201,132,24,122,202,132,158,118,203,132,48,115,204,132,207,111,205,132,123,108,206,132,53,105,207,132,251,101,208,132,206,98,209,132,174,95,210,132,155,92,211,132,149,89,212,132,156,86,213,132,176,83,214,132,209,80,215,132,255,77,216,132,58,75,217,132,129,72,218,132,214,69,219,132,55,67,220,132,166,64,221,132,33,62,222,132,169,59,223,132,62,57,224,132,224,54,225,132,143,52,226,132,75,50,227,132,19,48,228,132,233,45,229,132,203,43,230,132,186,41,231,132,182,39,232,132,191,37,233,132,212,35,234,132,247,33,235,132,38,32,236,132,98,30,237,132,171,28,238,132,1,27,239,132,99,25,240,132,211,23,241,132,79,22,242,132,216,20,243,132,109,19,244,132,16,18,245,132,191,16,246,132,123,15,247,132,68,14,248,132,25,13,249,132,252,11,250,132,235,10,251,132,231,9,252,132,239,8,253,132,5,8,254,132,39,7,255,132,85,6,0,133,145,5,1,133,217,4,2,133,46,4,3,133,143,3,4,133,254,2,5,133,121,2,6,133,0,2,7,133,149,1,8,133,54,1,9,133,227,0,10,133,158,0,11,133,101,0,12,133,57,0,13,133,25,0,14,133,6,0,15,133,0,0,16,133,6,0,17,133,25,0,18,133,57,0,19,133,101,0,20,133,158,0,21,133,227,0,22,133,53,1,23,133,148,1,24,133,255,1,25,133,119,2,26,133,252,2,27,133,141,3,28,133,42,4,29,133,212,4,30,133,139,5,31,133,79,6,32,133,31,7,33,133,251,7,34,133,228,8,35,133,218,9,36,133,220,10,37,133,234,11,38,133,6,13,39,133,45,14,40,133,98,15,41,133,163,16,42,133,240,17,43,133,74,19,44,133,176,20,45,133,35,22,46,133,162,23,47,133,46,25,48,133,198,26,49,133,107,28,50,133,28,30,51,133,218,31,52,133,164,33,53,133,123,35,54,133,94,37,55,133,78,39,56,133,74,41,57,133,82,43,58,133,103,45,59,133,137,47,60,133,182,49,61,133,241,51,62,133,55,54,63,133,138,56,64,133,234,58,65,133,86,61,66,133,206,63,67,133,83,66,68,133,228,68,69,133,129,71,70,133,43,74,71,133,226,76,72,133,164,79,73,133,115,82,74,133,78,85,75,133,54,88,76,133,42,91,77,133,43,94,78,133,56,97,79,133,81,100,80,133,118,103,81,133,168,106,82,133,230,109,83,133,49,113,84,133,135,116,85,133,234,119,86,133,90,123,87,133,213,126,88,133,94,130,89,133,242,133,90,133,146,137,91,133,63,141,92,133,249,144,93,133,190,148,94,133,144,152,95,133,110,156,96,133,88,160,97,133,79,164,98,133,81,168,99,133,96,172,100,133,124,176,101,133,163,180,102,133,215,184,103,133,23,189,104,133,99,193,105,133,188,197,106,133,32,202,107,133,145,206,108,133,14,211,109,133,152,215,110,133,45,220,111,133,207,224,112,133,125,229,113,133,55,234,114,133,253,238,115,133,208,243,116,133,174,248,117,133,153,253,118,133,144,2,120,133,147,7,121,133,163,12,122,133,190,17,123,133,230,22,124,133,26,28,125,133,89,33,126,133,166,38,127,133,254,43,128,133,98,49,129,133,210,54,130,133,79,60,131,133,216,65,132,133,108,71,133,133,13,77,134,133,186,82,135,133,115,88,136,133,57,94,137,133,10,100,138,133,231,105,139,133,209,111,140,133,198,117,141,133,200,123,142,133,213,129,143,133,239,135,144,133,21,142,145,133,71,148,146,133,132,154,147,133,206,160,148,133,36,167,149,133,134,173,150,133,244,179,151,133,110,186,152,133,244,192,153,133,134,199,154,133,37,206,155,133,207,212,156,133,133,219,157,133,71,226,158,133,21,233,159,133,239,239,160,133,213,246,161,133,199,253,162,133,197,4,164,133,207,11,165,133,229,18,166,133,7,26,167,133,53,33,168,133,111,40,169,133,181,47,170,133,7,55,171,133,101,62,172,133,206,69,173,133,68,77,174,133,198,84,175,133,83,92,176,133,237,99,177,133,146,107,178,133,67,115,179,133,0,123,180,133,201,130,181,133,158,138,182,133,127,146,183,133,108,154,184,133,101,162,185,133,105,170,186,133,122,178,187,133,150,186,188,133,190,194,189,133,242,202,190,133,50,211,191,133,126,219,192,133,214,227,193,133,57,236,194,133,169,244,195,133,36,253,196,133,171,5,198,133,62,14,199,133,221,22,200,133,135,31,201,133,62,40,202,133,0,49,203,133,206,57,204,133,168,66,205,133,141,75,206,133,127,84,207,133,124,93,208,133,133,102,209,133,154,111,210,133,187,120,211,133,231,129,212,133,31,139,213,133,99,148,214,133,179,157,215,133,15,167,216,133,118,176,217,133,233,185,218,133,104,195,219,133,242,204,220,133,137,214,221,133,43,224,222,133,216,233,223,133,146,243,224,133,87,253,225,133,40,7,227,133,5,17,228,133,237,26,229,133,225,36,230,133,225,46,231,133,237,56,232,133,4,67,233,133,39,77,234,133,86,87,235,133,144,97,236,133,214,107,237,133,40,118,238,133,133,128,239,133,238,138,240,133,99,149,241,133,227,159,242,133,111,170,243,133,7,181,244,133,171,191,245,133,90,202,246,133,20,213,247,133,219,223,248,133,173,234,249,133,138,245,250,133,115,0,252,133,104,11,253,133,105,22,254,133,117,33,255,133,141,44,0,134,176,55,1,134,223,66,2,134,25,78,3,134,95,89,4,134,177,100,5,134,15,112,6,134,119,123,7,134,236,134,8,134,108,146,9,134,248,157,10,134,143,169,11,134,50,181,12,134,224,192,13,134,154,204,14,134,96,216,15,134,49,228,16,134,13,240,17,134,245,251,18,134,233,7,20,134,232,19,21,134,243,31,22,134,9,44,23,134,43,56,24,134,88,68,25,134,145,80,26,134,213,92,27,134,37,105,28,134,129,117,29,134,232,129,30,134,90,142,31,134,216,154,32,134,97,167,33,134,246,179,34,134,150,192,35,134,66,205,36,134,249,217,37,134,188,230,38,134,138,243,39,134,100,0,41,134,73,13,42,134,58,26,43,134,54,39,44,134,61,52,45,134,80,65,46,134,111,78,47,134,153,91,48,134,206,104,49,134,15,118,50,134,91,131,51,134,178,144,52,134,21,158,53,134,131,171,54,134,253,184,55,134,130,198,56,134,19,212,57,134,175,225,58,134,86,239,59,134,9,253,60,134,199,10,62,134,145,24,63,134,102,38,64,134,70,52,65,134,50,66,66,134,41,80,67,134,43,94,68,134,57,108,69,134,82,122,70,134,119,136,71,134,167,150,72,134,226,164,73,134,40,179,74,134,122,193,75,134,216,207,76,134,64,222,77,134,180,236,78,134,51,251,79,134,190,9,81,134,84,24,82,134,245,38,83,134,161,53,84,134,89,68,85,134,28,83,86,134,234,97,87,134,196,112,88,134,169,127,89,134,153,142,90,134,149,157,91,134,156,172,92,134,174,187,93,134,203,202,94,134,244,217,95,134,40,233,96,134,103,248,97,134,177,7,99,134,7,23,100,134,104,38,101,134,212,53,102,134,76,69,103,134,206,84,104,134,92,100,105,134,245,115,106,134,154,131,107,134,73,147,108,134,4,163,109,134,202,178,110,134,155,194,111,134,120,210,112,134,95,226,113,134,82,242,114,134,80,2,116,134,90,18,117,134,110,34,118,134,142,50,119,134,185,66,120,134,239,82,121,134,48,99,122,134,124,115,123,134,212,131,124,134,54,148,125,134,164,164,126,134,29,181,127,134,162,197,128,134,49,214,129,134,203,230,130,134,113,247,131,134,34,8,133,134,222,24,134,134,165,41,135,134,119,58,136,134,85,75,137,134,61,92,138,134,49,109,139,134,47,126,140,134,57,143,141,134,78,160,142,134,110,177,143,134,153,194,144,134,207,211,145,134,17,229,146,134,93,246,147,134,181,7,149,134,23,25,150,134,133,42,151,134,254,59,152,134,130,77,153,134,17,95,154,134,171,112,155,134,80,130,156,134,0,148,157,134,187,165,158,134,129,183,159,134,83,201,160,134,47,219,161,134,22,237,162,134,9,255,163,134,6,17,165,134,15,35,166,134,34,53,167,134,65,71,168,134,106,89,169,134,159,107,170,134,223,125,171,134,41,144,172,134,127,162,173,134,224,180,174,134,75,199,175,134,194,217,176,134,67,236,177,134,208,254,178,134,104,17,180,134,10,36,181,134,184,54,182,134,113,73,183,134,52,92,184,134,3,111,185,134,220,129,186,134,193,148,187,134,176,167,188,134,170,186,189,134,176,205,190,134,192,224,191,134,219,243,192,134,2,7,194,134,51,26,195,134,111,45,196,134,182,64,197,134,8,84,198,134,101,103,199,134,204,122,200,134,63,142,201,134,189,161,202,134,69,181,203,134,217,200,204,134,119,220,205,134,32,240,206,134,212,3,208,134,148,23,209,134,94,43,210,134,50,63,211,134,18,83,212,134,253,102,213,134,242,122,214,134,243,142,215,134,254,162,216,134,20,183,217,134,53,203,218,134,97,223,219,134,152,243,220,134,217,7,222,134,38,28,223,134,125,48,224,134,223,68,225,134,76,89,226,134,196,109,227,134,70,130,228,134,212,150,229,134,108,171,230,134,15,192,231,134,189,212,232,134,118,233,233,134,58,254,234,134,8,19,236,134,226,39,237,134,198,60,238,134,180,81,239,134,174,102,240,134,179,123,241,134,194,144,242,134,220,165,243,134,1,187,244,134,48,208,245,134,107,229,246,134,176,250,247,134,0,16,249,134,90,37,250,134,192,58,251,134,48,80,252,134,171,101,253,134,49,123,254,134,194,144,255,134,93,166,0,135,3,188,1,135,180,209,2,135,111,231,3,135,53,253,4,135,6,19,6,135,226,40,7,135,201,62,8,135,186,84,9,135,182,106,10,135,188,128,11,135,206,150,12,135,234,172,13,135,16,195,14,135,66,217,15,135,126,239,16,135,197,5,18,135,23,28,19,135,115,50,20,135,218,72,21,135,75,95,22,135,200,117,23,135,79,140,24,135,224,162,25,135,125,185,26,135,36,208,27,135,214,230,28,135,146,253,29,135,89,20,31,135,43,43,32,135,7,66,33,135,238,88,34,135,224,111,35,135,220,134,36,135,227,157,37,135,244,180,38,135,17,204,39,135,56,227,40,135,105,250,41,135,165,17,43,135,236,40,44,135,61,64,45,135,153,87,46,135,0,111,47,135,113,134,48,135,237,157,49,135,115,181,50,135,4,205,51,135,160,228,52,135,70,252,53,135,247,19,55,135,178,43,56,135,120,67,57,135,73,91,58,135,36,115,59,135,10,139,60,135,250,162,61,135,245,186,62,135,250,210,63,135,10,235,64,135,37,3,66,135,74,27,67,135,122,51,68,135,180,75,69,135,248,99,70,135,72,124,71,135,162,148,72,135,6,173,73,135,117,197,74,135,238,221,75,135,114,246,76,135,1,15,78,135,154,39,79,135,62,64,80,135,236,88,81,135,164,113,82,135,103,138,83,135,53,163,84,135,13,188,85,135,240,212,86,135,221,237,87,135,213,6,89,135,215,31,90,135,227,56,91,135,250,81,92,135,28,107,93,135,72,132,94,135,127,157,95,135,192,182,96,135,11,208,97,135,97,233,98,135,193,2,100,135,44,28,101,135,162,53,102,135,34,79,103,135,172,104,104,135,64,130,105,135,224,155,106,135,137,181,107,135,61,207,108,135,252,232,109,135,197,2,111,135,152,28,112,135,118,54,113,135,94,80,114,135,81,106,115,135,78,132,116,135,85,158,117,135,103,184,118,135,131,210,119,135,170,236,120,135,219,6,122,135,23,33,123,135,93,59,124,135,173,85,125,135,8,112,126,135,109,138,127,135,220,164,128,135,86,191,129,135,218,217,130,135,105,244,131,135,2,15,133,135,165,41,134,135,83,68,135,135,11,95,136,135,206,121,137,135,154,148,138,135,114,175,139,135,83,202,140,135,63,229,141,135,53,0,143,135,54,27,144,135,65,54,145,135,86,81,146,135,118,108,147,135,160,135,148,135,212,162,149,135,19,190,150,135,92,217,151,135,175,244,152,135,12,16,154,135,116,43,155,135,231,70,156,135,99,98,157,135,234,125,158,135,123,153,159,135,22,181,160,135,188,208,161,135,108,236,162,135,39,8,164,135,235,35,165,135,186,63,166,135,147,91,167,135,119,119,168,135,100,147,169,135,92,175,170,135,95,203,171,135,107,231,172,135,130,3,174,135,163,31,175,135,207,59,176,135,4,88,177,135,68,116,178,135,142,144,179,135,227,172,180,135,65,201,181,135,170,229,182,135,29,2,184,135,155,30,185,135,34,59,186,135,180,87,187,135,80,116,188,135,246,144,189,135,167,173,190,135,97,202,191,135,38,231,192,135,245,3,194,135,207,32,195,135,178,61,196,135,160,90,197,135,152,119,198,135,154,148,199,135,167,177,200,135,189,206,201,135,222,235,202,135,9,9,204,135,62,38,205,135,125,67,206,135,199,96,207,135,27,126,208,135,121,155,209,135,225,184,210,135,83,214,211,135,207,243,212,135,86,17,214,135,230,46,215,135,129,76,216,135,38,106,217,135,213,135,218,135,143,165,219,135,82,195,220,135,32,225,221,135,247,254,222,135,217,28,224,135,197,58,225,135,188,88,226,135,188,118,227,135,198,148,228,135,219,178,229,135,249,208,230,135,34,239,231,135,85,13,233,135,146,43,234,135,217,73,235,135,42,104,236,135,134,134,237,135,235,164,238,135,91,195,239,135,212,225,240,135,88,0,242,135,230,30,243,135,126,61,244,135,32,92,245,135,204,122,246,135,130,153,247,135,66,184,248,135,12,215,249,135,225,245,250,135,191,20,252,135,168,51,253,135,154,82,254,135,151,113,255,135,79,72,0,140,215,215,0,140,100,103,1,140,247,246,1,140,142,134,2,140,43,22,3,140,204,165,3,140,115,53,4,140,30,197,4,140,207,84,5,140,132,228,5,140,63,116,6,140,255,3,7,140,195,147,7,140,141,35,8,140,91,179,8,140,47,67,9,140,8,211,9,140,229,98,10,140,200,242,10,140,176,130,11,140,156,18,12,140,142,162,12,140,132,50,13,140,128,194,13,140,129,82,14,140,134,226,14,140,145,114,15,140,161,2,16,140,181,146,16,140,207,34,17,140,237,178,17,140,17,67,18,140,57,211,18,140,103,99,19,140,153,243,19,140,209,131,20,140,13,20,21,140,79,164,21,140,149,52,22,140,225,196,22,140,49,85,23,140,134,229,23,140,225,117,24,140,64,6,25,140,164,150,25,140,13,39,26,140,123,183,26,140,239,71,27,140,103,216,27,140,228,104,28,140,102,249,28,140,237,137,29,140,121,26,30,140,10,171,30,140,159,59,31,140,58,204,31,140,218,92,32,140,127,237,32,140,40,126,33,140,215,14,34,140,138,159,34,140,67,48,35,140,0,193,35,140,195,81,36,140,138,226,36,140,86,115,37,140,40,4,38,140,254,148,38,140,217,37,39,140,185,182,39,140,158,71,40,140,136,216,40,140,118,105,41,140,106,250,41,140,99,139,42,140,96,28,43,140,99,173,43,140,106,62,44,140,119,207,44,140,136,96,45,140,158,241,45,140,185,130,46,140,217,19,47,140,254,164,47,140,40,54,48,140,87,199,48,140,139,88,49,140,195,233,49,140,1,123,50,140,67,12,51,140,138,157,51,140,215,46,52,140,40,192,52,140,126,81,53,140,217,226,53,140,57,116,54,140,158,5,55,140,7,151,55,140,118,40,56,140,233,185,56,140,97,75,57,140,223,220,57,140,97,110,58,140,232,255,58,140,116,145,59,140,5,35,60,140,154,180,60,140,53,70,61,140,212,215,61,140,121,105,62,140,34,251,62,140,208,140,63,140,131,30,64,140,59,176,64,140,247,65,65,140,185,211,65,140,128,101,66,140,75,247,66,140,27,137,67,140,240,26,68,140,202,172,68,140,169,62,69,140,141,208,69,140,117,98,70,140,99,244,70,140,85,134,71,140,76,24,72,140,72,170,72,140,73,60,73,140,79,206,73,140,89,96,74,140,105,242,74,140,125,132,75,140,150,22,76,140,180,168,76,140,215,58,77,140,255,204,77,140,43,95,78,140,93,241,78,140,147,131,79,140,206,21,80,140,14,168,80,140,83,58,81,140,156,204,81,140,235,94,82,140,62,241,82,140,150,131,83,140,243,21,84,140,85,168,84,140,187,58,85,140,39,205,85,140,151,95,86,140,12,242,86,140,134,132,87,140,5,23,88,140,137,169,88,140,17,60,89,140,158,206,89,140,48,97,90,140,199,243,90,140,99,134,91,140,3,25,92,140,169,171,92,140,83,62,93,140,2,209,93,140,182,99,94,140,110,246,94,140,43,137,95,140,238,27,96,140,181,174,96,140,128,65,97,140,81,212,97,140,39,103,98,140,1,250,98,140,224,140,99,140,196,31,100,140,172,178,100,140,154,69,101,140,140,216,101,140,131,107,102,140,127,254,102,140,127,145,103,140,133,36,104,140,143,183,104,140,158,74,105,140,178,221,105,140,202,112,106,140,231,3,107,140,10,151,107,140,49,42,108,140,92,189,108,140,141,80,109,140,194,227,109,140,252,118,110,140,59,10,111,140,126,157,111,140,199,48,112,140,20,196,112,140,102,87,113,140,188,234,113,140,24,126,114,140,120,17,115,140,221,164,115,140,71,56,116,140,181,203,116,140,41,95,117,140,161,242,117,140,29,134,118,140,159,25,119,140,37,173,119,140,176,64,120,140,64,212,120,140,213,103,121,140,110,251,121,140,12,143,122,140,175,34,123,140,87,182,123,140,3,74,124,140,180,221,124,140,106,113,125,140,36,5,126,140,228,152,126,140,168,44,127,140,113,192,127,140,62,84,128,140,17,232,128,140,232,123,129,140,195,15,130,140,164,163,130,140,137,55,131,140,115,203,131,140,98,95,132,140,85,243,132,140,77,135,133,140,74,27,134,140,76,175,134,140,82,67,135,140,93,215,135,140,109,107,136,140,130,255,136,140,155,147,137,140,185,39,138,140,220,187,138,140,3,80,139,140,47,228,139,140,96,120,140,140,150,12,141,140,208,160,141,140,15,53,142,140,83,201,142,140,155,93,143,140,232,241,143,140,58,134,144,140,145,26,145,140,236,174,145,140,76,67,146,140,176,215,146,140,26,108,147,140,136,0,148,140,251,148,148,140,114,41,149,140,238,189,149,140,111,82,150,140,245,230,150,140,127,123,151,140,14,16,152,140,161,164,152,140,58,57,153,140,215,205,153,140,120,98,154,140,31,247,154,140,202,139,155,140,122,32,156,140,46,181,156,140,231,73,157,140,165,222,157,140,103,115,158,140,47,8,159,140,250,156,159,140,203,49,160,140,160,198,160,140,122,91,161,140,89,240,161,140,60,133,162,140,36,26,163,140,16,175,163,140,1,68,164,140,247,216,164,140,242,109,165,140,241,2,166,140,245,151,166,140,254,44,167,140,11,194,167,140,29,87,168,140,51,236,168,140,78,129,169,140,110,22,170,140,147,171,170,140,188,64,171,140,234,213,171,140,28,107,172,140,83,0,173,140,143,149,173,140,208,42,174,140,21,192,174,140,94,85,175,140,173,234,175,140,0,128,176,140,87,21,177,140,180,170,177,140,21,64,178,140,122,213,178,140,228,106,179,140,83,0,180,140,199,149,180,140,63,43,181,140,188,192,181,140,61,86,182,140,195,235,182,140,78,129,183,140,221,22,184,140,113,172,184,140,10,66,185,140,167,215,185,140,73,109,186,140,239,2,187,140,154,152,187,140,74,46,188,140,254,195,188,140,183,89,189,140,116,239,189,140,55,133,190,140,253,26,191,140,201,176,191,140,153,70,192,140,109,220,192,140,71,114,193,140,36,8,194,140,7,158,194,140,238,51,195,140,218,201,195,140,202,95,196,140,191,245,196,140,184,139,197,140,182,33,198,140,185,183,198,140,192,77,199,140,204,227,199,140,221,121,200,140,242,15,201,140,12,166,201,140,42,60,202,140,77,210,202,140,116,104,203,140,160,254,203,140,209,148,204,140,6,43,205,140,64,193,205,140,127,87,206,140,194,237,206,140,9,132,207,140,85,26,208,140,166,176,208,140,251,70,209,140,85,221,209,140,180,115,210,140,23,10,211,140,127,160,211,140,235,54,212,140,92,205,212,140,209,99,213,140,75,250,213,140,202,144,214,140,77,39,215,140,213,189,215,140,97,84,216,140,242,234,216,140,135,129,217,140,33,24,218,140,192,174,218,140,99,69,219,140,10,220,219,140,183,114,220,140,103,9,221,140,29,160,221,140,215,54,222,140,149,205,222,140,88,100,223,140,32,251,223,140,236,145,224,140,188,40,225,140,146,191,225,140,107,86,226,140,74,237,226,140,45,132,227,140,20,27,228,140,0,178,228,140,241,72,229,140,230,223,229,140,223,118,230,140,222,13,231,140,224,164,231,140,231,59,232,140,243,210,232,140,4,106,233,140,24,1,234,140,50,152,234,140,80,47,235,140,114,198,235,140,153,93,236,140,197,244,236,140,245,139,237,140,41,35,238,140,99,186,238,140,160,81,239,140,226,232,239,140,41,128,240,140,116,23,241,140,196,174,241,140,24,70,242,140,113,221,242,140,207,116,243,140,48,12,244,140,151,163,244,140,2,59,245,140,113,210,245,140,229,105,246,140,93,1,247,140,218,152,247,140,92,48,248,140,226,199,248,140,108,95,249,140,251,246,249,140,143,142,250,140,39,38,251,140,195,189,251,140,100,85,252,140,10,237,252,140,180,132,253,140,98,28,254,140,21,180,254,140,205,75,255,140,137,227,255,140,73,123,0,141,14,19,1,141,216,170,1,141,166,66,2,141,120,218,2,141,79,114,3,141,43,10,4,141,11,162,4,141,239,57,5,141,216,209,5,141,197,105,6,141,183,1,7,141,174,153,7,141,169,49,8,141,168,201,8,141,172,97,9,141,180,249,9,141,193,145,10,141,210,41,11,141,232,193,11,141,2,90,12,141,33,242,12,141,68,138,13,141,108,34,14,141,152,186,14,141,201,82,15,141,254,234,15,141,55,131,16,141,117,27,17,141,184,179,17,141,255,75,18,141,74,228,18,141,154,124,19,141,238,20,20,141,71,173,20,141,165,69,21,141,6,222,21,141,109,118,22,141,215,14,23,141,70,167,23,141,186,63,24,141,50,216,24,141,174,112,25,141,47,9,26,141,181,161,26,141,63,58,27,141,205,210,27,141,96,107,28,141,247,3,29,141,146,156,29,141,50,53,30,141,215,205,30,141,128,102,31,141,45,255,31,141,223,151,32,141,149,48,33,141,80,201,33,141,15,98,34,141,211,250,34,141,155,147,35,141,104,44,36,141,56,197,36,141,14,94,37,141,232,246,37,141,198,143,38,141,169,40,39,141,144,193,39,141,123,90,40,141,107,243,40,141,95,140,41,141,88,37,42,141,85,190,42,141,87,87,43,141,93,240,43,141,104,137,44,141,119,34,45,141,138,187,45,141,162,84,46,141,190,237,46,141,222,134,47,141,3,32,48,141,45,185,48,141,91,82,49,141,141,235,49,141,196,132,50,141,255,29,51,141,62,183,51,141,130,80,52,141,202,233,52,141,23,131,53,141,104,28,54,141,190,181,54,141,23,79,55,141,118,232,55,141,217,129,56,141,64,27,57,141,171,180,57,141,27,78,58,141,143,231,58,141,8,129,59,141,133,26,60,141,7,180,60,141,141,77,61,141,23,231,61,141,166,128,62,141,57,26,63,141,208,179,63,141,108,77,64,141,12,231,64,141,177,128,65,141,90,26,66,141,7,180,66,141,185,77,67,141,111,231,67,141,42,129,68,141,233,26,69,141,172,180,69,141,116,78,70,141,64,232,70,141,17,130,71,141,229,27,72,141,191,181,72,141,156,79,73,141,126,233,73,141,100,131,74,141,79,29,75,141,62,183,75,141,50,81,76,141,42,235,76,141,38,133,77,141,38,31,78,141,43,185,78,141,52,83,79,141,66,237,79,141,84,135,80,141,107,33,81,141,133,187,81,141,164,85,82,141,200,239,82,141,240,137,83,141,28,36,84,141,76,190,84,141,129,88,85,141,186,242,85,141,248,140,86,141,58,39,87,141,128,193,87,141,203,91,88,141,26,246,88,141,109,144,89,141,197,42,90,141,33,197,90,141,129,95,91,141,230,249,91,141,79,148,92,141,189,46,93,141,46,201,93,141,165,99,94,141,31,254,94,141,158,152,95,141,33,51,96,141,168,205,96,141,52,104,97,141,196,2,98,141,89,157,98,141,242,55,99,141,143,210,99,141,48,109,100,141,214,7,101,141,128,162,101,141,47,61,102,141,225,215,102,141,152,114,103,141,84,13,104,141,20,168,104,141,216,66,105,141,160,221,105,141,109,120,106,141,62,19,107,141,19,174,107,141,237,72,108,141,203,227,108,141,173,126,109,141,148,25,110,141,127,180,110,141,110,79,111,141,98,234,111,141,90,133,112,141,86,32,113,141,86,187,113,141,91,86,114,141,100,241,114,141,114,140,115,141,132,39,116,141,154,194,116,141,180,93,117,141,211,248,117,141,246,147,118,141,29,47,119,141,73,202,119,141,120,101,120,141,173,0,121,141,229,155,121,141,34,55,122,141,99,210,122,141,168,109,123,141,242,8,124,141,64,164,124,141,146,63,125,141,233,218,125,141,68,118,126,141,163,17,127,141,6,173,127,141,110,72,128,141,218,227,128,141,74,127,129,141,191,26,130,141,56,182,130,141,181,81,131,141,54,237,131,141,188,136,132,141,70,36,133,141,212,191,133,141,103,91,134,141,253,246,134,141,152,146,135,141,56,46,136,141,220,201,136,141,131,101,137,141,48,1,138,141,224,156,138,141,149,56,139,141,78,212,139,141,11,112,140,141,205,11,141,141,147,167,141,141,93,67,142,141,43,223,142,141,254,122,143,141,213,22,144,141,176,178,144,141,143,78,145,141,115,234,145,141,91,134,146,141,71,34,147,141,55,190,147,141,44,90,148,141,37,246,148,141,34,146,149,141,36,46,150,141,42,202,150,141,52,102,151,141,66,2,152,141,84,158,152,141,107,58,153,141,134,214,153,141,165,114,154,141,201,14,155,141,241,170,155,141,29,71,156,141,77,227,156,141,129,127,157,141,186,27,158,141,247,183,158,141,56,84,159,141,126,240,159,141,199,140,160,141,21,41,161,141,103,197,161,141,190,97,162,141,24,254,162,141,119,154,163,141,218,54,164,141,66,211,164,141,173,111,165,141,29,12,166,141,145,168,166,141,10,69,167,141,134,225,167,141,7,126,168,141,140,26,169,141,21,183,169,141,162,83,170,141,52,240,170,141,202,140,171,141,100,41,172,141,2,198,172,141,165,98,173,141,76,255,173,141,247,155,174,141,166,56,175,141,89,213,175,141,17,114,176,141,205,14,177,141,141,171,177,141,81,72,178,141,26,229,178,141,230,129,179,141,183,30,180,141,140,187,180,141,102,88,181,141,67,245,181,141,37,146,182,141,11,47,183,141,245,203,183,141,227,104,184,141,214,5,185,141,205,162,185,141,200,63,186,141,199,220,186,141,202,121,187,141,210,22,188,141,222,179,188,141,238,80,189,141,2,238,189,141,26,139,190,141,55,40,191,141,88,197,191,141,125,98,192,141,166,255,192,141,211,156,193,141,5,58,194,141,58,215,194,141,116,116,195,141,178,17,196,141,245,174,196,141,59,76,197,141,134,233,197,141,213,134,198,141,40,36,199,141,127,193,199,141,218,94,200,141,58,252,200,141,158,153,201,141,6,55,202,141,114,212,202,141,226,113,203,141,87,15,204,141,207,172,204,141,76,74,205,141,205,231,205,141,82,133,206,141,220,34,207,141,105,192,207,141,251,93,208,141,145,251,208,141,43,153,209,141,201,54,210,141,108,212,210,141,18,114,211,141,189,15,212,141,108,173,212,141,31,75,213,141,214,232,213,141,145,134,214,141,81,36,215,141,21,194,215,141,220,95,216,141,168,253,216,141,121,155,217,141,77,57,218,141,38,215,218,141,2,117,219,141,227,18,220,141,200,176,220,141,177,78,221,141,158,236,221,141,144,138,222,141,133,40,223,141,127,198,223,141,125,100,224,141,127,2,225,141,133,160,225,141,143,62,226,141,158,220,226,141,176,122,227,141,199,24,228,141,226,182,228,141,1,85,229,141,36,243,229,141,76,145,230,141,119,47,231,141,167,205,231,141,218,107,232,141,18,10,233,141,78,168,233,141,142,70,234,141,211,228,234,141,27,131,235,141,104,33,236,141,184,191,236,141,13,94,237,141,102,252,237,141,195,154,238,141,36,57,239,141,138,215,239,141,243,117,240,141,97,20,241,141,211,178,241,141,72,81,242,141,194,239,242,141,64,142,243,141,195,44,244,141,73,203,244,141,211,105,245,141,98,8,246,141,245,166,246,141,139,69,247,141,38,228,247,141,197,130,248,141,105,33,249,141,16,192,249,141,187,94,250,141,107,253,250,141,30,156,251,141,214,58,252,141,146,217,252,141,82,120,253,141,22,23,254,141,222,181,254,141,170,84,255,141,123,243,255,141,79,146,0,142,40,49,1,142,4,208,1,142,229,110,2,142,202,13,3,142,179,172,3,142,160,75,4,142,145,234,4,142,135,137,5,142,128,40,6,142,125,199,6,142,127,102,7,142,133,5,8,142,143,164,8,142,156,67,9,142,174,226,9,142,196,129,10,142,223,32,11,142,253,191,11,142,31,95,12,142,70,254,12,142,112,157,13,142,159,60,14,142,209,219,14,142,8,123,15,142,67,26,16,142,130,185,16,142,197,88,17,142,12,248,17,142,87,151,18,142,166,54,19,142,250,213,19,142,81,117,20,142,173,20,21,142,12,180,21,142,112,83,22,142,216,242,22,142,67,146,23,142,179,49,24,142,39,209,24,142,159,112,25,142,27,16,26,142,156,175,26,142,32,79,27,142,168,238,27,142,52,142,28,142,197,45,29,142,89,205,29,142,242,108,30,142,143,12,31,142,47,172,31,142,212,75,32,142,125,235,32,142,42,139,33,142,219,42,34,142,144,202,34,142,73,106,35,142,6,10,36,142,199,169,36,142,141,73,37,142,86,233,37,142,35,137,38,142,245,40,39,142,202,200,39,142,164,104,40,142,129,8,41,142,99,168,41,142,73,72,42,142,50,232,42,142,32,136,43,142,18,40,44,142,8,200,44,142,2,104,45,142,0,8,46,142,2,168,46,142,8,72,47,142,18,232,47,142,32,136,48,142,50,40,49,142,73,200,49,142,99,104,50,142,129,8,51,142,163,168,51,142,202,72,52,142,244,232,52,142], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([35,137,53,142,85,41,54,142,140,201,54,142,198,105,55,142,5,10,56,142,72,170,56,142,142,74,57,142,217,234,57,142,40,139,58,142,123,43,59,142,209,203,59,142,44,108,60,142,139,12,61,142,238,172,61,142,85,77,62,142,192,237,62,142,47,142,63,142,162,46,64,142,25,207,64,142,148,111,65,142,19,16,66,142,150,176,66,142,29,81,67,142,168,241,67,142,55,146,68,142,202,50,69,142,97,211,69,142,252,115,70,142,156,20,71,142,63,181,71,142,230,85,72,142,145,246,72,142,64,151,73,142,244,55,74,142,171,216,74,142,102,121,75,142,37,26,76,142,233,186,76,142,176,91,77,142,123,252,77,142,75,157,78,142,30,62,79,142,245,222,79,142,208,127,80,142,176,32,81,142,147,193,81,142,122,98,82,142,102,3,83,142,85,164,83,142,72,69,84,142,64,230,84,142,59,135,85,142,58,40,86,142,61,201,86,142,69,106,87,142,80,11,88,142,95,172,88,142,115,77,89,142,138,238,89,142,165,143,90,142,196,48,91,142,231,209,91,142,15,115,92,142,58,20,93,142,105,181,93,142,156,86,94,142,211,247,94,142,14,153,95,142,78,58,96,142,145,219,96,142,216,124,97,142,35,30,98,142,114,191,98,142,197,96,99,142,28,2,100,142,119,163,100,142,214,68,101,142,57,230,101,142,160,135,102,142,11,41,103,142,121,202,103,142,236,107,104,142,99,13,105,142,222,174,105,142,93,80,106,142,223,241,106,142,102,147,107,142,241,52,108,142,127,214,108,142,18,120,109,142,169,25,110,142,67,187,110,142,226,92,111,142,132,254,111,142,42,160,112,142,213,65,113,142,131,227,113,142,53,133,114,142,236,38,115,142,166,200,115,142,100,106,116,142,38,12,117,142,236,173,117,142,182,79,118,142,132,241,118,142,86,147,119,142,44,53,120,142,6,215,120,142,228,120,121,142,198,26,122,142,172,188,122,142,149,94,123,142,131,0,124,142,117,162,124,142,106,68,125,142,100,230,125,142,97,136,126,142,98,42,127,142,104,204,127,142,113,110,128,142,126,16,129,142,143,178,129,142,164,84,130,142,189,246,130,142,218,152,131,142,251,58,132,142,32,221,132,142,73,127,133,142,118,33,134,142,166,195,134,142,219,101,135,142,20,8,136,142,80,170,136,142,144,76,137,142,213,238,137,142,29,145,138,142,105,51,139,142,185,213,139,142,14,120,140,142,102,26,141,142,193,188,141,142,33,95,142,142,133,1,143,142,237,163,143,142,88,70,144,142,200,232,144,142,60,139,145,142,179,45,146,142,46,208,146,142,174,114,147,142,49,21,148,142,184,183,148,142,67,90,149,142,210,252,149,142,101,159,150,142,251,65,151,142,150,228,151,142,53,135,152,142,215,41,153,142,126,204,153,142,40,111,154,142,214,17,155,142,137,180,155,142,63,87,156,142,249,249,156,142,183,156,157,142,120,63,158,142,62,226,158,142,8,133,159,142,213,39,160,142,167,202,160,142,124,109,161,142,85,16,162,142,51,179,162,142,20,86,163,142,249,248,163,142,226,155,164,142,206,62,165,142,191,225,165,142,180,132,166,142,172,39,167,142,169,202,167,142,169,109,168,142,173,16,169,142,181,179,169,142,193,86,170,142,209,249,170,142,229,156,171,142,252,63,172,142,24,227,172,142,55,134,173,142,91,41,174,142,130,204,174,142,173,111,175,142,220,18,176,142,15,182,176,142,70,89,177,142,129,252,177,142,191,159,178,142,2,67,179,142,72,230,179,142,146,137,180,142,224,44,181,142,50,208,181,142,136,115,182,142,226,22,183,142,63,186,183,142,161,93,184,142,6,1,185,142,112,164,185,142,221,71,186,142,78,235,186,142,195,142,187,142,59,50,188,142,184,213,188,142,57,121,189,142,189,28,190,142,69,192,190,142,209,99,191,142,97,7,192,142,245,170,192,142,141,78,193,142,41,242,193,142,200,149,194,142,108,57,195,142,19,221,195,142,190,128,196,142,109,36,197,142,32,200,197,142,214,107,198,142,145,15,199,142,79,179,199,142,18,87,200,142,216,250,200,142,162,158,201,142,112,66,202,142,65,230,202,142,23,138,203,142,240,45,204,142,206,209,204,142,175,117,205,142,148,25,206,142,125,189,206,142,105,97,207,142,90,5,208,142,78,169,208,142,71,77,209,142,67,241,209,142,67,149,210,142,71,57,211,142,78,221,211,142,90,129,212,142,105,37,213,142,124,201,213,142,147,109,214,142,174,17,215,142,205,181,215,142,240,89,216,142,22,254,216,142,64,162,217,142,111,70,218,142,161,234,218,142,214,142,219,142,16,51,220,142,77,215,220,142,143,123,221,142,212,31,222,142,29,196,222,142,106,104,223,142,187,12,224,142,15,177,224,142,103,85,225,142,196,249,225,142,36,158,226,142,135,66,227,142,239,230,227,142,91,139,228,142,202,47,229,142,61,212,229,142,180,120,230,142,47,29,231,142,174,193,231,142,48,102,232,142,183,10,233,142,65,175,233,142,207,83,234,142,96,248,234,142,246,156,235,142,143,65,236,142,45,230,236,142,206,138,237,142,115,47,238,142,27,212,238,142,200,120,239,142,120,29,240,142,44,194,240,142,228,102,241,142,160,11,242,142,96,176,242,142,35,85,243,142,235,249,243,142,182,158,244,142,133,67,245,142,87,232,245,142,46,141,246,142,8,50,247,142,230,214,247,142,200,123,248,142,174,32,249,142,151,197,249,142,133,106,250,142,118,15,251,142,107,180,251,142,100,89,252,142,96,254,252,142,97,163,253,142,101,72,254,142,109,237,254,142,121,146,255,142,136,55,0,143,156,220,0,143,179,129,1,143,206,38,2,143,237,203,2,143,15,113,3,143,54,22,4,143,96,187,4,143,142,96,5,143,192,5,6,143,245,170,6,143,47,80,7,143,108,245,7,143,173,154,8,143,242,63,9,143,58,229,9,143,134,138,10,143,215,47,11,143,42,213,11,143,130,122,12,143,222,31,13,143,61,197,13,143,160,106,14,143,7,16,15,143,113,181,15,143,224,90,16,143,82,0,17,143,200,165,17,143,66,75,18,143,191,240,18,143,65,150,19,143,198,59,20,143,79,225,20,143,219,134,21,143,108,44,22,143,0,210,22,143,152,119,23,143,52,29,24,143,211,194,24,143,119,104,25,143,30,14,26,143,201,179,26,143,119,89,27,143,42,255,27,143,224,164,28,143,154,74,29,143,88,240,29,143,25,150,30,143,222,59,31,143,168,225,31,143,116,135,32,143,69,45,33,143,25,211,33,143,241,120,34,143,205,30,35,143,173,196,35,143,144,106,36,143,119,16,37,143,98,182,37,143,81,92,38,143,68,2,39,143,58,168,39,143,52,78,40,143,49,244,40,143,51,154,41,143,56,64,42,143,65,230,42,143,78,140,43,143,94,50,44,143,115,216,44,143,139,126,45,143,167,36,46,143,198,202,46,143,233,112,47,143,16,23,48,143,59,189,48,143,106,99,49,143,156,9,50,143,210,175,50,143,12,86,51,143,73,252,51,143,139,162,52,143,208,72,53,143,24,239,53,143,101,149,54,143,181,59,55,143,9,226,55,143,97,136,56,143,188,46,57,143,28,213,57,143,127,123,58,143,229,33,59,143,80,200,59,143,190,110,60,143,48,21,61,143,166,187,61,143,31,98,62,143,156,8,63,143,29,175,63,143,162,85,64,143,42,252,64,143,182,162,65,143,70,73,66,143,217,239,66,143,113,150,67,143,12,61,68,143,170,227,68,143,77,138,69,143,243,48,70,143,157,215,70,143,75,126,71,143,252,36,72,143,177,203,72,143,106,114,73,143,39,25,74,143,231,191,74,143,171,102,75,143,115,13,76,143,62,180,76,143,13,91,77,143,224,1,78,143,183,168,78,143,145,79,79,143,111,246,79,143,81,157,80,143,55,68,81,143,32,235,81,143,13,146,82,143,253,56,83,143,242,223,83,143,234,134,84,143,230,45,85,143,229,212,85,143,232,123,86,143,239,34,87,143,250,201,87,143,8,113,88,143,26,24,89,143,48,191,89,143,74,102,90,143,103,13,91,143,136,180,91,143,172,91,92,143,213,2,93,143,1,170,93,143,48,81,94,143,100,248,94,143,155,159,95,143,214,70,96,143,20,238,96,143,87,149,97,143,157,60,98,143,230,227,98,143,52,139,99,143,133,50,100,143,217,217,100,143,50,129,101,143,142,40,102,143,238,207,102,143,81,119,103,143,185,30,104,143,36,198,104,143,146,109,105,143,5,21,106,143,123,188,106,143,244,99,107,143,114,11,108,143,243,178,108,143,120,90,109,143,0,2,110,143,140,169,110,143,28,81,111,143,176,248,111,143,71,160,112,143,226,71,113,143,128,239,113,143,35,151,114,143,201,62,115,143,114,230,115,143,32,142,116,143,209,53,117,143,133,221,117,143,62,133,118,143,250,44,119,143,186,212,119,143,125,124,120,143,68,36,121,143,15,204,121,143,221,115,122,143,175,27,123,143,133,195,123,143,95,107,124,143,60,19,125,143,29,187,125,143,1,99,126,143,233,10,127,143,213,178,127,143,197,90,128,143,184,2,129,143,175,170,129,143,170,82,130,143,168,250,130,143,170,162,131,143,175,74,132,143,184,242,132,143,197,154,133,143,214,66,134,143,234,234,134,143,2,147,135,143,30,59,136,143,61,227,136,143,96,139,137,143,134,51,138,143,176,219,138,143,222,131,139,143,16,44,140,143,69,212,140,143,126,124,141,143,186,36,142,143,251,204,142,143,62,117,143,143,134,29,144,143,209,197,144,143,32,110,145,143,114,22,146,143,200,190,146,143,34,103,147,143,128,15,148,143,225,183,148,143,69,96,149,143,174,8,150,143,26,177,150,143,138,89,151,143,253,1,152,143,116,170,152,143,238,82,153,143,109,251,153,143,239,163,154,143,116,76,155,143,253,244,155,143,138,157,156,143,27,70,157,143,175,238,157,143,71,151,158,143,226,63,159,143,129,232,159,143,36,145,160,143,202,57,161,143,116,226,161,143,34,139,162,143,211,51,163,143,136,220,163,143,65,133,164,143,253,45,165,143,189,214,165,143,128,127,166,143,71,40,167,143,18,209,167,143,225,121,168,143,179,34,169,143,136,203,169,143,98,116,170,143,62,29,171,143,31,198,171,143,3,111,172,143,235,23,173,143,214,192,173,143,198,105,174,143,184,18,175,143,175,187,175,143,168,100,176,143,166,13,177,143,167,182,177,143,172,95,178,143,181,8,179,143,193,177,179,143,208,90,180,143,228,3,181,143,251,172,181,143,21,86,182,143,51,255,182,143,85,168,183,143,123,81,184,143,164,250,184,143,208,163,185,143,1,77,186,143,53,246,186,143,108,159,187,143,167,72,188,143,230,241,188,143,40,155,189,143,110,68,190,143,184,237,190,143,5,151,191,143,86,64,192,143,170,233,192,143,2,147,193,143,94,60,194,143,189,229,194,143,32,143,195,143,135,56,196,143,241,225,196,143,95,139,197,143,208,52,198,143,69,222,198,143,189,135,199,143,57,49,200,143,185,218,200,143,60,132,201,143,195,45,202,143,78,215,202,143,220,128,203,143,110,42,204,143,3,212,204,143,156,125,205,143,57,39,206,143,217,208,206,143,125,122,207,143,36,36,208,143,207,205,208,143,126,119,209,143,48,33,210,143,229,202,210,143,159,116,211,143,92,30,212,143,28,200,212,143,224,113,213,143,168,27,214,143,115,197,214,143,66,111,215,143,21,25,216,143,235,194,216,143,196,108,217,143,162,22,218,143,131,192,218,143,103,106,219,143,79,20,220,143,59,190,220,143,42,104,221,143,29,18,222,143,19,188,222,143,13,102,223,143,10,16,224,143,12,186,224,143,16,100,225,143,25,14,226,143,36,184,226,143,52,98,227,143,71,12,228,143,94,182,228,143,120,96,229,143,149,10,230,143,183,180,230,143,220,94,231,143,4,9,232,143,48,179,232,143,96,93,233,143,147,7,234,143,202,177,234,143,4,92,235,143,66,6,236,143,132,176,236,143,201,90,237,143,18,5,238,143,94,175,238,143,174,89,239,143,1,4,240,143,88,174,240,143,179,88,241,143,17,3,242,143,114,173,242,143,216,87,243,143,64,2,244,143,173,172,244,143,29,87,245,143,144,1,246,143,7,172,246,143,130,86,247,143,0,1,248,143,130,171,248,143,7,86,249,143,144,0,250,143,28,171,250,143,172,85,251,143,64,0,252,143,215,170,252,143,114,85,253,143,16,0,254,143,178,170,254,143,87,85,255,143,0,0,0,148,86,85,0,148,174,170,0,148,8,0,1,148,99,85,1,148,193,170,1,148,32,0,2,148,129,85,2,148,227,170,2,148,72,0,3,148,174,85,3,148,22,171,3,148,128,0,4,148,235,85,4,148,89,171,4,148,200,0,5,148,56,86,5,148,171,171,5,148,31,1,6,148,150,86,6,148,14,172,6,148,135,1,7,148,3,87,7,148,128,172,7,148,255,1,8,148,128,87,8,148,2,173,8,148,135,2,9,148,13,88,9,148,149,173,9,148,30,3,10,148,170,88,10,148,55,174,10,148,198,3,11,148,87,89,11,148,233,174,11,148,126,4,12,148,20,90,12,148,171,175,12,148,69,5,13,148,224,90,13,148,125,176,13,148,28,6,14,148,189,91,14,148,95,177,14,148,3,7,15,148,169,92,15,148,81,178,15,148,250,7,16,148,166,93,16,148,83,179,16,148,1,9,17,148,178,94,17,148,100,180,17,148,24,10,18,148,206,95,18,148,134,181,18,148,63,11,19,148,250,96,19,148,183,182,19,148,117,12,20,148,54,98,20,148,248,183,20,148,188,13,21,148,129,99,21,148,73,185,21,148,18,15,22,148,221,100,22,148,170,186,22,148,120,16,23,148,72,102,23,148,26,188,23,148,238,17,24,148,195,103,24,148,155,189,24,148,116,19,25,148,78,105,25,148,43,191,25,148,9,21,26,148,233,106,26,148,203,192,26,148,174,22,27,148,148,108,27,148,123,194,27,148,99,24,28,148,78,110,28,148,58,196,28,148,40,26,29,148,24,112,29,148,10,198,29,148,253,27,30,148,242,113,30,148,233,199,30,148,225,29,31,148,220,115,31,148,216,201,31,148,213,31,32,148,213,117,32,148,214,203,32,148,217,33,33,148,222,119,33,148,229,205,33,148,237,35,34,148,247,121,34,148,3,208,34,148,17,38,35,148,32,124,35,148,49,210,35,148,68,40,36,148,88,126,36,148,110,212,36,148,135,42,37,148,160,128,37,148,188,214,37,148,217,44,38,148,248,130,38,148,25,217,38,148,59,47,39,148,96,133,39,148,134,219,39,148,173,49,40,148,215,135,40,148,2,222,40,148,47,52,41,148,94,138,41,148,142,224,41,148,192,54,42,148,244,140,42,148,42,227,42,148,98,57,43,148,155,143,43,148,214,229,43,148,18,60,44,148,81,146,44,148,145,232,44,148,211,62,45,148,22,149,45,148,92,235,45,148,163,65,46,148,236,151,46,148,54,238,46,148,130,68,47,148,209,154,47,148,32,241,47,148,114,71,48,148,197,157,48,148,26,244,48,148,113,74,49,148,201,160,49,148,35,247,49,148,127,77,50,148,221,163,50,148,61,250,50,148,158,80,51,148,1,167,51,148,101,253,51,148,204,83,52,148,52,170,52,148,157,0,53,148,9,87,53,148,118,173,53,148,229,3,54,148,86,90,54,148,201,176,54,148,61,7,55,148,179,93,55,148,42,180,55,148,164,10,56,148,31,97,56,148,156,183,56,148,26,14,57,148,155,100,57,148,29,187,57,148,161,17,58,148,38,104,58,148,173,190,58,148,54,21,59,148,193,107,59,148,77,194,59,148,220,24,60,148,108,111,60,148,253,197,60,148,145,28,61,148,38,115,61,148,188,201,61,148,85,32,62,148,239,118,62,148,139,205,62,148,41,36,63,148,200,122,63,148,105,209,63,148,12,40,64,148,177,126,64,148,87,213,64,148,255,43,65,148,169,130,65,148,85,217,65,148,2,48,66,148,177,134,66,148,97,221,66,148,20,52,67,148,200,138,67,148,126,225,67,148,53,56,68,148,239,142,68,148,170,229,68,148,102,60,69,148,37,147,69,148,229,233,69,148,167,64,70,148,106,151,70,148,48,238,70,148,247,68,71,148,192,155,71,148,138,242,71,148,86,73,72,148,36,160,72,148,244,246,72,148,197,77,73,148,152,164,73,148,109,251,73,148,67,82,74,148,28,169,74,148,246,255,74,148,209,86,75,148,175,173,75,148,142,4,76,148,111,91,76,148,81,178,76,148,53,9,77,148,27,96,77,148,3,183,77,148,236,13,78,148,215,100,78,148,196,187,78,148,179,18,79,148,163,105,79,148,149,192,79,148,136,23,80,148,126,110,80,148,117,197,80,148,110,28,81,148,104,115,81,148,100,202,81,148,98,33,82,148,98,120,82,148,99,207,82,148,102,38,83,148,107,125,83,148,114,212,83,148,122,43,84,148,132,130,84,148,143,217,84,148,156,48,85,148,171,135,85,148,188,222,85,148,207,53,86,148,227,140,86,148,249,227,86,148,16,59,87,148,41,146,87,148,68,233,87,148,97,64,88,148,127,151,88,148,159,238,88,148,193,69,89,148,229,156,89,148,10,244,89,148,49,75,90,148,89,162,90,148,132,249,90,148,176,80,91,148,221,167,91,148,13,255,91,148,62,86,92,148,113,173,92,148,165,4,93,148,220,91,93,148,19,179,93,148,77,10,94,148,136,97,94,148,197,184,94,148,4,16,95,148,69,103,95,148,135,190,95,148,203,21,96,148,16,109,96,148,87,196,96,148,160,27,97,148,235,114,97,148,55,202,97,148,133,33,98,148,213,120,98,148,38,208,98,148,122,39,99,148,206,126,99,148,37,214,99,148,125,45,100,148,215,132,100,148,51,220,100,148,144,51,101,148,239,138,101,148,80,226,101,148,178,57,102,148,22,145,102,148,124,232,102,148,227,63,103,148,77,151,103,148,183,238,103,148,36,70,104,148,146,157,104,148,2,245,104,148,116,76,105,148,231,163,105,148,92,251,105,148,211,82,106,148,75,170,106,148,197,1,107,148,65,89,107,148,191,176,107,148,62,8,108,148,191,95,108,148,65,183,108,148,197,14,109,148,75,102,109,148,211,189,109,148,92,21,110,148,231,108,110,148,116,196,110,148,2,28,111,148,146,115,111,148,36,203,111,148,184,34,112,148,77,122,112,148,228,209,112,148,124,41,113,148,22,129,113,148,178,216,113,148,80,48,114,148,239,135,114,148,144,223,114,148,51,55,115,148,215,142,115,148,125,230,115,148,37,62,116,148,206,149,116,148,121,237,116,148,38,69,117,148,212,156,117,148,132,244,117,148,54,76,118,148,234,163,118,148,159,251,118,148,86,83,119,148,14,171,119,148,200,2,120,148,132,90,120,148,66,178,120,148,1,10,121,148,194,97,121,148,132,185,121,148,73,17,122,148,15,105,122,148,214,192,122,148,160,24,123,148,107,112,123,148,55,200,123,148,6,32,124,148,214,119,124,148,168,207,124,148,123,39,125,148,80,127,125,148,39,215,125,148,255,46,126,148,217,134,126,148,181,222,126,148,147,54,127,148,114,142,127,148,83,230,127,148,53,62,128,148,25,150,128,148,255,237,128,148,231,69,129,148,208,157,129,148,187,245,129,148,167,77,130,148,149,165,130,148,133,253,130,148,119,85,131,148,106,173,131,148,95,5,132,148,86,93,132,148,78,181,132,148,72,13,133,148,68,101,133,148,65,189,133,148,64,21,134,148,64,109,134,148,67,197,134,148,71,29,135,148,76,117,135,148,84,205,135,148,93,37,136,148,103,125,136,148,116,213,136,148,130,45,137,148,145,133,137,148,163,221,137,148,182,53,138,148,202,141,138,148,225,229,138,148,249,61,139,148,18,150,139,148,46,238,139,148,75,70,140,148,105,158,140,148,138,246,140,148,172,78,141,148,207,166,141,148,245,254,141,148,28,87,142,148,68,175,142,148,111,7,143,148,155,95,143,148,200,183,143,148,248,15,144,148,41,104,144,148,91,192,144,148,144,24,145,148,198,112,145,148,253,200,145,148,55,33,146,148,114,121,146,148,174,209,146,148,237,41,147,148,44,130,147,148,110,218,147,148,177,50,148,148,246,138,148,148,61,227,148,148,133,59,149,148,207,147,149,148,27,236,149,148,104,68,150,148,183,156,150,148,8,245,150,148,90,77,151,148,174,165,151,148,3,254,151,148,90,86,152,148,179,174,152,148,14,7,153,148,106,95,153,148,200,183,153,148,39,16,154,148,137,104,154,148,235,192,154,148,80,25,155,148,182,113,155,148,30,202,155,148,135,34,156,148,242,122,156,148,95,211,156,148,206,43,157,148,62,132,157,148,175,220,157,148,35,53,158,148,152,141,158,148,14,230,158,148,135,62,159,148,1,151,159,148,124,239,159,148,250,71,160,148,121,160,160,148,249,248,160,148,124,81,161,148,255,169,161,148,133,2,162,148,12,91,162,148,149,179,162,148,32,12,163,148,172,100,163,148,58,189,163,148,201,21,164,148,90,110,164,148,237,198,164,148,129,31,165,148,24,120,165,148,175,208,165,148,73,41,166,148,228,129,166,148,128,218,166,148,31,51,167,148,191,139,167,148,96,228,167,148,3,61,168,148,168,149,168,148,79,238,168,148,247,70,169,148,161,159,169,148,76,248,169,148,250,80,170,148,168,169,170,148,89,2,171,148,11,91,171,148,191,179,171,148,116,12,172,148,43,101,172,148,228,189,172,148,158,22,173,148,90,111,173,148,24,200,173,148,215,32,174,148,152,121,174,148,90,210,174,148,30,43,175,148,228,131,175,148,172,220,175,148,117,53,176,148,64,142,176,148,12,231,176,148,218,63,177,148,170,152,177,148,123,241,177,148,78,74,178,148,34,163,178,148,249,251,178,148,209,84,179,148,170,173,179,148,133,6,180,148,98,95,180,148,64,184,180,148,32,17,181,148,2,106,181,148,230,194,181,148,203,27,182,148,177,116,182,148,153,205,182,148,131,38,183,148,111,127,183,148,92,216,183,148,75,49,184,148,59,138,184,148,45,227,184,148,33,60,185,148,22,149,185,148,13,238,185,148,6,71,186,148,0,160,186,148,252,248,186,148,250,81,187,148,249,170,187,148,250,3,188,148,252,92,188,148,0,182,188,148,6,15,189,148,13,104,189,148,22,193,189,148,33,26,190,148,45,115,190,148,59,204,190,148,74,37,191,148,91,126,191,148,110,215,191,148,131,48,192,148,153,137,192,148,176,226,192,148,202,59,193,148,228,148,193,148,1,238,193,148,31,71,194,148,63,160,194,148,96,249,194,148,131,82,195,148,168,171,195,148,206,4,196,148,246,93,196,148,32,183,196,148,75,16,197,148,120,105,197,148,167,194,197,148,215,27,198,148,8,117,198,148,60,206,198,148,113,39,199,148,167,128,199,148,223,217,199,148,25,51,200,148,85,140,200,148,146,229,200,148,209,62,201,148,17,152,201,148,83,241,201,148,151,74,202,148,220,163,202,148,35,253,202,148,107,86,203,148,181,175,203,148,1,9,204,148,78,98,204,148,157,187,204,148,238,20,205,148,64,110,205,148,148,199,205,148,233,32,206,148,64,122,206,148,153,211,206,148,243,44,207,148,79,134,207,148,173,223,207,148,12,57,208,148,109,146,208,148,207,235,208,148,51,69,209,148,153,158,209,148,0,248,209,148,105,81,210,148,212,170,210,148,64,4,211,148,174,93,211,148,29,183,211,148,142,16,212,148,1,106,212,148,117,195,212,148,235,28,213,148,98,118,213,148,219,207,213,148,86,41,214,148,210,130,214,148,80,220,214,148,208,53,215,148,81,143,215,148,212,232,215,148,88,66,216,148,222,155,216,148,102,245,216,148,239,78,217,148,122,168,217,148,7,2,218,148,149,91,218,148,36,181,218,148,182,14,219,148,73,104,219,148,221,193,219,148,115,27,220,148,11,117,220,148,165,206,220,148,64,40,221,148,220,129,221,148,122,219,221,148,26,53,222,148,188,142,222,148,95,232,222,148,3,66,223,148,170,155,223,148,82,245,223,148,251,78,224,148,166,168,224,148,83,2,225,148,1,92,225,148,177,181,225,148,99,15,226,148,22,105,226,148,203,194,226,148,129,28,227,148,57,118,227,148,243,207,227,148,174,41,228,148,107,131,228,148,41,221,228,148,233,54,229,148,171,144,229,148,110,234,229,148,51,68,230,148,249,157,230,148,193,247,230,148,139,81,231,148,86,171,231,148,35,5,232,148,242,94,232,148,194,184,232,148,147,18,233,148,103,108,233,148,59,198,233,148,18,32,234,148,234,121,234,148,196,211,234,148,159,45,235,148,124,135,235,148,91,225,235,148,59,59,236,148,28,149,236,148,0,239,236,148,229,72,237,148,203,162,237,148,179,252,237,148,157,86,238,148,136,176,238,148,117,10,239,148,100,100,239,148,84,190,239,148,70,24,240,148,57,114,240,148,46,204,240,148,36,38,241,148,29,128,241,148,22,218,241,148,18,52,242,148,15,142,242,148,13,232,242,148,13,66,243,148,15,156,243,148,18,246,243,148,23,80,244,148,30,170,244,148,38,4,245,148,48,94,245,148,59,184,245,148,72,18,246,148,86,108,246,148,102,198,246,148,120,32,247,148,139,122,247,148,160,212,247,148,183,46,248,148,207,136,248,148,233,226,248,148,4,61,249,148,33,151,249,148,63,241,249,148,95,75,250,148,129,165,250,148,164,255,250,148,201,89,251,148,239,179,251,148,23,14,252,148,65,104,252,148,108,194,252,148,153,28,253,148,199,118,253,148,247,208,253,148,41,43,254,148,92,133,254,148,145,223,254,148,199,57,255,148,255,147,255,148,56,238,255,148,116,72,0,149,176,162,0,149,239,252,0,149,46,87,1,149,112,177,1,149,179,11,2,149,248,101,2,149,62,192,2,149,134,26,3,149,207,116,3,149,26,207,3,149,103,41,4,149,181,131,4,149,5,222,4,149,86,56,5,149,169,146,5,149,253,236,5,149,84,71,6,149,171,161,6,149,4,252,6,149,95,86,7,149,188,176,7,149,26,11,8,149,121,101,8,149,219,191,8,149,61,26,9,149,162,116,9,149,8,207,9,149,111,41,10,149,216,131,10,149,67,222,10,149,175,56,11,149,29,147,11,149,141,237,11,149,254,71,12,149,113,162,12,149,229,252,12,149,91,87,13,149,210,177,13,149,75,12,14,149,197,102,14,149,65,193,14,149,191,27,15,149,62,118,15,149,191,208,15,149,66,43,16,149,198,133,16,149,75,224,16,149,211,58,17,149,91,149,17,149,230,239,17,149,114,74,18,149,255,164,18,149,142,255,18,149,31,90,19,149,177,180,19,149,69,15,20,149,218,105,20,149,113,196,20,149,10,31,21,149,164,121,21,149,64,212,21,149,221,46,22,149,124,137,22,149,28,228,22,149,190,62,23,149,98,153,23,149,7,244,23,149,174,78,24,149,86,169,24,149,0,4,25,149,171,94,25,149,88,185,25,149,7,20,26,149,183,110,26,149,105,201,26,149,28,36,27,149,209,126,27,149,135,217,27,149,64,52,28,149,249,142,28,149,180,233,28,149,113,68,29,149,47,159,29,149,239,249,29,149,177,84,30,149,116,175,30,149,56,10,31,149,255,100,31,149,198,191,31,149,144,26,32,149,91,117,32,149,39,208,32,149,245,42,33,149,197,133,33,149,150,224,33,149,105,59,34,149,61,150,34,149,19,241,34,149,234,75,35,149,195,166,35,149,158,1,36,149,122,92,36,149,88,183,36,149,55,18,37,149,24,109,37,149,251,199,37,149,223,34,38,149,196,125,38,149,171,216,38,149,148,51,39,149,126,142,39,149,106,233,39,149,87,68,40,149,70,159,40,149,55,250,40,149,41,85,41,149,29,176,41,149,18,11,42,149,9,102,42,149,1,193,42,149,251,27,43,149,247,118,43,149,244,209,43,149,242,44,44,149,242,135,44,149,244,226,44,149,247,61,45,149,252,152,45,149,3,244,45,149,11,79,46,149,20,170,46,149,31,5,47,149,44,96,47,149,58,187,47,149,74,22,48,149,91,113,48,149,110,204,48,149,131,39,49,149,153,130,49,149,176,221,49,149,202,56,50,149,228,147,50,149,1,239,50,149,30,74,51,149,62,165,51,149,95,0,52,149,129,91,52,149,165,182,52,149,203,17,53,149,242,108,53,149,27,200,53,149,69,35,54,149,113,126,54,149,159,217,54,149,206,52,55,149,254,143,55,149,48,235,55,149,100,70,56,149,153,161,56,149,208,252,56,149,8,88,57,149,66,179,57,149,125,14,58,149,186,105,58,149,249,196,58,149,57,32,59,149,123,123,59,149,190,214,59,149,3,50,60,149,73,141,60,149,145,232,60,149,218,67,61,149,37,159,61,149,114,250,61,149,192,85,62,149,15,177,62,149,97,12,63,149,179,103,63,149,8,195,63,149,94,30,64,149,181,121,64,149,14,213,64,149,104,48,65,149,196,139,65,149,34,231,65,149,129,66,66,149,226,157,66,149,68,249,66,149,168,84,67,149,13,176,67,149,116,11,68,149,221,102,68,149,71,194,68,149,178,29,69,149,31,121,69,149,142,212,69,149,254,47,70,149,112,139,70,149,227,230,70,149,88,66,71,149,206,157,71,149,70,249,71,149,192,84,72,149,59,176,72,149,183,11,73,149,53,103,73,149,181,194,73,149,54,30,74,149,185,121,74,149,61,213,74,149,195,48,75,149,75,140,75,149,212,231,75,149,94,67,76,149,234,158,76,149,120,250,76,149,7,86,77,149,151,177,77,149,42,13,78,149,189,104,78,149,83,196,78,149,233,31,79,149,130,123,79,149,28,215,79,149,183,50,80,149,84,142,80,149,243,233,80,149,147,69,81,149,52,161,81,149,216,252,81,149,124,88,82,149,35,180,82,149,202,15,83,149,116,107,83,149,31,199,83,149,203,34,84,149,121,126,84,149,41,218,84,149,218,53,85,149,140,145,85,149,64,237,85,149,246,72,86,149,173,164,86,149,102,0,87,149,32,92,87,149,220,183,87,149,153,19,88,149,88,111,88,149,25,203,88,149,219,38,89,149,158,130,89,149,99,222,89,149,42,58,90,149,242,149,90,149,187,241,90,149,135,77,91,149,83,169,91,149,34,5,92,149,241,96,92,149,195,188,92,149,150,24,93,149,106,116,93,149,64,208,93,149,23,44,94,149,240,135,94,149,203,227,94,149,167,63,95,149,133,155,95,149,100,247,95,149,68,83,96,149,39,175,96,149,10,11,97,149,240,102,97,149,215,194,97,149,191,30,98,149,169,122,98,149,148,214,98,149,129,50,99,149,112,142,99,149,96,234,99,149,81,70,100,149,68,162,100,149,57,254,100,149,47,90,101,149,39,182,101,149,32,18,102,149,26,110,102,149,23,202,102,149,20,38,103,149,20,130,103,149,21,222,103,149,23,58,104,149,27,150,104,149,32,242,104,149,39,78,105,149,48,170,105,149,58,6,106,149,69,98,106,149,82,190,106,149,97,26,107,149,113,118,107,149,131,210,107,149,150,46,108,149,171,138,108,149,193,230,108,149,217,66,109,149,242,158,109,149,13,251,109,149,41,87,110,149,71,179,110,149,102,15,111,149,135,107,111,149,170,199,111,149,205,35,112,149,243,127,112,149,26,220,112,149,67,56,113,149,109,148,113,149,152,240,113,149,197,76,114,149,244,168,114,149,36,5,115,149,86,97,115,149,137,189,115,149,190,25,116,149,244,117,116,149,44,210,116,149,101,46,117,149,160,138,117,149,220,230,117,149,26,67,118,149,89,159,118,149,154,251,118,149,221,87,119,149,33,180,119,149,102,16,120,149,173,108,120,149,245,200,120,149,63,37,121,149,139,129,121,149,216,221,121,149,39,58,122,149,119,150,122,149,200,242,122,149,28,79,123,149,112,171,123,149,198,7,124,149,30,100,124,149,119,192,124,149,210,28,125,149,46,121,125,149,140,213,125,149,235,49,126,149,76,142,126,149,174,234,126,149,18,71,127,149,120,163,127,149,222,255,127,149,71,92,128,149,177,184,128,149,28,21,129,149,137,113,129,149,247,205,129,149,103,42,130,149,217,134,130,149,76,227,130,149,192,63,131,149,54,156,131,149,174,248,131,149,39,85,132,149,161,177,132,149,30,14,133,149,155,106,133,149,26,199,133,149,155,35,134,149,29,128,134,149,161,220,134,149,38,57,135,149,172,149,135,149,53,242,135,149,190,78,136,149,73,171,136,149,214,7,137,149,100,100,137,149,244,192,137,149,133,29,138,149,24,122,138,149,172,214,138,149,66,51,139,149,217,143,139,149,114,236,139,149,12,73,140,149,168,165,140,149,70,2,141,149,228,94,141,149,133,187,141,149,39,24,142,149,202,116,142,149,111,209,142,149,21,46,143,149,189,138,143,149,102,231,143,149,17,68,144,149,190,160,144,149,108,253,144,149,27,90,145,149,204,182,145,149,126,19,146,149,50,112,146,149,232,204,146,149,159,41,147,149,87,134,147,149,17,227,147,149,205,63,148,149,138,156,148,149,72,249,148,149,8,86,149,149,202,178,149,149,140,15,150,149,81,108,150,149,23,201,150,149,222,37,151,149,167,130,151,149,114,223,151,149,62,60,152,149,12,153,152,149,219,245,152,149,171,82,153,149,125,175,153,149,81,12,154,149,38,105,154,149,252,197,154,149,212,34,155,149,174,127,155,149,137,220,155,149,101,57,156,149,67,150,156,149,35,243,156,149,4,80,157,149,230,172,157,149,203,9,158,149,176,102,158,149,151,195,158,149,128,32,159,149,106,125,159,149,85,218,159,149,66,55,160,149,49,148,160,149,33,241,160,149,18,78,161,149,5,171,161,149,250,7,162,149,240,100,162,149,231,193,162,149,225,30,163,149,219,123,163,149,215,216,163,149,213,53,164,149,212,146,164,149,212,239,164,149,214,76,165,149,218,169,165,149,223,6,166,149,229,99,166,149,237,192,166,149,247,29,167,149,2,123,167,149,14,216,167,149,28,53,168,149,44,146,168,149,60,239,168,149,79,76,169,149,99,169,169,149,120,6,170,149,143,99,170,149,168,192,170,149,194,29,171,149,221,122,171,149,250,215,171,149,24,53,172,149,56,146,172,149,90,239,172,149,125,76,173,149,161,169,173,149,199,6,174,149,238,99,174,149,23,193,174,149,65,30,175,149,109,123,175,149,155,216,175,149,201,53,176,149,250,146,176,149,43,240,176,149,95,77,177,149,148,170,177,149,202,7,178,149,2,101,178,149,59,194,178,149,118,31,179,149,178,124,179,149,240,217,179,149,47,55,180,149,111,148,180,149,178,241,180,149,245,78,181,149,58,172,181,149,129,9,182,149,201,102,182,149,19,196,182,149,94,33,183,149,171,126,183,149,249,219,183,149,72,57,184,149,153,150,184,149,236,243,184,149,64,81,185,149,149,174,185,149,236,11,186,149,69,105,186,149,159,198,186,149,250,35,187,149,87,129,187,149,182,222,187,149,22,60,188,149,119,153,188,149,218,246,188,149,62,84,189,149,164,177,189,149,11,15,190,149,116,108,190,149,223,201,190,149,74,39,191,149,184,132,191,149,38,226,191,149,151,63,192,149,8,157,192,149,124,250,192,149,240,87,193,149,102,181,193,149,222,18,194,149,87,112,194,149,210,205,194,149,78,43,195,149,203,136,195,149,75,230,195,149,203,67,196,149,77,161,196,149,209,254,196,149,86,92,197,149,220,185,197,149,100,23,198,149,237,116,198,149,120,210,198,149,5,48,199,149,147,141,199,149,34,235,199,149,179,72,200,149,69,166,200,149,217,3,201,149,110,97,201,149,5,191,201,149,157,28,202,149,55,122,202,149,210,215,202,149,110,53,203,149,13,147,203,149,172,240,203,149,77,78,204,149,240,171,204,149,148,9,205,149,57,103,205,149,224,196,205,149,137,34,206,149,51,128,206,149,222,221,206,149,139,59,207,149,57,153,207,149,233,246,207,149,154,84,208,149,77,178,208,149,1,16,209,149,183,109,209,149,110,203,209,149,39,41,210,149,225,134,210,149,157,228,210,149,90,66,211,149,24,160,211,149,216,253,211,149,154,91,212,149,93,185,212,149,33,23,213,149,231,116,213,149,175,210,213,149,120,48,214,149,66,142,214,149,14,236,214,149,219,73,215,149,170,167,215,149,122,5,216,149,76,99,216,149,31,193,216,149,244,30,217,149,202,124,217,149,161,218,217,149,122,56,218,149,85,150,218,149,49,244,218,149,14,82,219,149,237,175,219,149,206,13,220,149,175,107,220,149,147,201,220,149,120,39,221,149,94,133,221,149,70,227,221,149,47,65,222,149,26,159,222,149,6,253,222,149,243,90,223,149,226,184,223,149,211,22,224,149,197,116,224,149,184,210,224,149,173,48,225,149,164,142,225,149,156,236,225,149,149,74,226,149,144,168,226,149,140,6,227,149,138,100,227,149,137,194,227,149,138,32,228,149,140,126,228,149,143,220,228,149,148,58,229,149,155,152,229,149,163,246,229,149,172,84,230,149,183,178,230,149,196,16,231,149,210,110,231,149,225,204,231,149,242,42,232,149,4,137,232,149,24,231,232,149,45,69,233,149,67,163,233,149,92,1,234,149,117,95,234,149,144,189,234,149,173,27,235,149,203,121,235,149,234,215,235,149,11,54,236,149,45,148,236,149,81,242,236,149,118,80,237,149,157,174,237,149,197,12,238,149,239,106,238,149,26,201,238,149,70,39,239,149,116,133,239,149,164,227,239,149,213,65,240,149,7,160,240,149,59,254,240,149,112,92,241,149,167,186,241,149,223,24,242,149,25,119,242,149,84,213,242,149,144,51,243,149,207,145,243,149,14,240,243,149,79,78,244,149,145,172,244,149,213,10,245,149,27,105,245,149,97,199,245,149,170,37,246,149,243,131,246,149,63,226,246,149,139,64,247,149,217,158,247,149,41,253,247,149,122,91,248,149,204,185,248,149,32,24,249,149,117,118,249,149,204,212,249,149,36,51,250,149,126,145,250,149,217,239,250,149,54,78,251,149,148,172,251,149,243,10,252,149,84,105,252,149,183,199,252,149,27,38,253,149,128,132,253,149,231,226,253,149,79,65,254,149,185,159,254,149,36,254,254,149,145,92,255,149,255,186,255,149,110,25,0,150,223,119,0,150,81,214,0,150,197,52,1,150,59,147,1,150,177,241,1,150,42,80,2,150,163,174,2,150,30,13,3,150,155,107,3,150,25,202,3,150,152,40,4,150,25,135,4,150,156,229,4,150,31,68,5,150,165,162,5,150,43,1,6,150,180,95,6,150,61,190,6,150,200,28,7,150,85,123,7,150,227,217,7,150,114,56,8,150,3,151,8,150,149,245,8,150,41,84,9,150,190,178,9,150,85,17,10,150,237,111,10,150,134,206,10,150,33,45,11,150,190,139,11,150,92,234,11,150,251,72,12,150,156,167,12,150,62,6,13,150,225,100,13,150,135,195,13,150,45,34,14,150,213,128,14,150,127,223,14,150,41,62,15,150,214,156,15,150,131,251,15,150,51,90,16,150,227,184,16,150,149,23,17,150,73,118,17,150,254,212,17,150,180,51,18,150,108,146,18,150,37,241,18,150,224,79,19,150,156,174,19,150,90,13,20,150,25,108,20,150,218,202,20,150,156,41,21,150,95,136,21,150,36,231,21,150,234,69,22,150,178,164,22,150,123,3,23,150,70,98,23,150,18,193,23,150,223,31,24,150,174,126,24,150,126,221,24,150,80,60,25,150,36,155,25,150,248,249,25,150,206,88,26,150,166,183,26,150,127,22,27,150,89,117,27,150,53,212,27,150,19,51,28,150,241,145,28,150,210,240,28,150,179,79,29,150,150,174,29,150,123,13,30,150,97,108,30,150,72,203,30,150,49,42,31,150,27,137,31,150,7,232,31,150,244,70,32,150,227,165,32,150,211,4,33,150,196,99,33,150,183,194,33,150,171,33,34,150,161,128,34,150,152,223,34,150,145,62,35,150,139,157,35,150,134,252,35,150,131,91,36,150,130,186,36,150,129,25,37,150,131,120,37,150,133,215,37,150,137,54,38,150,143,149,38,150,150,244,38,150,158,83,39,150,168,178,39,150,179,17,40,150,192,112,40,150,206,207,40,150,222,46,41,150,239,141,41,150,1,237,41,150,21,76,42,150,42,171,42,150,65,10,43,150,89,105,43,150,115,200,43,150,142,39,44,150,170,134,44,150,200,229,44,150,232,68,45,150,8,164,45,150,42,3,46,150,78,98,46,150,115,193,46,150,154,32,47,150,193,127,47,150,235,222,47,150,22,62,48,150,66,157,48,150,111,252,48,150,158,91,49,150,207,186,49,150,1,26,50,150,52,121,50,150,105,216,50,150,159,55,51,150,215,150,51,150,16,246,51,150,74,85,52,150,134,180,52,150,195,19,53,150,2,115,53,150,66,210,53,150,132,49,54,150,199,144,54,150,11,240,54,150,81,79,55,150,153,174,55,150,225,13,56,150,43,109,56,150,119,204,56,150,196,43,57,150,18,139,57,150,98,234,57,150,180,73,58,150,6,169,58,150,90,8,59,150,176,103,59,150,7,199,59,150,95,38,60,150,185,133,60,150,20,229,60,150,113,68,61,150,207,163,61,150,47,3,62,150,144,98,62,150,242,193,62,150,86,33,63,150,187,128,63,150,34,224,63,150,138,63,64,150,243,158,64,150,94,254,64,150,203,93,65,150,56,189,65,150,167,28,66,150,24,124,66,150,138,219,66,150,253,58,67,150,114,154,67,150,233,249,67,150,96,89,68,150,217,184,68,150,84,24,69,150,208,119,69,150,77,215,69,150,204,54,70,150,76,150,70,150,206,245,70,150,81,85,71,150,213,180,71,150,91,20,72,150,227,115,72,150,107,211,72,150,246,50,73,150,129,146,73,150,14,242,73,150,156,81,74,150,44,177,74,150,190,16,75,150,80,112,75,150,228,207,75,150,122,47,76,150,17,143,76,150,169,238,76,150,67,78,77,150,222,173,77,150,122,13,78,150,24,109,78,150,184,204,78,150,89,44,79,150,251,139,79,150,158,235,79,150,68,75,80,150,234,170,80,150,146,10,81,150,59,106,81,150,230,201,81,150,146,41,82,150,64,137,82,150,239,232,82,150,159,72,83,150,81,168,83,150,4,8,84,150,185,103,84,150,111,199,84,150,38,39,85,150,223,134,85,150,153,230,85,150,85,70,86,150,18,166,86,150,208,5,87,150,144,101,87,150,82,197,87,150,20,37,88,150,217,132,88,150,158,228,88,150,101,68,89,150,46,164,89,150,247,3,90,150,195,99,90,150,143,195,90,150,93,35,91,150,45,131,91,150,254,226,91,150,208,66,92,150,163,162,92,150,121,2,93,150,79,98,93,150,39,194,93,150,0,34,94,150,219,129,94,150,183,225,94,150,149,65,95,150,116,161,95,150,84,1,96,150,54,97,96,150,25,193,96,150,253,32,97,150,227,128,97,150,203,224,97,150,180,64,98,150,158,160,98,150,137,0,99,150,119,96,99,150,101,192,99,150,85,32,100,150,70,128,100,150,57,224,100,150,45,64,101,150,34,160,101,150,25,0,102,150,17,96,102,150,11,192,102,150,6,32,103,150,3,128,103,150,0,224,103,150,0,64,104,150,0,160,104,150,3,0,105,150,6,96,105,150,11,192,105,150,17,32,106,150,25,128,106,150,34,224,106,150,45,64,107,150,57,160,107,150,70,0,108,150,85,96,108,150,101,192,108,150,118,32,109,150,137,128,109,150,158,224,109,150,179,64,110,150,203,160,110,150,227,0,111,150,253,96,111,150,24,193,111,150,53,33,112,150,83,129,112,150,115,225,112,150,148,65,113,150,182,161,113,150,218,1,114,150,255,97,114,150,38,194,114,150,78,34,115,150,119,130,115,150,162,226,115,150,206,66,116,150,252,162,116,150,43,3,117,150,91,99,117,150,141,195,117,150,192,35,118,150,244,131,118,150,42,228,118,150,98,68,119,150,155,164,119,150,213,4,120,150,16,101,120,150,77,197,120,150,140,37,121,150,203,133,121,150,12,230,121,150,79,70,122,150,147,166,122,150,216,6,123,150,31,103,123,150,103,199,123,150,177,39,124,150,252,135,124,150,72,232,124,150,150,72,125,150,229,168,125,150,53,9,126,150,135,105,126,150,218,201,126,150,47,42,127,150,133,138,127,150,221,234,127,150,54,75,128,150,144,171,128,150,235,11,129,150,73,108,129,150,167,204,129,150,7,45,130,150,104,141,130,150,203,237,130,150,47,78,131,150,148,174,131,150,251,14,132,150,99,111,132,150,205,207,132,150,56,48,133,150,164,144,133,150,18,241,133,150,129,81,134,150,242,177,134,150,100,18,135,150,215,114,135,150,76,211,135,150,194,51,136,150,57,148,136,150,178,244,136,150,44,85,137,150,168,181,137,150,37,22,138,150,164,118,138,150,36,215,138,150,165,55,139,150,39,152,139,150,172,248,139,150,49,89,140,150,184,185,140,150,64,26,141,150,202,122,141,150,84,219,141,150,225,59,142,150,111,156,142,150,254,252,142,150,142,93,143,150,32,190,143,150,180,30,144,150,72,127,144,150,222,223,144,150,118,64,145,150,15,161,145,150,169,1,146,150,69,98,146,150,226,194,146,150,128,35,147,150], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([32,132,147,150,193,228,147,150,99,69,148,150,7,166,148,150,173,6,149,150,83,103,149,150,252,199,149,150,165,40,150,150,80,137,150,150,252,233,150,150,170,74,151,150,89,171,151,150,9,12,152,150,187,108,152,150,110,205,152,150,35,46,153,150,217,142,153,150,144,239,153,150,73,80,154,150,3,177,154,150,191,17,155,150,123,114,155,150,58,211,155,150,249,51,156,150,186,148,156,150,125,245,156,150,65,86,157,150,6,183,157,150,204,23,158,150,148,120,158,150,94,217,158,150,40,58,159,150,244,154,159,150,194,251,159,150,145,92,160,150,97,189,160,150,50,30,161,150,5,127,161,150,218,223,161,150,176,64,162,150,135,161,162,150,95,2,163,150,57,99,163,150,20,196,163,150,241,36,164,150,207,133,164,150,174,230,164,150,143,71,165,150,113,168,165,150,85,9,166,150,58,106,166,150,32,203,166,150,8,44,167,150,241,140,167,150,219,237,167,150,199,78,168,150,180,175,168,150,163,16,169,150,147,113,169,150,132,210,169,150,119,51,170,150,107,148,170,150,97,245,170,150,87,86,171,150,80,183,171,150,73,24,172,150,68,121,172,150,65,218,172,150,62,59,173,150,61,156,173,150,62,253,173,150,64,94,174,150,67,191,174,150,71,32,175,150,77,129,175,150,85,226,175,150,94,67,176,150,104,164,176,150,115,5,177,150,128,102,177,150,142,199,177,150,158,40,178,150,175,137,178,150,193,234,178,150,213,75,179,150,234,172,179,150,0,14,180,150,24,111,180,150,49,208,180,150,76,49,181,150,104,146,181,150,133,243,181,150,164,84,182,150,196,181,182,150,230,22,183,150,8,120,183,150,45,217,183,150,82,58,184,150,121,155,184,150,161,252,184,150,203,93,185,150,246,190,185,150,35,32,186,150,80,129,186,150,128,226,186,150,176,67,187,150,226,164,187,150,21,6,188,150,74,103,188,150,128,200,188,150,183,41,189,150,240,138,189,150,42,236,189,150,102,77,190,150,163,174,190,150,225,15,191,150,32,113,191,150,97,210,191,150,164,51,192,150,231,148,192,150,44,246,192,150,115,87,193,150,187,184,193,150,4,26,194,150,78,123,194,150,154,220,194,150,232,61,195,150,54,159,195,150,134,0,196,150,216,97,196,150,42,195,196,150,127,36,197,150,212,133,197,150,43,231,197,150,131,72,198,150,221,169,198,150,56,11,199,150,148,108,199,150,242,205,199,150,81,47,200,150,177,144,200,150,19,242,200,150,118,83,201,150,218,180,201,150,64,22,202,150,168,119,202,150,16,217,202,150,122,58,203,150,229,155,203,150,82,253,203,150,192,94,204,150,48,192,204,150,160,33,205,150,19,131,205,150,134,228,205,150,251,69,206,150,113,167,206,150,233,8,207,150,98,106,207,150,220,203,207,150,88,45,208,150,213,142,208,150,83,240,208,150,211,81,209,150,84,179,209,150,215,20,210,150,90,118,210,150,224,215,210,150,102,57,211,150,238,154,211,150,119,252,211,150,2,94,212,150,142,191,212,150,28,33,213,150,170,130,213,150,58,228,213,150,204,69,214,150,95,167,214,150,243,8,215,150,136,106,215,150,31,204,215,150,184,45,216,150,81,143,216,150,236,240,216,150,136,82,217,150,38,180,217,150,197,21,218,150,102,119,218,150,7,217,218,150,170,58,219,150,79,156,219,150,245,253,219,150,156,95,220,150,69,193,220,150,238,34,221,150,154,132,221,150,70,230,221,150,244,71,222,150,164,169,222,150,84,11,223,150,6,109,223,150,186,206,223,150,111,48,224,150,37,146,224,150,220,243,224,150,149,85,225,150,79,183,225,150,11,25,226,150,200,122,226,150,134,220,226,150,70,62,227,150,7,160,227,150,201,1,228,150,141,99,228,150,82,197,228,150,24,39,229,150,224,136,229,150,169,234,229,150,115,76,230,150,63,174,230,150,12,16,231,150,219,113,231,150,171,211,231,150,124,53,232,150,78,151,232,150,34,249,232,150,248,90,233,150,206,188,233,150,166,30,234,150,127,128,234,150,90,226,234,150,54,68,235,150,20,166,235,150,242,7,236,150,210,105,236,150,180,203,236,150,151,45,237,150,123,143,237,150,96,241,237,150,71,83,238,150,47,181,238,150,25,23,239,150,4,121,239,150,240,218,239,150,222,60,240,150,204,158,240,150,189,0,241,150,174,98,241,150,161,196,241,150,150,38,242,150,139,136,242,150,130,234,242,150,123,76,243,150,117,174,243,150,112,16,244,150,108,114,244,150,106,212,244,150,105,54,245,150,105,152,245,150,107,250,245,150,110,92,246,150,115,190,246,150,121,32,247,150,128,130,247,150,137,228,247,150,147,70,248,150,158,168,248,150,170,10,249,150,184,108,249,150,200,206,249,150,216,48,250,150,234,146,250,150,254,244,250,150,18,87,251,150,40,185,251,150,64,27,252,150,88,125,252,150,114,223,252,150,142,65,253,150,171,163,253,150,201,5,254,150,232,103,254,150,9,202,254,150,43,44,255,150,79,142,255,150,115,240,255,150,154,82,0,151,193,180,0,151,234,22,1,151,20,121,1,151,64,219,1,151,108,61,2,151,155,159,2,151,202,1,3,151,251,99,3,151,45,198,3,151,97,40,4,151,150,138,4,151,204,236,4,151,4,79,5,151,61,177,5,151,119,19,6,151,179,117,6,151,240,215,6,151,46,58,7,151,110,156,7,151,175,254,7,151,241,96,8,151,53,195,8,151,122,37,9,151,192,135,9,151,8,234,9,151,81,76,10,151,155,174,10,151,231,16,11,151,52,115,11,151,131,213,11,151,210,55,12,151,35,154,12,151,118,252,12,151,202,94,13,151,31,193,13,151,117,35,14,151,205,133,14,151,38,232,14,151,128,74,15,151,220,172,15,151,57,15,16,151,152,113,16,151,248,211,16,151,89,54,17,151,187,152,17,151,31,251,17,151,132,93,18,151,235,191,18,151,83,34,19,151,188,132,19,151,38,231,19,151,146,73,20,151,255,171,20,151,110,14,21,151,222,112,21,151,79,211,21,151,193,53,22,151,53,152,22,151,170,250,22,151,33,93,23,151,153,191,23,151,18,34,24,151,141,132,24,151,9,231,24,151,134,73,25,151,4,172,25,151,132,14,26,151,5,113,26,151,136,211,26,151,12,54,27,151,145,152,27,151,24,251,27,151,159,93,28,151,41,192,28,151,179,34,29,151,63,133,29,151,204,231,29,151,91,74,30,151,235,172,30,151,124,15,31,151,14,114,31,151,162,212,31,151,55,55,32,151,206,153,32,151,102,252,32,151,255,94,33,151,154,193,33,151,54,36,34,151,211,134,34,151,113,233,34,151,17,76,35,151,178,174,35,151,85,17,36,151,249,115,36,151,158,214,36,151,68,57,37,151,236,155,37,151,149,254,37,151,64,97,38,151,236,195,38,151,153,38,39,151,71,137,39,151,247,235,39,151,168,78,40,151,91,177,40,151,15,20,41,151,196,118,41,151,122,217,41,151,50,60,42,151,235,158,42,151,166,1,43,151,97,100,43,151,30,199,43,151,221,41,44,151,157,140,44,151,94,239,44,151,32,82,45,151,228,180,45,151,169,23,46,151,111,122,46,151,55,221,46,151,0,64,47,151,202,162,47,151,150,5,48,151,99,104,48,151,50,203,48,151,1,46,49,151,210,144,49,151,165,243,49,151,120,86,50,151,77,185,50,151,35,28,51,151,251,126,51,151,212,225,51,151,174,68,52,151,138,167,52,151,103,10,53,151,69,109,53,151,37,208,53,151,6,51,54,151,232,149,54,151,203,248,54,151,176,91,55,151,150,190,55,151,126,33,56,151,103,132,56,151,81,231,56,151,61,74,57,151,41,173,57,151,23,16,58,151,7,115,58,151,248,213,58,151,234,56,59,151,221,155,59,151,210,254,59,151,200,97,60,151,191,196,60,151,184,39,61,151,178,138,61,151,174,237,61,151,170,80,62,151,168,179,62,151,168,22,63,151,168,121,63,151,170,220,63,151,173,63,64,151,178,162,64,151,184,5,65,151,191,104,65,151,200,203,65,151,210,46,66,151,221,145,66,151,233,244,66,151,247,87,67,151,6,187,67,151,23,30,68,151,41,129,68,151,60,228,68,151,80,71,69,151,102,170,69,151,125,13,70,151,149,112,70,151,175,211,70,151,202,54,71,151,231,153,71,151,4,253,71,151,35,96,72,151,68,195,72,151,101,38,73,151,136,137,73,151,172,236,73,151,210,79,74,151,249,178,74,151,33,22,75,151,75,121,75,151,117,220,75,151,161,63,76,151,207,162,76,151,254,5,77,151,46,105,77,151,95,204,77,151,146,47,78,151,198,146,78,151,251,245,78,151,50,89,79,151,106,188,79,151,163,31,80,151,222,130,80,151,26,230,80,151,87,73,81,151,150,172,81,151,214,15,82,151,23,115,82,151,89,214,82,151,157,57,83,151,226,156,83,151,41,0,84,151,113,99,84,151,186,198,84,151,4,42,85,151,80,141,85,151,157,240,85,151,235,83,86,151,59,183,86,151,140,26,87,151,222,125,87,151,49,225,87,151,134,68,88,151,221,167,88,151,52,11,89,151,141,110,89,151,231,209,89,151,66,53,90,151,159,152,90,151,253,251,90,151,93,95,91,151,189,194,91,151,31,38,92,151,131,137,92,151,231,236,92,151,77,80,93,151,181,179,93,151,29,23,94,151,135,122,94,151,242,221,94,151,95,65,95,151,204,164,95,151,59,8,96,151,172,107,96,151,30,207,96,151,145,50,97,151,5,150,97,151,123,249,97,151,242,92,98,151,106,192,98,151,227,35,99,151,94,135,99,151,219,234,99,151,88,78,100,151,215,177,100,151,87,21,101,151,216,120,101,151,91,220,101,151,223,63,102,151,100,163,102,151,235,6,103,151,115,106,103,151,252,205,103,151,135,49,104,151,19,149,104,151,160,248,104,151,46,92,105,151,190,191,105,151,79,35,106,151,226,134,106,151,117,234,106,151,10,78,107,151,161,177,107,151,56,21,108,151,209,120,108,151,108,220,108,151,7,64,109,151,164,163,109,151,66,7,110,151,226,106,110,151,130,206,110,151,36,50,111,151,200,149,111,151,108,249,111,151,18,93,112,151,186,192,112,151,98,36,113,151,12,136,113,151,183,235,113,151,100,79,114,151,18,179,114,151,193,22,115,151,113,122,115,151,35,222,115,151,214,65,116,151,138,165,116,151,64,9,117,151,247,108,117,151,175,208,117,151,104,52,118,151,35,152,118,151,223,251,118,151,157,95,119,151,92,195,119,151,28,39,120,151,221,138,120,151,159,238,120,151,99,82,121,151,41,182,121,151,239,25,122,151,183,125,122,151,128,225,122,151,75,69,123,151,22,169,123,151,227,12,124,151,178,112,124,151,129,212,124,151,82,56,125,151,36,156,125,151,248,255,125,151,205,99,126,151,163,199,126,151,122,43,127,151,83,143,127,151,45,243,127,151,8,87,128,151,229,186,128,151,195,30,129,151,162,130,129,151,131,230,129,151,100,74,130,151,71,174,130,151,44,18,131,151,18,118,131,151,249,217,131,151,225,61,132,151,202,161,132,151,181,5,133,151,162,105,133,151,143,205,133,151,126,49,134,151,110,149,134,151,95,249,134,151,82,93,135,151,70,193,135,151,59,37,136,151,50,137,136,151,42,237,136,151,35,81,137,151,29,181,137,151,25,25,138,151,22,125,138,151,20,225,138,151,20,69,139,151,21,169,139,151,23,13,140,151,26,113,140,151,31,213,140,151,37,57,141,151,45,157,141,151,53,1,142,151,63,101,142,151,75,201,142,151,87,45,143,151,101,145,143,151,116,245,143,151,133,89,144,151,150,189,144,151,169,33,145,151,190,133,145,151,211,233,145,151,234,77,146,151,2,178,146,151,28,22,147,151,55,122,147,151,83,222,147,151,112,66,148,151,143,166,148,151,175,10,149,151,208,110,149,151,242,210,149,151,22,55,150,151,59,155,150,151,98,255,150,151,137,99,151,151,178,199,151,151,221,43,152,151,8,144,152,151,53,244,152,151,99,88,153,151,146,188,153,151,195,32,154,151,245,132,154,151,41,233,154,151,93,77,155,151,147,177,155,151,202,21,156,151,3,122,156,151,60,222,156,151,119,66,157,151,180,166,157,151,241,10,158,151,48,111,158,151,112,211,158,151,178,55,159,151,245,155,159,151,57,0,160,151,126,100,160,151,197,200,160,151,12,45,161,151,86,145,161,151,160,245,161,151,236,89,162,151,57,190,162,151,135,34,163,151,215,134,163,151,40,235,163,151,122,79,164,151,206,179,164,151,34,24,165,151,120,124,165,151,208,224,165,151,40,69,166,151,130,169,166,151,221,13,167,151,58,114,167,151,152,214,167,151,247,58,168,151,87,159,168,151,185,3,169,151,28,104,169,151,128,204,169,151,229,48,170,151,76,149,170,151,180,249,170,151,30,94,171,151,136,194,171,151,244,38,172,151,97,139,172,151,208,239,172,151,63,84,173,151,176,184,173,151,35,29,174,151,150,129,174,151,11,230,174,151,129,74,175,151,249,174,175,151,114,19,176,151,236,119,176,151,103,220,176,151,228,64,177,151,97,165,177,151,225,9,178,151,97,110,178,151,227,210,178,151,102,55,179,151,234,155,179,151,111,0,180,151,246,100,180,151,126,201,180,151,8,46,181,151,146,146,181,151,30,247,181,151,172,91,182,151,58,192,182,151,202,36,183,151,91,137,183,151,237,237,183,151,129,82,184,151,22,183,184,151,172,27,185,151,68,128,185,151,220,228,185,151,118,73,186,151,18,174,186,151,174,18,187,151,76,119,187,151,235,219,187,151,140,64,188,151,45,165,188,151,208,9,189,151,117,110,189,151,26,211,189,151,193,55,190,151,105,156,190,151,19,1,191,151,189,101,191,151,105,202,191,151,22,47,192,151,197,147,192,151,117,248,192,151,38,93,193,151,216,193,193,151,139,38,194,151,64,139,194,151,246,239,194,151,174,84,195,151,103,185,195,151,33,30,196,151,220,130,196,151,152,231,196,151,86,76,197,151,21,177,197,151,214,21,198,151,151,122,198,151,90,223,198,151,30,68,199,151,228,168,199,151,170,13,200,151,114,114,200,151,60,215,200,151,6,60,201,151,210,160,201,151,159,5,202,151,109,106,202,151,61,207,202,151,14,52,203,151,224,152,203,151,180,253,203,151,136,98,204,151,94,199,204,151,54,44,205,151,14,145,205,151,232,245,205,151,195,90,206,151,160,191,206,151,125,36,207,151,92,137,207,151,60,238,207,151,30,83,208,151,1,184,208,151,229,28,209,151,202,129,209,151,176,230,209,151,152,75,210,151,129,176,210,151,108,21,211,151,87,122,211,151,68,223,211,151,50,68,212,151,34,169,212,151,19,14,213,151,5,115,213,151,248,215,213,151,236,60,214,151,226,161,214,151,217,6,215,151,210,107,215,151,203,208,215,151,198,53,216,151,194,154,216,151,192,255,216,151,190,100,217,151,190,201,217,151,191,46,218,151,194,147,218,151,198,248,218,151,203,93,219,151,209,194,219,151,217,39,220,151,225,140,220,151,236,241,220,151,247,86,221,151,4,188,221,151,17,33,222,151,33,134,222,151,49,235,222,151,67,80,223,151,86,181,223,151,106,26,224,151,128,127,224,151,150,228,224,151,174,73,225,151,200,174,225,151,226,19,226,151,254,120,226,151,27,222,226,151,58,67,227,151,89,168,227,151,122,13,228,151,156,114,228,151,192,215,228,151,228,60,229,151,10,162,229,151,50,7,230,151,90,108,230,151,132,209,230,151,175,54,231,151,219,155,231,151,9,1,232,151,56,102,232,151,104,203,232,151,153,48,233,151,204,149,233,151,0,251,233,151,53,96,234,151,107,197,234,151,163,42,235,151,220,143,235,151,22,245,235,151,81,90,236,151,142,191,236,151,204,36,237,151,11,138,237,151,76,239,237,151,142,84,238,151,209,185,238,151,21,31,239,151,91,132,239,151,161,233,239,151,233,78,240,151,51,180,240,151,125,25,241,151,201,126,241,151,22,228,241,151,101,73,242,151,181,174,242,151,5,20,243,151,88,121,243,151,171,222,243,151,0,68,244,151,86,169,244,151,173,14,245,151,5,116,245,151,95,217,245,151,186,62,246,151,22,164,246,151,116,9,247,151,211,110,247,151,51,212,247,151,148,57,248,151,247,158,248,151,90,4,249,151,192,105,249,151,38,207,249,151,142,52,250,151,246,153,250,151,96,255,250,151,204,100,251,151,56,202,251,151,166,47,252,151,22,149,252,151,134,250,252,151,248,95,253,151,107,197,253,151,223,42,254,151,84,144,254,151,203,245,254,151,67,91,255,151,188,192,255,151,27,19,0,156,217,69,0,156,151,120,0,156,87,171,0,156,22,222,0,156,215,16,1,156,152,67,1,156,89,118,1,156,28,169,1,156,223,219,1,156,162,14,2,156,102,65,2,156,43,116,2,156,240,166,2,156,182,217,2,156,125,12,3,156,68,63,3,156,12,114,3,156,213,164,3,156,158,215,3,156,104,10,4,156,50,61,4,156,253,111,4,156,201,162,4,156,149,213,4,156,98,8,5,156,48,59,5,156,254,109,5,156,205,160,5,156,156,211,5,156,108,6,6,156,61,57,6,156,14,108,6,156,224,158,6,156,179,209,6,156,134,4,7,156,90,55,7,156,46,106,7,156,3,157,7,156,217,207,7,156,175,2,8,156,134,53,8,156,94,104,8,156,54,155,8,156,15,206,8,156,232,0,9,156,194,51,9,156,157,102,9,156,120,153,9,156,84,204,9,156,49,255,9,156,14,50,10,156,236,100,10,156,203,151,10,156,170,202,10,156,137,253,10,156,106,48,11,156,75,99,11,156,44,150,11,156,14,201,11,156,241,251,11,156,213,46,12,156,185,97,12,156,158,148,12,156,131,199,12,156,105,250,12,156,79,45,13,156,55,96,13,156,30,147,13,156,7,198,13,156,240,248,13,156,218,43,14,156,196,94,14,156,175,145,14,156,155,196,14,156,135,247,14,156,116,42,15,156,97,93,15,156,79,144,15,156,62,195,15,156,45,246,15,156,29,41,16,156,14,92,16,156,255,142,16,156,241,193,16,156,227,244,16,156,214,39,17,156,202,90,17,156,190,141,17,156,179,192,17,156,169,243,17,156,159,38,18,156,150,89,18,156,141,140,18,156,133,191,18,156,126,242,18,156,119,37,19,156,113,88,19,156,108,139,19,156,103,190,19,156,99,241,19,156,95,36,20,156,92,87,20,156,90,138,20,156,88,189,20,156,87,240,20,156,86,35,21,156,87,86,21,156,87,137,21,156,89,188,21,156,91,239,21,156,93,34,22,156,97,85,22,156,100,136,22,156,105,187,22,156,110,238,22,156,116,33,23,156,122,84,23,156,129,135,23,156,137,186,23,156,145,237,23,156,154,32,24,156,163,83,24,156,173,134,24,156,184,185,24,156,195,236,24,156,207,31,25,156,220,82,25,156,233,133,25,156,247,184,25,156,5,236,25,156,21,31,26,156,36,82,26,156,52,133,26,156,69,184,26,156,87,235,26,156,105,30,27,156,124,81,27,156,143,132,27,156,163,183,27,156,184,234,27,156,205,29,28,156,227,80,28,156,250,131,28,156,17,183,28,156,40,234,28,156,65,29,29,156,90,80,29,156,115,131,29,156,142,182,29,156,168,233,29,156,196,28,30,156,224,79,30,156,253,130,30,156,26,182,30,156,56,233,30,156,87,28,31,156,118,79,31,156,150,130,31,156,182,181,31,156,215,232,31,156,249,27,32,156,27,79,32,156,62,130,32,156,97,181,32,156,133,232,32,156,170,27,33,156,208,78,33,156,246,129,33,156,28,181,33,156,67,232,33,156,107,27,34,156,148,78,34,156,189,129,34,156,230,180,34,156,17,232,34,156,60,27,35,156,103,78,35,156,147,129,35,156,192,180,35,156,238,231,35,156,28,27,36,156,74,78,36,156,121,129,36,156,169,180,36,156,218,231,36,156,11,27,37,156,61,78,37,156,111,129,37,156,162,180,37,156,214,231,37,156,10,27,38,156,63,78,38,156,116,129,38,156,170,180,38,156,225,231,38,156,24,27,39,156,80,78,39,156,136,129,39,156,194,180,39,156,251,231,39,156,54,27,40,156,113,78,40,156,172,129,40,156,232,180,40,156,37,232,40,156,99,27,41,156,161,78,41,156,223,129,41,156,31,181,41,156,95,232,41,156,159,27,42,156,224,78,42,156,34,130,42,156,100,181,42,156,167,232,42,156,235,27,43,156,47,79,43,156,116,130,43,156,186,181,43,156,0,233,43,156,70,28,44,156,142,79,44,156,214,130,44,156,30,182,44,156,103,233,44,156,177,28,45,156,251,79,45,156,70,131,45,156,146,182,45,156,222,233,45,156,43,29,46,156,120,80,46,156,198,131,46,156,21,183,46,156,100,234,46,156,180,29,47,156,5,81,47,156,86,132,47,156,168,183,47,156,250,234,47,156,77,30,48,156,161,81,48,156,245,132,48,156,74,184,48,156,159,235,48,156,245,30,49,156,76,82,49,156,163,133,49,156,251,184,49,156,84,236,49,156,173,31,50,156,6,83,50,156,97,134,50,156,188,185,50,156,23,237,50,156,116,32,51,156,208,83,51,156,46,135,51,156,140,186,51,156,234,237,51,156,74,33,52,156,170,84,52,156,10,136,52,156,107,187,52,156,205,238,52,156,47,34,53,156,146,85,53,156,246,136,53,156,90,188,53,156,191,239,53,156,36,35,54,156,138,86,54,156,241,137,54,156,88,189,54,156,192,240,54,156,40,36,55,156,145,87,55,156,251,138,55,156,101,190,55,156,208,241,55,156,60,37,56,156,168,88,56,156,20,140,56,156,130,191,56,156,240,242,56,156,94,38,57,156,205,89,57,156,61,141,57,156,174,192,57,156,31,244,57,156,144,39,58,156,2,91,58,156,117,142,58,156,233,193,58,156,93,245,58,156,210,40,59,156,71,92,59,156,189,143,59,156,51,195,59,156,170,246,59,156,34,42,60,156,154,93,60,156,19,145,60,156,141,196,60,156,7,248,60,156,130,43,61,156,253,94,61,156,121,146,61,156,246,197,61,156,115,249,61,156,241,44,62,156,112,96,62,156,239,147,62,156,110,199,62,156,239,250,62,156,111,46,63,156,241,97,63,156,115,149,63,156,246,200,63,156,121,252,63,156,253,47,64,156,130,99,64,156,7,151,64,156,141,202,64,156,19,254,64,156,154,49,65,156,34,101,65,156,170,152,65,156,51,204,65,156,188,255,65,156,70,51,66,156,209,102,66,156,92,154,66,156,232,205,66,156,116,1,67,156,1,53,67,156,143,104,67,156,29,156,67,156,172,207,67,156,60,3,68,156,204,54,68,156,93,106,68,156,238,157,68,156,128,209,68,156,19,5,69,156,166,56,69,156,57,108,69,156,206,159,69,156,99,211,69,156,248,6,70,156,143,58,70,156,37,110,70,156,189,161,70,156,85,213,70,156,238,8,71,156,135,60,71,156,33,112,71,156,187,163,71,156,86,215,71,156,242,10,72,156,142,62,72,156,43,114,72,156,201,165,72,156,103,217,72,156,5,13,73,156,165,64,73,156,69,116,73,156,229,167,73,156,134,219,73,156,40,15,74,156,202,66,74,156,109,118,74,156,17,170,74,156,181,221,74,156,90,17,75,156,255,68,75,156,165,120,75,156,76,172,75,156,243,223,75,156,155,19,76,156,67,71,76,156,236,122,76,156,150,174,76,156,64,226,76,156,235,21,77,156,151,73,77,156,67,125,77,156,239,176,77,156,157,228,77,156,75,24,78,156,249,75,78,156,168,127,78,156,88,179,78,156,8,231,78,156,185,26,79,156,107,78,79,156,29,130,79,156,207,181,79,156,131,233,79,156,55,29,80,156,235,80,80,156,160,132,80,156,86,184,80,156,13,236,80,156,196,31,81,156,123,83,81,156,51,135,81,156,236,186,81,156,165,238,81,156,95,34,82,156,26,86,82,156,213,137,82,156,145,189,82,156,77,241,82,156,10,37,83,156,200,88,83,156,134,140,83,156,69,192,83,156,5,244,83,156,197,39,84,156,133,91,84,156,70,143,84,156,8,195,84,156,203,246,84,156,142,42,85,156,81,94,85,156,22,146,85,156,219,197,85,156,160,249,85,156,102,45,86,156,45,97,86,156,244,148,86,156,188,200,86,156,132,252,86,156,78,48,87,156,23,100,87,156,226,151,87,156,172,203,87,156,120,255,87,156,68,51,88,156,17,103,88,156,222,154,88,156,172,206,88,156,123,2,89,156,74,54,89,156,25,106,89,156,234,157,89,156,187,209,89,156,140,5,90,156,94,57,90,156,49,109,90,156,4,161,90,156,216,212,90,156,173,8,91,156,130,60,91,156,88,112,91,156,46,164,91,156,5,216,91,156,221,11,92,156,181,63,92,156,142,115,92,156,103,167,92,156,65,219,92,156,27,15,93,156,247,66,93,156,210,118,93,156,175,170,93,156,140,222,93,156,105,18,94,156,71,70,94,156,38,122,94,156,6,174,94,156,230,225,94,156,198,21,95,156,167,73,95,156,137,125,95,156,108,177,95,156,79,229,95,156,50,25,96,156,22,77,96,156,251,128,96,156,225,180,96,156,199,232,96,156,173,28,97,156,148,80,97,156,124,132,97,156,100,184,97,156,77,236,97,156,55,32,98,156,33,84,98,156,12,136,98,156,247,187,98,156,227,239,98,156,208,35,99,156,189,87,99,156,171,139,99,156,153,191,99,156,136,243,99,156,120,39,100,156,104,91,100,156,89,143,100,156,74,195,100,156,60,247,100,156,47,43,101,156,34,95,101,156,22,147,101,156,10,199,101,156,255,250,101,156,245,46,102,156,235,98,102,156,226,150,102,156,217,202,102,156,209,254,102,156,202,50,103,156,195,102,103,156,189,154,103,156,183,206,103,156,178,2,104,156,174,54,104,156,170,106,104,156,167,158,104,156,164,210,104,156,162,6,105,156,161,58,105,156,160,110,105,156,160,162,105,156,160,214,105,156,161,10,106,156,163,62,106,156,165,114,106,156,168,166,106,156,171,218,106,156,175,14,107,156,179,66,107,156,185,118,107,156,190,170,107,156,197,222,107,156,204,18,108,156,211,70,108,156,219,122,108,156,228,174,108,156,238,226,108,156,247,22,109,156,2,75,109,156,13,127,109,156,25,179,109,156,37,231,109,156,50,27,110,156,64,79,110,156,78,131,110,156,92,183,110,156,108,235,110,156,124,31,111,156,140,83,111,156,157,135,111,156,175,187,111,156,193,239,111,156,212,35,112,156,232,87,112,156,252,139,112,156,17,192,112,156,38,244,112,156,60,40,113,156,82,92,113,156,105,144,113,156,129,196,113,156,153,248,113,156,178,44,114,156,204,96,114,156,230,148,114,156,0,201,114,156,27,253,114,156,55,49,115,156,84,101,115,156,113,153,115,156,142,205,115,156,173,1,116,156,203,53,116,156,235,105,116,156,11,158,116,156,44,210,116,156,77,6,117,156,111,58,117,156,145,110,117,156,180,162,117,156,215,214,117,156,252,10,118,156,32,63,118,156,70,115,118,156,108,167,118,156,146,219,118,156,186,15,119,156,225,67,119,156,10,120,119,156,51,172,119,156,92,224,119,156,134,20,120,156,177,72,120,156,220,124,120,156,8,177,120,156,53,229,120,156,98,25,121,156,143,77,121,156,190,129,121,156,237,181,121,156,28,234,121,156,76,30,122,156,125,82,122,156,174,134,122,156,224,186,122,156,18,239,122,156,70,35,123,156,121,87,123,156,173,139,123,156,226,191,123,156,24,244,123,156,78,40,124,156,132,92,124,156,187,144,124,156,243,196,124,156,44,249,124,156,101,45,125,156,158,97,125,156,216,149,125,156,19,202,125,156,78,254,125,156,138,50,126,156,199,102,126,156,4,155,126,156,66,207,126,156,128,3,127,156,191,55,127,156,255,107,127,156,63,160,127,156,127,212,127,156,193,8,128,156,2,61,128,156,69,113,128,156,136,165,128,156,204,217,128,156,16,14,129,156,85,66,129,156,154,118,129,156,224,170,129,156,39,223,129,156,110,19,130,156,182,71,130,156,254,123,130,156,71,176,130,156,145,228,130,156,219,24,131,156,38,77,131,156,113,129,131,156,189,181,131,156,10,234,131,156,87,30,132,156,164,82,132,156,243,134,132,156,66,187,132,156,145,239,132,156,225,35,133,156,50,88,133,156,131,140,133,156,213,192,133,156,39,245,133,156,122,41,134,156,206,93,134,156,34,146,134,156,119,198,134,156,204,250,134,156,34,47,135,156,121,99,135,156,208,151,135,156,40,204,135,156,128,0,136,156,217,52,136,156,51,105,136,156,141,157,136,156,232,209,136,156,67,6,137,156,159,58,137,156,251,110,137,156,88,163,137,156,182,215,137,156,20,12,138,156,115,64,138,156,211,116,138,156,51,169,138,156,147,221,138,156,245,17,139,156,86,70,139,156,185,122,139,156,28,175,139,156,127,227,139,156,227,23,140,156,72,76,140,156,173,128,140,156,19,181,140,156,122,233,140,156,225,29,141,156,73,82,141,156,177,134,141,156,26,187,141,156,131,239,141,156,237,35,142,156,88,88,142,156,195,140,142,156,47,193,142,156,155,245,142,156,8,42,143,156,118,94,143,156,228,146,143,156,83,199,143,156,194,251,143,156,50,48,144,156,163,100,144,156,20,153,144,156,134,205,144,156,248,1,145,156,107,54,145,156,222,106,145,156,82,159,145,156,199,211,145,156,60,8,146,156,178,60,146,156,40,113,146,156,159,165,146,156,23,218,146,156,143,14,147,156,8,67,147,156,129,119,147,156,251,171,147,156,118,224,147,156,241,20,148,156,108,73,148,156,233,125,148,156,102,178,148,156,227,230,148,156,97,27,149,156,224,79,149,156,95,132,149,156,223,184,149,156,95,237,149,156,224,33,150,156,98,86,150,156,228,138,150,156,103,191,150,156,234,243,150,156,110,40,151,156,242,92,151,156,119,145,151,156,253,197,151,156,131,250,151,156,10,47,152,156,146,99,152,156,26,152,152,156,162,204,152,156,44,1,153,156,181,53,153,156,64,106,153,156,203,158,153,156,86,211,153,156,226,7,154,156,111,60,154,156,252,112,154,156,138,165,154,156,25,218,154,156,168,14,155,156,55,67,155,156,200,119,155,156,88,172,155,156,234,224,155,156,124,21,156,156,14,74,156,156,161,126,156,156,53,179,156,156,202,231,156,156,94,28,157,156,244,80,157,156,138,133,157,156,33,186,157,156,184,238,157,156,80,35,158,156,232,87,158,156,129,140,158,156,27,193,158,156,181,245,158,156,80,42,159,156,235,94,159,156,135,147,159,156,36,200,159,156,193,252,159,156,94,49,160,156,253,101,160,156,155,154,160,156,59,207,160,156,219,3,161,156,123,56,161,156,29,109,161,156,190,161,161,156,97,214,161,156,4,11,162,156,167,63,162,156,75,116,162,156,240,168,162,156,149,221,162,156,59,18,163,156,226,70,163,156,137,123,163,156,48,176,163,156,216,228,163,156,129,25,164,156,43,78,164,156,213,130,164,156,127,183,164,156,42,236,164,156,214,32,165,156,130,85,165,156,47,138,165,156,221,190,165,156,139,243,165,156,57,40,166,156,232,92,166,156,152,145,166,156,72,198,166,156,249,250,166,156,171,47,167,156,93,100,167,156,16,153,167,156,195,205,167,156,119,2,168,156,43,55,168,156,224,107,168,156,150,160,168,156,76,213,168,156,3,10,169,156,186,62,169,156,114,115,169,156,43,168,169,156,228,220,169,156,157,17,170,156,88,70,170,156,19,123,170,156,206,175,170,156,138,228,170,156,71,25,171,156,4,78,171,156,194,130,171,156,128,183,171,156,63,236,171,156,254,32,172,156,190,85,172,156,127,138,172,156,64,191,172,156,2,244,172,156,197,40,173,156,136,93,173,156,75,146,173,156,15,199,173,156,212,251,173,156,153,48,174,156,95,101,174,156,38,154,174,156,237,206,174,156,180,3,175,156,125,56,175,156,69,109,175,156,15,162,175,156,217,214,175,156,163,11,176,156,110,64,176,156,58,117,176,156,6,170,176,156,211,222,176,156,161,19,177,156,111,72,177,156,61,125,177,156,12,178,177,156,220,230,177,156,173,27,178,156,125,80,178,156,79,133,178,156,33,186,178,156,244,238,178,156,199,35,179,156,155,88,179,156,111,141,179,156,68,194,179,156,26,247,179,156,240,43,180,156,199,96,180,156,158,149,180,156,118,202,180,156,78,255,180,156,39,52,181,156,1,105,181,156,219,157,181,156,182,210,181,156,145,7,182,156,109,60,182,156,74,113,182,156,39,166,182,156,5,219,182,156,227,15,183,156,194,68,183,156,161,121,183,156,129,174,183,156,98,227,183,156,67,24,184,156,36,77,184,156,7,130,184,156,234,182,184,156,205,235,184,156,177,32,185,156,150,85,185,156,123,138,185,156,97,191,185,156,71,244,185,156,46,41,186,156,22,94,186,156,254,146,186,156,230,199,186,156,208,252,186,156,185,49,187,156,164,102,187,156,143,155,187,156,122,208,187,156,102,5,188,156,83,58,188,156,64,111,188,156,46,164,188,156,29,217,188,156,12,14,189,156,251,66,189,156,236,119,189,156,220,172,189,156,206,225,189,156,192,22,190,156,178,75,190,156,165,128,190,156,153,181,190,156,141,234,190,156,130,31,191,156,119,84,191,156,109,137,191,156,100,190,191,156,91,243,191,156,82,40,192,156,75,93,192,156,67,146,192,156,61,199,192,156,55,252,192,156,49,49,193,156,45,102,193,156,40,155,193,156,37,208,193,156,33,5,194,156,31,58,194,156,29,111,194,156,27,164,194,156,27,217,194,156,26,14,195,156,27,67,195,156,28,120,195,156,29,173,195,156,31,226,195,156,34,23,196,156,37,76,196,156,41,129,196,156,45,182,196,156,50,235,196,156,56,32,197,156,62,85,197,156,68,138,197,156,76,191,197,156,83,244,197,156,92,41,198,156,101,94,198,156,110,147,198,156,120,200,198,156,131,253,198,156,142,50,199,156,154,103,199,156,167,156,199,156,180,209,199,156,193,6,200,156,207,59,200,156,222,112,200,156,237,165,200,156,253,218,200,156,13,16,201,156,30,69,201,156,48,122,201,156,66,175,201,156,85,228,201,156,104,25,202,156,124,78,202,156,145,131,202,156,166,184,202,156,187,237,202,156,209,34,203,156,232,87,203,156,0,141,203,156,23,194,203,156,48,247,203,156,73,44,204,156,99,97,204,156,125,150,204,156,152,203,204,156,179,0,205,156,207,53,205,156,235,106,205,156,8,160,205,156,38,213,205,156,68,10,206,156,99,63,206,156,130,116,206,156,162,169,206,156,195,222,206,156,228,19,207,156,6,73,207,156,40,126,207,156,75,179,207,156,110,232,207,156,146,29,208,156,182,82,208,156,219,135,208,156,1,189,208,156,39,242,208,156,78,39,209,156,118,92,209,156,158,145,209,156,198,198,209,156,239,251,209,156,25,49,210,156,67,102,210,156,110,155,210,156,153,208,210,156,197,5,211,156,242,58,211,156,31,112,211,156,77,165,211,156,123,218,211,156,170,15,212,156,217,68,212,156,9,122,212,156,58,175,212,156,107,228,212,156,156,25,213,156,207,78,213,156,1,132,213,156,53,185,213,156,105,238,213,156,157,35,214,156,210,88,214,156,8,142,214,156,62,195,214,156,117,248,214,156,173,45,215,156,229,98,215,156,29,152,215,156,86,205,215,156,144,2,216,156,202,55,216,156,5,109,216,156,64,162,216,156,124,215,216,156,185,12,217,156,246,65,217,156,52,119,217,156,114,172,217,156,177,225,217,156,240,22,218,156,48,76,218,156,113,129,218,156,178,182,218,156,244,235,218,156,54,33,219,156,121,86,219,156,188,139,219,156,0,193,219,156,68,246,219,156,138,43,220,156,207,96,220,156,22,150,220,156,92,203,220,156,164,0,221,156,236,53,221,156,52,107,221,156,125,160,221,156,199,213,221,156,17,11,222,156,92,64,222,156,167,117,222,156,243,170,222,156,64,224,222,156,141,21,223,156,219,74,223,156,41,128,223,156,120,181,223,156,199,234,223,156,23,32,224,156,103,85,224,156,184,138,224,156,10,192,224,156,92,245,224,156,175,42,225,156,2,96,225,156,86,149,225,156,171,202,225,156,0,0,226,156,85,53,226,156,172,106,226,156,2,160,226,156,90,213,226,156,178,10,227,156,10,64,227,156,99,117,227,156,189,170,227,156,23,224,227,156,114,21,228,156,205,74,228,156,41,128,228,156,133,181,228,156,226,234,228,156,64,32,229,156,158,85,229,156,253,138,229,156,92,192,229,156,188,245,229,156,28,43,230,156,125,96,230,156,223,149,230,156,65,203,230,156,163,0,231,156,7,54,231,156,107,107,231,156,207,160,231,156,52,214,231,156,153,11,232,156,0,65,232,156,102,118,232,156,205,171,232,156,53,225,232,156,158,22,233,156,7,76,233,156,112,129,233,156,218,182,233,156,69,236,233,156,176,33,234,156,28,87,234,156,136,140,234,156,245,193,234,156,98,247,234,156,208,44,235,156,63,98,235,156,174,151,235,156,30,205,235,156,142,2,236,156,255,55,236,156,113,109,236,156,227,162,236,156,85,216,236,156,200,13,237,156,60,67,237,156,176,120,237,156,37,174,237,156,154,227,237,156,16,25,238,156,135,78,238,156,254,131,238,156,118,185,238,156,238,238,238,156,103,36,239,156,224,89,239,156,90,143,239,156,213,196,239,156,80,250,239,156,203,47,240,156,71,101,240,156,196,154,240,156,65,208,240,156,191,5,241,156,62,59,241,156,189,112,241,156,60,166,241,156,189,219,241,156,61,17,242,156,191,70,242,156,64,124,242,156,195,177,242,156,70,231,242,156,201,28,243,156,77,82,243,156,210,135,243,156,87,189,243,156,221,242,243,156,100,40,244,156,234,93,244,156,114,147,244,156,250,200,244,156,131,254,244,156,12,52,245,156,150,105,245,156,32,159,245,156,171,212,245,156,54,10,246,156,194,63,246,156,79,117,246,156,220,170,246,156,106,224,246,156,248,21,247,156,135,75,247,156,22,129,247,156,166,182,247,156,55,236,247,156,200,33,248,156,89,87,248,156,236,140,248,156,126,194,248,156,18,248,248,156,166,45,249,156,58,99,249,156,207,152,249,156,101,206,249,156,251,3,250,156,146,57,250,156,41,111,250,156,193,164,250,156,89,218,250,156,242,15,251,156,140,69,251,156,38,123,251,156,193,176,251,156,92,230,251,156,248,27,252,156,148,81,252,156,49,135,252,156,206,188,252,156,108,242,252,156,11,40,253,156,170,93,253,156,74,147,253,156,234,200,253,156,139,254,253,156,44,52,254,156,206,105,254,156,113,159,254,156,20,213,254,156,184,10,255,156,92,64,255,156,1,118,255,156,166,171,255,156,76,225,255,156,243,22,0,157,154,76,0,157,65,130,0,157,233,183,0,157,146,237,0,157,59,35,1,157,229,88,1,157,144,142,1,157,59,196,1,157,230,249,1,157,146,47,2,157,63,101,2,157,236,154,2,157,154,208,2,157,72,6,3,157,247,59,3,157,167,113,3,157,87,167,3,157,7,221,3,157,185,18,4,157,106,72,4,157,29,126,4,157,207,179,4,157,131,233,4,157,55,31,5,157,235,84,5,157,160,138,5,157,86,192,5,157,12,246,5,157,195,43,6,157,122,97,6,157,50,151,6,157,235,204,6,157,164,2,7,157,93,56,7,157,23,110,7,157,210,163,7,157,141,217,7,157,73,15,8,157,6,69,8,157,194,122,8,157,128,176,8,157,62,230,8,157,253,27,9,157,188,81,9,157,124,135,9,157,60,189,9,157,253,242,9,157,190,40,10,157,128,94,10,157,67,148,10,157,6,202,10,157,201,255,10,157,142,53,11,157,82,107,11,157,24,161,11,157,222,214,11,157,164,12,12,157,107,66,12,157,51,120,12,157,251,173,12,157,196,227,12,157,141,25,13,157,5,127,131,9,51,79,80,11,205,79,116,13,0,0,0,16,10,254,6,19,102,158,160,22,153,159,232,26,205,79,116,13,51,79,80,11,5,127,131,9,0,0,0,8,230,39,186,6,154,39,168,5,131,191,193,4,0,0,0,4,243,19,93,3,205,19,212,2,193,223,96,2,0,0,0,2,250,137,174,1,230,9,106,1,225,111,48,1,51,79,80,11,0,0,0,8,154,39,168,5,0,0,0,4,205,19,212,2,0,0,0,2,230,9,106,1,0,0,0,1,243,4,181,0,0,0,128,0,122,130,90,0,0,0,64,0,61,65,45,0,0,0,32,0,158,160,22,0,0,0,0,0,47,150,97,3,116,61,219,5,0,0,0,8,140,194,36,10,209,105,158,12,0,0,0,16,129,74,184,13,127,157,27,14,207,173,49,15,21,168,187,15,23,164,237,15,200,143,252,15,76,150,255,15,211,248,255,15,25,160,196,247,46,201,115,248,236,103,252,250,47,226,22,253,198,159,124,254,121,52,88,255,185,215,197,255,76,216,240,255,0,0,0,0,249,255,255,255,53,0,0,0,141,255,255,255,253,1,0,0,248,250,255,255,108,6,0,0,100,219,255,255,72,73,0,0,156,36,0,0,108,6,0,0,8,5,0,0,253,1,0,0,115,0,0,0,53,0,0,0,7,0,0,0,0,0,0,0,249,255,255,255,53,0,0,0,141,255,255,255,253,1,0,0,248,250,255,255,108,6,0,0,100,219,255,255,72,73,0,0,156,36,0,0,108,6,0,0,8,5,0,0,253,1,0,0,115,0,0,0,53,0,0,0,7,0,0,0,0,0,0,0,248,255,255,255,55,0,0,0,126,255,255,255,244,1,0,0,157,250,255,255,210,5,0,0,150,217,255,255,60,73,0,0,206,34,0,0,248,6,0,0,173,4,0,0,4,2,0,0,100,0,0,0,52,0,0,0,7,0,0,0,0,0,0,0,248,255,255,255,55,0,0,0,126,255,255,255,244,1,0,0,157,250,255,255,210,5,0,0,150,217,255,255,60,73,0,0,206,34,0,0,248,6,0,0,173,4,0,0,4,2,0,0,100,0,0,0,52,0,0,0,7,0,0,0,0,0,0,0,247,255,255,255,56,0,0,0,111,255,255,255,232,1,0,0,66,250,255,255,42,5,0,0,202,215,255,255,26,73,0,0,0,33,0,0,118,7,0,0,82,4,0,0,8,2,0,0,87,0,0,0,51,0,0,0,6,0,0,0,0,0,0,0,247,255,255,255,56,0,0,0,111,255,255,255,232,1,0,0,66,250,255,255,42,5,0,0,202,215,255,255,26,73,0,0,0,33,0,0,118,7,0,0,82,4,0,0,8,2,0,0,87,0,0,0,51,0,0,0,6,0,0,0,0,0,0,0,246,255,255,255,56,0,0,0,95,255,255,255,217,1,0,0,233,249,255,255,116,4,0,0,0,214,255,255,226,72,0,0,51,31,0,0,231,7,0,0,248,3,0,0,10,2,0,0,74,0,0,0,49,0,0,0,5,0,0,0,0,0,0,0,246,255,255,255,56,0,0,0,95,255,255,255,217,1,0,0,233,249,255,255,116,4,0,0,0,214,255,255,226,72,0,0,51,31,0,0,231,7,0,0,248,3,0,0,10,2,0,0,74,0,0,0,49,0,0,0,5,0,0,0,0,0,0,0,246,255,255,255,57,0,0,0,78,255,255,255,200,1,0,0,145,249,255,255,176,3,0,0,59,212,255,255,146,72,0,0,104,29,0,0,75,8,0,0,158,3,0,0,9,2,0,0,61,0,0,0,48,0,0,0,5,0,0,0,0,0,0,0,246,255,255,255,57,0,0,0,78,255,255,255,200,1,0,0,145,249,255,255,176,3,0,0,59,212,255,255,146,72,0,0,104,29,0,0,75,8,0,0,158,3,0,0,9,2,0,0,61,0,0,0,48,0,0,0,5,0,0,0,0,0,0,0,245,255,255,255,57,0,0,0,61,255,255,255,179,1,0,0,58,249,255,255,222,2,0,0,122,210,255,255,45,72,0,0,160,27,0,0,162,8,0,0,70,3,0,0,7,2,0,0,49,0,0,0,46,0,0,0,4,0,0,0,0,0,0,0,245,255,255,255,57,0,0,0,61,255,255,255,179,1,0,0,58,249,255,255,222,2,0,0,122,210,255,255,45,72,0,0,160,27,0,0,162,8,0,0,70,3,0,0,7,2,0,0,49,0,0,0,46,0,0,0,4,0,0,0,0,0,0,0,244,255,255,255,57,0,0,0,44,255,255,255,155,1,0,0,230,248,255,255,253,1,0,0,190,208,255,255,178,71,0,0,221,25,0,0,237,8,0,0,239,2,0,0,2,2,0,0,38,0,0,0,44,0,0,0,4,0,0,0,0,0,0,0,244,255,255,255,57,0,0,0,44,255,255,255,155,1,0,0,230,248,255,255,253,1,0,0,190,208,255,255,178,71,0,0,221,25,0,0,237,8,0,0,239,2,0,0,2,2,0,0,38,0,0,0,44,0,0,0,4,0,0,0,255,255,255,255,243,255,255,255,57,0,0,0,26,255,255,255,128,1,0,0,149,248,255,255,15,1,0,0,10,207,255,255,33,71,0,0,30,24,0,0,43,9,0,0,154,2,0,0,252,1,0,0,28,0,0,0,42,0,0,0,4], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([255,255,255,255,243,255,255,255,57,0,0,0,26,255,255,255,128,1,0,0,149,248,255,255,15,1,0,0,10,207,255,255,33,71,0,0,30,24,0,0,43,9,0,0,154,2,0,0,252,1,0,0,28,0,0,0,42,0,0,0,4,0,0,0,255,255,255,255,241,255,255,255,56,0,0,0,8,255,255,255,98,1,0,0,70,248,255,255,18,0,0,0,93,205,255,255,122,70,0,0,100,22,0,0,94,9,0,0,71,2,0,0,244,1,0,0,18,0,0,0,40,0,0,0,3,0,0,0,255,255,255,255,241,255,255,255,56,0,0,0,8,255,255,255,98,1,0,0,70,248,255,255,18,0,0,0,93,205,255,255,122,70,0,0,100,22,0,0,94,9,0,0,71,2,0,0,244,1,0,0,18,0,0,0,40,0,0,0,3,0,0,0,255,255,255,255,240,255,255,255,55,0,0,0,246,254,255,255,64,1,0,0,252,247,255,255,6,255,255,255,184,203,255,255,191,69,0,0,177,20,0,0,134,9,0,0,246,1,0,0,235,1,0,0,9,0,0,0,39,0,0,0,3,0,0,0,255,255,255,255,240,255,255,255,55,0,0,0,246,254,255,255,64,1,0,0,252,247,255,255,6,255,255,255,184,203,255,255,191,69,0,0,177,20,0,0,134,9,0,0,246,1,0,0,235,1,0,0,9,0,0,0,39,0,0,0,3,0,0,0,255,255,255,255,239,255,255,255,54,0,0,0,228,254,255,255,27,1,0,0,181,247,255,255,237,253,255,255,29,202,255,255,240,68,0,0,6,19,0,0,162,9,0,0,167,1,0,0,224,1,0,0,1,0,0,0,37,0,0,0,3,0,0,0,255,255,255,255,239,255,255,255,54,0,0,0,228,254,255,255,27,1,0,0,181,247,255,255,237,253,255,255,29,202,255,255,240,68,0,0,6,19,0,0,162,9,0,0,167,1,0,0,224,1,0,0,1,0,0,0,37,0,0,0,3,0,0,0,255,255,255,255,238,255,255,255,52,0,0,0,209,254,255,255,243,0,0,0,115,247,255,255,199,252,255,255,141,200,255,255,12,68,0,0,98,17,0,0,180,9,0,0,91,1,0,0,212,1,0,0,249,255,255,255,35,0,0,0,2,0,0,0,255,255,255,255,238,255,255,255,52,0,0,0,209,254,255,255,243,0,0,0,115,247,255,255,199,252,255,255,141,200,255,255,12,68,0,0,98,17,0,0,180,9,0,0,91,1,0,0,212,1,0,0,249,255,255,255,35,0,0,0,2,0,0,0,255,255,255,255,236,255,255,255,50,0,0,0,191,254,255,255,199,0,0,0,54,247,255,255,147,251,255,255,9,199,255,255,21,67,0,0,199,15,0,0,188,9,0,0,18,1,0,0,198,1,0,0,242,255,255,255,33,0,0,0,2,0,0,0,255,255,255,255,236,255,255,255,50,0,0,0,191,254,255,255,199,0,0,0,54,247,255,255,147,251,255,255,9,199,255,255,21,67,0,0,199,15,0,0,188,9,0,0,18,1,0,0,198,1,0,0,242,255,255,255,33,0,0,0,2,0,0,0,255,255,255,255,235,255,255,255,47,0,0,0,173,254,255,255,151,0,0,0,255,246,255,255,81,250,255,255,144,197,255,255,11,66,0,0,53,14,0,0,186,9,0,0,204,0,0,0,184,1,0,0,235,255,255,255,31,0,0,0,2,0,0,0,255,255,255,255,235,255,255,255,47,0,0,0,173,254,255,255,151,0,0,0,255,246,255,255,81,250,255,255,144,197,255,255,11,66,0,0,53,14,0,0,186,9,0,0,204,0,0,0,184,1,0,0,235,255,255,255,31,0,0,0,2,0,0,0,255,255,255,255,233,255,255,255,44,0,0,0,155,254,255,255,101,0,0,0,206,246,255,255,3,249,255,255,38,196,255,255,240,64,0,0,173,12,0,0,175,9,0,0,136,0,0,0,169,1,0,0,229,255,255,255,29,0,0,0,2,0,0,0,255,255,255,255,233,255,255,255,44,0,0,0,155,254,255,255,101,0,0,0,206,246,255,255,3,249,255,255,38,196,255,255,240,64,0,0,173,12,0,0,175,9,0,0,136,0,0,0,169,1,0,0,229,255,255,255,29,0,0,0,2,0,0,0,255,255,255,255,232,255,255,255,41,0,0,0,137,254,255,255,46,0,0,0,164,246,255,255,169,247,255,255,201,194,255,255,195,63,0,0,48,11,0,0,156,9,0,0,72,0,0,0,153,1,0,0,224,255,255,255,28,0,0,0,2,0,0,0,255,255,255,255,232,255,255,255,41,0,0,0,137,254,255,255,46,0,0,0,164,246,255,255,169,247,255,255,201,194,255,255,195,63,0,0,48,11,0,0,156,9,0,0,72,0,0,0,153,1,0,0,224,255,255,255,28,0,0,0,2,0,0,0,255,255,255,255,230,255,255,255,37,0,0,0,120,254,255,255,245,255,255,255,128,246,255,255,66,246,255,255,123,193,255,255,133,62,0,0,190,9,0,0,128,9,0,0,11,0,0,0,136,1,0,0,219,255,255,255,26,0,0,0,1,0,0,0,255,255,255,255,230,255,255,255,37,0,0,0,120,254,255,255,245,255,255,255,128,246,255,255,66,246,255,255,123,193,255,255,133,62,0,0,190,9,0,0,128,9,0,0,11,0,0,0,136,1,0,0,219,255,255,255,26,0,0,0,1,0,0,0,250,51,248,31,147,234,185,31,32,209,61,31,105,217,132,30,207,107,144,29,139,100,98,28,15,16,253,26,139,38,99,25,164,198,151,23,91,111,158,21,64,249,122,19,243,142,49,17,7,165,198,14,83,241,62,12,197,97,159,9,197,18,237,6,68,69,45,4,124,84,101,1,62,170,178,0,162,162,22,2,98,137,118,3,226,176,207,4,170,120,31,6,132,82,99,7,121,199,152,8,160,124,189,9,173,55,207,10,82,227,203,11,70,147,177,12,7,136,126,13,69,50,49,14,232,53,200,14,181,108,66,15,144,232,158,15,73,245,220,15,253,25,252,15,253,25,252,15,73,245,220,15,144,232,158,15,181,108,66,15,232,53,200,14,69,50,49,14,7,136,126,13,70,147,177,12,82,227,203,11,173,55,207,10,160,124,189,9,121,199,152,8,132,82,99,7,170,120,31,6,226,176,207,4,98,137,118,3,162,162,22,2,62,170,178,0,160,124,189,9,24,202,55,241,94,93,233,253,73,245,220,15,86,135,224,249,186,108,78,243,186,108,78,243,170,120,31,6,73,245,220,15,162,162,22,2,24,202,55,241,96,131,66,246,170,120,31,6,24,202,55,241,232,53,200,14,86,135,224,249,86,135,224,249,232,53,200,14,24,202,55,241,86,135,224,249,170,120,31,6,232,53,200,14,232,53,200,14,170,120,31,6,162,162,22,2,86,135,224,249,160,124,189,9,186,108,78,243,232,53,200,14,183,10,35,240,183,10,35,240,24,202,55,241,186,108,78,243,96,131,66,246,86,135,224,249,94,93,233,253,162,162,22,2,170,120,31,6,160,124,189,9,70,147,177,12,232,53,200,14,73,245,220,15,73,245,220,15,232,53,200,14,70,147,177,12,160,124,189,9,170,120,31,6,162,162,22,2,1,0,0,0,0,0,0,0,72,1,0,0,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,96,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,120,1,0,0,8,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,200,1,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,152,1,0,0,11,0,0,0,16,0,0,0,13,0,0,0,14,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,0,0,0,0,72,2,0,0,11,0,0,0,21,0,0,0,13,0,0,0,14,0,0,0,17,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,88,2,0,0,11,0,0,0,25,0,0,0,13,0,0,0,14,0,0,0,17,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,0,0,0,0,184,1,0,0,11,0,0,0,29,0,0,0,13,0,0,0,14,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,12,169,0,0,124,169,0,0,236,169,0,0,236,169,0,0,26,234,0,0,92,178,0,0,92,172,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,34,0,0,0,218,35,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,34,0,0,0,210,31,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,34,0,0,0,202,27,1,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+45656);
/* memory initializer */ allocate([104,2,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,0,0,0,0,120,2,0,0,37,0,0,0,51,0,0,0,52,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,53,0,0,0,44,0,0,0,45,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,0,0,0,0,136,2,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,0,0,0,0,152,2,0,0,59,0,0,0,73,0,0,0,74,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,75,0,0,0,66,0,0,0,67,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,0,0,0,0,208,2,0,0,59,0,0,0,81,0,0,0,82,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,75,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,79,0,0,0,80,0,0,0,0,0,0,0,216,2,0,0,37,0,0,0,83,0,0,0,84,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,53,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,57,0,0,0,58,0,0,0,8,0,0,0,0,0,0,0,224,2,0,0,85,0,0,0,86,0,0,0,248,255,255,255,248,255,255,255,224,2,0,0,87,0,0,0,88,0,0,0,8,0,0,0,0,0,0,0,248,2,0,0,89,0,0,0,90,0,0,0,248,255,255,255,248,255,255,255,248,2,0,0,91,0,0,0,92,0,0,0,4,0,0,0,0,0,0,0,16,3,0,0,93,0,0,0,94,0,0,0,252,255,255,255,252,255,255,255,16,3,0,0,95,0,0,0,96,0,0,0,4,0,0,0,0,0,0,0,40,3,0,0,97,0,0,0,98,0,0,0,252,255,255,255,252,255,255,255,40,3,0,0,99,0,0,0,100,0,0,0,0,0,0,0,168,2,0,0,101,0,0,0,102,0,0,0,0,0,0,0,32,4,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,4,0,0,109,0,0,0,110,0,0,0,105,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,4,0,0,114,0,0,0,115,0,0,0,105,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,4,0,0,127,0,0,0,128,0,0,0,105,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,4,0,0,140,0,0,0,141,0,0,0,105,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,4,0,0,150,0,0,0,151,0,0,0,105,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,160,0,0,0,161,0,0,0,105,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,248,255,255,255,0,5,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,5,0,0,176,0,0,0,177,0,0,0,105,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,248,255,255,255,40,5,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,5,0,0,192,0,0,0,193,0,0,0,105,0,0,0,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,5,0,0,195,0,0,0,196,0,0,0,105,0,0,0,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,5,0,0,198,0,0,0,199,0,0,0,105,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,5,0,0,209,0,0,0,210,0,0,0,105,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,5,0,0,220,0,0,0,221,0,0,0,105,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,5,0,0,231,0,0,0,232,0,0,0,105,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,6,0,0,242,0,0,0,243,0,0,0,105,0,0,0,244,0,0,0,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,6,0,0,246,0,0,0,247,0,0,0,105,0,0,0,248,0,0,0,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,6,0,0,250,0,0,0,251,0,0,0,105,0,0,0,252,0,0,0,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,6,0,0,254,0,0,0,255,0,0,0,105,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,6,0,0,2,1,0,0,3,1,0,0,105,0,0,0,4,1,0,0,5,1,0,0,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,6,0,0,7,1,0,0,8,1,0,0,105,0,0,0,9,1,0,0,10,1,0,0,11,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,0,0,12,1,0,0,13,1,0,0,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,4,0,0,14,1,0,0,15,1,0,0,105,0,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,21,1,0,0,22,1,0,0,23,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,3,0,0,24,1,0,0,25,1,0,0,105,0,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,30,1,0,0,31,1,0,0,32,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,4,0,0,33,1,0,0,34,1,0,0,105,0,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,39,1,0,0,0,0,0,0,112,4,0,0,40,1,0,0,41,1,0,0,105,0,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,0,0,0,0,64,3,0,0,47,1,0,0,48,1,0,0,105,0,0,0,0,0,0,0,80,3,0,0,47,1,0,0,49,1,0,0,105,0,0,0,50,1,0,0,51,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,0,0,0,0,112,3,0,0,47,1,0,0,62,1,0,0,105,0,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,68,1,0,0,69,1,0,0,0,0,0,0,144,3,0,0,47,1,0,0,70,1,0,0,105,0,0,0,71,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,76,1,0,0,77,1,0,0,0,0,0,0,176,3,0,0,47,1,0,0,78,1,0,0,105,0,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,0,0,0,0,208,3,0,0,47,1,0,0,86,1,0,0,105,0,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,0,0,0,0,224,3,0,0,47,1,0,0,87,1,0,0,105,0,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,32,38,16,6,8,101,24,101,24,67,16,67,16,67,16,67,16,67,16,67,16,67,16,67,16,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,34,8,0,0,0,0,0,0,0,0,106,64,74,48,42,40,10,32,105,56,105,56,73,40,73,40,41,32,41,32,9,24,9,24,104,48,104,48,104,48,104,48,72,32,72,32,72,32,72,32,40,24,40,24,40,24,40,24,8,16,8,16,8,16,8,16,103,40,103,40,103,40,103,40,103,40,103,40,103,40,103,40,71,24,71,24,71,24,71,24,71,24,71,24,71,24,71,24,110,96,78,88,46,80,14,80,110,88,78,80,46,72,14,72,13,64,13,64,77,72,77,72,45,64,45,64,13,56,13,56,109,80,109,80,77,64,77,64,45,56,45,56,13,48,13,48,107,72,107,72,107,72,107,72,107,72,107,72,107,72,107,72,75,56,75,56,75,56,75,56,75,56,75,56,75,56,75,56,43,48,43,48,43,48,43,48,43,48,43,48,43,48,43,48,11,40,11,40,11,40,11,40,11,40,11,40,11,40,11,40,0,0,0,0,47,104,47,104,16,128,80,128,48,128,16,120,112,128,80,120,48,120,16,112,112,120,80,112,48,112,16,104,111,112,111,112,79,104,79,104,47,96,47,96,15,96,15,96,111,104,111,104,79,96,79,96,47,88,47,88,15,88,15,88,0,0,0,0,0,0,0,0,102,56,70,32,38,32,6,16,102,48,70,24,38,24,6,8,101,40,101,40,37,16,37,16,100,32,100,32,100,32,100,32,100,24,100,24,100,24,100,24,67,16,67,16,67,16,67,16,67,16,67,16,67,16,67,16,0,0,0,0,0,0,0,0,105,72,73,56,41,56,9,48,8,40,8,40,72,48,72,48,40,48,40,48,8,32,8,32,103,64,103,64,103,64,103,64,71,40,71,40,71,40,71,40,39,40,39,40,39,40,39,40,7,24,7,24,7,24,7,24,0,0,0,0,109,120,109,120,110,128,78,128,46,128,14,128,46,120,14,120,78,120,46,112,77,112,77,112,13,112,13,112,109,112,109,112,77,104,77,104,45,104,45,104,13,104,13,104,109,104,109,104,77,96,77,96,45,96,45,96,13,96,13,96,12,88,12,88,12,88,12,88,76,88,76,88,76,88,76,88,44,88,44,88,44,88,44,88,12,80,12,80,12,80,12,80,108,96,108,96,108,96,108,96,76,80,76,80,76,80,76,80,44,80,44,80,44,80,44,80,12,72,12,72,12,72,12,72,107,88,107,88,107,88,107,88,107,88,107,88,107,88,107,88,75,72,75,72,75,72,75,72,75,72,75,72,75,72,75,72,43,72,43,72,43,72,43,72,43,72,43,72,43,72,43,72,11,64,11,64,11,64,11,64,11,64,11,64,11,64,11,64,107,80,107,80,107,80,107,80,107,80,107,80,107,80,107,80,75,64,75,64,75,64,75,64,75,64,75,64,75,64,75,64,43,64,43,64,43,64,43,64,43,64,43,64,43,64,43,64,11,56,11,56,11,56,11,56,11,56,11,56,11,56,11,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,24,70,56,38,56,6,16,102,72,70,48,38,48,6,8,37,40,37,40,69,40,69,40,37,32,37,32,69,32,69,32,37,24,37,24,101,64,101,64,69,24,69,24,37,16,37,16,100,56,100,56,100,56,100,56,100,48,100,48,100,48,100,48,100,40,100,40,100,40,100,40,100,32,100,32,100,32,100,32,100,24,100,24,100,24,100,24,68,16,68,16,68,16,68,16,36,8,36,8,36,8,36,8,4,0,4,0,4,0,4,0,0,0,10,128,106,128,74,128,42,128,10,120,106,120,74,120,42,120,10,112,106,112,74,112,42,112,10,104,41,104,41,104,9,96,9,96,73,104,73,104,41,96,41,96,9,88,9,88,105,104,105,104,73,96,73,96,41,88,41,88,9,80,9,80,104,96,104,96,104,96,104,96,72,88,72,88,72,88,72,88,40,80,40,80,40,80,40,80,8,72,8,72,8,72,8,72,104,88,104,88,104,88,104,88,72,80,72,80,72,80,72,80,40,72,40,72,40,72,40,72,8,64,8,64,8,64,8,64,7,56,7,56,7,56,7,56,7,56,7,56,7,56,7,56,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,48,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,103,80,103,80,103,80,103,80,103,80,103,80,103,80,103,80,71,64,71,64,71,64,71,64,71,64,71,64,71,64,71,64,39,64,39,64,39,64,39,64,39,64,39,64,39,64,39,64,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,6,8,38,8,0,0,6,0,6,16,38,16,70,16,0,0,6,24,38,24,70,24,102,24,6,32,38,32,70,32,102,32,6,40,38,40,70,40,102,40,6,48,38,48,70,48,102,48,6,56,38,56,70,56,102,56,6,64,38,64,70,64,102,64,6,72,38,72,70,72,102,72,6,80,38,80,70,80,102,80,6,88,38,88,70,88,102,88,6,96,38,96,70,96,102,96,6,104,38,104,70,104,102,104,6,112,38,112,70,112,102,112,6,120,38,120,70,120,102,120,6,128,38,128,70,128,102,128,0,0,67,16,2,0,2,0,33,8,33,8,33,8,33,8,103,32,103,32,72,32,40,32,71,24,71,24,39,24,39,24,6,32,6,32,6,32,6,32,6,24,6,24,6,24,6,24,6,16,6,16,6,16,6,16,102,24,102,24,102,24,102,24,38,16,38,16,38,16,38,16,6,8,6,8,6,8,6,8,0,0,5,128,15,128,10,0,27,128,30,0,20,0,17,128,51,128,54,0,60,0,57,128,40,0,45,128,39,128,34,0,99,128,102,0,108,0,105,128,120,0,125,128,119,128,114,0,80,0,85,128,95,128,90,0,75,128,78,0,68,0,65,128,195,128,198,0,204,0,201,128,216,0,221,128,215,128,210,0,240,0,245,128,255,128,250,0,235,128,238,0,228,0,225,128,160,0,165,128,175,128,170,0,187,128,190,0,180,0,177,128,147,128,150,0,156,0,153,128,136,0,141,128,135,128,130,0,131,129,134,1,140,1,137,129,152,1,157,129,151,129,146,1,176,1,181,129,191,129,186,1,171,129,174,1,164,1,161,129,224,1,229,129,239,129,234,1,251,129,254,1,244,1,241,129,211,129,214,1,220,1,217,129,200,1,205,129,199,129,194,1,64,1,69,129,79,129,74,1,91,129,94,1,84,1,81,129,115,129,118,1,124,1,121,129,104,1,109,129,103,129,98,1,35,129,38,1,44,1,41,129,56,1,61,129,55,129,50,1,16,1,21,129,31,129,26,1,11,129,14,1,4,1,1,129,3,131,6,3,12,3,9,131,24,3,29,131,23,131,18,3,48,3,53,131,63,131,58,3,43,131,46,3,36,3,33,131,96,3,101,131,111,131,106,3,123,131,126,3,116,3,113,131,83,131,86,3,92,3,89,131,72,3,77,131,71,131,66,3,192,3,197,131,207,131,202,3,219,131,222,3,212,3,209,131,243,131,246,3,252,3,249,131,232,3,237,131,231,131,226,3,163,131,166,3,172,3,169,131,184,3,189,131,183,131,178,3,144,3,149,131,159,131,154,3,139,131,142,3,132,3,129,131,128,2,133,130,143,130,138,2,155,130,158,2,148,2,145,130,179,130,182,2,188,2,185,130,168,2,173,130,167,130,162,2,227,130,230,2,236,2,233,130,248,2,253,130,247,130,242,2,208,2,213,130,223,130,218,2,203,130,206,2,196,2,193,130,67,130,70,2,76,2,73,130,88,2,93,130,87,130,82,2,112,2,117,130,127,130,122,2,107,130,110,2,100,2,97,130,32,2,37,130,47,130,42,2,59,130,62,2,52,2,49,130,19,130,22,2,28,2,25,130,8,2,13,130,7,130,2,2,4,1,68,1,130,1,162,1,73,0,137,0,41,0,25,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,213,0,245,0,181,0,117,0,229,0,165,0,147,0,147,0,99,0,195,0,83,0,51,0,249,0,121,0,185,0,57,0,217,0,89,0,153,0,25,0,233,0,105,0,169,0,41,0,201,0,73,0,137,0,9,0,1,0,23,1,7,1,21,0,21,0,3,0,3,0,3,0,3,0,134,0,23,1,7,1,23,0,3,0,3,0,3,0,3,0,39,2,7,2,21,2,21,2,37,1,37,1,37,0,37,0,134,0,23,0,21,1,21,1,5,1,5,1,5,0,5,0,39,2,7,2,21,2,21,2,37,1,37,1,37,0,37,0,136,0,23,1,7,1,23,0,3,0,3,0,3,0,3,0,130,1,57,2,55,1,55,1,25,3,9,3,57,0,41,2,23,2,23,2,39,1,39,1,7,2,7,2,39,0,39,0,51,3,35,3,6,1,130,1,162,1,25,2,41,1,41,0,7,1,7,1,21,1,21,1,21,1,21,1,23,0,23,0,7,0,7,0,55,3,7,3,37,3,37,3,53,2,53,2,53,0,53,0,19,3,51,1,35,2,3,2,8,1,8,2,4,3,25,1,7,1,7,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,68,3,130,3,162,3,25,5,89,1,194,3,89,0,226,3,41,4,73,2,23,4,23,4,71,1,71,1,71,0,71,0,9,4,41,3,57,2,9,3,23,3,23,3,55,1,55,1,55,0,55,0,39,2,39,2,21,2,21,2,21,2,21,2,35,1,35,1,5,2,37,0,85,5,69,5,85,4,85,3,51,5,67,4,35,5,83,2,3,5,51,4,67,3,51,3,8,1,8,2,25,2,41,1,21,1,21,1,21,1,21,1,7,1,7,1,23,0,23,0,5,0,5,0,5,0,5,0,6,3,132,3,194,3,25,5,89,1,226,3,2,4,41,4,73,2,25,4,71,1,71,1,9,4,73,0,41,3,57,2,25,3,57,1,9,3,57,0,37,2,37,2,37,2,37,2,5,2,5,2,5,2,5,2,37,0,37,0,37,0,37,0,87,5,87,4,69,5,69,5,83,3,83,3,83,3,83,3,53,5,69,4,35,5,35,5,83,2,3,5,51,4,67,3,83,0,51,3,8,1,6,2,132,2,196,2,2,3,25,2,41,1,41,0,23,1,23,1,7,1,7,1,23,0,23,0,7,0,7,0,34,3,57,5,89,3,66,3,73,4,41,5,89,2,25,5,87,1,87,1,55,4,55,4,71,3,71,3,89,0,9,4,39,4,71,2,55,3,71,0,21,4,21,4,69,1,69,1,37,3,53,2,19,3,19,3,51,1,51,1,5,3,53,0,35,2,3,2,83,5,67,5,83,4,3,5,8,1,8,2,4,3,25,1,7,1,7,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,70,3,196,3,6,4,130,4,164,4,228,4,36,5,25,7,121,1,98,5,132,5,196,5,25,6,105,1,105,0,2,6,34,6,66,6,25,4,73,1,73,0,41,3,57,2,9,3,23,3,23,3,55,1,55,1,55,0,55,0,39,2,39,2,21,2,37,1,5,2,37,0,119,7,103,7,119,6,87,7,119,5,103,6,69,7,69,7,117,4,85,6,101,5,53,7,117,3,117,3,69,6,69,6,87,5,87,4,101,3,101,3,35,7,115,2,101,4,5,7,115,0,115,0,99,2,99,2,69,5,53,5,3,6,3,6,85,3,69,4,51,6,35,6,37,5,85,2,19,5,19,5,83,1,83,1,53,4,69,3,3,5,83,0,35,4,67,2,51,3,3,4,8,1,8,2,8,3,6,4,25,2,130,4,23,1,23,1,7,1,7,1,23,0,23,0,5,0,5,0,5,0,5,0,164,4,230,4,100,5,162,5,196,5,41,7,121,2,2,6,119,1,119,1,25,7,121,0,57,6,105,3,105,0,34,6,66,6,25,5,103,2,103,2,41,6,9,6,23,6,23,6,103,1,103,1,89,1,57,4,89,0,98,6,41,4,73,2,25,4,73,1,9,4,73,0,39,3,39,3,55,2,55,2,21,3,21,3,21,3,21,3,53,1,53,1,53,1,53,1,7,3,55,0,37,2,37,2,35,1,35,1,35,1,35,1,3,2,35,0,117,7,101,7,117,6,117,5,101,6,101,6,69,7,69,7,117,4,117,4,87,7,87,5,85,6,101,5,51,7,51,7,115,3,67,6,69,5,85,4,53,5,85,3,99,4,3,7,67,4,35,5,83,2,3,5,67,3,51,3,8,1,8,2,8,3,4,4,70,4,194,4,25,2,41,1,226,4,9,0,23,1,23,1,7,1,7,1,23,0,23,0,4,5,66,5,98,5,130,5,89,6,57,7,162,5,41,7,121,2,73,6,105,4,25,7,121,1,194,5,57,6,105,3,73,5,89,4,73,4,226,5,39,6,39,6,103,2,103,2,103,1,103,1,25,6,105,0,57,5,89,3,41,5,89,2,23,5,23,5,87,1,87,1,55,4,55,4,71,3,71,3,89,0,9,4,39,4,39,4,71,2,71,2,23,4,23,4,53,3,69,1,37,3,53,2,71,0,7,3,53,0,53,0,19,3,19,3,19,3,19,3,51,1,35,2,3,2,35,0,117,7,101,7,115,6,115,6,83,7,115,5,99,6,67,7,115,4,99,5,115,3,83,5,3,7,115,0,3,6,3,5,8,1,8,2,8,3,4,4,25,1,9,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,72,4,72,5,72,6,72,7,72,8,72,9,70,10,198,10,70,11,198,11,70,12,198,12,66,13,100,13,166,13,34,14,68,14,132,14,196,14,4,15,137,1,66,15,98,15,130,15,164,15,226,15,25,5,89,1,2,16,34,16,66,16,25,4,71,1,71,1,9,4,73,0,41,3,57,2,23,3,23,3,55,1,55,1,7,3,7,3,55,0,55,0,39,2,39,2,21,2,37,1,5,2,37,0,104,16,104,17,104,18,102,19,228,19,36,20,102,20,228,20,34,21,68,21,132,21,196,21,4,22,68,22,25,15,249,1,249,0,130,22,162,22,194,22,233,2,226,22,25,14,233,1,2,23,34,23,66,23,98,23,130,23,162,23,201,6,57,13,194,23,41,13,217,2,25,13,185,7,226,23,2,24,201,3,34,24,73,11,215,1,215,1,9,13,217,0,137,10,169,8,73,12,201,4,105,11,185,6,55,12,55,12,39,12,39,12,199,2,199,2,87,11,87,11,185,5,137,9,23,12,23,12,199,1,199,1,153,8,9,12,199,0,199,0,185,4,105,10,169,6,121,9,55,11,55,11,183,3,183,3,137,8,89,10,39,11,39,11,169,5,105,9,167,4,167,4,121,8,137,7,151,4,151,4,121,7,121,6,181,2,181,2,181,2,181,2,21,11,21,11,181,1,181,1,7,11,183,0,151,6,71,10,55,10,167,3,87,9,151,5,37,10,37,10,165,2,165,2,21,10,21,10,165,1,165,1,7,10,103,8,165,0,165,0,135,6,71,9,149,3,149,3,55,9,87,8,135,5,103,7,37,9,37,9,149,2,149,2,87,7,119,5,53,8,53,8,133,3,133,3,103,6,71,7,119,4,87,6,103,5,119,3,19,9,147,1,5,9,149,0,69,8,133,4,117,2,117,2,71,6,103,4,35,8,35,8,35,8,35,8,131,2,19,8,53,7,37,7,19,7,19,7,115,1,115,1,85,5,5,7,117,0,53,6,101,3,69,5,85,4,37,6,101,2,53,5,3,8,131,0,19,6,99,1,3,6,99,0,85,3,69,4,35,5,35,5,83,2,3,5,51,4,67,3,83,0,35,4,67,2,51,3,70,24,249,15,233,15,217,15,233,14,201,15,217,14,185,15,249,11,201,14,217,12,194,24,231,12,231,12,215,13,215,13,249,10,201,13,183,14,183,14,231,11,231,11,151,15,151,15,247,9,247,9,231,10,231,10,183,13,183,13,215,11,215,11,135,15,135,15,247,8,247,8,199,12,199,12,169,14,153,14,135,14,135,14,121,15,121,14,245,7,245,7,245,7,245,7,213,10,213,10,167,13,183,12,199,11,247,6,101,15,101,15,229,8,85,15,149,13,213,9,245,5,229,7,165,12,181,11,69,15,69,15,245,4,245,4,199,10,231,6,245,3,245,3,51,15,51,15,133,13,213,8,35,15,243,2,101,14,149,12,3,15,3,15,197,9,85,14,163,11,163,11,117,13,213,7,67,14,67,14,197,8,213,6,51,14,51,14,179,9,179,9,149,11,165,10,179,10,227,5,227,4,131,12,99,13,227,3,35,14,3,14,227,0,83,13,211,5,115,12,195,7,67,13,131,11,179,8,211,4,147,10,163,9,99,12,211,3,115,11,83,12,195,5,147,9,115,10,163,7,147,7,247,14,247,12,245,13,245,13,227,13,227,13,227,13,227,13,163,15,227,9,8,1,8,2,8,3,8,4,8,5,6,6,134,6,4,7,66,7,98,7,23,1,23,1,9,1,25,0,7,0,7,0,136,7,136,8,136,9,136,10,136,11,134,12,6,13,136,13,134,14,6,15,134,15,6,16,132,16,198,16,70,17,196,17,4,18,68,18,132,18,196,18,4,19,68,19,132,19,196,19,2,20,34,20,66,20,100,20,162,20,194,20,228,20,34,21,66,21,98,21,153,1,130,21,162,21,194,21,226,21,2,22,41,8,137,2,25,8,137,1,34,22,66,22,98,22,130,22,41,7,121,2,105,4,25,7,89,5,121,1,162,22,57,6,105,3,73,5,89,4,41,6,105,2,25,6,194,22,57,5,103,1,103,1,89,3,73,4,39,5,39,5,87,2,87,2,23,5,23,5,87,1,87,1,9,5,89,0,55,4,55,4,71,3,39,4,71,2,55,3,69,1,69,1,23,4,7,4,37,3,37,3,53,2,53,2,71,0,7,3,21,3,21,3,53,1,53,0,35,2,35,2,19,2,35,1,3,2,35,0,226,22,2,23,233,14,34,23,66,23,98,23,249,11,130,23,217,13,169,15,249,10,185,14,233,11,201,13,217,12,153,15,249,9,233,10,185,13,217,11,137,15,249,8,201,12,153,14,233,9,121,15,249,7,169,13,217,10,185,12,105,15,162,23,199,11,199,11,247,6,247,6,137,14,233,8,89,15,153,13,247,5,247,5,119,14,119,14,231,7,231,7,167,12,167,12,199,10,199,10,183,11,183,11,217,9,137,13,71,15,71,15,247,4,247,4,55,15,55,15,247,3,247,3,215,8,215,8,231,6,231,6,39,15,39,15,247,2,247,2,105,14,249,0,23,15,23,15,247,1,247,1,151,12,151,12,199,9,199,9,87,14,167,11,183,10,231,5,119,13,215,7,71,14,231,4,135,12,199,8,55,14,103,13,215,6,231,3,151,11,183,9,39,14,39,14,167,10,167,10,231,2,231,2,23,14,23,14,231,1,231,1,9,14,233,0,87,13,87,13,215,5,215,5,119,12,199,7,71,13,135,11,213,4,213,4,183,8,151,10,167,9,103,12,199,6,55,13,213,3,213,3,213,2,213,2,39,13,7,13,21,13,21,13,117,11,117,11,181,7,181,7,213,1,213,1,87,12,215,0,197,5,197,5,133,10,133,10,165,8,69,12,197,4,101,11,181,6,181,6,151,9,7,12,53,12,53,12,197,3,197,3,117,10,117,10,165,7,165,7,165,6,165,6,199,0,7,11,195,2,195,2,37,12,85,11,181,5,21,12,133,9,149,8,197,1,69,11,181,4,101,10,53,11,117,9,179,3,179,3,149,7,133,8,37,11,85,10,179,2,179,2,165,5,21,11,179,1,179,1,181,0,101,9,149,6,69,10,165,4,117,8,133,7,53,10,163,3,163,3,83,9,147,5,35,10,163,2,19,10,163,1,5,10,165,0,99,8,99,8,131,6,67,9,147,4,51,9,147,3,147,3,117,7,5,9,83,8,131,5,35,9,99,7,115,6,147,2,19,9,147,0,67,8,131,4,83,7,115,5,51,8,131,3,99,6,67,7,115,4,3,8,131,0,83,6,99,5,51,7,115,3,67,6,3,7,115,0,3,6,99,0,243,15,227,15,243,14,211,15,243,13,195,15,243,12,211,14,227,13,179,15,195,14,227,12,163,14,3,15,8,1,8,2,8,3,4,4,25,1,9,1,23,0,23,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,70,4,198,4,68,5,249,15,132,5,194,5,232,5,249,2,226,6,25,15,249,1,8,7,8,8,8,9,8,10,8,11,8,12,6,13,134,13,6,14,134,14,6,15,134,15,6,16,132,16,196,16,2,17,36,17,100,17,162,17,89,1,194,17,226,17,2,18,34,18,25,4,73,1,66,18,41,3,57,2,23,3,23,3,55,1,55,1,9,3,57,0,39,2,39,2,21,2,37,1,5,2,37,0,231,15,247,14,215,15,247,13,199,15,247,12,183,15,247,11,165,15,165,15,247,10,151,15,247,9,247,8,133,15,133,15,117,15,245,7,101,15,245,6,85,15,245,5,67,15,67,15,243,4,243,3,243,0,243,0,243,0,243,0,243,0,243,0,243,0,243,0,53,15,53,15,53,15,53,15,104,18,102,19,230,19,102,20,35,15,3,15,228,20,36,21,100,21,162,21,196,21,4,22,66,22,100,22,164,22,228,22,36,23,233,3,98,23,130,23,162,23,194,23,226,23,2,24,34,24,9,13,66,24,98,24,130,24,57,12,162,24,25,12,201,0,194,24,231,2,231,2,41,14,25,14,217,3,41,13,217,2,217,1,57,11,226,24,23,13,23,13,201,4,105,11,201,3,169,7,39,12,39,12,201,2,185,5,201,1,9,12,73,11,185,4,105,10,169,6,183,3,183,3,89,10,169,5,39,11,39,11,183,2,183,2,23,11,23,11,183,1,183,1,9,11], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+48208);
/* memory initializer */ allocate([185,0,105,9,153,6,73,10,169,4,121,8,137,7,167,3,167,3,57,10,89,9,39,10,39,10,153,5,105,8,167,1,167,1,137,6,121,7,151,4,151,4,73,9,89,7,103,7,103,7,165,2,165,2,165,2,165,2,21,10,21,10,7,10,167,0,55,9,151,3,87,8,135,5,37,9,37,9,149,2,149,2,119,6,7,9,21,9,21,9,149,1,149,1,151,0,71,8,135,4,119,5,55,8,135,3,103,6,39,8,133,2,133,2,71,7,119,4,21,8,21,8,133,1,133,1,133,0,133,0,7,8,87,6,53,7,53,7,117,3,117,3,103,5,71,6,37,7,37,7,117,2,117,2,103,4,87,5,5,7,5,7,19,7,19,7,19,7,19,7,115,1,115,1,117,0,53,6,101,3,69,5,85,4,37,6,99,2,19,6,99,1,99,1,5,6,101,0,83,3,83,3,53,5,69,4,35,5,83,2,19,5,3,5,51,4,67,3,83,0,35,4,67,2,51,3,3,4,67,0,201,14,2,25,215,14,215,14,231,9,231,9,233,10,217,9,229,14,229,14,229,14,229,14,231,13,231,13,231,11,231,11,181,14,181,14,197,13,197,13,215,12,215,11,165,14,165,14,197,12,197,12,167,13,215,10,119,14,167,12,197,10,197,10,199,9,119,13,85,14,85,14,179,13,179,13,179,13,179,13,147,14,147,14,181,12,197,11,133,14,229,8,149,13,229,7,181,11,133,13,213,8,101,14,227,6,147,12,165,11,181,10,229,5,213,7,67,14,67,14,229,4,133,12,195,8,51,14,99,13,99,13,213,6,149,11,181,9,165,10,227,1,227,1,211,4,211,4,181,8,165,9,115,11,115,11,181,7,213,0,3,14,227,0,83,13,211,5,115,12,195,7,67,13,131,11,147,10,99,12,195,6,51,13,83,12,195,5,131,10,163,8,147,9,67,12,179,6,115,10,83,11,131,9,147,8,115,9,147,7,131,8,227,12,211,13,8,1,8,2,8,3,249,15,8,4,8,5,8,6,8,7,8,8,8,9,6,10,132,10,25,1,9,1,25,0,9,0,233,15,249,14,217,15,249,13,201,15,249,12,185,15,249,11,247,10,247,10,169,15,153,15,247,9,247,9,247,8,247,8,137,15,121,15,247,7,247,7,103,15,103,15,247,6,247,6,87,15,87,15,247,5,247,5,71,15,71,15,247,4,247,4,55,15,55,15,247,3,247,3,39,15,39,15,247,2,247,2,247,1,247,1,25,15,249,0,198,10,70,11,198,11,70,12,200,12,198,13,70,14,198,14,68,15,132,15,196,15,4,16,68,16,132,16,196,16,4,17,68,17,134,17,4,18,68,18,132,18,198,18,68,19,134,19,2,20,36,20,100,20,162,20,196,20,2,21,34,21,66,21,98,21,130,21,162,21,194,21,226,21,2,22,34,22,66,22,98,22,130,22,162,22,194,22,226,22,2,23,36,23,98,23,132,23,121,3,194,23,121,2,73,6,105,4,89,5,121,1,57,6,105,3,73,5,89,4,41,6,105,2,25,6,105,1,226,23,57,5,89,3,73,4,41,5,89,2,25,5,2,24,87,1,87,1,57,4,73,3,39,4,39,4,71,2,71,2,55,3,55,3,23,4,23,4,71,1,71,1,9,4,73,0,39,3,39,3,55,2,55,2,21,3,21,3,21,3,21,3,53,1,53,1,53,1,53,1,7,3,55,0,37,2,37,2,19,2,19,2,19,2,19,2,35,1,35,1,5,2,37,0,3,15,3,15,3,15,3,15,231,14,215,14,231,13,199,14,231,12,215,13,183,14,231,11,199,13,215,12,167,14,231,10,183,13,215,11,199,12,151,14,231,9,167,13,215,10,183,12,199,11,135,14,231,8,151,13,215,9,119,14,231,7,167,12,199,10,199,10,183,11,183,11,135,13,135,13,215,8,215,8,9,14,233,0,7,13,7,13,229,6,229,6,229,6,229,6,103,14,151,12,197,9,197,9,85,14,85,14,181,10,181,10,229,5,229,5,167,11,119,13,213,7,213,7,229,4,229,4,133,12,133,12,197,8,197,8,71,14,39,14,53,14,53,14,101,13,213,6,229,3,149,11,181,9,165,10,229,2,21,14,229,1,85,13,213,5,117,12,197,7,69,13,133,11,181,8,213,4,149,10,165,9,101,12,197,6,53,13,213,3,37,13,213,2,21,13,117,11,181,7,213,1,85,12,197,5,133,10,165,8,149,9,69,12,197,4,101,11,101,11,181,6,181,6,215,0,7,12,53,12,53,12,197,3,117,10,165,7,37,12,197,2,85,11,181,5,21,12,133,9,149,8,197,1,69,11,199,0,7,11,53,11,53,11,183,0,7,10,21,10,21,10,179,4,179,4,101,10,165,6,117,9,117,9,149,7,149,7,167,0,7,9,149,0,149,0,179,3,131,8,37,11,85,10,179,2,179,2,165,5,21,11,181,1,101,9,147,6,163,4,69,10,117,8,131,7,131,7,51,10,163,3,83,9,147,5,35,10,163,2,163,1,99,8,131,6,115,7,67,9,147,4,51,9,147,3,83,8,131,5,35,9,99,7,115,6,147,2,19,9,147,1,67,8,131,4,83,7,115,5,51,8,131,3,99,6,35,8,131,2,19,8,67,7,115,4,131,1,131,1,5,8,133,0,83,6,99,5,19,7,19,7,5,7,117,0,51,7,35,7,3,6,99,0,3,5,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,0,16,1,2,4,8,32,3,5,10,12,15,47,7,11,13,14,6,9,31,35,37,42,44,33,34,36,40,39,43,45,46,17,18,20,24,19,21,26,28,23,27,29,30,22,25,38,41,47,31,15,0,23,27,29,30,7,11,13,14,39,43,45,46,16,3,5,10,12,19,21,26,28,35,37,42,44,1,2,4,8,17,18,20,24,6,9,22,25,32,33,34,36,40,38,41,0,0,101,85,68,68,52,52,35,35,35,35,19,19,19,19,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,249,233,217,200,200,184,184,167,167,167,167,151,151,151,151,134,134,134,134,134,134,134,134,118,118,118,118,118,118,118,118,230,214,198,182,165,165,149,149,132,132,132,132,116,116,116,116,100,100,100,100,84,84,84,84,67,67,67,67,67,67,67,67,51,51,51,51,51,51,51,51,35,35,35,35,35,35,35,35,19,19,19,19,19,19,19,19,3,3,3,3,3,3,3,3,214,182,197,197,165,165,149,149,132,132,132,132,84,84,84,84,68,68,68,68,4,4,4,4,115,115,115,115,115,115,115,115,99,99,99,99,99,99,99,99,51,51,51,51,51,51,51,51,35,35,35,35,35,35,35,35,19,19,19,19,19,19,19,19,197,181,165,5,148,148,116,116,52,52,36,36,131,131,131,131,99,99,99,99,83,83,83,83,67,67,67,67,19,19,19,19,181,149,164,164,132,132,36,36,20,20,4,4,115,115,115,115,99,99,99,99,83,83,83,83,67,67,67,67,51,51,51,51,166,6,21,21,132,132,132,132,147,147,147,147,147,147,147,147,115,115,115,115,115,115,115,115,99,99,99,99,99,99,99,99,83,83,83,83,83,83,83,83,67,67,67,67,67,67,67,67,51,51,51,51,51,51,51,51,35,35,35,35,35,35,35,35,150,6,21,21,116,116,116,116,131,131,131,131,131,131,131,131,99,99,99,99,99,99,99,99,67,67,67,67,67,67,67,67,51,51,51,51,51,51,51,51,35,35,35,35,35,35,35,35,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,134,6,37,37,20,20,20,20,115,115,115,115,115,115,115,115,99,99,99,99,99,99,99,99,51,51,51,51,51,51,51,51,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,22,6,117,117,36,36,36,36,83,83,83,83,83,83,83,83,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,21,5,100,100,35,35,35,35,82,82,82,82,82,82,82,82,66,66,66,66,66,66,66,66,50,50,50,50,50,50,50,50,4,20,35,35,51,51,83,83,65,65,65,65,65,65,65,65,4,20,67,67,34,34,34,34,49,49,49,49,49,49,49,49,3,19,50,50,33,33,33,33,2,18,33,33,17,1,34,18,1,1,50,34,18,2,67,51,34,34,18,18,2,2,83,67,51,35,18,18,2,2,19,35,67,51,99,83,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,6,7,8,9,10,12,13,15,17,20,22,25,28,32,36,40,45,50,56,63,71,80,90,101,113,127,144,162,182,203,226,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,4,4,4,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,2,1,2,3,1,2,3,2,2,3,2,2,4,2,3,4,2,3,4,3,3,5,3,4,6,3,4,6,4,5,7,4,5,8,4,6,9,5,7,10,6,8,11,6,8,13,7,10,14,8,11,16,9,12,18,10,13,20,11,15,23,13,17,25,78,101,116,83,116,114,101,97,109,0,95,97,116,116,97,99,104,67,97,110,118,97,115,0,95,105,110,105,116,65,117,100,105,111,0,112,108,97,121,0,100,101,99,111,100,101,86,105,100,101,111,66,117,102,102,101,114,0,98,117,102,102,101,114,84,105,109,101,0,118,97,114,32,109,99,32,61,32,119,105,110,100,111,119,91,34,77,111,110,97,67,108,105,101,110,116,34,93,32,61,32,77,111,100,117,108,101,91,34,77,111,110,97,67,108,105,101,110,116,34,93,59,32,118,97,114,32,110,115,32,61,32,119,105,110,100,111,119,91,34,78,101,116,83,116,114,101,97,109,34,93,32,61,32,77,111,100,117,108,101,91,34,78,101,116,83,116,114,101,97,109,34,93,59,32,110,115,46,112,114,111,116,111,116,121,112,101,46,97,116,116,97,99,104,67,97,110,118,97,115,32,61,32,102,117,110,99,116,105,111,110,40,99,97,110,118,97,115,41,32,123,32,118,97,114,32,119,101,98,71,76,67,97,110,118,97,115,32,61,32,110,101,119,32,87,101,98,71,76,67,97,110,118,97,115,40,99,97,110,118,97,115,44,32,77,111,100,117,108,101,91,34,110,111,87,101,98,71,76,34,93,44,32,123,125,41,59,32,116,104,105,115,46,115,101,116,86,105,100,101,111,83,105,122,101,32,61,32,102,117,110,99,116,105,111,110,40,119,44,32,104,44,32,100,97,116,97,80,116,114,41,32,123,32,99,97,110,118,97,115,46,119,105,100,116,104,32,61,32,119,59,32,99,97,110,118,97,115,46,104,101,105,103,104,116,32,61,32,104,59,32,105,102,32,40,119,101,98,71,76,67,97,110,118,97,115,46,105,115,87,101,98,71,76,40,41,41,32,123,32,116,104,105,115,46,100,114,97,119,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,118,97,114,32,121,32,61,32,72,69,65,80,85,51,50,91,100,97,116,97,80,116,114,93,59,32,118,97,114,32,117,32,61,32,72,69,65,80,85,51,50,91,100,97,116,97,80,116,114,32,43,32,49,93,59,32,118,97,114,32,118,32,61,32,72,69,65,80,85,51,50,91,100,97,116,97,80,116,114,32,43,32,50,93,59,32,118,97,114,32,111,117,116,112,117,116,65,114,114,97,121,32,61,32,91,72,69,65,80,85,56,46,115,117,98,97,114,114,97,121,40,121,44,32,121,32,43,32,119,42,104,41,44,32,72,69,65,80,85,56,46,115,117,98,97,114,114,97,121,40,117,44,32,117,32,43,32,40,119,42,104,32,62,62,32,50,41,41,44,32,72,69,65,80,85,56,46,115,117,98,97,114,114,97,121,40,118,44,32,118,32,43,32,40,119,42,104,32,62,62,32,50,41,41,93,59,32,119,101,98,71,76,67,97,110,118,97,115,46,100,114,97,119,78,101,120,116,79,117,116,112,117,116,80,105,99,116,117,114,101,40,119,44,32,104,44,32,110,117,108,108,44,32,111,117,116,112,117,116,65,114,114,97,121,41,59,32,125,59,32,125,101,108,115,101,32,123,32,118,97,114,32,111,117,116,112,117,116,65,114,114,97,121,32,61,32,72,69,65,80,85,56,46,115,117,98,97,114,114,97,121,40,100,97,116,97,80,116,114,44,32,100,97,116,97,80,116,114,32,43,32,40,119,42,104,32,60,60,32,50,41,41,59,32,119,101,98,71,76,67,97,110,118,97,115,46,105,110,105,116,82,71,66,40,119,44,32,104,41,59,32,116,104,105,115,46,100,114,97,119,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,119,101,98,71,76,67,97,110,118,97,115,46,100,114,97,119,78,101,120,116,79,117,116,112,117,116,80,105,99,116,117,114,101,40,119,44,32,104,44,32,110,117,108,108,44,32,111,117,116,112,117,116,65,114,114,97,121,41,59,32,125,59,32,125,32,125,46,98,105,110,100,40,116,104,105,115,41,59,32,116,104,105,115,46,103,101,116,87,101,98,71,76,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,114,101,116,117,114,110,32,119,101,98,71,76,67,97,110,118,97,115,59,32,125,59,32,116,104,105,115,46,95,97,116,116,97,99,104,67,97,110,118,97,115,40,116,104,105,115,44,32,119,101,98,71,76,67,97,110,118,97,115,46,105,115,87,101,98,71,76,40,41,41,59,32,125,59,32,110,115,46,112,114,111,116,111,116,121,112,101,46,99,104,101,99,107,86,105,100,101,111,66,117,102,102,101,114,32,61,32,102,117,110,99,116,105,111,110,40,116,41,32,123,32,114,101,116,117,114,110,32,115,101,116,84,105,109,101,111,117,116,40,116,104,105,115,46,100,101,99,111,100,101,86,105,100,101,111,66,117,102,102,101,114,46,98,105,110,100,40,116,104,105,115,41,44,32,116,41,59,32,125,59,32,110,115,46,112,114,111,116,111,116,121,112,101,46,111,110,78,101,116,83,116,97,116,117,115,32,61,32,102,117,110,99,116,105,111,110,40,105,110,102,111,41,123,32,125,59,32,110,115,46,112,114,111,116,111,116,121,112,101,46,105,110,105,116,65,117,100,105,111,32,61,32,102,117,110,99,116,105,111,110,40,102,114,97,109,101,67,111,117,110,116,44,32,115,97,109,112,108,101,114,97,116,101,44,32,99,104,97,110,110,101,108,115,41,32,123,32,118,97,114,32,105,115,80,108,97,121,105,110,103,32,61,32,102,97,108,115,101,59,32,118,97,114,32,97,117,100,105,111,66,117,102,102,101,114,115,32,61,32,91,93,59,32,118,97,114,32,97,108,108,70,114,97,109,101,67,111,117,110,116,32,61,32,102,114,97,109,101,67,111,117,110,116,42,99,104,97,110,110,101,108,115,59,32,118,97,114,32,97,117,100,105,111,66,117,102,102,101,114,84,105,109,101,32,61,32,102,114,97,109,101,67,111,117,110,116,32,42,32,49,48,48,48,32,47,115,97,109,112,108,101,114,97,116,101,59,32,118,97,114,32,97,117,100,105,111,67,116,120,32,61,32,116,104,105,115,46,97,117,100,105,111,67,111,110,116,101,120,116,59,32,105,102,32,40,33,97,117,100,105,111,67,116,120,41,114,101,116,117,114,110,32,102,97,108,115,101,59,32,118,97,114,32,115,101,116,67,117,114,114,101,110,116,65,117,100,105,111,68,97,116,97,59,32,118,97,114,32,114,101,115,97,109,112,108,101,100,32,61,32,115,97,109,112,108,101,114,97,116,101,32,60,32,50,50,48,53,48,59,32,118,97,114,32,97,117,100,105,111,66,117,102,102,101,114,32,61,32,114,101,115,97,109,112,108,101,100,63,32,97,117,100,105,111,67,116,120,46,99,114,101,97,116,101,66,117,102,102,101,114,40,99,104,97,110,110,101,108,115,44,32,102,114,97,109,101,67,111,117,110,116,60,60,49,44,32,115,97,109,112,108,101,114,97,116,101,60,60,49,41,32,58,32,97,117,100,105,111,67,116,120,46,99,114,101,97,116,101,66,117,102,102,101,114,40,99,104,97,110,110,101,108,115,44,32,102,114,97,109,101,67,111,117,110,116,44,32,115,97,109,112,108,101,114,97,116,101,41,59,32,118,97,114,32,111,117,116,112,117,116,80,116,114,32,61,32,116,104,105,115,46,95,105,110,105,116,65,117,100,105,111,40,116,104,105,115,44,32,102,114,97,109,101,67,111,117,110,116,44,32,99,104,97,110,110,101,108,115,41,59,32,118,97,114,32,97,117,100,105,111,79,117,116,112,117,116,65,114,114,97,121,32,61,32,72,69,65,80,49,54,46,115,117,98,97,114,114,97,121,40,111,117,116,112,117,116,80,116,114,44,32,111,117,116,112,117,116,80,116,114,32,43,32,97,108,108,70,114,97,109,101,67,111,117,110,116,41,59,32,118,97,114,32,112,108,97,121,78,101,120,116,66,117,102,102,101,114,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,105,115,80,108,97,121,105,110,103,32,61,32,102,97,108,115,101,59,32,105,102,32,40,97,117,100,105,111,66,117,102,102,101,114,115,46,108,101,110,103,116,104,41,32,123,32,112,108,97,121,65,117,100,105,111,40,97,117,100,105,111,66,117,102,102,101,114,115,46,115,104,105,102,116,40,41,41,59,32,125,32,105,102,40,97,117,100,105,111,66,117,102,102,101,114,115,46,108,101,110,103,116,104,62,49,41,97,117,100,105,111,66,117,102,102,101,114,115,46,115,104,105,102,116,40,41,59,32,125,59,32,118,97,114,32,99,111,112,121,65,117,100,105,111,79,117,116,112,117,116,65,114,114,97,121,32,61,32,114,101,115,97,109,112,108,101,100,32,63,32,102,117,110,99,116,105,111,110,40,116,97,114,103,101,116,41,32,123,32,102,111,114,32,40,118,97,114,32,105,32,61,32,48,59,32,105,32,60,32,97,108,108,70,114,97,109,101,67,111,117,110,116,59,32,105,43,43,41,32,123,32,118,97,114,32,106,32,61,32,105,32,60,60,32,49,59,32,116,97,114,103,101,116,91,106,93,32,61,32,116,97,114,103,101,116,91,106,43,49,93,32,61,32,97,117,100,105,111,79,117,116,112,117,116,65,114,114,97,121,91,105,93,32,47,32,51,50,55,54,56,59,32,125,32,125,32,58,32,102,117,110,99,116,105,111,110,40,116,97,114,103,101,116,41,32,123,32,102,111,114,32,40,118,97,114,32,105,32,61,32,48,59,32,105,32,60,32,97,108,108,70,114,97,109,101,67,111,117,110,116,59,32,105,43,43,41,32,123,32,116,97,114,103,101,116,91,105,93,32,61,32,97,117,100,105,111,79,117,116,112,117,116,65,114,114,97,121,91,105,93,32,47,32,51,50,55,54,56,59,32,125,32,125,59,32,118,97,114,32,99,111,112,121,84,111,67,116,120,66,117,102,102,101,114,32,61,99,104,97,110,110,101,108,115,62,49,63,32,102,117,110,99,116,105,111,110,40,102,114,111,109,66,117,102,102,101,114,41,32,123,32,102,111,114,32,40,118,97,114,32,99,104,97,110,110,101,108,32,61,32,48,59,32,99,104,97,110,110,101,108,32,60,32,99,104,97,110,110,101,108,115,59,32,99,104,97,110,110,101,108,43,43,41,32,123,32,118,97,114,32,110,111,119,66,117,102,102,101,114,105,110,103,32,61,32,97,117,100,105,111,66,117,102,102,101,114,46,103,101,116,67,104,97,110,110,101,108,68,97,116,97,40,99,104,97,110,110,101,108,41,59,32,105,102,32,40,102,114,111,109,66,117,102,102,101,114,41,32,123,32,102,111,114,32,40,118,97,114,32,105,32,61,32,48,59,32,105,32,60,32,102,114,97,109,101,67,111,117,110,116,59,32,105,43,43,41,32,123,32,110,111,119,66,117,102,102,101,114,105,110,103,91,105,93,32,61,32,102,114,111,109,66,117,102,102,101,114,91,105,42,32,40,99,104,97,110,110,101,108,32,43,32,49,41,93,59,32,125,32,125,32,101,108,115,101,32,123,32,102,111,114,32,40,118,97,114,32,105,32,61,32,48,59,32,105,32,60,32,102,114,97,109,101,67,111,117,110,116,59,32,105,43,43,41,32,123,32,110,111,119,66,117,102,102,101,114,105,110,103,91,105,93,32,61,32,97,117,100,105,111,79,117,116,112,117,116,65,114,114,97,121,91,105,42,32,40,99,104,97,110,110,101,108,32,43,32,49,41,93,32,47,32,51,50,55,54,56,59,32,125,32,125,32,125,32,125,58,102,117,110,99,116,105,111,110,40,102,114,111,109,66,117,102,102,101,114,41,32,123,32,118,97,114,32,110,111,119,66,117,102,102,101,114,105,110,103,32,61,32,97,117,100,105,111,66,117,102,102,101,114,46,103,101,116,67,104,97,110,110,101,108,68,97,116,97,40,48,41,59,32,105,102,32,40,102,114,111,109,66,117,102,102,101,114,41,110,111,119,66,117,102,102,101,114,105,110,103,46,115,101,116,40,102,114,111,109,66,117,102,102,101,114,41,59,32,101,108,115,101,32,99,111,112,121,65,117,100,105,111,79,117,116,112,117,116,65,114,114,97,121,40,110,111,119,66,117,102,102,101,114,105,110,103,41,59,32,125,59,32,118,97,114,32,112,108,97,121,65,117,100,105,111,32,61,32,102,117,110,99,116,105,111,110,40,102,114,111,109,66,117,102,102,101,114,41,32,123,32,105,102,32,40,105,115,80,108,97,121,105,110,103,41,32,123,32,118,97,114,32,98,117,102,102,101,114,32,61,32,110,101,119,32,70,108,111,97,116,51,50,65,114,114,97,121,40,114,101,115,97,109,112,108,101,100,32,63,32,97,108,108,70,114,97,109,101,67,111,117,110,116,32,42,50,58,32,97,108,108,70,114,97,109,101,67,111,117,110,116,41,59,32,99,111,112,121,65,117,100,105,111,79,117,116,112,117,116,65,114,114,97,121,40,98,117,102,102,101,114,41,59,32,97,117,100,105,111,66,117,102,102,101,114,115,46,112,117,115,104,40,98,117,102,102,101,114,41,59,32,114,101,116,117,114,110,59,32,125,32,105,115,80,108,97,121,105,110,103,32,61,32,116,114,117,101,59,32,99,111,112,121,84,111,67,116,120,66,117,102,102,101,114,40,102,114,111,109,66,117,102,102,101,114,41,59,32,118,97,114,32,115,111,117,114,99,101,32,61,32,97,117,100,105,111,67,116,120,46,99,114,101,97,116,101,66,117,102,102,101,114,83,111,117,114,99,101,40,41,59,32,115,111,117,114,99,101,46,98,117,102,102,101,114,32,61,32,97,117,100,105,111,66,117,102,102,101,114,59,32,115,111,117,114,99,101,46,99,111,110,110,101,99,116,40,97,117,100,105,111,67,116,120,46,100,101,115,116,105,110,97,116,105,111,110,41,59,32,115,111,117,114,99,101,46,111,110,101,110,100,101,100,32,61,32,112,108,97,121,78,101,120,116,66,117,102,102,101,114,59,32,115,111,117,114,99,101,46,115,116,97,114,116,40,41,59,32,125,59,32,116,104,105,115,46,112,108,97,121,65,117,100,105,111,32,61,32,112,108,97,121,65,117,100,105,111,59,32,125,59,32,109,99,46,112,114,111,116,111,116,121,112,101,46,99,111,110,110,101,99,116,32,61,32,102,117,110,99,116,105,111,110,40,117,114,108,44,32,97,112,112,78,97,109,101,44,32,114,111,111,109,78,97,109,101,41,32,123,32,118,97,114,32,119,115,32,61,32,116,104,105,115,46,36,99,111,110,110,101,99,116,40,116,104,105,115,44,32,117,114,108,44,32,97,112,112,78,97,109,101,44,32,114,111,111,109,78,97,109,101,32,124,124,32,34,34,41,59,32,116,104,105,115,46,115,101,110,100,32,61,32,102,117,110,99,116,105,111,110,40,112,116,114,44,32,108,101,110,103,116,104,44,32,111,117,116,112,117,116,41,32,123,32,118,97,114,32,111,117,116,112,117,116,65,114,114,97,121,32,61,32,72,69,65,80,85,56,46,115,117,98,97,114,114,97,121,40,112,116,114,44,32,112,116,114,32,43,32,108,101,110,103,116,104,41,59,32,119,115,46,115,101,110,100,40,111,117,116,112,117,116,65,114,114,97,121,41,59,32,125,59,32,125,59,0,100,97,116,97,0,111,110,87,115,77,101,115,115,97,103,101,0,119,101,98,115,111,99,107,101,116,32,111,112,101,110,33,0,111,110,87,115,79,112,101,110,0,115,101,110,100,0,87,101,98,83,111,99,107,101,116,0,99,108,111,115,101,0,119,115,58,47,47,0,47,0,98,105,110,97,114,121,84,121,112,101,0,97,114,114,97,121,98,117,102,102,101,114,0,36,111,110,87,115,79,112,101,110,0,98,105,110,100,0,111,110,111,112,101,110,0,36,111,110,87,115,77,101,115,115,97,103,101,0,111,110,109,101,115,115,97,103,101,0,111,110,87,115,69,114,114,111,114,0,111,110,101,114,114,111,114,0,111,110,87,115,67,108,111,115,101,0,111,110,99,108,111,115,101,0,77,111,110,97,67,108,105,101,110,116,0,103,101,116,87,101,98,83,111,99,107,101,116,0,36,99,111,110,110,101,99,116,0,0,0,105,105,105,105,105,105,105,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,80,49,48,77,111,110,97,67,108,105,101,110,116,0,49,48,77,111,110,97,67,108,105,101,110,116,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,105,105,105,105,0,80,75,49,48,77,111,110,97,67,108,105,101,110,116,0,110,101,116,83,116,114,101,97,109,32,100,101,108,101,116,101,100,33,32,37,100,0,123,99,108,101,97,114,84,105,109,101,111,117,116,40,36,48,41,125,0,97,117,100,105,111,32,100,101,99,111,100,101,114,32,114,101,108,101,97,115,101,10,0,97,117,100,105,111,32,100,101,99,111,100,101,114,32,114,101,108,101,97,115,101,33,10,0,118,105,100,101,111,32,100,101,99,111,100,101,114,32,114,101,108,101,97,115,101,33,10,0,79,110,108,121,32,115,117,112,112,111,114,116,32,118,105,100,101,111,32,104,46,50,54,52,47,97,118,99,32,111,114,32,104,46,50,54,53,47,104,101,118,99,32,99,111,100,101,99,46,32,97,99,116,117,97,108,61,37,100,0,99,111,100,101,0,78,101,116,83,116,114,101,97,109,46,80,108,97,121,46,83,116,97,114,116,0,111,110,78,101,116,83,116,97,116,117,115,0,115,101,116,84,105,109,101,111,117,116,32,116,111,32,112,108,97,121,32,118,105,100,101,111,32,98,117,102,102,101,114,32,37,100,0,99,104,101,99,107,86,105,100,101,111,66,117,102,102,101,114,0,37,100,0,100,114,97,119,0,99,97,110,118,97,115,58,37,100,44,37,100,0,115,101,116,86,105,100,101,111,83,105,122,101,0,99,111,100,101,99,32,61,32,37,100,0,123,32,114,101,116,117,114,110,32,40,110,101,119,32,68,97,116,101,40,41,41,46,103,101,116,84,105,109,101,40,41,59,32,125,0,112,108,97,121,65,117,100,105,111,0,118,105,105,0,80,57,78,101,116,83,116,114,101,97,109,0,57,78,101,116,83,116,114,101,97,109,0,78,101,116,83,116,114,101,97,109,46,66,117,102,102,101,114,46,69,109,112,116,121,0,118,105,105,105,0,91,34,95,95,112,108,97,121,34,44,34,0,34,93,0,105,105,105,105,105,105,0,97,117,100,105,111,32,105,110,105,116,33,32,37,100,0,109,112,51,32,105,110,105,116,33,0,118,105,105,105,105,0,119,101,98,103,108,58,37,115,0,68,69,67,79,68,69,82,32,73,78,73,84,73,65,76,73,90,65,84,73,79,78,32,70,65,73,76,69,68,10,0,72,50,54,52,32,105,110,105,116,0,105,105,105,0,110,101,116,83,116,114,101,97,109,32,99,111,110,110,101,99,116,33,32,37,100,0,118,105,0,118,0,105,105,0,80,75,57,78,101,116,83,116,114,101,97,109,0,6,5,5,5,9,9,9,9,6,9,9,9,6,5,7,3,9,9,12,6,6,9,12,6,11,10,0,0,18,18,0,0,15,18,0,0,7,7,7,0,12,12,12,0,6,15,12,0,6,6,6,3,12,9,9,6,6,12,9,6,8,8,5,0,15,12,9,0,6,18,9,0,0,0,0,1,0,2,0,3,3,0,1,1,1,2,1,3,2,1,2,2,2,3,3,1,3,2,3,3,4,2,4,3,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,3,3,3,2,0,114,101,113,117,97,110,116,105,122,101,32,111,118,101,114,102,108,111,119,32,40,37,102,32,42,32,50,94,37,100,41,10,0,45,98,105,116,115,95,108,101,102,116,32,60,61,32,77,65,68,95,66,85,70,70,69,82,95,71,85,65,82,68,32,42,32,67,72,65,82,95,66,73,84,0,108,97,121,101,114,51,46,99,0,73,73,73,95,104,117,102,102,100,101,99,111,100,101,0,100,101,110,111,109,32,33,61,32,48,0,116,105,109,101,114,46,99,0,115,99,97,108,101,95,114,97,116,105,111,110,97,108,0,4,4,4,4,4,4,6,6,6,8,10,12,16,18,22,28,34,40,46,54,54,192,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,10,10,10,12,12,12,14,14,14,16,16,16,20,20,20,26,26,26,66,66,66,4,4,4,4,4,4,6,6,4,4,4,6,6,6,6,6,6,10,10,10,12,12,12,14,14,14,16,16,16,20,20,20,26,26,26,66,66,66,4,4,4,4,4,4,6,6,8,8,10,12,16,20,24,28,34,42,50,54,76,158,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,22,22,22,30,30,30,56,56,56,4,4,4,4,4,4,6,6,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,22,22,22,30,30,30,56,56,56,4,4,4,4,4,4,6,6,8,10,12,16,20,24,30,38,46,56,68,84,102,26,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,12,12,12,16,16,16,20,20,20,26,26,26,34,34,34,42,42,42,12,12,12,4,4,4,4,4,4,6,6,4,4,4,6,6,6,8,8,8,12,12,12,16,16,16,20,20,20,26,26,26,34,34,34,42,42,42,12,12,12,6,6,6,6,6,6,8,10,12,14,16,18,22,26,32,38,46,54,62,70,76,36,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,32,32,32,44,44,44,12,12,12,6,6,6,6,6,6,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,32,32,32,44,44,44,12,12,12,6,6,6,6,6,6,8,10,12,14,16,20,24,28,32,38,46,52,60,68,58,54,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,8,8,8,10,10,10,14,14,14,18,18,18,26,26,26,32,32,32,42,42,42,18,18,18,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,10,10,10,14,14,14,18,18,18,26,26,26,32,32,32,42,42,42,18,18,18,4,4,4,4,4,4,4,4,4,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,30,30,30,40,40,40,18,18,18,6,6,6,6,6,6,6,6,6,8,8,8,10,10,10,12,12,12,14,14,14,18,18,18,24,24,24,30,30,30,40,40,40,18,18,18,12,12,12,12,12,12,16,20,24,28,32,40,48,56,64,76,90,2,2,2,2,2,8,8,8,8,8,8,8,8,8,12,12,12,16,16,16,20,20,20,24,24,24,28,28,28,36,36,36,2,2,2,2,2,2,2,2,2,26,26,26,12,12,12,4,4,4,8,8,8,12,12,12,16,16,16,20,20,20,24,24,24,28,28,28,36,36,36,2,2,2,2,2,2,2,2,2,26,26,26,118,111,105,100,0,98,111,111,108,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+58448);
/* memory initializer */ allocate([116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,57,116,121,112,101,95,105,110,102,111,0,83,116,56,98,97,100,95,99,97,115,116,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,68,110,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,67,58,92,80,114,111,103,114,97,109,32,70,105,108,101,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,53,46,48,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,67,58,92,80,114,111,103,114,97,109,32,70,105,108,101,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,53,46,48,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,118,101,99,116,111,114,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,80,79,83,73,88], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+68688);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,37,112,0,67,0,37,0,0,0,0,0,108,0,108,108,0,0,76,0,37,112,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,48,49,50,51,52,53,54,55,56,57,0,37,46,48,76,102,0,116,114,117,101,0,102,97,108,115,101,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,65,77,0,80,77,0,37,109,47,37,100,47,37,121,0,37,72,58,37,77,58,37,83,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,37,73,58,37,77,58,37,83,32,37,112,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+74706);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  
  var emval_symbols={};
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
          return readLatin1String(address);
      } else {
          return symbol;
      }
    }
  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __emval_new_cstring(v) {
      return __emval_register(getStringOrSymbol(v));
    }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  
  var emval_methodCallers=[];function __emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  
  
  
  var registeredTypes={};
  
  
  function _free() {
  }
  Module["_free"] = _free;function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_lookupTypes(argCount, argTypes, argWireTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function __emval_get_method_caller(argCount, argTypes) {
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
          argsList += (i !== 0 ? ", " : "") + "arg" + i;
          params.push("argType" + i);
          args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody += 
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      return __emval_addMethodCaller(invokerFunction);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function __emval_run_destructors(handle) {
      var destructors = emval_handle_array[handle].value;
      runDestructors(destructors);
      __emval_decref(handle);
    }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  var awaitingDependencies={};
  
  var typeDependencies={};
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _pthread_mutex_lock() {}

  
  function craftEmvalAllocator(argCount) {
      /*This function returns a new function that looks like this:
      function emval_allocator_3(constructor, argTypes, args) {
          var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
          var arg0 = argType0.readValueFromPointer(args);
          var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
          var arg1 = argType1.readValueFromPointer(args + 8);
          var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
          var arg2 = argType2.readValueFromPointer(args + 16);
          var obj = new constructor(arg0, arg1, arg2);
          return __emval_register(obj);
      } */
  
      var argsList = "";
      for(var i = 0; i < argCount; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
      }
  
      var functionBody =
          "return function emval_allocator_"+argCount+"(constructor, argTypes, args) {\n";
  
      for(var i = 0; i < argCount; ++i) {
          functionBody +=
              "var argType"+i+" = requireRegisteredType(HEAP32[(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
              "var arg"+i+" = argType"+i+".readValueFromPointer(args);\n" +
              "args += argType"+i+"['argPackAdvance'];\n";
      }
      functionBody +=
          "var obj = new constructor("+argsList+");\n" +
          "return __emval_register(obj);\n" +
          "}\n";
  
      /*jshint evil:true*/
      return (new Function("requireRegisteredType", "HEAP32", "__emval_register", functionBody))(
          requireRegisteredType, HEAP32, __emval_register);
    }
  
  var emval_newers={};
  
  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }function __emval_new(handle, argCount, argTypes, args) {
      handle = requireHandle(handle);
  
      var newer = emval_newers[argCount];
      if (!newer) {
          newer = craftEmvalAllocator(argCount);
          emval_newers[argCount] = newer;
      }
  
      return newer(handle, argTypes, args);
    }

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }


  var _emscripten_asm_const_int=true;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;

  
  var PTHREAD_SPECIFIC={};
  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  var _emscripten_resume=true;

  
  function __emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAP32[destructorsRef >> 2] = __emval_register(destructors);
      return destructors;
    }function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _emscripten_landingpad=true;

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___cxa_guard_abort() {}

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function _pthread_cond_wait() {
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function ___cxa_guard_release() {}

  function __emval_new_object() {
      return __emval_register({});
    }

  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function ___gxx_personality_v0() {
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  function __emval_as(handle, returnType, destructorsRef) {
      handle = requireHandle(handle);
      returnType = requireRegisteredType(returnType, 'emval::as');
      var destructors = [];
      var rd = __emval_register(destructors);
      HEAP32[destructorsRef >> 2] = rd;
      return returnType['toWireType'](destructors, handle);
    }

  function __emval_call_method(caller, handle, methodName, destructorsRef, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      return caller(handle, methodName, __emval_allocateDestructors(destructorsRef), args);
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  
  var _throwInternalError=undefined;function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function ___lock() {}

  function ___unlock() {}

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function __emval_set_property(handle, key, value) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      value = requireHandle(value);
      handle[key] = value;
    }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var _emscripten_asm_const=true;

  function __emval_typeof(handle) {
      handle = requireHandle(handle);
      return __emval_register(typeof handle);
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function __emval_get_property(handle, key) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      return __emval_register(handle[key]);
    }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var _strlen=undefined;
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = varargs;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = HEAPF64[((argIndex)>>3)];
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[((argIndex)>>2)],
                 HEAP32[(((argIndex)+(4))>>2)]];
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[((argIndex)>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }
  
  
  
  function __emscripten_traverse_stack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for(i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        Runtime.warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        var stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
          stack_args = __emscripten_traverse_stack(stack_args[0]);
      }
      
      // Process all lines:
      lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
      
      for(l in lines) {
        var line = lines[l];
  
        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          jsSymbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
          cSymbolName = jsSymbolName;
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = '+jsSymbolName) : ('    at '+cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
        
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }function _emscripten_log_js(flags, str) {
      if (flags & 24/*EM_LOG_C_STACK | EM_LOG_JS_STACK*/) {
        str = str.replace(/\s+$/, ''); // Ensure the message and the callstack are joined cleanly with exactly one newline.
        str += (str.length > 0 ? '\n' : '') + _emscripten_get_callstack_js(flags);
      }
  
      if (flags & 1 /*EM_LOG_CONSOLE*/) {
        if (flags & 4 /*EM_LOG_ERROR*/) {
          console.error(str);
        } else if (flags & 2 /*EM_LOG_WARN*/) {
          console.warn(str);
        } else {
          console.log(str);
        }
      } else if (flags & 6 /*EM_LOG_ERROR|EM_LOG_WARN*/) {
        Module.printErr(str);
      } else {
        Module.print(str);
      }
    }function _emscripten_log(flags, varargs) {
      // Extract the (optionally-existing) printf format specifier field from varargs.
      var format = HEAP32[((varargs)>>2)];
      varargs += Math.max(Runtime.getNativeFieldSize('i32'), Runtime.getAlignSize('i32', null, true));
      var str = '';
      if (format) {
        var result = __formatString(format, varargs);
        for(var i = 0 ; i < result.length; ++i) {
          str += String.fromCharCode(result[i]);
        }
      }
      _emscripten_log_js(flags, str);
    }

  
  function emval_get_global() { return (function(){return Function;})()('return this')(); }function __emval_get_global(name) {
      if(name===0){
        return __emval_register(emval_get_global());
      } else {
        name = getStringOrSymbol(name);
        return __emval_register(emval_get_global()[name]);
      }
    }

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
embind_init_charCodes()
init_emval();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
init_ClassHandle()
init_RegisteredPointer()
init_embind();
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_id(x) { Module["printErr"]("Invalid function pointer called with signature 'id'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_id(index,a1) {
  try {
    return Module["dynCall_id"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_id": nullFunc_id, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_id": invoke_id, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "__emval_call_void_method": __emval_call_void_method, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "upcastPointer": upcastPointer, "___cxa_guard_acquire": ___cxa_guard_acquire, "getLiveInheritedInstances": getLiveInheritedInstances, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "ClassHandle": ClassHandle, "getShiftFromSize": getShiftFromSize, "__emval_get_property": __emval_get_property, "__addDays": __addDays, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "_sysconf": _sysconf, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "__embind_register_std_string": __embind_register_std_string, "__emval_get_global": __emval_get_global, "init_RegisteredPointer": init_RegisteredPointer, "__emscripten_traverse_stack": __emscripten_traverse_stack, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "flushPendingDeletes": flushPendingDeletes, "makeClassHandle": makeClassHandle, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "__isLeapYear": __isLeapYear, "__embind_register_class_constructor": __embind_register_class_constructor, "__emval_allocateDestructors": __emval_allocateDestructors, "___cxa_rethrow": ___cxa_rethrow, "init_ClassHandle": init_ClassHandle, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall140": ___syscall140, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_pthread_cleanup_pop": _pthread_cleanup_pop, "craftEmvalAllocator": craftEmvalAllocator, "requireHandle": requireHandle, "RegisteredClass": RegisteredClass, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "__embind_register_emval": __embind_register_emval, "__emval_as": __emval_as, "___setErrNo": ___setErrNo, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "createNamedFunction": createNamedFunction, "validateThis": validateThis, "embind_init_charCodes": embind_init_charCodes, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "_pthread_mutex_unlock": _pthread_mutex_unlock, "init_embind": init_embind, "ClassHandle_clone": ClassHandle_clone, "__emval_addMethodCaller": __emval_addMethodCaller, "heap32VectorToArray": heap32VectorToArray, "__emval_lookupTypes": __emval_lookupTypes, "__emval_call_method": __emval_call_method, "__emval_run_destructors": __emval_run_destructors, "ClassHandle_delete": ClassHandle_delete, "RegisteredPointer_destructor": RegisteredPointer_destructor, "___syscall6": ___syscall6, "ensureOverloadTable": ensureOverloadTable, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "new_": new_, "downcastPointer": downcastPointer, "replacePublicSymbol": replacePublicSymbol, "___cxa_guard_abort": ___cxa_guard_abort, "__embind_register_class": __embind_register_class, "ClassHandle_deleteLater": ClassHandle_deleteLater, "___syscall54": ___syscall54, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "ClassHandle_isDeleted": ClassHandle_isDeleted, "__embind_register_integer": __embind_register_integer, "___cxa_allocate_exception": ___cxa_allocate_exception, "__emval_take_value": __emval_take_value, "___cxa_end_catch": ___cxa_end_catch, "getTypeName": getTypeName, "_strftime": _strftime, "__embind_register_class_function": __embind_register_class_function, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "runDestructors": runDestructors, "requireRegisteredType": requireRegisteredType, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "__emval_set_property": __emval_set_property, "_pthread_setspecific": _pthread_setspecific, "init_emval": init_emval, "_pthread_cond_broadcast": _pthread_cond_broadcast, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "_abort": _abort, "throwBindingError": throwBindingError, "__emval_new_object": __emval_new_object, "__embind_register_class_property": __embind_register_class_property, "exposePublicSymbol": exposePublicSymbol, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "__emval_get_method_caller": __emval_get_method_caller, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "___lock": ___lock, "__embind_register_memory_view": __embind_register_memory_view, "getInheritedInstance": getInheritedInstance, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "__emval_typeof": __emval_typeof, "setDelayFunction": setDelayFunction, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "__embind_register_void": __embind_register_void, "_strftime_l": _strftime_l, "__reallyNegative": __reallyNegative, "__emval_register": __emval_register, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__embind_register_std_wstring": __embind_register_std_wstring, "getStringOrSymbol": getStringOrSymbol, "_embind_repr": _embind_repr, "__emval_incref": __emval_incref, "RegisteredPointer": RegisteredPointer, "__arraySum": __arraySum, "readLatin1String": readLatin1String, "_emscripten_log_js": _emscripten_log_js, "_pthread_self": _pthread_self, "getBasestPointer": getBasestPointer, "getInheritedInstanceCount": getInheritedInstanceCount, "__embind_register_float": __embind_register_float, "integerReadValueFromPointer": integerReadValueFromPointer, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "__emval_new": __emval_new, "___cxa_guard_release": ___cxa_guard_release, "emval_get_global": emval_get_global, "genericPointerToWireType": genericPointerToWireType, "registerType": registerType, "___cxa_throw": ___cxa_throw, "__emval_new_cstring": __emval_new_cstring, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "_emscripten_asm_const_1": _emscripten_asm_const_1, "__formatString": __formatString, "_emscripten_log": _emscripten_log, "_emscripten_asm_const_0": _emscripten_asm_const_0, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_id=env.nullFunc_id;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_id=env.invoke_id;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var __emval_call_void_method=env.__emval_call_void_method;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var upcastPointer=env.upcastPointer;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ClassHandle=env.ClassHandle;
  var getShiftFromSize=env.getShiftFromSize;
  var __emval_get_property=env.__emval_get_property;
  var __addDays=env.__addDays;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var _sysconf=env._sysconf;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var __embind_register_std_string=env.__embind_register_std_string;
  var __emval_get_global=env.__emval_get_global;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var __emscripten_traverse_stack=env.__emscripten_traverse_stack;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var flushPendingDeletes=env.flushPendingDeletes;
  var makeClassHandle=env.makeClassHandle;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var __isLeapYear=env.__isLeapYear;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var __emval_allocateDestructors=env.__emval_allocateDestructors;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var init_ClassHandle=env.init_ClassHandle;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall140=env.___syscall140;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var craftEmvalAllocator=env.craftEmvalAllocator;
  var requireHandle=env.requireHandle;
  var RegisteredClass=env.RegisteredClass;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var __embind_register_emval=env.__embind_register_emval;
  var __emval_as=env.__emval_as;
  var ___setErrNo=env.___setErrNo;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var createNamedFunction=env.createNamedFunction;
  var validateThis=env.validateThis;
  var embind_init_charCodes=env.embind_init_charCodes;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var init_embind=env.init_embind;
  var ClassHandle_clone=env.ClassHandle_clone;
  var __emval_addMethodCaller=env.__emval_addMethodCaller;
  var heap32VectorToArray=env.heap32VectorToArray;
  var __emval_lookupTypes=env.__emval_lookupTypes;
  var __emval_call_method=env.__emval_call_method;
  var __emval_run_destructors=env.__emval_run_destructors;
  var ClassHandle_delete=env.ClassHandle_delete;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var ___syscall6=env.___syscall6;
  var ensureOverloadTable=env.ensureOverloadTable;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var replacePublicSymbol=env.replacePublicSymbol;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var __embind_register_class=env.__embind_register_class;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var ___syscall54=env.___syscall54;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __emval_take_value=env.__emval_take_value;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var getTypeName=env.getTypeName;
  var _strftime=env._strftime;
  var __embind_register_class_function=env.__embind_register_class_function;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var runDestructors=env.runDestructors;
  var requireRegisteredType=env.requireRegisteredType;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var __emval_set_property=env.__emval_set_property;
  var _pthread_setspecific=env._pthread_setspecific;
  var init_emval=env.init_emval;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var __emval_new_object=env.__emval_new_object;
  var __embind_register_class_property=env.__embind_register_class_property;
  var exposePublicSymbol=env.exposePublicSymbol;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var __emval_get_method_caller=env.__emval_get_method_caller;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var ___lock=env.___lock;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var getInheritedInstance=env.getInheritedInstance;
  var _emscripten_get_callstack_js=env._emscripten_get_callstack_js;
  var __emval_typeof=env.__emval_typeof;
  var setDelayFunction=env.setDelayFunction;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var __embind_register_void=env.__embind_register_void;
  var _strftime_l=env._strftime_l;
  var __reallyNegative=env.__reallyNegative;
  var __emval_register=env.__emval_register;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var getStringOrSymbol=env.getStringOrSymbol;
  var _embind_repr=env._embind_repr;
  var __emval_incref=env.__emval_incref;
  var RegisteredPointer=env.RegisteredPointer;
  var __arraySum=env.__arraySum;
  var readLatin1String=env.readLatin1String;
  var _emscripten_log_js=env._emscripten_log_js;
  var _pthread_self=env._pthread_self;
  var getBasestPointer=env.getBasestPointer;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var __embind_register_float=env.__embind_register_float;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var __emval_new=env.__emval_new;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var emval_get_global=env.emval_get_global;
  var genericPointerToWireType=env.genericPointerToWireType;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var __emval_new_cstring=env.__emval_new_cstring;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var _emscripten_asm_const_1=env._emscripten_asm_const_1;
  var __formatString=env.__formatString;
  var _emscripten_log=env._emscripten_log;
  var _emscripten_asm_const_0=env._emscripten_asm_const_0;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _h264bsdProcessBlock($data,$qp,$skip,$coeffMap) {
 $data = $data|0;
 $qp = $qp|0;
 $skip = $skip|0;
 $coeffMap = $coeffMap|0;
 var $$0 = 0, $$017 = 0, $$phi$trans$insert = 0, $$phi$trans$insert12 = 0, $$phi$trans$insert14 = 0, $$pre = 0, $$pre11 = 0, $$pre13 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (61722 + ($qp)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (61774 + ($qp)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (2952 + (($5*12)|0)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << $2;
 $9 = (((2952 + (($5*12)|0)|0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << $2;
 $12 = (((2952 + (($5*12)|0)|0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << $2;
 $15 = ($skip|0)==(0);
 if ($15) {
  $16 = HEAP32[$data>>2]|0;
  $17 = Math_imul($16, $8)|0;
  HEAP32[$data>>2] = $17;
 }
 $18 = $coeffMap & 65436;
 $19 = ($18|0)==(0);
 L4: do {
  if ($19) {
   $154 = $coeffMap & 98;
   $155 = ($154|0)==(0);
   if (!($155)) {
    $176 = ((($data)) + 4|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = Math_imul($177, $11)|0;
    $179 = ((($data)) + 20|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = Math_imul($180, $8)|0;
    $182 = ((($data)) + 8|0);
    $183 = ((($data)) + 24|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = Math_imul($184, $11)|0;
    $186 = ((($data)) + 12|0);
    $187 = HEAP32[$data>>2]|0;
    $188 = (($181) + ($187))|0;
    $189 = (($187) - ($181))|0;
    $190 = $178 >> 1;
    $191 = (($190) - ($185))|0;
    $192 = $185 >> 1;
    $193 = (($178) + ($192))|0;
    $194 = (($188) + 32)|0;
    $195 = (($194) + ($193))|0;
    $196 = $195 >> 6;
    HEAP32[$data>>2] = $196;
    $197 = (($189) + 32)|0;
    $198 = (($197) + ($191))|0;
    $199 = $198 >> 6;
    HEAP32[$176>>2] = $199;
    $200 = (($197) - ($191))|0;
    $201 = $200 >> 6;
    HEAP32[$182>>2] = $201;
    $202 = (($194) - ($193))|0;
    $203 = $202 >> 6;
    HEAP32[$186>>2] = $203;
    $204 = ((($data)) + 48|0);
    HEAP32[$204>>2] = $196;
    $205 = ((($data)) + 32|0);
    HEAP32[$205>>2] = $196;
    $206 = ((($data)) + 16|0);
    HEAP32[$206>>2] = $196;
    $207 = ((($data)) + 52|0);
    HEAP32[$207>>2] = $199;
    $208 = ((($data)) + 36|0);
    HEAP32[$208>>2] = $199;
    HEAP32[$179>>2] = $199;
    $209 = ((($data)) + 56|0);
    HEAP32[$209>>2] = $201;
    $210 = ((($data)) + 40|0);
    HEAP32[$210>>2] = $201;
    HEAP32[$183>>2] = $201;
    $211 = ((($data)) + 60|0);
    HEAP32[$211>>2] = $203;
    $212 = ((($data)) + 44|0);
    HEAP32[$212>>2] = $203;
    $213 = ((($data)) + 28|0);
    HEAP32[$213>>2] = $203;
    $214 = (($196) + 512)|0;
    $215 = (($199) + 512)|0;
    $216 = $214 | $215;
    $217 = (($201) + 512)|0;
    $218 = $216 | $217;
    $219 = (($203) + 512)|0;
    $220 = $218 | $219;
    $221 = ($220>>>0)>(1023);
    if ($221) {
     $$0 = 1;
    } else {
     break;
    }
    return ($$0|0);
   }
   $156 = HEAP32[$data>>2]|0;
   $157 = (($156) + 32)|0;
   $158 = $157 >> 6;
   $159 = (($158) + 512)|0;
   $160 = ($159>>>0)>(1023);
   if ($160) {
    $$0 = 1;
    return ($$0|0);
   } else {
    $161 = ((($data)) + 60|0);
    HEAP32[$161>>2] = $158;
    $162 = ((($data)) + 56|0);
    HEAP32[$162>>2] = $158;
    $163 = ((($data)) + 52|0);
    HEAP32[$163>>2] = $158;
    $164 = ((($data)) + 48|0);
    HEAP32[$164>>2] = $158;
    $165 = ((($data)) + 44|0);
    HEAP32[$165>>2] = $158;
    $166 = ((($data)) + 40|0);
    HEAP32[$166>>2] = $158;
    $167 = ((($data)) + 36|0);
    HEAP32[$167>>2] = $158;
    $168 = ((($data)) + 32|0);
    HEAP32[$168>>2] = $158;
    $169 = ((($data)) + 28|0);
    HEAP32[$169>>2] = $158;
    $170 = ((($data)) + 24|0);
    HEAP32[$170>>2] = $158;
    $171 = ((($data)) + 20|0);
    HEAP32[$171>>2] = $158;
    $172 = ((($data)) + 16|0);
    HEAP32[$172>>2] = $158;
    $173 = ((($data)) + 12|0);
    HEAP32[$173>>2] = $158;
    $174 = ((($data)) + 8|0);
    HEAP32[$174>>2] = $158;
    $175 = ((($data)) + 4|0);
    HEAP32[$175>>2] = $158;
    HEAP32[$data>>2] = $158;
    break;
   }
  } else {
   $20 = ((($data)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($data)) + 56|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($data)) + 60|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = Math_imul($21, $11)|0;
   $27 = Math_imul($23, $11)|0;
   HEAP32[$22>>2] = $27;
   $28 = Math_imul($25, $14)|0;
   HEAP32[$24>>2] = $28;
   $29 = ((($data)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($data)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($data)) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = Math_imul($30, $11)|0;
   $36 = Math_imul($32, $8)|0;
   $37 = Math_imul($34, $14)|0;
   $38 = ((($data)) + 32|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($data)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($data)) + 24|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = Math_imul($39, $11)|0;
   $45 = Math_imul($41, $8)|0;
   $46 = Math_imul($43, $11)|0;
   $47 = ((($data)) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($data)) + 48|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($data)) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = Math_imul($48, $11)|0;
   $54 = Math_imul($50, $14)|0;
   $55 = Math_imul($52, $11)|0;
   $56 = ((($data)) + 40|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($data)) + 44|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($data)) + 52|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = Math_imul($57, $14)|0;
   $63 = Math_imul($59, $8)|0;
   $64 = Math_imul($61, $11)|0;
   $65 = HEAP32[$data>>2]|0;
   $66 = (($36) + ($65))|0;
   $67 = (($65) - ($36))|0;
   $68 = $26 >> 1;
   $69 = (($68) - ($46))|0;
   $70 = $46 >> 1;
   $71 = (($70) + ($26))|0;
   $72 = (($71) + ($66))|0;
   HEAP32[$data>>2] = $72;
   $73 = (($69) + ($67))|0;
   HEAP32[$20>>2] = $73;
   $74 = (($67) - ($69))|0;
   HEAP32[$29>>2] = $74;
   $75 = (($66) - ($71))|0;
   HEAP32[$40>>2] = $75;
   $76 = ((($data)) + 24|0);
   $77 = (($53) + ($35))|0;
   $78 = (($35) - ($53))|0;
   $79 = ((($data)) + 20|0);
   $80 = $37 >> 1;
   $81 = ((($data)) + 28|0);
   $82 = (($80) - ($54))|0;
   $83 = $54 >> 1;
   $84 = (($83) + ($37))|0;
   $85 = (($84) + ($77))|0;
   HEAP32[$33>>2] = $85;
   $86 = (($82) + ($78))|0;
   HEAP32[$79>>2] = $86;
   $87 = (($78) - ($82))|0;
   HEAP32[$76>>2] = $87;
   $88 = (($77) - ($84))|0;
   HEAP32[$81>>2] = $88;
   $89 = ((($data)) + 32|0);
   $90 = ((($data)) + 40|0);
   $91 = (($63) + ($45))|0;
   $92 = (($45) - ($63))|0;
   $93 = ((($data)) + 36|0);
   $94 = $44 >> 1;
   $95 = ((($data)) + 44|0);
   $96 = (($94) - ($64))|0;
   $97 = $64 >> 1;
   $98 = (($97) + ($44))|0;
   $99 = (($98) + ($91))|0;
   HEAP32[$89>>2] = $99;
   $100 = (($96) + ($92))|0;
   HEAP32[$93>>2] = $100;
   $101 = (($92) - ($96))|0;
   HEAP32[$90>>2] = $101;
   $102 = (($91) - ($98))|0;
   HEAP32[$95>>2] = $102;
   $103 = ((($data)) + 48|0);
   $104 = ((($data)) + 56|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (($105) + ($55))|0;
   $107 = (($55) - ($105))|0;
   $108 = ((($data)) + 52|0);
   $109 = $62 >> 1;
   $110 = ((($data)) + 60|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($109) - ($111))|0;
   $113 = $111 >> 1;
   $114 = (($113) + ($62))|0;
   $115 = (($114) + ($106))|0;
   HEAP32[$103>>2] = $115;
   $116 = (($112) + ($107))|0;
   HEAP32[$108>>2] = $116;
   $117 = (($107) - ($112))|0;
   HEAP32[$104>>2] = $117;
   $118 = (($106) - ($114))|0;
   HEAP32[$110>>2] = $118;
   $$017 = $data;$120 = 3;$125 = $99;$126 = $72;$130 = $85;$133 = $115;
   while(1) {
    $123 = ((($$017)) + 32|0);
    $124 = (($125) + ($126))|0;
    $127 = (($126) - ($125))|0;
    $128 = ((($$017)) + 16|0);
    $129 = $130 >> 1;
    $131 = ((($$017)) + 48|0);
    $132 = (($129) - ($133))|0;
    $134 = $133 >> 1;
    $135 = (($134) + ($130))|0;
    $136 = (($124) + 32)|0;
    $137 = (($136) + ($135))|0;
    $138 = $137 >> 6;
    HEAP32[$$017>>2] = $138;
    $139 = (($127) + 32)|0;
    $140 = (($139) + ($132))|0;
    $141 = $140 >> 6;
    HEAP32[$128>>2] = $141;
    $142 = (($139) - ($132))|0;
    $143 = $142 >> 6;
    HEAP32[$123>>2] = $143;
    $144 = (($136) - ($135))|0;
    $145 = $144 >> 6;
    HEAP32[$131>>2] = $145;
    $146 = (($138) + 512)|0;
    $147 = (($141) + 512)|0;
    $148 = $146 | $147;
    $149 = ($148>>>0)>(1023);
    if ($149) {
     $$0 = 1;
     label = 14;
     break;
    }
    $150 = (($143) + 512)|0;
    $151 = (($145) + 512)|0;
    $152 = $150 | $151;
    $153 = ($152>>>0)>(1023);
    if ($153) {
     $$0 = 1;
     label = 14;
     break;
    }
    $119 = ((($$017)) + 4|0);
    $121 = ($120|0)==(0);
    if ($121) {
     break L4;
    }
    $122 = (($120) + -1)|0;
    $$pre = HEAP32[$119>>2]|0;
    $$phi$trans$insert = ((($$017)) + 36|0);
    $$pre11 = HEAP32[$$phi$trans$insert>>2]|0;
    $$phi$trans$insert12 = ((($$017)) + 20|0);
    $$pre13 = HEAP32[$$phi$trans$insert12>>2]|0;
    $$phi$trans$insert14 = ((($$017)) + 52|0);
    $$pre15 = HEAP32[$$phi$trans$insert14>>2]|0;
    $$017 = $119;$120 = $122;$125 = $$pre11;$126 = $$pre;$130 = $$pre13;$133 = $$pre15;
   }
   if ((label|0) == 14) {
    return ($$0|0);
   }
  }
 } while(0);
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdProcessLumaDc($data,$qp) {
 $data = $data|0;
 $qp = $qp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (61774 + ($qp)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = (61722 + ($qp)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($data)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($data)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($data)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($data)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($data)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($data)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($data)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($data)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($data)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($data)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($data)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($data)) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$data>>2]|0;
 $29 = (($7) + ($28))|0;
 $30 = (($28) - ($7))|0;
 $31 = ((($data)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) - ($15))|0;
 $34 = (($15) + ($32))|0;
 $35 = (($34) + ($29))|0;
 HEAP32[$data>>2] = $35;
 $36 = (($33) + ($30))|0;
 HEAP32[$31>>2] = $36;
 $37 = (($30) - ($33))|0;
 HEAP32[$4>>2] = $37;
 $38 = (($29) - ($34))|0;
 HEAP32[$12>>2] = $38;
 $39 = ((($data)) + 24|0);
 $40 = (($17) + ($5))|0;
 $41 = (($5) - ($17))|0;
 $42 = ((($data)) + 20|0);
 $43 = ((($data)) + 28|0);
 $44 = (($9) - ($19))|0;
 $45 = (($19) + ($9))|0;
 $46 = (($45) + ($40))|0;
 HEAP32[$8>>2] = $46;
 $47 = (($44) + ($41))|0;
 HEAP32[$42>>2] = $47;
 $48 = (($41) - ($44))|0;
 HEAP32[$39>>2] = $48;
 $49 = (($40) - ($45))|0;
 HEAP32[$43>>2] = $49;
 $50 = ((($data)) + 32|0);
 $51 = ((($data)) + 40|0);
 $52 = (($25) + ($13))|0;
 $53 = (($13) - ($25))|0;
 $54 = ((($data)) + 36|0);
 $55 = ((($data)) + 44|0);
 $56 = (($11) - ($27))|0;
 $57 = (($27) + ($11))|0;
 $58 = (($57) + ($52))|0;
 HEAP32[$50>>2] = $58;
 $59 = (($56) + ($53))|0;
 HEAP32[$54>>2] = $59;
 $60 = (($53) - ($56))|0;
 HEAP32[$51>>2] = $60;
 $61 = (($52) - ($57))|0;
 HEAP32[$55>>2] = $61;
 $62 = ((($data)) + 48|0);
 $63 = ((($data)) + 56|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + ($21))|0;
 $66 = (($21) - ($64))|0;
 $67 = ((($data)) + 52|0);
 $68 = ((($data)) + 60|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($23) - ($69))|0;
 $71 = (($69) + ($23))|0;
 $72 = (($71) + ($65))|0;
 HEAP32[$62>>2] = $72;
 $73 = (($70) + ($66))|0;
 HEAP32[$67>>2] = $73;
 $74 = (($66) - ($70))|0;
 HEAP32[$63>>2] = $74;
 $75 = (($65) - ($71))|0;
 HEAP32[$68>>2] = $75;
 $76 = $1&255;
 $77 = $3&255;
 $78 = (2952 + (($76*12)|0)|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($qp>>>0)>(11);
 if ($80) {
  $81 = (($77) + -2)|0;
  $82 = $79 << $81;
  $83 = (($58) + ($35))|0;
  $84 = (($35) - ($58))|0;
  $85 = (($46) - ($72))|0;
  $86 = (($72) + ($46))|0;
  $87 = (($86) + ($83))|0;
  $88 = Math_imul($87, $82)|0;
  HEAP32[$data>>2] = $88;
  $89 = (($85) + ($84))|0;
  $90 = Math_imul($89, $82)|0;
  HEAP32[$8>>2] = $90;
  $91 = (($84) - ($85))|0;
  $92 = Math_imul($91, $82)|0;
  HEAP32[$10>>2] = $92;
  $93 = (($83) - ($86))|0;
  $94 = Math_imul($93, $82)|0;
  HEAP32[$18>>2] = $94;
  $95 = ((($data)) + 36|0);
  $96 = (($59) + ($36))|0;
  $97 = (($36) - ($59))|0;
  $98 = ((($data)) + 20|0);
  $99 = ((($data)) + 52|0);
  $100 = (($47) - ($73))|0;
  $101 = (($73) + ($47))|0;
  $102 = (($101) + ($96))|0;
  $103 = Math_imul($102, $82)|0;
  HEAP32[$31>>2] = $103;
  $104 = (($100) + ($97))|0;
  $105 = Math_imul($104, $82)|0;
  HEAP32[$98>>2] = $105;
  $106 = (($97) - ($100))|0;
  $107 = Math_imul($106, $82)|0;
  HEAP32[$95>>2] = $107;
  $108 = (($96) - ($101))|0;
  $109 = Math_imul($108, $82)|0;
  HEAP32[$99>>2] = $109;
  $110 = ((($data)) + 8|0);
  $111 = ((($data)) + 40|0);
  $112 = (($60) + ($37))|0;
  $113 = (($37) - ($60))|0;
  $114 = ((($data)) + 24|0);
  $115 = ((($data)) + 56|0);
  $116 = (($48) - ($74))|0;
  $117 = (($74) + ($48))|0;
  $118 = (($117) + ($112))|0;
  $119 = Math_imul($118, $82)|0;
  HEAP32[$110>>2] = $119;
  $120 = (($116) + ($113))|0;
  $121 = Math_imul($120, $82)|0;
  HEAP32[$114>>2] = $121;
  $122 = (($113) - ($116))|0;
  $123 = Math_imul($122, $82)|0;
  HEAP32[$111>>2] = $123;
  $124 = (($112) - ($117))|0;
  $125 = Math_imul($124, $82)|0;
  HEAP32[$115>>2] = $125;
  $126 = ((($data)) + 12|0);
  $127 = ((($data)) + 44|0);
  $128 = (($61) + ($38))|0;
  $129 = (($38) - ($61))|0;
  $130 = ((($data)) + 28|0);
  $131 = ((($data)) + 60|0);
  $132 = (($49) - ($75))|0;
  $133 = (($75) + ($49))|0;
  $134 = (($133) + ($128))|0;
  $135 = Math_imul($134, $82)|0;
  HEAP32[$126>>2] = $135;
  $136 = (($132) + ($129))|0;
  $137 = Math_imul($136, $82)|0;
  HEAP32[$130>>2] = $137;
  $138 = (($129) - ($132))|0;
  $139 = Math_imul($138, $82)|0;
  HEAP32[$127>>2] = $139;
  $140 = (($128) - ($133))|0;
  $141 = Math_imul($140, $82)|0;
  HEAP32[$131>>2] = $141;
  return;
 } else {
  $142 = (($qp) + -6)|0;
  $143 = ($142>>>0)<(6);
  $144 = $143 ? 1 : 2;
  $145 = (2 - ($77))|0;
  $146 = (($58) + ($35))|0;
  $147 = (($35) - ($58))|0;
  $148 = (($46) - ($72))|0;
  $149 = (($72) + ($46))|0;
  $150 = (($149) + ($146))|0;
  $151 = Math_imul($150, $79)|0;
  $152 = (($151) + ($144))|0;
  $153 = $152 >> $145;
  HEAP32[$data>>2] = $153;
  $154 = (($148) + ($147))|0;
  $155 = Math_imul($154, $79)|0;
  $156 = (($155) + ($144))|0;
  $157 = $156 >> $145;
  HEAP32[$8>>2] = $157;
  $158 = (($147) - ($148))|0;
  $159 = Math_imul($158, $79)|0;
  $160 = (($159) + ($144))|0;
  $161 = $160 >> $145;
  HEAP32[$10>>2] = $161;
  $162 = (($146) - ($149))|0;
  $163 = Math_imul($162, $79)|0;
  $164 = (($163) + ($144))|0;
  $165 = $164 >> $145;
  HEAP32[$18>>2] = $165;
  $166 = ((($data)) + 36|0);
  $167 = (($59) + ($36))|0;
  $168 = (($36) - ($59))|0;
  $169 = ((($data)) + 20|0);
  $170 = ((($data)) + 52|0);
  $171 = (($47) - ($73))|0;
  $172 = (($73) + ($47))|0;
  $173 = (($172) + ($167))|0;
  $174 = Math_imul($173, $79)|0;
  $175 = (($174) + ($144))|0;
  $176 = $175 >> $145;
  HEAP32[$31>>2] = $176;
  $177 = (($171) + ($168))|0;
  $178 = Math_imul($177, $79)|0;
  $179 = (($178) + ($144))|0;
  $180 = $179 >> $145;
  HEAP32[$169>>2] = $180;
  $181 = (($168) - ($171))|0;
  $182 = Math_imul($181, $79)|0;
  $183 = (($182) + ($144))|0;
  $184 = $183 >> $145;
  HEAP32[$166>>2] = $184;
  $185 = (($167) - ($172))|0;
  $186 = Math_imul($185, $79)|0;
  $187 = (($186) + ($144))|0;
  $188 = $187 >> $145;
  HEAP32[$170>>2] = $188;
  $189 = ((($data)) + 8|0);
  $190 = ((($data)) + 40|0);
  $191 = (($60) + ($37))|0;
  $192 = (($37) - ($60))|0;
  $193 = ((($data)) + 24|0);
  $194 = ((($data)) + 56|0);
  $195 = (($48) - ($74))|0;
  $196 = (($74) + ($48))|0;
  $197 = (($196) + ($191))|0;
  $198 = Math_imul($197, $79)|0;
  $199 = (($198) + ($144))|0;
  $200 = $199 >> $145;
  HEAP32[$189>>2] = $200;
  $201 = (($195) + ($192))|0;
  $202 = Math_imul($201, $79)|0;
  $203 = (($202) + ($144))|0;
  $204 = $203 >> $145;
  HEAP32[$193>>2] = $204;
  $205 = (($192) - ($195))|0;
  $206 = Math_imul($205, $79)|0;
  $207 = (($206) + ($144))|0;
  $208 = $207 >> $145;
  HEAP32[$190>>2] = $208;
  $209 = (($191) - ($196))|0;
  $210 = Math_imul($209, $79)|0;
  $211 = (($210) + ($144))|0;
  $212 = $211 >> $145;
  HEAP32[$194>>2] = $212;
  $213 = ((($data)) + 12|0);
  $214 = ((($data)) + 44|0);
  $215 = (($61) + ($38))|0;
  $216 = (($38) - ($61))|0;
  $217 = ((($data)) + 28|0);
  $218 = ((($data)) + 60|0);
  $219 = (($49) - ($75))|0;
  $220 = (($75) + ($49))|0;
  $221 = (($220) + ($215))|0;
  $222 = Math_imul($221, $79)|0;
  $223 = (($222) + ($144))|0;
  $224 = $223 >> $145;
  HEAP32[$213>>2] = $224;
  $225 = (($219) + ($216))|0;
  $226 = Math_imul($225, $79)|0;
  $227 = (($226) + ($144))|0;
  $228 = $227 >> $145;
  HEAP32[$217>>2] = $228;
  $229 = (($216) - ($219))|0;
  $230 = Math_imul($229, $79)|0;
  $231 = (($230) + ($144))|0;
  $232 = $231 >> $145;
  HEAP32[$214>>2] = $232;
  $233 = (($215) - ($220))|0;
  $234 = Math_imul($233, $79)|0;
  $235 = (($234) + ($144))|0;
  $236 = $235 >> $145;
  HEAP32[$218>>2] = $236;
  return;
 }
}
function _h264bsdProcessChromaDc($data,$qp) {
 $data = $data|0;
 $qp = $qp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $levScale$0 = 0, $levShift$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (61774 + ($qp)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (2952 + (($2*12)|0)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($qp>>>0)>(5);
 if ($5) {
  $6 = (61722 + ($qp)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = (($8) + -1)|0;
  $10 = $4 << $9;
  $levScale$0 = $10;$levShift$0 = 0;
 } else {
  $levScale$0 = $4;$levShift$0 = 1;
 }
 $11 = HEAP32[$data>>2]|0;
 $12 = ((($data)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($11))|0;
 $15 = (($11) - ($13))|0;
 $16 = ((($data)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($data)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = (($19) + ($17))|0;
 $22 = (($21) + ($14))|0;
 $23 = Math_imul($22, $levScale$0)|0;
 $24 = $23 >> $levShift$0;
 HEAP32[$data>>2] = $24;
 $25 = (($14) - ($21))|0;
 $26 = Math_imul($25, $levScale$0)|0;
 $27 = $26 >> $levShift$0;
 HEAP32[$16>>2] = $27;
 $28 = (($20) + ($15))|0;
 $29 = Math_imul($28, $levScale$0)|0;
 $30 = $29 >> $levShift$0;
 HEAP32[$12>>2] = $30;
 $31 = (($15) - ($20))|0;
 $32 = Math_imul($31, $levScale$0)|0;
 $33 = $32 >> $levShift$0;
 HEAP32[$18>>2] = $33;
 $34 = ((($data)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($data)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + ($35))|0;
 $39 = (($35) - ($37))|0;
 $40 = ((($data)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($data)) + 28|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) - ($43))|0;
 $45 = (($43) + ($41))|0;
 $46 = (($45) + ($38))|0;
 $47 = Math_imul($46, $levScale$0)|0;
 $48 = $47 >> $levShift$0;
 HEAP32[$34>>2] = $48;
 $49 = (($38) - ($45))|0;
 $50 = Math_imul($49, $levScale$0)|0;
 $51 = $50 >> $levShift$0;
 HEAP32[$40>>2] = $51;
 $52 = (($44) + ($39))|0;
 $53 = Math_imul($52, $levScale$0)|0;
 $54 = $53 >> $levShift$0;
 HEAP32[$36>>2] = $54;
 $55 = (($39) - ($44))|0;
 $56 = Math_imul($55, $levScale$0)|0;
 $57 = $56 >> $levShift$0;
 HEAP32[$42>>2] = $57;
 return;
}
function _h264bsdCountLeadingZeros($value,$length) {
 $value = $value|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $mask$02 = 0, $not$ = 0, $zeros$0$lcssa = 0, $zeros$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($length) + -1)|0;
 $1 = 1 << $0;
 $2 = $1 & $value;
 $3 = ($2|0)==(0);
 if ($3) {
  $mask$02 = $1;$zeros$01 = 0;
 } else {
  $zeros$0$lcssa = 0;
  return ($zeros$0$lcssa|0);
 }
 while(1) {
  $4 = (($zeros$01) + 1)|0;
  $5 = $mask$02 >>> 1;
  $6 = $5 & $value;
  $7 = ($6|0)==(0);
  $not$ = ($5|0)!=(0);
  $8 = $not$ & $7;
  if ($8) {
   $mask$02 = $5;$zeros$01 = $4;
  } else {
   $zeros$0$lcssa = $4;
   break;
  }
 }
 return ($zeros$0$lcssa|0);
}
function _h264bsdRbspTrailingBits($pStrmData) {
 $pStrmData = $pStrmData|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStrmData)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (8 - ($1))|0;
 $3 = (_h264bsdGetBits($pStrmData,$2)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = (($2) + -1)|0;
 $6 = (3024 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $not$ = ($3|0)!=($7|0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _h264bsdMoreRbspData($pStrmData) {
 $pStrmData = $pStrmData|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStrmData)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 3;
 $3 = ((($pStrmData)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ($2|0)==($4|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ($5>>>0)>(8);
 if ($7) {
  $$0 = 1;
  return ($$0|0);
 } else {
  $8 = (_h264bsdShowBits32($pStrmData)|0);
  $9 = (32 - ($5))|0;
  $10 = $8 >>> $9;
  $11 = (($5) + -1)|0;
  $12 = 1 << $11;
  $not$ = ($10|0)!=($12|0);
  $$ = $not$&1;
  return ($$|0);
 }
 return (0)|0;
}
function _h264bsdNextMbAddress($pSliceGroupMap,$picSizeInMbs,$currMbAddr) {
 $pSliceGroupMap = $pSliceGroupMap|0;
 $picSizeInMbs = $picSizeInMbs|0;
 $currMbAddr = $currMbAddr|0;
 var $$ = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i$0$sink = 0, $tmp$0 = 0, $tmp$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pSliceGroupMap) + ($currMbAddr<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $i$0$sink = $currMbAddr;
 while(1) {
  $2 = (($i$0$sink) + 1)|0;
  $3 = ($2>>>0)<($picSizeInMbs>>>0);
  if (!($3)) {
   $$lcssa = $2;
   break;
  }
  $tmp$0$in = (($pSliceGroupMap) + ($2<<2)|0);
  $tmp$0 = HEAP32[$tmp$0$in>>2]|0;
  $4 = ($tmp$0|0)==($1|0);
  if ($4) {
   $$lcssa = $2;
   break;
  } else {
   $i$0$sink = $2;
  }
 }
 $5 = ($$lcssa|0)==($picSizeInMbs|0);
 $$ = $5 ? 0 : $$lcssa;
 return ($$|0);
}
function _h264bsdSetCurrImageMbPointers($image,$mbNum) {
 $image = $image|0;
 $mbNum = $mbNum|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($image)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($image)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($mbNum>>>0) % ($1>>>0))&-1;
 $5 = (($mbNum) - ($4))|0;
 $6 = Math_imul($3, $1)|0;
 $7 = HEAP32[$image>>2]|0;
 $8 = $4 << 4;
 $9 = $5 << 8;
 $$sum = (($9) + ($8))|0;
 $10 = (($7) + ($$sum)|0);
 $11 = ((($image)) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = $6 << 8;
 $13 = $5 << 6;
 $14 = $4 << 3;
 $$sum1 = (($14) + ($12))|0;
 $$sum2 = (($$sum1) + ($13))|0;
 $15 = (($7) + ($$sum2)|0);
 $16 = ((($image)) + 16|0);
 HEAP32[$16>>2] = $15;
 $17 = $6 << 6;
 $$sum3 = (($$sum2) + ($17))|0;
 $18 = (($7) + ($$sum3)|0);
 $19 = ((($image)) + 20|0);
 HEAP32[$19>>2] = $18;
 return;
}
function _clip($x,$y,$z) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)<($x|0);
 $1 = ($z|0)>($y|0);
 $2 = $1 ? $y : $z;
 $3 = $0 ? $x : $2;
 return ($3|0);
}
function _h264bsdExtractNalUnit($pByteStream,$len,$pStrmData,$readBytes) {
 $pByteStream = $pByteStream|0;
 $len = $len|0;
 $pStrmData = $pStrmData|0;
 $readBytes = $readBytes|0;
 var $$0 = 0, $$lcssa139 = 0, $$lcssa141 = 0, $$lcssa150 = 0, $$lcssa152 = 0, $$neg = 0, $$neg34 = 0, $$neg34$lcssa = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $8 = 0, $9 = 0, $byteCount$1 = 0, $byteCount$1$lcssa = 0, $hasEmulation$0 = 0, $hasEmulation$1 = 0, $hasEmulation$1$lcssa = 0, $hasEmulation$1$lcssa148 = 0, $hasEmulation$2 = 0, $i$0 = 0, $i$0$ph = 0, $initByteCount$0 = 0, $invalidStream$0 = 0, $invalidStream$0$lcssa = 0, $invalidStream$2 = 0, $invalidStream$2$lcssa = 0, $invalidStream$3 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $readPtr$1 = 0, $readPtr$2 = 0, $readPtr$2$lcssa = 0, $readPtr$2$lcssa135 = 0, $readPtr$2$ph = 0, $readPtr$2137 = 0, $writePtr$0$ph = 0, $writePtr$0$ph$lcssa = 0, $zeroCount$0$be = 0, $zeroCount$033 = 0, $zeroCount$1 = 0, $zeroCount$1$ = 0, $zeroCount$1$$lcssa = 0, $zeroCount$3 = 0, $zeroCount$3$lcssa = 0, $zeroCount$4 = 0, $zeroCount$5 = 0, $zeroCount$5$ph = 0;
 var $zeroCount$538 = 0, $zeroCount$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len>>>0)>(3);
 do {
  if ($0) {
   $1 = HEAP8[$pByteStream>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $3 = ((($pByteStream)) + 1|0);
    $4 = HEAP8[$3>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = ((($pByteStream)) + 2|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ($7&255)<(2);
     if ($8) {
      $9 = ((($pByteStream)) + 3|0);
      $$neg34 = -3;$10 = $7;$14 = 3;$17 = $9;$zeroCount$033 = 2;
      while(1) {
       $11 = ($10<<24>>24)==(0);
       if ($11) {
        $12 = (($zeroCount$033) + 1)|0;
        $zeroCount$0$be = $12;
       } else {
        $18 = ($10<<24>>24)==(1);
        $19 = ($zeroCount$033>>>0)>(1);
        $or$cond = $19 & $18;
        if ($or$cond) {
         $$lcssa150 = $14;$$lcssa152 = $17;$$neg34$lcssa = $$neg34;
         break;
        } else {
         $zeroCount$0$be = 0;
        }
       }
       $13 = (($14) + 1)|0;
       $15 = ($13|0)==($len|0);
       if ($15) {
        label = 6;
        break;
       }
       $$neg = $14 ^ -1;
       $16 = ((($17)) + 1|0);
       $$pre = HEAP8[$17>>0]|0;
       $$neg34 = $$neg;$10 = $$pre;$14 = $13;$17 = $16;$zeroCount$033 = $zeroCount$0$be;
      }
      if ((label|0) == 6) {
       HEAP32[$readBytes>>2] = $len;
       $$0 = 1;
       return ($$0|0);
      }
      $byteCount$1 = $$lcssa150;$hasEmulation$0 = 0;$invalidStream$0 = 0;$readPtr$1 = $$lcssa152;$zeroCount$1 = 0;
      while(1) {
       $20 = HEAP8[$readPtr$1>>0]|0;
       $21 = (($byteCount$1) + 1)|0;
       $22 = ($20<<24>>24)!=(0);
       $23 = $22&1;
       $24 = $23 ^ 1;
       $zeroCount$1$ = (($24) + ($zeroCount$1))|0;
       $25 = ($20<<24>>24)==(3);
       $26 = ($zeroCount$1$|0)==(2);
       $or$cond3 = $25 & $26;
       $hasEmulation$1 = $or$cond3 ? 1 : $hasEmulation$0;
       $27 = ($20<<24>>24)==(1);
       $28 = ($zeroCount$1$>>>0)>(1);
       $or$cond5 = $27 & $28;
       if ($or$cond5) {
        $byteCount$1$lcssa = $byteCount$1;$hasEmulation$1$lcssa = $hasEmulation$1;$invalidStream$0$lcssa = $invalidStream$0;$zeroCount$1$$lcssa = $zeroCount$1$;
        label = 14;
        break;
       }
       $35 = ((($readPtr$1)) + 1|0);
       $36 = ($zeroCount$1$>>>0)>(2);
       $zeroCount$3 = $22 ? 0 : $zeroCount$1$;
       $37 = $22 & $36;
       $invalidStream$2 = $37 ? 1 : $invalidStream$0;
       $38 = ($21|0)==($len|0);
       if ($38) {
        $hasEmulation$1$lcssa148 = $hasEmulation$1;$invalidStream$2$lcssa = $invalidStream$2;$zeroCount$3$lcssa = $zeroCount$3;
        label = 16;
        break;
       } else {
        $byteCount$1 = $21;$hasEmulation$0 = $hasEmulation$1;$invalidStream$0 = $invalidStream$2;$readPtr$1 = $35;$zeroCount$1 = $zeroCount$3;
       }
      }
      if ((label|0) == 14) {
       $29 = (($$neg34$lcssa) + ($byteCount$1$lcssa))|0;
       $30 = (($29) - ($zeroCount$1$$lcssa))|0;
       $31 = ((($pStrmData)) + 12|0);
       HEAP32[$31>>2] = $30;
       $32 = ($zeroCount$1$$lcssa>>>0)<(3);
       $33 = $32 ? $zeroCount$1$$lcssa : 3;
       $34 = (($zeroCount$1$$lcssa) - ($33))|0;
       $$pre$phiZ2D = $31;$49 = $30;$hasEmulation$2 = $hasEmulation$1$lcssa;$initByteCount$0 = $$lcssa150;$invalidStream$3 = $invalidStream$0$lcssa;$zeroCount$4 = $34;
       break;
      }
      else if ((label|0) == 16) {
       $39 = (($$neg34$lcssa) + ($len))|0;
       $40 = (($39) - ($zeroCount$3$lcssa))|0;
       $41 = ((($pStrmData)) + 12|0);
       HEAP32[$41>>2] = $40;
       $$pre$phiZ2D = $41;$49 = $40;$hasEmulation$2 = $hasEmulation$1$lcssa148;$initByteCount$0 = $$lcssa150;$invalidStream$3 = $invalidStream$2$lcssa;$zeroCount$4 = $zeroCount$3$lcssa;
       break;
      }
     } else {
      label = 17;
     }
    } else {
     label = 17;
    }
   } else {
    label = 17;
   }
  } else {
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  $42 = ((($pStrmData)) + 12|0);
  HEAP32[$42>>2] = $len;
  $$pre$phiZ2D = $42;$49 = $len;$hasEmulation$2 = 1;$initByteCount$0 = 0;$invalidStream$3 = 0;$zeroCount$4 = 0;
 }
 $43 = (($pByteStream) + ($initByteCount$0)|0);
 HEAP32[$pStrmData>>2] = $43;
 $44 = ((($pStrmData)) + 4|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($pStrmData)) + 8|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($pStrmData)) + 16|0);
 HEAP32[$46>>2] = 0;
 $47 = (($zeroCount$4) + ($initByteCount$0))|0;
 $48 = (($47) + ($49))|0;
 HEAP32[$readBytes>>2] = $48;
 $50 = ($invalidStream$3|0)==(0);
 if (!($50)) {
  $$0 = 1;
  return ($$0|0);
 }
 $51 = ($hasEmulation$2|0)==(0);
 if ($51) {
  $$0 = 0;
  return ($$0|0);
 }
 $52 = HEAP32[$$pre$phiZ2D>>2]|0;
 $i$0$ph = $52;$readPtr$2$ph = $43;$writePtr$0$ph = $43;$zeroCount$5$ph = 0;
 L32: while(1) {
  $i$0 = $i$0$ph;$readPtr$2 = $readPtr$2$ph;$zeroCount$5 = $zeroCount$5$ph;
  while(1) {
   $53 = (($i$0) + -1)|0;
   $54 = ($i$0|0)==(0);
   if ($54) {
    $readPtr$2$lcssa = $readPtr$2;$writePtr$0$ph$lcssa = $writePtr$0$ph;
    label = 29;
    break L32;
   }
   $55 = ($zeroCount$5|0)==(2);
   $56 = HEAP8[$readPtr$2>>0]|0;
   if (!($55)) {
    $63 = $56;$73 = $53;$readPtr$2137 = $readPtr$2;$zeroCount$538 = $zeroCount$5;
    break;
   }
   $57 = ($56<<24>>24)==(3);
   if (!($57)) {
    $$lcssa139 = $53;$$lcssa141 = $56;$readPtr$2$lcssa135 = $readPtr$2;
    label = 27;
    break;
   }
   $58 = ($53|0)==(0);
   if ($58) {
    $$0 = 1;
    label = 30;
    break L32;
   }
   $59 = ((($readPtr$2)) + 1|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = ($60&255)>(3);
   if ($61) {
    $$0 = 1;
    label = 30;
    break L32;
   } else {
    $i$0 = $53;$readPtr$2 = $59;$zeroCount$5 = 0;
   }
  }
  if ((label|0) == 27) {
   label = 0;
   $62 = ($$lcssa141&255)<(3);
   if ($62) {
    $$0 = 1;
    label = 30;
    break;
   } else {
    $63 = $$lcssa141;$73 = $$lcssa139;$readPtr$2137 = $readPtr$2$lcssa135;$zeroCount$538 = 2;
   }
  }
  $64 = ($63<<24>>24)==(0);
  $65 = (($zeroCount$538) + 1)|0;
  $zeroCount$6 = $64 ? $65 : 0;
  $66 = ((($readPtr$2137)) + 1|0);
  $67 = ((($writePtr$0$ph)) + 1|0);
  HEAP8[$writePtr$0$ph>>0] = $63;
  $i$0$ph = $73;$readPtr$2$ph = $66;$writePtr$0$ph = $67;$zeroCount$5$ph = $zeroCount$6;
 }
 if ((label|0) == 29) {
  $68 = $readPtr$2$lcssa;
  $69 = $writePtr$0$ph$lcssa;
  $70 = HEAP32[$$pre$phiZ2D>>2]|0;
  $71 = (($69) - ($68))|0;
  $72 = (($71) + ($70))|0;
  HEAP32[$$pre$phiZ2D>>2] = $72;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 30) {
  return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdDecodeSeqParamSet($pStrmData,$pSeqParamSet) {
 $pStrmData = $pStrmData|0;
 $pSeqParamSet = $pSeqParamSet|0;
 var $$ = 0, $$0 = 0, $$4 = 0, $$neg5 = 0, $$neg7 = 0, $$pre = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $maxPicSizeInMbs$0$i = 0, $tmp$0$i = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp;
 _H264SwDecMemset($pSeqParamSet,0,92);
 $0 = (_h264bsdGetBits($pStrmData,8)|0);
 $1 = ($0|0)==(-1);
 L1: do {
  if ($1) {
   $$0 = 1;
  } else {
   HEAP32[$pSeqParamSet>>2] = $0;
   (_h264bsdGetBits($pStrmData,1)|0);
   (_h264bsdGetBits($pStrmData,1)|0);
   $2 = (_h264bsdGetBits($pStrmData,1)|0);
   $3 = ($2|0)==(-1);
   if ($3) {
    $$0 = 1;
   } else {
    $4 = (_h264bsdGetBits($pStrmData,5)|0);
    $5 = ($4|0)==(-1);
    if ($5) {
     $$0 = 1;
    } else {
     $6 = (_h264bsdGetBits($pStrmData,8)|0);
     $7 = ($6|0)==(-1);
     if ($7) {
      $$0 = 1;
     } else {
      $8 = ((($pSeqParamSet)) + 4|0);
      HEAP32[$8>>2] = $6;
      $9 = ((($pSeqParamSet)) + 8|0);
      $10 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$9)|0);
      $11 = ($10|0)==(0);
      if ($11) {
       $12 = HEAP32[$9>>2]|0;
       $13 = ($12>>>0)>(31);
       if ($13) {
        $$0 = 1;
       } else {
        $14 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
        $15 = ($14|0)==(0);
        if ($15) {
         $16 = HEAP32[$value>>2]|0;
         $17 = ($16>>>0)>(12);
         if ($17) {
          $$0 = 1;
         } else {
          $18 = (($16) + 4)|0;
          $19 = 1 << $18;
          $20 = ((($pSeqParamSet)) + 12|0);
          HEAP32[$20>>2] = $19;
          $21 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
          $22 = ($21|0)==(0);
          if ($22) {
           $23 = HEAP32[$value>>2]|0;
           $24 = ($23>>>0)>(2);
           if ($24) {
            $$0 = 1;
           } else {
            $25 = ((($pSeqParamSet)) + 16|0);
            HEAP32[$25>>2] = $23;
            L12: do {
             switch ($23|0) {
             case 0:  {
              $26 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
              $27 = ($26|0)==(0);
              if (!($27)) {
               $$0 = $26;
               break L1;
              }
              $28 = HEAP32[$value>>2]|0;
              $29 = ($28>>>0)>(12);
              if ($29) {
               $$0 = 1;
               break L1;
              }
              $30 = (($28) + 4)|0;
              $31 = 1 << $30;
              $32 = ((($pSeqParamSet)) + 20|0);
              HEAP32[$32>>2] = $31;
              break;
             }
             case 1:  {
              $33 = (_h264bsdGetBits($pStrmData,1)|0);
              $34 = ($33|0)==(-1);
              if ($34) {
               $$0 = 1;
               break L1;
              }
              $35 = ($33|0)==(1);
              $36 = $35&1;
              $37 = ((($pSeqParamSet)) + 24|0);
              HEAP32[$37>>2] = $36;
              $38 = ((($pSeqParamSet)) + 28|0);
              $39 = (_h264bsdDecodeExpGolombSigned($pStrmData,$38)|0);
              $40 = ($39|0)==(0);
              if (!($40)) {
               $$0 = $39;
               break L1;
              }
              $41 = ((($pSeqParamSet)) + 32|0);
              $42 = (_h264bsdDecodeExpGolombSigned($pStrmData,$41)|0);
              $43 = ($42|0)==(0);
              if (!($43)) {
               $$0 = $42;
               break L1;
              }
              $44 = ((($pSeqParamSet)) + 36|0);
              $45 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$44)|0);
              $46 = ($45|0)==(0);
              if (!($46)) {
               $$0 = $45;
               break L1;
              }
              $47 = HEAP32[$44>>2]|0;
              $48 = ($47>>>0)>(255);
              if ($48) {
               $$0 = 1;
               break L1;
              }
              $49 = ($47|0)==(0);
              if ($49) {
               $65 = ((($pSeqParamSet)) + 40|0);
               HEAP32[$65>>2] = 0;
               break L12;
              }
              $50 = $47 << 2;
              $51 = (_H264SwDecMalloc($50)|0);
              $52 = ((($pSeqParamSet)) + 40|0);
              HEAP32[$52>>2] = $51;
              $53 = ($51|0)==(0|0);
              if ($53) {
               $$0 = 65535;
               break L1;
              }
              $54 = HEAP32[$44>>2]|0;
              $55 = ($54|0)==(0);
              if (!($55)) {
               $56 = (_h264bsdDecodeExpGolombSigned($pStrmData,$51)|0);
               $57 = ($56|0)==(0);
               if ($57) {
                $59 = 1;
               } else {
                $$0 = $56;
                break L1;
               }
               while(1) {
                $58 = HEAP32[$44>>2]|0;
                $60 = ($59>>>0)<($58>>>0);
                if (!($60)) {
                 break L12;
                }
                $$pre = HEAP32[$52>>2]|0;
                $61 = (($$pre) + ($59<<2)|0);
                $62 = (_h264bsdDecodeExpGolombSigned($pStrmData,$61)|0);
                $63 = ($62|0)==(0);
                $64 = (($59) + 1)|0;
                if ($63) {
                 $59 = $64;
                } else {
                 $$0 = $62;
                 break L1;
                }
               }
              }
              break;
             }
             default: {
             }
             }
            } while(0);
            $66 = ((($pSeqParamSet)) + 44|0);
            $67 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$66)|0);
            $68 = ($67|0)==(0);
            if ($68) {
             $69 = HEAP32[$66>>2]|0;
             $70 = ($69>>>0)>(16);
             if ($70) {
              $$0 = 1;
             } else {
              $71 = (_h264bsdGetBits($pStrmData,1)|0);
              $72 = ($71|0)==(-1);
              if ($72) {
               $$0 = 1;
              } else {
               $73 = ($71|0)==(1);
               $74 = $73&1;
               $75 = ((($pSeqParamSet)) + 48|0);
               HEAP32[$75>>2] = $74;
               $76 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
               $77 = ($76|0)==(0);
               if ($77) {
                $78 = HEAP32[$value>>2]|0;
                $79 = (($78) + 1)|0;
                $80 = ((($pSeqParamSet)) + 52|0);
                HEAP32[$80>>2] = $79;
                $81 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
                $82 = ($81|0)==(0);
                if ($82) {
                 $83 = HEAP32[$value>>2]|0;
                 $84 = (($83) + 1)|0;
                 $85 = ((($pSeqParamSet)) + 56|0);
                 HEAP32[$85>>2] = $84;
                 $86 = (_h264bsdGetBits($pStrmData,1)|0);
                 switch ($86|0) {
                 case 0: case -1:  {
                  $$0 = 1;
                  break L1;
                  break;
                 }
                 default: {
                 }
                 }
                 $87 = (_h264bsdGetBits($pStrmData,1)|0);
                 $88 = ($87|0)==(-1);
                 if ($88) {
                  $$0 = 1;
                 } else {
                  $89 = (_h264bsdGetBits($pStrmData,1)|0);
                  $90 = ($89|0)==(-1);
                  if ($90) {
                   $$0 = 1;
                  } else {
                   $91 = ($89|0)==(1);
                   $92 = $91&1;
                   $93 = ((($pSeqParamSet)) + 60|0);
                   HEAP32[$93>>2] = $92;
                   if ($91) {
                    $94 = ((($pSeqParamSet)) + 64|0);
                    $95 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$94)|0);
                    $96 = ($95|0)==(0);
                    if (!($96)) {
                     $$0 = $95;
                     break;
                    }
                    $97 = ((($pSeqParamSet)) + 68|0);
                    $98 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$97)|0);
                    $99 = ($98|0)==(0);
                    if (!($99)) {
                     $$0 = $98;
                     break;
                    }
                    $100 = ((($pSeqParamSet)) + 72|0);
                    $101 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$100)|0);
                    $102 = ($101|0)==(0);
                    if (!($102)) {
                     $$0 = $101;
                     break;
                    }
                    $103 = ((($pSeqParamSet)) + 76|0);
                    $104 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$103)|0);
                    $105 = ($104|0)==(0);
                    if (!($105)) {
                     $$0 = $104;
                     break;
                    }
                    $106 = HEAP32[$94>>2]|0;
                    $107 = HEAP32[$80>>2]|0;
                    $108 = $107 << 3;
                    $109 = HEAP32[$97>>2]|0;
                    $$neg5 = $109 ^ -1;
                    $110 = (($108) + ($$neg5))|0;
                    $111 = ($106|0)>($110|0);
                    if ($111) {
                     $$0 = 1;
                     break;
                    }
                    $112 = HEAP32[$100>>2]|0;
                    $113 = HEAP32[$85>>2]|0;
                    $114 = $113 << 3;
                    $115 = HEAP32[$103>>2]|0;
                    $$neg7 = $115 ^ -1;
                    $116 = (($114) + ($$neg7))|0;
                    $117 = ($112|0)>($116|0);
                    if ($117) {
                     $$0 = 1;
                     break;
                    } else {
                     $119 = $113;$120 = $107;
                    }
                   } else {
                    $$pre12 = HEAP32[$80>>2]|0;
                    $$pre13 = HEAP32[$85>>2]|0;
                    $119 = $$pre13;$120 = $$pre12;
                   }
                   $118 = Math_imul($119, $120)|0;
                   $121 = HEAP32[$8>>2]|0;
                   do {
                    switch ($121|0) {
                    case 10:  {
                     $maxPicSizeInMbs$0$i = 99;$tmp$0$i = 152064;
                     label = 58;
                     break;
                    }
                    case 11:  {
                     $maxPicSizeInMbs$0$i = 396;$tmp$0$i = 345600;
                     label = 58;
                     break;
                    }
                    case 12:  {
                     $maxPicSizeInMbs$0$i = 396;$tmp$0$i = 912384;
                     label = 58;
                     break;
                    }
                    case 13:  {
                     $maxPicSizeInMbs$0$i = 396;$tmp$0$i = 912384;
                     label = 58;
                     break;
                    }
                    case 20:  {
                     $maxPicSizeInMbs$0$i = 396;$tmp$0$i = 912384;
                     label = 58;
                     break;
                    }
                    case 21:  {
                     $maxPicSizeInMbs$0$i = 792;$tmp$0$i = 1824768;
                     label = 58;
                     break;
                    }
                    case 22:  {
                     $maxPicSizeInMbs$0$i = 1620;$tmp$0$i = 3110400;
                     label = 58;
                     break;
                    }
                    case 30:  {
                     $maxPicSizeInMbs$0$i = 1620;$tmp$0$i = 3110400;
                     label = 58;
                     break;
                    }
                    case 31:  {
                     $maxPicSizeInMbs$0$i = 3600;$tmp$0$i = 6912000;
                     label = 58;
                     break;
                    }
                    case 32:  {
                     $maxPicSizeInMbs$0$i = 5120;$tmp$0$i = 7864320;
                     label = 58;
                     break;
                    }
                    case 40:  {
                     $maxPicSizeInMbs$0$i = 8192;$tmp$0$i = 12582912;
                     label = 58;
                     break;
                    }
                    case 41:  {
                     $maxPicSizeInMbs$0$i = 8192;$tmp$0$i = 12582912;
                     label = 58;
                     break;
                    }
                    case 42:  {
                     $maxPicSizeInMbs$0$i = 8704;$tmp$0$i = 13369344;
                     label = 58;
                     break;
                    }
                    case 50:  {
                     $maxPicSizeInMbs$0$i = 22080;$tmp$0$i = 42393600;
                     label = 58;
                     break;
                    }
                    case 51:  {
                     $maxPicSizeInMbs$0$i = 36864;$tmp$0$i = 70778880;
                     label = 58;
                     break;
                    }
                    default: {
                     label = 60;
                    }
                    }
                   } while(0);
                   do {
                    if ((label|0) == 58) {
                     $122 = ($maxPicSizeInMbs$0$i>>>0)<($118>>>0);
                     if ($122) {
                      label = 60;
                      break;
                     }
                     $123 = ($118*384)|0;
                     $124 = (($tmp$0$i>>>0) / ($123>>>0))&-1;
                     $125 = ($124>>>0)<(16);
                     $$4 = $125 ? $124 : 16;
                     HEAP32[$value>>2] = $$4;
                     $126 = HEAP32[$66>>2]|0;
                     $127 = ($126>>>0)>($$4>>>0);
                     if ($127) {
                      $128 = $126;
                      label = 61;
                     } else {
                      $130 = $$4;
                     }
                    }
                   } while(0);
                   if ((label|0) == 60) {
                    HEAP32[$value>>2] = 2147483647;
                    $$pre14 = HEAP32[$66>>2]|0;
                    $128 = $$pre14;
                    label = 61;
                   }
                   if ((label|0) == 61) {
                    HEAP32[$value>>2] = $128;
                    $130 = $128;
                   }
                   $129 = ((($pSeqParamSet)) + 88|0);
                   HEAP32[$129>>2] = $130;
                   $131 = (_h264bsdGetBits($pStrmData,1)|0);
                   $132 = ($131|0)==(-1);
                   if ($132) {
                    $$0 = 1;
                   } else {
                    $133 = ($131|0)==(1);
                    $134 = $133&1;
                    $135 = ((($pSeqParamSet)) + 80|0);
                    HEAP32[$135>>2] = $134;
                    do {
                     if ($133) {
                      $136 = (_H264SwDecMalloc(952)|0);
                      $137 = ((($pSeqParamSet)) + 84|0);
                      HEAP32[$137>>2] = $136;
                      $138 = ($136|0)==(0|0);
                      if ($138) {
                       $$0 = 65535;
                       break L1;
                      }
                      $139 = (_h264bsdDecodeVuiParameters($pStrmData,$136)|0);
                      $140 = ($139|0)==(0);
                      if (!($140)) {
                       $$0 = $139;
                       break L1;
                      }
                      $141 = HEAP32[$137>>2]|0;
                      $142 = ((($141)) + 920|0);
                      $143 = HEAP32[$142>>2]|0;
                      $144 = ($143|0)==(0);
                      if ($144) {
                       break;
                      }
                      $145 = ((($141)) + 944|0);
                      $146 = HEAP32[$145>>2]|0;
                      $147 = ((($141)) + 948|0);
                      $148 = HEAP32[$147>>2]|0;
                      $149 = ($146>>>0)>($148>>>0);
                      if ($149) {
                       $$0 = 1;
                       break L1;
                      }
                      $150 = HEAP32[$66>>2]|0;
                      $151 = ($148>>>0)<($150>>>0);
                      if ($151) {
                       $$0 = 1;
                       break L1;
                      }
                      $152 = HEAP32[$129>>2]|0;
                      $153 = ($148>>>0)>($152>>>0);
                      if ($153) {
                       $$0 = 1;
                       break L1;
                      }
                      $154 = ($148|0)==(0);
                      $$ = $154 ? 1 : $148;
                      HEAP32[$129>>2] = $$;
                     }
                    } while(0);
                    (_h264bsdRbspTrailingBits($pStrmData)|0);
                    $$0 = 0;
                   }
                  }
                 }
                } else {
                 $$0 = $81;
                }
               } else {
                $$0 = $76;
               }
              }
             }
            } else {
             $$0 = $67;
            }
           }
          } else {
           $$0 = $21;
          }
         }
        } else {
         $$0 = $14;
        }
       }
      } else {
       $$0 = $10;
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCompareSeqParamSets($pSps1,$pSps2) {
 $pSps1 = $pSps1|0;
 $pSps2 = $pSps2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pSps1>>2]|0;
 $1 = HEAP32[$pSps2>>2]|0;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ((($pSps1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($pSps2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if (!($7)) {
  $$0 = 1;
  return ($$0|0);
 }
 $8 = ((($pSps1)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($pSps2)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if (!($12)) {
  $$0 = 1;
  return ($$0|0);
 }
 $13 = ((($pSps1)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($pSps2)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14|0)==($16|0);
 if (!($17)) {
  $$0 = 1;
  return ($$0|0);
 }
 $18 = ((($pSps1)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($pSps2)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($19|0)==($21|0);
 if (!($22)) {
  $$0 = 1;
  return ($$0|0);
 }
 $23 = ((($pSps1)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($pSps2)) + 48|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($24|0)==($26|0);
 if (!($27)) {
  $$0 = 1;
  return ($$0|0);
 }
 $28 = ((($pSps1)) + 52|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($pSps2)) + 52|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($29|0)==($31|0);
 if (!($32)) {
  $$0 = 1;
  return ($$0|0);
 }
 $33 = ((($pSps1)) + 56|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($pSps2)) + 56|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($34|0)==($36|0);
 if (!($37)) {
  $$0 = 1;
  return ($$0|0);
 }
 $38 = ((($pSps1)) + 60|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($pSps2)) + 60|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($39|0)==($41|0);
 if (!($42)) {
  $$0 = 1;
  return ($$0|0);
 }
 $43 = ((($pSps1)) + 80|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($pSps2)) + 80|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($44|0)==($46|0);
 if (!($47)) {
  $$0 = 1;
  return ($$0|0);
 }
 L31: do {
  switch ($14|0) {
  case 0:  {
   $48 = ((($pSps1)) + 20|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($pSps2)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($49|0)==($51|0);
   if (!($52)) {
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 1:  {
   $53 = ((($pSps1)) + 24|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($pSps2)) + 24|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if (!($57)) {
    $$0 = 1;
    return ($$0|0);
   }
   $58 = ((($pSps1)) + 28|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($pSps2)) + 28|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if (!($62)) {
    $$0 = 1;
    return ($$0|0);
   }
   $63 = ((($pSps1)) + 32|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($pSps2)) + 32|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($64|0)==($66|0);
   if (!($67)) {
    $$0 = 1;
    return ($$0|0);
   }
   $68 = ((($pSps1)) + 36|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($pSps2)) + 36|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($69|0)==($71|0);
   if (!($72)) {
    $$0 = 1;
    return ($$0|0);
   }
   $73 = ($69|0)==(0);
   if (!($73)) {
    $74 = ((($pSps1)) + 40|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ((($pSps2)) + 40|0);
    $77 = HEAP32[$76>>2]|0;
    $i$02 = 0;
    while(1) {
     $80 = (($75) + ($i$02<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($77) + ($i$02<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($81|0)==($83|0);
     $78 = (($i$02) + 1)|0;
     if (!($84)) {
      $$0 = 1;
      break;
     }
     $79 = ($78>>>0)<($69>>>0);
     if ($79) {
      $i$02 = $78;
     } else {
      break L31;
     }
    }
    return ($$0|0);
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $85 = ($39|0)==(0);
 if (!($85)) {
  $86 = ((($pSps1)) + 64|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ((($pSps2)) + 64|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($87|0)==($89|0);
  if (!($90)) {
   $$0 = 1;
   return ($$0|0);
  }
  $91 = ((($pSps1)) + 68|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($pSps2)) + 68|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($92|0)==($94|0);
  if (!($95)) {
   $$0 = 1;
   return ($$0|0);
  }
  $96 = ((($pSps1)) + 72|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($pSps2)) + 72|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($97|0)==($99|0);
  if (!($100)) {
   $$0 = 1;
   return ($$0|0);
  }
  $101 = ((($pSps1)) + 76|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($pSps2)) + 76|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($102|0)==($104|0);
  if (!($105)) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdDecodePicParamSet($pStrmData,$pPicParamSet) {
 $pStrmData = $pStrmData|0;
 $pPicParamSet = $pPicParamSet|0;
 var $$0 = 0, $$off = 0, $$off6 = 0, $$off7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$014 = 0, $i$115 = 0, $i$217 = 0, $itmp = 0, $or$cond = 0, $value = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 4|0;
 $itmp = sp;
 _H264SwDecMemset($pPicParamSet,0,72);
 $0 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$pPicParamSet)|0);
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $2 = HEAP32[$pPicParamSet>>2]|0;
   $3 = ($2>>>0)>(255);
   if ($3) {
    $$0 = 1;
   } else {
    $4 = ((($pPicParamSet)) + 4|0);
    $5 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$4)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $7 = HEAP32[$4>>2]|0;
     $8 = ($7>>>0)>(31);
     if ($8) {
      $$0 = 1;
     } else {
      $9 = (_h264bsdGetBits($pStrmData,1)|0);
      $10 = ($9|0)==(0);
      if ($10) {
       $11 = (_h264bsdGetBits($pStrmData,1)|0);
       $12 = ($11|0)==(-1);
       if ($12) {
        $$0 = 1;
       } else {
        $13 = ($11|0)==(1);
        $14 = $13&1;
        $15 = ((($pPicParamSet)) + 8|0);
        HEAP32[$15>>2] = $14;
        $16 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
        $17 = ($16|0)==(0);
        if ($17) {
         $18 = HEAP32[$value>>2]|0;
         $19 = (($18) + 1)|0;
         $20 = ((($pPicParamSet)) + 12|0);
         HEAP32[$20>>2] = $19;
         $21 = ($19>>>0)>(8);
         if ($21) {
          $$0 = 1;
         } else {
          $22 = ($19>>>0)>(1);
          L10: do {
           if ($22) {
            $23 = ((($pPicParamSet)) + 16|0);
            $24 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$23)|0);
            $25 = ($24|0)==(0);
            if (!($25)) {
             $$0 = $24;
             break L1;
            }
            $26 = HEAP32[$23>>2]|0;
            $27 = ($26>>>0)>(6);
            if ($27) {
             $$0 = 1;
             break L1;
            }
            switch ($26|0) {
            case 0:  {
             $28 = HEAP32[$20>>2]|0;
             $29 = $28 << 2;
             $30 = (_H264SwDecMalloc($29)|0);
             $31 = ((($pPicParamSet)) + 20|0);
             HEAP32[$31>>2] = $30;
             $32 = ($30|0)==(0|0);
             if ($32) {
              $$0 = 65535;
              break L1;
             }
             $33 = HEAP32[$20>>2]|0;
             $34 = ($33|0)==(0);
             if ($34) {
              break L10;
             } else {
              $i$014 = 0;
             }
             while(1) {
              $35 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
              $36 = ($35|0)==(0);
              if (!($36)) {
               $$0 = $35;
               break L1;
              }
              $37 = HEAP32[$value>>2]|0;
              $38 = (($37) + 1)|0;
              $39 = HEAP32[$31>>2]|0;
              $40 = (($39) + ($i$014<<2)|0);
              HEAP32[$40>>2] = $38;
              $41 = (($i$014) + 1)|0;
              $42 = HEAP32[$20>>2]|0;
              $43 = ($41>>>0)<($42>>>0);
              if ($43) {
               $i$014 = $41;
              } else {
               break;
              }
             }
             break;
            }
            case 2:  {
             $44 = HEAP32[$20>>2]|0;
             $45 = $44 << 2;
             $46 = (($45) + -4)|0;
             $47 = (_H264SwDecMalloc($46)|0);
             $48 = ((($pPicParamSet)) + 24|0);
             HEAP32[$48>>2] = $47;
             $49 = HEAP32[$20>>2]|0;
             $50 = $49 << 2;
             $51 = (($50) + -4)|0;
             $52 = (_H264SwDecMalloc($51)|0);
             $53 = ((($pPicParamSet)) + 28|0);
             HEAP32[$53>>2] = $52;
             $54 = HEAP32[$48>>2]|0;
             $55 = ($54|0)==(0|0);
             $56 = ($52|0)==(0|0);
             $or$cond = $56 | $55;
             if ($or$cond) {
              $$0 = 65535;
              break L1;
             }
             $57 = HEAP32[$20>>2]|0;
             $58 = ($57|0)==(1);
             if ($58) {
              break L10;
             } else {
              $i$115 = 0;
             }
             while(1) {
              $59 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
              $60 = ($59|0)==(0);
              if (!($60)) {
               $$0 = $59;
               break L1;
              }
              $61 = HEAP32[$value>>2]|0;
              $62 = HEAP32[$48>>2]|0;
              $63 = (($62) + ($i$115<<2)|0);
              HEAP32[$63>>2] = $61;
              $64 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
              $65 = ($64|0)==(0);
              if (!($65)) {
               $$0 = $64;
               break L1;
              }
              $66 = HEAP32[$value>>2]|0;
              $67 = HEAP32[$53>>2]|0;
              $68 = (($67) + ($i$115<<2)|0);
              HEAP32[$68>>2] = $66;
              $69 = (($i$115) + 1)|0;
              $70 = HEAP32[$20>>2]|0;
              $71 = (($70) + -1)|0;
              $72 = ($69>>>0)<($71>>>0);
              if ($72) {
               $i$115 = $69;
              } else {
               break;
              }
             }
             break;
            }
            case 5: case 4: case 3:  {
             $73 = (_h264bsdGetBits($pStrmData,1)|0);
             $74 = ($73|0)==(-1);
             if ($74) {
              $$0 = 1;
              break L1;
             }
             $75 = ($73|0)==(1);
             $76 = $75&1;
             $77 = ((($pPicParamSet)) + 32|0);
             HEAP32[$77>>2] = $76;
             $78 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
             $79 = ($78|0)==(0);
             if (!($79)) {
              $$0 = $78;
              break L1;
             }
             $80 = HEAP32[$value>>2]|0;
             $81 = (($80) + 1)|0;
             $82 = ((($pPicParamSet)) + 36|0);
             HEAP32[$82>>2] = $81;
             break L10;
             break;
            }
            case 6:  {
             $83 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
             $84 = ($83|0)==(0);
             if (!($84)) {
              $$0 = $83;
              break L1;
             }
             $85 = HEAP32[$value>>2]|0;
             $86 = (($85) + 1)|0;
             $87 = ((($pPicParamSet)) + 40|0);
             HEAP32[$87>>2] = $86;
             $88 = $86 << 2;
             $89 = (_H264SwDecMalloc($88)|0);
             $90 = ((($pPicParamSet)) + 44|0);
             HEAP32[$90>>2] = $89;
             $91 = ($89|0)==(0|0);
             if ($91) {
              $$0 = 65535;
              break L1;
             }
             $92 = HEAP32[$20>>2]|0;
             $93 = (($92) + -1)|0;
             $94 = (3056 + ($93<<2)|0);
             $95 = HEAP32[$94>>2]|0;
             $96 = HEAP32[$87>>2]|0;
             $97 = ($96|0)==(0);
             if ($97) {
              break L10;
             } else {
              $i$217 = 0;
             }
             while(1) {
              $101 = (_h264bsdGetBits($pStrmData,$95)|0);
              $102 = HEAP32[$90>>2]|0;
              $103 = (($102) + ($i$217<<2)|0);
              HEAP32[$103>>2] = $101;
              $104 = HEAP32[$20>>2]|0;
              $105 = ($101>>>0)<($104>>>0);
              $99 = (($i$217) + 1)|0;
              if (!($105)) {
               $$0 = 1;
               break L1;
              }
              $98 = HEAP32[$87>>2]|0;
              $100 = ($99>>>0)<($98>>>0);
              if ($100) {
               $i$217 = $99;
              } else {
               break;
              }
             }
             break;
            }
            default: {
             break L10;
            }
            }
           }
          } while(0);
          $106 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
          $107 = ($106|0)==(0);
          if ($107) {
           $108 = HEAP32[$value>>2]|0;
           $109 = ($108>>>0)>(31);
           if ($109) {
            $$0 = 1;
           } else {
            $110 = (($108) + 1)|0;
            $111 = ((($pPicParamSet)) + 48|0);
            HEAP32[$111>>2] = $110;
            $112 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
            $113 = ($112|0)==(0);
            if ($113) {
             $114 = HEAP32[$value>>2]|0;
             $115 = ($114>>>0)>(31);
             if ($115) {
              $$0 = 1;
             } else {
              $116 = (_h264bsdGetBits($pStrmData,1)|0);
              $117 = ($116|0)==(0);
              if ($117) {
               $118 = (_h264bsdGetBits($pStrmData,2)|0);
               $119 = ($118>>>0)>(2);
               if ($119) {
                $$0 = 1;
               } else {
                $120 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
                $121 = ($120|0)==(0);
                if ($121) {
                 $122 = HEAP32[$itmp>>2]|0;
                 $$off = (($122) + 26)|0;
                 $123 = ($$off>>>0)>(51);
                 if ($123) {
                  $$0 = 1;
                 } else {
                  $124 = ((($pPicParamSet)) + 52|0);
                  HEAP32[$124>>2] = $$off;
                  $125 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
                  $126 = ($125|0)==(0);
                  if ($126) {
                   $127 = HEAP32[$itmp>>2]|0;
                   $$off6 = (($127) + 26)|0;
                   $128 = ($$off6>>>0)>(51);
                   if ($128) {
                    $$0 = 1;
                   } else {
                    $129 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
                    $130 = ($129|0)==(0);
                    if (!($130)) {
                     $$0 = $129;
                     break;
                    }
                    $131 = HEAP32[$itmp>>2]|0;
                    $$off7 = (($131) + 12)|0;
                    $132 = ($$off7>>>0)>(24);
                    if ($132) {
                     $$0 = 1;
                     break;
                    }
                    $133 = ((($pPicParamSet)) + 56|0);
                    HEAP32[$133>>2] = $131;
                    $134 = (_h264bsdGetBits($pStrmData,1)|0);
                    $135 = ($134|0)==(-1);
                    if ($135) {
                     $$0 = 1;
                     break;
                    }
                    $136 = ($134|0)==(1);
                    $137 = $136&1;
                    $138 = ((($pPicParamSet)) + 60|0);
                    HEAP32[$138>>2] = $137;
                    $139 = (_h264bsdGetBits($pStrmData,1)|0);
                    $140 = ($139|0)==(-1);
                    if ($140) {
                     $$0 = 1;
                     break;
                    }
                    $141 = ($139|0)==(1);
                    $142 = $141&1;
                    $143 = ((($pPicParamSet)) + 64|0);
                    HEAP32[$143>>2] = $142;
                    $144 = (_h264bsdGetBits($pStrmData,1)|0);
                    $145 = ($144|0)==(-1);
                    if ($145) {
                     $$0 = 1;
                     break;
                    }
                    $146 = ($144|0)==(1);
                    $147 = $146&1;
                    $148 = ((($pPicParamSet)) + 68|0);
                    HEAP32[$148>>2] = $147;
                    (_h264bsdRbspTrailingBits($pStrmData)|0);
                    $$0 = 0;
                   }
                  } else {
                   $$0 = $125;
                  }
                 }
                } else {
                 $$0 = $120;
                }
               }
              } else {
               $$0 = 1;
              }
             }
            } else {
             $$0 = $112;
            }
           }
          } else {
           $$0 = $106;
          }
         }
        } else {
         $$0 = $16;
        }
       }
      } else {
       $$0 = 1;
      }
     }
    } else {
     $$0 = $5;
    }
   }
  } else {
   $$0 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeSliceHeader($pStrmData,$pSliceHeader,$pSeqParamSet,$pPicParamSet,$pNalUnit) {
 $pStrmData = $pStrmData|0;
 $pSliceHeader = $pSliceHeader|0;
 $pSeqParamSet = $pSeqParamSet|0;
 $pPicParamSet = $pPicParamSet|0;
 $pNalUnit = $pNalUnit|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i$ph = 0, $$0$i14$ph = 0, $$9 = 0, $$lcssa = 0, $$num5$0$i = 0, $$num5$0$i$lcssa = 0, $$num6$0$i = 0, $$num6$0$i$lcssa = 0, $$off = 0, $$off$i = 0, $$off17 = 0, $$off8 = 0, $$op = 0, $$pr = 0, $$pr$i = 0, $$pr12$i = 0, $$pr16 = 0;
 var $$pre$i = 0, $$pre13$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $command$i = 0, $i$0 = 0, $i$0$i = 0, $i$0$i$lcssa26 = 0, $i$0$i13 = 0;
 var $i$0$lcssa = 0, $i$1 = 0, $i$1$lcssa = 0, $itmp = 0, $num1to3$0$i = 0, $num1to3$1$i = 0, $num1to3$1$i$lcssa = 0, $num4$0$i = 0, $num4$1$i = 0, $num4$1$i$lcssa = 0, $num5$0$i = 0, $num6$0$i = 0, $numBits$0$$i = 0, $numBits$0$i = 0, $numBits$0$i$lcssa = 0, $operation$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond11$i = 0, $tmp$0$i = 0;
 var $tmp$0$v$i = 0, $value = 0, $value$i = 0, $value$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value$i11 = sp + 20|0;
 $operation$i = sp + 16|0;
 $value$i = sp + 12|0;
 $command$i = sp + 8|0;
 $value = sp + 4|0;
 $itmp = sp;
 _H264SwDecMemset($pSliceHeader,0,988);
 $0 = ((($pSeqParamSet)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($pSeqParamSet)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$value>>2]|0;
 HEAP32[$pSliceHeader>>2] = $7;
 $8 = ($7>>>0)<($4>>>0);
 if (!($8)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$value>>2]|0;
 $12 = ((($pSliceHeader)) + 4|0);
 HEAP32[$12>>2] = $11;
 switch ($11|0) {
 case 7: case 2:  {
  break;
 }
 case 5: case 0:  {
  label = 5;
  break;
 }
 default: {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 }
 if ((label|0) == 5) {
  $13 = HEAP32[$pNalUnit>>2]|0;
  $14 = ($13|0)==(5);
  if ($14) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $15 = ((($pSeqParamSet)) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $18 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
 $19 = ($18|0)==(0);
 if (!($19)) {
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = HEAP32[$value>>2]|0;
 $21 = ((($pSliceHeader)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$pPicParamSet>>2]|0;
 $23 = ($20|0)==($22|0);
 if (!($23)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ((($pSeqParamSet)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $i$0 = 0;
 while(1) {
  $26 = $25 >>> $i$0;
  $27 = ($26|0)==(0);
  $28 = (($i$0) + 1)|0;
  if ($27) {
   $i$0$lcssa = $i$0;
   break;
  } else {
   $i$0 = $28;
  }
 }
 $29 = (($i$0$lcssa) + -1)|0;
 $30 = (_h264bsdGetBits($pStrmData,$29)|0);
 $31 = ($30|0)==(-1);
 if ($31) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = HEAP32[$pNalUnit>>2]|0;
 $33 = ($32|0)==(5);
 $34 = ($30|0)!=(0);
 $or$cond = $34 & $33;
 if ($or$cond) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = ((($pSliceHeader)) + 12|0);
 HEAP32[$35>>2] = $30;
 if ($33) {
  $36 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0 = $36;
   STACKTOP = sp;return ($$0|0);
  }
  $38 = HEAP32[$value>>2]|0;
  $39 = ((($pSliceHeader)) + 16|0);
  HEAP32[$39>>2] = $38;
  $40 = ($38>>>0)>(65535);
  if ($40) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $41 = ((($pSeqParamSet)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = ((($pSeqParamSet)) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $i$1 = 0;
  while(1) {
   $46 = $45 >>> $i$1;
   $47 = ($46|0)==(0);
   $48 = (($i$1) + 1)|0;
   if ($47) {
    $i$1$lcssa = $i$1;
    break;
   } else {
    $i$1 = $48;
   }
  }
  $49 = (($i$1$lcssa) + -1)|0;
  $50 = (_h264bsdGetBits($pStrmData,$49)|0);
  $51 = ($50|0)==(-1);
  if ($51) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $52 = ((($pSliceHeader)) + 20|0);
  HEAP32[$52>>2] = $50;
  $53 = ((($pPicParamSet)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0);
  do {
   if (!($55)) {
    $56 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     $58 = HEAP32[$itmp>>2]|0;
     $59 = ((($pSliceHeader)) + 24|0);
     HEAP32[$59>>2] = $58;
     break;
    } else {
     $$0 = $56;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $60 = HEAP32[$pNalUnit>>2]|0;
  $61 = ($60|0)==(5);
  if ($61) {
   $62 = HEAP32[$52>>2]|0;
   $63 = HEAP32[$44>>2]|0;
   $64 = $63 >>> 1;
   $65 = ($62>>>0)>($64>>>0);
   if ($65) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $66 = ((($pSliceHeader)) + 24|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)>(0);
   $$op = (0 - ($67))|0;
   $$ = $68 ? 0 : $$op;
   $69 = ($62|0)==($$|0);
   if (!($69)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $$pr = HEAP32[$41>>2]|0;
  $70 = $$pr;
 } else {
  $70 = $42;
 }
 $71 = ($70|0)==(1);
 if ($71) {
  $72 = ((($pSeqParamSet)) + 24|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)==(0);
  if ($74) {
   $75 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
   $76 = ($75|0)==(0);
   if (!($76)) {
    $$0 = $75;
    STACKTOP = sp;return ($$0|0);
   }
   $77 = HEAP32[$itmp>>2]|0;
   $78 = ((($pSliceHeader)) + 28|0);
   HEAP32[$78>>2] = $77;
   $79 = ((($pPicParamSet)) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($80|0)==(0);
   do {
    if (!($81)) {
     $82 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
     $83 = ($82|0)==(0);
     if ($83) {
      $84 = HEAP32[$itmp>>2]|0;
      $85 = ((($pSliceHeader)) + 32|0);
      HEAP32[$85>>2] = $84;
      break;
     } else {
      $$0 = $82;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   $86 = HEAP32[$pNalUnit>>2]|0;
   $87 = ($86|0)==(5);
   if ($87) {
    $88 = HEAP32[$78>>2]|0;
    $89 = ((($pSeqParamSet)) + 32|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + ($88))|0;
    $92 = ((($pSliceHeader)) + 32|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($91) + ($93))|0;
    $95 = ($88|0)<($94|0);
    $$9 = $95 ? $88 : $94;
    $96 = ($$9|0)==(0);
    if (!($96)) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $97 = ((($pPicParamSet)) + 68|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(0);
 if (!($99)) {
  $100 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
  $101 = ($100|0)==(0);
  if (!($101)) {
   $$0 = $100;
   STACKTOP = sp;return ($$0|0);
  }
  $102 = HEAP32[$value>>2]|0;
  $103 = ((($pSliceHeader)) + 36|0);
  HEAP32[$103>>2] = $102;
  $104 = ($102>>>0)>(127);
  if ($104) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $105 = HEAP32[$12>>2]|0;
 switch ($105|0) {
 case 5: case 0:  {
  $106 = (_h264bsdGetBits($pStrmData,1)|0);
  $107 = ($106|0)==(-1);
  if ($107) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $108 = ((($pSliceHeader)) + 40|0);
  HEAP32[$108>>2] = $106;
  $109 = ($106|0)==(0);
  do {
   if ($109) {
    $116 = ((($pPicParamSet)) + 48|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117>>>0)>(16);
    if ($118) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $119 = ((($pSliceHeader)) + 44|0);
     HEAP32[$119>>2] = $117;
     break;
    }
   } else {
    $110 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
    $111 = ($110|0)==(0);
    if (!($111)) {
     $$0 = $110;
     STACKTOP = sp;return ($$0|0);
    }
    $112 = HEAP32[$value>>2]|0;
    $113 = ($112>>>0)>(15);
    if ($113) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $114 = (($112) + 1)|0;
     $115 = ((($pSliceHeader)) + 44|0);
     HEAP32[$115>>2] = $114;
     break;
    }
   }
  } while(0);
  $$pr16 = HEAP32[$12>>2]|0;
  $120 = $$pr16;
  break;
 }
 default: {
  $120 = $105;
 }
 }
 L104: do {
  switch ($120|0) {
  case 5: case 0:  {
   $121 = ((($pSliceHeader)) + 44|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = HEAP32[$24>>2]|0;
   $124 = (_h264bsdGetBits($pStrmData,1)|0);
   $125 = ($124|0)==(-1);
   L106: do {
    if ($125) {
     $$0$i$ph = 1;
    } else {
     $126 = ((($pSliceHeader)) + 68|0);
     HEAP32[$126>>2] = $124;
     $127 = ($124|0)==(0);
     if (!($127)) {
      $i$0$i = 0;
      while(1) {
       $128 = ($i$0$i>>>0)>($122>>>0);
       if ($128) {
        $$0$i$ph = 1;
        break L106;
       }
       $129 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$command$i)|0);
       $130 = ($129|0)==(0);
       if (!($130)) {
        $$0$i$ph = $129;
        break L106;
       }
       $131 = HEAP32[$command$i>>2]|0;
       $132 = ($131>>>0)>(3);
       if ($132) {
        $$0$i$ph = 1;
        break L106;
       }
       $133 = (((($pSliceHeader)) + 72|0) + (($i$0$i*12)|0)|0);
       HEAP32[$133>>2] = $131;
       $134 = ($131>>>0)<(2);
       do {
        if ($134) {
         $135 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i)|0);
         $136 = ($135|0)==(0);
         if (!($136)) {
          $$0$i$ph = $135;
          break L106;
         }
         $137 = HEAP32[$value$i>>2]|0;
         $138 = ($137>>>0)<($123>>>0);
         if (!($138)) {
          $$0$i$ph = 1;
          break L106;
         }
         $139 = (($137) + 1)|0;
         $140 = (((((($pSliceHeader)) + 72|0) + (($i$0$i*12)|0)|0)) + 4|0);
         HEAP32[$140>>2] = $139;
        } else {
         $141 = ($131|0)==(2);
         if (!($141)) {
          break;
         }
         $142 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i)|0);
         $143 = ($142|0)==(0);
         if (!($143)) {
          $$0$i$ph = $142;
          break L106;
         }
         $144 = HEAP32[$value$i>>2]|0;
         $145 = (((((($pSliceHeader)) + 72|0) + (($i$0$i*12)|0)|0)) + 8|0);
         HEAP32[$145>>2] = $144;
        }
       } while(0);
       $146 = (($i$0$i) + 1)|0;
       $147 = HEAP32[$command$i>>2]|0;
       $148 = ($147|0)==(3);
       if ($148) {
        $i$0$i$lcssa26 = $i$0$i;
        break;
       } else {
        $i$0$i = $146;
       }
      }
      $149 = ($i$0$i$lcssa26|0)==(0);
      if ($149) {
       $$0$i$ph = 1;
       break;
      }
     }
     break L104;
    }
   } while(0);
   $$0 = $$0$i$ph;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 $150 = ((($pNalUnit)) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ($151|0)==(0);
 do {
  if (!($152)) {
   $153 = HEAP32[$pNalUnit>>2]|0;
   $154 = ((($pSeqParamSet)) + 44|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ($153|0)==(5);
   $157 = (_h264bsdGetBits($pStrmData,1)|0);
   $158 = ($157|0)==(-1);
   L129: do {
    if ($156) {
     if ($158) {
      $$0$i14$ph = 1;
     } else {
      $159 = ((($pSliceHeader)) + 276|0);
      HEAP32[$159>>2] = $157;
      $160 = (_h264bsdGetBits($pStrmData,1)|0);
      $161 = ($160|0)==(-1);
      if ($161) {
       $$0$i14$ph = 1;
      } else {
       $162 = ((($pSliceHeader)) + 280|0);
       HEAP32[$162>>2] = $160;
       $163 = ($155|0)!=(0);
       $164 = ($160|0)==(0);
       $or$cond$i = $163 | $164;
       if ($or$cond$i) {
        label = 92;
       } else {
        $$0$i14$ph = 1;
       }
      }
     }
    } else {
     if ($158) {
      $$0$i14$ph = 1;
     } else {
      $165 = ((($pSliceHeader)) + 284|0);
      HEAP32[$165>>2] = $157;
      $166 = ($157|0)==(0);
      if ($166) {
       label = 92;
      } else {
       $167 = $155 << 1;
       $168 = (($167) + 2)|0;
       $i$0$i13 = 0;$num1to3$0$i = 0;$num4$0$i = 0;$num5$0$i = 0;$num6$0$i = 0;
       while(1) {
        $169 = ($i$0$i13>>>0)>($168>>>0);
        if ($169) {
         $$0$i14$ph = 1;
         break L129;
        }
        $170 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$operation$i)|0);
        $171 = ($170|0)==(0);
        if (!($171)) {
         $$0$i14$ph = $170;
         break L129;
        }
        $172 = HEAP32[$operation$i>>2]|0;
        $173 = ($172>>>0)>(6);
        if ($173) {
         $$0$i14$ph = 1;
         break L129;
        }
        $174 = (((($pSliceHeader)) + 288|0) + (($i$0$i13*20)|0)|0);
        HEAP32[$174>>2] = $172;
        $175 = $172 & -3;
        $176 = ($175|0)==(1);
        if ($176) {
         $177 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i11)|0);
         $178 = ($177|0)==(0);
         if (!($178)) {
          $$0$i14$ph = $177;
          break L129;
         }
         $179 = HEAP32[$value$i11>>2]|0;
         $180 = (($179) + 1)|0;
         $181 = (((((($pSliceHeader)) + 288|0) + (($i$0$i13*20)|0)|0)) + 4|0);
         HEAP32[$181>>2] = $180;
         $$pr$i = HEAP32[$operation$i>>2]|0;
         $182 = $$pr$i;
        } else {
         $182 = $172;
        }
        $183 = ($182|0)==(2);
        if ($183) {
         $184 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i11)|0);
         $185 = ($184|0)==(0);
         if (!($185)) {
          $$0$i14$ph = $184;
          break L129;
         }
         $186 = HEAP32[$value$i11>>2]|0;
         $187 = (((((($pSliceHeader)) + 288|0) + (($i$0$i13*20)|0)|0)) + 8|0);
         HEAP32[$187>>2] = $186;
         $$pre$i = HEAP32[$operation$i>>2]|0;
         $188 = $$pre$i;
        } else {
         $188 = $182;
        }
        switch ($188|0) {
        case 3: case 6:  {
         $189 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i11)|0);
         $190 = ($189|0)==(0);
         if (!($190)) {
          $$0$i14$ph = $189;
          break L129;
         }
         $191 = HEAP32[$value$i11>>2]|0;
         $192 = (((((($pSliceHeader)) + 288|0) + (($i$0$i13*20)|0)|0)) + 12|0);
         HEAP32[$192>>2] = $191;
         $$pr12$i = HEAP32[$operation$i>>2]|0;
         $193 = $$pr12$i;
         break;
        }
        default: {
         $193 = $188;
        }
        }
        $194 = ($193|0)==(4);
        if ($194) {
         $195 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i11)|0);
         $196 = ($195|0)==(0);
         if (!($196)) {
          $$0$i14$ph = $195;
          break L129;
         }
         $197 = HEAP32[$value$i11>>2]|0;
         $198 = ($197>>>0)>($155>>>0);
         if ($198) {
          $$0$i14$ph = 1;
          break L129;
         }
         $199 = ($197|0)==(0);
         $200 = (($197) + -1)|0;
         $$$i = $199 ? 65535 : $200;
         $201 = (((((($pSliceHeader)) + 288|0) + (($i$0$i13*20)|0)|0)) + 16|0);
         HEAP32[$201>>2] = $$$i;
         $202 = (($num4$0$i) + 1)|0;
         $$pre13$i = HEAP32[$operation$i>>2]|0;
         $203 = $$pre13$i;$num4$1$i = $202;
        } else {
         $203 = $193;$num4$1$i = $num4$0$i;
        }
        $204 = ($203|0)==(5);
        $205 = $204&1;
        $$num5$0$i = (($205) + ($num5$0$i))|0;
        $$off$i = (($203) + -1)|0;
        $206 = ($$off$i>>>0)<(3);
        $207 = $206&1;
        $num1to3$1$i = (($207) + ($num1to3$0$i))|0;
        $208 = ($203|0)==(6);
        $209 = $208&1;
        $$num6$0$i = (($209) + ($num6$0$i))|0;
        $210 = (($i$0$i13) + 1)|0;
        $211 = ($203|0)==(0);
        if ($211) {
         $$num5$0$i$lcssa = $$num5$0$i;$$num6$0$i$lcssa = $$num6$0$i;$num1to3$1$i$lcssa = $num1to3$1$i;$num4$1$i$lcssa = $num4$1$i;
         break;
        } else {
         $i$0$i13 = $210;$num1to3$0$i = $num1to3$1$i;$num4$0$i = $num4$1$i;$num5$0$i = $$num5$0$i;$num6$0$i = $$num6$0$i;
        }
       }
       $212 = $$num5$0$i$lcssa | $num4$1$i$lcssa;
       $213 = $212 | $$num6$0$i$lcssa;
       $214 = ($213>>>0)>(1);
       if ($214) {
        $$0$i14$ph = 1;
       } else {
        $215 = ($num1to3$1$i$lcssa|0)!=(0);
        $216 = ($$num5$0$i$lcssa|0)!=(0);
        $or$cond11$i = $216 & $215;
        if ($or$cond11$i) {
         $$0$i14$ph = 1;
        } else {
         label = 92;
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 92) {
    break;
   }
   $$0 = $$0$i14$ph;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $217 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
 $218 = ($217|0)==(0);
 if (!($218)) {
  $$0 = $217;
  STACKTOP = sp;return ($$0|0);
 }
 $219 = HEAP32[$itmp>>2]|0;
 $220 = ((($pSliceHeader)) + 48|0);
 HEAP32[$220>>2] = $219;
 $221 = ((($pPicParamSet)) + 52|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = (($219) + ($222))|0;
 HEAP32[$itmp>>2] = $223;
 $224 = ($223>>>0)>(51);
 if ($224) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $225 = ((($pPicParamSet)) + 60|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = ($226|0)==(0);
 do {
  if (!($227)) {
   $228 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
   $229 = ($228|0)==(0);
   if (!($229)) {
    $$0 = $228;
    STACKTOP = sp;return ($$0|0);
   }
   $230 = HEAP32[$value>>2]|0;
   $231 = ((($pSliceHeader)) + 52|0);
   HEAP32[$231>>2] = $230;
   $232 = ($230>>>0)>(2);
   if ($232) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $233 = ($230|0)==(1);
   if (!($233)) {
    $234 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
    $235 = ($234|0)==(0);
    if (!($235)) {
     $$0 = $234;
     STACKTOP = sp;return ($$0|0);
    }
    $236 = HEAP32[$itmp>>2]|0;
    $$off = (($236) + 6)|0;
    $237 = ($$off>>>0)>(12);
    if ($237) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $238 = $236 << 1;
    $239 = ((($pSliceHeader)) + 56|0);
    HEAP32[$239>>2] = $238;
    $240 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
    $241 = ($240|0)==(0);
    if (!($241)) {
     $$0 = $240;
     STACKTOP = sp;return ($$0|0);
    }
    $242 = HEAP32[$itmp>>2]|0;
    $$off8 = (($242) + 6)|0;
    $243 = ($$off8>>>0)>(12);
    if ($243) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $244 = $242 << 1;
     $245 = ((($pSliceHeader)) + 60|0);
     HEAP32[$245>>2] = $244;
     break;
    }
   }
  }
 } while(0);
 $246 = ((($pPicParamSet)) + 12|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = ($247>>>0)>(1);
 if ($248) {
  $249 = ((($pPicParamSet)) + 16|0);
  $250 = HEAP32[$249>>2]|0;
  $$off17 = (($250) + -3)|0;
  $251 = ($$off17>>>0)<(3);
  if ($251) {
   $252 = ((($pPicParamSet)) + 36|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = (($4>>>0) % ($253>>>0))&-1;
   $255 = ($254|0)==(0);
   $256 = (($4>>>0) / ($253>>>0))&-1;
   $tmp$0$v$i = $255 ? 1 : 2;
   $tmp$0$i = (($tmp$0$v$i) + ($256))|0;
   $numBits$0$i = 0;
   while(1) {
    $257 = (($numBits$0$i) + 1)|0;
    $258 = -1 << $257;
    $259 = $258 & $tmp$0$i;
    $260 = ($259|0)==(0);
    if ($260) {
     $$lcssa = $257;$numBits$0$i$lcssa = $numBits$0$i;
     break;
    } else {
     $numBits$0$i = $257;
    }
   }
   $261 = 1 << $numBits$0$i$lcssa;
   $262 = (($261) + -1)|0;
   $263 = $262 & $tmp$0$i;
   $264 = ($263|0)==(0);
   $numBits$0$$i = $264 ? $numBits$0$i$lcssa : $$lcssa;
   $265 = (_h264bsdGetBits($pStrmData,$numBits$0$$i)|0);
   HEAP32[$value>>2] = $265;
   $266 = ($265|0)==(-1);
   if ($266) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $267 = ((($pSliceHeader)) + 64|0);
   HEAP32[$267>>2] = $265;
   $268 = HEAP32[$252>>2]|0;
   $269 = (($4) + -1)|0;
   $270 = (($269) + ($268))|0;
   $271 = (($270>>>0) / ($268>>>0))&-1;
   $272 = ($265>>>0)>($271>>>0);
   if ($272) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckPpsId($pStrmData,$picParamSetId) {
 $pStrmData = $pStrmData|0;
 $picParamSetId = $picParamSetId|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tmpStrmData = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData>>2]=HEAP32[$pStrmData>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$value>>2]|0;
 $7 = ($6>>>0)>(255);
 if ($7) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$picParamSetId>>2] = $6;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckFrameNum($pStrmData,$maxFrameNum,$frameNum) {
 $pStrmData = $pStrmData|0;
 $maxFrameNum = $maxFrameNum|0;
 $frameNum = $frameNum|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa = 0, $tmpStrmData = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData>>2]=HEAP32[$pStrmData>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $i$0 = 0;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $6 = $maxFrameNum >>> $i$0;
  $7 = ($6|0)==(0);
  $8 = (($i$0) + 1)|0;
  if ($7) {
   $i$0$lcssa = $i$0;
   break;
  } else {
   $i$0 = $8;
  }
 }
 $9 = (($i$0$lcssa) + -1)|0;
 $10 = (_h264bsdGetBits($tmpStrmData,$9)|0);
 $11 = ($10|0)==(-1);
 if ($11) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$frameNum>>2] = $10;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckIdrPicId($pStrmData,$maxFrameNum,$nalUnitType,$idrPicId) {
 $pStrmData = $pStrmData|0;
 $maxFrameNum = $maxFrameNum|0;
 $nalUnitType = $nalUnitType|0;
 $idrPicId = $idrPicId|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa = 0, $tmpStrmData = 0, $value = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 20|0;
 $tmpStrmData = sp;
 $0 = ($nalUnitType|0)==(5);
 if (!($0)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$tmpStrmData>>2]=HEAP32[$pStrmData>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $1 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $i$0 = 0;
 } else {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = $maxFrameNum >>> $i$0;
  $8 = ($7|0)==(0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $i$0$lcssa = $i$0;
   break;
  } else {
   $i$0 = $9;
  }
 }
 $10 = (($i$0$lcssa) + -1)|0;
 $11 = (_h264bsdGetBits($tmpStrmData,$10)|0);
 $12 = ($11|0)==(-1);
 if ($12) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$idrPicId)|0);
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckPicOrderCntLsb($pStrmData,$pSeqParamSet,$nalUnitType,$picOrderCntLsb) {
 $pStrmData = $pStrmData|0;
 $pSeqParamSet = $pSeqParamSet|0;
 $nalUnitType = $nalUnitType|0;
 $picOrderCntLsb = $picOrderCntLsb|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa = 0, $i$1 = 0, $i$1$lcssa = 0, $tmpStrmData = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData>>2]=HEAP32[$pStrmData>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($pSeqParamSet)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $i$0 = 0;
 while(1) {
  $8 = $7 >>> $i$0;
  $9 = ($8|0)==(0);
  $10 = (($i$0) + 1)|0;
  if ($9) {
   $i$0$lcssa = $i$0;
   break;
  } else {
   $i$0 = $10;
  }
 }
 $11 = (($i$0$lcssa) + -1)|0;
 $12 = (_h264bsdGetBits($tmpStrmData,$11)|0);
 $13 = ($12|0)==(-1);
 if ($13) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($nalUnitType|0)==(5);
 if ($14) {
  $15 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $$0 = $15;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = ((($pSeqParamSet)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $i$1 = 0;
 while(1) {
  $19 = $18 >>> $i$1;
  $20 = ($19|0)==(0);
  $21 = (($i$1) + 1)|0;
  if ($20) {
   $i$1$lcssa = $i$1;
   break;
  } else {
   $i$1 = $21;
  }
 }
 $22 = (($i$1$lcssa) + -1)|0;
 $23 = (_h264bsdGetBits($tmpStrmData,$22)|0);
 $24 = ($23|0)==(-1);
 if ($24) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$picOrderCntLsb>>2] = $23;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckDeltaPicOrderCntBottom($pStrmData,$pSeqParamSet,$nalUnitType,$deltaPicOrderCntBottom) {
 $pStrmData = $pStrmData|0;
 $pSeqParamSet = $pSeqParamSet|0;
 $nalUnitType = $nalUnitType|0;
 $deltaPicOrderCntBottom = $deltaPicOrderCntBottom|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa = 0, $i$1 = 0, $i$1$lcssa = 0, $tmpStrmData = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData>>2]=HEAP32[$pStrmData>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($pSeqParamSet)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $i$0 = 0;
 while(1) {
  $8 = $7 >>> $i$0;
  $9 = ($8|0)==(0);
  $10 = (($i$0) + 1)|0;
  if ($9) {
   $i$0$lcssa = $i$0;
   break;
  } else {
   $i$0 = $10;
  }
 }
 $11 = (($i$0$lcssa) + -1)|0;
 $12 = (_h264bsdGetBits($tmpStrmData,$11)|0);
 $13 = ($12|0)==(-1);
 if ($13) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($nalUnitType|0)==(5);
 if ($14) {
  $15 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $$0 = $15;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = ((($pSeqParamSet)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $i$1 = 0;
 while(1) {
  $19 = $18 >>> $i$1;
  $20 = ($19|0)==(0);
  $21 = (($i$1) + 1)|0;
  if ($20) {
   $i$1$lcssa = $i$1;
   break;
  } else {
   $i$1 = $21;
  }
 }
 $22 = (($i$1$lcssa) + -1)|0;
 $23 = (_h264bsdGetBits($tmpStrmData,$22)|0);
 $24 = ($23|0)==(-1);
 if ($24) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$deltaPicOrderCntBottom)|0);
 $$0 = $25;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckDeltaPicOrderCnt($pStrmData,$pSeqParamSet,$nalUnitType,$picOrderPresentFlag,$deltaPicOrderCnt) {
 $pStrmData = $pStrmData|0;
 $pSeqParamSet = $pSeqParamSet|0;
 $nalUnitType = $nalUnitType|0;
 $picOrderPresentFlag = $picOrderPresentFlag|0;
 $deltaPicOrderCnt = $deltaPicOrderCnt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa = 0, $tmpStrmData = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData>>2]=HEAP32[$pStrmData>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($pSeqParamSet)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $i$0 = 0;
 while(1) {
  $8 = $7 >>> $i$0;
  $9 = ($8|0)==(0);
  $10 = (($i$0) + 1)|0;
  if ($9) {
   $i$0$lcssa = $i$0;
   break;
  } else {
   $i$0 = $10;
  }
 }
 $11 = (($i$0$lcssa) + -1)|0;
 $12 = (_h264bsdGetBits($tmpStrmData,$11)|0);
 $13 = ($12|0)==(-1);
 if ($13) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($nalUnitType|0)==(5);
 if ($14) {
  $15 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $$0 = $15;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$deltaPicOrderCnt)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($picOrderPresentFlag|0)==(0);
 if (!($19)) {
  $20 = ((($deltaPicOrderCnt)) + 4|0);
  $21 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$20)|0);
  $22 = ($21|0)==(0);
  if (!($22)) {
   $$0 = $21;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdCheckPriorPicsFlag($noOutputOfPriorPicsFlag,$pStrmData,$pSeqParamSet,$pPicParamSet,$nalUnitType) {
 $noOutputOfPriorPicsFlag = $noOutputOfPriorPicsFlag|0;
 $pStrmData = $pStrmData|0;
 $pSeqParamSet = $pSeqParamSet|0;
 $pPicParamSet = $pPicParamSet|0;
 $nalUnitType = $nalUnitType|0;
 var $$ = 0, $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa = 0, $i$1 = 0, $i$1$lcssa = 0, $ivalue = 0, $tmpStrmData = 0;
 var $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 24|0;
 $ivalue = sp + 20|0;
 $tmpStrmData = sp;
 ;HEAP32[$tmpStrmData>>2]=HEAP32[$pStrmData>>2]|0;HEAP32[$tmpStrmData+4>>2]=HEAP32[$pStrmData+4>>2]|0;HEAP32[$tmpStrmData+8>>2]=HEAP32[$pStrmData+8>>2]|0;HEAP32[$tmpStrmData+12>>2]=HEAP32[$pStrmData+12>>2]|0;HEAP32[$tmpStrmData+16>>2]=HEAP32[$pStrmData+16>>2]|0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($pSeqParamSet)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $i$0 = 0;
 while(1) {
  $8 = $7 >>> $i$0;
  $9 = ($8|0)==(0);
  $10 = (($i$0) + 1)|0;
  if ($9) {
   $i$0$lcssa = $i$0;
   break;
  } else {
   $i$0 = $10;
  }
 }
 $11 = (($i$0$lcssa) + -1)|0;
 $12 = (_h264bsdGetBits($tmpStrmData,$11)|0);
 $13 = ($12|0)==(-1);
 if ($13) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ((($pSeqParamSet)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = ((($pSeqParamSet)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $i$1 = 0;
  while(1) {
   $21 = $20 >>> $i$1;
   $22 = ($21|0)==(0);
   $23 = (($i$1) + 1)|0;
   if ($22) {
    $i$1$lcssa = $i$1;
    break;
   } else {
    $i$1 = $23;
   }
  }
  $24 = (($i$1$lcssa) + -1)|0;
  $25 = (_h264bsdGetBits($tmpStrmData,$24)|0);
  $26 = ($25|0)==(-1);
  if ($26) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $27 = ((($pPicParamSet)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0);
  if (!($29)) {
   $30 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$ivalue)|0);
   $31 = ($30|0)==(0);
   if (!($31)) {
    $$0 = $30;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $$pr = HEAP32[$16>>2]|0;
  $32 = $$pr;
 } else {
  $32 = $17;
 }
 $33 = ($32|0)==(1);
 if ($33) {
  $34 = ((($pSeqParamSet)) + 24|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0);
  if ($36) {
   $37 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$ivalue)|0);
   $38 = ($37|0)==(0);
   if (!($38)) {
    $$0 = $37;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = ((($pPicParamSet)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0);
   if (!($41)) {
    $42 = (_h264bsdDecodeExpGolombSigned($tmpStrmData,$ivalue)|0);
    $43 = ($42|0)==(0);
    if (!($43)) {
     $$0 = $42;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $44 = ((($pPicParamSet)) + 68|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 if (!($46)) {
  $47 = (_h264bsdDecodeExpGolombUnsigned($tmpStrmData,$value)|0);
  $48 = ($47|0)==(0);
  if (!($48)) {
   $$0 = $47;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (_h264bsdGetBits($tmpStrmData,1)|0);
 HEAP32[$noOutputOfPriorPicsFlag>>2] = $49;
 $50 = ($49|0)==(-1);
 $$ = $50&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeSliceData($pStrmData,$pStorage,$currImage,$pSliceHeader) {
 $pStrmData = $pStrmData|0;
 $pStorage = $pStorage|0;
 $currImage = $currImage|0;
 $pSliceHeader = $pSliceHeader|0;
 var $$0 = 0, $$mbCount$0 = 0, $$mbCount$0$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $currMbAddr$0 = 0, $mbCount$0 = 0, $mbData = 0, $or$cond = 0, $or$cond3 = 0, $pSliceHeader$idx = 0, $pSliceHeader$idx$val = 0, $pSliceHeader$idx4 = 0, $pSliceHeader$idx4$val = 0;
 var $pSliceHeader$idx5 = 0, $pSliceHeader$idx5$val = 0, $prevSkipped$0 = 0, $prevSkipped$1 = 0, $prevSkipped$2 = 0, $qpY = 0, $skipRun = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mbData = sp + 8|0;
 $skipRun = sp + 4|0;
 $qpY = sp;
 $0 = $mbData;
 $1 = (0 - ($0))|0;
 $2 = $1 & 15;
 $3 = (($mbData) + ($2)|0);
 $4 = ((($pStorage)) + 3376|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$pSliceHeader>>2]|0;
 HEAP32[$skipRun>>2] = 0;
 $7 = ((($pStorage)) + 1192|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($pStorage)) + 1200|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($pStorage)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($pSliceHeader)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($14))|0;
 HEAP32[$qpY>>2] = $17;
 $18 = ((($pSliceHeader)) + 36|0);
 $19 = ((($pStorage)) + 1212|0);
 $pSliceHeader$idx = ((($pSliceHeader)) + 52|0);
 $pSliceHeader$idx4 = ((($pSliceHeader)) + 56|0);
 $pSliceHeader$idx5 = ((($pSliceHeader)) + 60|0);
 $20 = ((($pSliceHeader)) + 4|0);
 $21 = ((($pSliceHeader)) + 44|0);
 $22 = ((($pStorage)) + 1220|0);
 $23 = ((($pStorage)) + 1172|0);
 $24 = ((($pStorage)) + 1176|0);
 $25 = ((($5)) + 12|0);
 $currMbAddr$0 = $6;$mbCount$0 = 0;$prevSkipped$0 = 0;
 while(1) {
  $26 = HEAP32[$18>>2]|0;
  $27 = ($26|0)==(0);
  $28 = HEAP32[$19>>2]|0;
  if ($27) {
   $29 = (((($28) + (($currMbAddr$0*216)|0)|0)) + 196|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0);
   if (!($31)) {
    $$0 = 1;
    label = 20;
    break;
   }
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = HEAP32[$11>>2]|0;
  $34 = ((($33)) + 56|0);
  $35 = HEAP32[$34>>2]|0;
  $pSliceHeader$idx$val = HEAP32[$pSliceHeader$idx>>2]|0;
  $pSliceHeader$idx4$val = HEAP32[$pSliceHeader$idx4>>2]|0;
  $pSliceHeader$idx5$val = HEAP32[$pSliceHeader$idx5>>2]|0;
  $36 = (((($28) + (($currMbAddr$0*216)|0)|0)) + 4|0);
  HEAP32[$36>>2] = $32;
  $37 = (((($28) + (($currMbAddr$0*216)|0)|0)) + 8|0);
  HEAP32[$37>>2] = $pSliceHeader$idx$val;
  $38 = (((($28) + (($currMbAddr$0*216)|0)|0)) + 12|0);
  HEAP32[$38>>2] = $pSliceHeader$idx4$val;
  $39 = (((($28) + (($currMbAddr$0*216)|0)|0)) + 16|0);
  HEAP32[$39>>2] = $pSliceHeader$idx5$val;
  $40 = (((($28) + (($currMbAddr$0*216)|0)|0)) + 24|0);
  HEAP32[$40>>2] = $35;
  $41 = HEAP32[$20>>2]|0;
  $42 = ($41|0)==(2);
  if ($42) {
   $prevSkipped$1 = $prevSkipped$0;
  } else {
   $43 = ($41|0)==(7);
   $44 = ($prevSkipped$0|0)!=(0);
   $or$cond3 = $44 | $43;
   if ($or$cond3) {
    $prevSkipped$1 = $prevSkipped$0;
   } else {
    $45 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$skipRun)|0);
    $46 = ($45|0)==(0);
    if (!($46)) {
     $$0 = $45;
     label = 20;
     break;
    }
    $47 = HEAP32[$skipRun>>2]|0;
    $48 = HEAP32[$24>>2]|0;
    $49 = (($48) - ($currMbAddr$0))|0;
    $50 = ($47>>>0)>($49>>>0);
    if ($50) {
     $$0 = 1;
     label = 20;
     break;
    }
    $51 = ($47|0)==(0);
    if ($51) {
     $prevSkipped$1 = 0;
    } else {
     _H264SwDecMemset($25,0,164);
     HEAP32[$5>>2] = 0;
     $prevSkipped$1 = 1;
    }
   }
  }
  $52 = HEAP32[$skipRun>>2]|0;
  $53 = ($52|0)==(0);
  if ($53) {
   $55 = HEAP32[$19>>2]|0;
   $56 = (($55) + (($currMbAddr$0*216)|0)|0);
   $57 = HEAP32[$20>>2]|0;
   $58 = HEAP32[$21>>2]|0;
   $59 = (_h264bsdDecodeMacroblockLayer($pStrmData,$5,$56,$57,$58)|0);
   $60 = ($59|0)==(0);
   if ($60) {
    $prevSkipped$2 = 0;
   } else {
    $$0 = $59;
    label = 20;
    break;
   }
  } else {
   $54 = (($52) + -1)|0;
   HEAP32[$skipRun>>2] = $54;
   $prevSkipped$2 = $prevSkipped$1;
  }
  $61 = HEAP32[$19>>2]|0;
  $62 = (($61) + (($currMbAddr$0*216)|0)|0);
  $63 = HEAP32[$11>>2]|0;
  $64 = ((($63)) + 64|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_h264bsdDecodeMacroblock($62,$5,$currImage,$22,$qpY,$currMbAddr$0,$65,$3)|0);
  $67 = ($66|0)==(0);
  if (!($67)) {
   $$0 = $66;
   label = 20;
   break;
  }
  $68 = HEAP32[$19>>2]|0;
  $69 = (((($68) + (($currMbAddr$0*216)|0)|0)) + 196|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)==(1);
  $72 = $71&1;
  $$mbCount$0 = (($72) + ($mbCount$0))|0;
  $73 = (_h264bsdMoreRbspData($pStrmData)|0);
  $74 = HEAP32[$skipRun>>2]|0;
  $75 = $74 | $73;
  $76 = ($75|0)!=(0);
  $77 = HEAP32[$20>>2]|0;
  switch ($77|0) {
  case 7: case 2:  {
   HEAP32[$10>>2] = $currMbAddr$0;
   break;
  }
  default: {
  }
  }
  $78 = HEAP32[$23>>2]|0;
  $79 = HEAP32[$24>>2]|0;
  $80 = (_h264bsdNextMbAddress($78,$79,$currMbAddr$0)|0);
  $81 = $76 ^ 1;
  $82 = ($80|0)!=(0);
  $or$cond = $82 | $81;
  if (!($or$cond)) {
   $$0 = 1;
   label = 20;
   break;
  }
  if ($76) {
   $currMbAddr$0 = $80;$mbCount$0 = $$mbCount$0;$prevSkipped$0 = $prevSkipped$2;
  } else {
   $$mbCount$0$lcssa = $$mbCount$0;
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  $83 = ((($pStorage)) + 1196|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + ($$mbCount$0$lcssa))|0;
  $86 = HEAP32[$24>>2]|0;
  $87 = ($85>>>0)>($86>>>0);
  if ($87) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$83>>2] = $85;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 20) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdMarkSliceCorrupted($pStorage,$firstMbInSlice) {
 $pStorage = $pStorage|0;
 $firstMbInSlice = $firstMbInSlice|0;
 var $$ = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $currMbAddr$0 = 0, $currMbAddr$0$ph = 0, $i$0 = 0, $i$0$in = 0, $i$0$in$ph = 0, $i$0$lcssa13 = 0, $tmp$0$ph = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 1192|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($pStorage)) + 1200|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $$pre = ((($pStorage)) + 1212|0);
 L1: do {
  if ($4) {
   $currMbAddr$0$ph = $firstMbInSlice;
  } else {
   $5 = ((($pStorage)) + 16|0);
   $i$0$in$ph = $3;$tmp$0$ph = 0;
   while(1) {
    $i$0$in = $i$0$in$ph;
    while(1) {
     $i$0 = (($i$0$in) + -1)|0;
     $6 = ($i$0>>>0)>($firstMbInSlice>>>0);
     if (!($6)) {
      $currMbAddr$0$ph = $i$0;
      break L1;
     }
     $7 = HEAP32[$$pre>>2]|0;
     $8 = (((($7) + (($i$0*216)|0)|0)) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==($1|0);
     if ($10) {
      $i$0$lcssa13 = $i$0;
      break;
     } else {
      $i$0$in = $i$0;
     }
    }
    $11 = (($tmp$0$ph) + 1)|0;
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 52|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14>>>0)>(10);
    $$ = $15 ? $14 : 10;
    $16 = ($11>>>0)<($$>>>0);
    if ($16) {
     $i$0$in$ph = $i$0$lcssa13;$tmp$0$ph = $11;
    } else {
     $currMbAddr$0$ph = $i$0$lcssa13;
     break;
    }
   }
  }
 } while(0);
 $17 = ((($pStorage)) + 1172|0);
 $18 = ((($pStorage)) + 1176|0);
 $currMbAddr$0 = $currMbAddr$0$ph;
 while(1) {
  $19 = HEAP32[$$pre>>2]|0;
  $20 = (((($19) + (($currMbAddr$0*216)|0)|0)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==($1|0);
  if (!($22)) {
   label = 11;
   break;
  }
  $23 = (((($19) + (($currMbAddr$0*216)|0)|0)) + 196|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   label = 11;
   break;
  }
  $26 = (($24) + -1)|0;
  HEAP32[$23>>2] = $26;
  $27 = HEAP32[$17>>2]|0;
  $28 = HEAP32[$18>>2]|0;
  $29 = (_h264bsdNextMbAddress($27,$28,$currMbAddr$0)|0);
  $30 = ($29|0)==(0);
  if ($30) {
   label = 11;
   break;
  } else {
   $currMbAddr$0 = $29;
  }
 }
 if ((label|0) == 11) {
  return;
 }
}
function _h264bsdDecodeMacroblockLayer($pStrmData,$pMbLayer,$pMb,$sliceType,$numRefIdxActive) {
 $pStrmData = $pStrmData|0;
 $pMbLayer = $pMbLayer|0;
 $pMb = $pMb|0;
 $sliceType = $sliceType|0;
 $numRefIdxActive = $numRefIdxActive|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0, $$0$i = 0, $$0$i$1$i = 0, $$0$i$2$i = 0, $$0$i$3$i = 0, $$0$i$i = 0, $$0$i12 = 0, $$0$i15 = 0, $$0$i21 = 0, $$0110$i = 0, $$0110$i$us = 0, $$lcssa = 0, $$lcssa104 = 0, $$lcssa35 = 0, $$lobit$1$i = 0, $$lobit$2$i = 0, $$lobit$3$i = 0, $$lobit$4$i = 0;
 var $$lobit$5$i = 0, $$lobit$6$i = 0, $$lobit$7$i = 0, $$lobit$i = 0, $$not = 0, $$off = 0, $$pr$1$i = 0, $$pr$2$i = 0, $$pr$3$i = 0, $$pr$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $blockIndex$0$be$i = 0, $blockIndex$0$be$i$lcssa = 0, $blockIndex$0$be$i$us = 0, $blockIndex$011$i = 0, $blockIndex$011$i$us = 0, $blockIndex$28$i = 0, $i$0$ph$i = 0, $i$037 = 0, $i$213$i = 0, $itmp = 0, $itmp$i = 0, $itmp$i17 = 0, $j$010$i = 0, $j$08$1$i = 0, $j$08$2$i = 0, $j$08$3$i = 0, $j$08$i = 0, $j$19$i = 0, $level$038 = 0;
 var $not$$i = 0, $or$cond = 0, $or$cond$1$i = 0, $or$cond$2$i = 0, $or$cond$3$i = 0, $or$cond$i = 0, $or$cond$i20 = 0, $or$cond3 = 0, $or$cond3$i = 0, $or$cond5 = 0, $switch = 0, $tmp$0 = 0, $tmp$0$i = 0, $tmp$1$1$i = 0, $tmp$1$2$i = 0, $tmp$1$3$i = 0, $tmp$1$4$i = 0, $tmp$1$5$i = 0, $tmp$1$6$i = 0, $tmp$1$7$i = 0;
 var $tmp$1$i = 0, $value = 0, $value$i = 0, $value$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value$i16 = sp + 20|0;
 $itmp$i17 = sp + 16|0;
 $value$i = sp + 12|0;
 $itmp$i = sp + 8|0;
 $value = sp + 4|0;
 $itmp = sp;
 _H264SwDecMemset($pMbLayer,0,2088);
 $0 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
 $1 = HEAP32[$value>>2]|0;
 L1: do {
  switch ($sliceType|0) {
  case 2: case 7:  {
   $2 = (($1) + 6)|0;
   $3 = ($2>>>0)>(31);
   $4 = ($0|0)!=(0);
   $or$cond3 = $4 | $3;
   if ($or$cond3) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$pMbLayer>>2] = $2;
    $$pre$phiZ2D = $pMbLayer;$8 = $2;
    break L1;
   }
   break;
  }
  default: {
   $5 = (($1) + 1)|0;
   $6 = ($5>>>0)>(31);
   $7 = ($0|0)!=(0);
   $or$cond5 = $7 | $6;
   if ($or$cond5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$pMbLayer>>2] = $5;
    $$pre$phiZ2D = $pMbLayer;$8 = $5;
    break L1;
   }
  }
  }
 } while(0);
 $9 = ($8|0)==(31);
 L11: do {
  if ($9) {
   while(1) {
    $10 = (_h264bsdIsByteAligned($pStrmData)|0);
    $11 = ($10|0)==(0);
    if (!($11)) {
     break;
    }
    $12 = (_h264bsdGetBits($pStrmData,1)|0);
    $13 = ($12|0)==(0);
    if (!($13)) {
     $$0 = 1;
     label = 127;
     break;
    }
   }
   if ((label|0) == 127) {
    STACKTOP = sp;return ($$0|0);
   }
   $14 = ((($pMbLayer)) + 328|0);
   $i$037 = 0;$level$038 = $14;
   while(1) {
    $15 = (_h264bsdGetBits($pStrmData,8)|0);
    HEAP32[$value>>2] = $15;
    $16 = ($15|0)==(-1);
    if ($16) {
     $$0 = 1;
     break;
    }
    $17 = ((($level$038)) + 4|0);
    HEAP32[$level$038>>2] = $15;
    $18 = (($i$037) + 1)|0;
    $19 = ($18>>>0)<(384);
    if ($19) {
     $i$037 = $18;$level$038 = $17;
    } else {
     break L11;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $20 = ($8>>>0)<(6);
   $not$$i = ($8|0)!=(6);
   $$$i = $not$$i&1;
   $$0$i = $20 ? 2 : $$$i;
   $$not = $20 ^ 1;
   $switch = ($8>>>0)<(4);
   $or$cond = $switch | $$not;
   if ($or$cond) {
    L25: do {
     switch ($$0$i|0) {
     case 2:  {
      $121 = ($numRefIdxActive>>>0)>(1);
      if ($121) {
       switch ($8|0) {
       case 0: case 1:  {
        $i$0$ph$i = 0;
        break;
       }
       case 3: case 2:  {
        $i$0$ph$i = 1;
        break;
       }
       default: {
        $i$0$ph$i = 3;
       }
       }
       $122 = ($numRefIdxActive>>>0)>(2);
       $123 = $122&1;
       $131 = $i$0$ph$i;$j$010$i = 0;
       while(1) {
        $124 = (_h264bsdDecodeExpGolombTruncated($pStrmData,$value$i16,$123)|0);
        $125 = ($124|0)==(0);
        if (!($125)) {
         $$0$i21 = 1;
         break L25;
        }
        $126 = HEAP32[$value$i16>>2]|0;
        $127 = ($126>>>0)<($numRefIdxActive>>>0);
        if (!($127)) {
         $$0$i21 = 1;
         break L25;
        }
        $128 = (((($pMbLayer)) + 144|0) + ($j$010$i<<2)|0);
        HEAP32[$128>>2] = $126;
        $129 = (($j$010$i) + 1)|0;
        $130 = (($131) + -1)|0;
        $132 = ($131|0)==(0);
        if ($132) {
         break;
        } else {
         $131 = $130;$j$010$i = $129;
        }
       }
      }
      switch ($8|0) {
      case 0: case 1:  {
       $145 = 0;$j$19$i = 0;
       break;
      }
      case 3: case 2:  {
       $145 = 1;$j$19$i = 0;
       break;
      }
      default: {
       $145 = 3;$j$19$i = 0;
      }
      }
      while(1) {
       $133 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i17)|0);
       $134 = ($133|0)==(0);
       if (!($134)) {
        $$0$i21 = $133;
        break L25;
       }
       $135 = HEAP32[$itmp$i17>>2]|0;
       $136 = $135&65535;
       $137 = (((($pMbLayer)) + 160|0) + ($j$19$i<<2)|0);
       HEAP16[$137>>1] = $136;
       $138 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i17)|0);
       $139 = ($138|0)==(0);
       if (!($139)) {
        $$0$i21 = $138;
        break L25;
       }
       $140 = HEAP32[$itmp$i17>>2]|0;
       $141 = $140&65535;
       $142 = (((((($pMbLayer)) + 160|0) + ($j$19$i<<2)|0)) + 2|0);
       HEAP16[$142>>1] = $141;
       $143 = (($j$19$i) + 1)|0;
       $144 = (($145) + -1)|0;
       $146 = ($145|0)==(0);
       if ($146) {
        $$0$i21 = 0;
        break;
       } else {
        $145 = $144;$j$19$i = $143;
       }
      }
      break;
     }
     case 0:  {
      HEAP32[$itmp$i17>>2] = 0;
      $162 = 0;$i$213$i = 0;
      while(1) {
       $147 = (_h264bsdShowBits32($pStrmData)|0);
       $$lobit$i = $147 >>> 31;
       $148 = (((($pMbLayer)) + 12|0) + ($i$213$i<<2)|0);
       HEAP32[$148>>2] = $$lobit$i;
       $149 = $147 << 1;
       $150 = ($$lobit$i|0)==(0);
       if ($150) {
        $151 = $147 >>> 28;
        $152 = $151 & 7;
        $153 = (((($pMbLayer)) + 76|0) + ($i$213$i<<2)|0);
        HEAP32[$153>>2] = $152;
        $154 = $147 << 4;
        $156 = $154;$tmp$1$i = 1;
       } else {
        $156 = $149;$tmp$1$i = 0;
       }
       $155 = $i$213$i | 1;
       $$lobit$1$i = $156 >>> 31;
       $157 = (((($pMbLayer)) + 12|0) + ($155<<2)|0);
       HEAP32[$157>>2] = $$lobit$1$i;
       $158 = $156 << 1;
       $159 = ($$lobit$1$i|0)==(0);
       if ($159) {
        $169 = $156 >>> 28;
        $170 = $169 & 7;
        $171 = (((($pMbLayer)) + 76|0) + ($155<<2)|0);
        HEAP32[$171>>2] = $170;
        $172 = $156 << 4;
        $173 = (($tmp$1$i) + 1)|0;
        $175 = $172;$tmp$1$1$i = $173;
       } else {
        $175 = $158;$tmp$1$1$i = $tmp$1$i;
       }
       $174 = (($155) + 1)|0;
       $$lobit$2$i = $175 >>> 31;
       $176 = (((($pMbLayer)) + 12|0) + ($174<<2)|0);
       HEAP32[$176>>2] = $$lobit$2$i;
       $177 = $175 << 1;
       $178 = ($$lobit$2$i|0)==(0);
       if ($178) {
        $179 = $175 >>> 28;
        $180 = $179 & 7;
        $181 = (((($pMbLayer)) + 76|0) + ($174<<2)|0);
        HEAP32[$181>>2] = $180;
        $182 = $175 << 4;
        $183 = (($tmp$1$1$i) + 1)|0;
        $185 = $182;$tmp$1$2$i = $183;
       } else {
        $185 = $177;$tmp$1$2$i = $tmp$1$1$i;
       }
       $184 = $i$213$i | 3;
       $$lobit$3$i = $185 >>> 31;
       $186 = (((($pMbLayer)) + 12|0) + ($184<<2)|0);
       HEAP32[$186>>2] = $$lobit$3$i;
       $187 = $185 << 1;
       $188 = ($$lobit$3$i|0)==(0);
       if ($188) {
        $189 = $185 >>> 28;
        $190 = $189 & 7;
        $191 = (((($pMbLayer)) + 76|0) + ($184<<2)|0);
        HEAP32[$191>>2] = $190;
        $192 = $185 << 4;
        $193 = (($tmp$1$2$i) + 1)|0;
        $195 = $192;$tmp$1$3$i = $193;
       } else {
        $195 = $187;$tmp$1$3$i = $tmp$1$2$i;
       }
       $194 = (($184) + 1)|0;
       $$lobit$4$i = $195 >>> 31;
       $196 = (((($pMbLayer)) + 12|0) + ($194<<2)|0);
       HEAP32[$196>>2] = $$lobit$4$i;
       $197 = $195 << 1;
       $198 = ($$lobit$4$i|0)==(0);
       if ($198) {
        $199 = $195 >>> 28;
        $200 = $199 & 7;
        $201 = (((($pMbLayer)) + 76|0) + ($194<<2)|0);
        HEAP32[$201>>2] = $200;
        $202 = $195 << 4;
        $203 = (($tmp$1$3$i) + 1)|0;
        $205 = $202;$tmp$1$4$i = $203;
       } else {
        $205 = $197;$tmp$1$4$i = $tmp$1$3$i;
       }
       $204 = (($184) + 2)|0;
       $$lobit$5$i = $205 >>> 31;
       $206 = (((($pMbLayer)) + 12|0) + ($204<<2)|0);
       HEAP32[$206>>2] = $$lobit$5$i;
       $207 = $205 << 1;
       $208 = ($$lobit$5$i|0)==(0);
       if ($208) {
        $209 = $205 >>> 28;
        $210 = $209 & 7;
        $211 = (((($pMbLayer)) + 76|0) + ($204<<2)|0);
        HEAP32[$211>>2] = $210;
        $212 = $205 << 4;
        $213 = (($tmp$1$4$i) + 1)|0;
        $215 = $212;$tmp$1$5$i = $213;
       } else {
        $215 = $207;$tmp$1$5$i = $tmp$1$4$i;
       }
       $214 = (($184) + 3)|0;
       $$lobit$6$i = $215 >>> 31;
       $216 = (((($pMbLayer)) + 12|0) + ($214<<2)|0);
       HEAP32[$216>>2] = $$lobit$6$i;
       $217 = $215 << 1;
       $218 = ($$lobit$6$i|0)==(0);
       if ($218) {
        $219 = $215 >>> 28;
        $220 = $219 & 7;
        $221 = (((($pMbLayer)) + 76|0) + ($214<<2)|0);
        HEAP32[$221>>2] = $220;
        $222 = $215 << 4;
        $223 = (($tmp$1$5$i) + 1)|0;
        $225 = $222;$tmp$1$6$i = $223;
       } else {
        $225 = $217;$tmp$1$6$i = $tmp$1$5$i;
       }
       $224 = $i$213$i | 7;
       $$lobit$7$i = $225 >>> 31;
       $226 = (((($pMbLayer)) + 12|0) + ($224<<2)|0);
       HEAP32[$226>>2] = $$lobit$7$i;
       $227 = $225 << 1;
       $228 = ($$lobit$7$i|0)==(0);
       if ($228) {
        $229 = $225 >>> 28;
        $230 = $229 & 7;
        $231 = (((($pMbLayer)) + 76|0) + ($224<<2)|0);
        HEAP32[$231>>2] = $230;
        $232 = $225 << 4;
        $233 = (($tmp$1$6$i) + 1)|0;
        $429 = $232;$tmp$1$7$i = $233;
       } else {
        $429 = $227;$tmp$1$7$i = $tmp$1$6$i;
       }
       $234 = ($tmp$1$7$i*3)|0;
       $235 = (($234) + 8)|0;
       $236 = (_h264bsdFlushBits($pStrmData,$235)|0);
       $237 = ($236|0)==(-1);
       if ($237) {
        $$lcssa = $429;
        label = 79;
        break;
       }
       $160 = (($i$213$i) + 8)|0;
       $161 = (($162) + 1)|0;
       HEAP32[$itmp$i17>>2] = $161;
       $163 = ($161|0)<(2);
       if ($163) {
        $162 = $161;$i$213$i = $160;
       } else {
        $$lcssa104 = $429;
        label = 76;
        break;
       }
      }
      if ((label|0) == 76) {
       HEAP32[$value$i16>>2] = $$lcssa104;
       label = 77;
       break L25;
      }
      else if ((label|0) == 79) {
       HEAP32[$value$i16>>2] = $$lcssa;
       $$0$i21 = 1;
       break L25;
      }
      break;
     }
     case 1:  {
      label = 77;
      break;
     }
     default: {
      $$0$i21 = 0;
     }
     }
    } while(0);
    if ((label|0) == 77) {
     $164 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i16)|0);
     $165 = ($164|0)!=(0);
     $166 = HEAP32[$value$i16>>2]|0;
     $167 = ($166>>>0)>(3);
     $or$cond$i20 = $165 | $167;
     if ($or$cond$i20) {
      $$0$i21 = 1;
     } else {
      $168 = ((($pMbLayer)) + 140|0);
      HEAP32[$168>>2] = $166;
      $$0$i21 = 0;
     }
    }
    $tmp$0 = $$0$i21;
   } else {
    $21 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i)|0);
    $22 = ($21|0)!=(0);
    $23 = HEAP32[$value$i>>2]|0;
    $24 = ($23>>>0)>(3);
    $or$cond$i = $22 | $24;
    L81: do {
     if ($or$cond$i) {
      $$0$i15 = 1;
     } else {
      $25 = ((($pMbLayer)) + 176|0);
      HEAP32[$25>>2] = $23;
      $26 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i)|0);
      $27 = ($26|0)!=(0);
      $28 = HEAP32[$value$i>>2]|0;
      $29 = ($28>>>0)>(3);
      $or$cond$1$i = $27 | $29;
      if ($or$cond$1$i) {
       $$0$i15 = 1;
      } else {
       $54 = ((($pMbLayer)) + 180|0);
       HEAP32[$54>>2] = $28;
       $111 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i)|0);
       $112 = ($111|0)!=(0);
       $113 = HEAP32[$value$i>>2]|0;
       $114 = ($113>>>0)>(3);
       $or$cond$2$i = $112 | $114;
       if ($or$cond$2$i) {
        $$0$i15 = 1;
       } else {
        $69 = ((($pMbLayer)) + 184|0);
        HEAP32[$69>>2] = $113;
        $115 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value$i)|0);
        $116 = ($115|0)!=(0);
        $117 = HEAP32[$value$i>>2]|0;
        $118 = ($117>>>0)>(3);
        $or$cond$3$i = $116 | $118;
        if ($or$cond$3$i) {
         $$0$i15 = 1;
        } else {
         $84 = ((($pMbLayer)) + 188|0);
         HEAP32[$84>>2] = $117;
         $119 = ($numRefIdxActive>>>0)>(1);
         $120 = ($8|0)!=(5);
         $or$cond3$i = $119 & $120;
         if ($or$cond3$i) {
          $30 = ($numRefIdxActive>>>0)>(2);
          $31 = $30&1;
          $32 = (_h264bsdDecodeExpGolombTruncated($pStrmData,$value$i,$31)|0);
          $33 = ($32|0)==(0);
          if (!($33)) {
           $$0$i15 = 1;
           break;
          }
          $35 = HEAP32[$value$i>>2]|0;
          $36 = ($35>>>0)<($numRefIdxActive>>>0);
          if (!($36)) {
           $$0$i15 = 1;
           break;
          }
          $37 = ((($pMbLayer)) + 192|0);
          HEAP32[$37>>2] = $35;
          $38 = (_h264bsdDecodeExpGolombTruncated($pStrmData,$value$i,$31)|0);
          $39 = ($38|0)==(0);
          if (!($39)) {
           $$0$i15 = 1;
           break;
          }
          $98 = HEAP32[$value$i>>2]|0;
          $99 = ($98>>>0)<($numRefIdxActive>>>0);
          if (!($99)) {
           $$0$i15 = 1;
           break;
          }
          $100 = ((($pMbLayer)) + 196|0);
          HEAP32[$100>>2] = $98;
          $101 = (_h264bsdDecodeExpGolombTruncated($pStrmData,$value$i,$31)|0);
          $102 = ($101|0)==(0);
          if (!($102)) {
           $$0$i15 = 1;
           break;
          }
          $103 = HEAP32[$value$i>>2]|0;
          $104 = ($103>>>0)<($numRefIdxActive>>>0);
          if (!($104)) {
           $$0$i15 = 1;
           break;
          }
          $105 = ((($pMbLayer)) + 200|0);
          HEAP32[$105>>2] = $103;
          $106 = (_h264bsdDecodeExpGolombTruncated($pStrmData,$value$i,$31)|0);
          $107 = ($106|0)==(0);
          if (!($107)) {
           $$0$i15 = 1;
           break;
          }
          $108 = HEAP32[$value$i>>2]|0;
          $109 = ($108>>>0)<($numRefIdxActive>>>0);
          if (!($109)) {
           $$0$i15 = 1;
           break;
          }
          $110 = ((($pMbLayer)) + 204|0);
          HEAP32[$110>>2] = $108;
         }
         $34 = HEAP32[$25>>2]|0;
         switch ($34|0) {
         case 0:  {
          $$0$i$i = 0;
          break;
         }
         case 2: case 1:  {
          $$0$i$i = 1;
          break;
         }
         default: {
          $$0$i$i = 3;
         }
         }
         HEAP32[$value$i>>2] = $$0$i$i;
         $j$08$i = 0;
         while(1) {
          $40 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i)|0);
          $41 = ($40|0)==(0);
          if (!($41)) {
           $$0$i15 = $40;
           break L81;
          }
          $42 = HEAP32[$itmp$i>>2]|0;
          $43 = $42&65535;
          $44 = (((($pMbLayer)) + 208|0) + ($j$08$i<<2)|0);
          HEAP16[$44>>1] = $43;
          $45 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i)|0);
          $46 = ($45|0)==(0);
          if (!($46)) {
           $$0$i15 = $45;
           break L81;
          }
          $47 = HEAP32[$itmp$i>>2]|0;
          $48 = $47&65535;
          $49 = (((((($pMbLayer)) + 208|0) + ($j$08$i<<2)|0)) + 2|0);
          HEAP16[$49>>1] = $48;
          $50 = (($j$08$i) + 1)|0;
          $$pr$i = HEAP32[$value$i>>2]|0;
          $51 = (($$pr$i) + -1)|0;
          HEAP32[$value$i>>2] = $51;
          $52 = ($$pr$i|0)==(0);
          if ($52) {
           break;
          } else {
           $j$08$i = $50;
          }
         }
         $53 = HEAP32[$54>>2]|0;
         switch ($53|0) {
         case 0:  {
          $$0$i$1$i = 0;
          break;
         }
         case 2: case 1:  {
          $$0$i$1$i = 1;
          break;
         }
         default: {
          $$0$i$1$i = 3;
         }
         }
         HEAP32[$value$i>>2] = $$0$i$1$i;
         $j$08$1$i = 0;
         while(1) {
          $55 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i)|0);
          $56 = ($55|0)==(0);
          if (!($56)) {
           $$0$i15 = $55;
           break L81;
          }
          $57 = HEAP32[$itmp$i>>2]|0;
          $58 = $57&65535;
          $59 = (((($pMbLayer)) + 224|0) + ($j$08$1$i<<2)|0);
          HEAP16[$59>>1] = $58;
          $60 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i)|0);
          $61 = ($60|0)==(0);
          if (!($61)) {
           $$0$i15 = $60;
           break L81;
          }
          $62 = HEAP32[$itmp$i>>2]|0;
          $63 = $62&65535;
          $64 = (((((($pMbLayer)) + 224|0) + ($j$08$1$i<<2)|0)) + 2|0);
          HEAP16[$64>>1] = $63;
          $65 = (($j$08$1$i) + 1)|0;
          $$pr$1$i = HEAP32[$value$i>>2]|0;
          $66 = (($$pr$1$i) + -1)|0;
          HEAP32[$value$i>>2] = $66;
          $67 = ($$pr$1$i|0)==(0);
          if ($67) {
           break;
          } else {
           $j$08$1$i = $65;
          }
         }
         $68 = HEAP32[$69>>2]|0;
         switch ($68|0) {
         case 0:  {
          $$0$i$2$i = 0;
          break;
         }
         case 2: case 1:  {
          $$0$i$2$i = 1;
          break;
         }
         default: {
          $$0$i$2$i = 3;
         }
         }
         HEAP32[$value$i>>2] = $$0$i$2$i;
         $j$08$2$i = 0;
         while(1) {
          $70 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i)|0);
          $71 = ($70|0)==(0);
          if (!($71)) {
           $$0$i15 = $70;
           break L81;
          }
          $72 = HEAP32[$itmp$i>>2]|0;
          $73 = $72&65535;
          $74 = (((($pMbLayer)) + 240|0) + ($j$08$2$i<<2)|0);
          HEAP16[$74>>1] = $73;
          $75 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i)|0);
          $76 = ($75|0)==(0);
          if (!($76)) {
           $$0$i15 = $75;
           break L81;
          }
          $77 = HEAP32[$itmp$i>>2]|0;
          $78 = $77&65535;
          $79 = (((((($pMbLayer)) + 240|0) + ($j$08$2$i<<2)|0)) + 2|0);
          HEAP16[$79>>1] = $78;
          $80 = (($j$08$2$i) + 1)|0;
          $$pr$2$i = HEAP32[$value$i>>2]|0;
          $81 = (($$pr$2$i) + -1)|0;
          HEAP32[$value$i>>2] = $81;
          $82 = ($$pr$2$i|0)==(0);
          if ($82) {
           break;
          } else {
           $j$08$2$i = $80;
          }
         }
         $83 = HEAP32[$84>>2]|0;
         switch ($83|0) {
         case 0:  {
          $$0$i$3$i = 0;
          break;
         }
         case 2: case 1:  {
          $$0$i$3$i = 1;
          break;
         }
         default: {
          $$0$i$3$i = 3;
         }
         }
         HEAP32[$value$i>>2] = $$0$i$3$i;
         $j$08$3$i = 0;
         while(1) {
          $85 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i)|0);
          $86 = ($85|0)==(0);
          if (!($86)) {
           $$0$i15 = $85;
           break L81;
          }
          $87 = HEAP32[$itmp$i>>2]|0;
          $88 = $87&65535;
          $89 = (((($pMbLayer)) + 256|0) + ($j$08$3$i<<2)|0);
          HEAP16[$89>>1] = $88;
          $90 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp$i)|0);
          $91 = ($90|0)==(0);
          if (!($91)) {
           $$0$i15 = $90;
           break L81;
          }
          $92 = HEAP32[$itmp$i>>2]|0;
          $93 = $92&65535;
          $94 = (((((($pMbLayer)) + 256|0) + ($j$08$3$i<<2)|0)) + 2|0);
          HEAP16[$94>>1] = $93;
          $95 = (($j$08$3$i) + 1)|0;
          $$pr$3$i = HEAP32[$value$i>>2]|0;
          $96 = (($$pr$3$i) + -1)|0;
          HEAP32[$value$i>>2] = $96;
          $97 = ($$pr$3$i|0)==(0);
          if ($97) {
           $$0$i15 = 0;
           break;
          } else {
           $j$08$3$i = $95;
          }
         }
        }
       }
      }
     }
    } while(0);
    $tmp$0 = $$0$i15;
   }
   $238 = ($tmp$0|0)==(0);
   if (!($238)) {
    $$0 = $tmp$0;
    STACKTOP = sp;return ($$0|0);
   }
   $239 = ($$0$i|0)==(1);
   do {
    if ($239) {
     $244 = HEAP32[$$pre$phiZ2D>>2]|0;
     $245 = ($244>>>0)>(18);
     $$$i22 = $245 ? 15 : 0;
     $246 = (($244) + -7)|0;
     $247 = $246 >>> 2;
     $248 = ($246>>>0)>(11);
     $249 = (($247) + 268435453)|0;
     $tmp$0$i = $248 ? $249 : $247;
     $250 = $tmp$0$i << 4;
     $251 = $250 | $$$i22;
     $252 = ((($pMbLayer)) + 4|0);
     HEAP32[$252>>2] = $251;
    } else {
     $240 = ($$0$i|0)==(0);
     $241 = $240&1;
     $242 = (_h264bsdDecodeExpGolombMapped($pStrmData,$value,$241)|0);
     $243 = ($242|0)==(0);
     if ($243) {
      $253 = HEAP32[$value>>2]|0;
      $254 = ((($pMbLayer)) + 4|0);
      HEAP32[$254>>2] = $253;
      $255 = ($253|0)==(0);
      if ($255) {
       break L11;
      } else {
       break;
      }
     } else {
      $$0 = $242;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   $256 = (_h264bsdDecodeExpGolombSigned($pStrmData,$itmp)|0);
   $257 = ($256|0)!=(0);
   $258 = HEAP32[$itmp>>2]|0;
   $$off = (($258) + 26)|0;
   $259 = ($$off>>>0)>(51);
   $260 = $257 | $259;
   if ($260) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $261 = ((($pMbLayer)) + 4|0);
   $262 = ((($pMbLayer)) + 8|0);
   HEAP32[$262>>2] = $258;
   $263 = HEAP32[$$pre$phiZ2D>>2]|0;
   $264 = HEAP32[$261>>2]|0;
   $265 = ($263>>>0)>(6);
   $266 = ((($pMbLayer)) + 272|0);
   L147: do {
    if ($265) {
     $267 = (_DetermineNc($pMb,0,$266)|0);
     $268 = ((($pMbLayer)) + 1864|0);
     $269 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$268,$267,16)|0);
     $270 = $269 & 15;
     $271 = ($270|0)==(0);
     if ($271) {
      $272 = $269 >>> 4;
      $273 = $272 & 255;
      $274 = $273&65535;
      $275 = ((($pMbLayer)) + 320|0);
      HEAP16[$275>>1] = $274;
      $$0110$i = $264;$340 = 3;$blockIndex$011$i = 0;
      while(1) {
       $329 = $$0110$i & 1;
       $330 = $$0110$i >>> 1;
       $331 = ($329|0)==(0);
       if (!($331)) {
        $332 = (_DetermineNc($pMb,$blockIndex$011$i,$266)|0);
        $333 = (((((($pMbLayer)) + 328|0) + ($blockIndex$011$i<<6)|0)) + 4|0);
        $334 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$333,$332,15)|0);
        $335 = $334 >>> 15;
        $336 = (((($pMbLayer)) + 1992|0) + ($blockIndex$011$i<<2)|0);
        HEAP32[$336>>2] = $335;
        $337 = $334 & 15;
        $338 = ($337|0)==(0);
        if (!($338)) {
         $$0$i12 = $334;
         break L147;
        }
        $377 = $334 >>> 4;
        $378 = $377 & 255;
        $379 = $378&65535;
        $380 = (((($pMbLayer)) + 272|0) + ($blockIndex$011$i<<1)|0);
        HEAP16[$380>>1] = $379;
        $381 = $blockIndex$011$i | 1;
        $382 = (_DetermineNc($pMb,$381,$266)|0);
        $383 = (((((($pMbLayer)) + 328|0) + ($381<<6)|0)) + 4|0);
        $384 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$383,$382,15)|0);
        $385 = $384 >>> 15;
        $386 = (((($pMbLayer)) + 1992|0) + ($381<<2)|0);
        HEAP32[$386>>2] = $385;
        $387 = $384 & 15;
        $388 = ($387|0)==(0);
        if (!($388)) {
         $$0$i12 = $384;
         break L147;
        }
        $389 = $384 >>> 4;
        $390 = $389 & 255;
        $391 = $390&65535;
        $392 = (((($pMbLayer)) + 272|0) + ($381<<1)|0);
        HEAP16[$392>>1] = $391;
        $393 = $blockIndex$011$i | 2;
        $394 = (_DetermineNc($pMb,$393,$266)|0);
        $395 = (((((($pMbLayer)) + 328|0) + ($393<<6)|0)) + 4|0);
        $396 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$395,$394,15)|0);
        $397 = $396 >>> 15;
        $398 = (((($pMbLayer)) + 1992|0) + ($393<<2)|0);
        HEAP32[$398>>2] = $397;
        $399 = $396 & 15;
        $400 = ($399|0)==(0);
        if (!($400)) {
         $$0$i12 = $396;
         break L147;
        }
        $401 = $396 >>> 4;
        $402 = $401 & 255;
        $403 = $402&65535;
        $404 = (((($pMbLayer)) + 272|0) + ($393<<1)|0);
        HEAP16[$404>>1] = $403;
        $405 = $blockIndex$011$i | 3;
        $406 = (_DetermineNc($pMb,$405,$266)|0);
        $407 = (((((($pMbLayer)) + 328|0) + ($405<<6)|0)) + 4|0);
        $408 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$407,$406,15)|0);
        $409 = $408 >>> 15;
        $410 = (((($pMbLayer)) + 1992|0) + ($405<<2)|0);
        HEAP32[$410>>2] = $409;
        $411 = $408 & 15;
        $412 = ($411|0)==(0);
        if (!($412)) {
         $$0$i12 = $408;
         break L147;
        }
        $413 = $408 >>> 4;
        $414 = $413 & 255;
        $415 = $414&65535;
        $416 = (((($pMbLayer)) + 272|0) + ($405<<1)|0);
        HEAP16[$416>>1] = $415;
       }
       $blockIndex$0$be$i = (($blockIndex$011$i) + 4)|0;
       $339 = (($340) + -1)|0;
       $341 = ($340|0)==(0);
       if ($341) {
        $$lcssa35 = $330;$blockIndex$0$be$i$lcssa = $blockIndex$0$be$i;
        label = 114;
        break;
       } else {
        $$0110$i = $330;$340 = $339;$blockIndex$011$i = $blockIndex$0$be$i;
       }
      }
     } else {
      $$0$i12 = $269;
     }
    } else {
     $$0110$i$us = $264;$327 = 3;$blockIndex$011$i$us = 0;
     while(1) {
      $276 = $$0110$i$us & 1;
      $277 = $$0110$i$us >>> 1;
      $278 = ($276|0)==(0);
      if (!($278)) {
       $279 = (_DetermineNc($pMb,$blockIndex$011$i$us,$266)|0);
       $280 = (((($pMbLayer)) + 328|0) + ($blockIndex$011$i$us<<6)|0);
       $281 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$280,$279,16)|0);
       $282 = $281 >>> 16;
       $283 = (((($pMbLayer)) + 1992|0) + ($blockIndex$011$i$us<<2)|0);
       HEAP32[$283>>2] = $282;
       $284 = $281 & 15;
       $285 = ($284|0)==(0);
       if (!($285)) {
        $$0$i12 = $281;
        break L147;
       }
       $286 = $281 >>> 4;
       $287 = $286 & 255;
       $288 = $287&65535;
       $289 = (((($pMbLayer)) + 272|0) + ($blockIndex$011$i$us<<1)|0);
       HEAP16[$289>>1] = $288;
       $290 = $blockIndex$011$i$us | 1;
       $291 = (_DetermineNc($pMb,$290,$266)|0);
       $292 = (((($pMbLayer)) + 328|0) + ($290<<6)|0);
       $293 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$292,$291,16)|0);
       $294 = $293 >>> 16;
       $295 = (((($pMbLayer)) + 1992|0) + ($290<<2)|0);
       HEAP32[$295>>2] = $294;
       $296 = $293 & 15;
       $297 = ($296|0)==(0);
       if (!($297)) {
        $$0$i12 = $293;
        break L147;
       }
       $298 = $293 >>> 4;
       $299 = $298 & 255;
       $300 = $299&65535;
       $301 = (((($pMbLayer)) + 272|0) + ($290<<1)|0);
       HEAP16[$301>>1] = $300;
       $302 = $blockIndex$011$i$us | 2;
       $303 = (_DetermineNc($pMb,$302,$266)|0);
       $304 = (((($pMbLayer)) + 328|0) + ($302<<6)|0);
       $305 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$304,$303,16)|0);
       $306 = $305 >>> 16;
       $307 = (((($pMbLayer)) + 1992|0) + ($302<<2)|0);
       HEAP32[$307>>2] = $306;
       $308 = $305 & 15;
       $309 = ($308|0)==(0);
       if (!($309)) {
        $$0$i12 = $305;
        break L147;
       }
       $310 = $305 >>> 4;
       $311 = $310 & 255;
       $312 = $311&65535;
       $313 = (((($pMbLayer)) + 272|0) + ($302<<1)|0);
       HEAP16[$313>>1] = $312;
       $314 = $blockIndex$011$i$us | 3;
       $315 = (_DetermineNc($pMb,$314,$266)|0);
       $316 = (((($pMbLayer)) + 328|0) + ($314<<6)|0);
       $317 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$316,$315,16)|0);
       $318 = $317 >>> 16;
       $319 = (((($pMbLayer)) + 1992|0) + ($314<<2)|0);
       HEAP32[$319>>2] = $318;
       $320 = $317 & 15;
       $321 = ($320|0)==(0);
       if (!($321)) {
        $$0$i12 = $317;
        break L147;
       }
       $322 = $317 >>> 4;
       $323 = $322 & 255;
       $324 = $323&65535;
       $325 = (((($pMbLayer)) + 272|0) + ($314<<1)|0);
       HEAP16[$325>>1] = $324;
      }
      $blockIndex$0$be$i$us = (($blockIndex$011$i$us) + 4)|0;
      $326 = (($327) + -1)|0;
      $328 = ($327|0)==(0);
      if ($328) {
       $$lcssa35 = $277;$blockIndex$0$be$i$lcssa = $blockIndex$0$be$i$us;
       label = 114;
       break;
      } else {
       $$0110$i$us = $277;$327 = $326;$blockIndex$011$i$us = $blockIndex$0$be$i$us;
      }
     }
    }
   } while(0);
   L168: do {
    if ((label|0) == 114) {
     $342 = $$lcssa35 & 3;
     $343 = ($342|0)==(0);
     if (!($343)) {
      $344 = ((($pMbLayer)) + 1928|0);
      $345 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$344,-1,4)|0);
      $346 = $345 & 15;
      $347 = ($346|0)==(0);
      if (!($347)) {
       $$0$i12 = $345;
       break;
      }
      $348 = $345 >>> 4;
      $349 = $348 & 255;
      $350 = $349&65535;
      $351 = ((($pMbLayer)) + 322|0);
      HEAP16[$351>>1] = $350;
      $352 = ((($pMbLayer)) + 1944|0);
      $353 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$352,-1,4)|0);
      $354 = $353 & 15;
      $355 = ($354|0)==(0);
      if (!($355)) {
       $$0$i12 = $353;
       break;
      }
      $356 = $353 >>> 4;
      $357 = $356 & 255;
      $358 = $357&65535;
      $359 = ((($pMbLayer)) + 324|0);
      HEAP16[$359>>1] = $358;
     }
     $360 = $$lcssa35 & 2;
     $361 = ($360|0)==(0);
     if ($361) {
      $$0$i12 = 0;
     } else {
      $375 = 7;$blockIndex$28$i = $blockIndex$0$be$i$lcssa;
      while(1) {
       $362 = (_DetermineNc($pMb,$blockIndex$28$i,$266)|0);
       $363 = (((((($pMbLayer)) + 328|0) + ($blockIndex$28$i<<6)|0)) + 4|0);
       $364 = (_h264bsdDecodeResidualBlockCavlc($pStrmData,$363,$362,15)|0);
       $365 = $364 & 15;
       $366 = ($365|0)==(0);
       if (!($366)) {
        $$0$i12 = $364;
        break L168;
       }
       $367 = $364 >>> 4;
       $368 = $367 & 255;
       $369 = $368&65535;
       $370 = (((($pMbLayer)) + 272|0) + ($blockIndex$28$i<<1)|0);
       HEAP16[$370>>1] = $369;
       $371 = $364 >>> 15;
       $372 = (((($pMbLayer)) + 1992|0) + ($blockIndex$28$i<<2)|0);
       HEAP32[$372>>2] = $371;
       $373 = (($blockIndex$28$i) + 1)|0;
       $374 = (($375) + -1)|0;
       $376 = ($375|0)==(0);
       if ($376) {
        $$0$i12 = 0;
        break;
       } else {
        $375 = $374;$blockIndex$28$i = $373;
       }
      }
     }
    }
   } while(0);
   $417 = ((($pStrmData)) + 4|0);
   $418 = HEAP32[$417>>2]|0;
   $419 = HEAP32[$pStrmData>>2]|0;
   $420 = $418;
   $421 = $419;
   $422 = (($420) - ($421))|0;
   $423 = $422 << 3;
   $424 = ((($pStrmData)) + 8|0);
   $425 = HEAP32[$424>>2]|0;
   $426 = (($423) + ($425))|0;
   $427 = ((($pStrmData)) + 16|0);
   HEAP32[$427>>2] = $426;
   $428 = ($$0$i12|0)==(0);
   if (!($428)) {
    $$0 = $$0$i12;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdMbPartPredMode($mbType) {
 $mbType = $mbType|0;
 var $$ = 0, $$0 = 0, $0 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mbType>>>0)<(6);
 $not$ = ($mbType|0)!=(6);
 $$ = $not$&1;
 $$0 = $0 ? 2 : $$;
 return ($$0|0);
}
function _h264bsdNumMbPart($mbType) {
 $mbType = $mbType|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($mbType|0) {
 case 0: case 1:  {
  $$0 = 1;
  break;
 }
 case 3: case 2:  {
  $$0 = 2;
  break;
 }
 default: {
  $$0 = 4;
 }
 }
 return ($$0|0);
}
function _h264bsdNumSubMbPart($subMbType) {
 $subMbType = $subMbType|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($subMbType|0) {
 case 0:  {
  $$0 = 1;
  break;
 }
 case 2: case 1:  {
  $$0 = 2;
  break;
 }
 default: {
  $$0 = 4;
 }
 }
 return ($$0|0);
}
function _h264bsdPredModeIntra16x16($mbType) {
 $mbType = $mbType|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($mbType) + 1)|0;
 $1 = $0 & 3;
 return ($1|0);
}
function _h264bsdDecodeMacroblock($pMb,$pMbLayer,$currImage,$dpb,$qpY,$mbNum,$constrainedIntraPredFlag,$data) {
 $pMb = $pMb|0;
 $pMbLayer = $pMbLayer|0;
 $currImage = $currImage|0;
 $dpb = $dpb|0;
 $qpY = $qpY|0;
 $mbNum = $mbNum|0;
 $constrainedIntraPredFlag = $constrainedIntraPredFlag|0;
 $data = $data|0;
 var $$0 = 0, $$0117$i = 0, $$121$i = 0, $$2$i = 0, $$pre = 0, $$pre$phi31$iZ2D = 0, $$pre30$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blockData$018$i = 0, $blockData$122$i = 0, $dcCoeffIdx$020$i = 0, $lev$026 = 0, $pData$024 = 0, $scevgep = 0, $scevgep39 = 0, $tot$125 = 0, $totalCoeff$019$i = 0, $totalCoeff$123$i = 0, $totalCoeff$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pMbLayer>>2]|0;
 HEAP32[$pMb>>2] = $0;
 $1 = ((($pMb)) + 196|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 _h264bsdSetCurrImageMbPointers($currImage,$mbNum);
 $4 = ($0|0)==(31);
 if ($4) {
  $5 = ((($pMb)) + 28|0);
  $6 = ((($pMb)) + 20|0);
  HEAP32[$6>>2] = 0;
  $7 = HEAP32[$1>>2]|0;
  $8 = ($7>>>0)>(1);
  if ($8) {
   $10 = ((($pMb)) + 30|0);
   HEAP16[$5>>1] = 16;
   $11 = ((($pMb)) + 32|0);
   HEAP16[$10>>1] = 16;
   $12 = ((($pMb)) + 34|0);
   HEAP16[$11>>1] = 16;
   $13 = ((($pMb)) + 36|0);
   HEAP16[$12>>1] = 16;
   $14 = ((($pMb)) + 38|0);
   HEAP16[$13>>1] = 16;
   $15 = ((($pMb)) + 40|0);
   HEAP16[$14>>1] = 16;
   $16 = ((($pMb)) + 42|0);
   HEAP16[$15>>1] = 16;
   $17 = ((($pMb)) + 44|0);
   HEAP16[$16>>1] = 16;
   $18 = ((($pMb)) + 46|0);
   HEAP16[$17>>1] = 16;
   $19 = ((($pMb)) + 48|0);
   HEAP16[$18>>1] = 16;
   $20 = ((($pMb)) + 50|0);
   HEAP16[$19>>1] = 16;
   $21 = ((($pMb)) + 52|0);
   HEAP16[$20>>1] = 16;
   $22 = ((($pMb)) + 54|0);
   HEAP16[$21>>1] = 16;
   $23 = ((($pMb)) + 56|0);
   HEAP16[$22>>1] = 16;
   $24 = ((($pMb)) + 58|0);
   HEAP16[$23>>1] = 16;
   $25 = ((($pMb)) + 60|0);
   HEAP16[$24>>1] = 16;
   $26 = ((($pMb)) + 62|0);
   HEAP16[$25>>1] = 16;
   $27 = ((($pMb)) + 64|0);
   HEAP16[$26>>1] = 16;
   $28 = ((($pMb)) + 66|0);
   HEAP16[$27>>1] = 16;
   $29 = ((($pMb)) + 68|0);
   HEAP16[$28>>1] = 16;
   $30 = ((($pMb)) + 70|0);
   HEAP16[$29>>1] = 16;
   $31 = ((($pMb)) + 72|0);
   HEAP16[$30>>1] = 16;
   $32 = ((($pMb)) + 74|0);
   HEAP16[$31>>1] = 16;
   HEAP16[$32>>1] = 16;
   $$0 = 0;
   return ($$0|0);
  }
  $9 = ((($pMbLayer)) + 328|0);
  $97 = 23;$lev$026 = $9;$pData$024 = $data;$tot$125 = $5;
  while(1) {
   HEAP16[$tot$125>>1] = 16;
   $scevgep = ((($pData$024)) + 16|0);
   $33 = ((($lev$026)) + 4|0);
   $34 = HEAP32[$lev$026>>2]|0;
   $35 = $34&255;
   $36 = ((($pData$024)) + 1|0);
   HEAP8[$pData$024>>0] = $35;
   $37 = ((($lev$026)) + 8|0);
   $38 = HEAP32[$33>>2]|0;
   $39 = $38&255;
   $40 = ((($pData$024)) + 2|0);
   HEAP8[$36>>0] = $39;
   $41 = ((($lev$026)) + 12|0);
   $42 = HEAP32[$37>>2]|0;
   $43 = $42&255;
   $44 = ((($pData$024)) + 3|0);
   HEAP8[$40>>0] = $43;
   $45 = ((($lev$026)) + 16|0);
   $46 = HEAP32[$41>>2]|0;
   $47 = $46&255;
   $48 = ((($pData$024)) + 4|0);
   HEAP8[$44>>0] = $47;
   $49 = ((($lev$026)) + 20|0);
   $50 = HEAP32[$45>>2]|0;
   $51 = $50&255;
   $52 = ((($pData$024)) + 5|0);
   HEAP8[$48>>0] = $51;
   $53 = ((($lev$026)) + 24|0);
   $54 = HEAP32[$49>>2]|0;
   $55 = $54&255;
   $56 = ((($pData$024)) + 6|0);
   HEAP8[$52>>0] = $55;
   $57 = ((($lev$026)) + 28|0);
   $58 = HEAP32[$53>>2]|0;
   $59 = $58&255;
   $60 = ((($pData$024)) + 7|0);
   HEAP8[$56>>0] = $59;
   $61 = ((($lev$026)) + 32|0);
   $62 = HEAP32[$57>>2]|0;
   $63 = $62&255;
   $64 = ((($pData$024)) + 8|0);
   HEAP8[$60>>0] = $63;
   $65 = ((($lev$026)) + 36|0);
   $66 = HEAP32[$61>>2]|0;
   $67 = $66&255;
   $68 = ((($pData$024)) + 9|0);
   HEAP8[$64>>0] = $67;
   $69 = ((($lev$026)) + 40|0);
   $70 = HEAP32[$65>>2]|0;
   $71 = $70&255;
   $72 = ((($pData$024)) + 10|0);
   HEAP8[$68>>0] = $71;
   $73 = ((($lev$026)) + 44|0);
   $74 = HEAP32[$69>>2]|0;
   $75 = $74&255;
   $76 = ((($pData$024)) + 11|0);
   HEAP8[$72>>0] = $75;
   $77 = ((($lev$026)) + 48|0);
   $78 = HEAP32[$73>>2]|0;
   $79 = $78&255;
   $80 = ((($pData$024)) + 12|0);
   HEAP8[$76>>0] = $79;
   $81 = ((($lev$026)) + 52|0);
   $82 = HEAP32[$77>>2]|0;
   $83 = $82&255;
   $84 = ((($pData$024)) + 13|0);
   HEAP8[$80>>0] = $83;
   $85 = ((($lev$026)) + 56|0);
   $86 = HEAP32[$81>>2]|0;
   $87 = $86&255;
   $88 = ((($pData$024)) + 14|0);
   HEAP8[$84>>0] = $87;
   $89 = ((($lev$026)) + 60|0);
   $90 = HEAP32[$85>>2]|0;
   $91 = $90&255;
   $92 = ((($pData$024)) + 15|0);
   HEAP8[$88>>0] = $91;
   $93 = HEAP32[$89>>2]|0;
   $94 = $93&255;
   HEAP8[$92>>0] = $94;
   $95 = ((($tot$125)) + 2|0);
   $scevgep39 = ((($lev$026)) + 64|0);
   $96 = (($97) + -1)|0;
   $98 = ($97|0)==(0);
   if ($98) {
    break;
   } else {
    $97 = $96;$lev$026 = $scevgep39;$pData$024 = $scevgep;$tot$125 = $95;
   }
  }
  _h264bsdWriteMacroblock($currImage,$data);
  $$0 = 0;
  return ($$0|0);
 }
 $99 = ($0|0)==(0);
 $100 = ((($pMb)) + 28|0);
 if ($99) {
  _H264SwDecMemset($100,0,54);
  $251 = HEAP32[$qpY>>2]|0;
  $252 = ((($pMb)) + 20|0);
  HEAP32[$252>>2] = $251;
  label = 64;
 } else {
  $101 = ((($pMbLayer)) + 272|0);
  _H264SwDecMemcpy($100,$101,54);
  $102 = ((($pMbLayer)) + 8|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==(0);
  $$pre = HEAP32[$qpY>>2]|0;
  do {
   if ($104) {
    $111 = $$pre;
   } else {
    $105 = (($$pre) + ($103))|0;
    HEAP32[$qpY>>2] = $105;
    $106 = ($105|0)<(0);
    if ($106) {
     $107 = (($105) + 52)|0;
     HEAP32[$qpY>>2] = $107;
     $111 = $107;
     break;
    }
    $108 = ($105|0)>(51);
    if ($108) {
     $109 = (($105) + -52)|0;
     HEAP32[$qpY>>2] = $109;
     $111 = $109;
    } else {
     $111 = $105;
    }
   }
  } while(0);
  $110 = ((($pMb)) + 20|0);
  HEAP32[$110>>2] = $111;
  $112 = ((($pMbLayer)) + 328|0);
  $113 = ((($pMbLayer)) + 1992|0);
  $114 = HEAP32[$pMb>>2]|0;
  $115 = ($114>>>0)>(6);
  L22: do {
   if ($115) {
    $116 = ((($pMb)) + 76|0);
    $117 = HEAP16[$116>>1]|0;
    $118 = ($117<<16>>16)==(0);
    if ($118) {
     $$0117$i = $113;$135 = 15;$blockData$018$i = $112;$dcCoeffIdx$020$i = 3088;$totalCoeff$019$i = $100;
    } else {
     $119 = ((($pMbLayer)) + 1864|0);
     _h264bsdProcessLumaDc($119,$111);
     $$0117$i = $113;$135 = 15;$blockData$018$i = $112;$dcCoeffIdx$020$i = 3088;$totalCoeff$019$i = $100;
    }
    while(1) {
     $120 = ((($dcCoeffIdx$020$i)) + 4|0);
     $121 = HEAP32[$dcCoeffIdx$020$i>>2]|0;
     $122 = (((($pMbLayer)) + 1864|0) + ($121<<2)|0);
     $123 = HEAP32[$122>>2]|0;
     HEAP32[$blockData$018$i>>2] = $123;
     $124 = ($123|0)==(0);
     if ($124) {
      $125 = HEAP16[$totalCoeff$019$i>>1]|0;
      $126 = ($125<<16>>16)==(0);
      if ($126) {
       HEAP32[$blockData$018$i>>2] = 16777215;
      } else {
       label = 18;
      }
     } else {
      label = 18;
     }
     if ((label|0) == 18) {
      label = 0;
      $127 = HEAP32[$110>>2]|0;
      $128 = HEAP32[$$0117$i>>2]|0;
      $129 = (_h264bsdProcessBlock($blockData$018$i,$127,1,$128)|0);
      $130 = ($129|0)==(0);
      if (!($130)) {
       $$0 = 1;
       break;
      }
     }
     $131 = ((($blockData$018$i)) + 64|0);
     $132 = ((($totalCoeff$019$i)) + 2|0);
     $133 = ((($$0117$i)) + 4|0);
     $134 = (($135) + -1)|0;
     $136 = ($135|0)==(0);
     if ($136) {
      $$2$i = $133;$166 = $blockData$018$i;$174 = $$0117$i;$180 = $totalCoeff$019$i;$totalCoeff$2$i = $132;
      break L22;
     } else {
      $$0117$i = $133;$135 = $134;$blockData$018$i = $131;$dcCoeffIdx$020$i = $120;$totalCoeff$019$i = $132;
     }
    }
    return ($$0|0);
   } else {
    $$121$i = $113;$147 = 15;$blockData$122$i = $112;$totalCoeff$123$i = $100;
    while(1) {
     $137 = HEAP16[$totalCoeff$123$i>>1]|0;
     $138 = ($137<<16>>16)==(0);
     if ($138) {
      HEAP32[$blockData$122$i>>2] = 16777215;
     } else {
      $139 = HEAP32[$110>>2]|0;
      $140 = HEAP32[$$121$i>>2]|0;
      $141 = (_h264bsdProcessBlock($blockData$122$i,$139,0,$140)|0);
      $142 = ($141|0)==(0);
      if (!($142)) {
       $$0 = 1;
       break;
      }
     }
     $143 = ((($blockData$122$i)) + 64|0);
     $144 = ((($totalCoeff$123$i)) + 2|0);
     $145 = ((($$121$i)) + 4|0);
     $146 = (($147) + -1)|0;
     $148 = ($147|0)==(0);
     if ($148) {
      $$2$i = $145;$166 = $blockData$122$i;$174 = $$121$i;$180 = $totalCoeff$123$i;$totalCoeff$2$i = $144;
      break L22;
     } else {
      $$121$i = $145;$147 = $146;$blockData$122$i = $143;$totalCoeff$123$i = $144;
     }
    }
    return ($$0|0);
   }
  } while(0);
  $149 = HEAP32[$110>>2]|0;
  $150 = ((($pMb)) + 24|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + ($149))|0;
  $153 = (_clip(0,51,$152)|0);
  $154 = (2616 + ($153<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ((($pMb)) + 78|0);
  $157 = HEAP16[$156>>1]|0;
  $158 = ($157<<16>>16)==(0);
  if ($158) {
   $159 = ((($pMb)) + 80|0);
   $160 = HEAP16[$159>>1]|0;
   $161 = ($160<<16>>16)==(0);
   if ($161) {
    $$pre30$i = ((($pMbLayer)) + 1928|0);
    $$pre$phi31$iZ2D = $$pre30$i;
   } else {
    label = 28;
   }
  } else {
   label = 28;
  }
  if ((label|0) == 28) {
   $162 = ((($pMbLayer)) + 1928|0);
   _h264bsdProcessChromaDc($162,$155);
   $$pre$phi31$iZ2D = $162;
  }
  $163 = ((($pMbLayer)) + 1932|0);
  $164 = HEAP32[$$pre$phi31$iZ2D>>2]|0;
  $165 = ((($166)) + 64|0);
  HEAP32[$165>>2] = $164;
  $167 = ($164|0)==(0);
  if ($167) {
   $168 = HEAP16[$totalCoeff$2$i>>1]|0;
   $169 = ($168<<16>>16)==(0);
   if ($169) {
    HEAP32[$165>>2] = 16777215;
   } else {
    label = 31;
   }
  } else {
   label = 31;
  }
  if ((label|0) == 31) {
   $170 = HEAP32[$$2$i>>2]|0;
   $171 = (_h264bsdProcessBlock($165,$155,1,$170)|0);
   $172 = ($171|0)==(0);
   if (!($172)) {
    $$0 = 1;
    return ($$0|0);
   }
  }
  $173 = ((($174)) + 8|0);
  $175 = ((($pMbLayer)) + 1936|0);
  $176 = HEAP32[$163>>2]|0;
  $177 = ((($166)) + 128|0);
  HEAP32[$177>>2] = $176;
  $178 = ($176|0)==(0);
  if ($178) {
   $179 = ((($180)) + 4|0);
   $181 = HEAP16[$179>>1]|0;
   $182 = ($181<<16>>16)==(0);
   if ($182) {
    HEAP32[$177>>2] = 16777215;
   } else {
    label = 35;
   }
  } else {
   label = 35;
  }
  if ((label|0) == 35) {
   $183 = HEAP32[$173>>2]|0;
   $184 = (_h264bsdProcessBlock($177,$155,1,$183)|0);
   $185 = ($184|0)==(0);
   if (!($185)) {
    $$0 = 1;
    return ($$0|0);
   }
  }
  $186 = ((($174)) + 12|0);
  $187 = ((($pMbLayer)) + 1940|0);
  $188 = HEAP32[$175>>2]|0;
  $189 = ((($166)) + 192|0);
  HEAP32[$189>>2] = $188;
  $190 = ($188|0)==(0);
  if ($190) {
   $191 = ((($180)) + 6|0);
   $192 = HEAP16[$191>>1]|0;
   $193 = ($192<<16>>16)==(0);
   if ($193) {
    HEAP32[$189>>2] = 16777215;
   } else {
    label = 39;
   }
  } else {
   label = 39;
  }
  if ((label|0) == 39) {
   $194 = HEAP32[$186>>2]|0;
   $195 = (_h264bsdProcessBlock($189,$155,1,$194)|0);
   $196 = ($195|0)==(0);
   if (!($196)) {
    $$0 = 1;
    return ($$0|0);
   }
  }
  $197 = ((($174)) + 16|0);
  $198 = ((($pMbLayer)) + 1944|0);
  $199 = HEAP32[$187>>2]|0;
  $200 = ((($166)) + 256|0);
  HEAP32[$200>>2] = $199;
  $201 = ($199|0)==(0);
  if ($201) {
   $202 = ((($180)) + 8|0);
   $203 = HEAP16[$202>>1]|0;
   $204 = ($203<<16>>16)==(0);
   if ($204) {
    HEAP32[$200>>2] = 16777215;
   } else {
    label = 43;
   }
  } else {
   label = 43;
  }
  if ((label|0) == 43) {
   $205 = HEAP32[$197>>2]|0;
   $206 = (_h264bsdProcessBlock($200,$155,1,$205)|0);
   $207 = ($206|0)==(0);
   if (!($207)) {
    $$0 = 1;
    return ($$0|0);
   }
  }
  $208 = ((($174)) + 20|0);
  $209 = ((($pMbLayer)) + 1948|0);
  $210 = HEAP32[$198>>2]|0;
  $211 = ((($166)) + 320|0);
  HEAP32[$211>>2] = $210;
  $212 = ($210|0)==(0);
  if ($212) {
   $213 = ((($180)) + 10|0);
   $214 = HEAP16[$213>>1]|0;
   $215 = ($214<<16>>16)==(0);
   if ($215) {
    HEAP32[$211>>2] = 16777215;
   } else {
    label = 47;
   }
  } else {
   label = 47;
  }
  if ((label|0) == 47) {
   $216 = HEAP32[$208>>2]|0;
   $217 = (_h264bsdProcessBlock($211,$155,1,$216)|0);
   $218 = ($217|0)==(0);
   if (!($218)) {
    $$0 = 1;
    return ($$0|0);
   }
  }
  $219 = ((($174)) + 24|0);
  $220 = ((($pMbLayer)) + 1952|0);
  $221 = HEAP32[$209>>2]|0;
  $222 = ((($166)) + 384|0);
  HEAP32[$222>>2] = $221;
  $223 = ($221|0)==(0);
  if ($223) {
   $224 = ((($180)) + 12|0);
   $225 = HEAP16[$224>>1]|0;
   $226 = ($225<<16>>16)==(0);
   if ($226) {
    HEAP32[$222>>2] = 16777215;
   } else {
    label = 51;
   }
  } else {
   label = 51;
  }
  if ((label|0) == 51) {
   $227 = HEAP32[$219>>2]|0;
   $228 = (_h264bsdProcessBlock($222,$155,1,$227)|0);
   $229 = ($228|0)==(0);
   if (!($229)) {
    $$0 = 1;
    return ($$0|0);
   }
  }
  $230 = ((($174)) + 28|0);
  $231 = ((($pMbLayer)) + 1956|0);
  $232 = HEAP32[$220>>2]|0;
  $233 = ((($166)) + 448|0);
  HEAP32[$233>>2] = $232;
  $234 = ($232|0)==(0);
  if ($234) {
   $235 = ((($180)) + 14|0);
   $236 = HEAP16[$235>>1]|0;
   $237 = ($236<<16>>16)==(0);
   if ($237) {
    HEAP32[$233>>2] = 16777215;
   } else {
    label = 55;
   }
  } else {
   label = 55;
  }
  if ((label|0) == 55) {
   $238 = HEAP32[$230>>2]|0;
   $239 = (_h264bsdProcessBlock($233,$155,1,$238)|0);
   $240 = ($239|0)==(0);
   if (!($240)) {
    $$0 = 1;
    return ($$0|0);
   }
  }
  $241 = ((($174)) + 32|0);
  $242 = HEAP32[$231>>2]|0;
  $243 = ((($166)) + 512|0);
  HEAP32[$243>>2] = $242;
  $244 = ($242|0)==(0);
  if ($244) {
   $245 = ((($180)) + 16|0);
   $246 = HEAP16[$245>>1]|0;
   $247 = ($246<<16>>16)==(0);
   if ($247) {
    HEAP32[$243>>2] = 16777215;
   } else {
    label = 59;
   }
  } else {
   label = 59;
  }
  if ((label|0) == 59) {
   $248 = HEAP32[$241>>2]|0;
   $249 = (_h264bsdProcessBlock($243,$155,1,$248)|0);
   $250 = ($249|0)==(0);
   if (!($250)) {
    $$0 = 1;
    return ($$0|0);
   }
  }
  $253 = ($0>>>0)<(6);
  if ($253) {
   label = 64;
  } else {
   $254 = (_h264bsdIntraPrediction($pMb,$pMbLayer,$currImage,$mbNum,$constrainedIntraPredFlag,$data)|0);
   $255 = ($254|0)==(0);
   if (!($255)) {
    $$0 = $254;
    return ($$0|0);
   }
  }
 }
 if ((label|0) == 64) {
  $256 = (_h264bsdInterPrediction($pMb,$pMbLayer,$dpb,$mbNum,$currImage,$data)|0);
  $257 = ($256|0)==(0);
  if (!($257)) {
   $$0 = $256;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdSubMbPartMode($subMbType) {
 $subMbType = $subMbType|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($subMbType|0);
}
function _h264bsdGetBits($pStrmData,$numBits) {
 $pStrmData = $pStrmData|0;
 $numBits = $numBits|0;
 var $$0 = 0, $$0$i = 0, $$0$i1 = 0, $$pn$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $bits$04$i = 0, $out$12$i = 0, $pStrm$05$i = 0, $shift$03$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStrmData)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($pStrmData)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 3;
 $5 = ((($pStrmData)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7|0)>(31);
 if ($8) {
  $9 = ((($pStrmData)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP8[$1>>0]|0;
  $12 = $11&255;
  $13 = $12 << 24;
  $14 = ((($1)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 << 16;
  $18 = $17 | $13;
  $19 = ((($1)) + 2|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $21 << 8;
  $23 = $18 | $22;
  $24 = ((($1)) + 3|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $23 | $26;
  $28 = ($10|0)==(0);
  if ($28) {
   $$0$i = $27;$$pre$phiZ2D = $9;
  } else {
   $29 = ((($1)) + 4|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = (8 - ($10))|0;
   $33 = $27 << $10;
   $34 = $31 >>> $32;
   $35 = $34 | $33;
   $$0$i = $35;$$pre$phiZ2D = $9;
  }
 } else {
  $36 = ($7|0)>(0);
  $37 = ((($pStrmData)) + 8|0);
  if ($36) {
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 24)|0;
   $40 = HEAP8[$1>>0]|0;
   $41 = $40&255;
   $42 = $41 << $39;
   $43 = (($7) + -8)|0;
   $44 = (($43) + ($38))|0;
   $45 = ($44|0)>(0);
   if ($45) {
    $$pn$i = $1;$bits$04$i = $44;$out$12$i = $42;$shift$03$i = $39;
    while(1) {
     $pStrm$05$i = ((($$pn$i)) + 1|0);
     $46 = (($shift$03$i) + -8)|0;
     $47 = HEAP8[$pStrm$05$i>>0]|0;
     $48 = $47&255;
     $49 = $48 << $46;
     $50 = $49 | $out$12$i;
     $51 = (($bits$04$i) + -8)|0;
     $52 = ($bits$04$i|0)>(8);
     if ($52) {
      $$pn$i = $pStrm$05$i;$bits$04$i = $51;$out$12$i = $50;$shift$03$i = $46;
     } else {
      $$0$i = $50;$$pre$phiZ2D = $37;
      break;
     }
    }
   } else {
    $$0$i = $42;$$pre$phiZ2D = $37;
   }
  } else {
   $$0$i = 0;$$pre$phiZ2D = $37;
  }
 }
 $53 = (($6) + ($numBits))|0;
 HEAP32[$5>>2] = $53;
 $54 = $53 & 7;
 HEAP32[$$pre$phiZ2D>>2] = $54;
 $55 = ($53>>>0)>($4>>>0);
 if ($55) {
  $$0$i1 = 0;
  $59 = (32 - ($numBits))|0;
  $60 = $$0$i >>> $59;
  $$0 = $$0$i1 ? $60 : -1;
  return ($$0|0);
 }
 $56 = HEAP32[$pStrmData>>2]|0;
 $57 = $53 >>> 3;
 $58 = (($56) + ($57)|0);
 HEAP32[$0>>2] = $58;
 $$0$i1 = 1;
 $59 = (32 - ($numBits))|0;
 $60 = $$0$i >>> $59;
 $$0 = $$0$i1 ? $60 : -1;
 return ($$0|0);
}
function _h264bsdShowBits32($pStrmData) {
 $pStrmData = $pStrmData|0;
 var $$0 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits$04 = 0, $out$12 = 0, $pStrm$05 = 0, $shift$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($pStrmData)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($pStrmData)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 3;
 $5 = ((($pStrmData)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7|0)>(31);
 if ($8) {
  $9 = ((($pStrmData)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP8[$1>>0]|0;
  $12 = $11&255;
  $13 = $12 << 24;
  $14 = ((($1)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 << 16;
  $18 = $17 | $13;
  $19 = ((($1)) + 2|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $21 << 8;
  $23 = $18 | $22;
  $24 = ((($1)) + 3|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $23 | $26;
  $28 = ($10|0)==(0);
  if ($28) {
   $$0 = $27;
   return ($$0|0);
  }
  $29 = ((($1)) + 4|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (8 - ($10))|0;
  $33 = $27 << $10;
  $34 = $31 >>> $32;
  $35 = $34 | $33;
  $$0 = $35;
  return ($$0|0);
 }
 $36 = ($7|0)>(0);
 if (!($36)) {
  $$0 = 0;
  return ($$0|0);
 }
 $37 = ((($pStrmData)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 24)|0;
 $40 = HEAP8[$1>>0]|0;
 $41 = $40&255;
 $42 = $41 << $39;
 $43 = (($7) + -8)|0;
 $44 = (($43) + ($38))|0;
 $45 = ($44|0)>(0);
 if ($45) {
  $$pn = $1;$bits$04 = $44;$out$12 = $42;$shift$03 = $39;
 } else {
  $$0 = $42;
  return ($$0|0);
 }
 while(1) {
  $pStrm$05 = ((($$pn)) + 1|0);
  $46 = (($shift$03) + -8)|0;
  $47 = HEAP8[$pStrm$05>>0]|0;
  $48 = $47&255;
  $49 = $48 << $46;
  $50 = $49 | $out$12;
  $51 = (($bits$04) + -8)|0;
  $52 = ($bits$04|0)>(8);
  if ($52) {
   $$pn = $pStrm$05;$bits$04 = $51;$out$12 = $50;$shift$03 = $46;
  } else {
   $$0 = $50;
   break;
  }
 }
 return ($$0|0);
}
function _h264bsdFlushBits($pStrmData,$numBits) {
 $pStrmData = $pStrmData|0;
 $numBits = $numBits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStrmData)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($numBits))|0;
 HEAP32[$0>>2] = $2;
 $3 = $2 & 7;
 $4 = ((($pStrmData)) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($pStrmData)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 << 3;
 $8 = ($2>>>0)>($7>>>0);
 if ($8) {
  $$0 = -1;
  return ($$0|0);
 }
 $9 = HEAP32[$pStrmData>>2]|0;
 $10 = $2 >>> 3;
 $11 = (($9) + ($10)|0);
 $12 = ((($pStrmData)) + 4|0);
 HEAP32[$12>>2] = $11;
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdIsByteAligned($pStrmData) {
 $pStrmData = $pStrmData|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStrmData)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$ = $2&1;
 return ($$|0);
}
function _h264bsdDecodeExpGolombUnsigned($pStrmData,$codeNum) {
 $pStrmData = $pStrmData|0;
 $codeNum = $codeNum|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_h264bsdShowBits32($pStrmData)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  (_h264bsdFlushBits($pStrmData,1)|0);
  HEAP32[$codeNum>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($0>>>0)>(1073741823);
 if ($2) {
  $3 = (_h264bsdFlushBits($pStrmData,3)|0);
  $4 = ($3|0)==(-1);
  if ($4) {
   $$0 = 1;
   return ($$0|0);
  }
  $5 = $0 >>> 29;
  $6 = $5 & 1;
  $7 = (($6) + 1)|0;
  HEAP32[$codeNum>>2] = $7;
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ($0>>>0)>(536870911);
 if ($8) {
  $9 = (_h264bsdFlushBits($pStrmData,5)|0);
  $10 = ($9|0)==(-1);
  if ($10) {
   $$0 = 1;
   return ($$0|0);
  }
  $11 = $0 >>> 27;
  $12 = $11 & 3;
  $13 = (($12) + 3)|0;
  HEAP32[$codeNum>>2] = $13;
  $$0 = 0;
  return ($$0|0);
 }
 $14 = ($0>>>0)>(268435455);
 if ($14) {
  $15 = (_h264bsdFlushBits($pStrmData,7)|0);
  $16 = ($15|0)==(-1);
  if ($16) {
   $$0 = 1;
   return ($$0|0);
  }
  $17 = $0 >>> 25;
  $18 = $17 & 7;
  $19 = (($18) + 7)|0;
  HEAP32[$codeNum>>2] = $19;
  $$0 = 0;
  return ($$0|0);
 }
 $20 = (_h264bsdCountLeadingZeros($0,28)|0);
 $21 = (($20) + 4)|0;
 $22 = ($21|0)==(32);
 if (!($22)) {
  $28 = (($20) + 5)|0;
  (_h264bsdFlushBits($pStrmData,$28)|0);
  $29 = (_h264bsdGetBits($pStrmData,$21)|0);
  $30 = ($29|0)==(-1);
  if ($30) {
   $$0 = 1;
   return ($$0|0);
  }
  $31 = 1 << $21;
  $32 = (($31) + -1)|0;
  $33 = (($32) + ($29))|0;
  HEAP32[$codeNum>>2] = $33;
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$codeNum>>2] = 0;
 (_h264bsdFlushBits($pStrmData,32)|0);
 $23 = (_h264bsdGetBits($pStrmData,1)|0);
 $24 = ($23|0)==(1);
 if (!($24)) {
  $$0 = 1;
  return ($$0|0);
 }
 $25 = (_h264bsdShowBits32($pStrmData)|0);
 $26 = (_h264bsdFlushBits($pStrmData,32)|0);
 $27 = ($26|0)==(-1);
 if ($27) {
  $$0 = 1;
  return ($$0|0);
 }
 switch ($25|0) {
 case 0:  {
  HEAP32[$codeNum>>2] = -1;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 1:  {
  HEAP32[$codeNum>>2] = -1;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 1;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _h264bsdDecodeExpGolombSigned($pStrmData,$value) {
 $pStrmData = $pStrmData|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $codeNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $codeNum = sp;
 HEAP32[$codeNum>>2] = 0;
 $0 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$codeNum)|0);
 $1 = HEAP32[$codeNum>>2]|0;
 $2 = ($1|0)==(-1);
 $3 = ($0|0)==(0);
 if ($2) {
  if ($3) {
   $$0 = 1;
  } else {
   HEAP32[$value>>2] = -2147483648;
   $$0 = 0;
  }
 } else {
  if ($3) {
   $4 = $1 & 1;
   $5 = ($4|0)!=(0);
   $6 = (($1) + 1)|0;
   $7 = $6 >>> 1;
   $8 = (0 - ($7))|0;
   $9 = $5 ? $7 : $8;
   HEAP32[$value>>2] = $9;
   $$0 = 0;
  } else {
   $$0 = 1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeExpGolombMapped($pStrmData,$value,$isIntra) {
 $pStrmData = $pStrmData|0;
 $value = $value|0;
 $isIntra = $isIntra|0;
 var $$0 = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $codeNum = 0, $codedBlockPatternInter$codedBlockPatternIntra4x4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $codeNum = sp;
 $0 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$codeNum)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$codeNum>>2]|0;
 $3 = ($2>>>0)>(47);
 if ($3) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($isIntra|0)==(0);
 $codedBlockPatternInter$codedBlockPatternIntra4x4 = $4 ? 61826 : 61874;
 $$sink$in = (($codedBlockPatternInter$codedBlockPatternIntra4x4) + ($2)|0);
 $$sink = HEAP8[$$sink$in>>0]|0;
 $5 = $$sink&255;
 HEAP32[$value>>2] = $5;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeExpGolombTruncated($pStrmData,$value,$greaterThanOne) {
 $pStrmData = $pStrmData|0;
 $value = $value|0;
 $greaterThanOne = $greaterThanOne|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($greaterThanOne|0)==(0);
 if (!($0)) {
  $1 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$value)|0);
  $$0 = $1;
  return ($$0|0);
 }
 $2 = (_h264bsdGetBits($pStrmData,1)|0);
 HEAP32[$value>>2] = $2;
 $3 = ($2|0)==(-1);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = $2 ^ 1;
 HEAP32[$value>>2] = $4;
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdDecodeResidualBlockCavlc($pStrmData,$coeffLevel,$nc,$maxNumCoeff) {
 $pStrmData = $pStrmData|0;
 $coeffLevel = $coeffLevel|0;
 $nc = $nc|0;
 $maxNumCoeff = $maxNumCoeff|0;
 var $$ = 0, $$$i = 0, $$$i8 = 0, $$0 = 0, $$34 = 0, $$629 = 0, $$cmp$i = 0, $$lcssa72 = 0, $$levelPrefix$1 = 0, $$ph = 0, $$ph23 = 0, $$suffixLength$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $bufferBits$1 = 0, $bufferBits$10 = 0, $bufferBits$11 = 0, $bufferBits$11$lcssa = 0, $bufferBits$12 = 0, $bufferBits$2 = 0, $bufferBits$3$lcssa = 0, $bufferBits$356 = 0, $bufferBits$4 = 0, $bufferBits$5 = 0, $bufferBits$6 = 0, $bufferBits$7 = 0, $bufferBits$9$ph = 0, $bufferBits$948 = 0, $bufferValue$1 = 0, $bufferValue$10 = 0, $bufferValue$11 = 0, $bufferValue$2 = 0, $bufferValue$3$lcssa = 0, $bufferValue$355 = 0;
 var $bufferValue$4 = 0, $bufferValue$5 = 0, $bufferValue$6 = 0, $bufferValue$7 = 0, $bufferValue$9$ph = 0, $bufferValue$947 = 0, $i$063 = 0, $i$1 = 0, $i$253 = 0, $i$344 = 0, $level = 0, $levelPrefix$1 = 0, $levelSuffix$043 = 0, $levelSuffix$1 = 0, $numZeros$0$i$ph$ph = 0, $numZeros$0$i$ph13$ph = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $run = 0;
 var $suffixLength$0$ = 0, $suffixLength$0$32 = 0, $suffixLength$054 = 0, $suffixLength$2$ph = 0, $suffixLength$227 = 0, $suffixLength$228 = 0, $suffixLength$3 = 0, $tmp$062 = 0, $tmp$1$ph = 0, $tmp$126 = 0, $tmp$342 = 0, $value$0$i = 0, $value$0$i10 = 0, $value$0$i7 = 0, $value$0$i9 = 0, $value$0$i930 = 0, $zerosLeft$1$ph = 0, $zerosLeft$145 = 0, $zerosLeft$2 = 0, $zerosLeft$2$lcssa = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $level = sp + 64|0;
 $run = sp;
 $0 = (_h264bsdShowBits32($pStrmData)|0);
 $1 = $0 >>> 16;
 $2 = ($nc>>>0)<(2);
 do {
  if ($2) {
   $3 = ($0|0)<(0);
   if ($3) {
    $value$0$i10 = 1;
   } else {
    $4 = ($0>>>0)>(201326591);
    if ($4) {
     $5 = $0 >>> 26;
     $6 = (53468 + ($5<<1)|0);
     $7 = HEAP16[$6>>1]|0;
     $8 = $7&65535;
     $value$0$i = $8;
     label = 25;
     break;
    }
    $9 = ($0>>>0)>(16777215);
    if ($9) {
     $10 = $0 >>> 22;
     $11 = (53532 + ($10<<1)|0);
     $12 = HEAP16[$11>>1]|0;
     $13 = $12&65535;
     $value$0$i = $13;
     label = 25;
     break;
    }
    $14 = ($0>>>0)>(2097151);
    if ($14) {
     $15 = $0 >>> 18;
     $16 = (($15) + -8)|0;
     $17 = (53628 + ($16<<1)|0);
     $18 = HEAP16[$17>>1]|0;
     $19 = $18&65535;
     $value$0$i = $19;
     label = 25;
     break;
    } else {
     $20 = (53740 + ($1<<1)|0);
     $21 = HEAP16[$20>>1]|0;
     $22 = $21&65535;
     $value$0$i = $22;
     label = 25;
     break;
    }
   }
  } else {
   $23 = ($nc>>>0)<(4);
   if ($23) {
    $24 = ($0|0)<(0);
    if ($24) {
     $25 = $1 & 16384;
     $26 = ($25|0)!=(0);
     $27 = $26 ? 2 : 2082;
     $value$0$i10 = $27;
     break;
    }
    $28 = ($0>>>0)>(268435455);
    if ($28) {
     $29 = $0 >>> 26;
     $30 = (53804 + ($29<<1)|0);
     $31 = HEAP16[$30>>1]|0;
     $32 = $31&65535;
     $value$0$i = $32;
     label = 25;
     break;
    }
    $33 = ($0>>>0)>(33554431);
    if ($33) {
     $34 = $0 >>> 23;
     $35 = (53868 + ($34<<1)|0);
     $36 = HEAP16[$35>>1]|0;
     $37 = $36&65535;
     $value$0$i = $37;
     label = 25;
     break;
    } else {
     $38 = $0 >>> 18;
     $39 = (53932 + ($38<<1)|0);
     $40 = HEAP16[$39>>1]|0;
     $41 = $40&65535;
     $value$0$i = $41;
     label = 25;
     break;
    }
   } else {
    $42 = ($nc>>>0)<(8);
    if ($42) {
     $43 = $0 >>> 26;
     $44 = (54188 + ($43<<1)|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = $45&65535;
     $47 = (($43) + -8)|0;
     $48 = ($47>>>0)<(56);
     if ($48) {
      $value$0$i = $46;
      label = 25;
      break;
     }
     $49 = $0 >>> 22;
     $50 = (54316 + ($49<<1)|0);
     $51 = HEAP16[$50>>1]|0;
     $52 = $51&65535;
     $value$0$i = $52;
     label = 25;
     break;
    }
    $53 = ($nc>>>0)<(17);
    if ($53) {
     $54 = $0 >>> 26;
     $55 = (54572 + ($54<<1)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56&65535;
     $value$0$i = $57;
     label = 25;
     break;
    }
    $58 = $0 >>> 29;
    $59 = (54700 + ($58<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $60&65535;
    $62 = ($58|0)==(0);
    if (!($62)) {
     $value$0$i = $61;
     label = 25;
     break;
    }
    $63 = $0 >>> 24;
    $64 = (54716 + ($63<<1)|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $value$0$i = $66;
    label = 25;
    break;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $67 = ($value$0$i|0)==(0);
  if ($67) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $value$0$i10 = $value$0$i;
  }
 }
 $68 = $value$0$i10 & 31;
 $69 = $0 << $68;
 $70 = (32 - ($68))|0;
 $71 = $value$0$i10 >>> 11;
 $72 = $71 & 31;
 $73 = ($72>>>0)>($maxNumCoeff>>>0);
 if ($73) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $74 = $value$0$i10 >>> 5;
 $75 = $74 & 63;
 $76 = ($72|0)==(0);
 do {
  if ($76) {
   $bufferBits$12 = $70;$levelSuffix$1 = 0;
  } else {
   $77 = ($75|0)==(0);
   if ($77) {
    $bufferBits$2 = $70;$bufferValue$2 = $69;$i$1 = 0;
   } else {
    $78 = ($70>>>0)<($75>>>0);
    do {
     if ($78) {
      $79 = (_h264bsdFlushBits($pStrmData,$68)|0);
      $80 = ($79|0)==(-1);
      if ($80) {
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      } else {
       $81 = (_h264bsdShowBits32($pStrmData)|0);
       $bufferBits$1 = 32;$bufferValue$1 = $81;
       break;
      }
     } else {
      $bufferBits$1 = $70;$bufferValue$1 = $69;
     }
    } while(0);
    $82 = (32 - ($75))|0;
    $83 = $bufferValue$1 >>> $82;
    $84 = $bufferValue$1 << $75;
    $85 = (($75) + -1)|0;
    $86 = 1 << $85;
    $i$063 = 0;$tmp$062 = $86;
    while(1) {
     $87 = $tmp$062 & $83;
     $88 = ($87|0)!=(0);
     $89 = $88 ? -1 : 1;
     $90 = (($level) + ($i$063<<2)|0);
     HEAP32[$90>>2] = $89;
     $91 = $tmp$062 >>> 1;
     $92 = (($i$063) + 1)|0;
     $93 = ($91|0)==(0);
     if ($93) {
      $$lcssa72 = $92;
      break;
     } else {
      $i$063 = $92;$tmp$062 = $91;
     }
    }
    $94 = (($bufferBits$1) - ($75))|0;
    $bufferBits$2 = $94;$bufferValue$2 = $84;$i$1 = $$lcssa72;
   }
   $95 = ($75>>>0)<(3);
   $96 = ($i$1>>>0)<($72>>>0);
   L55: do {
    if ($96) {
     $97 = ($72>>>0)>(10);
     $or$cond = $97 & $95;
     $$ = $or$cond&1;
     $bufferBits$356 = $bufferBits$2;$bufferValue$355 = $bufferValue$2;$i$253 = $i$1;$suffixLength$054 = $$;
     L57: while(1) {
      $98 = ($bufferBits$356>>>0)<(16);
      if ($98) {
       $99 = (32 - ($bufferBits$356))|0;
       $100 = (_h264bsdFlushBits($pStrmData,$99)|0);
       $101 = ($100|0)==(-1);
       if ($101) {
        $$0 = 1;
        label = 127;
        break;
       }
       $102 = (_h264bsdShowBits32($pStrmData)|0);
       $bufferBits$4 = 32;$bufferValue$4 = $102;
      } else {
       $bufferBits$4 = $bufferBits$356;$bufferValue$4 = $bufferValue$355;
      }
      $103 = ($bufferValue$4|0)<(0);
      do {
       if ($103) {
        $numZeros$0$i$ph$ph = 0;
        label = 59;
       } else {
        $104 = ($bufferValue$4>>>0)>(1073741823);
        if ($104) {
         $numZeros$0$i$ph$ph = 1;
         label = 59;
        } else {
         $105 = ($bufferValue$4>>>0)>(536870911);
         if ($105) {
          $numZeros$0$i$ph$ph = 2;
          label = 59;
         } else {
          $106 = ($bufferValue$4>>>0)>(268435455);
          if ($106) {
           $numZeros$0$i$ph$ph = 3;
           label = 59;
          } else {
           $107 = ($bufferValue$4>>>0)>(134217727);
           if ($107) {
            $numZeros$0$i$ph$ph = 4;
            label = 59;
           } else {
            $108 = ($bufferValue$4>>>0)>(67108863);
            if ($108) {
             $numZeros$0$i$ph$ph = 5;
             label = 59;
            } else {
             $109 = ($bufferValue$4>>>0)>(33554431);
             if ($109) {
              $numZeros$0$i$ph$ph = 6;
              label = 59;
             } else {
              $110 = ($bufferValue$4>>>0)>(16777215);
              if ($110) {
               $numZeros$0$i$ph$ph = 7;
               label = 59;
              } else {
               $111 = ($bufferValue$4>>>0)>(8388607);
               if ($111) {
                $numZeros$0$i$ph$ph = 8;
                label = 59;
               } else {
                $112 = ($bufferValue$4>>>0)>(4194303);
                if ($112) {
                 $numZeros$0$i$ph$ph = 9;
                 label = 59;
                } else {
                 $113 = ($bufferValue$4>>>0)>(2097151);
                 if ($113) {
                  $numZeros$0$i$ph$ph = 10;
                  label = 59;
                  break;
                 }
                 $114 = ($bufferValue$4>>>0)>(1048575);
                 if ($114) {
                  $numZeros$0$i$ph$ph = 11;
                  label = 59;
                  break;
                 }
                 $115 = ($bufferValue$4>>>0)>(524287);
                 if ($115) {
                  $numZeros$0$i$ph$ph = 12;
                  label = 59;
                  break;
                 }
                 $116 = ($bufferValue$4>>>0)>(262143);
                 if ($116) {
                  $numZeros$0$i$ph$ph = 13;
                  label = 59;
                  break;
                 }
                 $117 = ($bufferValue$4>>>0)>(131071);
                 if ($117) {
                  $119 = $bufferValue$4 << 15;
                  $120 = (($bufferBits$4) + -15)|0;
                  $121 = ($suffixLength$054|0)!=(0);
                  $suffixLength$0$32 = $121 ? $suffixLength$054 : 4;
                  $$ph = $120;$$ph23 = $119;$numZeros$0$i$ph13$ph = 14;$suffixLength$2$ph = $suffixLength$054;$tmp$1$ph = $suffixLength$0$32;
                 } else {
                  $118 = ($bufferValue$4>>>0)<(65536);
                  if ($118) {
                   $$0 = 1;
                   label = 127;
                   break L57;
                  }
                  $122 = $bufferValue$4 << 16;
                  $123 = (($bufferBits$4) + -16)|0;
                  $124 = ($suffixLength$054|0)!=(0);
                  $suffixLength$0$ = $124 ? $suffixLength$054 : 1;
                  $$ph = $123;$$ph23 = $122;$numZeros$0$i$ph13$ph = 15;$suffixLength$2$ph = $suffixLength$0$;$tmp$1$ph = 12;
                 }
                 $125 = ($suffixLength$2$ph|0)==(0);
                 $126 = $numZeros$0$i$ph13$ph << $suffixLength$2$ph;
                 $$629 = $126;$132 = $$ph;$326 = $125;$327 = $$ph23;$suffixLength$227 = $suffixLength$2$ph;$tmp$126 = $tmp$1$ph;
                 label = 60;
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 59) {
       label = 0;
       $127 = (($numZeros$0$i$ph$ph) + 1)|0;
       $128 = $bufferValue$4 << $127;
       $129 = (($bufferBits$4) - ($127))|0;
       $130 = ($suffixLength$054|0)==(0);
       $131 = $numZeros$0$i$ph$ph << $suffixLength$054;
       if ($130) {
        $148 = 1;$bufferBits$6 = $129;$bufferValue$6 = $128;$levelPrefix$1 = $131;$suffixLength$228 = 0;
       } else {
        $$629 = $131;$132 = $129;$326 = 0;$327 = $128;$suffixLength$227 = $suffixLength$054;$tmp$126 = $suffixLength$054;
        label = 60;
       }
      }
      if ((label|0) == 60) {
       label = 0;
       $133 = ($132>>>0)<($tmp$126>>>0);
       if ($133) {
        $134 = (32 - ($132))|0;
        $135 = (_h264bsdFlushBits($pStrmData,$134)|0);
        $136 = ($135|0)==(-1);
        if ($136) {
         $$0 = 1;
         label = 127;
         break;
        }
        $137 = (_h264bsdShowBits32($pStrmData)|0);
        $bufferBits$5 = 32;$bufferValue$5 = $137;
       } else {
        $bufferBits$5 = $132;$bufferValue$5 = $327;
       }
       $138 = (32 - ($tmp$126))|0;
       $139 = $bufferValue$5 >>> $138;
       $140 = $bufferValue$5 << $tmp$126;
       $141 = (($bufferBits$5) - ($tmp$126))|0;
       $142 = (($139) + ($$629))|0;
       $148 = $326;$bufferBits$6 = $141;$bufferValue$6 = $140;$levelPrefix$1 = $142;$suffixLength$228 = $suffixLength$227;
      }
      $143 = ($i$253|0)==($75|0);
      $or$cond3 = $95 & $143;
      $144 = (($levelPrefix$1) + 2)|0;
      $$levelPrefix$1 = $or$cond3 ? $144 : $levelPrefix$1;
      $145 = (($$levelPrefix$1) + 2)|0;
      $146 = $145 >>> 1;
      $147 = (($level) + ($i$253<<2)|0);
      $suffixLength$3 = $148 ? 1 : $suffixLength$228;
      $149 = (($suffixLength$3) + -1)|0;
      $150 = 3 << $149;
      $151 = ($146|0)>($150|0);
      $152 = ($suffixLength$3>>>0)<(6);
      $or$cond5 = $152 & $151;
      $153 = $or$cond5&1;
      $$suffixLength$3 = (($153) + ($suffixLength$3))|0;
      $154 = $$levelPrefix$1 & 1;
      $155 = ($154|0)==(0);
      $156 = (0 - ($146))|0;
      $$34 = $155 ? $146 : $156;
      HEAP32[$147>>2] = $$34;
      $157 = (($i$253) + 1)|0;
      $158 = ($157>>>0)<($72>>>0);
      if ($158) {
       $bufferBits$356 = $bufferBits$6;$bufferValue$355 = $bufferValue$6;$i$253 = $157;$suffixLength$054 = $$suffixLength$3;
      } else {
       $bufferBits$3$lcssa = $bufferBits$6;$bufferValue$3$lcssa = $bufferValue$6;
       break L55;
      }
     }
     if ((label|0) == 127) {
      STACKTOP = sp;return ($$0|0);
     }
    } else {
     $bufferBits$3$lcssa = $bufferBits$2;$bufferValue$3$lcssa = $bufferValue$2;
    }
   } while(0);
   $159 = ($72>>>0)<($maxNumCoeff>>>0);
   if ($159) {
    $160 = ($bufferBits$3$lcssa>>>0)<(9);
    do {
     if ($160) {
      $161 = (32 - ($bufferBits$3$lcssa))|0;
      $162 = (_h264bsdFlushBits($pStrmData,$161)|0);
      $163 = ($162|0)==(-1);
      if ($163) {
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      } else {
       $164 = (_h264bsdShowBits32($pStrmData)|0);
       $bufferBits$7 = 32;$bufferValue$7 = $164;
       break;
      }
     } else {
      $bufferBits$7 = $bufferBits$3$lcssa;$bufferValue$7 = $bufferValue$3$lcssa;
     }
    } while(0);
    $165 = $bufferValue$7 >>> 23;
    $166 = ($maxNumCoeff|0)==(4);
    L105: do {
     if ($166) {
      $229 = ($bufferValue$7|0)<(0);
      if ($229) {
       $value$0$i930 = 1;
      } else {
       $230 = ($72|0)==(3);
       if ($230) {
        $value$0$i930 = 17;
       } else {
        $231 = ($bufferValue$7>>>0)>(1073741823);
        if ($231) {
         $value$0$i930 = 18;
        } else {
         $232 = ($72|0)==(2);
         if ($232) {
          $value$0$i930 = 34;
         } else {
          $233 = ($bufferValue$7>>>0)>(536870911);
          $$$i8 = $233 ? 35 : 51;
          $value$0$i930 = $$$i8;
         }
        }
       }
      }
     } else {
      do {
       switch ($72|0) {
       case 1:  {
        $167 = $bufferValue$7 >>> 27;
        $168 = (61922 + ($167)|0);
        $169 = HEAP8[$168>>0]|0;
        $170 = $169&255;
        $$cmp$i = ($bufferValue$7>>>0)>(268435455);
        if ($$cmp$i) {
         $value$0$i9 = $170;
        } else {
         $171 = (61954 + ($165)|0);
         $172 = HEAP8[$171>>0]|0;
         $173 = $172&255;
         $value$0$i9 = $173;
        }
        break;
       }
       case 2:  {
        $174 = $bufferValue$7 >>> 26;
        $175 = (61986 + ($174)|0);
        $176 = HEAP8[$175>>0]|0;
        $177 = $176&255;
        $value$0$i9 = $177;
        break;
       }
       case 3:  {
        $178 = $bufferValue$7 >>> 26;
        $179 = (62050 + ($178)|0);
        $180 = HEAP8[$179>>0]|0;
        $181 = $180&255;
        $value$0$i9 = $181;
        break;
       }
       case 4:  {
        $182 = $bufferValue$7 >>> 27;
        $183 = (62114 + ($182)|0);
        $184 = HEAP8[$183>>0]|0;
        $185 = $184&255;
        $value$0$i9 = $185;
        break;
       }
       case 5:  {
        $186 = $bufferValue$7 >>> 27;
        $187 = (62146 + ($186)|0);
        $188 = HEAP8[$187>>0]|0;
        $189 = $188&255;
        $value$0$i9 = $189;
        break;
       }
       case 6:  {
        $190 = $bufferValue$7 >>> 26;
        $191 = (62178 + ($190)|0);
        $192 = HEAP8[$191>>0]|0;
        $193 = $192&255;
        $value$0$i9 = $193;
        break;
       }
       case 7:  {
        $194 = $bufferValue$7 >>> 26;
        $195 = (62242 + ($194)|0);
        $196 = HEAP8[$195>>0]|0;
        $197 = $196&255;
        $value$0$i9 = $197;
        break;
       }
       case 8:  {
        $198 = $bufferValue$7 >>> 26;
        $199 = (62306 + ($198)|0);
        $200 = HEAP8[$199>>0]|0;
        $201 = $200&255;
        $value$0$i9 = $201;
        break;
       }
       case 9:  {
        $202 = $bufferValue$7 >>> 26;
        $203 = (62370 + ($202)|0);
        $204 = HEAP8[$203>>0]|0;
        $205 = $204&255;
        $value$0$i9 = $205;
        break;
       }
       case 10:  {
        $206 = $bufferValue$7 >>> 27;
        $207 = (62434 + ($206)|0);
        $208 = HEAP8[$207>>0]|0;
        $209 = $208&255;
        $value$0$i9 = $209;
        break;
       }
       case 11:  {
        $210 = $bufferValue$7 >>> 28;
        $211 = (62466 + ($210)|0);
        $212 = HEAP8[$211>>0]|0;
        $213 = $212&255;
        $value$0$i9 = $213;
        break;
       }
       case 12:  {
        $214 = $bufferValue$7 >>> 28;
        $215 = (62482 + ($214)|0);
        $216 = HEAP8[$215>>0]|0;
        $217 = $216&255;
        $value$0$i9 = $217;
        break;
       }
       case 13:  {
        $218 = $bufferValue$7 >>> 29;
        $219 = (62498 + ($218)|0);
        $220 = HEAP8[$219>>0]|0;
        $221 = $220&255;
        $value$0$i9 = $221;
        break;
       }
       case 14:  {
        $222 = $bufferValue$7 >>> 30;
        $223 = (62506 + ($222)|0);
        $224 = HEAP8[$223>>0]|0;
        $225 = $224&255;
        $value$0$i9 = $225;
        break;
       }
       default: {
        $226 = $bufferValue$7 >> 31;
        $227 = $226 & 16;
        $228 = $227 | 1;
        $value$0$i930 = $228;
        break L105;
       }
       }
      } while(0);
      $234 = ($value$0$i9|0)==(0);
      if ($234) {
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      } else {
       $value$0$i930 = $value$0$i9;
      }
     }
    } while(0);
    $235 = $value$0$i930 & 15;
    $236 = $bufferValue$7 << $235;
    $237 = (($bufferBits$7) - ($235))|0;
    $238 = $value$0$i930 >>> 4;
    $239 = $238 & 15;
    $bufferBits$9$ph = $237;$bufferValue$9$ph = $236;$zerosLeft$1$ph = $239;
   } else {
    $bufferBits$9$ph = $bufferBits$3$lcssa;$bufferValue$9$ph = $bufferValue$3$lcssa;$zerosLeft$1$ph = 0;
   }
   $240 = (($72) + -1)|0;
   $241 = ($240|0)==(0);
   if ($241) {
    $242 = (($level) + ($240<<2)|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (($coeffLevel) + ($zerosLeft$1$ph<<2)|0);
    HEAP32[$244>>2] = $243;
    $245 = 1 << $zerosLeft$1$ph;
    $bufferBits$12 = $bufferBits$9$ph;$levelSuffix$1 = $245;
    break;
   } else {
    $bufferBits$948 = $bufferBits$9$ph;$bufferValue$947 = $bufferValue$9$ph;$i$344 = 0;$zerosLeft$145 = $zerosLeft$1$ph;
   }
   L135: while(1) {
    $246 = ($zerosLeft$145|0)==(0);
    if ($246) {
     $301 = (($run) + ($i$344<<2)|0);
     HEAP32[$301>>2] = 1;
     $bufferBits$11 = $bufferBits$948;$bufferValue$11 = $bufferValue$947;$zerosLeft$2 = 0;
    } else {
     $247 = ($bufferBits$948>>>0)<(11);
     if ($247) {
      $248 = (32 - ($bufferBits$948))|0;
      $249 = (_h264bsdFlushBits($pStrmData,$248)|0);
      $250 = ($249|0)==(-1);
      if ($250) {
       $$0 = 1;
       label = 127;
       break;
      }
      $251 = (_h264bsdShowBits32($pStrmData)|0);
      $bufferBits$10 = 32;$bufferValue$10 = $251;
     } else {
      $bufferBits$10 = $bufferBits$948;$bufferValue$10 = $bufferValue$947;
     }
     switch ($zerosLeft$145|0) {
     case 1:  {
      $252 = $bufferValue$10 >>> 31;
      $253 = (62510 + ($252)|0);
      $254 = HEAP8[$253>>0]|0;
      $255 = $254&255;
      $291 = $255;
      break;
     }
     case 2:  {
      $256 = $bufferValue$10 >>> 30;
      $257 = (62512 + ($256)|0);
      $258 = HEAP8[$257>>0]|0;
      $259 = $258&255;
      $291 = $259;
      break;
     }
     case 3:  {
      $260 = $bufferValue$10 >>> 30;
      $261 = (62516 + ($260)|0);
      $262 = HEAP8[$261>>0]|0;
      $263 = $262&255;
      $291 = $263;
      break;
     }
     case 4:  {
      $264 = $bufferValue$10 >>> 29;
      $265 = (62520 + ($264)|0);
      $266 = HEAP8[$265>>0]|0;
      $267 = $266&255;
      $291 = $267;
      break;
     }
     case 5:  {
      $268 = $bufferValue$10 >>> 29;
      $269 = (62528 + ($268)|0);
      $270 = HEAP8[$269>>0]|0;
      $271 = $270&255;
      $291 = $271;
      break;
     }
     case 6:  {
      $272 = $bufferValue$10 >>> 29;
      $273 = (62536 + ($272)|0);
      $274 = HEAP8[$273>>0]|0;
      $275 = $274&255;
      $291 = $275;
      break;
     }
     default: {
      $276 = ($bufferValue$10>>>0)>(536870911);
      do {
       if ($276) {
        $277 = $bufferValue$10 >>> 29;
        $278 = $277 << 4;
        $279 = $278 ^ 115;
        $value$0$i7 = $279;
       } else {
        $280 = ($bufferValue$10>>>0)>(268435455);
        if ($280) {
         $value$0$i7 = 116;
        } else {
         $281 = ($bufferValue$10>>>0)>(134217727);
         if ($281) {
          $value$0$i7 = 133;
         } else {
          $282 = ($bufferValue$10>>>0)>(67108863);
          if ($282) {
           $value$0$i7 = 150;
          } else {
           $283 = ($bufferValue$10>>>0)>(33554431);
           if ($283) {
            $value$0$i7 = 167;
           } else {
            $284 = ($bufferValue$10>>>0)>(16777215);
            if ($284) {
             $value$0$i7 = 184;
            } else {
             $285 = ($bufferValue$10>>>0)>(8388607);
             if ($285) {
              $value$0$i7 = 201;
              break;
             }
             $286 = ($bufferValue$10>>>0)>(4194303);
             if ($286) {
              $value$0$i7 = 218;
              break;
             }
             $287 = ($bufferValue$10>>>0)<(2097152);
             $$$i = $287 ? 0 : 235;
             $value$0$i7 = $$$i;
            }
           }
          }
         }
        }
       }
      } while(0);
      $288 = $value$0$i7 >>> 4;
      $289 = $288 & 15;
      $290 = ($289>>>0)>($zerosLeft$145>>>0);
      if ($290) {
       $$0 = 1;
       label = 127;
       break L135;
      } else {
       $291 = $value$0$i7;
      }
     }
     }
     $292 = ($291|0)==(0);
     if ($292) {
      $$0 = 1;
      label = 127;
      break;
     }
     $293 = $291 & 15;
     $294 = $bufferValue$10 << $293;
     $295 = (($bufferBits$10) - ($293))|0;
     $296 = $291 >>> 4;
     $297 = $296 & 15;
     $298 = (($run) + ($i$344<<2)|0);
     $299 = (($297) + 1)|0;
     HEAP32[$298>>2] = $299;
     $300 = (($zerosLeft$145) - ($297))|0;
     $bufferBits$11 = $295;$bufferValue$11 = $294;$zerosLeft$2 = $300;
    }
    $302 = (($i$344) + 1)|0;
    $303 = ($302>>>0)<($240>>>0);
    if ($303) {
     $bufferBits$948 = $bufferBits$11;$bufferValue$947 = $bufferValue$11;$i$344 = $302;$zerosLeft$145 = $zerosLeft$2;
    } else {
     $bufferBits$11$lcssa = $bufferBits$11;$zerosLeft$2$lcssa = $zerosLeft$2;
     label = 122;
     break;
    }
   }
   if ((label|0) == 122) {
    $304 = (($level) + ($240<<2)|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = (($coeffLevel) + ($zerosLeft$2$lcssa<<2)|0);
    HEAP32[$306>>2] = $305;
    $307 = 1 << $zerosLeft$2$lcssa;
    if ($241) {
     $bufferBits$12 = $bufferBits$11$lcssa;$levelSuffix$1 = $307;
     break;
    }
    $308 = (($72) + -2)|0;
    $310 = $308;$levelSuffix$043 = $307;$tmp$342 = $zerosLeft$2$lcssa;
    while(1) {
     $309 = (($run) + ($310<<2)|0);
     $311 = HEAP32[$309>>2]|0;
     $312 = (($311) + ($tmp$342))|0;
     $313 = 1 << $312;
     $314 = $313 | $levelSuffix$043;
     $315 = (($level) + ($310<<2)|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = (($coeffLevel) + ($312<<2)|0);
     HEAP32[$317>>2] = $316;
     $318 = (($310) + -1)|0;
     $319 = ($310|0)==(0);
     if ($319) {
      $bufferBits$12 = $bufferBits$11$lcssa;$levelSuffix$1 = $314;
      break;
     } else {
      $310 = $318;$levelSuffix$043 = $314;$tmp$342 = $312;
     }
    }
   }
   else if ((label|0) == 127) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $320 = (32 - ($bufferBits$12))|0;
 $321 = (_h264bsdFlushBits($pStrmData,$320)|0);
 $322 = ($321|0)==(0);
 if (!($322)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $323 = $72 << 4;
 $324 = $levelSuffix$1 << 16;
 $325 = $324 | $323;
 $$0 = $325;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdDecodeNalUnit($pStrmData,$pNalUnit) {
 $pStrmData = $pStrmData|0;
 $pNalUnit = $pNalUnit|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_h264bsdGetBits($pStrmData,1)|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  $$0 = 1;
  return ($$0|0);
 }
 $2 = (_h264bsdGetBits($pStrmData,2)|0);
 $3 = ((($pNalUnit)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = (_h264bsdGetBits($pStrmData,5)|0);
 HEAP32[$pNalUnit>>2] = $4;
 $$off = (($4) + -2)|0;
 $switch = ($$off>>>0)<(3);
 if ($switch) {
  $$0 = 1;
  return ($$0|0);
 }
 L7: do {
  switch ($4|0) {
  case 5: case 7: case 8:  {
   $5 = HEAP32[$3>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0 = 1;
    return ($$0|0);
   } else {
    $cond = ($4|0)==(6);
    if ($cond) {
     label = 6;
     break L7;
    } else {
     break L7;
    }
   }
   break;
  }
  case 6: case 9: case 10: case 11: case 12:  {
   label = 6;
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = ($7|0)==(0);
  if (!($8)) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdInitMbNeighbours($pMbStorage,$picWidth,$picSizeInMbs) {
 $pMbStorage = $pMbStorage|0;
 $picWidth = $picWidth|0;
 $picSizeInMbs = $picSizeInMbs|0;
 var $$ = 0, $$row$0 = 0, $$sink = 0, $$sink11 = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$010 = 0, $exitcond = 0, $i$08 = 0, $or$cond = 0, $row$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($picSizeInMbs|0)==(0);
 if ($0) {
  return;
 }
 $1 = (($picWidth) + -1)|0;
 $2 = (1 - ($picWidth))|0;
 $3 = $picWidth ^ -1;
 $col$010 = 0;$i$08 = 0;$row$09 = 0;
 while(1) {
  $4 = ($col$010|0)!=(0);
  $$sum4 = (($i$08) + -1)|0;
  $5 = (($pMbStorage) + (($$sum4*216)|0)|0);
  $$sink = $4 ? $5 : 0;
  $6 = (((($pMbStorage) + (($i$08*216)|0)|0)) + 200|0);
  HEAP32[$6>>2] = $$sink;
  $7 = ($row$09|0)!=(0);
  if ($7) {
   $$sum3 = (($i$08) - ($picWidth))|0;
   $9 = (($pMbStorage) + (($$sum3*216)|0)|0);
   $10 = (((($pMbStorage) + (($i$08*216)|0)|0)) + 204|0);
   HEAP32[$10>>2] = $9;
   $11 = ($col$010>>>0)<($1>>>0);
   if ($11) {
    $$sum2 = (($2) + ($i$08))|0;
    $12 = (($pMbStorage) + (($$sum2*216)|0)|0);
    $13 = (((($pMbStorage) + (($i$08*216)|0)|0)) + 208|0);
    HEAP32[$13>>2] = $12;
   } else {
    label = 7;
   }
  } else {
   $8 = (((($pMbStorage) + (($i$08*216)|0)|0)) + 204|0);
   HEAP32[$8>>2] = 0;
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $14 = (((($pMbStorage) + (($i$08*216)|0)|0)) + 208|0);
   HEAP32[$14>>2] = 0;
  }
  $or$cond = $7 & $4;
  $$sum = (($i$08) + ($3))|0;
  $15 = (($pMbStorage) + (($$sum*216)|0)|0);
  $$sink11 = $or$cond ? $15 : 0;
  $16 = (((($pMbStorage) + (($i$08*216)|0)|0)) + 212|0);
  HEAP32[$16>>2] = $$sink11;
  $17 = (($col$010) + 1)|0;
  $18 = ($17|0)==($picWidth|0);
  $19 = $18&1;
  $$row$0 = (($19) + ($row$09))|0;
  $$ = $18 ? 0 : $17;
  $20 = (($i$08) + 1)|0;
  $exitcond = ($20|0)==($picSizeInMbs|0);
  if ($exitcond) {
   break;
  } else {
   $col$010 = $$;$i$08 = $20;$row$09 = $$row$0;
  }
 }
 return;
}
function _h264bsdGetNeighbourMb($pMb,$neighbour) {
 $pMb = $pMb|0;
 $neighbour = $neighbour|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($neighbour|0) {
 case 0:  {
  $0 = ((($pMb)) + 200|0);
  $1 = HEAP32[$0>>2]|0;
  $$0 = $1;
  break;
 }
 case 1:  {
  $2 = ((($pMb)) + 204|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
  break;
 }
 case 2:  {
  $4 = ((($pMb)) + 208|0);
  $5 = HEAP32[$4>>2]|0;
  $$0 = $5;
  break;
 }
 case 3:  {
  $6 = ((($pMb)) + 212|0);
  $7 = HEAP32[$6>>2]|0;
  $$0 = $7;
  break;
 }
 case 4:  {
  $$0 = $pMb;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _h264bsdNeighbour4x4BlockA($blockIndex) {
 $blockIndex = $blockIndex|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (3152 + ($blockIndex<<3)|0);
 return ($0|0);
}
function _h264bsdNeighbour4x4BlockB($blockIndex) {
 $blockIndex = $blockIndex|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (3344 + ($blockIndex<<3)|0);
 return ($0|0);
}
function _h264bsdNeighbour4x4BlockC($blockIndex) {
 $blockIndex = $blockIndex|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (3536 + ($blockIndex<<3)|0);
 return ($0|0);
}
function _h264bsdNeighbour4x4BlockD($blockIndex) {
 $blockIndex = $blockIndex|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (3728 + ($blockIndex<<3)|0);
 return ($0|0);
}
function _h264bsdIsNeighbourAvailable($pMb,$pNeighbour) {
 $pMb = $pMb|0;
 $pNeighbour = $pNeighbour|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pNeighbour|0)==(0|0);
 if ($0) {
  return 0;
 } else {
  $1 = ((($pMb)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($pNeighbour)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)==($4|0);
  $$ = $5&1;
  return ($$|0);
 }
 return (0)|0;
}
function _h264bsdInitStorage($pStorage) {
 $pStorage = $pStorage|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _H264SwDecMemset($pStorage,0,3388);
 $0 = ((($pStorage)) + 8|0);
 HEAP32[$0>>2] = 32;
 $1 = ((($pStorage)) + 4|0);
 HEAP32[$1>>2] = 256;
 $2 = ((($pStorage)) + 1332|0);
 HEAP32[$2>>2] = 1;
 return;
}
function _h264bsdStoreSeqParamSet($pStorage,$pSeqParamSet) {
 $pStorage = $pStorage|0;
 $pSeqParamSet = $pSeqParamSet|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($pSeqParamSet)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($pStorage)) + 20|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $5 = (_H264SwDecMalloc(92)|0);
   HEAP32[$2>>2] = $5;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 65535;
    return ($$0|0);
   }
  } else {
   $7 = ((($pStorage)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($1|0)==($8|0);
   if (!($9)) {
    $30 = ((($3)) + 40|0);
    $31 = HEAP32[$30>>2]|0;
    _H264SwDecFree($31);
    $32 = HEAP32[$2>>2]|0;
    $33 = ((($32)) + 40|0);
    HEAP32[$33>>2] = 0;
    $34 = HEAP32[$2>>2]|0;
    $35 = ((($34)) + 84|0);
    $36 = HEAP32[$35>>2]|0;
    _H264SwDecFree($36);
    $37 = HEAP32[$2>>2]|0;
    $38 = ((($37)) + 84|0);
    HEAP32[$38>>2] = 0;
    break;
   }
   $10 = ((($pStorage)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_h264bsdCompareSeqParamSets($pSeqParamSet,$11)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    $14 = HEAP32[$2>>2]|0;
    $15 = ((($14)) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    _H264SwDecFree($16);
    $17 = HEAP32[$2>>2]|0;
    $18 = ((($17)) + 40|0);
    HEAP32[$18>>2] = 0;
    $19 = HEAP32[$2>>2]|0;
    $20 = ((($19)) + 84|0);
    $21 = HEAP32[$20>>2]|0;
    _H264SwDecFree($21);
    $22 = HEAP32[$2>>2]|0;
    $23 = ((($22)) + 84|0);
    HEAP32[$23>>2] = 0;
    HEAP32[$7>>2] = 33;
    $24 = ((($pStorage)) + 4|0);
    HEAP32[$24>>2] = 257;
    HEAP32[$10>>2] = 0;
    $25 = ((($pStorage)) + 12|0);
    HEAP32[$25>>2] = 0;
    break;
   }
   $26 = ((($pSeqParamSet)) + 40|0);
   $27 = HEAP32[$26>>2]|0;
   _H264SwDecFree($27);
   HEAP32[$26>>2] = 0;
   $28 = ((($pSeqParamSet)) + 84|0);
   $29 = HEAP32[$28>>2]|0;
   _H264SwDecFree($29);
   HEAP32[$28>>2] = 0;
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $39 = HEAP32[$2>>2]|0;
 dest=$39; src=$pSeqParamSet; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdStorePicParamSet($pStorage,$pPicParamSet) {
 $pStorage = $pStorage|0;
 $pPicParamSet = $pPicParamSet|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pPicParamSet>>2]|0;
 $1 = (((($pStorage)) + 148|0) + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $4 = (_H264SwDecMalloc(72)|0);
   HEAP32[$1>>2] = $4;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0 = 65535;
    return ($$0|0);
   }
  } else {
   $6 = ((($pStorage)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($0|0)==($7|0);
   if (!($8)) {
    $34 = ((($2)) + 20|0);
    $35 = HEAP32[$34>>2]|0;
    _H264SwDecFree($35);
    $36 = HEAP32[$1>>2]|0;
    $37 = ((($36)) + 20|0);
    HEAP32[$37>>2] = 0;
    $38 = HEAP32[$1>>2]|0;
    $39 = ((($38)) + 24|0);
    $40 = HEAP32[$39>>2]|0;
    _H264SwDecFree($40);
    $41 = HEAP32[$1>>2]|0;
    $42 = ((($41)) + 24|0);
    HEAP32[$42>>2] = 0;
    $43 = HEAP32[$1>>2]|0;
    $44 = ((($43)) + 28|0);
    $45 = HEAP32[$44>>2]|0;
    _H264SwDecFree($45);
    $46 = HEAP32[$1>>2]|0;
    $47 = ((($46)) + 28|0);
    HEAP32[$47>>2] = 0;
    $48 = HEAP32[$1>>2]|0;
    $49 = ((($48)) + 44|0);
    $50 = HEAP32[$49>>2]|0;
    _H264SwDecFree($50);
    $51 = HEAP32[$1>>2]|0;
    $52 = ((($51)) + 44|0);
    HEAP32[$52>>2] = 0;
    break;
   }
   $9 = ((($pPicParamSet)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($pStorage)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10|0)==($12|0);
   if ($13) {
    $15 = $2;
   } else {
    HEAP32[$6>>2] = 257;
    $$pre = HEAP32[$1>>2]|0;
    $15 = $$pre;
   }
   $14 = ((($15)) + 20|0);
   $16 = HEAP32[$14>>2]|0;
   _H264SwDecFree($16);
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 20|0);
   HEAP32[$18>>2] = 0;
   $19 = HEAP32[$1>>2]|0;
   $20 = ((($19)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   _H264SwDecFree($21);
   $22 = HEAP32[$1>>2]|0;
   $23 = ((($22)) + 24|0);
   HEAP32[$23>>2] = 0;
   $24 = HEAP32[$1>>2]|0;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   _H264SwDecFree($26);
   $27 = HEAP32[$1>>2]|0;
   $28 = ((($27)) + 28|0);
   HEAP32[$28>>2] = 0;
   $29 = HEAP32[$1>>2]|0;
   $30 = ((($29)) + 44|0);
   $31 = HEAP32[$30>>2]|0;
   _H264SwDecFree($31);
   $32 = HEAP32[$1>>2]|0;
   $33 = ((($32)) + 44|0);
   HEAP32[$33>>2] = 0;
  }
 } while(0);
 $53 = HEAP32[$1>>2]|0;
 dest=$53; src=$pPicParamSet; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdActivateParamSets($pStorage,$ppsId,$isIdr) {
 $pStorage = $pStorage|0;
 $ppsId = $ppsId|0;
 $isIdr = $isIdr|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $flag$0 = 0, $i$05$i = 0, $i$16$i = 0, $or$cond = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((($pStorage)) + 148|0) + ($ppsId<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($pStorage)) + 20|0) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 1;
  return ($$0|0);
 }
 $$idx = ((($6)) + 52|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx1 = ((($6)) + 56|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $8 = Math_imul($$idx1$val, $$idx$val)|0;
 $9 = ((($1)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10>>>0)>(1);
 L7: do {
  if ($11) {
   $12 = ((($1)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   switch ($13|0) {
   case 0:  {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $i$05$i = 0;
    while(1) {
     $23 = (($20) + ($i$05$i<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24>>>0)>($8>>>0);
     $21 = (($i$05$i) + 1)|0;
     if ($25) {
      $$0 = 1;
      break;
     }
     $22 = ($21>>>0)<($10>>>0);
     if ($22) {
      $i$05$i = $21;
     } else {
      break L7;
     }
    }
    return ($$0|0);
    break;
   }
   case 2:  {
    $14 = ((($1)) + 24|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($1)) + 28|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($10) + -1)|0;
    $i$16$i = 0;
    while(1) {
     $28 = (($15) + ($i$16$i<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($17) + ($i$16$i<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($29>>>0)<=($31>>>0);
     $33 = ($31>>>0)<($8>>>0);
     $or$cond$i = $32 & $33;
     if (!($or$cond$i)) {
      $$0 = 1;
      label = 33;
      break;
     }
     $34 = (($29>>>0) % ($$idx$val>>>0))&-1;
     $35 = (($31>>>0) % ($$idx$val>>>0))&-1;
     $36 = ($34>>>0)>($35>>>0);
     $26 = (($i$16$i) + 1)|0;
     if ($36) {
      $$0 = 1;
      label = 33;
      break;
     }
     $27 = ($26>>>0)<($18>>>0);
     if ($27) {
      $i$16$i = $26;
     } else {
      break L7;
     }
    }
    if ((label|0) == 33) {
     return ($$0|0);
    }
    break;
   }
   default: {
    $$off$i = (($13) + -3)|0;
    $37 = ($$off$i>>>0)<(3);
    if ($37) {
     $38 = ((($1)) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39>>>0)>($8>>>0);
     if ($40) {
      $$0 = 1;
     } else {
      break L7;
     }
     return ($$0|0);
    }
    $41 = ($13|0)==(6);
    if (!($41)) {
     break L7;
    }
    $42 = ((($1)) + 40|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43>>>0)<($8>>>0);
    if ($44) {
     $$0 = 1;
    } else {
     break L7;
    }
    return ($$0|0);
   }
   }
  }
 } while(0);
 $45 = ((($pStorage)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(256);
 do {
  if ($47) {
   HEAP32[$45>>2] = $ppsId;
   $48 = HEAP32[$0>>2]|0;
   $49 = ((($pStorage)) + 12|0);
   HEAP32[$49>>2] = $48;
   $50 = ((($48)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($pStorage)) + 8|0);
   HEAP32[$52>>2] = $51;
   $53 = (((($pStorage)) + 20|0) + ($51<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($pStorage)) + 16|0);
   HEAP32[$55>>2] = $54;
   $56 = ((($54)) + 52|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($54)) + 56|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = Math_imul($59, $57)|0;
   $61 = ((($pStorage)) + 1176|0);
   HEAP32[$61>>2] = $60;
   $62 = ((($pStorage)) + 1340|0);
   HEAP32[$62>>2] = $57;
   $63 = ((($pStorage)) + 1344|0);
   HEAP32[$63>>2] = $59;
   $64 = ((($pStorage)) + 3380|0);
   HEAP32[$64>>2] = 1;
  } else {
   $65 = ((($pStorage)) + 3380|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(0);
   if ($67) {
    $122 = ($46|0)==($ppsId|0);
    if ($122) {
     break;
    }
    $123 = ((($pStorage)) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($4|0)==($124|0);
    if ($125) {
     HEAP32[$45>>2] = $ppsId;
     $142 = HEAP32[$0>>2]|0;
     $143 = ((($pStorage)) + 12|0);
     HEAP32[$143>>2] = $142;
     break;
    }
    $126 = ($isIdr|0)==(0);
    if ($126) {
     $$0 = 1;
     return ($$0|0);
    } else {
     HEAP32[$45>>2] = $ppsId;
     $127 = HEAP32[$0>>2]|0;
     $128 = ((($pStorage)) + 12|0);
     HEAP32[$128>>2] = $127;
     $129 = ((($127)) + 4|0);
     $130 = HEAP32[$129>>2]|0;
     HEAP32[$123>>2] = $130;
     $131 = (((($pStorage)) + 20|0) + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($pStorage)) + 16|0);
     HEAP32[$133>>2] = $132;
     $134 = ((($132)) + 52|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ((($132)) + 56|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = Math_imul($137, $135)|0;
     $139 = ((($pStorage)) + 1176|0);
     HEAP32[$139>>2] = $138;
     $140 = ((($pStorage)) + 1340|0);
     HEAP32[$140>>2] = $135;
     $141 = ((($pStorage)) + 1344|0);
     HEAP32[$141>>2] = $137;
     HEAP32[$65>>2] = 1;
     break;
    }
   }
   HEAP32[$65>>2] = 0;
   $68 = ((($pStorage)) + 1212|0);
   $69 = HEAP32[$68>>2]|0;
   _H264SwDecFree($69);
   HEAP32[$68>>2] = 0;
   $70 = ((($pStorage)) + 1172|0);
   $71 = HEAP32[$70>>2]|0;
   _H264SwDecFree($71);
   HEAP32[$70>>2] = 0;
   $72 = ((($pStorage)) + 1176|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73*216)|0;
   $75 = (_H264SwDecMalloc($74)|0);
   HEAP32[$68>>2] = $75;
   $76 = HEAP32[$72>>2]|0;
   $77 = $76 << 2;
   $78 = (_H264SwDecMalloc($77)|0);
   HEAP32[$70>>2] = $78;
   $79 = HEAP32[$68>>2]|0;
   $80 = ($79|0)==(0|0);
   $81 = ($78|0)==(0|0);
   $or$cond = $81 | $80;
   if ($or$cond) {
    $$0 = 65535;
    return ($$0|0);
   }
   $82 = HEAP32[$72>>2]|0;
   $83 = ($82*216)|0;
   _H264SwDecMemset($79,0,$83);
   $84 = HEAP32[$68>>2]|0;
   $85 = ((($pStorage)) + 16|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ((($86)) + 52|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = HEAP32[$72>>2]|0;
   _h264bsdInitMbNeighbours($84,$88,$89);
   $90 = ((($pStorage)) + 1216|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ($91|0)==(0);
   $93 = HEAP32[$85>>2]|0;
   do {
    if ($92) {
     $94 = ((($93)) + 16|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(2);
     if ($96) {
      $flag$0 = 1;
     } else {
      $97 = ((($93)) + 80|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($98|0)==(0);
      if (!($99)) {
       $100 = ((($93)) + 84|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ((($101)) + 920|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0);
       if (!($104)) {
        $105 = ((($101)) + 944|0);
        $106 = HEAP32[$105>>2]|0;
        $107 = ($106|0)==(0);
        if ($107) {
         $flag$0 = 1;
         break;
        }
       }
      }
      $flag$0 = 0;
     }
    } else {
     $flag$0 = 1;
    }
   } while(0);
   $108 = ((($pStorage)) + 1220|0);
   $109 = ((($93)) + 52|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ((($93)) + 56|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = Math_imul($112, $110)|0;
   $114 = ((($93)) + 88|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((($93)) + 44|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($93)) + 12|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (_h264bsdResetDpb($108,$113,$115,$117,$119,$flag$0)|0);
   $121 = ($120|0)==(0);
   if (!($121)) {
    $$0 = $120;
    return ($$0|0);
   }
  }
 } while(0);
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdResetStorage($pStorage) {
 $pStorage = $pStorage|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 1196|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($pStorage)) + 1192|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($pStorage)) + 1176|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($pStorage)) + 1212|0);
 $6 = HEAP32[$5>>2]|0;
 $i$01 = 0;
 while(1) {
  $7 = (((($6) + (($i$01*216)|0)|0)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = (((($6) + (($i$01*216)|0)|0)) + 196|0);
  HEAP32[$8>>2] = 0;
  $9 = (($i$01) + 1)|0;
  $10 = ($9>>>0)<($3>>>0);
  if ($10) {
   $i$01 = $9;
  } else {
   break;
  }
 }
 return;
}
function _h264bsdIsStartOfPicture($pStorage) {
 $pStorage = $pStorage|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 1188|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$ = $2&1;
 return ($$|0);
}
function _h264bsdIsEndOfPicture($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $tmp$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 1404|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $8 = ((($pStorage)) + 1196|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($pStorage)) + 1176|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)==($11|0);
  if ($12) {
   $$0 = 1;
   return ($$0|0);
  }
 } else {
  $3 = ((($pStorage)) + 1176|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 1;
   return ($$0|0);
  }
  $6 = ((($pStorage)) + 1212|0);
  $7 = HEAP32[$6>>2]|0;
  $i$01 = 0;$tmp$02 = 0;
  while(1) {
   $13 = (((($7) + (($i$01*216)|0)|0)) + 196|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(0);
   $16 = $15&1;
   $17 = (($16) + ($tmp$02))|0;
   $18 = (($i$01) + 1)|0;
   $19 = ($18>>>0)<($4>>>0);
   if ($19) {
    $i$01 = $18;$tmp$02 = $17;
   } else {
    $$lcssa = $17;
    break;
   }
  }
  $20 = ($$lcssa|0)==($4|0);
  if ($20) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdComputeSliceGroupMap($pStorage,$sliceGroupChangeCycle) {
 $pStorage = $pStorage|0;
 $sliceGroupChangeCycle = $sliceGroupChangeCycle|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 1172|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($pStorage)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($pStorage)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 _h264bsdDecodeSliceGroupMap($1,$3,$sliceGroupChangeCycle,$7,$9);
 return;
}
function _h264bsdCheckAccessUnitBoundary($strm,$nuNext,$storage,$accessUnitBoundaryFlag) {
 $strm = $strm|0;
 $nuNext = $nuNext|0;
 $storage = $storage|0;
 $accessUnitBoundaryFlag = $accessUnitBoundaryFlag|0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $deltaPicOrderCnt = 0, $deltaPicOrderCntBottom = 0, $frameNum = 0, $idrPicId = 0, $or$cond2 = 0, $or$cond3 = 0, $picOrderCntLsb = 0, $ppsId = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ppsId = sp + 24|0;
 $frameNum = sp + 20|0;
 $idrPicId = sp + 16|0;
 $picOrderCntLsb = sp + 12|0;
 $deltaPicOrderCntBottom = sp + 8|0;
 $deltaPicOrderCnt = sp;
 HEAP32[$accessUnitBoundaryFlag>>2] = 0;
 $0 = HEAP32[$nuNext>>2]|0;
 switch ($0|0) {
 case 6: case 7: case 8: case 9: case 10: case 11: case 13: case 14: case 15: case 16: case 17: case 18:  {
  HEAP32[$accessUnitBoundaryFlag>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 5: case 1:  {
  $1 = ((($storage)) + 1300|0);
  $2 = ((($storage)) + 1332|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP32[$accessUnitBoundaryFlag>>2] = 1;
   HEAP32[$2>>2] = 0;
  }
  $5 = (_h264bsdCheckPpsId($strm,$ppsId)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
  $7 = HEAP32[$ppsId>>2]|0;
  $8 = (((($storage)) + 148|0) + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$0 = 65520;
   STACKTOP = sp;return ($$0|0);
  }
  $11 = ((($9)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (((($storage)) + 20|0) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = 65520;
   STACKTOP = sp;return ($$0|0);
  }
  $16 = ((($storage)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(32);
  $19 = ($12|0)==($17|0);
  $or$cond2 = $18 | $19;
  if (!($or$cond2)) {
   $20 = HEAP32[$nuNext>>2]|0;
   $21 = ($20|0)==(5);
   if (!($21)) {
    $$0 = 65520;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $22 = ((($storage)) + 1304|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($nuNext)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)==($25|0);
  if (!($26)) {
   $27 = ($23|0)==(0);
   $28 = ($25|0)==(0);
   $or$cond3 = $27 | $28;
   if ($or$cond3) {
    HEAP32[$accessUnitBoundaryFlag>>2] = 1;
   }
  }
  $29 = HEAP32[$1>>2]|0;
  $30 = ($29|0)==(5);
  $31 = HEAP32[$nuNext>>2]|0;
  $32 = ($31|0)==(5);
  if ($30) {
   if (!($32)) {
    label = 16;
   }
  } else {
   if ($32) {
    label = 16;
   }
  }
  if ((label|0) == 16) {
   HEAP32[$accessUnitBoundaryFlag>>2] = 1;
  }
  $33 = ((($14)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_h264bsdCheckFrameNum($strm,$34,$frameNum)|0);
  $36 = ($35|0)==(0);
  if (!($36)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $37 = ((($storage)) + 1308|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$frameNum>>2]|0;
  $40 = ($38|0)==($39|0);
  if (!($40)) {
   HEAP32[$37>>2] = $39;
   HEAP32[$accessUnitBoundaryFlag>>2] = 1;
  }
  $41 = HEAP32[$nuNext>>2]|0;
  $42 = ($41|0)==(5);
  if ($42) {
   $43 = HEAP32[$33>>2]|0;
   $44 = (_h264bsdCheckIdrPicId($strm,$43,5,$idrPicId)|0);
   $45 = ($44|0)==(0);
   if (!($45)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $46 = HEAP32[$1>>2]|0;
   $47 = ($46|0)==(5);
   if ($47) {
    $48 = ((($storage)) + 1312|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = HEAP32[$idrPicId>>2]|0;
    $51 = ($49|0)==($50|0);
    if ($51) {
     $$pre$phiZ2D = $48;$52 = $49;
    } else {
     HEAP32[$accessUnitBoundaryFlag>>2] = 1;
     $$pre$phiZ2D = $48;$52 = $50;
    }
   } else {
    $$pre7 = HEAP32[$idrPicId>>2]|0;
    $$pre8 = ((($storage)) + 1312|0);
    $$pre$phiZ2D = $$pre8;$52 = $$pre7;
   }
   HEAP32[$$pre$phiZ2D>>2] = $52;
  }
  $53 = ((($14)) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  switch ($54|0) {
  case 0:  {
   $55 = HEAP32[$nuNext>>2]|0;
   $56 = (_h264bsdCheckPicOrderCntLsb($strm,$14,$55,$picOrderCntLsb)|0);
   $57 = ($56|0)==(0);
   if (!($57)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $58 = ((($storage)) + 1316|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$picOrderCntLsb>>2]|0;
   $61 = ($59|0)==($60|0);
   if (!($61)) {
    HEAP32[$58>>2] = $60;
    HEAP32[$accessUnitBoundaryFlag>>2] = 1;
   }
   $62 = ((($9)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)==(0);
   if (!($64)) {
    $65 = HEAP32[$nuNext>>2]|0;
    $66 = (_h264bsdCheckDeltaPicOrderCntBottom($strm,$14,$65,$deltaPicOrderCntBottom)|0);
    $67 = ($66|0)==(0);
    if (!($67)) {
     $$0 = $66;
     STACKTOP = sp;return ($$0|0);
    }
    $68 = ((($storage)) + 1320|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = HEAP32[$deltaPicOrderCntBottom>>2]|0;
    $71 = ($69|0)==($70|0);
    if (!($71)) {
     HEAP32[$68>>2] = $70;
     HEAP32[$accessUnitBoundaryFlag>>2] = 1;
    }
   }
   break;
  }
  case 1:  {
   $72 = ((($14)) + 24|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(0);
   if ($74) {
    $75 = HEAP32[$nuNext>>2]|0;
    $76 = ((($9)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (_h264bsdCheckDeltaPicOrderCnt($strm,$14,$75,$77,$deltaPicOrderCnt)|0);
    $79 = ($78|0)==(0);
    if (!($79)) {
     $$0 = $78;
     STACKTOP = sp;return ($$0|0);
    }
    $80 = ((($storage)) + 1324|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = HEAP32[$deltaPicOrderCnt>>2]|0;
    $83 = ($81|0)==($82|0);
    if (!($83)) {
     HEAP32[$80>>2] = $82;
     HEAP32[$accessUnitBoundaryFlag>>2] = 1;
    }
    $84 = HEAP32[$76>>2]|0;
    $85 = ($84|0)==(0);
    if (!($85)) {
     $86 = ((($storage)) + 1328|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ((($deltaPicOrderCnt)) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($87|0)==($89|0);
     if (!($90)) {
      HEAP32[$86>>2] = $89;
      HEAP32[$accessUnitBoundaryFlag>>2] = 1;
     }
    }
   }
   break;
  }
  default: {
  }
  }
  $91 = $nuNext;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + 4)|0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = $1;
  $98 = $97;
  HEAP32[$98>>2] = $93;
  $99 = (($97) + 4)|0;
  $100 = $99;
  HEAP32[$100>>2] = $96;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _h264bsdValidParamSets($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05 = 0, $i$05$i = 0, $i$16$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$05 = 0;
 L1: while(1) {
  $0 = (((($pStorage)) + 148|0) + ($i$05<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  L3: do {
   if (!($2)) {
    $3 = ((($1)) + 4|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (((($pStorage)) + 20|0) + ($4<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     $$idx = ((($6)) + 52|0);
     $$idx$val = HEAP32[$$idx>>2]|0;
     $$idx1 = ((($6)) + 56|0);
     $$idx1$val = HEAP32[$$idx1>>2]|0;
     $8 = Math_imul($$idx1$val, $$idx$val)|0;
     $9 = ((($1)) + 12|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10>>>0)>(1);
     if (!($11)) {
      $$0 = 0;
      label = 18;
      break L1;
     }
     $12 = ((($1)) + 16|0);
     $13 = HEAP32[$12>>2]|0;
     switch ($13|0) {
     case 0:  {
      $19 = ((($1)) + 20|0);
      $20 = HEAP32[$19>>2]|0;
      $i$05$i = 0;
      while(1) {
       $23 = (($20) + ($i$05$i<<2)|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = ($24>>>0)>($8>>>0);
       $21 = (($i$05$i) + 1)|0;
       if ($25) {
        break L3;
       }
       $22 = ($21>>>0)<($10>>>0);
       if ($22) {
        $i$05$i = $21;
       } else {
        $$0 = 0;
        label = 18;
        break L1;
       }
      }
      break;
     }
     case 2:  {
      $14 = ((($1)) + 24|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = ((($1)) + 28|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (($10) + -1)|0;
      $i$16$i = 0;
      while(1) {
       $28 = (($15) + ($i$16$i<<2)|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (($17) + ($i$16$i<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($29>>>0)<=($31>>>0);
       $33 = ($31>>>0)<($8>>>0);
       $or$cond$i = $32 & $33;
       if (!($or$cond$i)) {
        break L3;
       }
       $34 = (($29>>>0) % ($$idx$val>>>0))&-1;
       $35 = (($31>>>0) % ($$idx$val>>>0))&-1;
       $36 = ($34>>>0)>($35>>>0);
       $26 = (($i$16$i) + 1)|0;
       if ($36) {
        break L3;
       }
       $27 = ($26>>>0)<($18>>>0);
       if ($27) {
        $i$16$i = $26;
       } else {
        $$0 = 0;
        label = 18;
        break L1;
       }
      }
      break;
     }
     default: {
      $$off$i = (($13) + -3)|0;
      $37 = ($$off$i>>>0)<(3);
      if ($37) {
       $38 = ((($1)) + 36|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39>>>0)>($8>>>0);
       if ($40) {
        break L3;
       } else {
        $$0 = 0;
        label = 18;
        break L1;
       }
      }
      $41 = ($13|0)==(6);
      if (!($41)) {
       $$0 = 0;
       label = 18;
       break L1;
      }
      $42 = ((($1)) + 40|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43>>>0)<($8>>>0);
      if ($44) {
       break L3;
      } else {
       $$0 = 0;
       label = 18;
       break L1;
      }
     }
     }
    }
   }
  } while(0);
  $45 = (($i$05) + 1)|0;
  $46 = ($45>>>0)<(256);
  if ($46) {
   $i$05 = $45;
  } else {
   $$0 = 1;
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdDecodeSliceGroupMap($map,$pps,$sliceGroupChangeCycle,$picWidth,$picHeight) {
 $map = $map|0;
 $pps = $pps|0;
 $sliceGroupChangeCycle = $sliceGroupChangeCycle|0;
 $picWidth = $picWidth|0;
 $picHeight = $picHeight|0;
 var $$ = 0, $$12 = 0, $$off13 = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bottomBound$012$i = 0, $bottomBound$1$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i2 = 0, $exitcond$i3 = 0, $exitcond$i5 = 0;
 var $exitcond$i9 = 0, $exitcond7$i = 0, $group$0$ph$i24 = 0, $group$0$us$i = 0, $group$0$us$i$lcssa = 0, $i$01$i = 0, $i$01$i8 = 0, $i$01$us$i = 0, $i$013$i = 0, $i$022 = 0, $i$06$i = 0, $i$1$ph$i23 = 0, $j$03$i = 0, $j$03$us$i = 0, $k$04$i = 0, $k$05$us$i = 0, $k$12$us$i = 0, $leftBound$09$i = 0, $leftBound$1$i = 0, $or$cond$i = 0;
 var $or$cond1$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $rightBound$011$i = 0, $rightBound$1$i = 0, $sizeOfUpperLeftGroup$0 = 0, $sliceGroupChangeDirectionFlag$$i = 0, $switch = 0, $topBound$010$i = 0, $topBound$1$i = 0, $unitsInSliceGroup0$0 = 0, $x$02$i = 0, $x$05$i = 0, $x$1$i = 0, $xDir$07$i = 0, $xDir$1$i = 0, $y$03$i = 0, $y$03$us$i = 0, $y$06$i = 0, $y$1$i = 0;
 var $yDir$08$i = 0, $yDir$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($picHeight, $picWidth)|0;
 $1 = ((($pps)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = $0 << 2;
  _H264SwDecMemset($map,0,$4);
  return;
 }
 $5 = ((($pps)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $$off13 = (($6) + -3)|0;
 $7 = ($$off13>>>0)<(3);
 if ($7) {
  $8 = ((($pps)) + 36|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = Math_imul($9, $sliceGroupChangeCycle)|0;
  $11 = ($10>>>0)<($0>>>0);
  $$ = $11 ? $10 : $0;
  $12 = $6 & -2;
  $switch = ($12|0)==(4);
  if ($switch) {
   $13 = ((($pps)) + 32|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   $16 = (($0) - ($$))|0;
   $17 = $15 ? $$ : $16;
   $sizeOfUpperLeftGroup$0 = $17;$unitsInSliceGroup0$0 = $$;
  } else {
   $sizeOfUpperLeftGroup$0 = 0;$unitsInSliceGroup0$0 = $$;
  }
 } else {
  $sizeOfUpperLeftGroup$0 = 0;$unitsInSliceGroup0$0 = 0;
 }
 switch ($6|0) {
 case 0:  {
  $21 = ((($pps)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($0|0)==(0);
  if ($23) {
   return;
  } else {
   $group$0$ph$i24 = 0;$i$1$ph$i23 = 0;
  }
  while(1) {
   $group$0$us$i = $group$0$ph$i24;
   while(1) {
    $24 = ($group$0$us$i>>>0)<($2>>>0);
    if ($24) {
     $group$0$us$i$lcssa = $group$0$us$i;
     break;
    } else {
     $group$0$us$i = 0;
    }
   }
   $$phi$trans$insert$i = (($22) + ($group$0$us$i$lcssa<<2)|0);
   $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
   $25 = ($$pre$i|0)==(0);
   L25: do {
    if ($25) {
     $34 = 0;
    } else {
     $147 = $$pre$i;$j$03$i = 0;
     while(1) {
      $26 = (($j$03$i) + ($i$1$ph$i23))|0;
      $27 = ($26>>>0)<($0>>>0);
      if (!($27)) {
       $34 = $147;
       break L25;
      }
      $28 = (($map) + ($26<<2)|0);
      HEAP32[$28>>2] = $group$0$us$i$lcssa;
      $29 = (($j$03$i) + 1)|0;
      $30 = HEAP32[$$phi$trans$insert$i>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $147 = $30;$j$03$i = $29;
      } else {
       $34 = $30;
       break;
      }
     }
    }
   } while(0);
   $32 = (($group$0$us$i$lcssa) + 1)|0;
   $33 = (($34) + ($i$1$ph$i23))|0;
   $35 = ($33>>>0)<($0>>>0);
   if ($35) {
    $group$0$ph$i24 = $32;$i$1$ph$i23 = $33;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 1:  {
  $36 = ($0|0)==(0);
  if ($36) {
   return;
  } else {
   $i$01$i8 = 0;
  }
  while(1) {
   $37 = (($i$01$i8>>>0) % ($picWidth>>>0))&-1;
   $38 = (($i$01$i8>>>0) / ($picWidth>>>0))&-1;
   $39 = Math_imul($38, $2)|0;
   $40 = $39 >>> 1;
   $41 = (($40) + ($37))|0;
   $42 = (($41>>>0) % ($2>>>0))&-1;
   $43 = (($map) + ($i$01$i8<<2)|0);
   HEAP32[$43>>2] = $42;
   $44 = (($i$01$i8) + 1)|0;
   $exitcond$i9 = ($44|0)==($0|0);
   if ($exitcond$i9) {
    break;
   } else {
    $i$01$i8 = $44;
   }
  }
  return;
  break;
 }
 case 2:  {
  $45 = ((($pps)) + 24|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($pps)) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($0|0)==(0);
  $50 = (($2) + -1)|0;
  if (!($49)) {
   $i$06$i = 0;
   while(1) {
    $53 = (($map) + ($i$06$i<<2)|0);
    HEAP32[$53>>2] = $50;
    $54 = (($i$06$i) + 1)|0;
    $exitcond$i5 = ($54|0)==($0|0);
    if ($exitcond$i5) {
     break;
    } else {
     $i$06$i = $54;
    }
   }
  }
  $51 = ($50|0)==(0);
  if ($51) {
   return;
  }
  $52 = (($2) + -2)|0;
  $56 = $52;
  while(1) {
   $58 = (($46) + ($56<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59>>>0) / ($picWidth>>>0))&-1;
   $61 = (($59>>>0) % ($picWidth>>>0))&-1;
   $62 = (($48) + ($56<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63>>>0) / ($picWidth>>>0))&-1;
   $65 = (($63>>>0) % ($picWidth>>>0))&-1;
   $66 = ($60>>>0)>($64>>>0);
   L47: do {
    if (!($66)) {
     $67 = ($61>>>0)>($65>>>0);
     if ($67) {
      $y$03$us$i = $60;
      while(1) {
       $68 = (($y$03$us$i) + 1)|0;
       $69 = ($68>>>0)>($64>>>0);
       if ($69) {
        break L47;
       } else {
        $y$03$us$i = $68;
       }
      }
     } else {
      $y$03$i = $60;
     }
     while(1) {
      $70 = Math_imul($y$03$i, $picWidth)|0;
      $x$02$i = $61;
      while(1) {
       $71 = (($x$02$i) + ($70))|0;
       $72 = (($map) + ($71<<2)|0);
       HEAP32[$72>>2] = $56;
       $73 = (($x$02$i) + 1)|0;
       $74 = ($73>>>0)>($65>>>0);
       if ($74) {
        break;
       } else {
        $x$02$i = $73;
       }
      }
      $75 = (($y$03$i) + 1)|0;
      $76 = ($75>>>0)>($64>>>0);
      if ($76) {
       break;
      } else {
       $y$03$i = $75;
      }
     }
    }
   } while(0);
   $55 = (($56) + -1)|0;
   $57 = ($56|0)==(0);
   if ($57) {
    break;
   } else {
    $56 = $55;
   }
  }
  return;
  break;
 }
 case 3:  {
  $77 = ((($pps)) + 32|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($0|0)==(0);
  if (!($79)) {
   $i$013$i = 0;
   while(1) {
    $80 = (($map) + ($i$013$i<<2)|0);
    HEAP32[$80>>2] = 1;
    $81 = (($i$013$i) + 1)|0;
    $exitcond$i3 = ($81|0)==($0|0);
    if ($exitcond$i3) {
     break;
    } else {
     $i$013$i = $81;
    }
   }
  }
  $82 = (($picWidth) - ($78))|0;
  $83 = $82 >>> 1;
  $84 = (($picHeight) - ($78))|0;
  $85 = $84 >>> 1;
  $86 = ($unitsInSliceGroup0$0|0)==(0);
  if ($86) {
   return;
  }
  $87 = (($78) + -1)|0;
  $88 = $78 << 1;
  $89 = (($88) + -1)|0;
  $90 = (($picWidth) + -1)|0;
  $91 = (1 - ($88))|0;
  $92 = (($picHeight) + -1)|0;
  $bottomBound$012$i = $85;$k$04$i = 0;$leftBound$09$i = $83;$rightBound$011$i = $83;$topBound$010$i = $85;$x$05$i = $83;$xDir$07$i = $87;$y$06$i = $85;$yDir$08$i = $78;
  while(1) {
   $93 = Math_imul($y$06$i, $picWidth)|0;
   $94 = (($93) + ($x$05$i))|0;
   $95 = (($map) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)==(1);
   $98 = $97&1;
   if ($97) {
    HEAP32[$95>>2] = 0;
   }
   $99 = ($xDir$07$i|0)==(-1);
   $100 = ($x$05$i|0)==($leftBound$09$i|0);
   $or$cond$i = $99 & $100;
   do {
    if ($or$cond$i) {
     $101 = (($leftBound$09$i) + -1)|0;
     $102 = ($101|0)>(0);
     $103 = $102 ? $101 : 0;
     $bottomBound$1$i = $bottomBound$012$i;$leftBound$1$i = $103;$rightBound$1$i = $rightBound$011$i;$topBound$1$i = $topBound$010$i;$x$1$i = $103;$xDir$1$i = 0;$y$1$i = $y$06$i;$yDir$1$i = $89;
    } else {
     $104 = ($xDir$07$i|0)==(1);
     $105 = ($x$05$i|0)==($rightBound$011$i|0);
     $or$cond1$i = $104 & $105;
     if ($or$cond1$i) {
      $106 = (($rightBound$011$i) + 1)|0;
      $107 = ($106|0)<($90|0);
      $108 = $107 ? $106 : $90;
      $bottomBound$1$i = $bottomBound$012$i;$leftBound$1$i = $leftBound$09$i;$rightBound$1$i = $108;$topBound$1$i = $topBound$010$i;$x$1$i = $108;$xDir$1$i = 0;$y$1$i = $y$06$i;$yDir$1$i = $91;
      break;
     }
     $109 = ($yDir$08$i|0)==(-1);
     $110 = ($y$06$i|0)==($topBound$010$i|0);
     $or$cond2$i = $109 & $110;
     if ($or$cond2$i) {
      $111 = (($topBound$010$i) + -1)|0;
      $112 = ($111|0)>(0);
      $113 = $112 ? $111 : 0;
      $bottomBound$1$i = $bottomBound$012$i;$leftBound$1$i = $leftBound$09$i;$rightBound$1$i = $rightBound$011$i;$topBound$1$i = $113;$x$1$i = $x$05$i;$xDir$1$i = $91;$y$1$i = $113;$yDir$1$i = 0;
      break;
     }
     $114 = ($yDir$08$i|0)==(1);
     $115 = ($y$06$i|0)==($bottomBound$012$i|0);
     $or$cond3$i = $114 & $115;
     if ($or$cond3$i) {
      $116 = (($bottomBound$012$i) + 1)|0;
      $117 = ($116|0)<($92|0);
      $118 = $117 ? $116 : $92;
      $bottomBound$1$i = $118;$leftBound$1$i = $leftBound$09$i;$rightBound$1$i = $rightBound$011$i;$topBound$1$i = $topBound$010$i;$x$1$i = $x$05$i;$xDir$1$i = $89;$y$1$i = $118;$yDir$1$i = 0;
      break;
     } else {
      $119 = (($x$05$i) + ($xDir$07$i))|0;
      $120 = (($y$06$i) + ($yDir$08$i))|0;
      $bottomBound$1$i = $bottomBound$012$i;$leftBound$1$i = $leftBound$09$i;$rightBound$1$i = $rightBound$011$i;$topBound$1$i = $topBound$010$i;$x$1$i = $119;$xDir$1$i = $xDir$07$i;$y$1$i = $120;$yDir$1$i = $yDir$08$i;
      break;
     }
    }
   } while(0);
   $121 = (($98) + ($k$04$i))|0;
   $122 = ($121>>>0)<($unitsInSliceGroup0$0>>>0);
   if ($122) {
    $bottomBound$012$i = $bottomBound$1$i;$k$04$i = $121;$leftBound$09$i = $leftBound$1$i;$rightBound$011$i = $rightBound$1$i;$topBound$010$i = $topBound$1$i;$x$05$i = $x$1$i;$xDir$07$i = $xDir$1$i;$y$06$i = $y$1$i;$yDir$08$i = $yDir$1$i;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 4:  {
  $123 = ((($pps)) + 32|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($0|0)==(0);
  if ($125) {
   return;
  }
  $126 = (1 - ($124))|0;
  $i$01$i = 0;
  while(1) {
   $127 = ($i$01$i>>>0)<($sizeOfUpperLeftGroup$0>>>0);
   $sliceGroupChangeDirectionFlag$$i = $127 ? $124 : $126;
   $128 = (($map) + ($i$01$i<<2)|0);
   HEAP32[$128>>2] = $sliceGroupChangeDirectionFlag$$i;
   $129 = (($i$01$i) + 1)|0;
   $exitcond$i2 = ($129|0)==($0|0);
   if ($exitcond$i2) {
    break;
   } else {
    $i$01$i = $129;
   }
  }
  return;
  break;
 }
 case 5:  {
  $130 = ((($pps)) + 32|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($picWidth|0)==(0);
  if ($132) {
   return;
  }
  $133 = ($picHeight|0)==(0);
  $134 = (1 - ($131))|0;
  if ($133) {
   return;
  } else {
   $j$03$us$i = 0;$k$05$us$i = 0;
  }
  while(1) {
   $i$01$us$i = 0;$k$12$us$i = $k$05$us$i;
   while(1) {
    $137 = (($k$12$us$i) + 1)|0;
    $138 = ($k$12$us$i>>>0)<($sizeOfUpperLeftGroup$0>>>0);
    $139 = Math_imul($i$01$us$i, $picWidth)|0;
    $140 = (($139) + ($j$03$us$i))|0;
    $141 = (($map) + ($140<<2)|0);
    $$12 = $138 ? $131 : $134;
    HEAP32[$141>>2] = $$12;
    $142 = (($i$01$us$i) + 1)|0;
    $exitcond$i = ($142|0)==($picHeight|0);
    if ($exitcond$i) {
     break;
    } else {
     $i$01$us$i = $142;$k$12$us$i = $137;
    }
   }
   $135 = (($k$05$us$i) + ($picHeight))|0;
   $136 = (($j$03$us$i) + 1)|0;
   $exitcond7$i = ($136|0)==($picWidth|0);
   if ($exitcond7$i) {
    break;
   } else {
    $j$03$us$i = $136;$k$05$us$i = $135;
   }
  }
  return;
  break;
 }
 default: {
  $18 = ($0|0)==(0);
  if ($18) {
   return;
  }
  $19 = ((($pps)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $i$022 = 0;
  while(1) {
   $143 = (($20) + ($i$022<<2)|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($map) + ($i$022<<2)|0);
   HEAP32[$145>>2] = $144;
   $146 = (($i$022) + 1)|0;
   $exitcond = ($146|0)==($0|0);
   if ($exitcond) {
    break;
   } else {
    $i$022 = $146;
   }
  }
  return;
 }
 }
}
function _h264bsdIntraPrediction($pMb,$mbLayer,$image,$mbNum,$constrainedIntraPred,$data) {
 $pMb = $pMb|0;
 $mbLayer = $mbLayer|0;
 $image = $image|0;
 $mbNum = $mbNum|0;
 $constrainedIntraPred = $constrainedIntraPred|0;
 $data = $data|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $pelAbove = 0, $pelLeft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pelAbove = sp + 32|0;
 $pelLeft = sp;
 _h264bsdGetNeighbourPels($image,$pelAbove,$pelLeft,$mbNum);
 $0 = HEAP32[$pMb>>2]|0;
 $1 = (_h264bsdMbPartPredMode($0)|0);
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = ((($mbLayer)) + 328|0);
  $4 = (_h264bsdIntra16x16Prediction($pMb,$data,$3,$pelAbove,$pelLeft,$constrainedIntraPred)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $6 = (_h264bsdIntra4x4Prediction($pMb,$data,$mbLayer,$pelAbove,$pelLeft,$constrainedIntraPred)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = ((($data)) + 256|0);
 $9 = ((($mbLayer)) + 1352|0);
 $10 = ((($pelAbove)) + 21|0);
 $11 = ((($pelLeft)) + 16|0);
 $12 = ((($mbLayer)) + 140|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_h264bsdIntraChromaPrediction($pMb,$8,$9,$10,$11,$13,$constrainedIntraPred)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ((($pMb)) + 196|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17>>>0)>(1);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _h264bsdWriteMacroblock($image,$data);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdGetNeighbourPels($image,$above,$left,$mbNum) {
 $image = $image|0;
 $above = $above|0;
 $left = $left|0;
 $mbNum = $mbNum|0;
 var $$1 = 0, $$12 = 0, $$sum = 0, $$sum10 = 0, $$sum100 = 0, $$sum101 = 0, $$sum102 = 0, $$sum103 = 0, $$sum104 = 0, $$sum105 = 0, $$sum106 = 0, $$sum107 = 0, $$sum108 = 0, $$sum109 = 0, $$sum110 = 0, $$sum32 = 0, $$sum44 = 0, $$sum45 = 0, $$sum46 = 0, $$sum47 = 0;
 var $$sum48 = 0, $$sum49 = 0, $$sum5 = 0, $$sum50 = 0, $$sum51 = 0, $$sum52 = 0, $$sum53 = 0, $$sum54 = 0, $$sum55 = 0, $$sum56 = 0, $$sum57 = 0, $$sum58 = 0, $$sum59 = 0, $$sum6 = 0, $$sum60 = 0, $$sum61 = 0, $$sum62 = 0, $$sum63 = 0, $$sum64 = 0, $$sum65 = 0;
 var $$sum66 = 0, $$sum67 = 0, $$sum68 = 0, $$sum69 = 0, $$sum7 = 0, $$sum70 = 0, $$sum71 = 0, $$sum72 = 0, $$sum73 = 0, $$sum74 = 0, $$sum75 = 0, $$sum76 = 0, $$sum77 = 0, $$sum78 = 0, $$sum79 = 0, $$sum8 = 0, $$sum80 = 0, $$sum81 = 0, $$sum82 = 0, $$sum83 = 0;
 var $$sum84 = 0, $$sum85 = 0, $$sum86 = 0, $$sum87 = 0, $$sum88 = 0, $$sum89 = 0, $$sum9 = 0, $$sum90 = 0, $$sum91 = 0, $$sum92 = 0, $$sum93 = 0, $$sum94 = 0, $$sum95 = 0, $$sum96 = 0, $$sum97 = 0, $$sum98 = 0, $$sum99 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, $scevgep39 = 0, $scevgep40 = 0, $scevgep42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mbNum|0)==(0);
 if ($0) {
  return;
 }
 $1 = ((($image)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($image)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = Math_imul($4, $2)|0;
 $6 = (($mbNum>>>0) / ($2>>>0))&-1;
 $7 = Math_imul($6, $2)|0;
 $8 = (($mbNum) - ($7))|0;
 $9 = $2 << 4;
 $10 = HEAP32[$image>>2]|0;
 $11 = $2 << 8;
 $12 = Math_imul($11, $6)|0;
 $13 = $8 << 4;
 $$sum = (($13) + ($12))|0;
 $14 = ($6|0)!=(0);
 if ($14) {
  $15 = $9 | 1;
  $$sum10 = (($$sum) - ($15))|0;
  $16 = (($10) + ($$sum10)|0);
  $$sum91 = (($$sum10) + 1)|0;
  $17 = (($10) + ($$sum91)|0);
  $18 = HEAP8[$16>>0]|0;
  $19 = ((($above)) + 1|0);
  HEAP8[$above>>0] = $18;
  $$sum92 = (($$sum10) + 2)|0;
  $20 = (($10) + ($$sum92)|0);
  $21 = HEAP8[$17>>0]|0;
  $22 = ((($above)) + 2|0);
  HEAP8[$19>>0] = $21;
  $$sum93 = (($$sum10) + 3)|0;
  $23 = (($10) + ($$sum93)|0);
  $24 = HEAP8[$20>>0]|0;
  $25 = ((($above)) + 3|0);
  HEAP8[$22>>0] = $24;
  $$sum94 = (($$sum10) + 4)|0;
  $26 = (($10) + ($$sum94)|0);
  $27 = HEAP8[$23>>0]|0;
  $28 = ((($above)) + 4|0);
  HEAP8[$25>>0] = $27;
  $$sum95 = (($$sum10) + 5)|0;
  $29 = (($10) + ($$sum95)|0);
  $30 = HEAP8[$26>>0]|0;
  $31 = ((($above)) + 5|0);
  HEAP8[$28>>0] = $30;
  $$sum96 = (($$sum10) + 6)|0;
  $32 = (($10) + ($$sum96)|0);
  $33 = HEAP8[$29>>0]|0;
  $34 = ((($above)) + 6|0);
  HEAP8[$31>>0] = $33;
  $$sum97 = (($$sum10) + 7)|0;
  $35 = (($10) + ($$sum97)|0);
  $36 = HEAP8[$32>>0]|0;
  $37 = ((($above)) + 7|0);
  HEAP8[$34>>0] = $36;
  $$sum98 = (($$sum10) + 8)|0;
  $38 = (($10) + ($$sum98)|0);
  $39 = HEAP8[$35>>0]|0;
  $40 = ((($above)) + 8|0);
  HEAP8[$37>>0] = $39;
  $$sum99 = (($$sum10) + 9)|0;
  $41 = (($10) + ($$sum99)|0);
  $42 = HEAP8[$38>>0]|0;
  $43 = ((($above)) + 9|0);
  HEAP8[$40>>0] = $42;
  $$sum100 = (($$sum10) + 10)|0;
  $44 = (($10) + ($$sum100)|0);
  $45 = HEAP8[$41>>0]|0;
  $46 = ((($above)) + 10|0);
  HEAP8[$43>>0] = $45;
  $$sum101 = (($$sum10) + 11)|0;
  $47 = (($10) + ($$sum101)|0);
  $48 = HEAP8[$44>>0]|0;
  $49 = ((($above)) + 11|0);
  HEAP8[$46>>0] = $48;
  $$sum102 = (($$sum10) + 12)|0;
  $50 = (($10) + ($$sum102)|0);
  $51 = HEAP8[$47>>0]|0;
  $52 = ((($above)) + 12|0);
  HEAP8[$49>>0] = $51;
  $$sum103 = (($$sum10) + 13)|0;
  $53 = (($10) + ($$sum103)|0);
  $54 = HEAP8[$50>>0]|0;
  $55 = ((($above)) + 13|0);
  HEAP8[$52>>0] = $54;
  $$sum104 = (($$sum10) + 14)|0;
  $56 = (($10) + ($$sum104)|0);
  $57 = HEAP8[$53>>0]|0;
  $58 = ((($above)) + 14|0);
  HEAP8[$55>>0] = $57;
  $$sum105 = (($$sum10) + 15)|0;
  $59 = (($10) + ($$sum105)|0);
  $60 = HEAP8[$56>>0]|0;
  $61 = ((($above)) + 15|0);
  HEAP8[$58>>0] = $60;
  $$sum106 = (($$sum10) + 16)|0;
  $62 = (($10) + ($$sum106)|0);
  $63 = HEAP8[$59>>0]|0;
  $64 = ((($above)) + 16|0);
  HEAP8[$61>>0] = $63;
  $$sum107 = (($$sum10) + 17)|0;
  $65 = (($10) + ($$sum107)|0);
  $66 = HEAP8[$62>>0]|0;
  $67 = ((($above)) + 17|0);
  HEAP8[$64>>0] = $66;
  $$sum108 = (($$sum10) + 18)|0;
  $68 = (($10) + ($$sum108)|0);
  $69 = HEAP8[$65>>0]|0;
  $70 = ((($above)) + 18|0);
  HEAP8[$67>>0] = $69;
  $$sum109 = (($$sum10) + 19)|0;
  $71 = (($10) + ($$sum109)|0);
  $72 = HEAP8[$68>>0]|0;
  $73 = ((($above)) + 19|0);
  HEAP8[$70>>0] = $72;
  $$sum110 = (($$sum10) + 20)|0;
  $74 = (($10) + ($$sum110)|0);
  $75 = HEAP8[$71>>0]|0;
  $76 = ((($above)) + 20|0);
  HEAP8[$73>>0] = $75;
  $77 = HEAP8[$74>>0]|0;
  HEAP8[$76>>0] = $77;
  $scevgep42 = ((($above)) + 21|0);
  $$1 = $scevgep42;
 } else {
  $$1 = $above;
 }
 $78 = ($7|0)!=($mbNum|0);
 if ($78) {
  $$sum9 = (($$sum) + -1)|0;
  $79 = (($10) + ($$sum9)|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = ((($left)) + 1|0);
  HEAP8[$left>>0] = $80;
  $$sum76 = (($$sum9) + ($9))|0;
  $82 = (($10) + ($$sum76)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = ((($left)) + 2|0);
  HEAP8[$81>>0] = $83;
  $$sum77 = (($$sum76) + ($9))|0;
  $85 = (($10) + ($$sum77)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = ((($left)) + 3|0);
  HEAP8[$84>>0] = $86;
  $$sum78 = (($$sum77) + ($9))|0;
  $88 = (($10) + ($$sum78)|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = ((($left)) + 4|0);
  HEAP8[$87>>0] = $89;
  $$sum79 = (($$sum78) + ($9))|0;
  $91 = (($10) + ($$sum79)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = ((($left)) + 5|0);
  HEAP8[$90>>0] = $92;
  $$sum80 = (($$sum79) + ($9))|0;
  $94 = (($10) + ($$sum80)|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = ((($left)) + 6|0);
  HEAP8[$93>>0] = $95;
  $$sum81 = (($$sum80) + ($9))|0;
  $97 = (($10) + ($$sum81)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = ((($left)) + 7|0);
  HEAP8[$96>>0] = $98;
  $$sum82 = (($$sum81) + ($9))|0;
  $100 = (($10) + ($$sum82)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = ((($left)) + 8|0);
  HEAP8[$99>>0] = $101;
  $$sum83 = (($$sum82) + ($9))|0;
  $103 = (($10) + ($$sum83)|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = ((($left)) + 9|0);
  HEAP8[$102>>0] = $104;
  $$sum84 = (($$sum83) + ($9))|0;
  $106 = (($10) + ($$sum84)|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = ((($left)) + 10|0);
  HEAP8[$105>>0] = $107;
  $$sum85 = (($$sum84) + ($9))|0;
  $109 = (($10) + ($$sum85)|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = ((($left)) + 11|0);
  HEAP8[$108>>0] = $110;
  $$sum86 = (($$sum85) + ($9))|0;
  $112 = (($10) + ($$sum86)|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = ((($left)) + 12|0);
  HEAP8[$111>>0] = $113;
  $$sum87 = (($$sum86) + ($9))|0;
  $115 = (($10) + ($$sum87)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = ((($left)) + 13|0);
  HEAP8[$114>>0] = $116;
  $$sum88 = (($$sum87) + ($9))|0;
  $118 = (($10) + ($$sum88)|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = ((($left)) + 14|0);
  HEAP8[$117>>0] = $119;
  $$sum89 = (($$sum88) + ($9))|0;
  $121 = (($10) + ($$sum89)|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = ((($left)) + 15|0);
  HEAP8[$120>>0] = $122;
  $$sum90 = (($$sum89) + ($9))|0;
  $124 = (($10) + ($$sum90)|0);
  $125 = HEAP8[$124>>0]|0;
  HEAP8[$123>>0] = $125;
  $scevgep40 = ((($left)) + 16|0);
  $$12 = $scevgep40;
 } else {
  $$12 = $left;
 }
 $126 = $2 << 3;
 $127 = $126 & 2147483640;
 $128 = HEAP32[$image>>2]|0;
 $129 = $5 << 8;
 $130 = $6 << 3;
 $131 = Math_imul($130, $127)|0;
 $$sum5 = (($131) + ($129))|0;
 $132 = $8 << 3;
 $$sum6 = (($$sum5) + ($132))|0;
 if ($14) {
  $133 = $127 | 1;
  $$sum8 = (($$sum6) - ($133))|0;
  $134 = (($128) + ($$sum8)|0);
  $$sum59 = (($$sum8) + 1)|0;
  $135 = (($128) + ($$sum59)|0);
  $136 = HEAP8[$134>>0]|0;
  $137 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = $136;
  $$sum60 = (($$sum8) + 2)|0;
  $138 = (($128) + ($$sum60)|0);
  $139 = HEAP8[$135>>0]|0;
  $140 = ((($$1)) + 2|0);
  HEAP8[$137>>0] = $139;
  $$sum61 = (($$sum8) + 3)|0;
  $141 = (($128) + ($$sum61)|0);
  $142 = HEAP8[$138>>0]|0;
  $143 = ((($$1)) + 3|0);
  HEAP8[$140>>0] = $142;
  $$sum62 = (($$sum8) + 4)|0;
  $144 = (($128) + ($$sum62)|0);
  $145 = HEAP8[$141>>0]|0;
  $146 = ((($$1)) + 4|0);
  HEAP8[$143>>0] = $145;
  $$sum63 = (($$sum8) + 5)|0;
  $147 = (($128) + ($$sum63)|0);
  $148 = HEAP8[$144>>0]|0;
  $149 = ((($$1)) + 5|0);
  HEAP8[$146>>0] = $148;
  $$sum64 = (($$sum8) + 6)|0;
  $150 = (($128) + ($$sum64)|0);
  $151 = HEAP8[$147>>0]|0;
  $152 = ((($$1)) + 6|0);
  HEAP8[$149>>0] = $151;
  $$sum65 = (($$sum8) + 7)|0;
  $153 = (($128) + ($$sum65)|0);
  $154 = HEAP8[$150>>0]|0;
  $155 = ((($$1)) + 7|0);
  HEAP8[$152>>0] = $154;
  $$sum66 = (($$sum8) + 8)|0;
  $156 = (($128) + ($$sum66)|0);
  $157 = HEAP8[$153>>0]|0;
  $158 = ((($$1)) + 8|0);
  HEAP8[$155>>0] = $157;
  $159 = HEAP8[$156>>0]|0;
  HEAP8[$158>>0] = $159;
  $scevgep39 = ((($$1)) + 9|0);
  $160 = $5 << 6;
  $$sum67 = (($$sum8) + ($160))|0;
  $161 = (($128) + ($$sum67)|0);
  $$sum68 = (($$sum67) + 1)|0;
  $162 = (($128) + ($$sum68)|0);
  $163 = HEAP8[$161>>0]|0;
  $164 = ((($$1)) + 10|0);
  HEAP8[$scevgep39>>0] = $163;
  $$sum69 = (($$sum67) + 2)|0;
  $165 = (($128) + ($$sum69)|0);
  $166 = HEAP8[$162>>0]|0;
  $167 = ((($$1)) + 11|0);
  HEAP8[$164>>0] = $166;
  $$sum70 = (($$sum67) + 3)|0;
  $168 = (($128) + ($$sum70)|0);
  $169 = HEAP8[$165>>0]|0;
  $170 = ((($$1)) + 12|0);
  HEAP8[$167>>0] = $169;
  $$sum71 = (($$sum67) + 4)|0;
  $171 = (($128) + ($$sum71)|0);
  $172 = HEAP8[$168>>0]|0;
  $173 = ((($$1)) + 13|0);
  HEAP8[$170>>0] = $172;
  $$sum72 = (($$sum67) + 5)|0;
  $174 = (($128) + ($$sum72)|0);
  $175 = HEAP8[$171>>0]|0;
  $176 = ((($$1)) + 14|0);
  HEAP8[$173>>0] = $175;
  $$sum73 = (($$sum67) + 6)|0;
  $177 = (($128) + ($$sum73)|0);
  $178 = HEAP8[$174>>0]|0;
  $179 = ((($$1)) + 15|0);
  HEAP8[$176>>0] = $178;
  $$sum74 = (($$sum67) + 7)|0;
  $180 = (($128) + ($$sum74)|0);
  $181 = HEAP8[$177>>0]|0;
  $182 = ((($$1)) + 16|0);
  HEAP8[$179>>0] = $181;
  $$sum75 = (($$sum67) + 8)|0;
  $183 = (($128) + ($$sum75)|0);
  $184 = HEAP8[$180>>0]|0;
  $185 = ((($$1)) + 17|0);
  HEAP8[$182>>0] = $184;
  $186 = HEAP8[$183>>0]|0;
  HEAP8[$185>>0] = $186;
 }
 if (!($78)) {
  return;
 }
 $$sum7 = (($$sum6) + -1)|0;
 $187 = (($128) + ($$sum7)|0);
 $188 = HEAP8[$187>>0]|0;
 $189 = ((($$12)) + 1|0);
 HEAP8[$$12>>0] = $188;
 $$sum44 = (($$sum7) + ($127))|0;
 $190 = (($128) + ($$sum44)|0);
 $191 = HEAP8[$190>>0]|0;
 $192 = ((($$12)) + 2|0);
 HEAP8[$189>>0] = $191;
 $$sum45 = (($$sum44) + ($127))|0;
 $193 = (($128) + ($$sum45)|0);
 $194 = HEAP8[$193>>0]|0;
 $195 = ((($$12)) + 3|0);
 HEAP8[$192>>0] = $194;
 $$sum46 = (($$sum45) + ($127))|0;
 $196 = (($128) + ($$sum46)|0);
 $197 = HEAP8[$196>>0]|0;
 $198 = ((($$12)) + 4|0);
 HEAP8[$195>>0] = $197;
 $$sum47 = (($$sum46) + ($127))|0;
 $199 = (($128) + ($$sum47)|0);
 $200 = HEAP8[$199>>0]|0;
 $201 = ((($$12)) + 5|0);
 HEAP8[$198>>0] = $200;
 $$sum48 = (($$sum47) + ($127))|0;
 $202 = (($128) + ($$sum48)|0);
 $203 = HEAP8[$202>>0]|0;
 $204 = ((($$12)) + 6|0);
 HEAP8[$201>>0] = $203;
 $$sum49 = (($$sum48) + ($127))|0;
 $205 = (($128) + ($$sum49)|0);
 $206 = HEAP8[$205>>0]|0;
 $207 = ((($$12)) + 7|0);
 HEAP8[$204>>0] = $206;
 $$sum50 = (($$sum49) + ($127))|0;
 $208 = (($128) + ($$sum50)|0);
 $209 = HEAP8[$208>>0]|0;
 HEAP8[$207>>0] = $209;
 $scevgep = ((($$12)) + 8|0);
 $210 = (($5) - ($2))|0;
 $211 = $210 << 6;
 $$sum32 = (($127) + ($211))|0;
 $$sum51 = (($$sum50) + ($$sum32))|0;
 $212 = (($128) + ($$sum51)|0);
 $213 = HEAP8[$212>>0]|0;
 $214 = ((($$12)) + 9|0);
 HEAP8[$scevgep>>0] = $213;
 $$sum52 = (($$sum51) + ($127))|0;
 $215 = (($128) + ($$sum52)|0);
 $216 = HEAP8[$215>>0]|0;
 $217 = ((($$12)) + 10|0);
 HEAP8[$214>>0] = $216;
 $$sum53 = (($$sum52) + ($127))|0;
 $218 = (($128) + ($$sum53)|0);
 $219 = HEAP8[$218>>0]|0;
 $220 = ((($$12)) + 11|0);
 HEAP8[$217>>0] = $219;
 $$sum54 = (($$sum53) + ($127))|0;
 $221 = (($128) + ($$sum54)|0);
 $222 = HEAP8[$221>>0]|0;
 $223 = ((($$12)) + 12|0);
 HEAP8[$220>>0] = $222;
 $$sum55 = (($$sum54) + ($127))|0;
 $224 = (($128) + ($$sum55)|0);
 $225 = HEAP8[$224>>0]|0;
 $226 = ((($$12)) + 13|0);
 HEAP8[$223>>0] = $225;
 $$sum56 = (($$sum55) + ($127))|0;
 $227 = (($128) + ($$sum56)|0);
 $228 = HEAP8[$227>>0]|0;
 $229 = ((($$12)) + 14|0);
 HEAP8[$226>>0] = $228;
 $$sum57 = (($$sum56) + ($127))|0;
 $230 = (($128) + ($$sum57)|0);
 $231 = HEAP8[$230>>0]|0;
 $232 = ((($$12)) + 15|0);
 HEAP8[$229>>0] = $231;
 $$sum58 = (($$sum57) + ($127))|0;
 $233 = (($128) + ($$sum58)|0);
 $234 = HEAP8[$233>>0]|0;
 HEAP8[$232>>0] = $234;
 return;
}
function _h264bsdIntra16x16Prediction($pMb,$data,$residual,$above,$left,$constrainedIntraPred) {
 $pMb = $pMb|0;
 $data = $data|0;
 $residual = $residual|0;
 $above = $above|0;
 $left = $left|0;
 $constrainedIntraPred = $constrainedIntraPred|0;
 var $$ = 0, $$0 = 0, $$03$i = 0, $$03$i13 = 0, $$10 = 0, $$11 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $availableA$0 = 0, $availableB$0 = 0, $availableD$0 = 0, $exitcond$i = 0, $exitcond$i15 = 0, $exitcond$i18 = 0;
 var $exitcond11$i = 0, $i$04$i = 0, $i$04$i12 = 0, $i$23$i = 0, $j$02$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $scevgep$i = 0, $scevgep$i14 = 0, $tmp$3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pMb)) + 200|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_h264bsdIsNeighbourAvailable($pMb,$1)|0);
 $3 = ($2|0)!=(0);
 $4 = ($constrainedIntraPred|0)!=(0);
 $or$cond = $4 & $3;
 if ($or$cond) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (_h264bsdMbPartPredMode($6)|0);
  $8 = ($7|0)==(2);
  $$ = $8 ? 0 : $2;
  $availableA$0 = $$;
 } else {
  $availableA$0 = $2;
 }
 $9 = ((($pMb)) + 204|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_h264bsdIsNeighbourAvailable($pMb,$10)|0);
 $12 = ($11|0)!=(0);
 $or$cond3 = $4 & $12;
 if ($or$cond3) {
  $13 = HEAP32[$9>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (_h264bsdMbPartPredMode($14)|0);
  $16 = ($15|0)==(2);
  $$10 = $16 ? 0 : $11;
  $availableB$0 = $$10;
 } else {
  $availableB$0 = $11;
 }
 $17 = ((($pMb)) + 212|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_h264bsdIsNeighbourAvailable($pMb,$18)|0);
 $20 = ($19|0)!=(0);
 $or$cond5 = $4 & $20;
 if ($or$cond5) {
  $21 = HEAP32[$17>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (_h264bsdMbPartPredMode($22)|0);
  $24 = ($23|0)==(2);
  $$11 = $24 ? 0 : $19;
  $availableD$0 = $$11;
 } else {
  $availableD$0 = $19;
 }
 $25 = HEAP32[$pMb>>2]|0;
 $26 = (_h264bsdPredModeIntra16x16($25)|0);
 switch ($26|0) {
 case 0:  {
  $27 = ($availableB$0|0)==(0);
  if ($27) {
   $$0 = 1;
   return ($$0|0);
  }
  $28 = ((($above)) + 1|0);
  $29 = ((($above)) + 2|0);
  $30 = ((($above)) + 3|0);
  $31 = ((($above)) + 4|0);
  $32 = ((($above)) + 5|0);
  $33 = ((($above)) + 6|0);
  $34 = ((($above)) + 7|0);
  $35 = ((($above)) + 8|0);
  $36 = ((($above)) + 9|0);
  $37 = ((($above)) + 10|0);
  $38 = ((($above)) + 11|0);
  $39 = ((($above)) + 12|0);
  $40 = ((($above)) + 13|0);
  $41 = ((($above)) + 14|0);
  $42 = ((($above)) + 15|0);
  $43 = ((($above)) + 16|0);
  $$03$i = $data;$i$04$i = 0;
  while(1) {
   $44 = HEAP8[$28>>0]|0;
   $45 = ((($$03$i)) + 1|0);
   HEAP8[$$03$i>>0] = $44;
   $46 = HEAP8[$29>>0]|0;
   $47 = ((($$03$i)) + 2|0);
   HEAP8[$45>>0] = $46;
   $48 = HEAP8[$30>>0]|0;
   $49 = ((($$03$i)) + 3|0);
   HEAP8[$47>>0] = $48;
   $50 = HEAP8[$31>>0]|0;
   $51 = ((($$03$i)) + 4|0);
   HEAP8[$49>>0] = $50;
   $52 = HEAP8[$32>>0]|0;
   $53 = ((($$03$i)) + 5|0);
   HEAP8[$51>>0] = $52;
   $54 = HEAP8[$33>>0]|0;
   $55 = ((($$03$i)) + 6|0);
   HEAP8[$53>>0] = $54;
   $56 = HEAP8[$34>>0]|0;
   $57 = ((($$03$i)) + 7|0);
   HEAP8[$55>>0] = $56;
   $58 = HEAP8[$35>>0]|0;
   $59 = ((($$03$i)) + 8|0);
   HEAP8[$57>>0] = $58;
   $60 = HEAP8[$36>>0]|0;
   $61 = ((($$03$i)) + 9|0);
   HEAP8[$59>>0] = $60;
   $62 = HEAP8[$37>>0]|0;
   $63 = ((($$03$i)) + 10|0);
   HEAP8[$61>>0] = $62;
   $64 = HEAP8[$38>>0]|0;
   $65 = ((($$03$i)) + 11|0);
   HEAP8[$63>>0] = $64;
   $66 = HEAP8[$39>>0]|0;
   $67 = ((($$03$i)) + 12|0);
   HEAP8[$65>>0] = $66;
   $68 = HEAP8[$40>>0]|0;
   $69 = ((($$03$i)) + 13|0);
   HEAP8[$67>>0] = $68;
   $70 = HEAP8[$41>>0]|0;
   $71 = ((($$03$i)) + 14|0);
   HEAP8[$69>>0] = $70;
   $72 = HEAP8[$42>>0]|0;
   $73 = ((($$03$i)) + 15|0);
   HEAP8[$71>>0] = $72;
   $74 = HEAP8[$43>>0]|0;
   HEAP8[$73>>0] = $74;
   $scevgep$i = ((($$03$i)) + 16|0);
   $75 = (($i$04$i) + 1)|0;
   $exitcond$i = ($75|0)==(16);
   if ($exitcond$i) {
    break;
   } else {
    $$03$i = $scevgep$i;$i$04$i = $75;
   }
  }
  break;
 }
 case 1:  {
  $76 = ($availableA$0|0)==(0);
  if ($76) {
   $$0 = 1;
   return ($$0|0);
  } else {
   $$03$i13 = $data;$i$04$i12 = 0;
   while(1) {
    $77 = (($left) + ($i$04$i12)|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ((($$03$i13)) + 1|0);
    HEAP8[$$03$i13>>0] = $78;
    $80 = HEAP8[$77>>0]|0;
    $81 = ((($$03$i13)) + 2|0);
    HEAP8[$79>>0] = $80;
    $82 = HEAP8[$77>>0]|0;
    $83 = ((($$03$i13)) + 3|0);
    HEAP8[$81>>0] = $82;
    $84 = HEAP8[$77>>0]|0;
    $85 = ((($$03$i13)) + 4|0);
    HEAP8[$83>>0] = $84;
    $86 = HEAP8[$77>>0]|0;
    $87 = ((($$03$i13)) + 5|0);
    HEAP8[$85>>0] = $86;
    $88 = HEAP8[$77>>0]|0;
    $89 = ((($$03$i13)) + 6|0);
    HEAP8[$87>>0] = $88;
    $90 = HEAP8[$77>>0]|0;
    $91 = ((($$03$i13)) + 7|0);
    HEAP8[$89>>0] = $90;
    $92 = HEAP8[$77>>0]|0;
    $93 = ((($$03$i13)) + 8|0);
    HEAP8[$91>>0] = $92;
    $94 = HEAP8[$77>>0]|0;
    $95 = ((($$03$i13)) + 9|0);
    HEAP8[$93>>0] = $94;
    $96 = HEAP8[$77>>0]|0;
    $97 = ((($$03$i13)) + 10|0);
    HEAP8[$95>>0] = $96;
    $98 = HEAP8[$77>>0]|0;
    $99 = ((($$03$i13)) + 11|0);
    HEAP8[$97>>0] = $98;
    $100 = HEAP8[$77>>0]|0;
    $101 = ((($$03$i13)) + 12|0);
    HEAP8[$99>>0] = $100;
    $102 = HEAP8[$77>>0]|0;
    $103 = ((($$03$i13)) + 13|0);
    HEAP8[$101>>0] = $102;
    $104 = HEAP8[$77>>0]|0;
    $105 = ((($$03$i13)) + 14|0);
    HEAP8[$103>>0] = $104;
    $106 = HEAP8[$77>>0]|0;
    $107 = ((($$03$i13)) + 15|0);
    HEAP8[$105>>0] = $106;
    $108 = HEAP8[$77>>0]|0;
    HEAP8[$107>>0] = $108;
    $scevgep$i14 = ((($$03$i13)) + 16|0);
    $109 = (($i$04$i12) + 1)|0;
    $exitcond$i15 = ($109|0)==(16);
    if ($exitcond$i15) {
     break;
    } else {
     $$03$i13 = $scevgep$i14;$i$04$i12 = $109;
    }
   }
  }
  break;
 }
 case 2:  {
  $110 = ((($above)) + 1|0);
  $111 = ($availableA$0|0)!=(0);
  $112 = ($availableB$0|0)!=(0);
  $or$cond$i = $111 & $112;
  do {
   if ($or$cond$i) {
    $113 = HEAP8[$110>>0]|0;
    $114 = $113&255;
    $115 = HEAP8[$left>>0]|0;
    $116 = $115&255;
    $117 = ((($above)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = ((($left)) + 1|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $123 = ((($above)) + 3|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = $124&255;
    $126 = ((($left)) + 2|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&255;
    $129 = ((($above)) + 4|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = ((($left)) + 3|0);
    $133 = HEAP8[$132>>0]|0;
    $134 = $133&255;
    $135 = ((($above)) + 5|0);
    $136 = HEAP8[$135>>0]|0;
    $137 = $136&255;
    $138 = ((($left)) + 4|0);
    $139 = HEAP8[$138>>0]|0;
    $140 = $139&255;
    $141 = ((($above)) + 6|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = $142&255;
    $144 = ((($left)) + 5|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $147 = ((($above)) + 7|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = $148&255;
    $150 = ((($left)) + 6|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = $151&255;
    $153 = ((($above)) + 8|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = $154&255;
    $156 = ((($left)) + 7|0);
    $157 = HEAP8[$156>>0]|0;
    $158 = $157&255;
    $159 = ((($above)) + 9|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $160&255;
    $162 = ((($left)) + 8|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    $165 = ((($above)) + 10|0);
    $166 = HEAP8[$165>>0]|0;
    $167 = $166&255;
    $168 = ((($left)) + 9|0);
    $169 = HEAP8[$168>>0]|0;
    $170 = $169&255;
    $171 = ((($above)) + 11|0);
    $172 = HEAP8[$171>>0]|0;
    $173 = $172&255;
    $174 = ((($left)) + 10|0);
    $175 = HEAP8[$174>>0]|0;
    $176 = $175&255;
    $177 = ((($above)) + 12|0);
    $178 = HEAP8[$177>>0]|0;
    $179 = $178&255;
    $180 = ((($left)) + 11|0);
    $181 = HEAP8[$180>>0]|0;
    $182 = $181&255;
    $183 = ((($above)) + 13|0);
    $184 = HEAP8[$183>>0]|0;
    $185 = $184&255;
    $186 = ((($left)) + 12|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = ((($above)) + 14|0);
    $190 = HEAP8[$189>>0]|0;
    $191 = $190&255;
    $192 = ((($left)) + 13|0);
    $193 = HEAP8[$192>>0]|0;
    $194 = $193&255;
    $195 = ((($above)) + 15|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = $196&255;
    $198 = ((($left)) + 14|0);
    $199 = HEAP8[$198>>0]|0;
    $200 = $199&255;
    $201 = ((($above)) + 16|0);
    $202 = HEAP8[$201>>0]|0;
    $203 = $202&255;
    $204 = ((($left)) + 15|0);
    $205 = HEAP8[$204>>0]|0;
    $206 = $205&255;
    $207 = (($114) + 16)|0;
    $208 = (($207) + ($116))|0;
    $209 = (($208) + ($119))|0;
    $210 = (($209) + ($122))|0;
    $211 = (($210) + ($125))|0;
    $212 = (($211) + ($128))|0;
    $213 = (($212) + ($131))|0;
    $214 = (($213) + ($134))|0;
    $215 = (($214) + ($137))|0;
    $216 = (($215) + ($140))|0;
    $217 = (($216) + ($143))|0;
    $218 = (($217) + ($146))|0;
    $219 = (($218) + ($149))|0;
    $220 = (($219) + ($152))|0;
    $221 = (($220) + ($155))|0;
    $222 = (($221) + ($158))|0;
    $223 = (($222) + ($161))|0;
    $224 = (($223) + ($164))|0;
    $225 = (($224) + ($167))|0;
    $226 = (($225) + ($170))|0;
    $227 = (($226) + ($173))|0;
    $228 = (($227) + ($176))|0;
    $229 = (($228) + ($179))|0;
    $230 = (($229) + ($182))|0;
    $231 = (($230) + ($185))|0;
    $232 = (($231) + ($188))|0;
    $233 = (($232) + ($191))|0;
    $234 = (($233) + ($194))|0;
    $235 = (($234) + ($197))|0;
    $236 = (($235) + ($200))|0;
    $237 = (($236) + ($203))|0;
    $238 = (($237) + ($206))|0;
    $239 = $238 >>> 5;
    $tmp$3$i = $239;
   } else {
    if ($111) {
     $240 = HEAP8[$left>>0]|0;
     $241 = $240&255;
     $242 = ((($left)) + 1|0);
     $243 = HEAP8[$242>>0]|0;
     $244 = $243&255;
     $245 = ((($left)) + 2|0);
     $246 = HEAP8[$245>>0]|0;
     $247 = $246&255;
     $248 = ((($left)) + 3|0);
     $249 = HEAP8[$248>>0]|0;
     $250 = $249&255;
     $251 = ((($left)) + 4|0);
     $252 = HEAP8[$251>>0]|0;
     $253 = $252&255;
     $254 = ((($left)) + 5|0);
     $255 = HEAP8[$254>>0]|0;
     $256 = $255&255;
     $257 = ((($left)) + 6|0);
     $258 = HEAP8[$257>>0]|0;
     $259 = $258&255;
     $260 = ((($left)) + 7|0);
     $261 = HEAP8[$260>>0]|0;
     $262 = $261&255;
     $263 = ((($left)) + 8|0);
     $264 = HEAP8[$263>>0]|0;
     $265 = $264&255;
     $266 = ((($left)) + 9|0);
     $267 = HEAP8[$266>>0]|0;
     $268 = $267&255;
     $269 = ((($left)) + 10|0);
     $270 = HEAP8[$269>>0]|0;
     $271 = $270&255;
     $272 = ((($left)) + 11|0);
     $273 = HEAP8[$272>>0]|0;
     $274 = $273&255;
     $275 = ((($left)) + 12|0);
     $276 = HEAP8[$275>>0]|0;
     $277 = $276&255;
     $278 = ((($left)) + 13|0);
     $279 = HEAP8[$278>>0]|0;
     $280 = $279&255;
     $281 = ((($left)) + 14|0);
     $282 = HEAP8[$281>>0]|0;
     $283 = $282&255;
     $284 = ((($left)) + 15|0);
     $285 = HEAP8[$284>>0]|0;
     $286 = $285&255;
     $287 = (($241) + 8)|0;
     $288 = (($287) + ($244))|0;
     $289 = (($288) + ($247))|0;
     $290 = (($289) + ($250))|0;
     $291 = (($290) + ($253))|0;
     $292 = (($291) + ($256))|0;
     $293 = (($292) + ($259))|0;
     $294 = (($293) + ($262))|0;
     $295 = (($294) + ($265))|0;
     $296 = (($295) + ($268))|0;
     $297 = (($296) + ($271))|0;
     $298 = (($297) + ($274))|0;
     $299 = (($298) + ($277))|0;
     $300 = (($299) + ($280))|0;
     $301 = (($300) + ($283))|0;
     $302 = (($301) + ($286))|0;
     $303 = $302 >>> 4;
     $tmp$3$i = $303;
     break;
    }
    if ($112) {
     $304 = HEAP8[$110>>0]|0;
     $305 = $304&255;
     $306 = ((($above)) + 2|0);
     $307 = HEAP8[$306>>0]|0;
     $308 = $307&255;
     $309 = ((($above)) + 3|0);
     $310 = HEAP8[$309>>0]|0;
     $311 = $310&255;
     $312 = ((($above)) + 4|0);
     $313 = HEAP8[$312>>0]|0;
     $314 = $313&255;
     $315 = ((($above)) + 5|0);
     $316 = HEAP8[$315>>0]|0;
     $317 = $316&255;
     $318 = ((($above)) + 6|0);
     $319 = HEAP8[$318>>0]|0;
     $320 = $319&255;
     $321 = ((($above)) + 7|0);
     $322 = HEAP8[$321>>0]|0;
     $323 = $322&255;
     $324 = ((($above)) + 8|0);
     $325 = HEAP8[$324>>0]|0;
     $326 = $325&255;
     $327 = ((($above)) + 9|0);
     $328 = HEAP8[$327>>0]|0;
     $329 = $328&255;
     $330 = ((($above)) + 10|0);
     $331 = HEAP8[$330>>0]|0;
     $332 = $331&255;
     $333 = ((($above)) + 11|0);
     $334 = HEAP8[$333>>0]|0;
     $335 = $334&255;
     $336 = ((($above)) + 12|0);
     $337 = HEAP8[$336>>0]|0;
     $338 = $337&255;
     $339 = ((($above)) + 13|0);
     $340 = HEAP8[$339>>0]|0;
     $341 = $340&255;
     $342 = ((($above)) + 14|0);
     $343 = HEAP8[$342>>0]|0;
     $344 = $343&255;
     $345 = ((($above)) + 15|0);
     $346 = HEAP8[$345>>0]|0;
     $347 = $346&255;
     $348 = ((($above)) + 16|0);
     $349 = HEAP8[$348>>0]|0;
     $350 = $349&255;
     $351 = (($305) + 8)|0;
     $352 = (($351) + ($308))|0;
     $353 = (($352) + ($311))|0;
     $354 = (($353) + ($314))|0;
     $355 = (($354) + ($317))|0;
     $356 = (($355) + ($320))|0;
     $357 = (($356) + ($323))|0;
     $358 = (($357) + ($326))|0;
     $359 = (($358) + ($329))|0;
     $360 = (($359) + ($332))|0;
     $361 = (($360) + ($335))|0;
     $362 = (($361) + ($338))|0;
     $363 = (($362) + ($341))|0;
     $364 = (($363) + ($344))|0;
     $365 = (($364) + ($347))|0;
     $366 = (($365) + ($350))|0;
     $367 = $366 >>> 4;
     $tmp$3$i = $367;
    } else {
     $tmp$3$i = 128;
    }
   }
  } while(0);
  $368 = $tmp$3$i&255;
  _memset(($data|0),($368|0),256)|0;
  break;
 }
 default: {
  $369 = ($availableA$0|0)!=(0);
  $370 = ($availableB$0|0)!=(0);
  $or$cond7 = $369 & $370;
  $371 = ($availableD$0|0)!=(0);
  $or$cond9 = $or$cond7 & $371;
  if (!($or$cond9)) {
   $$0 = 1;
   return ($$0|0);
  }
  $372 = ((($above)) + 1|0);
  $373 = ((($above)) + 16|0);
  $374 = HEAP8[$373>>0]|0;
  $375 = $374&255;
  $376 = ((($left)) + 15|0);
  $377 = HEAP8[$376>>0]|0;
  $378 = $377&255;
  $379 = (($378) + ($375))|0;
  $380 = ((($above)) + 9|0);
  $381 = HEAP8[$380>>0]|0;
  $382 = $381&255;
  $383 = ((($above)) + 7|0);
  $384 = HEAP8[$383>>0]|0;
  $385 = $384&255;
  $386 = (($382) - ($385))|0;
  $387 = ((($above)) + 10|0);
  $388 = HEAP8[$387>>0]|0;
  $389 = $388&255;
  $390 = ((($above)) + 6|0);
  $391 = HEAP8[$390>>0]|0;
  $392 = $391&255;
  $393 = (($389) - ($392))|0;
  $394 = $393 << 1;
  $395 = (($386) + ($394))|0;
  $396 = ((($above)) + 11|0);
  $397 = HEAP8[$396>>0]|0;
  $398 = $397&255;
  $399 = ((($above)) + 5|0);
  $400 = HEAP8[$399>>0]|0;
  $401 = $400&255;
  $402 = (($398) - ($401))|0;
  $403 = ($402*3)|0;
  $404 = (($395) + ($403))|0;
  $405 = ((($above)) + 12|0);
  $406 = HEAP8[$405>>0]|0;
  $407 = $406&255;
  $408 = ((($above)) + 4|0);
  $409 = HEAP8[$408>>0]|0;
  $410 = $409&255;
  $411 = (($407) - ($410))|0;
  $412 = $411 << 2;
  $413 = (($404) + ($412))|0;
  $414 = ((($above)) + 13|0);
  $415 = HEAP8[$414>>0]|0;
  $416 = $415&255;
  $417 = ((($above)) + 3|0);
  $418 = HEAP8[$417>>0]|0;
  $419 = $418&255;
  $420 = (($416) - ($419))|0;
  $421 = ($420*5)|0;
  $422 = (($413) + ($421))|0;
  $423 = ((($above)) + 14|0);
  $424 = HEAP8[$423>>0]|0;
  $425 = $424&255;
  $426 = ((($above)) + 2|0);
  $427 = HEAP8[$426>>0]|0;
  $428 = $427&255;
  $429 = (($425) - ($428))|0;
  $430 = ($429*6)|0;
  $431 = (($422) + ($430))|0;
  $432 = ((($above)) + 15|0);
  $433 = HEAP8[$432>>0]|0;
  $434 = $433&255;
  $435 = HEAP8[$372>>0]|0;
  $436 = $435&255;
  $437 = (($434) - ($436))|0;
  $438 = ($437*7)|0;
  $439 = (($431) + ($438))|0;
  $440 = HEAP8[$above>>0]|0;
  $441 = $440&255;
  $442 = (($375) - ($441))|0;
  $443 = $442 << 3;
  $444 = (($439) + ($443))|0;
  $445 = $379 << 4;
  $446 = ($444*5)|0;
  $447 = (($446) + 32)|0;
  $448 = ((($left)) + 8|0);
  $449 = HEAP8[$448>>0]|0;
  $450 = $449&255;
  $451 = ((($left)) + 6|0);
  $452 = HEAP8[$451>>0]|0;
  $453 = $452&255;
  $454 = (($450) - ($453))|0;
  $455 = ((($left)) + 9|0);
  $456 = HEAP8[$455>>0]|0;
  $457 = $456&255;
  $458 = ((($left)) + 5|0);
  $459 = HEAP8[$458>>0]|0;
  $460 = $459&255;
  $461 = (($457) - ($460))|0;
  $462 = $461 << 1;
  $463 = ((($left)) + 10|0);
  $464 = HEAP8[$463>>0]|0;
  $465 = $464&255;
  $466 = ((($left)) + 4|0);
  $467 = HEAP8[$466>>0]|0;
  $468 = $467&255;
  $469 = (($465) - ($468))|0;
  $470 = ($469*3)|0;
  $471 = ((($left)) + 11|0);
  $472 = HEAP8[$471>>0]|0;
  $473 = $472&255;
  $474 = ((($left)) + 3|0);
  $475 = HEAP8[$474>>0]|0;
  $476 = $475&255;
  $477 = (($473) - ($476))|0;
  $478 = $477 << 2;
  $479 = ((($left)) + 12|0);
  $480 = HEAP8[$479>>0]|0;
  $481 = $480&255;
  $482 = ((($left)) + 2|0);
  $483 = HEAP8[$482>>0]|0;
  $484 = $483&255;
  $485 = (($481) - ($484))|0;
  $486 = ($485*5)|0;
  $487 = ((($left)) + 13|0);
  $488 = HEAP8[$487>>0]|0;
  $489 = $488&255;
  $490 = ((($left)) + 1|0);
  $491 = HEAP8[$490>>0]|0;
  $492 = $491&255;
  $493 = (($489) - ($492))|0;
  $494 = ($493*6)|0;
  $495 = ((($left)) + 14|0);
  $496 = HEAP8[$495>>0]|0;
  $497 = $496&255;
  $498 = HEAP8[$left>>0]|0;
  $499 = $498&255;
  $500 = (($497) - ($499))|0;
  $501 = ($500*7)|0;
  $502 = $447 >> 6;
  $503 = (($378) - ($441))|0;
  $504 = $503 << 3;
  $505 = (($454) + ($504))|0;
  $506 = (($505) + ($462))|0;
  $507 = (($506) + ($470))|0;
  $508 = (($507) + ($478))|0;
  $509 = (($508) + ($486))|0;
  $510 = (($509) + ($494))|0;
  $511 = (($510) + ($501))|0;
  $512 = ($511*5)|0;
  $513 = (($512) + 32)|0;
  $514 = $513 >> 6;
  $515 = (($445) + 16)|0;
  $i$23$i = 0;
  while(1) {
   $516 = (($i$23$i) + -7)|0;
   $517 = Math_imul($516, $514)|0;
   $518 = (($515) + ($517))|0;
   $519 = $i$23$i << 4;
   $j$02$i = 0;
   while(1) {
    $520 = (($j$02$i) + -7)|0;
    $521 = Math_imul($520, $502)|0;
    $522 = (($518) + ($521))|0;
    $523 = $522 >> 5;
    $524 = ($523|0)<(0);
    $525 = ($523|0)>(255);
    $526 = $523&255;
    $527 = $525 ? -1 : $526;
    $528 = $524 ? 0 : $527;
    $529 = (($j$02$i) + ($519))|0;
    $530 = (($data) + ($529)|0);
    HEAP8[$530>>0] = $528;
    $531 = (($j$02$i) + 1)|0;
    $exitcond$i18 = ($531|0)==(16);
    if ($exitcond$i18) {
     break;
    } else {
     $j$02$i = $531;
    }
   }
   $532 = (($i$23$i) + 1)|0;
   $exitcond11$i = ($532|0)==(16);
   if ($exitcond11$i) {
    break;
   } else {
    $i$23$i = $532;
   }
  }
 }
 }
 _h264bsdAddResidual($data,$residual,0);
 $533 = ((($residual)) + 64|0);
 _h264bsdAddResidual($data,$533,1);
 $534 = ((($residual)) + 128|0);
 _h264bsdAddResidual($data,$534,2);
 $535 = ((($residual)) + 192|0);
 _h264bsdAddResidual($data,$535,3);
 $536 = ((($residual)) + 256|0);
 _h264bsdAddResidual($data,$536,4);
 $537 = ((($residual)) + 320|0);
 _h264bsdAddResidual($data,$537,5);
 $538 = ((($residual)) + 384|0);
 _h264bsdAddResidual($data,$538,6);
 $539 = ((($residual)) + 448|0);
 _h264bsdAddResidual($data,$539,7);
 $540 = ((($residual)) + 512|0);
 _h264bsdAddResidual($data,$540,8);
 $541 = ((($residual)) + 576|0);
 _h264bsdAddResidual($data,$541,9);
 $542 = ((($residual)) + 640|0);
 _h264bsdAddResidual($data,$542,10);
 $543 = ((($residual)) + 704|0);
 _h264bsdAddResidual($data,$543,11);
 $544 = ((($residual)) + 768|0);
 _h264bsdAddResidual($data,$544,12);
 $545 = ((($residual)) + 832|0);
 _h264bsdAddResidual($data,$545,13);
 $546 = ((($residual)) + 896|0);
 _h264bsdAddResidual($data,$546,14);
 $547 = ((($residual)) + 960|0);
 _h264bsdAddResidual($data,$547,15);
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdIntra4x4Prediction($pMb,$data,$mbLayer,$above,$left,$constrainedIntraPred) {
 $pMb = $pMb|0;
 $data = $data|0;
 $mbLayer = $mbLayer|0;
 $above = $above|0;
 $left = $left|0;
 $constrainedIntraPred = $constrainedIntraPred|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$21 = 0, $$22 = 0, $$23 = 0, $$24 = 0, $$25 = 0, $$26 = 0, $$27 = 0, $$28 = 0, $$29 = 0, $$30 = 0, $$in = 0, $$in31 = 0, $$in32 = 0, $$masked = 0, $$masked35 = 0, $$masked37 = 0, $$masked40 = 0;
 var $$sink$i = 0, $$sink$in$i = 0, $$sink1$i = 0, $$sink1$in$i = 0, $$sum$i = 0, $$sum1$i = 0, $$sum2$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $availableA$0 = 0, $availableB$0 = 0, $availableC$0 = 0, $availableD$0 = 0, $block$045 = 0, $mode1$0$i = 0, $mode1$1$i = 0, $mode2$0$i = 0, $not$$i = 0, $or$cond = 0, $or$cond11 = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $tmp$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($constrainedIntraPred|0)!=(0);
 $block$045 = 0;
 L1: while(1) {
  $1 = (_h264bsdNeighbour4x4BlockA($block$045)|0);
  $2 = $1;
  $3 = $2;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + 4)|0;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (_h264bsdGetNeighbourMb($pMb,$4)|0);
  $9 = (_h264bsdIsNeighbourAvailable($pMb,$8)|0);
  $10 = ($9|0)!=(0);
  $or$cond = $0 & $10;
  if ($or$cond) {
   $11 = HEAP32[$8>>2]|0;
   $12 = (_h264bsdMbPartPredMode($11)|0);
   $13 = ($12|0)==(2);
   $$ = $13 ? 0 : $9;
   $availableA$0 = $$;
  } else {
   $availableA$0 = $9;
  }
  $14 = (_h264bsdNeighbour4x4BlockB($block$045)|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (_h264bsdGetNeighbourMb($pMb,$17)|0);
  $22 = (_h264bsdIsNeighbourAvailable($pMb,$21)|0);
  $23 = ($22|0)!=(0);
  $or$cond3 = $0 & $23;
  if ($or$cond3) {
   $24 = HEAP32[$21>>2]|0;
   $25 = (_h264bsdMbPartPredMode($24)|0);
   $26 = ($25|0)==(2);
   $$21 = $26 ? 0 : $22;
   $availableB$0 = $$21;
  } else {
   $availableB$0 = $22;
  }
  $27 = ($availableA$0|0)!=(0);
  $28 = ($availableB$0|0)!=(0);
  $29 = $27 & $28;
  if ($29) {
   $30 = HEAP32[$8>>2]|0;
   $31 = (_h264bsdMbPartPredMode($30)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = $7 & 255;
    $34 = (((($8)) + 82|0) + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $mode1$0$i = $36;
   } else {
    $mode1$0$i = 2;
   }
   $37 = HEAP32[$21>>2]|0;
   $38 = (_h264bsdMbPartPredMode($37)|0);
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = $20 & 255;
    $41 = (((($21)) + 82|0) + ($40)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $mode2$0$i = $43;
   } else {
    $mode2$0$i = 2;
   }
   $44 = ($mode1$0$i>>>0)<($mode2$0$i>>>0);
   $45 = $44 ? $mode1$0$i : $mode2$0$i;
   $mode1$1$i = $45;
  } else {
   $mode1$1$i = 2;
  }
  $46 = (((($mbLayer)) + 12|0) + ($block$045<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = (((($mbLayer)) + 76|0) + ($block$045<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $not$$i = ($50>>>0)>=($mode1$1$i>>>0);
   $51 = $not$$i&1;
   $$$i = (($51) + ($50))|0;
   $53 = $$$i;
  } else {
   $53 = $mode1$1$i;
  }
  $52 = $53&255;
  $54 = (((($pMb)) + 82|0) + ($block$045)|0);
  HEAP8[$54>>0] = $52;
  $55 = (_h264bsdNeighbour4x4BlockC($block$045)|0);
  $56 = $55;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = (_h264bsdGetNeighbourMb($pMb,$58)|0);
  $63 = (_h264bsdIsNeighbourAvailable($pMb,$62)|0);
  $64 = ($63|0)!=(0);
  $or$cond5 = $0 & $64;
  if ($or$cond5) {
   $65 = HEAP32[$62>>2]|0;
   $66 = (_h264bsdMbPartPredMode($65)|0);
   $67 = ($66|0)==(2);
   $$22 = $67 ? 0 : $63;
   $availableC$0 = $$22;
  } else {
   $availableC$0 = $63;
  }
  $68 = (_h264bsdNeighbour4x4BlockD($block$045)|0);
  $69 = $68;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (_h264bsdGetNeighbourMb($pMb,$71)|0);
  $76 = (_h264bsdIsNeighbourAvailable($pMb,$75)|0);
  $77 = ($76|0)!=(0);
  $or$cond7 = $0 & $77;
  if ($or$cond7) {
   $78 = HEAP32[$75>>2]|0;
   $79 = (_h264bsdMbPartPredMode($78)|0);
   $80 = ($79|0)==(2);
   $$23 = $80 ? 0 : $76;
   $availableD$0 = $$23;
  } else {
   $availableD$0 = $76;
  }
  $81 = (2824 + ($block$045<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (2888 + ($block$045<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = 1285 >>> $block$045;
  $86 = $85 & 1;
  $87 = ($86|0)!=(0);
  if ($87) {
   $88 = (($left) + ($84)|0);
   $89 = (($84) + 1)|0;
   $90 = (($left) + ($89)|0);
   $91 = (($84) + 2)|0;
   $92 = (($left) + ($91)|0);
   $93 = (($84) + 3)|0;
   $94 = (($left) + ($93)|0);
   $$in = $90;$$in31 = $88;$$sink$in$i = $94;$$sink1$in$i = $92;
  } else {
   $95 = $84 << 4;
   $96 = (($95) + ($82))|0;
   $97 = (($96) + -1)|0;
   $98 = (($data) + ($97)|0);
   $99 = (($96) + 15)|0;
   $100 = (($data) + ($99)|0);
   $101 = (($96) + 31)|0;
   $102 = (($data) + ($101)|0);
   $103 = (($96) + 47)|0;
   $104 = (($data) + ($103)|0);
   $$in = $100;$$in31 = $98;$$sink$in$i = $104;$$sink1$in$i = $102;
  }
  $105 = HEAP8[$$in31>>0]|0;
  $106 = HEAP8[$$in>>0]|0;
  $$sink$i = HEAP8[$$sink$in$i>>0]|0;
  $$sink1$i = HEAP8[$$sink1$in$i>>0]|0;
  $107 = 51 >>> $block$045;
  $108 = $107 & 1;
  $109 = ($108|0)==(0);
  do {
   if ($109) {
    $135 = (($84) + -1)|0;
    $136 = $135 << 4;
    $137 = (($136) + ($82))|0;
    $138 = (($data) + ($137)|0);
    $139 = HEAP8[$138>>0]|0;
    $140 = (($137) + 1)|0;
    $141 = (($data) + ($140)|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = (($137) + 2)|0;
    $144 = (($data) + ($143)|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = (($137) + 3)|0;
    $147 = (($data) + ($146)|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = (($137) + 4)|0;
    $150 = (($data) + ($149)|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = (($137) + 5)|0;
    $153 = (($data) + ($152)|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = (($137) + 6)|0;
    $156 = (($data) + ($155)|0);
    $157 = HEAP8[$156>>0]|0;
    $158 = (($137) + 7)|0;
    $159 = (($data) + ($158)|0);
    $160 = HEAP8[$159>>0]|0;
    if ($87) {
     $161 = (($left) + ($135)|0);
     $$in32 = $161;$166 = $139;$168 = $142;$171 = $145;$174 = $148;$253 = $160;$254 = $157;$255 = $154;$256 = $151;
     break;
    } else {
     $162 = (($137) + -1)|0;
     $163 = (($data) + ($162)|0);
     $$in32 = $163;$166 = $139;$168 = $142;$171 = $145;$174 = $148;$253 = $160;$254 = $157;$255 = $154;$256 = $151;
     break;
    }
   } else {
    $110 = (($above) + ($82)|0);
    $111 = (($82) + 1)|0;
    $112 = (($above) + ($111)|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = (($82) + 2)|0;
    $115 = (($above) + ($114)|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = (($82) + 3)|0;
    $118 = (($above) + ($117)|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = (($82) + 4)|0;
    $121 = (($above) + ($120)|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = (($82) + 5)|0;
    $124 = (($above) + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = (($82) + 6)|0;
    $127 = (($above) + ($126)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = (($82) + 7)|0;
    $130 = (($above) + ($129)|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = (($82) + 8)|0;
    $133 = (($above) + ($132)|0);
    $134 = HEAP8[$133>>0]|0;
    $$in32 = $110;$166 = $113;$168 = $116;$171 = $119;$174 = $122;$253 = $134;$254 = $131;$255 = $128;$256 = $125;
   }
  } while(0);
  $164 = HEAP8[$$in32>>0]|0;
  switch ($53|0) {
  case 0:  {
   if (!($28)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $165 = $166&255;
   $167 = $168&255;
   $169 = $167 << 8;
   $170 = $171&255;
   $172 = $170 << 16;
   $173 = $174&255;
   $175 = $173 << 24;
   $176 = $172 | $175;
   $177 = $176 | $169;
   $178 = $177 | $165;
   $605 = $174;$608 = $171;$612 = $168;$616 = $166;$619 = $174;$622 = $171;$626 = $168;$630 = $166;$634 = $174;$637 = $171;$641 = $168;$645 = $166;$649 = $178;
   break;
  }
  case 1:  {
   if (!($27)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $179 = $105&255;
   $180 = Math_imul($179, 16843009)|0;
   $181 = $180&255;
   $182 = $180 >>> 8;
   $183 = $182&255;
   $184 = $180 >>> 16;
   $185 = $184&255;
   $186 = $180 >>> 24;
   $187 = $186&255;
   $188 = $106&255;
   $189 = Math_imul($188, 16843009)|0;
   $190 = $189&255;
   $191 = $189 >>> 8;
   $192 = $191&255;
   $193 = $189 >>> 16;
   $194 = $193&255;
   $195 = $189 >>> 24;
   $196 = $195&255;
   $197 = $$sink1$i&255;
   $198 = Math_imul($197, 16843009)|0;
   $199 = $198&255;
   $200 = $198 >>> 8;
   $201 = $200&255;
   $202 = $198 >>> 16;
   $203 = $202&255;
   $204 = $198 >>> 24;
   $205 = $204&255;
   $206 = $$sink$i&255;
   $207 = Math_imul($206, 16843009)|0;
   $605 = $187;$608 = $185;$612 = $183;$616 = $181;$619 = $196;$622 = $194;$626 = $192;$630 = $190;$634 = $205;$637 = $203;$641 = $201;$645 = $199;$649 = $207;
   break;
  }
  case 2:  {
   do {
    if ($29) {
     $208 = $166&255;
     $209 = $168&255;
     $210 = $171&255;
     $211 = $174&255;
     $212 = $105&255;
     $213 = $106&255;
     $214 = $$sink1$i&255;
     $215 = $$sink$i&255;
     $216 = (($212) + 4)|0;
     $217 = (($216) + ($213))|0;
     $218 = (($217) + ($215))|0;
     $219 = (($218) + ($214))|0;
     $220 = (($219) + ($211))|0;
     $221 = (($220) + ($210))|0;
     $222 = (($221) + ($209))|0;
     $223 = (($222) + ($208))|0;
     $224 = $223 >>> 3;
     $tmp$0$i = $224;
    } else {
     if ($27) {
      $225 = $105&255;
      $226 = $106&255;
      $227 = $$sink1$i&255;
      $228 = $$sink$i&255;
      $229 = (($225) + 2)|0;
      $230 = (($229) + ($226))|0;
      $231 = (($230) + ($228))|0;
      $232 = (($231) + ($227))|0;
      $233 = $232 >>> 2;
      $tmp$0$i = $233;
      break;
     }
     if ($28) {
      $234 = $166&255;
      $235 = $168&255;
      $236 = $171&255;
      $237 = $174&255;
      $238 = (($237) + 2)|0;
      $239 = (($238) + ($236))|0;
      $240 = (($239) + ($235))|0;
      $241 = (($240) + ($234))|0;
      $242 = $241 >>> 2;
      $tmp$0$i = $242;
     } else {
      $tmp$0$i = 128;
     }
    }
   } while(0);
   $243 = $tmp$0$i & 255;
   $244 = Math_imul($243, 16843009)|0;
   $245 = $244&255;
   $246 = $244 >>> 8;
   $247 = $246&255;
   $248 = $244 >>> 16;
   $249 = $248&255;
   $250 = $244 >>> 24;
   $251 = $250&255;
   $605 = $251;$608 = $249;$612 = $247;$616 = $245;$619 = $251;$622 = $249;$626 = $247;$630 = $245;$634 = $251;$637 = $249;$641 = $247;$645 = $245;$649 = $244;
   break;
  }
  case 3:  {
   if (!($28)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $252 = ($availableC$0|0)==(0);
   $$24 = $252 ? $174 : $253;
   $$25 = $252 ? $174 : $254;
   $$26 = $252 ? $174 : $255;
   $$27 = $252 ? $174 : $256;
   $257 = $166&255;
   $258 = $168&255;
   $259 = $258 << 1;
   $260 = $171&255;
   $261 = (($260) + 2)|0;
   $262 = (($261) + ($257))|0;
   $263 = (($262) + ($259))|0;
   $264 = $263 >>> 2;
   $265 = $264&255;
   $266 = $260 << 1;
   $267 = $174&255;
   $268 = (($267) + 2)|0;
   $269 = (($268) + ($258))|0;
   $270 = (($269) + ($266))|0;
   $271 = $270 >>> 2;
   $272 = $271&255;
   $273 = $267 << 1;
   $274 = $$27&255;
   $275 = (($261) + ($273))|0;
   $276 = (($275) + ($274))|0;
   $277 = $276 >>> 2;
   $278 = $277&255;
   $279 = $274 << 1;
   $280 = $$26&255;
   $281 = (($268) + ($280))|0;
   $282 = (($281) + ($279))|0;
   $283 = $282 >>> 2;
   $284 = $283&255;
   $285 = $283 & 255;
   $286 = $280 << 1;
   $287 = $$25&255;
   $288 = (($274) + 2)|0;
   $289 = (($288) + ($287))|0;
   $290 = (($289) + ($286))|0;
   $291 = $290 >>> 2;
   $292 = $291&255;
   $293 = $291 << 8;
   $294 = $293 & 65280;
   $295 = $287 << 1;
   $296 = $$24&255;
   $297 = (($280) + 2)|0;
   $298 = (($297) + ($296))|0;
   $299 = (($298) + ($295))|0;
   $300 = $299 >>> 2;
   $301 = $300&255;
   $302 = $300 << 16;
   $303 = ($296*3)|0;
   $304 = (($287) + 2)|0;
   $305 = (($304) + ($303))|0;
   $306 = $305 >>> 2;
   $307 = $306 << 24;
   $$masked40 = $302 & 16711680;
   $308 = $285 | $307;
   $309 = $308 | $294;
   $310 = $309 | $$masked40;
   $605 = $284;$608 = $278;$612 = $272;$616 = $265;$619 = $292;$622 = $284;$626 = $278;$630 = $272;$634 = $301;$637 = $292;$641 = $284;$645 = $278;$649 = $310;
   break;
  }
  case 4:  {
   $311 = ($availableD$0|0)!=(0);
   $or$cond11 = $29 & $311;
   if (!($or$cond11)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $312 = $166&255;
   $313 = $164&255;
   $314 = $313 << 1;
   $315 = $105&255;
   $316 = (($312) + 2)|0;
   $317 = (($316) + ($315))|0;
   $318 = (($317) + ($314))|0;
   $319 = $318 >>> 2;
   $320 = $319&255;
   $321 = $319 << 24;
   $322 = $312 << 1;
   $323 = $168&255;
   $324 = (($313) + 2)|0;
   $325 = (($322) + ($323))|0;
   $326 = (($325) + ($324))|0;
   $327 = $326 >>> 2;
   $328 = $327&255;
   $329 = $323 << 1;
   $330 = $171&255;
   $331 = (($329) + ($330))|0;
   $332 = (($331) + ($316))|0;
   $333 = $332 >>> 2;
   $334 = $333&255;
   $335 = $330 << 1;
   $336 = $174&255;
   $337 = (($336) + 2)|0;
   $338 = (($337) + ($323))|0;
   $339 = (($338) + ($335))|0;
   $340 = $339 >>> 2;
   $341 = $340&255;
   $342 = $315 << 1;
   $343 = $106&255;
   $344 = (($343) + ($342))|0;
   $345 = (($344) + ($324))|0;
   $346 = $345 >>> 2;
   $347 = $346&255;
   $348 = $346 << 16;
   $349 = $348 & 16711680;
   $350 = $343 << 1;
   $351 = $$sink1$i&255;
   $352 = (($315) + 2)|0;
   $353 = (($352) + ($350))|0;
   $354 = (($353) + ($351))|0;
   $355 = $354 >>> 2;
   $356 = $355&255;
   $357 = $355 << 8;
   $358 = $357 & 65280;
   $359 = $351 << 1;
   $360 = $$sink$i&255;
   $361 = (($343) + 2)|0;
   $362 = (($361) + ($360))|0;
   $363 = (($362) + ($359))|0;
   $364 = $363 >>> 2;
   $365 = $364 & 255;
   $366 = $365 | $358;
   $367 = $366 | $321;
   $368 = $367 | $349;
   $605 = $341;$608 = $334;$612 = $328;$616 = $320;$619 = $334;$622 = $328;$626 = $320;$630 = $347;$634 = $328;$637 = $320;$641 = $347;$645 = $356;$649 = $368;
   break;
  }
  case 5:  {
   $369 = ($availableD$0|0)!=(0);
   $or$cond15 = $29 & $369;
   if (!($or$cond15)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $370 = $164&255;
   $371 = $166&255;
   $372 = (($371) + 1)|0;
   $373 = (($372) + ($370))|0;
   $374 = $373 >>> 1;
   $375 = $374&255;
   $376 = $371 << 1;
   $377 = $168&255;
   $378 = (($377) + 2)|0;
   $379 = (($378) + ($376))|0;
   $380 = (($379) + ($370))|0;
   $381 = $380 >>> 2;
   $382 = $381&255;
   $383 = $381 << 16;
   $384 = $370 << 1;
   $385 = $105&255;
   $386 = (($371) + 2)|0;
   $387 = (($386) + ($385))|0;
   $388 = (($387) + ($384))|0;
   $389 = $388 >>> 2;
   $390 = $389&255;
   $391 = $389 << 8;
   $392 = $391 & 65280;
   $393 = (($377) + 1)|0;
   $394 = (($393) + ($371))|0;
   $395 = $394 >>> 1;
   $396 = $395&255;
   $397 = $377 << 1;
   $398 = $171&255;
   $399 = (($397) + ($398))|0;
   $400 = (($399) + ($386))|0;
   $401 = $400 >>> 2;
   $402 = $401&255;
   $403 = $401 << 24;
   $$masked37 = $383 & 16711680;
   $404 = (($398) + 1)|0;
   $405 = (($404) + ($377))|0;
   $406 = $405 >>> 1;
   $407 = $406&255;
   $408 = $398 << 1;
   $409 = $174&255;
   $410 = (($409) + 2)|0;
   $411 = (($410) + ($377))|0;
   $412 = (($411) + ($408))|0;
   $413 = $412 >>> 2;
   $414 = $413&255;
   $415 = (($409) + 1)|0;
   $416 = (($415) + ($398))|0;
   $417 = $416 >>> 1;
   $418 = $417&255;
   $419 = $106&255;
   $420 = $385 << 1;
   $421 = (($419) + 2)|0;
   $422 = (($421) + ($420))|0;
   $423 = (($422) + ($370))|0;
   $424 = $423 >>> 2;
   $425 = $424&255;
   $426 = $$sink1$i&255;
   $427 = $419 << 1;
   $428 = (($385) + 2)|0;
   $429 = (($428) + ($427))|0;
   $430 = (($429) + ($426))|0;
   $431 = $430 >>> 2;
   $432 = $431 & 255;
   $433 = $403 | $432;
   $434 = $433 | $392;
   $435 = $434 | $$masked37;
   $605 = $418;$608 = $407;$612 = $396;$616 = $375;$619 = $414;$622 = $402;$626 = $382;$630 = $390;$634 = $407;$637 = $396;$641 = $375;$645 = $425;$649 = $435;
   break;
  }
  case 6:  {
   $436 = ($availableD$0|0)!=(0);
   $or$cond19 = $29 & $436;
   if (!($or$cond19)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $437 = $164&255;
   $438 = $105&255;
   $439 = (($438) + 1)|0;
   $440 = (($439) + ($437))|0;
   $441 = $440 >>> 1;
   $442 = $441&255;
   $443 = $438 << 1;
   $444 = $106&255;
   $445 = (($443) + 2)|0;
   $446 = (($445) + ($444))|0;
   $447 = (($446) + ($437))|0;
   $448 = $447 >>> 2;
   $449 = $448&255;
   $450 = (($439) + ($444))|0;
   $451 = $450 >>> 1;
   $452 = $451&255;
   $453 = $444 << 1;
   $454 = $$sink1$i&255;
   $455 = (($438) + 2)|0;
   $456 = (($455) + ($453))|0;
   $457 = (($456) + ($454))|0;
   $458 = $457 >>> 2;
   $459 = $458&255;
   $460 = $458 << 24;
   $461 = (($444) + 1)|0;
   $462 = (($461) + ($454))|0;
   $463 = $462 >>> 1;
   $464 = $463&255;
   $465 = $463 << 16;
   $466 = $465 & 16711680;
   $467 = $454 << 1;
   $468 = $$sink$i&255;
   $469 = (($444) + 2)|0;
   $470 = (($469) + ($468))|0;
   $471 = (($470) + ($467))|0;
   $472 = $471 << 6;
   $473 = $466 | $460;
   $474 = (($468) + 1)|0;
   $475 = (($474) + ($454))|0;
   $476 = $475 >>> 1;
   $477 = $476 & 255;
   $$masked35 = $472 & 65280;
   $478 = $473 | $477;
   $479 = $478 | $$masked35;
   $480 = $166&255;
   $481 = $437 << 1;
   $482 = (($455) + ($480))|0;
   $483 = (($482) + ($481))|0;
   $484 = $483 >>> 2;
   $485 = $484&255;
   $486 = $168&255;
   $487 = $480 << 1;
   $488 = (($486) + 2)|0;
   $489 = (($488) + ($487))|0;
   $490 = (($489) + ($437))|0;
   $491 = $490 >>> 2;
   $492 = $491&255;
   $493 = $171&255;
   $494 = $486 << 1;
   $495 = (($493) + 2)|0;
   $496 = (($495) + ($494))|0;
   $497 = (($496) + ($480))|0;
   $498 = $497 >>> 2;
   $499 = $498&255;
   $605 = $499;$608 = $492;$612 = $485;$616 = $442;$619 = $485;$622 = $442;$626 = $449;$630 = $452;$634 = $449;$637 = $452;$641 = $459;$645 = $464;$649 = $479;
   break;
  }
  case 7:  {
   if (!($28)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $500 = ($availableC$0|0)==(0);
   $$28 = $500 ? $174 : $254;
   $$29 = $500 ? $174 : $255;
   $$30 = $500 ? $174 : $256;
   $501 = $166&255;
   $502 = $168&255;
   $503 = (($502) + 1)|0;
   $504 = (($503) + ($501))|0;
   $505 = $504 >>> 1;
   $506 = $505&255;
   $507 = $171&255;
   $508 = (($507) + 1)|0;
   $509 = (($508) + ($502))|0;
   $510 = $509 >>> 1;
   $511 = $510&255;
   $512 = $174&255;
   $513 = (($512) + 1)|0;
   $514 = (($513) + ($507))|0;
   $515 = $514 >>> 1;
   $516 = $515&255;
   $517 = $$30&255;
   $518 = (($513) + ($517))|0;
   $519 = $518 >>> 1;
   $520 = $519&255;
   $521 = $502 << 1;
   $522 = (($507) + 2)|0;
   $523 = (($522) + ($501))|0;
   $524 = (($523) + ($521))|0;
   $525 = $524 >>> 2;
   $526 = $525&255;
   $527 = $507 << 1;
   $528 = (($512) + 2)|0;
   $529 = (($528) + ($502))|0;
   $530 = (($529) + ($527))|0;
   $531 = $530 >>> 2;
   $532 = $531&255;
   $533 = $512 << 1;
   $534 = (($522) + ($533))|0;
   $535 = (($534) + ($517))|0;
   $536 = $535 >>> 2;
   $537 = $536&255;
   $538 = $517 << 1;
   $539 = $$29&255;
   $540 = (($528) + ($539))|0;
   $541 = (($540) + ($538))|0;
   $542 = $541 >>> 2;
   $543 = $542&255;
   $544 = (($517) + 1)|0;
   $545 = (($544) + ($539))|0;
   $546 = $545 >>> 1;
   $547 = $546&255;
   $548 = $531 & 255;
   $549 = $536 << 8;
   $550 = $549 & 65280;
   $551 = $542 << 16;
   $552 = $539 << 1;
   $553 = $$28&255;
   $554 = (($517) + 2)|0;
   $555 = (($554) + ($553))|0;
   $556 = (($555) + ($552))|0;
   $557 = $556 >>> 2;
   $558 = $557 << 24;
   $$masked = $551 & 16711680;
   $559 = $550 | $558;
   $560 = $559 | $548;
   $561 = $560 | $$masked;
   $605 = $520;$608 = $516;$612 = $511;$616 = $506;$619 = $543;$622 = $537;$626 = $532;$630 = $526;$634 = $547;$637 = $520;$641 = $516;$645 = $511;$649 = $561;
   break;
  }
  default: {
   if (!($27)) {
    $$0 = 1;
    label = 51;
    break L1;
   }
   $562 = $105&255;
   $563 = $106&255;
   $564 = (($562) + 1)|0;
   $565 = (($564) + ($563))|0;
   $566 = $565 >>> 1;
   $567 = $566&255;
   $568 = $563 << 1;
   $569 = $$sink1$i&255;
   $570 = (($562) + 2)|0;
   $571 = (($570) + ($568))|0;
   $572 = (($571) + ($569))|0;
   $573 = $572 >>> 2;
   $574 = $573&255;
   $575 = (($563) + 1)|0;
   $576 = (($575) + ($569))|0;
   $577 = $576 >>> 1;
   $578 = $577&255;
   $579 = $569 << 1;
   $580 = $$sink$i&255;
   $581 = (($563) + 2)|0;
   $582 = (($581) + ($580))|0;
   $583 = (($582) + ($579))|0;
   $584 = $583 >>> 2;
   $585 = $584&255;
   $586 = (($580) + 1)|0;
   $587 = (($586) + ($569))|0;
   $588 = $587 >>> 1;
   $589 = $588&255;
   $590 = ($580*3)|0;
   $591 = (($569) + 2)|0;
   $592 = (($591) + ($590))|0;
   $593 = $592 >>> 2;
   $594 = $593&255;
   $595 = $580 << 8;
   $596 = $580 << 16;
   $597 = $595 | $580;
   $598 = $597 | $596;
   $599 = $580 << 24;
   $600 = $598 | $599;
   $605 = $585;$608 = $578;$612 = $574;$616 = $567;$619 = $594;$622 = $589;$626 = $585;$630 = $578;$634 = $$sink$i;$637 = $$sink$i;$641 = $594;$645 = $589;$649 = $600;
  }
  }
  $601 = $84 << 4;
  $602 = (($601) + ($82))|0;
  $603 = (($data) + ($602)|0);
  $604 = $605&255;
  $606 = $604 << 24;
  $607 = $608&255;
  $609 = $607 << 16;
  $610 = $609 | $606;
  $611 = $612&255;
  $613 = $611 << 8;
  $614 = $610 | $613;
  $615 = $616&255;
  $617 = $614 | $615;
  HEAP32[$603>>2] = $617;
  $618 = $619&255;
  $620 = $618 << 24;
  $621 = $622&255;
  $623 = $621 << 16;
  $624 = $623 | $620;
  $625 = $626&255;
  $627 = $625 << 8;
  $628 = $624 | $627;
  $629 = $630&255;
  $631 = $628 | $629;
  $$sum$i = (($602) + 16)|0;
  $632 = (($data) + ($$sum$i)|0);
  HEAP32[$632>>2] = $631;
  $633 = $634&255;
  $635 = $633 << 24;
  $636 = $637&255;
  $638 = $636 << 16;
  $639 = $638 | $635;
  $640 = $641&255;
  $642 = $640 << 8;
  $643 = $639 | $642;
  $644 = $645&255;
  $646 = $643 | $644;
  $$sum1$i = (($602) + 32)|0;
  $647 = (($data) + ($$sum1$i)|0);
  HEAP32[$647>>2] = $646;
  $$sum2$i = (($602) + 48)|0;
  $648 = (($data) + ($$sum2$i)|0);
  HEAP32[$648>>2] = $649;
  $650 = (((($mbLayer)) + 328|0) + ($block$045<<6)|0);
  _h264bsdAddResidual($data,$650,$block$045);
  $651 = (($block$045) + 1)|0;
  $652 = ($651>>>0)<(16);
  if ($652) {
   $block$045 = $651;
  } else {
   $$0 = 0;
   label = 51;
   break;
  }
 }
 if ((label|0) == 51) {
  return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdIntraChromaPrediction($pMb,$data,$residual,$above,$left,$predMode,$constrainedIntraPred) {
 $pMb = $pMb|0;
 $data = $data|0;
 $residual = $residual|0;
 $above = $above|0;
 $left = $left|0;
 $predMode = $predMode|0;
 $constrainedIntraPred = $constrainedIntraPred|0;
 var $$ = 0, $$0 = 0, $$01024 = 0, $$01122 = 0, $$012$i = 0, $$01220 = 0, $$01319 = 0, $$14 = 0, $$15 = 0, $$sum$i = 0, $$sum1$i = 0, $$sum2$i = 0, $$sum3$i = 0, $$sum4$i = 0, $$sum5$i = 0, $$sum6$i = 0, $$sum7$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$010$i = 0, $availableA$0 = 0, $availableB$0 = 0, $availableD$0 = 0, $block$027 = 0, $comp$026 = 0;
 var $i$011$i = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $scevgep$i = 0, $tmp1$0$i = 0, $tmp1$1$i = 0, $tmp2$0$i = 0, $tmp2$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pMb)) + 200|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_h264bsdIsNeighbourAvailable($pMb,$1)|0);
 $3 = ($2|0)!=(0);
 $4 = ($constrainedIntraPred|0)!=(0);
 $or$cond = $4 & $3;
 if ($or$cond) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (_h264bsdMbPartPredMode($6)|0);
  $8 = ($7|0)==(2);
  $$ = $8 ? 0 : $2;
  $availableA$0 = $$;
 } else {
  $availableA$0 = $2;
 }
 $9 = ((($pMb)) + 204|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_h264bsdIsNeighbourAvailable($pMb,$10)|0);
 $12 = ($11|0)!=(0);
 $or$cond3 = $4 & $12;
 if ($or$cond3) {
  $13 = HEAP32[$9>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (_h264bsdMbPartPredMode($14)|0);
  $16 = ($15|0)==(2);
  $$14 = $16 ? 0 : $11;
  $availableB$0 = $$14;
 } else {
  $availableB$0 = $11;
 }
 $17 = ((($pMb)) + 212|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_h264bsdIsNeighbourAvailable($pMb,$18)|0);
 $20 = ($19|0)!=(0);
 $or$cond5 = $4 & $20;
 if ($or$cond5) {
  $21 = HEAP32[$17>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (_h264bsdMbPartPredMode($22)|0);
  $24 = ($23|0)==(2);
  $$15 = $24 ? 0 : $19;
  $availableD$0 = $$15;
 } else {
  $availableD$0 = $19;
 }
 $25 = ($availableA$0|0)!=(0);
 $26 = ($availableB$0|0)!=(0);
 $or$cond7 = $25 & $26;
 $27 = ($availableD$0|0)!=(0);
 $or$cond9 = $or$cond7 & $27;
 $28 = ($availableA$0|0)==(0);
 $29 = ($availableB$0|0)==(0);
 $$01024 = $data;$$01122 = $left;$$01220 = $above;$$01319 = $residual;$block$027 = 16;$comp$026 = 0;
 L10: while(1) {
  switch ($predMode|0) {
  case 0:  {
   $30 = ((($$01220)) + 1|0);
   do {
    if ($or$cond7) {
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = ((($$01220)) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = ((($$01220)) + 3|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37&255;
     $39 = ((($$01220)) + 4|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = HEAP8[$$01122>>0]|0;
     $43 = $42&255;
     $44 = ((($$01122)) + 1|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45&255;
     $47 = ((($$01122)) + 2|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $50 = ((($$01122)) + 3|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = (($32) + 4)|0;
     $54 = (($53) + ($35))|0;
     $55 = (($54) + ($38))|0;
     $56 = (($55) + ($41))|0;
     $57 = (($56) + ($43))|0;
     $58 = (($57) + ($46))|0;
     $59 = (($58) + ($49))|0;
     $60 = (($59) + ($52))|0;
     $61 = $60 >>> 3;
     $62 = ((($$01220)) + 5|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63&255;
     $65 = ((($$01220)) + 6|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66&255;
     $68 = ((($$01220)) + 7|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = ((($$01220)) + 8|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = (($64) + 2)|0;
     $75 = (($74) + ($67))|0;
     $76 = (($75) + ($70))|0;
     $77 = (($76) + ($73))|0;
     $78 = $77 >>> 2;
     $tmp1$0$i = $61;$tmp2$0$i = $78;
    } else {
     if ($26) {
      $79 = HEAP8[$30>>0]|0;
      $80 = $79&255;
      $81 = ((($$01220)) + 2|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = $82&255;
      $84 = ((($$01220)) + 3|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = $85&255;
      $87 = ((($$01220)) + 4|0);
      $88 = HEAP8[$87>>0]|0;
      $89 = $88&255;
      $90 = (($80) + 2)|0;
      $91 = (($90) + ($83))|0;
      $92 = (($91) + ($86))|0;
      $93 = (($92) + ($89))|0;
      $94 = $93 >>> 2;
      $95 = ((($$01220)) + 5|0);
      $96 = HEAP8[$95>>0]|0;
      $97 = $96&255;
      $98 = ((($$01220)) + 6|0);
      $99 = HEAP8[$98>>0]|0;
      $100 = $99&255;
      $101 = ((($$01220)) + 7|0);
      $102 = HEAP8[$101>>0]|0;
      $103 = $102&255;
      $104 = ((($$01220)) + 8|0);
      $105 = HEAP8[$104>>0]|0;
      $106 = $105&255;
      $107 = (($97) + 2)|0;
      $108 = (($107) + ($100))|0;
      $109 = (($108) + ($103))|0;
      $110 = (($109) + ($106))|0;
      $111 = $110 >>> 2;
      $tmp1$0$i = $94;$tmp2$0$i = $111;
      break;
     }
     if ($25) {
      $112 = HEAP8[$$01122>>0]|0;
      $113 = $112&255;
      $114 = ((($$01122)) + 1|0);
      $115 = HEAP8[$114>>0]|0;
      $116 = $115&255;
      $117 = ((($$01122)) + 2|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = $118&255;
      $120 = ((($$01122)) + 3|0);
      $121 = HEAP8[$120>>0]|0;
      $122 = $121&255;
      $123 = (($113) + 2)|0;
      $124 = (($123) + ($116))|0;
      $125 = (($124) + ($119))|0;
      $126 = (($125) + ($122))|0;
      $127 = $126 >>> 2;
      $tmp1$0$i = $127;$tmp2$0$i = $127;
     } else {
      $tmp1$0$i = 128;$tmp2$0$i = 128;
     }
    }
   } while(0);
   $128 = $tmp1$0$i&255;
   $129 = $tmp2$0$i&255;
   $scevgep$i = ((($$01024)) + 32|0);
   $130 = ((($$01024)) + 4|0);
   _memset(($$01024|0),($128|0),4)|0;
   $131 = ((($$01024)) + 8|0);
   _memset(($130|0),($129|0),4)|0;
   $132 = ((($$01024)) + 12|0);
   $133 = ((($$01024)) + 16|0);
   _memset(($131|0),($128|0),4)|0;
   _memset(($132|0),($129|0),4)|0;
   $134 = ((($$01024)) + 20|0);
   $135 = ((($$01024)) + 24|0);
   _memset(($133|0),($128|0),4)|0;
   _memset(($134|0),($129|0),4)|0;
   $136 = ((($$01024)) + 28|0);
   _memset(($135|0),($128|0),4)|0;
   _memset(($136|0),($129|0),4)|0;
   if ($25) {
    $137 = ((($$01122)) + 4|0);
    $138 = HEAP8[$137>>0]|0;
    $139 = $138&255;
    $140 = ((($$01122)) + 5|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = ((($$01122)) + 6|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144&255;
    $146 = ((($$01122)) + 7|0);
    $147 = HEAP8[$146>>0]|0;
    $148 = $147&255;
    $149 = (($139) + 2)|0;
    $150 = (($149) + ($142))|0;
    $151 = (($150) + ($145))|0;
    $152 = (($151) + ($148))|0;
    $153 = $152 >>> 2;
    if ($26) {
     $154 = ((($$01220)) + 5|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155&255;
     $157 = ((($$01220)) + 6|0);
     $158 = HEAP8[$157>>0]|0;
     $159 = $158&255;
     $160 = ((($$01220)) + 7|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = $161&255;
     $163 = ((($$01220)) + 8|0);
     $164 = HEAP8[$163>>0]|0;
     $165 = $164&255;
     $166 = (($139) + 4)|0;
     $167 = (($166) + ($142))|0;
     $168 = (($167) + ($145))|0;
     $169 = (($168) + ($148))|0;
     $170 = (($169) + ($156))|0;
     $171 = (($170) + ($159))|0;
     $172 = (($171) + ($162))|0;
     $173 = (($172) + ($165))|0;
     $174 = $173 >>> 3;
     $tmp1$1$i = $153;$tmp2$1$i = $174;
    } else {
     $tmp1$1$i = $153;$tmp2$1$i = $153;
    }
   } else {
    if ($26) {
     $175 = HEAP8[$30>>0]|0;
     $176 = $175&255;
     $177 = ((($$01220)) + 2|0);
     $178 = HEAP8[$177>>0]|0;
     $179 = $178&255;
     $180 = ((($$01220)) + 3|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181&255;
     $183 = ((($$01220)) + 4|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = $184&255;
     $186 = (($176) + 2)|0;
     $187 = (($186) + ($179))|0;
     $188 = (($187) + ($182))|0;
     $189 = (($188) + ($185))|0;
     $190 = $189 >>> 2;
     $191 = ((($$01220)) + 5|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = ((($$01220)) + 6|0);
     $195 = HEAP8[$194>>0]|0;
     $196 = $195&255;
     $197 = ((($$01220)) + 7|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $198&255;
     $200 = ((($$01220)) + 8|0);
     $201 = HEAP8[$200>>0]|0;
     $202 = $201&255;
     $203 = (($193) + 2)|0;
     $204 = (($203) + ($196))|0;
     $205 = (($204) + ($199))|0;
     $206 = (($205) + ($202))|0;
     $207 = $206 >>> 2;
     $tmp1$1$i = $190;$tmp2$1$i = $207;
    } else {
     $tmp1$1$i = 128;$tmp2$1$i = 128;
    }
   }
   $208 = $tmp1$1$i&255;
   $209 = $tmp2$1$i&255;
   $210 = ((($$01024)) + 36|0);
   $211 = ((($$01024)) + 40|0);
   _memset(($scevgep$i|0),($208|0),4)|0;
   _memset(($210|0),($209|0),4)|0;
   $212 = ((($$01024)) + 44|0);
   _memset(($211|0),($208|0),4)|0;
   $213 = ((($$01024)) + 48|0);
   _memset(($212|0),($209|0),4)|0;
   $214 = ((($$01024)) + 52|0);
   _memset(($213|0),($208|0),4)|0;
   $215 = ((($$01024)) + 56|0);
   _memset(($214|0),($209|0),4)|0;
   $216 = ((($$01024)) + 60|0);
   _memset(($215|0),($208|0),4)|0;
   _memset(($216|0),($209|0),4)|0;
   break;
  }
  case 1:  {
   if ($28) {
    $$0 = 1;
    label = 29;
    break L10;
   }
   $217 = HEAP8[$$01122>>0]|0;
   $218 = ((($$01024)) + 1|0);
   HEAP8[$$01024>>0] = $217;
   $219 = HEAP8[$$01122>>0]|0;
   $220 = ((($$01024)) + 2|0);
   HEAP8[$218>>0] = $219;
   $221 = HEAP8[$$01122>>0]|0;
   $222 = ((($$01024)) + 3|0);
   HEAP8[$220>>0] = $221;
   $223 = HEAP8[$$01122>>0]|0;
   $224 = ((($$01024)) + 4|0);
   HEAP8[$222>>0] = $223;
   $225 = HEAP8[$$01122>>0]|0;
   $226 = ((($$01024)) + 5|0);
   HEAP8[$224>>0] = $225;
   $227 = HEAP8[$$01122>>0]|0;
   $228 = ((($$01024)) + 6|0);
   HEAP8[$226>>0] = $227;
   $229 = HEAP8[$$01122>>0]|0;
   $230 = ((($$01024)) + 7|0);
   HEAP8[$228>>0] = $229;
   $231 = ((($$01122)) + 1|0);
   $232 = HEAP8[$$01122>>0]|0;
   $233 = ((($$01024)) + 8|0);
   HEAP8[$230>>0] = $232;
   $234 = HEAP8[$231>>0]|0;
   $235 = ((($$01024)) + 9|0);
   HEAP8[$233>>0] = $234;
   $236 = HEAP8[$231>>0]|0;
   $237 = ((($$01024)) + 10|0);
   HEAP8[$235>>0] = $236;
   $238 = HEAP8[$231>>0]|0;
   $239 = ((($$01024)) + 11|0);
   HEAP8[$237>>0] = $238;
   $240 = HEAP8[$231>>0]|0;
   $241 = ((($$01024)) + 12|0);
   HEAP8[$239>>0] = $240;
   $242 = HEAP8[$231>>0]|0;
   $243 = ((($$01024)) + 13|0);
   HEAP8[$241>>0] = $242;
   $244 = HEAP8[$231>>0]|0;
   $245 = ((($$01024)) + 14|0);
   HEAP8[$243>>0] = $244;
   $246 = HEAP8[$231>>0]|0;
   $247 = ((($$01024)) + 15|0);
   HEAP8[$245>>0] = $246;
   $248 = ((($$01122)) + 2|0);
   $249 = HEAP8[$231>>0]|0;
   $250 = ((($$01024)) + 16|0);
   HEAP8[$247>>0] = $249;
   $251 = HEAP8[$248>>0]|0;
   $252 = ((($$01024)) + 17|0);
   HEAP8[$250>>0] = $251;
   $253 = HEAP8[$248>>0]|0;
   $254 = ((($$01024)) + 18|0);
   HEAP8[$252>>0] = $253;
   $255 = HEAP8[$248>>0]|0;
   $256 = ((($$01024)) + 19|0);
   HEAP8[$254>>0] = $255;
   $257 = HEAP8[$248>>0]|0;
   $258 = ((($$01024)) + 20|0);
   HEAP8[$256>>0] = $257;
   $259 = HEAP8[$248>>0]|0;
   $260 = ((($$01024)) + 21|0);
   HEAP8[$258>>0] = $259;
   $261 = HEAP8[$248>>0]|0;
   $262 = ((($$01024)) + 22|0);
   HEAP8[$260>>0] = $261;
   $263 = HEAP8[$248>>0]|0;
   $264 = ((($$01024)) + 23|0);
   HEAP8[$262>>0] = $263;
   $265 = ((($$01122)) + 3|0);
   $266 = HEAP8[$248>>0]|0;
   $267 = ((($$01024)) + 24|0);
   HEAP8[$264>>0] = $266;
   $268 = HEAP8[$265>>0]|0;
   $269 = ((($$01024)) + 25|0);
   HEAP8[$267>>0] = $268;
   $270 = HEAP8[$265>>0]|0;
   $271 = ((($$01024)) + 26|0);
   HEAP8[$269>>0] = $270;
   $272 = HEAP8[$265>>0]|0;
   $273 = ((($$01024)) + 27|0);
   HEAP8[$271>>0] = $272;
   $274 = HEAP8[$265>>0]|0;
   $275 = ((($$01024)) + 28|0);
   HEAP8[$273>>0] = $274;
   $276 = HEAP8[$265>>0]|0;
   $277 = ((($$01024)) + 29|0);
   HEAP8[$275>>0] = $276;
   $278 = HEAP8[$265>>0]|0;
   $279 = ((($$01024)) + 30|0);
   HEAP8[$277>>0] = $278;
   $280 = HEAP8[$265>>0]|0;
   $281 = ((($$01024)) + 31|0);
   HEAP8[$279>>0] = $280;
   $282 = ((($$01122)) + 4|0);
   $283 = HEAP8[$265>>0]|0;
   $284 = ((($$01024)) + 32|0);
   HEAP8[$281>>0] = $283;
   $285 = HEAP8[$282>>0]|0;
   $286 = ((($$01024)) + 33|0);
   HEAP8[$284>>0] = $285;
   $287 = HEAP8[$282>>0]|0;
   $288 = ((($$01024)) + 34|0);
   HEAP8[$286>>0] = $287;
   $289 = HEAP8[$282>>0]|0;
   $290 = ((($$01024)) + 35|0);
   HEAP8[$288>>0] = $289;
   $291 = HEAP8[$282>>0]|0;
   $292 = ((($$01024)) + 36|0);
   HEAP8[$290>>0] = $291;
   $293 = HEAP8[$282>>0]|0;
   $294 = ((($$01024)) + 37|0);
   HEAP8[$292>>0] = $293;
   $295 = HEAP8[$282>>0]|0;
   $296 = ((($$01024)) + 38|0);
   HEAP8[$294>>0] = $295;
   $297 = HEAP8[$282>>0]|0;
   $298 = ((($$01024)) + 39|0);
   HEAP8[$296>>0] = $297;
   $299 = ((($$01122)) + 5|0);
   $300 = HEAP8[$282>>0]|0;
   $301 = ((($$01024)) + 40|0);
   HEAP8[$298>>0] = $300;
   $302 = HEAP8[$299>>0]|0;
   $303 = ((($$01024)) + 41|0);
   HEAP8[$301>>0] = $302;
   $304 = HEAP8[$299>>0]|0;
   $305 = ((($$01024)) + 42|0);
   HEAP8[$303>>0] = $304;
   $306 = HEAP8[$299>>0]|0;
   $307 = ((($$01024)) + 43|0);
   HEAP8[$305>>0] = $306;
   $308 = HEAP8[$299>>0]|0;
   $309 = ((($$01024)) + 44|0);
   HEAP8[$307>>0] = $308;
   $310 = HEAP8[$299>>0]|0;
   $311 = ((($$01024)) + 45|0);
   HEAP8[$309>>0] = $310;
   $312 = HEAP8[$299>>0]|0;
   $313 = ((($$01024)) + 46|0);
   HEAP8[$311>>0] = $312;
   $314 = HEAP8[$299>>0]|0;
   $315 = ((($$01024)) + 47|0);
   HEAP8[$313>>0] = $314;
   $316 = ((($$01122)) + 6|0);
   $317 = HEAP8[$299>>0]|0;
   $318 = ((($$01024)) + 48|0);
   HEAP8[$315>>0] = $317;
   $319 = HEAP8[$316>>0]|0;
   $320 = ((($$01024)) + 49|0);
   HEAP8[$318>>0] = $319;
   $321 = HEAP8[$316>>0]|0;
   $322 = ((($$01024)) + 50|0);
   HEAP8[$320>>0] = $321;
   $323 = HEAP8[$316>>0]|0;
   $324 = ((($$01024)) + 51|0);
   HEAP8[$322>>0] = $323;
   $325 = HEAP8[$316>>0]|0;
   $326 = ((($$01024)) + 52|0);
   HEAP8[$324>>0] = $325;
   $327 = HEAP8[$316>>0]|0;
   $328 = ((($$01024)) + 53|0);
   HEAP8[$326>>0] = $327;
   $329 = HEAP8[$316>>0]|0;
   $330 = ((($$01024)) + 54|0);
   HEAP8[$328>>0] = $329;
   $331 = HEAP8[$316>>0]|0;
   $332 = ((($$01024)) + 55|0);
   HEAP8[$330>>0] = $331;
   $333 = ((($$01122)) + 7|0);
   $334 = HEAP8[$316>>0]|0;
   $335 = ((($$01024)) + 56|0);
   HEAP8[$332>>0] = $334;
   $336 = HEAP8[$333>>0]|0;
   $337 = ((($$01024)) + 57|0);
   HEAP8[$335>>0] = $336;
   $338 = HEAP8[$333>>0]|0;
   $339 = ((($$01024)) + 58|0);
   HEAP8[$337>>0] = $338;
   $340 = HEAP8[$333>>0]|0;
   $341 = ((($$01024)) + 59|0);
   HEAP8[$339>>0] = $340;
   $342 = HEAP8[$333>>0]|0;
   $343 = ((($$01024)) + 60|0);
   HEAP8[$341>>0] = $342;
   $344 = HEAP8[$333>>0]|0;
   $345 = ((($$01024)) + 61|0);
   HEAP8[$343>>0] = $344;
   $346 = HEAP8[$333>>0]|0;
   $347 = ((($$01024)) + 62|0);
   HEAP8[$345>>0] = $346;
   $348 = HEAP8[$333>>0]|0;
   $349 = ((($$01024)) + 63|0);
   HEAP8[$347>>0] = $348;
   $350 = HEAP8[$333>>0]|0;
   HEAP8[$349>>0] = $350;
   break;
  }
  case 2:  {
   if ($29) {
    $$0 = 1;
    label = 29;
    break L10;
   }
   $351 = ((($$01220)) + 1|0);
   $352 = HEAP8[$351>>0]|0;
   HEAP8[$$01024>>0] = $352;
   $353 = HEAP8[$351>>0]|0;
   $354 = ((($$01024)) + 8|0);
   HEAP8[$354>>0] = $353;
   $355 = HEAP8[$351>>0]|0;
   $356 = ((($$01024)) + 16|0);
   HEAP8[$356>>0] = $355;
   $357 = HEAP8[$351>>0]|0;
   $358 = ((($$01024)) + 24|0);
   HEAP8[$358>>0] = $357;
   $359 = HEAP8[$351>>0]|0;
   $360 = ((($$01024)) + 32|0);
   HEAP8[$360>>0] = $359;
   $361 = HEAP8[$351>>0]|0;
   $362 = ((($$01024)) + 40|0);
   HEAP8[$362>>0] = $361;
   $363 = HEAP8[$351>>0]|0;
   $364 = ((($$01024)) + 48|0);
   HEAP8[$364>>0] = $363;
   $365 = ((($$01220)) + 2|0);
   $366 = HEAP8[$351>>0]|0;
   $367 = ((($$01024)) + 56|0);
   HEAP8[$367>>0] = $366;
   $368 = ((($$01024)) + 1|0);
   $369 = HEAP8[$365>>0]|0;
   HEAP8[$368>>0] = $369;
   $370 = HEAP8[$365>>0]|0;
   $371 = ((($$01024)) + 9|0);
   HEAP8[$371>>0] = $370;
   $372 = HEAP8[$365>>0]|0;
   $373 = ((($$01024)) + 17|0);
   HEAP8[$373>>0] = $372;
   $374 = HEAP8[$365>>0]|0;
   $375 = ((($$01024)) + 25|0);
   HEAP8[$375>>0] = $374;
   $376 = HEAP8[$365>>0]|0;
   $377 = ((($$01024)) + 33|0);
   HEAP8[$377>>0] = $376;
   $378 = HEAP8[$365>>0]|0;
   $379 = ((($$01024)) + 41|0);
   HEAP8[$379>>0] = $378;
   $380 = HEAP8[$365>>0]|0;
   $381 = ((($$01024)) + 49|0);
   HEAP8[$381>>0] = $380;
   $382 = ((($$01220)) + 3|0);
   $383 = HEAP8[$365>>0]|0;
   $384 = ((($$01024)) + 57|0);
   HEAP8[$384>>0] = $383;
   $385 = ((($$01024)) + 2|0);
   $386 = HEAP8[$382>>0]|0;
   HEAP8[$385>>0] = $386;
   $387 = HEAP8[$382>>0]|0;
   $388 = ((($$01024)) + 10|0);
   HEAP8[$388>>0] = $387;
   $389 = HEAP8[$382>>0]|0;
   $390 = ((($$01024)) + 18|0);
   HEAP8[$390>>0] = $389;
   $391 = HEAP8[$382>>0]|0;
   $392 = ((($$01024)) + 26|0);
   HEAP8[$392>>0] = $391;
   $393 = HEAP8[$382>>0]|0;
   $394 = ((($$01024)) + 34|0);
   HEAP8[$394>>0] = $393;
   $395 = HEAP8[$382>>0]|0;
   $396 = ((($$01024)) + 42|0);
   HEAP8[$396>>0] = $395;
   $397 = HEAP8[$382>>0]|0;
   $398 = ((($$01024)) + 50|0);
   HEAP8[$398>>0] = $397;
   $399 = ((($$01220)) + 4|0);
   $400 = HEAP8[$382>>0]|0;
   $401 = ((($$01024)) + 58|0);
   HEAP8[$401>>0] = $400;
   $402 = ((($$01024)) + 3|0);
   $403 = HEAP8[$399>>0]|0;
   HEAP8[$402>>0] = $403;
   $404 = HEAP8[$399>>0]|0;
   $405 = ((($$01024)) + 11|0);
   HEAP8[$405>>0] = $404;
   $406 = HEAP8[$399>>0]|0;
   $407 = ((($$01024)) + 19|0);
   HEAP8[$407>>0] = $406;
   $408 = HEAP8[$399>>0]|0;
   $409 = ((($$01024)) + 27|0);
   HEAP8[$409>>0] = $408;
   $410 = HEAP8[$399>>0]|0;
   $411 = ((($$01024)) + 35|0);
   HEAP8[$411>>0] = $410;
   $412 = HEAP8[$399>>0]|0;
   $413 = ((($$01024)) + 43|0);
   HEAP8[$413>>0] = $412;
   $414 = HEAP8[$399>>0]|0;
   $415 = ((($$01024)) + 51|0);
   HEAP8[$415>>0] = $414;
   $416 = ((($$01220)) + 5|0);
   $417 = HEAP8[$399>>0]|0;
   $418 = ((($$01024)) + 59|0);
   HEAP8[$418>>0] = $417;
   $419 = ((($$01024)) + 4|0);
   $420 = HEAP8[$416>>0]|0;
   HEAP8[$419>>0] = $420;
   $421 = HEAP8[$416>>0]|0;
   $422 = ((($$01024)) + 12|0);
   HEAP8[$422>>0] = $421;
   $423 = HEAP8[$416>>0]|0;
   $424 = ((($$01024)) + 20|0);
   HEAP8[$424>>0] = $423;
   $425 = HEAP8[$416>>0]|0;
   $426 = ((($$01024)) + 28|0);
   HEAP8[$426>>0] = $425;
   $427 = HEAP8[$416>>0]|0;
   $428 = ((($$01024)) + 36|0);
   HEAP8[$428>>0] = $427;
   $429 = HEAP8[$416>>0]|0;
   $430 = ((($$01024)) + 44|0);
   HEAP8[$430>>0] = $429;
   $431 = HEAP8[$416>>0]|0;
   $432 = ((($$01024)) + 52|0);
   HEAP8[$432>>0] = $431;
   $433 = ((($$01220)) + 6|0);
   $434 = HEAP8[$416>>0]|0;
   $435 = ((($$01024)) + 60|0);
   HEAP8[$435>>0] = $434;
   $436 = ((($$01024)) + 5|0);
   $437 = HEAP8[$433>>0]|0;
   HEAP8[$436>>0] = $437;
   $438 = HEAP8[$433>>0]|0;
   $439 = ((($$01024)) + 13|0);
   HEAP8[$439>>0] = $438;
   $440 = HEAP8[$433>>0]|0;
   $441 = ((($$01024)) + 21|0);
   HEAP8[$441>>0] = $440;
   $442 = HEAP8[$433>>0]|0;
   $443 = ((($$01024)) + 29|0);
   HEAP8[$443>>0] = $442;
   $444 = HEAP8[$433>>0]|0;
   $445 = ((($$01024)) + 37|0);
   HEAP8[$445>>0] = $444;
   $446 = HEAP8[$433>>0]|0;
   $447 = ((($$01024)) + 45|0);
   HEAP8[$447>>0] = $446;
   $448 = HEAP8[$433>>0]|0;
   $449 = ((($$01024)) + 53|0);
   HEAP8[$449>>0] = $448;
   $450 = ((($$01220)) + 7|0);
   $451 = HEAP8[$433>>0]|0;
   $452 = ((($$01024)) + 61|0);
   HEAP8[$452>>0] = $451;
   $453 = ((($$01024)) + 6|0);
   $454 = HEAP8[$450>>0]|0;
   HEAP8[$453>>0] = $454;
   $455 = HEAP8[$450>>0]|0;
   $456 = ((($$01024)) + 14|0);
   HEAP8[$456>>0] = $455;
   $457 = HEAP8[$450>>0]|0;
   $458 = ((($$01024)) + 22|0);
   HEAP8[$458>>0] = $457;
   $459 = HEAP8[$450>>0]|0;
   $460 = ((($$01024)) + 30|0);
   HEAP8[$460>>0] = $459;
   $461 = HEAP8[$450>>0]|0;
   $462 = ((($$01024)) + 38|0);
   HEAP8[$462>>0] = $461;
   $463 = HEAP8[$450>>0]|0;
   $464 = ((($$01024)) + 46|0);
   HEAP8[$464>>0] = $463;
   $465 = HEAP8[$450>>0]|0;
   $466 = ((($$01024)) + 54|0);
   HEAP8[$466>>0] = $465;
   $467 = ((($$01220)) + 8|0);
   $468 = HEAP8[$450>>0]|0;
   $469 = ((($$01024)) + 62|0);
   HEAP8[$469>>0] = $468;
   $470 = ((($$01024)) + 7|0);
   $471 = HEAP8[$467>>0]|0;
   HEAP8[$470>>0] = $471;
   $472 = HEAP8[$467>>0]|0;
   $473 = ((($$01024)) + 15|0);
   HEAP8[$473>>0] = $472;
   $474 = HEAP8[$467>>0]|0;
   $475 = ((($$01024)) + 23|0);
   HEAP8[$475>>0] = $474;
   $476 = HEAP8[$467>>0]|0;
   $477 = ((($$01024)) + 31|0);
   HEAP8[$477>>0] = $476;
   $478 = HEAP8[$467>>0]|0;
   $479 = ((($$01024)) + 39|0);
   HEAP8[$479>>0] = $478;
   $480 = HEAP8[$467>>0]|0;
   $481 = ((($$01024)) + 47|0);
   HEAP8[$481>>0] = $480;
   $482 = HEAP8[$467>>0]|0;
   $483 = ((($$01024)) + 55|0);
   HEAP8[$483>>0] = $482;
   $484 = HEAP8[$467>>0]|0;
   $485 = ((($$01024)) + 63|0);
   HEAP8[$485>>0] = $484;
   break;
  }
  default: {
   if (!($or$cond9)) {
    $$0 = 1;
    label = 29;
    break L10;
   }
   $486 = ((($$01220)) + 1|0);
   $487 = ((($$01220)) + 8|0);
   $488 = HEAP8[$487>>0]|0;
   $489 = $488&255;
   $490 = ((($$01122)) + 7|0);
   $491 = HEAP8[$490>>0]|0;
   $492 = $491&255;
   $493 = (($492) + ($489))|0;
   $494 = $493 << 4;
   $495 = ((($$01220)) + 5|0);
   $496 = HEAP8[$495>>0]|0;
   $497 = $496&255;
   $498 = ((($$01220)) + 3|0);
   $499 = HEAP8[$498>>0]|0;
   $500 = $499&255;
   $501 = (($497) - ($500))|0;
   $502 = ((($$01220)) + 6|0);
   $503 = HEAP8[$502>>0]|0;
   $504 = $503&255;
   $505 = ((($$01220)) + 2|0);
   $506 = HEAP8[$505>>0]|0;
   $507 = $506&255;
   $508 = (($504) - ($507))|0;
   $509 = $508 << 1;
   $510 = (($501) + ($509))|0;
   $511 = ((($$01220)) + 7|0);
   $512 = HEAP8[$511>>0]|0;
   $513 = $512&255;
   $514 = HEAP8[$486>>0]|0;
   $515 = $514&255;
   $516 = (($513) - ($515))|0;
   $517 = ($516*3)|0;
   $518 = (($510) + ($517))|0;
   $519 = HEAP8[$$01220>>0]|0;
   $520 = $519&255;
   $521 = (($489) - ($520))|0;
   $522 = $521 << 2;
   $523 = (($518) + ($522))|0;
   $524 = ($523*17)|0;
   $525 = (($524) + 16)|0;
   $526 = $525 >> 5;
   $527 = ((($$01122)) + 4|0);
   $528 = HEAP8[$527>>0]|0;
   $529 = $528&255;
   $530 = ((($$01122)) + 2|0);
   $531 = HEAP8[$530>>0]|0;
   $532 = $531&255;
   $533 = (($529) - ($532))|0;
   $534 = ((($$01122)) + 5|0);
   $535 = HEAP8[$534>>0]|0;
   $536 = $535&255;
   $537 = ((($$01122)) + 1|0);
   $538 = HEAP8[$537>>0]|0;
   $539 = $538&255;
   $540 = (($536) - ($539))|0;
   $541 = $540 << 1;
   $542 = ((($$01122)) + 6|0);
   $543 = HEAP8[$542>>0]|0;
   $544 = $543&255;
   $545 = HEAP8[$$01122>>0]|0;
   $546 = $545&255;
   $547 = (($544) - ($546))|0;
   $548 = ($547*3)|0;
   $549 = (($492) - ($520))|0;
   $550 = $549 << 2;
   $551 = (($533) + ($550))|0;
   $552 = (($551) + ($541))|0;
   $553 = (($552) + ($548))|0;
   $554 = ($553*17)|0;
   $555 = (($554) + 16)|0;
   $556 = $555 >> 5;
   $557 = (($494) + 16)|0;
   $558 = Math_imul($556, -3)|0;
   $559 = (($557) + ($558))|0;
   $560 = Math_imul($526, -3)|0;
   $$012$i = $$01024;$a$010$i = $559;$i$011$i = 8;
   while(1) {
    $561 = (($i$011$i) + -1)|0;
    $562 = (($a$010$i) + ($560))|0;
    $563 = $562 >> 5;
    $$sum$i = (($563) + 512)|0;
    $564 = (60442 + ($$sum$i)|0);
    $565 = HEAP8[$564>>0]|0;
    $566 = ((($$012$i)) + 1|0);
    HEAP8[$$012$i>>0] = $565;
    $567 = (($562) + ($526))|0;
    $568 = $567 >> 5;
    $$sum1$i = (($568) + 512)|0;
    $569 = (60442 + ($$sum1$i)|0);
    $570 = HEAP8[$569>>0]|0;
    $571 = ((($$012$i)) + 2|0);
    HEAP8[$566>>0] = $570;
    $572 = (($567) + ($526))|0;
    $573 = $572 >> 5;
    $$sum2$i = (($573) + 512)|0;
    $574 = (60442 + ($$sum2$i)|0);
    $575 = HEAP8[$574>>0]|0;
    $576 = ((($$012$i)) + 3|0);
    HEAP8[$571>>0] = $575;
    $577 = (($572) + ($526))|0;
    $578 = $577 >> 5;
    $$sum3$i = (($578) + 512)|0;
    $579 = (60442 + ($$sum3$i)|0);
    $580 = HEAP8[$579>>0]|0;
    $581 = ((($$012$i)) + 4|0);
    HEAP8[$576>>0] = $580;
    $582 = (($577) + ($526))|0;
    $583 = $582 >> 5;
    $$sum4$i = (($583) + 512)|0;
    $584 = (60442 + ($$sum4$i)|0);
    $585 = HEAP8[$584>>0]|0;
    $586 = ((($$012$i)) + 5|0);
    HEAP8[$581>>0] = $585;
    $587 = (($582) + ($526))|0;
    $588 = $587 >> 5;
    $$sum5$i = (($588) + 512)|0;
    $589 = (60442 + ($$sum5$i)|0);
    $590 = HEAP8[$589>>0]|0;
    $591 = ((($$012$i)) + 6|0);
    HEAP8[$586>>0] = $590;
    $592 = (($587) + ($526))|0;
    $593 = $592 >> 5;
    $$sum6$i = (($593) + 512)|0;
    $594 = (60442 + ($$sum6$i)|0);
    $595 = HEAP8[$594>>0]|0;
    $596 = ((($$012$i)) + 7|0);
    HEAP8[$591>>0] = $595;
    $597 = (($592) + ($526))|0;
    $598 = $597 >> 5;
    $$sum7$i = (($598) + 512)|0;
    $599 = (60442 + ($$sum7$i)|0);
    $600 = HEAP8[$599>>0]|0;
    $601 = ((($$012$i)) + 8|0);
    HEAP8[$596>>0] = $600;
    $602 = (($a$010$i) + ($556))|0;
    $603 = ($561|0)==(0);
    if ($603) {
     break;
    } else {
     $$012$i = $601;$a$010$i = $602;$i$011$i = $561;
    }
   }
  }
  }
  _h264bsdAddResidual($$01024,$$01319,$block$027);
  $604 = $block$027 | 1;
  $605 = ((($$01319)) + 64|0);
  _h264bsdAddResidual($$01024,$605,$604);
  $606 = (($604) + 1)|0;
  $607 = ((($$01319)) + 128|0);
  _h264bsdAddResidual($$01024,$607,$606);
  $608 = $block$027 | 3;
  $609 = ((($$01319)) + 192|0);
  _h264bsdAddResidual($$01024,$609,$608);
  $610 = (($block$027) + 4)|0;
  $611 = ((($$01024)) + 64|0);
  $612 = ((($$01220)) + 9|0);
  $613 = ((($$01122)) + 8|0);
  $614 = ((($$01319)) + 256|0);
  $615 = (($comp$026) + 1)|0;
  $616 = ($615>>>0)<(2);
  if ($616) {
   $$01024 = $611;$$01122 = $613;$$01220 = $612;$$01319 = $614;$block$027 = $610;$comp$026 = $615;
  } else {
   $$0 = 0;
   label = 29;
   break;
  }
 }
 if ((label|0) == 29) {
  return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdAddResidual($data,$residual,$blockNum) {
 $data = $data|0;
 $residual = $residual|0;
 $blockNum = $blockNum|0;
 var $$sum = 0, $$sum1 = 0, $$sum1$1 = 0, $$sum1$2 = 0, $$sum1$3 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum2$1 = 0, $$sum2$2 = 0, $$sum2$3 = 0, $$sum20 = 0;
 var $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum3 = 0, $$sum3$1 = 0, $$sum3$2 = 0, $$sum3$3 = 0, $$sum4 = 0, $$sum4$1 = 0, $$sum4$2 = 0, $$sum4$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $blockNum$pn = 0, $width$0 = 0, $x$0 = 0, $x$0$in = 0, $y$0 = 0, $y$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$residual>>2]|0;
 $1 = ($0|0)==(16777215);
 if ($1) {
  return;
 }
 $2 = ($blockNum>>>0)<(16);
 $3 = $blockNum & 3;
 $width$0 = $2 ? 16 : 8;
 $blockNum$pn = $2 ? $blockNum : $3;
 $x$0$in = (2824 + ($blockNum$pn<<2)|0);
 $y$0$in = (2888 + ($blockNum$pn<<2)|0);
 $x$0 = HEAP32[$x$0$in>>2]|0;
 $y$0 = HEAP32[$y$0$in>>2]|0;
 $4 = Math_imul($y$0, $width$0)|0;
 $$sum = (($4) + ($x$0))|0;
 $5 = (($data) + ($$sum)|0);
 $6 = ((($residual)) + 4|0);
 $7 = HEAP8[$5>>0]|0;
 $8 = $7&255;
 $9 = ((($residual)) + 8|0);
 $10 = HEAP32[$6>>2]|0;
 $$sum10 = (($$sum) + 1)|0;
 $11 = (($data) + ($$sum10)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (($0) + 512)|0;
 $$sum1 = (($14) + ($8))|0;
 $15 = (60442 + ($$sum1)|0);
 $16 = HEAP8[$15>>0]|0;
 HEAP8[$5>>0] = $16;
 $17 = ((($residual)) + 12|0);
 $18 = HEAP32[$9>>2]|0;
 $$sum11 = (($$sum) + 2)|0;
 $19 = (($data) + ($$sum11)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = (($10) + 512)|0;
 $$sum2 = (($22) + ($13))|0;
 $23 = (60442 + ($$sum2)|0);
 $24 = HEAP8[$23>>0]|0;
 HEAP8[$11>>0] = $24;
 $25 = ((($residual)) + 16|0);
 $26 = HEAP32[$17>>2]|0;
 $$sum12 = (($$sum) + 3)|0;
 $27 = (($data) + ($$sum12)|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (($18) + 512)|0;
 $$sum3 = (($30) + ($21))|0;
 $31 = (60442 + ($$sum3)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = (($26) + 512)|0;
 $$sum4 = (($33) + ($29))|0;
 $34 = (60442 + ($$sum4)|0);
 $35 = HEAP8[$34>>0]|0;
 HEAP8[$19>>0] = $32;
 HEAP8[$27>>0] = $35;
 $$sum13 = (($$sum) + ($width$0))|0;
 $36 = (($data) + ($$sum13)|0);
 $37 = ((($residual)) + 20|0);
 $38 = HEAP32[$25>>2]|0;
 $39 = HEAP8[$36>>0]|0;
 $40 = $39&255;
 $41 = ((($residual)) + 24|0);
 $42 = HEAP32[$37>>2]|0;
 $$sum14 = (($$sum13) + 1)|0;
 $43 = (($data) + ($$sum14)|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = (($38) + 512)|0;
 $$sum1$1 = (($46) + ($40))|0;
 $47 = (60442 + ($$sum1$1)|0);
 $48 = HEAP8[$47>>0]|0;
 HEAP8[$36>>0] = $48;
 $49 = ((($residual)) + 28|0);
 $50 = HEAP32[$41>>2]|0;
 $$sum15 = (($$sum13) + 2)|0;
 $51 = (($data) + ($$sum15)|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = (($42) + 512)|0;
 $$sum2$1 = (($54) + ($45))|0;
 $55 = (60442 + ($$sum2$1)|0);
 $56 = HEAP8[$55>>0]|0;
 HEAP8[$43>>0] = $56;
 $57 = ((($residual)) + 32|0);
 $58 = HEAP32[$49>>2]|0;
 $$sum16 = (($$sum13) + 3)|0;
 $59 = (($data) + ($$sum16)|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = (($50) + 512)|0;
 $$sum3$1 = (($62) + ($53))|0;
 $63 = (60442 + ($$sum3$1)|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = (($58) + 512)|0;
 $$sum4$1 = (($65) + ($61))|0;
 $66 = (60442 + ($$sum4$1)|0);
 $67 = HEAP8[$66>>0]|0;
 HEAP8[$51>>0] = $64;
 HEAP8[$59>>0] = $67;
 $$sum17 = (($$sum13) + ($width$0))|0;
 $68 = (($data) + ($$sum17)|0);
 $69 = ((($residual)) + 36|0);
 $70 = HEAP32[$57>>2]|0;
 $71 = HEAP8[$68>>0]|0;
 $72 = $71&255;
 $73 = ((($residual)) + 40|0);
 $74 = HEAP32[$69>>2]|0;
 $$sum18 = (($$sum17) + 1)|0;
 $75 = (($data) + ($$sum18)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = (($70) + 512)|0;
 $$sum1$2 = (($78) + ($72))|0;
 $79 = (60442 + ($$sum1$2)|0);
 $80 = HEAP8[$79>>0]|0;
 HEAP8[$68>>0] = $80;
 $81 = ((($residual)) + 44|0);
 $82 = HEAP32[$73>>2]|0;
 $$sum19 = (($$sum17) + 2)|0;
 $83 = (($data) + ($$sum19)|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = (($74) + 512)|0;
 $$sum2$2 = (($86) + ($77))|0;
 $87 = (60442 + ($$sum2$2)|0);
 $88 = HEAP8[$87>>0]|0;
 HEAP8[$75>>0] = $88;
 $89 = ((($residual)) + 48|0);
 $90 = HEAP32[$81>>2]|0;
 $$sum20 = (($$sum17) + 3)|0;
 $91 = (($data) + ($$sum20)|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&255;
 $94 = (($82) + 512)|0;
 $$sum3$2 = (($94) + ($85))|0;
 $95 = (60442 + ($$sum3$2)|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = (($90) + 512)|0;
 $$sum4$2 = (($97) + ($93))|0;
 $98 = (60442 + ($$sum4$2)|0);
 $99 = HEAP8[$98>>0]|0;
 HEAP8[$83>>0] = $96;
 HEAP8[$91>>0] = $99;
 $$sum21 = (($$sum17) + ($width$0))|0;
 $100 = (($data) + ($$sum21)|0);
 $101 = ((($residual)) + 52|0);
 $102 = HEAP32[$89>>2]|0;
 $103 = HEAP8[$100>>0]|0;
 $104 = $103&255;
 $105 = ((($residual)) + 56|0);
 $106 = HEAP32[$101>>2]|0;
 $$sum22 = (($$sum21) + 1)|0;
 $107 = (($data) + ($$sum22)|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 $110 = (($102) + 512)|0;
 $$sum1$3 = (($110) + ($104))|0;
 $111 = (60442 + ($$sum1$3)|0);
 $112 = HEAP8[$111>>0]|0;
 HEAP8[$100>>0] = $112;
 $113 = ((($residual)) + 60|0);
 $114 = HEAP32[$105>>2]|0;
 $$sum23 = (($$sum21) + 2)|0;
 $115 = (($data) + ($$sum23)|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = (($106) + 512)|0;
 $$sum2$3 = (($118) + ($109))|0;
 $119 = (60442 + ($$sum2$3)|0);
 $120 = HEAP8[$119>>0]|0;
 HEAP8[$107>>0] = $120;
 $121 = HEAP32[$113>>2]|0;
 $$sum24 = (($$sum21) + 3)|0;
 $122 = (($data) + ($$sum24)|0);
 $123 = HEAP8[$122>>0]|0;
 $124 = $123&255;
 $125 = (($114) + 512)|0;
 $$sum3$3 = (($125) + ($117))|0;
 $126 = (60442 + ($$sum3$3)|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = (($121) + 512)|0;
 $$sum4$3 = (($128) + ($124))|0;
 $129 = (60442 + ($$sum4$3)|0);
 $130 = HEAP8[$129>>0]|0;
 HEAP8[$115>>0] = $127;
 HEAP8[$122>>0] = $130;
 return;
}
function _h264bsdInterPrediction($pMb,$pMbLayer,$dpb,$mbNum,$currImage,$data) {
 $pMb = $pMb|0;
 $pMbLayer = $pMbLayer|0;
 $dpb = $dpb|0;
 $mbNum = $mbNum|0;
 $currImage = $currImage|0;
 $data = $data|0;
 var $$$i = 0, $$0 = 0, $$36$i = 0, $$in$i = 0, $$in$i37 = 0, $$in28$i = 0, $$in46$i = 0, $$mux$i = 0, $$mux$i$i = 0, $$mux$i7 = 0, $$mux11$i$i = 0, $$mux12$i = 0, $$mux31$i = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$a$i$i$i = 0, $b$a$i$i$i$i = 0, $b$a$i$i$i11 = 0, $b$a$i$i$i27 = 0, $b$a$i$i6$i = 0, $b$a$i$i7$i = 0;
 var $b$a$i1$i$i = 0, $b$a$i1$i$i$i = 0, $b$a$i1$i$i16 = 0, $b$a$i1$i$i32 = 0, $b$a$i1$i11$i = 0, $b$a$i1$i12$i = 0, $brmerge$i = 0, $brmerge$i$i = 0, $exitcond = 0, $i$045 = 0, $i$05$i = 0, $j$04$i = 0, $max$0$i$i$i = 0, $max$0$i$i$i$i = 0, $max$0$i$i$i12 = 0, $max$0$i$i$i28 = 0, $max$0$i$i7$i = 0, $max$0$i$i8$i = 0, $max$0$i2$i$i = 0, $max$0$i2$i$i$i = 0;
 var $max$0$i2$i$i17 = 0, $max$0$i2$i$i33 = 0, $max$0$i2$i12$i = 0, $max$0$i2$i13$i = 0, $med$0$i$i$i = 0, $med$0$i$i$i$i = 0, $med$0$i$i$i15 = 0, $med$0$i$i$i31 = 0, $med$0$i$i10$i = 0, $med$0$i$i11$i = 0, $med$0$i5$i$i = 0, $med$0$i5$i$i$i = 0, $med$0$i5$i$i20 = 0, $med$0$i5$i$i36 = 0, $med$0$i5$i15$i = 0, $med$0$i5$i16$i = 0, $min$0$c$i$i$i = 0, $min$0$c$i$i$i$i = 0, $min$0$c$i$i$i14 = 0, $min$0$c$i$i$i30 = 0;
 var $min$0$c$i$i10$i = 0, $min$0$c$i$i9$i = 0, $min$0$c$i4$i$i = 0, $min$0$c$i4$i$i$i = 0, $min$0$c$i4$i$i19 = 0, $min$0$c$i4$i$i35 = 0, $min$0$c$i4$i14$i = 0, $min$0$c$i4$i15$i = 0, $min$0$i$i$i = 0, $min$0$i$i$i$i = 0, $min$0$i$i$i13 = 0, $min$0$i$i$i29 = 0, $min$0$i$i8$i = 0, $min$0$i$i9$i = 0, $min$0$i3$i$i = 0, $min$0$i3$i$i$i = 0, $min$0$i3$i$i18 = 0, $min$0$i3$i$i34 = 0, $min$0$i3$i13$i = 0, $min$0$i3$i14$i = 0;
 var $mv$sroa$0$0$i = 0, $mv$sroa$6$0$i = 0, $or$cond$i = 0, $or$cond$not$i = 0, $or$cond$not$i$i = 0, $or$cond23$i = 0, $or$cond8$i$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $refImage = 0, $sext$i = 0, $sext$i$i = 0, $sext$i24 = 0, $sext$i8 = 0, $sext1$i = 0, $sext1$i$i = 0, $sext1$i25 = 0, $sext1$i9 = 0, $sext10$i = 0, $sext2$i = 0;
 var $sext2$i38 = 0, $sext24$i = 0, $sext25$i = 0, $sext29$i = 0, $sext3$i = 0, $sext3$i40 = 0, $sext42$i = 0, $sext43$i = 0, $sext47$i = 0, $sext9$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $refImage = sp;
 $0 = ((($currImage)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($mbNum>>>0) / ($1>>>0))&-1;
 $3 = Math_imul($2, $1)|0;
 $4 = (($mbNum) - ($3))|0;
 $5 = $2 << 4;
 $6 = $4 << 4;
 $7 = ((($refImage)) + 4|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($currImage)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($refImage)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$pMb>>2]|0;
 L1: do {
  switch ($11|0) {
  case 1: case 0:  {
   $12 = ((($pMbLayer)) + 144|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($pMb)) + 4|0);
   $15 = ((($pMb)) + 200|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if ($17) {
    $48 = 0;$52 = -1;$55 = 0;$58 = 0;
   } else {
    $18 = HEAP32[$14>>2]|0;
    $19 = ((($16)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = HEAP32[$16>>2]|0;
     $23 = ($22>>>0)<(6);
     if ($23) {
      $24 = ((($16)) + 152|0);
      $25 = HEAPU16[$24>>1]|(HEAPU16[$24+2>>1]<<16);
      $26 = ((($16)) + 104|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $25&65535;
      $29 = $25 >>> 16;
      $30 = $29&65535;
      $48 = 1;$52 = $27;$55 = $30;$58 = $28;
     } else {
      $48 = 1;$52 = -1;$55 = 0;$58 = 0;
     }
    } else {
     $48 = 0;$52 = -1;$55 = 0;$58 = 0;
    }
   }
   $31 = ((($pMb)) + 204|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    $50 = 0;$61 = -1;$64 = 0;$67 = 0;
   } else {
    $34 = HEAP32[$14>>2]|0;
    $35 = ((($32)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==($34|0);
    if ($37) {
     $38 = HEAP32[$32>>2]|0;
     $39 = ($38>>>0)<(6);
     if ($39) {
      $40 = ((($32)) + 172|0);
      $41 = HEAPU16[$40>>1]|(HEAPU16[$40+2>>1]<<16);
      $42 = ((($32)) + 108|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = $41&65535;
      $45 = $41 >>> 16;
      $46 = $45&65535;
      $50 = 1;$61 = $43;$64 = $46;$67 = $44;
     } else {
      $50 = 1;$61 = -1;$64 = 0;$67 = 0;
     }
    } else {
     $50 = 0;$61 = -1;$64 = 0;$67 = 0;
    }
   }
   $47 = ($11|0)==(0);
   do {
    if ($47) {
     $49 = ($48|0)==(0);
     $51 = ($50|0)==(0);
     $or$cond$i = $49 | $51;
     if ($or$cond$i) {
      $mv$sroa$0$0$i = 0;$mv$sroa$6$0$i = 0;
     } else {
      $53 = ($52|0)==(0);
      if ($53) {
       $54 = $55&65535;
       $56 = $54 << 16;
       $57 = $58&65535;
       $59 = $56 | $57;
       $60 = ($59|0)==(0);
       if ($60) {
        $mv$sroa$0$0$i = 0;$mv$sroa$6$0$i = 0;
        break;
       }
      }
      $62 = ($61|0)==(0);
      if ($62) {
       $63 = $64&65535;
       $65 = $63 << 16;
       $66 = $67&65535;
       $68 = $65 | $66;
       $69 = ($68|0)==(0);
       if ($69) {
        $mv$sroa$0$0$i = 0;$mv$sroa$6$0$i = 0;
       } else {
        label = 16;
       }
      } else {
       label = 16;
      }
     }
    } else {
     label = 16;
    }
   } while(0);
   if ((label|0) == 16) {
    $70 = ((($pMbLayer)) + 160|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = ((($pMbLayer)) + 162|0);
    $73 = HEAP16[$72>>1]|0;
    $74 = ((($pMb)) + 208|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     label = 20;
    } else {
     $77 = HEAP32[$14>>2]|0;
     $78 = ((($75)) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($77|0);
     if ($80) {
      $81 = HEAP32[$75>>2]|0;
      $82 = ($81>>>0)<(6);
      if ($82) {
       $83 = ((($75)) + 172|0);
       $84 = HEAPU16[$83>>1]|(HEAPU16[$83+2>>1]<<16);
       $85 = ((($75)) + 108|0);
       $86 = HEAP32[$85>>2]|0;
       $105 = $86;$113 = $84;
       label = 25;
      } else {
       $105 = -1;$113 = 0;
       label = 25;
      }
     } else {
      label = 20;
     }
    }
    do {
     if ((label|0) == 20) {
      $87 = ((($pMb)) + 212|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = ($88|0)==(0|0);
      if (!($89)) {
       $90 = HEAP32[$14>>2]|0;
       $91 = ((($88)) + 4|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ($92|0)==($90|0);
       if ($93) {
        $94 = HEAP32[$88>>2]|0;
        $95 = ($94>>>0)<(6);
        if (!($95)) {
         $105 = -1;$113 = 0;
         label = 25;
         break;
        }
        $96 = ((($88)) + 192|0);
        $97 = HEAPU16[$96>>1]|(HEAPU16[$96+2>>1]<<16);
        $98 = ((($88)) + 112|0);
        $99 = HEAP32[$98>>2]|0;
        $105 = $99;$113 = $97;
        label = 25;
        break;
       }
      }
      $or$cond8$not$i = ($50|0)!=(0);
      $100 = ($48|0)==(0);
      $or$cond9$i = $100 | $or$cond8$not$i;
      if ($or$cond9$i) {
       $105 = -1;$113 = 0;
       label = 25;
      } else {
       $132 = $58;$136 = $55;
      }
     }
    } while(0);
    do {
     if ((label|0) == 25) {
      $101 = ($52|0)==($13|0);
      $102 = $101&1;
      $103 = ($61|0)==($13|0);
      $104 = $103&1;
      $106 = ($105|0)==($13|0);
      $107 = $106&1;
      $108 = (($104) + ($102))|0;
      $109 = (($108) + ($107))|0;
      $110 = ($109|0)==(1);
      if (!($110)) {
       $111 = $58 << 16 >> 16;
       $112 = $67 << 16 >> 16;
       $sext10$i = $113 << 16;
       $114 = $sext10$i >> 16;
       $115 = ($67<<16>>16)>($58<<16>>16);
       $116 = ($112|0)<($111|0);
       $b$a$i$i$i = $116 ? $112 : $111;
       $max$0$i$i$i = $115 ? $112 : $111;
       $min$0$i$i$i = $115 ? $111 : $b$a$i$i$i;
       $117 = ($max$0$i$i$i|0)<($114|0);
       $118 = ($min$0$i$i$i|0)>($114|0);
       $min$0$c$i$i$i = $118 ? $min$0$i$i$i : $114;
       $med$0$i$i$i = $117 ? $max$0$i$i$i : $min$0$c$i$i$i;
       $119 = $med$0$i$i$i&65535;
       $120 = $55 << 16 >> 16;
       $121 = $64 << 16 >> 16;
       $122 = $113 >> 16;
       $123 = ($64<<16>>16)>($55<<16>>16);
       $124 = ($121|0)<($120|0);
       $b$a$i1$i$i = $124 ? $121 : $120;
       $max$0$i2$i$i = $123 ? $121 : $120;
       $min$0$i3$i$i = $123 ? $120 : $b$a$i1$i$i;
       $125 = ($max$0$i2$i$i|0)<($122|0);
       $126 = ($min$0$i3$i$i|0)>($122|0);
       $min$0$c$i4$i$i = $126 ? $min$0$i3$i$i : $122;
       $med$0$i5$i$i = $125 ? $max$0$i2$i$i : $min$0$c$i4$i$i;
       $127 = $med$0$i5$i$i&65535;
       $132 = $119;$136 = $127;
       break;
      }
      $brmerge$i = $101 | $103;
      $$mux$i = $101 ? $55 : $64;
      $$mux12$i = $101 ? $58 : $67;
      if ($brmerge$i) {
       $132 = $$mux12$i;$136 = $$mux$i;
      } else {
       $128 = $113&65535;
       $129 = $113 >>> 16;
       $130 = $129&65535;
       $132 = $128;$136 = $130;
      }
     }
    } while(0);
    $131 = $132&65535;
    $133 = $71&65535;
    $134 = (($131) + ($133))|0;
    $135 = $136&65535;
    $137 = $73&65535;
    $138 = (($135) + ($137))|0;
    $sext$i = $134 << 16;
    $139 = $sext$i >> 16;
    $140 = (($139) + 8192)|0;
    $141 = ($140>>>0)>(16383);
    if ($141) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $142 = $138&65535;
    $143 = $134&65535;
    $sext1$i = $138 << 16;
    $144 = $sext1$i >> 16;
    $145 = (($144) + 2048)|0;
    $146 = ($145>>>0)>(4095);
    if ($146) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $mv$sroa$0$0$i = $143;$mv$sroa$6$0$i = $142;
    }
   }
   $147 = (_h264bsdGetRefPicData($dpb,$13)|0);
   $148 = ($147|0)==(0|0);
   if ($148) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $149 = ((($pMb)) + 132|0);
    $150 = ((($pMb)) + 136|0);
    $151 = ((($pMb)) + 140|0);
    $152 = ((($pMb)) + 144|0);
    $153 = ((($pMb)) + 148|0);
    $154 = ((($pMb)) + 152|0);
    $155 = ((($pMb)) + 156|0);
    $156 = ((($pMb)) + 160|0);
    $157 = ((($pMb)) + 164|0);
    $158 = ((($pMb)) + 168|0);
    $159 = ((($pMb)) + 172|0);
    $160 = ((($pMb)) + 176|0);
    $161 = ((($pMb)) + 180|0);
    $162 = ((($pMb)) + 184|0);
    $163 = ((($pMb)) + 188|0);
    $164 = ((($pMb)) + 192|0);
    $165 = ((($pMb)) + 192|0);
    HEAP16[$165>>1] = $mv$sroa$0$0$i;
    $166 = ((($pMb)) + 194|0);
    HEAP16[$166>>1] = $mv$sroa$6$0$i;
    $167 = HEAPU16[$164>>1]|(HEAPU16[$164+2>>1]<<16);
    HEAP16[$163>>1]=$167&65535;HEAP16[$163+2>>1]=$167>>>16;
    HEAP16[$162>>1]=$167&65535;HEAP16[$162+2>>1]=$167>>>16;
    HEAP16[$161>>1]=$167&65535;HEAP16[$161+2>>1]=$167>>>16;
    HEAP16[$160>>1]=$167&65535;HEAP16[$160+2>>1]=$167>>>16;
    HEAP16[$159>>1]=$167&65535;HEAP16[$159+2>>1]=$167>>>16;
    HEAP16[$158>>1]=$167&65535;HEAP16[$158+2>>1]=$167>>>16;
    HEAP16[$157>>1]=$167&65535;HEAP16[$157+2>>1]=$167>>>16;
    HEAP16[$156>>1]=$167&65535;HEAP16[$156+2>>1]=$167>>>16;
    HEAP16[$155>>1]=$167&65535;HEAP16[$155+2>>1]=$167>>>16;
    HEAP16[$154>>1]=$167&65535;HEAP16[$154+2>>1]=$167>>>16;
    HEAP16[$153>>1]=$167&65535;HEAP16[$153+2>>1]=$167>>>16;
    HEAP16[$152>>1]=$167&65535;HEAP16[$152+2>>1]=$167>>>16;
    HEAP16[$151>>1]=$167&65535;HEAP16[$151+2>>1]=$167>>>16;
    HEAP16[$150>>1]=$167&65535;HEAP16[$150+2>>1]=$167>>>16;
    HEAP16[$149>>1]=$167&65535;HEAP16[$149+2>>1]=$167>>>16;
    $168 = ((($pMb)) + 100|0);
    HEAP32[$168>>2] = $13;
    $169 = ((($pMb)) + 104|0);
    HEAP32[$169>>2] = $13;
    $170 = ((($pMb)) + 108|0);
    HEAP32[$170>>2] = $13;
    $171 = ((($pMb)) + 112|0);
    HEAP32[$171>>2] = $13;
    $172 = ((($pMb)) + 116|0);
    HEAP32[$172>>2] = $147;
    $173 = ((($pMb)) + 120|0);
    HEAP32[$173>>2] = $147;
    $174 = ((($pMb)) + 124|0);
    HEAP32[$174>>2] = $147;
    $175 = ((($pMb)) + 128|0);
    HEAP32[$175>>2] = $147;
    $176 = $147;
    HEAP32[$refImage>>2] = $176;
    $177 = ((($pMb)) + 132|0);
    _h264bsdPredictSamples($data,$177,$refImage,$6,$5,0,0,16,16);
    break L1;
   }
   break;
  }
  case 2:  {
   $178 = ((($pMbLayer)) + 160|0);
   $179 = HEAP16[$178>>1]|0;
   $180 = ((($pMbLayer)) + 162|0);
   $181 = HEAP16[$180>>1]|0;
   $182 = ((($pMbLayer)) + 144|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = ((($pMb)) + 4|0);
   $185 = ((($pMb)) + 204|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = ($186|0)==(0|0);
   if ($187) {
    $201 = -1;$245 = 0;$259 = 0;$270 = 0;
   } else {
    $188 = HEAP32[$184>>2]|0;
    $189 = ((($186)) + 4|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ($190|0)==($188|0);
    if ($191) {
     $192 = HEAP32[$186>>2]|0;
     $193 = ($192>>>0)<(6);
     if ($193) {
      $194 = ((($186)) + 172|0);
      $195 = HEAPU16[$194>>1]|(HEAPU16[$194+2>>1]<<16);
      $196 = ((($186)) + 108|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $195&65535;
      $199 = $195 >>> 16;
      $200 = $199&65535;
      $201 = $197;$245 = 1;$259 = $198;$270 = $200;
     } else {
      $201 = -1;$245 = 1;$259 = 0;$270 = 0;
     }
    } else {
     $201 = -1;$245 = 0;$259 = 0;$270 = 0;
    }
   }
   $202 = ($201|0)==($183|0);
   L112: do {
    if ($202) {
     $281 = $259;$286 = $270;
    } else {
     $203 = ((($pMb)) + 200|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     if ($205) {
      $246 = 0;$248 = -1;$257 = 0;$268 = 0;
     } else {
      $206 = HEAP32[$184>>2]|0;
      $207 = ((($204)) + 4|0);
      $208 = HEAP32[$207>>2]|0;
      $209 = ($208|0)==($206|0);
      if ($209) {
       $210 = HEAP32[$204>>2]|0;
       $211 = ($210>>>0)<(6);
       if ($211) {
        $212 = ((($204)) + 152|0);
        $213 = HEAPU16[$212>>1]|(HEAPU16[$212+2>>1]<<16);
        $214 = ((($204)) + 104|0);
        $215 = HEAP32[$214>>2]|0;
        $216 = $213&65535;
        $217 = $213 >>> 16;
        $218 = $217&65535;
        $246 = 1;$248 = $215;$257 = $216;$268 = $218;
       } else {
        $246 = 1;$248 = -1;$257 = 0;$268 = 0;
       }
      } else {
       $246 = 0;$248 = -1;$257 = 0;$268 = 0;
      }
     }
     $219 = ((($pMb)) + 208|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($220|0)==(0|0);
     if ($221) {
      label = 46;
     } else {
      $222 = HEAP32[$184>>2]|0;
      $223 = ((($220)) + 4|0);
      $224 = HEAP32[$223>>2]|0;
      $225 = ($224|0)==($222|0);
      if ($225) {
       $226 = HEAP32[$220>>2]|0;
       $227 = ($226>>>0)<(6);
       if ($227) {
        $228 = ((($220)) + 172|0);
        $229 = HEAPU16[$228>>1]|(HEAPU16[$228+2>>1]<<16);
        $230 = ((($220)) + 108|0);
        $231 = HEAP32[$230>>2]|0;
        $251 = $231;$260 = $229;
       } else {
        $251 = -1;$260 = 0;
       }
      } else {
       label = 46;
      }
     }
     do {
      if ((label|0) == 46) {
       $232 = ((($pMb)) + 212|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = ($233|0)==(0|0);
       if (!($234)) {
        $235 = HEAP32[$184>>2]|0;
        $236 = ((($233)) + 4|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = ($237|0)==($235|0);
        if ($238) {
         $239 = HEAP32[$233>>2]|0;
         $240 = ($239>>>0)<(6);
         if (!($240)) {
          $251 = -1;$260 = 0;
          break;
         }
         $241 = ((($233)) + 192|0);
         $242 = HEAPU16[$241>>1]|(HEAPU16[$241+2>>1]<<16);
         $243 = ((($233)) + 112|0);
         $244 = HEAP32[$243>>2]|0;
         $251 = $244;$260 = $242;
         break;
        }
       }
       $or$cond$not$i = ($245|0)!=(0);
       $247 = ($246|0)==(0);
       $or$cond23$i = $or$cond$not$i | $247;
       if ($or$cond23$i) {
        $251 = -1;$260 = 0;
       } else {
        $281 = $257;$286 = $268;
        break L112;
       }
      }
     } while(0);
     $249 = ($248|0)==($183|0);
     $250 = $249&1;
     $252 = ($251|0)==($183|0);
     $253 = $252&1;
     $254 = (($253) + ($250))|0;
     $255 = ($254|0)==(1);
     if (!($255)) {
      $256 = $257 << 16 >> 16;
      $258 = $259 << 16 >> 16;
      $sext29$i = $260 << 16;
      $261 = $sext29$i >> 16;
      $262 = ($259<<16>>16)>($257<<16>>16);
      $263 = ($258|0)<($256|0);
      $b$a$i$i6$i = $263 ? $258 : $256;
      $max$0$i$i7$i = $262 ? $258 : $256;
      $min$0$i$i8$i = $262 ? $256 : $b$a$i$i6$i;
      $264 = ($max$0$i$i7$i|0)<($261|0);
      $265 = ($min$0$i$i8$i|0)>($261|0);
      $min$0$c$i$i9$i = $265 ? $min$0$i$i8$i : $261;
      $med$0$i$i10$i = $264 ? $max$0$i$i7$i : $min$0$c$i$i9$i;
      $266 = $med$0$i$i10$i&65535;
      $267 = $268 << 16 >> 16;
      $269 = $270 << 16 >> 16;
      $271 = $260 >> 16;
      $272 = ($270<<16>>16)>($268<<16>>16);
      $273 = ($269|0)<($267|0);
      $b$a$i1$i11$i = $273 ? $269 : $267;
      $max$0$i2$i12$i = $272 ? $269 : $267;
      $min$0$i3$i13$i = $272 ? $267 : $b$a$i1$i11$i;
      $274 = ($max$0$i2$i12$i|0)<($271|0);
      $275 = ($min$0$i3$i13$i|0)>($271|0);
      $min$0$c$i4$i14$i = $275 ? $min$0$i3$i13$i : $271;
      $med$0$i5$i15$i = $274 ? $max$0$i2$i12$i : $min$0$c$i4$i14$i;
      $276 = $med$0$i5$i15$i&65535;
      $281 = $266;$286 = $276;
      break;
     }
     $$mux$i7 = $249 ? $268 : $270;
     $$mux31$i = $249 ? $257 : $259;
     if ($249) {
      $281 = $$mux31$i;$286 = $$mux$i7;
     } else {
      $277 = $260&65535;
      $278 = $260 >>> 16;
      $279 = $278&65535;
      $281 = $277;$286 = $279;
     }
    }
   } while(0);
   $280 = $281&65535;
   $282 = $179&65535;
   $283 = (($280) + ($282))|0;
   $284 = $283&65535;
   $285 = $286&65535;
   $287 = $181&65535;
   $288 = (($285) + ($287))|0;
   $289 = $288&65535;
   $sext$i8 = $283 << 16;
   $290 = $sext$i8 >> 16;
   $291 = (($290) + 8192)|0;
   $292 = ($291>>>0)>(16383);
   if ($292) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $sext1$i9 = $288 << 16;
   $293 = $sext1$i9 >> 16;
   $294 = (($293) + 2048)|0;
   $295 = ($294>>>0)>(4095);
   if ($295) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $296 = (_h264bsdGetRefPicData($dpb,$183)|0);
   $297 = ($296|0)==(0|0);
   if ($297) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $298 = ((($pMb)) + 132|0);
   $299 = ((($pMb)) + 136|0);
   $300 = ((($pMb)) + 140|0);
   $301 = ((($pMb)) + 144|0);
   $302 = ((($pMb)) + 148|0);
   $303 = ((($pMb)) + 152|0);
   $304 = ((($pMb)) + 156|0);
   $305 = ((($pMb)) + 160|0);
   $306 = ((($pMb)) + 160|0);
   HEAP16[$306>>1] = $284;
   $307 = ((($pMb)) + 162|0);
   HEAP16[$307>>1] = $289;
   $308 = HEAPU16[$305>>1]|(HEAPU16[$305+2>>1]<<16);
   HEAP16[$304>>1]=$308&65535;HEAP16[$304+2>>1]=$308>>>16;
   HEAP16[$303>>1]=$308&65535;HEAP16[$303+2>>1]=$308>>>16;
   HEAP16[$302>>1]=$308&65535;HEAP16[$302+2>>1]=$308>>>16;
   HEAP16[$301>>1]=$308&65535;HEAP16[$301+2>>1]=$308>>>16;
   HEAP16[$300>>1]=$308&65535;HEAP16[$300+2>>1]=$308>>>16;
   HEAP16[$299>>1]=$308&65535;HEAP16[$299+2>>1]=$308>>>16;
   HEAP16[$298>>1]=$308&65535;HEAP16[$298+2>>1]=$308>>>16;
   $309 = ((($pMb)) + 100|0);
   HEAP32[$309>>2] = $183;
   $310 = ((($pMb)) + 104|0);
   HEAP32[$310>>2] = $183;
   $311 = ((($pMb)) + 116|0);
   HEAP32[$311>>2] = $296;
   $312 = ((($pMb)) + 120|0);
   HEAP32[$312>>2] = $296;
   $313 = ((($pMbLayer)) + 164|0);
   $314 = HEAP16[$313>>1]|0;
   $315 = ((($pMbLayer)) + 166|0);
   $316 = HEAP16[$315>>1]|0;
   $317 = ((($pMbLayer)) + 148|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = ((($pMb)) + 200|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = ($320|0)==(0|0);
   if ($321) {
    $335 = -1;$338 = 0;$341 = 0;
   } else {
    $322 = HEAP32[$184>>2]|0;
    $323 = ((($320)) + 4|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = ($324|0)==($322|0);
    if ($325) {
     $326 = HEAP32[$320>>2]|0;
     $327 = ($326>>>0)<(6);
     if ($327) {
      $328 = ((($320)) + 184|0);
      $329 = HEAPU16[$328>>1]|(HEAPU16[$328+2>>1]<<16);
      $330 = ((($320)) + 112|0);
      $331 = HEAP32[$330>>2]|0;
      $332 = $329&65535;
      $333 = $329 >>> 16;
      $334 = $333&65535;
      $335 = $331;$338 = $334;$341 = $332;
     } else {
      $335 = -1;$338 = 0;$341 = 0;
     }
    } else {
     $335 = -1;$338 = 0;$341 = 0;
    }
   }
   $336 = ($335|0)==($318|0);
   do {
    if ($336) {
     $337 = $338&65535;
     $339 = $337 << 16;
     $340 = $341&65535;
     $342 = $339 | $340;
     $$in$i = $337;$$in28$i = $342;
    } else {
     $343 = $308&65535;
     $344 = $308 >>> 16;
     $345 = $344&65535;
     if ($321) {
      $358 = -1;$365 = 0;
     } else {
      $346 = HEAP32[$184>>2]|0;
      $347 = ((($320)) + 4|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==($346|0);
      if ($349) {
       $350 = HEAP32[$320>>2]|0;
       $351 = ($350>>>0)<(6);
       if ($351) {
        $352 = ((($320)) + 160|0);
        $353 = HEAPU16[$352>>1]|(HEAPU16[$352+2>>1]<<16);
        $354 = ((($320)) + 104|0);
        $355 = HEAP32[$354>>2]|0;
        $358 = $355;$365 = $353;
       } else {
        $358 = -1;$365 = 0;
       }
      } else {
       $358 = -1;$365 = 0;
      }
     }
     $356 = ($183|0)==($318|0);
     $357 = $356&1;
     $359 = ($358|0)==($318|0);
     $360 = $359&1;
     $361 = (($360) + ($357))|0;
     $362 = ($361|0)==(1);
     if ($362) {
      $378 = $365 >>> 16;
      $$$i = $356 ? $344 : $378;
      $$36$i = $356 ? $308 : $365;
      $$in$i = $$$i;$$in28$i = $$36$i;
      break;
     } else {
      $363 = $341 << 16 >> 16;
      $sext24$i = $308 << 16;
      $364 = $sext24$i >> 16;
      $sext25$i = $365 << 16;
      $366 = $sext25$i >> 16;
      $367 = ($343<<16>>16)>($341<<16>>16);
      $368 = ($364|0)<($363|0);
      $b$a$i$i$i11 = $368 ? $364 : $363;
      $max$0$i$i$i12 = $367 ? $364 : $363;
      $min$0$i$i$i13 = $367 ? $363 : $b$a$i$i$i11;
      $369 = ($max$0$i$i$i12|0)<($366|0);
      $370 = ($min$0$i$i$i13|0)>($366|0);
      $min$0$c$i$i$i14 = $370 ? $min$0$i$i$i13 : $366;
      $med$0$i$i$i15 = $369 ? $max$0$i$i$i12 : $min$0$c$i$i$i14;
      $371 = $338 << 16 >> 16;
      $372 = $308 >> 16;
      $373 = $365 >> 16;
      $374 = ($345<<16>>16)>($338<<16>>16);
      $375 = ($372|0)<($371|0);
      $b$a$i1$i$i16 = $375 ? $372 : $371;
      $max$0$i2$i$i17 = $374 ? $372 : $371;
      $min$0$i3$i$i18 = $374 ? $371 : $b$a$i1$i$i16;
      $376 = ($max$0$i2$i$i17|0)<($373|0);
      $377 = ($min$0$i3$i$i18|0)>($373|0);
      $min$0$c$i4$i$i19 = $377 ? $min$0$i3$i$i18 : $373;
      $med$0$i5$i$i20 = $376 ? $max$0$i2$i$i17 : $min$0$c$i4$i$i19;
      $$in$i = $med$0$i5$i$i20;$$in28$i = $med$0$i$i$i15;
      break;
     }
    }
   } while(0);
   $379 = $$in28$i & 65535;
   $380 = $314&65535;
   $381 = (($379) + ($380))|0;
   $382 = $381&65535;
   $383 = $$in$i & 65535;
   $384 = $316&65535;
   $385 = (($383) + ($384))|0;
   $386 = $385&65535;
   $sext2$i = $381 << 16;
   $387 = $sext2$i >> 16;
   $388 = (($387) + 8192)|0;
   $389 = ($388>>>0)>(16383);
   if ($389) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $sext3$i = $385 << 16;
   $390 = $sext3$i >> 16;
   $391 = (($390) + 2048)|0;
   $392 = ($391>>>0)>(4095);
   if ($392) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $393 = (_h264bsdGetRefPicData($dpb,$318)|0);
   $394 = ($393|0)==(0|0);
   if ($394) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $395 = ((($pMb)) + 164|0);
    $396 = ((($pMb)) + 168|0);
    $397 = ((($pMb)) + 172|0);
    $398 = ((($pMb)) + 176|0);
    $399 = ((($pMb)) + 180|0);
    $400 = ((($pMb)) + 184|0);
    $401 = ((($pMb)) + 188|0);
    $402 = ((($pMb)) + 192|0);
    $403 = ((($pMb)) + 192|0);
    HEAP16[$403>>1] = $382;
    $404 = ((($pMb)) + 194|0);
    HEAP16[$404>>1] = $386;
    $405 = HEAPU16[$402>>1]|(HEAPU16[$402+2>>1]<<16);
    HEAP16[$401>>1]=$405&65535;HEAP16[$401+2>>1]=$405>>>16;
    HEAP16[$400>>1]=$405&65535;HEAP16[$400+2>>1]=$405>>>16;
    HEAP16[$399>>1]=$405&65535;HEAP16[$399+2>>1]=$405>>>16;
    HEAP16[$398>>1]=$405&65535;HEAP16[$398+2>>1]=$405>>>16;
    HEAP16[$397>>1]=$405&65535;HEAP16[$397+2>>1]=$405>>>16;
    HEAP16[$396>>1]=$405&65535;HEAP16[$396+2>>1]=$405>>>16;
    HEAP16[$395>>1]=$405&65535;HEAP16[$395+2>>1]=$405>>>16;
    $406 = ((($pMb)) + 108|0);
    HEAP32[$406>>2] = $318;
    $407 = ((($pMb)) + 112|0);
    HEAP32[$407>>2] = $318;
    $408 = ((($pMb)) + 124|0);
    HEAP32[$408>>2] = $393;
    $409 = ((($pMb)) + 128|0);
    HEAP32[$409>>2] = $393;
    $410 = ((($pMb)) + 116|0);
    $411 = HEAP32[$410>>2]|0;
    HEAP32[$refImage>>2] = $411;
    $412 = ((($pMb)) + 132|0);
    _h264bsdPredictSamples($data,$412,$refImage,$6,$5,0,0,16,8);
    $413 = HEAP32[$408>>2]|0;
    HEAP32[$refImage>>2] = $413;
    _h264bsdPredictSamples($data,$395,$refImage,$6,$5,0,8,16,8);
    break L1;
   }
   break;
  }
  case 3:  {
   $414 = ((($pMbLayer)) + 160|0);
   $415 = HEAP16[$414>>1]|0;
   $416 = ((($pMbLayer)) + 162|0);
   $417 = HEAP16[$416>>1]|0;
   $418 = ((($pMbLayer)) + 144|0);
   $419 = HEAP32[$418>>2]|0;
   $420 = ((($pMb)) + 4|0);
   $421 = ((($pMb)) + 200|0);
   $422 = HEAP32[$421>>2]|0;
   $423 = ($422|0)==(0|0);
   if ($423) {
    $437 = -1;$472 = 0;$483 = 0;$494 = 0;
   } else {
    $424 = HEAP32[$420>>2]|0;
    $425 = ((($422)) + 4|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = ($426|0)==($424|0);
    if ($427) {
     $428 = HEAP32[$422>>2]|0;
     $429 = ($428>>>0)<(6);
     if ($429) {
      $430 = ((($422)) + 152|0);
      $431 = HEAPU16[$430>>1]|(HEAPU16[$430+2>>1]<<16);
      $432 = ((($422)) + 104|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = $431&65535;
      $435 = $431 >>> 16;
      $436 = $435&65535;
      $437 = $433;$472 = 1;$483 = $434;$494 = $436;
     } else {
      $437 = -1;$472 = 1;$483 = 0;$494 = 0;
     }
    } else {
     $437 = -1;$472 = 0;$483 = 0;$494 = 0;
    }
   }
   $438 = ($437|0)==($419|0);
   L177: do {
    if ($438) {
     $507 = $483;$512 = $494;
    } else {
     $439 = ((($pMb)) + 204|0);
     $440 = HEAP32[$439>>2]|0;
     $441 = ($440|0)==(0|0);
     if ($441) {
      label = 84;
     } else {
      $442 = HEAP32[$420>>2]|0;
      $443 = ((($440)) + 4|0);
      $444 = HEAP32[$443>>2]|0;
      $445 = ($444|0)==($442|0);
      if ($445) {
       $446 = HEAP32[$440>>2]|0;
       $447 = ($446>>>0)<(6);
       if ($447) {
        $448 = ((($440)) + 172|0);
        $449 = HEAPU16[$448>>1]|(HEAPU16[$448+2>>1]<<16);
        $450 = $449 >>> 16;
        $451 = $450&65535;
        $452 = $449&65535;
        $453 = ((($440)) + 108|0);
        $454 = HEAP32[$453>>2]|0;
        $455 = ((($440)) + 188|0);
        $456 = HEAPU16[$455>>1]|(HEAPU16[$455+2>>1]<<16);
        $457 = ((($440)) + 112|0);
        $458 = HEAP32[$457>>2]|0;
        $474 = $454;$477 = $458;$485 = $452;$486 = $456;$496 = $451;
       } else {
        $474 = -1;$477 = -1;$485 = 0;$486 = 0;$496 = 0;
       }
      } else {
       label = 84;
      }
     }
     do {
      if ((label|0) == 84) {
       $459 = ((($pMb)) + 212|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = ($460|0)==(0|0);
       if (!($461)) {
        $462 = HEAP32[$420>>2]|0;
        $463 = ((($460)) + 4|0);
        $464 = HEAP32[$463>>2]|0;
        $465 = ($464|0)==($462|0);
        if ($465) {
         $466 = HEAP32[$460>>2]|0;
         $467 = ($466>>>0)<(6);
         if (!($467)) {
          $474 = -1;$477 = -1;$485 = 0;$486 = 0;$496 = 0;
          break;
         }
         $468 = ((($460)) + 192|0);
         $469 = HEAPU16[$468>>1]|(HEAPU16[$468+2>>1]<<16);
         $470 = ((($460)) + 112|0);
         $471 = HEAP32[$470>>2]|0;
         $474 = -1;$477 = $471;$485 = 0;$486 = $469;$496 = 0;
         break;
        }
       }
       $473 = ($472|0)==(0);
       if ($473) {
        $474 = -1;$477 = -1;$485 = 0;$486 = 0;$496 = 0;
       } else {
        $507 = $483;$512 = $494;
        break L177;
       }
      }
     } while(0);
     $475 = ($474|0)==($419|0);
     $476 = $475&1;
     $478 = ($477|0)==($419|0);
     $479 = $478&1;
     $480 = (($476) + ($479))|0;
     $481 = ($480|0)==(1);
     if (!($481)) {
      $482 = $483 << 16 >> 16;
      $484 = $485 << 16 >> 16;
      $sext47$i = $486 << 16;
      $487 = $sext47$i >> 16;
      $488 = ($485<<16>>16)>($483<<16>>16);
      $489 = ($484|0)<($482|0);
      $b$a$i$i7$i = $489 ? $484 : $482;
      $max$0$i$i8$i = $488 ? $484 : $482;
      $min$0$i$i9$i = $488 ? $482 : $b$a$i$i7$i;
      $490 = ($max$0$i$i8$i|0)<($487|0);
      $491 = ($min$0$i$i9$i|0)>($487|0);
      $min$0$c$i$i10$i = $491 ? $min$0$i$i9$i : $487;
      $med$0$i$i11$i = $490 ? $max$0$i$i8$i : $min$0$c$i$i10$i;
      $492 = $med$0$i$i11$i&65535;
      $493 = $494 << 16 >> 16;
      $495 = $496 << 16 >> 16;
      $497 = $486 >> 16;
      $498 = ($496<<16>>16)>($494<<16>>16);
      $499 = ($495|0)<($493|0);
      $b$a$i1$i12$i = $499 ? $495 : $493;
      $max$0$i2$i13$i = $498 ? $495 : $493;
      $min$0$i3$i14$i = $498 ? $493 : $b$a$i1$i12$i;
      $500 = ($max$0$i2$i13$i|0)<($497|0);
      $501 = ($min$0$i3$i14$i|0)>($497|0);
      $min$0$c$i4$i15$i = $501 ? $min$0$i3$i14$i : $497;
      $med$0$i5$i16$i = $500 ? $max$0$i2$i13$i : $min$0$c$i4$i15$i;
      $502 = $med$0$i5$i16$i&65535;
      $507 = $492;$512 = $502;
      break;
     }
     if ($475) {
      $507 = $485;$512 = $496;
     } else {
      $503 = $486&65535;
      $504 = $486 >>> 16;
      $505 = $504&65535;
      $507 = $503;$512 = $505;
     }
    }
   } while(0);
   $506 = $507&65535;
   $508 = $415&65535;
   $509 = (($506) + ($508))|0;
   $510 = $509&65535;
   $511 = $512&65535;
   $513 = $417&65535;
   $514 = (($511) + ($513))|0;
   $515 = $514&65535;
   $sext$i24 = $509 << 16;
   $516 = $sext$i24 >> 16;
   $517 = (($516) + 8192)|0;
   $518 = ($517>>>0)>(16383);
   if ($518) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $sext1$i25 = $514 << 16;
   $519 = $sext1$i25 >> 16;
   $520 = (($519) + 2048)|0;
   $521 = ($520>>>0)>(4095);
   if ($521) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $522 = (_h264bsdGetRefPicData($dpb,$419)|0);
   $523 = ($522|0)==(0|0);
   if ($523) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $524 = ((($pMb)) + 132|0);
   $525 = ((($pMb)) + 136|0);
   $526 = ((($pMb)) + 140|0);
   $527 = ((($pMb)) + 144|0);
   $528 = ((($pMb)) + 164|0);
   $529 = ((($pMb)) + 168|0);
   $530 = ((($pMb)) + 172|0);
   $531 = ((($pMb)) + 176|0);
   $532 = ((($pMb)) + 176|0);
   HEAP16[$532>>1] = $510;
   $533 = ((($pMb)) + 178|0);
   HEAP16[$533>>1] = $515;
   $534 = HEAPU16[$531>>1]|(HEAPU16[$531+2>>1]<<16);
   HEAP16[$530>>1]=$534&65535;HEAP16[$530+2>>1]=$534>>>16;
   HEAP16[$529>>1]=$534&65535;HEAP16[$529+2>>1]=$534>>>16;
   HEAP16[$528>>1]=$534&65535;HEAP16[$528+2>>1]=$534>>>16;
   HEAP16[$527>>1]=$534&65535;HEAP16[$527+2>>1]=$534>>>16;
   HEAP16[$526>>1]=$534&65535;HEAP16[$526+2>>1]=$534>>>16;
   HEAP16[$525>>1]=$534&65535;HEAP16[$525+2>>1]=$534>>>16;
   HEAP16[$524>>1]=$534&65535;HEAP16[$524+2>>1]=$534>>>16;
   $535 = ((($pMb)) + 100|0);
   HEAP32[$535>>2] = $419;
   $536 = ((($pMb)) + 108|0);
   HEAP32[$536>>2] = $419;
   $537 = ((($pMb)) + 116|0);
   HEAP32[$537>>2] = $522;
   $538 = ((($pMb)) + 124|0);
   HEAP32[$538>>2] = $522;
   $539 = ((($pMbLayer)) + 164|0);
   $540 = HEAP16[$539>>1]|0;
   $541 = ((($pMbLayer)) + 166|0);
   $542 = HEAP16[$541>>1]|0;
   $543 = ((($pMbLayer)) + 148|0);
   $544 = HEAP32[$543>>2]|0;
   $545 = ((($pMb)) + 208|0);
   $546 = HEAP32[$545>>2]|0;
   $547 = ($546|0)==(0|0);
   if ($547) {
    label = 100;
   } else {
    $548 = HEAP32[$420>>2]|0;
    $549 = ((($546)) + 4|0);
    $550 = HEAP32[$549>>2]|0;
    $551 = ($550|0)==($548|0);
    if ($551) {
     $552 = HEAP32[$546>>2]|0;
     $553 = ($552>>>0)<(6);
     if ($553) {
      $554 = ((($546)) + 172|0);
      $555 = HEAPU16[$554>>1]|(HEAPU16[$554+2>>1]<<16);
      $556 = ((($546)) + 108|0);
      $557 = HEAP32[$556>>2]|0;
      $571 = $557;$574 = $555;$594 = 1;
     } else {
      $571 = -1;$574 = 0;$594 = 1;
     }
    } else {
     label = 100;
    }
   }
   if ((label|0) == 100) {
    $558 = ((($pMb)) + 204|0);
    $559 = HEAP32[$558>>2]|0;
    $560 = ($559|0)==(0|0);
    if ($560) {
     $571 = -1;$574 = 0;$594 = 0;
    } else {
     $561 = HEAP32[$420>>2]|0;
     $562 = ((($559)) + 4|0);
     $563 = HEAP32[$562>>2]|0;
     $564 = ($563|0)==($561|0);
     if ($564) {
      $565 = HEAP32[$559>>2]|0;
      $566 = ($565>>>0)<(6);
      if ($566) {
       $567 = ((($559)) + 176|0);
       $568 = HEAPU16[$567>>1]|(HEAPU16[$567+2>>1]<<16);
       $569 = ((($559)) + 108|0);
       $570 = HEAP32[$569>>2]|0;
       $571 = $570;$574 = $568;$594 = 1;
      } else {
       $571 = -1;$574 = 0;$594 = 1;
      }
     } else {
      $571 = -1;$574 = 0;$594 = 0;
     }
    }
   }
   $572 = ($571|0)==($544|0);
   do {
    if ($572) {
     $573 = $574 >>> 16;
     $$in$i37 = $573;$$in46$i = $574;
    } else {
     $575 = $534&65535;
     $576 = $534 >>> 16;
     $577 = $576&65535;
     $578 = ((($pMb)) + 204|0);
     $579 = HEAP32[$578>>2]|0;
     $580 = ($579|0)==(0|0);
     if ($580) {
      label = 110;
     } else {
      $581 = HEAP32[$420>>2]|0;
      $582 = ((($579)) + 4|0);
      $583 = HEAP32[$582>>2]|0;
      $584 = ($583|0)==($581|0);
      if ($584) {
       $585 = HEAP32[$579>>2]|0;
       $586 = ($585>>>0)<(6);
       if ($586) {
        $587 = ((($579)) + 188|0);
        $588 = HEAPU16[$587>>1]|(HEAPU16[$587+2>>1]<<16);
        $589 = ((($579)) + 112|0);
        $590 = HEAP32[$589>>2]|0;
        $591 = $588&65535;
        $592 = $588 >>> 16;
        $593 = $592&65535;
        $598 = $590;$605 = $591;$613 = $593;
       } else {
        $598 = -1;$605 = 0;$613 = 0;
       }
      } else {
       label = 110;
      }
     }
     if ((label|0) == 110) {
      $595 = ($594|0)==(0);
      if ($595) {
       $$in$i37 = $576;$$in46$i = $534;
       break;
      } else {
       $598 = -1;$605 = 0;$613 = 0;
      }
     }
     $596 = ($419|0)==($544|0);
     $597 = $596&1;
     $599 = ($598|0)==($544|0);
     $600 = $599&1;
     $601 = (($600) + ($597))|0;
     $602 = ($601|0)==(1);
     if (!($602)) {
      $sext42$i = $534 << 16;
      $603 = $sext42$i >> 16;
      $604 = $605 << 16 >> 16;
      $sext43$i = $574 << 16;
      $606 = $sext43$i >> 16;
      $607 = ($605<<16>>16)>($575<<16>>16);
      $608 = ($604|0)<($603|0);
      $b$a$i$i$i27 = $608 ? $604 : $603;
      $max$0$i$i$i28 = $607 ? $604 : $603;
      $min$0$i$i$i29 = $607 ? $603 : $b$a$i$i$i27;
      $609 = ($max$0$i$i$i28|0)<($606|0);
      $610 = ($min$0$i$i$i29|0)>($606|0);
      $min$0$c$i$i$i30 = $610 ? $min$0$i$i$i29 : $606;
      $med$0$i$i$i31 = $609 ? $max$0$i$i$i28 : $min$0$c$i$i$i30;
      $611 = $534 >> 16;
      $612 = $613 << 16 >> 16;
      $614 = $574 >> 16;
      $615 = ($613<<16>>16)>($577<<16>>16);
      $616 = ($612|0)<($611|0);
      $b$a$i1$i$i32 = $616 ? $612 : $611;
      $max$0$i2$i$i33 = $615 ? $612 : $611;
      $min$0$i3$i$i34 = $615 ? $611 : $b$a$i1$i$i32;
      $617 = ($max$0$i2$i$i33|0)<($614|0);
      $618 = ($min$0$i3$i$i34|0)>($614|0);
      $min$0$c$i4$i$i35 = $618 ? $min$0$i3$i$i34 : $614;
      $med$0$i5$i$i36 = $617 ? $max$0$i2$i$i33 : $min$0$c$i4$i$i35;
      $$in$i37 = $med$0$i5$i$i36;$$in46$i = $med$0$i$i$i31;
      break;
     }
     if ($596) {
      $$in$i37 = $576;$$in46$i = $534;
     } else {
      if ($599) {
       $619 = $613&65535;
       $620 = $619 << 16;
       $621 = $605&65535;
       $622 = $620 | $621;
       $$in$i37 = $619;$$in46$i = $622;
       break;
      } else {
       $623 = $574 >>> 16;
       $$in$i37 = $623;$$in46$i = $574;
       break;
      }
     }
    }
   } while(0);
   $624 = $$in46$i & 65535;
   $625 = $540&65535;
   $626 = (($624) + ($625))|0;
   $627 = $626&65535;
   $628 = $$in$i37 & 65535;
   $629 = $542&65535;
   $630 = (($628) + ($629))|0;
   $631 = $630&65535;
   $sext2$i38 = $626 << 16;
   $632 = $sext2$i38 >> 16;
   $633 = (($632) + 8192)|0;
   $634 = ($633>>>0)>(16383);
   if ($634) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $sext3$i40 = $630 << 16;
   $635 = $sext3$i40 >> 16;
   $636 = (($635) + 2048)|0;
   $637 = ($636>>>0)>(4095);
   if ($637) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $638 = (_h264bsdGetRefPicData($dpb,$544)|0);
   $639 = ($638|0)==(0|0);
   if ($639) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $640 = ((($pMb)) + 148|0);
    $641 = ((($pMb)) + 152|0);
    $642 = ((($pMb)) + 156|0);
    $643 = ((($pMb)) + 160|0);
    $644 = ((($pMb)) + 180|0);
    $645 = ((($pMb)) + 184|0);
    $646 = ((($pMb)) + 188|0);
    $647 = ((($pMb)) + 192|0);
    $648 = ((($pMb)) + 192|0);
    HEAP16[$648>>1] = $627;
    $649 = ((($pMb)) + 194|0);
    HEAP16[$649>>1] = $631;
    $650 = HEAPU16[$647>>1]|(HEAPU16[$647+2>>1]<<16);
    HEAP16[$646>>1]=$650&65535;HEAP16[$646+2>>1]=$650>>>16;
    HEAP16[$645>>1]=$650&65535;HEAP16[$645+2>>1]=$650>>>16;
    HEAP16[$644>>1]=$650&65535;HEAP16[$644+2>>1]=$650>>>16;
    HEAP16[$643>>1]=$650&65535;HEAP16[$643+2>>1]=$650>>>16;
    HEAP16[$642>>1]=$650&65535;HEAP16[$642+2>>1]=$650>>>16;
    HEAP16[$641>>1]=$650&65535;HEAP16[$641+2>>1]=$650>>>16;
    HEAP16[$640>>1]=$650&65535;HEAP16[$640+2>>1]=$650>>>16;
    $651 = ((($pMb)) + 104|0);
    HEAP32[$651>>2] = $544;
    $652 = ((($pMb)) + 112|0);
    HEAP32[$652>>2] = $544;
    $653 = ((($pMb)) + 120|0);
    HEAP32[$653>>2] = $638;
    $654 = ((($pMb)) + 128|0);
    HEAP32[$654>>2] = $638;
    $655 = ((($pMb)) + 116|0);
    $656 = HEAP32[$655>>2]|0;
    HEAP32[$refImage>>2] = $656;
    $657 = ((($pMb)) + 132|0);
    _h264bsdPredictSamples($data,$657,$refImage,$6,$5,0,0,8,16);
    $658 = HEAP32[$653>>2]|0;
    HEAP32[$refImage>>2] = $658;
    _h264bsdPredictSamples($data,$640,$refImage,$6,$5,8,0,8,16);
    break L1;
   }
   break;
  }
  default: {
   $659 = ((($pMb)) + 4|0);
   $i$05$i = 0;
   L3: while(1) {
    $660 = (((($pMbLayer)) + 176|0) + ($i$05$i<<2)|0);
    $661 = HEAP32[$660>>2]|0;
    $662 = (_h264bsdNumSubMbPart($661)|0);
    $663 = (((($pMbLayer)) + 192|0) + ($i$05$i<<2)|0);
    $664 = HEAP32[$663>>2]|0;
    $665 = (((($pMb)) + 100|0) + ($i$05$i<<2)|0);
    HEAP32[$665>>2] = $664;
    $666 = HEAP32[$663>>2]|0;
    $667 = (_h264bsdGetRefPicData($dpb,$666)|0);
    $668 = (((($pMb)) + 116|0) + ($i$05$i<<2)|0);
    HEAP32[$668>>2] = $667;
    $669 = ($667|0)==(0|0);
    if ($669) {
     $$0 = 1;
     label = 166;
     break;
    }
    $670 = ($662|0)==(0);
    L6: do {
     if (!($670)) {
      $671 = $i$05$i << 2;
      $672 = (((($pMb)) + 132|0) + ($671<<2)|0);
      $673 = (((((($pMb)) + 132|0) + ($671<<2)|0)) + 2|0);
      $674 = $671 | 1;
      $675 = (((($pMb)) + 132|0) + ($674<<2)|0);
      $676 = (((((($pMb)) + 132|0) + ($674<<2)|0)) + 2|0);
      $677 = $671 | 2;
      $678 = (((($pMb)) + 132|0) + ($677<<2)|0);
      $679 = (((((($pMb)) + 132|0) + ($677<<2)|0)) + 2|0);
      $680 = $671 | 3;
      $681 = (((($pMb)) + 132|0) + ($680<<2)|0);
      $682 = (((((($pMb)) + 132|0) + ($680<<2)|0)) + 2|0);
      $j$04$i = 0;
      while(1) {
       $683 = ((((($pMbLayer)) + 208|0) + ($i$05$i<<4)|0) + ($j$04$i<<2)|0);
       $684 = HEAP16[$683>>1]|0;
       $685 = ((((((($pMbLayer)) + 208|0) + ($i$05$i<<4)|0) + ($j$04$i<<2)|0)) + 2|0);
       $686 = HEAP16[$685>>1]|0;
       $687 = HEAP32[$660>>2]|0;
       $688 = (_h264bsdSubMbPartMode($687)|0);
       $689 = HEAP32[$663>>2]|0;
       $690 = (((3920 + ($i$05$i<<7)|0) + ($688<<5)|0) + ($j$04$i<<3)|0);
       $691 = HEAP32[$690>>2]|0;
       $692 = (_h264bsdGetNeighbourMb($pMb,$691)|0);
       $693 = (((((3920 + ($i$05$i<<7)|0) + ($688<<5)|0) + ($j$04$i<<3)|0)) + 4|0);
       $694 = HEAP8[$693>>0]|0;
       $695 = $694&255;
       $696 = ($692|0)==(0|0);
       if ($696) {
        $769 = 0;$771 = -1;$784 = 0;$795 = 0;
       } else {
        $697 = HEAP32[$659>>2]|0;
        $698 = ((($692)) + 4|0);
        $699 = HEAP32[$698>>2]|0;
        $700 = ($699|0)==($697|0);
        if ($700) {
         $701 = HEAP32[$692>>2]|0;
         $702 = ($701>>>0)<(6);
         if ($702) {
          $703 = (((($692)) + 132|0) + ($695<<2)|0);
          $704 = HEAPU16[$703>>1]|(HEAPU16[$703+2>>1]<<16);
          $705 = $695 >>> 2;
          $706 = (((($692)) + 100|0) + ($705<<2)|0);
          $707 = HEAP32[$706>>2]|0;
          $708 = $704&65535;
          $709 = $704 >>> 16;
          $710 = $709&65535;
          $769 = 1;$771 = $707;$784 = $708;$795 = $710;
         } else {
          $769 = 1;$771 = -1;$784 = 0;$795 = 0;
         }
        } else {
         $769 = 0;$771 = -1;$784 = 0;$795 = 0;
        }
       }
       $711 = (((4432 + ($i$05$i<<7)|0) + ($688<<5)|0) + ($j$04$i<<3)|0);
       $712 = HEAP32[$711>>2]|0;
       $713 = (_h264bsdGetNeighbourMb($pMb,$712)|0);
       $714 = (((((4432 + ($i$05$i<<7)|0) + ($688<<5)|0) + ($j$04$i<<3)|0)) + 4|0);
       $715 = HEAP8[$714>>0]|0;
       $716 = $715&255;
       $717 = ($713|0)==(0|0);
       if ($717) {
        $768 = 0;$774 = -1;$786 = 0;$797 = 0;
       } else {
        $718 = HEAP32[$659>>2]|0;
        $719 = ((($713)) + 4|0);
        $720 = HEAP32[$719>>2]|0;
        $721 = ($720|0)==($718|0);
        if ($721) {
         $722 = HEAP32[$713>>2]|0;
         $723 = ($722>>>0)<(6);
         if ($723) {
          $724 = (((($713)) + 132|0) + ($716<<2)|0);
          $725 = HEAPU16[$724>>1]|(HEAPU16[$724+2>>1]<<16);
          $726 = $716 >>> 2;
          $727 = (((($713)) + 100|0) + ($726<<2)|0);
          $728 = HEAP32[$727>>2]|0;
          $729 = $725&65535;
          $730 = $725 >>> 16;
          $731 = $730&65535;
          $768 = 1;$774 = $728;$786 = $729;$797 = $731;
         } else {
          $768 = 1;$774 = -1;$786 = 0;$797 = 0;
         }
        } else {
         $768 = 0;$774 = -1;$786 = 0;$797 = 0;
        }
       }
       $732 = (((4944 + ($i$05$i<<7)|0) + ($688<<5)|0) + ($j$04$i<<3)|0);
       $733 = HEAP32[$732>>2]|0;
       $734 = (_h264bsdGetNeighbourMb($pMb,$733)|0);
       $735 = (((((4944 + ($i$05$i<<7)|0) + ($688<<5)|0) + ($j$04$i<<3)|0)) + 4|0);
       $736 = HEAP8[$735>>0]|0;
       $737 = $736&255;
       $738 = ($734|0)==(0|0);
       if ($738) {
        label = 137;
       } else {
        $739 = HEAP32[$659>>2]|0;
        $740 = ((($734)) + 4|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = ($741|0)==($739|0);
        if ($742) {
         $743 = HEAP32[$734>>2]|0;
         $744 = ($743>>>0)<(6);
         if ($744) {
          $745 = (((($734)) + 132|0) + ($737<<2)|0);
          $746 = HEAPU16[$745>>1]|(HEAPU16[$745+2>>1]<<16);
          $747 = $737 >>> 2;
          $748 = (((($734)) + 100|0) + ($747<<2)|0);
          $749 = HEAP32[$748>>2]|0;
          $777 = $749;$787 = $746;
          label = 142;
         } else {
          $777 = -1;$787 = 0;
          label = 142;
         }
        } else {
         label = 137;
        }
       }
       do {
        if ((label|0) == 137) {
         label = 0;
         $750 = (((5456 + ($i$05$i<<7)|0) + ($688<<5)|0) + ($j$04$i<<3)|0);
         $751 = HEAP32[$750>>2]|0;
         $752 = (_h264bsdGetNeighbourMb($pMb,$751)|0);
         $753 = (((((5456 + ($i$05$i<<7)|0) + ($688<<5)|0) + ($j$04$i<<3)|0)) + 4|0);
         $754 = HEAP8[$753>>0]|0;
         $755 = $754&255;
         $756 = ($752|0)==(0|0);
         if (!($756)) {
          $757 = HEAP32[$659>>2]|0;
          $758 = ((($752)) + 4|0);
          $759 = HEAP32[$758>>2]|0;
          $760 = ($759|0)==($757|0);
          if ($760) {
           $761 = HEAP32[$752>>2]|0;
           $762 = ($761>>>0)<(6);
           if (!($762)) {
            $777 = -1;$787 = 0;
            label = 142;
            break;
           }
           $763 = (((($752)) + 132|0) + ($755<<2)|0);
           $764 = HEAPU16[$763>>1]|(HEAPU16[$763+2>>1]<<16);
           $765 = $755 >>> 2;
           $766 = (((($752)) + 100|0) + ($765<<2)|0);
           $767 = HEAP32[$766>>2]|0;
           $777 = $767;$787 = $764;
           label = 142;
           break;
          }
         }
         $or$cond$not$i$i = ($768|0)!=(0);
         $770 = ($769|0)==(0);
         $or$cond8$i$i = $770 | $or$cond$not$i$i;
         if ($or$cond8$i$i) {
          $777 = -1;$787 = 0;
          label = 142;
         } else {
          $808 = $784;$813 = $795;
         }
        }
       } while(0);
       do {
        if ((label|0) == 142) {
         label = 0;
         $772 = ($771|0)==($689|0);
         $773 = $772&1;
         $775 = ($774|0)==($689|0);
         $776 = $775&1;
         $778 = ($777|0)==($689|0);
         $779 = $778&1;
         $780 = (($776) + ($773))|0;
         $781 = (($780) + ($779))|0;
         $782 = ($781|0)==(1);
         if (!($782)) {
          $783 = $784 << 16 >> 16;
          $785 = $786 << 16 >> 16;
          $sext9$i$i = $787 << 16;
          $788 = $sext9$i$i >> 16;
          $789 = ($786<<16>>16)>($784<<16>>16);
          $790 = ($785|0)<($783|0);
          $b$a$i$i$i$i = $790 ? $785 : $783;
          $max$0$i$i$i$i = $789 ? $785 : $783;
          $min$0$i$i$i$i = $789 ? $783 : $b$a$i$i$i$i;
          $791 = ($max$0$i$i$i$i|0)<($788|0);
          $792 = ($min$0$i$i$i$i|0)>($788|0);
          $min$0$c$i$i$i$i = $792 ? $min$0$i$i$i$i : $788;
          $med$0$i$i$i$i = $791 ? $max$0$i$i$i$i : $min$0$c$i$i$i$i;
          $793 = $med$0$i$i$i$i&65535;
          $794 = $795 << 16 >> 16;
          $796 = $797 << 16 >> 16;
          $798 = $787 >> 16;
          $799 = ($797<<16>>16)>($795<<16>>16);
          $800 = ($796|0)<($794|0);
          $b$a$i1$i$i$i = $800 ? $796 : $794;
          $max$0$i2$i$i$i = $799 ? $796 : $794;
          $min$0$i3$i$i$i = $799 ? $794 : $b$a$i1$i$i$i;
          $801 = ($max$0$i2$i$i$i|0)<($798|0);
          $802 = ($min$0$i3$i$i$i|0)>($798|0);
          $min$0$c$i4$i$i$i = $802 ? $min$0$i3$i$i$i : $798;
          $med$0$i5$i$i$i = $801 ? $max$0$i2$i$i$i : $min$0$c$i4$i$i$i;
          $803 = $med$0$i5$i$i$i&65535;
          $808 = $793;$813 = $803;
          break;
         }
         $brmerge$i$i = $772 | $775;
         $$mux$i$i = $772 ? $795 : $797;
         $$mux11$i$i = $772 ? $784 : $786;
         if ($brmerge$i$i) {
          $808 = $$mux11$i$i;$813 = $$mux$i$i;
         } else {
          $804 = $787&65535;
          $805 = $787 >>> 16;
          $806 = $805&65535;
          $808 = $804;$813 = $806;
         }
        }
       } while(0);
       $807 = $808&65535;
       $809 = $684&65535;
       $810 = (($807) + ($809))|0;
       $811 = $810&65535;
       $812 = $813&65535;
       $814 = $686&65535;
       $815 = (($812) + ($814))|0;
       $816 = $815&65535;
       $sext$i$i = $810 << 16;
       $817 = $sext$i$i >> 16;
       $818 = (($817) + 8192)|0;
       $819 = ($818>>>0)>(16383);
       if ($819) {
        $$0 = 1;
        label = 166;
        break L3;
       }
       $sext1$i$i = $815 << 16;
       $820 = $sext1$i$i >> 16;
       $821 = (($820) + 2048)|0;
       $822 = ($821>>>0)>(4095);
       if ($822) {
        $$0 = 1;
        label = 166;
        break L3;
       }
       switch ($688|0) {
       case 0:  {
        HEAP16[$672>>1] = $811;
        HEAP16[$673>>1] = $816;
        HEAP16[$675>>1] = $811;
        HEAP16[$676>>1] = $816;
        HEAP16[$678>>1] = $811;
        HEAP16[$679>>1] = $816;
        HEAP16[$681>>1] = $811;
        HEAP16[$682>>1] = $816;
        break;
       }
       case 1:  {
        $823 = $j$04$i << 1;
        $824 = (($823) + ($671))|0;
        $825 = (((($pMb)) + 132|0) + ($824<<2)|0);
        HEAP16[$825>>1] = $811;
        $826 = (((((($pMb)) + 132|0) + ($824<<2)|0)) + 2|0);
        HEAP16[$826>>1] = $816;
        $827 = $824 | 1;
        $828 = (((($pMb)) + 132|0) + ($827<<2)|0);
        HEAP16[$828>>1] = $811;
        $829 = (((((($pMb)) + 132|0) + ($827<<2)|0)) + 2|0);
        HEAP16[$829>>1] = $816;
        break;
       }
       case 2:  {
        $830 = (($j$04$i) + ($671))|0;
        $831 = (((($pMb)) + 132|0) + ($830<<2)|0);
        HEAP16[$831>>1] = $811;
        $832 = (((((($pMb)) + 132|0) + ($830<<2)|0)) + 2|0);
        HEAP16[$832>>1] = $816;
        $833 = (($830) + 2)|0;
        $834 = (((($pMb)) + 132|0) + ($833<<2)|0);
        HEAP16[$834>>1] = $811;
        $835 = (((((($pMb)) + 132|0) + ($833<<2)|0)) + 2|0);
        HEAP16[$835>>1] = $816;
        break;
       }
       case 3:  {
        $836 = (($j$04$i) + ($671))|0;
        $837 = (((($pMb)) + 132|0) + ($836<<2)|0);
        HEAP16[$837>>1] = $811;
        $838 = (((((($pMb)) + 132|0) + ($836<<2)|0)) + 2|0);
        HEAP16[$838>>1] = $816;
        break;
       }
       default: {
       }
       }
       $839 = (($j$04$i) + 1)|0;
       $840 = ($839>>>0)<($662>>>0);
       if ($840) {
        $j$04$i = $839;
       } else {
        break L6;
       }
      }
     }
    } while(0);
    $841 = (($i$05$i) + 1)|0;
    $842 = ($841>>>0)<(4);
    if ($842) {
     $i$05$i = $841;
    } else {
     label = 155;
     break;
    }
   }
   if ((label|0) == 155) {
    $i$045 = 0;
    while(1) {
     $843 = (((($pMb)) + 116|0) + ($i$045<<2)|0);
     $844 = HEAP32[$843>>2]|0;
     HEAP32[$refImage>>2] = $844;
     $845 = (((($pMbLayer)) + 176|0) + ($i$045<<2)|0);
     $846 = HEAP32[$845>>2]|0;
     $847 = (_h264bsdSubMbPartMode($846)|0);
     $848 = $i$045 << 3;
     $849 = $848 & 8;
     $850 = ($i$045>>>0)<(2);
     $851 = $850 ? 0 : 8;
     switch ($847|0) {
     case 0:  {
      $852 = $i$045 << 2;
      $853 = (((($pMb)) + 132|0) + ($852<<2)|0);
      _h264bsdPredictSamples($data,$853,$refImage,$6,$5,$849,$851,8,8);
      break;
     }
     case 1:  {
      $854 = $i$045 << 2;
      $855 = (((($pMb)) + 132|0) + ($854<<2)|0);
      _h264bsdPredictSamples($data,$855,$refImage,$6,$5,$849,$851,8,4);
      $$sum2 = $854 | 2;
      $856 = (((($pMb)) + 132|0) + ($$sum2<<2)|0);
      $857 = $851 | 4;
      _h264bsdPredictSamples($data,$856,$refImage,$6,$5,$849,$857,8,4);
      break;
     }
     case 2:  {
      $858 = $i$045 << 2;
      $859 = (((($pMb)) + 132|0) + ($858<<2)|0);
      _h264bsdPredictSamples($data,$859,$refImage,$6,$5,$849,$851,4,8);
      $$sum1 = $858 | 1;
      $860 = (((($pMb)) + 132|0) + ($$sum1<<2)|0);
      $861 = $849 | 4;
      _h264bsdPredictSamples($data,$860,$refImage,$6,$5,$861,$851,4,8);
      break;
     }
     default: {
      $862 = $i$045 << 2;
      $863 = (((($pMb)) + 132|0) + ($862<<2)|0);
      _h264bsdPredictSamples($data,$863,$refImage,$6,$5,$849,$851,4,4);
      $$sum3 = $862 | 1;
      $864 = (((($pMb)) + 132|0) + ($$sum3<<2)|0);
      $865 = $849 | 4;
      _h264bsdPredictSamples($data,$864,$refImage,$6,$5,$865,$851,4,4);
      $$sum4 = $862 | 2;
      $866 = (((($pMb)) + 132|0) + ($$sum4<<2)|0);
      $867 = $851 | 4;
      _h264bsdPredictSamples($data,$866,$refImage,$6,$5,$849,$867,4,4);
      $$sum5 = $862 | 3;
      $868 = (((($pMb)) + 132|0) + ($$sum5<<2)|0);
      _h264bsdPredictSamples($data,$868,$refImage,$6,$5,$865,$867,4,4);
     }
     }
     $869 = (($i$045) + 1)|0;
     $exitcond = ($869|0)==(4);
     if ($exitcond) {
      break L1;
     } else {
      $i$045 = $869;
     }
    }
   }
   else if ((label|0) == 166) {
    STACKTOP = sp;return ($$0|0);
   }
  }
  }
 } while(0);
 $870 = ((($pMb)) + 196|0);
 $871 = HEAP32[$870>>2]|0;
 $872 = ($871>>>0)>(1);
 if ($872) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $873 = HEAP32[$pMb>>2]|0;
 $874 = ($873|0)==(0);
 if ($874) {
  _h264bsdWriteMacroblock($currImage,$data);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $875 = ((($pMbLayer)) + 328|0);
  _h264bsdWriteOutputBlocks($currImage,$mbNum,$data,$875);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdInterpolateChromaHor($pRef,$predPartChroma,$x0,$y0,$width,$height,$xFrac,$chromaPartWidth,$chromaPartHeight) {
 $pRef = $pRef|0;
 $predPartChroma = $predPartChroma|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $xFrac = $xFrac|0;
 $chromaPartWidth = $chromaPartWidth|0;
 $chromaPartHeight = $chromaPartHeight|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$sum = 0, $$sum$1 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0, $brmerge = 0, $brmerge$1 = 0, $cbr$016 = 0, $cbr$016$1 = 0, $cbr$112 = 0, $cbr$112$1 = 0, $or$cond = 0, $or$cond9 = 0, $ptrA$015 = 0, $ptrA$015$1 = 0, $ptrA$111 = 0, $ptrA$111$1 = 0, $scevgep$sum = 0;
 var $scevgep$sum$1 = 0, $scevgep22$sum = 0, $scevgep22$sum$1 = 0, $x$010 = 0, $x$010$1 = 0, $y$014 = 0, $y$014$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $block = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 3;
 } else {
  $1 = (($x0) + 1)|0;
  $2 = (($1) + ($chromaPartWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $4 | $3;
  $5 = (($chromaPartHeight) + ($y0))|0;
  $6 = ($5>>>0)>($height>>>0);
  $or$cond9 = $6 | $or$cond;
  if ($or$cond9) {
   label = 3;
  } else {
   $$0 = $pRef;$$02 = $x0;$$03 = $y0;$$04 = $width;$$05 = $height;
  }
 }
 if ((label|0) == 3) {
  $7 = (($chromaPartWidth) + 1)|0;
  _h264bsdFillBlock($pRef,$block,$x0,$y0,$width,$height,$7,$chromaPartHeight,$7);
  $8 = Math_imul($height, $width)|0;
  $9 = (($pRef) + ($8)|0);
  $10 = Math_imul($7, $chromaPartHeight)|0;
  $11 = (($block) + ($10)|0);
  _h264bsdFillBlock($9,$11,$x0,$y0,$width,$height,$7,$chromaPartHeight,$7);
  $$0 = $block;$$02 = 0;$$03 = 0;$$04 = $7;$$05 = $chromaPartHeight;
 }
 $12 = (8 - ($xFrac))|0;
 $13 = $chromaPartHeight >>> 1;
 $14 = ($13|0)==(0);
 $15 = $chromaPartWidth >>> 1;
 $16 = ($15|0)==(0);
 $17 = (16 - ($chromaPartWidth))|0;
 $18 = $$04 << 1;
 $19 = (($18) - ($chromaPartWidth))|0;
 $$sum6 = (($$04) + 1)|0;
 $$sum7 = (($$04) + 2)|0;
 $20 = $15 << 1;
 $brmerge = $14 | $16;
 if (!($brmerge)) {
  $21 = Math_imul($$03, $$04)|0;
  $$sum = (($21) + ($$02))|0;
  $22 = (($$0) + ($$sum)|0);
  $scevgep$sum = (($20) + ($17))|0;
  $scevgep22$sum = (($20) + ($19))|0;
  $cbr$016 = $predPartChroma;$ptrA$015 = $22;$y$014 = $13;
  while(1) {
   $cbr$112 = $cbr$016;$ptrA$111 = $ptrA$015;$x$010 = $15;
   while(1) {
    $23 = (($ptrA$111) + ($$04)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = ((($ptrA$111)) + 1|0);
    $27 = HEAP8[$ptrA$111>>0]|0;
    $28 = $27&255;
    $29 = (($ptrA$111) + ($$sum6)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = ((($ptrA$111)) + 2|0);
    $33 = HEAP8[$26>>0]|0;
    $34 = $33&255;
    $35 = Math_imul($25, $12)|0;
    $36 = Math_imul($31, $xFrac)|0;
    $37 = (($36) + ($35))|0;
    $38 = $37 << 3;
    $39 = (($38) + 32)|0;
    $40 = $39 >>> 6;
    $41 = $40&255;
    $42 = ((($cbr$112)) + 8|0);
    HEAP8[$42>>0] = $41;
    $43 = Math_imul($28, $12)|0;
    $44 = Math_imul($34, $xFrac)|0;
    $45 = (($44) + ($43))|0;
    $46 = $45 << 3;
    $47 = (($46) + 32)|0;
    $48 = $47 >>> 6;
    $49 = $48&255;
    $50 = ((($cbr$112)) + 1|0);
    HEAP8[$cbr$112>>0] = $49;
    $51 = (($ptrA$111) + ($$sum7)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = HEAP8[$32>>0]|0;
    $55 = $54&255;
    $56 = Math_imul($31, $12)|0;
    $57 = Math_imul($53, $xFrac)|0;
    $58 = (($57) + ($56))|0;
    $59 = $58 << 3;
    $60 = (($59) + 32)|0;
    $61 = $60 >>> 6;
    $62 = $61&255;
    $63 = ((($cbr$112)) + 9|0);
    HEAP8[$63>>0] = $62;
    $64 = Math_imul($34, $12)|0;
    $65 = Math_imul($55, $xFrac)|0;
    $66 = (($65) + ($64))|0;
    $67 = $66 << 3;
    $68 = (($67) + 32)|0;
    $69 = $68 >>> 6;
    $70 = $69&255;
    $71 = ((($cbr$112)) + 2|0);
    HEAP8[$50>>0] = $70;
    $72 = (($x$010) + -1)|0;
    $73 = ($72|0)==(0);
    if ($73) {
     break;
    } else {
     $cbr$112 = $71;$ptrA$111 = $32;$x$010 = $72;
    }
   }
   $74 = (($cbr$016) + ($scevgep$sum)|0);
   $75 = (($ptrA$015) + ($scevgep22$sum)|0);
   $76 = (($y$014) + -1)|0;
   $77 = ($76|0)==(0);
   if ($77) {
    break;
   } else {
    $cbr$016 = $74;$ptrA$015 = $75;$y$014 = $76;
   }
  }
 }
 $brmerge$1 = $14 | $16;
 if ($brmerge$1) {
  STACKTOP = sp;return;
 }
 $78 = ((($predPartChroma)) + 64|0);
 $79 = (($$05) + ($$03))|0;
 $80 = Math_imul($79, $$04)|0;
 $$sum$1 = (($80) + ($$02))|0;
 $81 = (($$0) + ($$sum$1)|0);
 $scevgep$sum$1 = (($20) + ($17))|0;
 $scevgep22$sum$1 = (($20) + ($19))|0;
 $cbr$016$1 = $78;$ptrA$015$1 = $81;$y$014$1 = $13;
 while(1) {
  $cbr$112$1 = $cbr$016$1;$ptrA$111$1 = $ptrA$015$1;$x$010$1 = $15;
  while(1) {
   $82 = (($ptrA$111$1) + ($$04)|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = ((($ptrA$111$1)) + 1|0);
   $86 = HEAP8[$ptrA$111$1>>0]|0;
   $87 = $86&255;
   $88 = (($ptrA$111$1) + ($$sum6)|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = ((($ptrA$111$1)) + 2|0);
   $92 = HEAP8[$85>>0]|0;
   $93 = $92&255;
   $94 = Math_imul($84, $12)|0;
   $95 = Math_imul($90, $xFrac)|0;
   $96 = (($95) + ($94))|0;
   $97 = $96 << 3;
   $98 = (($97) + 32)|0;
   $99 = $98 >>> 6;
   $100 = $99&255;
   $101 = ((($cbr$112$1)) + 8|0);
   HEAP8[$101>>0] = $100;
   $102 = Math_imul($87, $12)|0;
   $103 = Math_imul($93, $xFrac)|0;
   $104 = (($103) + ($102))|0;
   $105 = $104 << 3;
   $106 = (($105) + 32)|0;
   $107 = $106 >>> 6;
   $108 = $107&255;
   $109 = ((($cbr$112$1)) + 1|0);
   HEAP8[$cbr$112$1>>0] = $108;
   $110 = (($ptrA$111$1) + ($$sum7)|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = HEAP8[$91>>0]|0;
   $114 = $113&255;
   $115 = Math_imul($90, $12)|0;
   $116 = Math_imul($112, $xFrac)|0;
   $117 = (($116) + ($115))|0;
   $118 = $117 << 3;
   $119 = (($118) + 32)|0;
   $120 = $119 >>> 6;
   $121 = $120&255;
   $122 = ((($cbr$112$1)) + 9|0);
   HEAP8[$122>>0] = $121;
   $123 = Math_imul($93, $12)|0;
   $124 = Math_imul($114, $xFrac)|0;
   $125 = (($124) + ($123))|0;
   $126 = $125 << 3;
   $127 = (($126) + 32)|0;
   $128 = $127 >>> 6;
   $129 = $128&255;
   $130 = ((($cbr$112$1)) + 2|0);
   HEAP8[$109>>0] = $129;
   $131 = (($x$010$1) + -1)|0;
   $132 = ($131|0)==(0);
   if ($132) {
    break;
   } else {
    $cbr$112$1 = $130;$ptrA$111$1 = $91;$x$010$1 = $131;
   }
  }
  $133 = (($cbr$016$1) + ($scevgep$sum$1)|0);
  $134 = (($ptrA$015$1) + ($scevgep22$sum$1)|0);
  $135 = (($y$014$1) + -1)|0;
  $136 = ($135|0)==(0);
  if ($136) {
   break;
  } else {
   $cbr$016$1 = $133;$ptrA$015$1 = $134;$y$014$1 = $135;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdFillBlock($ref,$fill,$x0,$y0,$width,$height,$blockWidth,$blockHeight,$fillScanLength) {
 $ref = $ref|0;
 $fill = $fill|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $blockWidth = $blockWidth|0;
 $blockHeight = $blockHeight|0;
 $fillScanLength = $fillScanLength|0;
 var $$ = 0, $$01$lcssa = 0, $$0117 = 0, $$04 = 0, $$1 = 0, $$12$lcssa = 0, $$1211 = 0, $$15 = 0, $$2$lcssa = 0, $$212 = 0, $$239 = 0, $$op = 0, $$op32 = 0, $$ref = 0, $$y0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $bottom$010 = 0, $fp$0 = 0, $height$$y0 = 0, $or$cond = 0, $scevgep = 0, $scevgep27 = 0, $scevgep31 = 0, $smax = 0, $smax24 = 0, $smax25 = 0, $smax28 = 0, $smax29 = 0;
 var $top$018 = 0, $y$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($blockWidth) + ($x0))|0;
 $1 = (($blockHeight) + ($y0))|0;
 $2 = ($x0|0)<(0);
 $3 = ($0|0)>($width|0);
 $or$cond = $2 | $3;
 $fp$0 = $or$cond ? 345 : 344;
 $4 = ($1|0)<(0);
 $5 = (0 - ($blockHeight))|0;
 $$y0 = $4 ? $5 : $y0;
 $6 = ($0|0)<(0);
 $7 = (0 - ($blockWidth))|0;
 $$04 = $6 ? $7 : $x0;
 $8 = ($$y0|0)>($height|0);
 $height$$y0 = $8 ? $height : $$y0;
 $9 = ($$04|0)>($width|0);
 $$15 = $9 ? $width : $$04;
 $10 = (($$15) + ($blockWidth))|0;
 $11 = (($height$$y0) + ($blockHeight))|0;
 $12 = ($$15|0)>(0);
 $13 = (($ref) + ($$15)|0);
 $$ref = $12 ? $13 : $ref;
 $14 = ($height$$y0|0)>(0);
 $15 = Math_imul($height$$y0, $width)|0;
 $16 = (($$ref) + ($15)|0);
 $$1 = $14 ? $16 : $$ref;
 $17 = ($$15|0)<(0);
 $18 = (0 - ($$15))|0;
 $19 = $17 ? $18 : 0;
 $20 = ($10|0)>($width|0);
 $21 = (($10) - ($width))|0;
 $$ = $20 ? $21 : 0;
 $22 = (($blockWidth) - ($19))|0;
 $23 = (($22) - ($$))|0;
 $24 = ($height$$y0|0)<(0);
 $25 = (0 - ($height$$y0))|0;
 $26 = $24 ? $25 : 0;
 $27 = ($11|0)>($height|0);
 $28 = (($11) - ($height))|0;
 $29 = $27 ? $28 : 0;
 $30 = (($blockHeight) - ($26))|0;
 $31 = (($30) - ($29))|0;
 $32 = ($26|0)==(0);
 if ($32) {
  $$01$lcssa = $fill;
 } else {
  $33 = (($blockHeight) + -1)|0;
  $34 = ($1|0)>(0);
  $smax28 = $34 ? $1 : 0;
  $35 = (($33) - ($smax28))|0;
  $36 = $height ^ -1;
  $37 = ($35|0)>($36|0);
  $smax29 = $37 ? $35 : $36;
  $38 = ($smax29|0)<(-1);
  $$op = $smax29 ^ -1;
  $39 = $38 ? $$op : 0;
  $40 = (($smax29) + ($39))|0;
  $41 = (($40) + 1)|0;
  $42 = Math_imul($41, $fillScanLength)|0;
  $$0117 = $fill;$top$018 = $25;
  while(1) {
   FUNCTION_TABLE_viiiii[$fp$0 & 511]($$1,$$0117,$19,$23,$$);
   $60 = (($$0117) + ($fillScanLength)|0);
   $61 = (($top$018) + -1)|0;
   $62 = ($61|0)==(0);
   if ($62) {
    break;
   } else {
    $$0117 = $60;$top$018 = $61;
   }
  }
  $scevgep31 = (($fill) + ($42)|0);
  $$01$lcssa = $scevgep31;
 }
 $43 = ($30|0)==($29|0);
 if ($43) {
  $$12$lcssa = $$01$lcssa;$$2$lcssa = $$1;
 } else {
  $44 = (($blockHeight) + ($height))|0;
  $45 = (($44) + -1)|0;
  $46 = (($blockHeight) + -1)|0;
  $47 = ($1|0)>(0);
  $smax = $47 ? $1 : 0;
  $48 = (($46) - ($smax))|0;
  $49 = $height ^ -1;
  $50 = ($48|0)>($49|0);
  $smax24 = $50 ? $48 : $49;
  $51 = (($46) - ($smax24))|0;
  $52 = ($51|0)<($height|0);
  $smax25 = $52 ? $height : $51;
  $53 = (($45) - ($smax25))|0;
  $54 = (($53) - ($smax24))|0;
  $55 = ($smax24|0)<(-1);
  $$op32 = $smax24 ^ -1;
  $56 = $55 ? $$op32 : 0;
  $57 = (($54) - ($56))|0;
  $58 = Math_imul($57, $fillScanLength)|0;
  $59 = Math_imul($57, $width)|0;
  $$1211 = $$01$lcssa;$$212 = $$1;$y$013 = $31;
  while(1) {
   FUNCTION_TABLE_viiiii[$fp$0 & 511]($$212,$$1211,$19,$23,$$);
   $63 = (($$212) + ($width)|0);
   $64 = (($$1211) + ($fillScanLength)|0);
   $65 = (($y$013) + -1)|0;
   $66 = ($65|0)==(0);
   if ($66) {
    break;
   } else {
    $$1211 = $64;$$212 = $63;$y$013 = $65;
   }
  }
  $scevgep = (($$01$lcssa) + ($58)|0);
  $scevgep27 = (($$1) + ($59)|0);
  $$12$lcssa = $scevgep;$$2$lcssa = $scevgep27;
 }
 $67 = (0 - ($width))|0;
 $68 = (($$2$lcssa) + ($67)|0);
 $69 = ($29|0)==(0);
 if ($69) {
  return;
 } else {
  $$239 = $$12$lcssa;$bottom$010 = $28;
 }
 while(1) {
  FUNCTION_TABLE_viiiii[$fp$0 & 511]($68,$$239,$19,$23,$$);
  $70 = (($$239) + ($fillScanLength)|0);
  $71 = (($bottom$010) + -1)|0;
  $72 = ($71|0)==(0);
  if ($72) {
   break;
  } else {
   $$239 = $70;$bottom$010 = $71;
  }
 }
 return;
}
function _h264bsdInterpolateChromaVer($pRef,$predPartChroma,$x0,$y0,$width,$height,$yFrac,$chromaPartWidth,$chromaPartHeight) {
 $pRef = $pRef|0;
 $predPartChroma = $predPartChroma|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $yFrac = $yFrac|0;
 $chromaPartWidth = $chromaPartWidth|0;
 $chromaPartHeight = $chromaPartHeight|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$sum = 0, $$sum$1 = 0, $$sum67 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0, $brmerge = 0, $brmerge$1 = 0, $cbr$015 = 0, $cbr$015$1 = 0, $cbr$111 = 0, $cbr$111$1 = 0, $or$cond = 0, $ptrA$014 = 0, $ptrA$014$1 = 0, $ptrA$110 = 0, $ptrA$110$1 = 0;
 var $scevgep$sum = 0, $scevgep$sum$1 = 0, $scevgep21$sum = 0, $scevgep21$sum$1 = 0, $x$09 = 0, $x$09$1 = 0, $y$013 = 0, $y$013$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $block = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 4;
 } else {
  $1 = (($chromaPartWidth) + ($x0))|0;
  $2 = ($1>>>0)>($width>>>0);
  $3 = ($y0|0)<(0);
  $or$cond = $3 | $2;
  if ($or$cond) {
   label = 4;
  } else {
   $4 = (($y0) + 1)|0;
   $5 = (($4) + ($chromaPartHeight))|0;
   $6 = ($5>>>0)>($height>>>0);
   if ($6) {
    label = 4;
   } else {
    $$0 = $pRef;$$02 = $x0;$$03 = $y0;$$04 = $width;$$05 = $height;
   }
  }
 }
 if ((label|0) == 4) {
  $7 = (($chromaPartHeight) + 1)|0;
  _h264bsdFillBlock($pRef,$block,$x0,$y0,$width,$height,$chromaPartWidth,$7,$chromaPartWidth);
  $8 = Math_imul($height, $width)|0;
  $9 = (($pRef) + ($8)|0);
  $10 = Math_imul($7, $chromaPartWidth)|0;
  $11 = (($block) + ($10)|0);
  _h264bsdFillBlock($9,$11,$x0,$y0,$width,$height,$chromaPartWidth,$7,$chromaPartWidth);
  $$0 = $block;$$02 = 0;$$03 = 0;$$04 = $chromaPartWidth;$$05 = $7;
 }
 $12 = (8 - ($yFrac))|0;
 $13 = $chromaPartHeight >>> 1;
 $14 = ($13|0)==(0);
 $15 = $chromaPartWidth >>> 1;
 $16 = ($15|0)==(0);
 $17 = (16 - ($chromaPartWidth))|0;
 $18 = $$04 << 1;
 $19 = (($18) - ($chromaPartWidth))|0;
 $$sum67 = $18 | 1;
 $$sum8 = (($$04) + 1)|0;
 $20 = $15 << 1;
 $brmerge = $14 | $16;
 if (!($brmerge)) {
  $21 = Math_imul($$03, $$04)|0;
  $$sum = (($21) + ($$02))|0;
  $22 = (($$0) + ($$sum)|0);
  $scevgep$sum = (($20) + ($17))|0;
  $scevgep21$sum = (($20) + ($19))|0;
  $cbr$015 = $predPartChroma;$ptrA$014 = $22;$y$013 = $13;
  while(1) {
   $cbr$111 = $cbr$015;$ptrA$110 = $ptrA$014;$x$09 = $15;
   while(1) {
    $23 = (($ptrA$110) + ($18)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = (($ptrA$110) + ($$04)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = ((($ptrA$110)) + 1|0);
    $30 = HEAP8[$ptrA$110>>0]|0;
    $31 = $30&255;
    $32 = Math_imul($28, $12)|0;
    $33 = Math_imul($25, $yFrac)|0;
    $34 = (($32) + ($33))|0;
    $35 = $34 << 3;
    $36 = (($35) + 32)|0;
    $37 = $36 >>> 6;
    $38 = $37&255;
    $39 = ((($cbr$111)) + 8|0);
    HEAP8[$39>>0] = $38;
    $40 = Math_imul($31, $12)|0;
    $41 = Math_imul($28, $yFrac)|0;
    $42 = (($40) + ($41))|0;
    $43 = $42 << 3;
    $44 = (($43) + 32)|0;
    $45 = $44 >>> 6;
    $46 = $45&255;
    $47 = ((($cbr$111)) + 1|0);
    HEAP8[$cbr$111>>0] = $46;
    $48 = (($ptrA$110) + ($$sum67)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = (($ptrA$110) + ($$sum8)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = ((($ptrA$110)) + 2|0);
    $55 = HEAP8[$29>>0]|0;
    $56 = $55&255;
    $57 = Math_imul($53, $12)|0;
    $58 = Math_imul($50, $yFrac)|0;
    $59 = (($57) + ($58))|0;
    $60 = $59 << 3;
    $61 = (($60) + 32)|0;
    $62 = $61 >>> 6;
    $63 = $62&255;
    $64 = ((($cbr$111)) + 9|0);
    HEAP8[$64>>0] = $63;
    $65 = Math_imul($56, $12)|0;
    $66 = Math_imul($53, $yFrac)|0;
    $67 = (($65) + ($66))|0;
    $68 = $67 << 3;
    $69 = (($68) + 32)|0;
    $70 = $69 >>> 6;
    $71 = $70&255;
    $72 = ((($cbr$111)) + 2|0);
    HEAP8[$47>>0] = $71;
    $73 = (($x$09) + -1)|0;
    $74 = ($73|0)==(0);
    if ($74) {
     break;
    } else {
     $cbr$111 = $72;$ptrA$110 = $54;$x$09 = $73;
    }
   }
   $75 = (($cbr$015) + ($scevgep$sum)|0);
   $76 = (($ptrA$014) + ($scevgep21$sum)|0);
   $77 = (($y$013) + -1)|0;
   $78 = ($77|0)==(0);
   if ($78) {
    break;
   } else {
    $cbr$015 = $75;$ptrA$014 = $76;$y$013 = $77;
   }
  }
 }
 $brmerge$1 = $14 | $16;
 if ($brmerge$1) {
  STACKTOP = sp;return;
 }
 $79 = ((($predPartChroma)) + 64|0);
 $80 = (($$05) + ($$03))|0;
 $81 = Math_imul($80, $$04)|0;
 $$sum$1 = (($81) + ($$02))|0;
 $82 = (($$0) + ($$sum$1)|0);
 $scevgep$sum$1 = (($20) + ($17))|0;
 $scevgep21$sum$1 = (($20) + ($19))|0;
 $cbr$015$1 = $79;$ptrA$014$1 = $82;$y$013$1 = $13;
 while(1) {
  $cbr$111$1 = $cbr$015$1;$ptrA$110$1 = $ptrA$014$1;$x$09$1 = $15;
  while(1) {
   $83 = (($ptrA$110$1) + ($18)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = (($ptrA$110$1) + ($$04)|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87&255;
   $89 = ((($ptrA$110$1)) + 1|0);
   $90 = HEAP8[$ptrA$110$1>>0]|0;
   $91 = $90&255;
   $92 = Math_imul($88, $12)|0;
   $93 = Math_imul($85, $yFrac)|0;
   $94 = (($92) + ($93))|0;
   $95 = $94 << 3;
   $96 = (($95) + 32)|0;
   $97 = $96 >>> 6;
   $98 = $97&255;
   $99 = ((($cbr$111$1)) + 8|0);
   HEAP8[$99>>0] = $98;
   $100 = Math_imul($91, $12)|0;
   $101 = Math_imul($88, $yFrac)|0;
   $102 = (($100) + ($101))|0;
   $103 = $102 << 3;
   $104 = (($103) + 32)|0;
   $105 = $104 >>> 6;
   $106 = $105&255;
   $107 = ((($cbr$111$1)) + 1|0);
   HEAP8[$cbr$111$1>>0] = $106;
   $108 = (($ptrA$110$1) + ($$sum67)|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = (($ptrA$110$1) + ($$sum8)|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = $112&255;
   $114 = ((($ptrA$110$1)) + 2|0);
   $115 = HEAP8[$89>>0]|0;
   $116 = $115&255;
   $117 = Math_imul($113, $12)|0;
   $118 = Math_imul($110, $yFrac)|0;
   $119 = (($117) + ($118))|0;
   $120 = $119 << 3;
   $121 = (($120) + 32)|0;
   $122 = $121 >>> 6;
   $123 = $122&255;
   $124 = ((($cbr$111$1)) + 9|0);
   HEAP8[$124>>0] = $123;
   $125 = Math_imul($116, $12)|0;
   $126 = Math_imul($113, $yFrac)|0;
   $127 = (($125) + ($126))|0;
   $128 = $127 << 3;
   $129 = (($128) + 32)|0;
   $130 = $129 >>> 6;
   $131 = $130&255;
   $132 = ((($cbr$111$1)) + 2|0);
   HEAP8[$107>>0] = $131;
   $133 = (($x$09$1) + -1)|0;
   $134 = ($133|0)==(0);
   if ($134) {
    break;
   } else {
    $cbr$111$1 = $132;$ptrA$110$1 = $114;$x$09$1 = $133;
   }
  }
  $135 = (($cbr$015$1) + ($scevgep$sum$1)|0);
  $136 = (($ptrA$014$1) + ($scevgep21$sum$1)|0);
  $137 = (($y$013$1) + -1)|0;
  $138 = ($137|0)==(0);
  if ($138) {
   break;
  } else {
   $cbr$015$1 = $135;$ptrA$014$1 = $136;$y$013$1 = $137;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateChromaHorVer($ref,$predPartChroma,$x0,$y0,$width,$height,$xFrac,$yFrac,$chromaPartWidth,$chromaPartHeight) {
 $ref = $ref|0;
 $predPartChroma = $predPartChroma|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $xFrac = $xFrac|0;
 $yFrac = $yFrac|0;
 $chromaPartWidth = $chromaPartWidth|0;
 $chromaPartHeight = $chromaPartHeight|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$sum = 0, $$sum10 = 0, $$sum6 = 0, $$sum78 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0;
 var $brmerge = 0, $cbr$019 = 0, $cbr$115 = 0, $comp$023 = 0, $exitcond = 0, $or$cond = 0, $ptrA$018 = 0, $ptrA$114 = 0, $scevgep$sum = 0, $scevgep25$sum = 0, $tmp1$011 = 0, $tmp3$013 = 0, $x$012 = 0, $y$017 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $block = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 4;
 } else {
  $1 = (($x0) + 1)|0;
  $2 = (($1) + ($chromaPartWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $4 | $3;
  if ($or$cond) {
   label = 4;
  } else {
   $5 = (($y0) + 1)|0;
   $6 = (($5) + ($chromaPartHeight))|0;
   $7 = ($6>>>0)>($height>>>0);
   if ($7) {
    label = 4;
   } else {
    $$0 = $ref;$$02 = $x0;$$03 = $y0;$$04 = $width;$$05 = $height;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = (($chromaPartWidth) + 1)|0;
  $9 = (($chromaPartHeight) + 1)|0;
  _h264bsdFillBlock($ref,$block,$x0,$y0,$width,$height,$8,$9,$8);
  $10 = Math_imul($height, $width)|0;
  $11 = (($ref) + ($10)|0);
  $12 = Math_imul($9, $8)|0;
  $13 = (($block) + ($12)|0);
  _h264bsdFillBlock($11,$13,$x0,$y0,$width,$height,$8,$9,$8);
  $$0 = $block;$$02 = 0;$$03 = 0;$$04 = $8;$$05 = $9;
 }
 $14 = (8 - ($xFrac))|0;
 $15 = (8 - ($yFrac))|0;
 $16 = $chromaPartHeight >>> 1;
 $17 = ($16|0)==(0);
 $18 = $$04 << 1;
 $19 = $chromaPartWidth >>> 1;
 $20 = ($19|0)==(0);
 $21 = (16 - ($chromaPartWidth))|0;
 $22 = (($18) - ($chromaPartWidth))|0;
 $$sum6 = (($$04) + 1)|0;
 $$sum78 = $18 | 1;
 $$sum9 = (($$04) + 2)|0;
 $$sum10 = (($18) + 2)|0;
 $23 = $19 << 1;
 $brmerge = $17 | $20;
 $scevgep$sum = (($23) + ($21))|0;
 $scevgep25$sum = (($23) + ($22))|0;
 $comp$023 = 0;
 while(1) {
  if (!($brmerge)) {
   $24 = $comp$023 << 6;
   $25 = (($predPartChroma) + ($24)|0);
   $26 = Math_imul($comp$023, $$05)|0;
   $27 = (($26) + ($$03))|0;
   $28 = Math_imul($27, $$04)|0;
   $$sum = (($28) + ($$02))|0;
   $29 = (($$0) + ($$sum)|0);
   $cbr$019 = $25;$ptrA$018 = $29;$y$017 = $16;
   while(1) {
    $30 = (($ptrA$018) + ($$04)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = (($ptrA$018) + ($18)|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = Math_imul($35, $yFrac)|0;
    $37 = Math_imul($32, $15)|0;
    $38 = (($36) + ($37))|0;
    $39 = Math_imul($32, $yFrac)|0;
    $40 = HEAP8[$ptrA$018>>0]|0;
    $41 = $40&255;
    $42 = Math_imul($41, $15)|0;
    $43 = (($39) + ($42))|0;
    $cbr$115 = $cbr$019;$ptrA$114 = $ptrA$018;$tmp1$011 = $43;$tmp3$013 = $38;$x$012 = $19;
    while(1) {
     $44 = ((($ptrA$114)) + 1|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45&255;
     $47 = (($ptrA$114) + ($$sum6)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $50 = (($ptrA$114) + ($$sum78)|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = Math_imul($46, $15)|0;
     $54 = Math_imul($49, $yFrac)|0;
     $55 = (($54) + ($53))|0;
     $56 = Math_imul($49, $15)|0;
     $57 = Math_imul($52, $yFrac)|0;
     $58 = (($57) + ($56))|0;
     $59 = Math_imul($tmp1$011, $14)|0;
     $60 = (($59) + 32)|0;
     $61 = Math_imul($tmp3$013, $14)|0;
     $62 = (($61) + 32)|0;
     $63 = Math_imul($55, $xFrac)|0;
     $64 = (($60) + ($63))|0;
     $65 = $64 >>> 6;
     $66 = Math_imul($58, $xFrac)|0;
     $67 = (($62) + ($66))|0;
     $68 = $67 >>> 6;
     $69 = $68&255;
     $70 = ((($cbr$115)) + 8|0);
     HEAP8[$70>>0] = $69;
     $71 = $65&255;
     $72 = ((($cbr$115)) + 1|0);
     HEAP8[$cbr$115>>0] = $71;
     $73 = ((($ptrA$114)) + 2|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74&255;
     $76 = (($ptrA$114) + ($$sum9)|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77&255;
     $79 = (($ptrA$114) + ($$sum10)|0);
     $80 = HEAP8[$79>>0]|0;
     $81 = $80&255;
     $82 = Math_imul($75, $15)|0;
     $83 = Math_imul($78, $yFrac)|0;
     $84 = (($83) + ($82))|0;
     $85 = Math_imul($78, $15)|0;
     $86 = Math_imul($81, $yFrac)|0;
     $87 = (($86) + ($85))|0;
     $88 = Math_imul($55, $14)|0;
     $89 = (($88) + 32)|0;
     $90 = Math_imul($58, $14)|0;
     $91 = (($90) + 32)|0;
     $92 = Math_imul($84, $xFrac)|0;
     $93 = (($89) + ($92))|0;
     $94 = $93 >>> 6;
     $95 = Math_imul($87, $xFrac)|0;
     $96 = (($91) + ($95))|0;
     $97 = $96 >>> 6;
     $98 = $97&255;
     $99 = ((($cbr$115)) + 9|0);
     HEAP8[$99>>0] = $98;
     $100 = $94&255;
     $101 = ((($cbr$115)) + 2|0);
     HEAP8[$72>>0] = $100;
     $102 = (($x$012) + -1)|0;
     $103 = ($102|0)==(0);
     if ($103) {
      break;
     } else {
      $cbr$115 = $101;$ptrA$114 = $73;$tmp1$011 = $84;$tmp3$013 = $87;$x$012 = $102;
     }
    }
    $104 = (($cbr$019) + ($scevgep$sum)|0);
    $105 = (($ptrA$018) + ($scevgep25$sum)|0);
    $106 = (($y$017) + -1)|0;
    $107 = ($106|0)==(0);
    if ($107) {
     break;
    } else {
     $cbr$019 = $104;$ptrA$018 = $105;$y$017 = $106;
    }
   }
  }
  $108 = (($comp$023) + 1)|0;
  $exitcond = ($108|0)==(2);
  if ($exitcond) {
   break;
  } else {
   $comp$023 = $108;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateVerHalf($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 var $$0 = 0, $$0232 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$126 = 0, $$sum = 0, $$sum10 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$031 = 0, $j$025 = 0, $or$cond = 0, $p1 = 0, $ptrC$033 = 0, $ptrC$127 = 0;
 var $ptrV$034 = 0, $ptrV$128 = 0, $tmp12 = 0, $tmp16 = 0, $tmp20 = 0, $tmp24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1 = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 4;
 } else {
  $1 = (($partWidth) + ($x0))|0;
  $2 = ($1>>>0)>($width>>>0);
  $3 = ($y0|0)<(0);
  $or$cond = $3 | $2;
  if ($or$cond) {
   label = 4;
  } else {
   $4 = (($y0) + 5)|0;
   $5 = (($4) + ($partHeight))|0;
   $6 = ($5>>>0)>($height>>>0);
   if ($6) {
    label = 4;
   } else {
    $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
   }
  }
 }
 if ((label|0) == 4) {
  $7 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$partWidth,$7,$partWidth);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $partWidth;
 }
 $8 = Math_imul($$04, $$05)|0;
 $9 = (($$03) + ($$05))|0;
 $$sum = (($9) + ($8))|0;
 $10 = $partHeight >>> 2;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = ($partWidth|0)==(0);
 $13 = $$05 << 2;
 $14 = (0 - ($$05))|0;
 $15 = $14 << 1;
 $16 = $$05 << 1;
 if ($12) {
  STACKTOP = sp;return;
 }
 $17 = (($$0) + ($$sum)|0);
 $18 = ($$05*5)|0;
 $$sum6 = (($$sum) + ($18))|0;
 $19 = (($$0) + ($$sum6)|0);
 $$0232 = $mb;$i$031 = $10;$ptrC$033 = $17;$ptrV$034 = $19;
 while(1) {
  $$126 = $$0232;$j$025 = $partWidth;$ptrC$127 = $ptrC$033;$ptrV$128 = $ptrV$034;
  while(1) {
   $20 = (($ptrV$128) + ($15)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = (($ptrV$128) + ($14)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (($ptrV$128) + ($$05)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = (($ptrV$128) + ($16)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = ((($ptrV$128)) + 1|0);
   $33 = HEAP8[$ptrV$128>>0]|0;
   $34 = $33&255;
   $35 = (($28) + ($22))|0;
   $36 = $35 << 2;
   $37 = (($34) + ($25))|0;
   $38 = (($ptrC$127) + ($16)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $tmp12 = ($37*20)|0;
   $41 = (($31) + 16)|0;
   $42 = (($41) - ($35))|0;
   $43 = (($42) - ($36))|0;
   $44 = (($43) + ($40))|0;
   $45 = (($44) + ($tmp12))|0;
   $46 = $45 >> 5;
   $$sum7 = (($46) + 512)|0;
   $47 = (60442 + ($$sum7)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ((($$126)) + 48|0);
   HEAP8[$49>>0] = $48;
   $50 = (($40) + ($34))|0;
   $51 = $50 << 2;
   $52 = (($25) + ($22))|0;
   $53 = (($ptrC$127) + ($$05)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $tmp16 = ($52*20)|0;
   $56 = (($28) + 16)|0;
   $57 = (($56) - ($50))|0;
   $58 = (($57) - ($51))|0;
   $59 = (($58) + ($55))|0;
   $60 = (($59) + ($tmp16))|0;
   $61 = $60 >> 5;
   $$sum8 = (($61) + 512)|0;
   $62 = (60442 + ($$sum8)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = ((($$126)) + 32|0);
   HEAP8[$64>>0] = $63;
   $65 = (($55) + ($25))|0;
   $66 = $65 << 2;
   $67 = (($40) + ($22))|0;
   $68 = HEAP8[$ptrC$127>>0]|0;
   $69 = $68&255;
   $tmp20 = ($67*20)|0;
   $70 = (($34) + 16)|0;
   $71 = (($70) - ($65))|0;
   $72 = (($71) - ($66))|0;
   $73 = (($72) + ($69))|0;
   $74 = (($73) + ($tmp20))|0;
   $75 = $74 >> 5;
   $$sum9 = (($75) + 512)|0;
   $76 = (60442 + ($$sum9)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = ((($$126)) + 16|0);
   HEAP8[$78>>0] = $77;
   $79 = (($69) + ($22))|0;
   $80 = $79 << 2;
   $81 = (($55) + ($40))|0;
   $82 = (($ptrC$127) + ($14)|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $tmp24 = ($81*20)|0;
   $85 = (($25) + 16)|0;
   $86 = (($85) - ($79))|0;
   $87 = (($86) - ($80))|0;
   $88 = (($87) + ($84))|0;
   $89 = (($88) + ($tmp24))|0;
   $90 = $89 >> 5;
   $$sum10 = (($90) + 512)|0;
   $91 = (60442 + ($$sum10)|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = ((($$126)) + 1|0);
   HEAP8[$$126>>0] = $92;
   $94 = ((($ptrC$127)) + 1|0);
   $95 = (($j$025) + -1)|0;
   $96 = ($95|0)==(0);
   if ($96) {
    break;
   } else {
    $$126 = $93;$j$025 = $95;$ptrC$127 = $94;$ptrV$128 = $32;
   }
  }
  $97 = (($ptrC$033) + ($13)|0);
  $98 = (($ptrV$034) + ($13)|0);
  $99 = ((($$0232)) + 64|0);
  $100 = (($i$031) + -1)|0;
  $101 = ($100|0)==(0);
  if ($101) {
   break;
  } else {
   $$0232 = $99;$i$031 = $100;$ptrC$033 = $97;$ptrV$034 = $98;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateVerQuarter($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight,$verOffset) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 $verOffset = $verOffset|0;
 var $$0 = 0, $$0235 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$127 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$034 = 0, $j$026 = 0, $or$cond = 0, $p1 = 0, $ptrC$036 = 0, $ptrC$1$lcssa = 0;
 var $ptrC$128 = 0, $ptrInt$038 = 0, $ptrInt$1$lcssa = 0, $ptrInt$130 = 0, $ptrV$037 = 0, $ptrV$1$lcssa = 0, $ptrV$129 = 0, $scevgep = 0, $scevgep43 = 0, $scevgep44 = 0, $scevgep45 = 0, $tmp13 = 0, $tmp17 = 0, $tmp21 = 0, $tmp25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1 = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 4;
 } else {
  $1 = (($partWidth) + ($x0))|0;
  $2 = ($1>>>0)>($width>>>0);
  $3 = ($y0|0)<(0);
  $or$cond = $3 | $2;
  if ($or$cond) {
   label = 4;
  } else {
   $4 = (($y0) + 5)|0;
   $5 = (($4) + ($partHeight))|0;
   $6 = ($5>>>0)>($height>>>0);
   if ($6) {
    label = 4;
   } else {
    $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
   }
  }
 }
 if ((label|0) == 4) {
  $7 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$partWidth,$7,$partWidth);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $partWidth;
 }
 $8 = Math_imul($$04, $$05)|0;
 $9 = (($$03) + ($$05))|0;
 $$sum = (($9) + ($8))|0;
 $10 = $partHeight >>> 2;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = (($verOffset) + 2)|0;
 $13 = Math_imul($$05, $12)|0;
 $$sum7 = (($$sum) + ($13))|0;
 $14 = (($$0) + ($$sum7)|0);
 $15 = ($$05*5)|0;
 $$sum6 = (($$sum) + ($15))|0;
 $16 = (($$0) + ($$sum6)|0);
 $17 = (($$0) + ($$sum)|0);
 $18 = ($partWidth|0)==(0);
 $19 = $$05 << 2;
 $20 = (($19) - ($partWidth))|0;
 $21 = (64 - ($partWidth))|0;
 $22 = (0 - ($$05))|0;
 $23 = $22 << 1;
 $24 = $$05 << 1;
 $$0235 = $mb;$i$034 = $10;$ptrC$036 = $17;$ptrInt$038 = $14;$ptrV$037 = $16;
 while(1) {
  if ($18) {
   $$1$lcssa = $$0235;$ptrC$1$lcssa = $ptrC$036;$ptrInt$1$lcssa = $ptrInt$038;$ptrV$1$lcssa = $ptrV$037;
  } else {
   $scevgep = (($ptrInt$038) + ($partWidth)|0);
   $scevgep44 = (($$0235) + ($partWidth)|0);
   $$127 = $$0235;$j$026 = $partWidth;$ptrC$128 = $ptrC$036;$ptrInt$130 = $ptrInt$038;$ptrV$129 = $ptrV$037;
   while(1) {
    $25 = (($ptrV$129) + ($23)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = (($ptrV$129) + ($22)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = (($ptrV$129) + ($$05)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = (($ptrV$129) + ($24)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = ((($ptrV$129)) + 1|0);
    $38 = HEAP8[$ptrV$129>>0]|0;
    $39 = $38&255;
    $40 = (($33) + ($27))|0;
    $41 = $40 << 2;
    $42 = (($39) + ($30))|0;
    $43 = (($ptrC$128) + ($24)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $tmp13 = ($42*20)|0;
    $46 = (($36) + 16)|0;
    $47 = (($46) - ($40))|0;
    $48 = (($47) - ($41))|0;
    $49 = (($48) + ($45))|0;
    $50 = (($49) + ($tmp13))|0;
    $51 = $50 >> 5;
    $$sum8 = (($51) + 512)|0;
    $52 = (60442 + ($$sum8)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = (($ptrInt$130) + ($24)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = (($54) + 1)|0;
    $59 = (($58) + ($57))|0;
    $60 = $59 >>> 1;
    $61 = $60&255;
    $62 = ((($$127)) + 48|0);
    HEAP8[$62>>0] = $61;
    $63 = (($45) + ($39))|0;
    $64 = $63 << 2;
    $65 = (($30) + ($27))|0;
    $66 = (($ptrC$128) + ($$05)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $tmp17 = ($65*20)|0;
    $69 = (($33) + 16)|0;
    $70 = (($69) - ($63))|0;
    $71 = (($70) - ($64))|0;
    $72 = (($71) + ($68))|0;
    $73 = (($72) + ($tmp17))|0;
    $74 = $73 >> 5;
    $$sum9 = (($74) + 512)|0;
    $75 = (60442 + ($$sum9)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = (($ptrInt$130) + ($$05)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = (($77) + 1)|0;
    $82 = (($81) + ($80))|0;
    $83 = $82 >>> 1;
    $84 = $83&255;
    $85 = ((($$127)) + 32|0);
    HEAP8[$85>>0] = $84;
    $86 = (($68) + ($30))|0;
    $87 = $86 << 2;
    $88 = (($45) + ($27))|0;
    $89 = HEAP8[$ptrC$128>>0]|0;
    $90 = $89&255;
    $tmp21 = ($88*20)|0;
    $91 = (($39) + 16)|0;
    $92 = (($91) - ($86))|0;
    $93 = (($92) - ($87))|0;
    $94 = (($93) + ($90))|0;
    $95 = (($94) + ($tmp21))|0;
    $96 = $95 >> 5;
    $$sum10 = (($96) + 512)|0;
    $97 = (60442 + ($$sum10)|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = HEAP8[$ptrInt$130>>0]|0;
    $101 = $100&255;
    $102 = (($99) + 1)|0;
    $103 = (($102) + ($101))|0;
    $104 = $103 >>> 1;
    $105 = $104&255;
    $106 = ((($$127)) + 16|0);
    HEAP8[$106>>0] = $105;
    $107 = (($90) + ($27))|0;
    $108 = $107 << 2;
    $109 = (($68) + ($45))|0;
    $110 = (($ptrC$128) + ($22)|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&255;
    $tmp25 = ($109*20)|0;
    $113 = (($30) + 16)|0;
    $114 = (($113) - ($107))|0;
    $115 = (($114) - ($108))|0;
    $116 = (($115) + ($112))|0;
    $117 = (($116) + ($tmp25))|0;
    $118 = $117 >> 5;
    $$sum11 = (($118) + 512)|0;
    $119 = (60442 + ($$sum11)|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120&255;
    $122 = (($ptrInt$130) + ($22)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = (($121) + 1)|0;
    $126 = (($125) + ($124))|0;
    $127 = $126 >>> 1;
    $128 = $127&255;
    $129 = ((($$127)) + 1|0);
    HEAP8[$$127>>0] = $128;
    $130 = ((($ptrC$128)) + 1|0);
    $131 = ((($ptrInt$130)) + 1|0);
    $132 = (($j$026) + -1)|0;
    $133 = ($132|0)==(0);
    if ($133) {
     break;
    } else {
     $$127 = $129;$j$026 = $132;$ptrC$128 = $130;$ptrInt$130 = $131;$ptrV$129 = $37;
    }
   }
   $scevgep43 = (($ptrC$036) + ($partWidth)|0);
   $scevgep45 = (($ptrV$037) + ($partWidth)|0);
   $$1$lcssa = $scevgep44;$ptrC$1$lcssa = $scevgep43;$ptrInt$1$lcssa = $scevgep;$ptrV$1$lcssa = $scevgep45;
  }
  $134 = (($ptrC$1$lcssa) + ($20)|0);
  $135 = (($ptrV$1$lcssa) + ($20)|0);
  $136 = (($ptrInt$1$lcssa) + ($20)|0);
  $137 = (($$1$lcssa) + ($21)|0);
  $138 = (($i$034) + -1)|0;
  $139 = ($138|0)==(0);
  if ($139) {
   break;
  } else {
   $$0235 = $137;$i$034 = $138;$ptrC$036 = $134;$ptrInt$038 = $136;$ptrV$037 = $135;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateHorHalf($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 var $$0 = 0, $$0237 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$133 = 0, $$sum = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond = 0, $or$cond11 = 0, $p1 = 0, $ptrJ$035 = 0, $ptrJ$1$lcssa = 0, $ptrJ$126 = 0, $scevgep = 0, $scevgep42 = 0, $tmp13 = 0, $tmp17 = 0;
 var $tmp2$028 = 0, $tmp21 = 0, $tmp25 = 0, $tmp3$029 = 0, $tmp4$030 = 0, $tmp5$031 = 0, $tmp6$032 = 0, $tmp6$032$phi = 0, $x$027 = 0, $y$036 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1 = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 3;
 } else {
  $1 = (($x0) + 5)|0;
  $2 = (($1) + ($partWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $4 | $3;
  $5 = (($partHeight) + ($y0))|0;
  $6 = ($5>>>0)>($height>>>0);
  $or$cond11 = $6 | $or$cond;
  if ($or$cond11) {
   label = 3;
  } else {
   $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
  }
 }
 if ((label|0) == 3) {
  $7 = (($partWidth) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$7,$partHeight,$7);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $7;
 }
 $8 = ($partHeight|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = (($$03) + 5)|0;
 $10 = Math_imul($$04, $$05)|0;
 $$sum = (($9) + ($10))|0;
 $11 = (($$0) + ($$sum)|0);
 $12 = $partWidth >>> 2;
 $13 = ($12|0)==(0);
 $14 = (($$05) - ($partWidth))|0;
 $15 = (16 - ($partWidth))|0;
 $16 = $12 << 2;
 $$0237 = $mb;$ptrJ$035 = $11;$y$036 = $partHeight;
 while(1) {
  if ($13) {
   $$1$lcssa = $$0237;$ptrJ$1$lcssa = $ptrJ$035;
  } else {
   $17 = ((($ptrJ$035)) + -1|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = ((($ptrJ$035)) + -2|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ((($ptrJ$035)) + -3|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ((($ptrJ$035)) + -4|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = ((($ptrJ$035)) + -5|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $scevgep = (($$0237) + ($16)|0);
   $$133 = $$0237;$ptrJ$126 = $ptrJ$035;$tmp2$028 = $19;$tmp3$029 = $22;$tmp4$030 = $25;$tmp5$031 = $28;$tmp6$032 = $31;$x$027 = $12;
   while(1) {
    $32 = (($tmp4$030) + ($tmp3$029))|0;
    $33 = (($tmp5$031) + ($tmp2$028))|0;
    $34 = ((($ptrJ$126)) + 1|0);
    $35 = HEAP8[$ptrJ$126>>0]|0;
    $36 = $35&255;
    $37 = $33 << 2;
    $tmp13 = ($32*20)|0;
    $38 = (($tmp6$032) + 16)|0;
    $39 = (($38) - ($33))|0;
    $40 = (($39) - ($37))|0;
    $41 = (($40) + ($36))|0;
    $42 = (($41) + ($tmp13))|0;
    $43 = $42 >> 5;
    $$sum6 = (($43) + 512)|0;
    $44 = (60442 + ($$sum6)|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = (($tmp3$029) + ($tmp2$028))|0;
    $47 = ((($$133)) + 1|0);
    HEAP8[$$133>>0] = $45;
    $48 = (($36) + ($tmp4$030))|0;
    $49 = ((($ptrJ$126)) + 2|0);
    $50 = HEAP8[$34>>0]|0;
    $51 = $50&255;
    $52 = $48 << 2;
    $tmp17 = ($46*20)|0;
    $53 = (($tmp5$031) + 16)|0;
    $54 = (($53) - ($48))|0;
    $55 = (($54) - ($52))|0;
    $56 = (($55) + ($51))|0;
    $57 = (($56) + ($tmp17))|0;
    $58 = $57 >> 5;
    $$sum7 = (($58) + 512)|0;
    $59 = (60442 + ($$sum7)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = (($36) + ($tmp2$028))|0;
    $62 = ((($$133)) + 2|0);
    HEAP8[$47>>0] = $60;
    $63 = (($51) + ($tmp3$029))|0;
    $64 = ((($ptrJ$126)) + 3|0);
    $65 = HEAP8[$49>>0]|0;
    $66 = $65&255;
    $67 = $63 << 2;
    $tmp21 = ($61*20)|0;
    $68 = (($tmp4$030) + 16)|0;
    $69 = (($68) - ($63))|0;
    $70 = (($69) - ($67))|0;
    $71 = (($70) + ($66))|0;
    $72 = (($71) + ($tmp21))|0;
    $73 = $72 >> 5;
    $$sum8 = (($73) + 512)|0;
    $74 = (60442 + ($$sum8)|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = (($51) + ($36))|0;
    $77 = ((($$133)) + 3|0);
    HEAP8[$62>>0] = $75;
    $78 = (($66) + ($tmp2$028))|0;
    $79 = ((($ptrJ$126)) + 4|0);
    $80 = HEAP8[$64>>0]|0;
    $81 = $80&255;
    $82 = $78 << 2;
    $tmp25 = ($76*20)|0;
    $83 = (($tmp3$029) + 16)|0;
    $84 = (($83) - ($78))|0;
    $85 = (($84) - ($82))|0;
    $86 = (($85) + ($81))|0;
    $87 = (($86) + ($tmp25))|0;
    $88 = $87 >> 5;
    $$sum9 = (($88) + 512)|0;
    $89 = (60442 + ($$sum9)|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = ((($$133)) + 4|0);
    HEAP8[$77>>0] = $90;
    $92 = (($x$027) + -1)|0;
    $93 = ($92|0)==(0);
    if ($93) {
     break;
    } else {
     $tmp6$032$phi = $tmp2$028;$$133 = $91;$ptrJ$126 = $79;$tmp2$028 = $81;$tmp3$029 = $66;$tmp4$030 = $51;$tmp5$031 = $36;$x$027 = $92;$tmp6$032 = $tmp6$032$phi;
    }
   }
   $scevgep42 = (($ptrJ$035) + ($16)|0);
   $$1$lcssa = $scevgep;$ptrJ$1$lcssa = $scevgep42;
  }
  $94 = (($ptrJ$1$lcssa) + ($14)|0);
  $95 = (($$1$lcssa) + ($15)|0);
  $96 = (($y$036) + -1)|0;
  $97 = ($96|0)==(0);
  if ($97) {
   break;
  } else {
   $$0237 = $95;$ptrJ$035 = $94;$y$036 = $96;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateHorQuarter($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight,$horOffset) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 $horOffset = $horOffset|0;
 var $$0 = 0, $$0238 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$129 = 0, $$pn10 = 0, $$sum = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $$tmp2$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $p1 = 0, $ptrJ$036 = 0, $ptrJ$1$lcssa = 0, $ptrJ$127 = 0, $scevgep = 0, $scevgep43 = 0, $tmp14 = 0, $tmp18 = 0, $tmp2$0$pn = 0;
 var $tmp2$030 = 0, $tmp22 = 0, $tmp26 = 0, $tmp3$0$tmp4$0 = 0, $tmp3$031 = 0, $tmp3$1 = 0, $tmp4$032 = 0, $tmp4$1 = 0, $tmp5$033 = 0, $tmp5$1 = 0, $tmp6$034 = 0, $tmp6$034$phi = 0, $tmp6$1 = 0, $x$028 = 0, $y$037 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1 = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 3;
 } else {
  $1 = (($x0) + 5)|0;
  $2 = (($1) + ($partWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $4 | $3;
  $5 = (($partHeight) + ($y0))|0;
  $6 = ($5>>>0)>($height>>>0);
  $or$cond12 = $6 | $or$cond;
  if ($or$cond12) {
   label = 3;
  } else {
   $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
  }
 }
 if ((label|0) == 3) {
  $7 = (($partWidth) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$7,$partHeight,$7);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $7;
 }
 $8 = ($partHeight|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = (($$03) + 5)|0;
 $10 = Math_imul($$04, $$05)|0;
 $$sum = (($9) + ($10))|0;
 $11 = (($$0) + ($$sum)|0);
 $12 = $partWidth >>> 2;
 $13 = ($12|0)==(0);
 $14 = (($$05) - ($partWidth))|0;
 $15 = (16 - ($partWidth))|0;
 $16 = ($horOffset|0)!=(0);
 $17 = $12 << 2;
 $$0238 = $mb;$ptrJ$036 = $11;$y$037 = $partHeight;
 while(1) {
  if ($13) {
   $$1$lcssa = $$0238;$ptrJ$1$lcssa = $ptrJ$036;
  } else {
   $18 = ((($ptrJ$036)) + -1|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ((($ptrJ$036)) + -2|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = ((($ptrJ$036)) + -3|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = ((($ptrJ$036)) + -4|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ((($ptrJ$036)) + -5|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $scevgep = (($$0238) + ($17)|0);
   $$129 = $$0238;$ptrJ$127 = $ptrJ$036;$tmp2$030 = $20;$tmp3$031 = $23;$tmp4$032 = $26;$tmp5$033 = $29;$tmp6$034 = $32;$x$028 = $12;
   while(1) {
    $33 = (($tmp4$032) + ($tmp3$031))|0;
    $34 = (($tmp5$033) + ($tmp2$030))|0;
    $35 = ((($ptrJ$127)) + 1|0);
    $36 = HEAP8[$ptrJ$127>>0]|0;
    $37 = $36&255;
    $38 = $34 << 2;
    $tmp14 = ($33*20)|0;
    $39 = (($tmp6$034) + 16)|0;
    $40 = (($39) - ($34))|0;
    $41 = (($40) - ($38))|0;
    $42 = (($41) + ($37))|0;
    $43 = (($42) + ($tmp14))|0;
    $44 = $43 >> 5;
    $$sum6 = (($44) + 512)|0;
    $45 = (60442 + ($$sum6)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $tmp3$0$tmp4$0 = $16 ? $tmp3$031 : $tmp4$032;
    $tmp6$1 = (($tmp3$0$tmp4$0) + 1)|0;
    $48 = (($tmp6$1) + ($47))|0;
    $49 = $48 >>> 1;
    $50 = $49&255;
    $51 = ((($$129)) + 1|0);
    HEAP8[$$129>>0] = $50;
    $52 = (($tmp3$031) + ($tmp2$030))|0;
    $53 = (($37) + ($tmp4$032))|0;
    $54 = ((($ptrJ$127)) + 2|0);
    $55 = HEAP8[$35>>0]|0;
    $56 = $55&255;
    $57 = $53 << 2;
    $tmp18 = ($52*20)|0;
    $58 = (($tmp5$033) + 16)|0;
    $59 = (($58) - ($53))|0;
    $60 = (($59) - ($57))|0;
    $61 = (($60) + ($56))|0;
    $62 = (($61) + ($tmp18))|0;
    $63 = $62 >> 5;
    $$sum7 = (($63) + 512)|0;
    $64 = (60442 + ($$sum7)|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $tmp2$0$pn = $16 ? $tmp2$030 : $tmp3$031;
    $tmp5$1 = (($tmp2$0$pn) + 1)|0;
    $67 = (($tmp5$1) + ($66))|0;
    $68 = $67 >>> 1;
    $69 = $68&255;
    $70 = ((($$129)) + 2|0);
    HEAP8[$51>>0] = $69;
    $71 = (($37) + ($tmp2$030))|0;
    $72 = (($56) + ($tmp3$031))|0;
    $73 = ((($ptrJ$127)) + 3|0);
    $74 = HEAP8[$54>>0]|0;
    $75 = $74&255;
    $76 = $72 << 2;
    $tmp22 = ($71*20)|0;
    $77 = (($tmp4$032) + 16)|0;
    $78 = (($77) - ($72))|0;
    $79 = (($78) - ($76))|0;
    $80 = (($79) + ($75))|0;
    $81 = (($80) + ($tmp22))|0;
    $82 = $81 >> 5;
    $$sum8 = (($82) + 512)|0;
    $83 = (60442 + ($$sum8)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $$tmp2$0 = $16 ? $37 : $tmp2$030;
    $tmp4$1 = (($$tmp2$0) + 1)|0;
    $86 = (($tmp4$1) + ($85))|0;
    $87 = $86 >>> 1;
    $88 = $87&255;
    $89 = ((($$129)) + 3|0);
    HEAP8[$70>>0] = $88;
    $90 = (($56) + ($37))|0;
    $91 = (($75) + ($tmp2$030))|0;
    $92 = ((($ptrJ$127)) + 4|0);
    $93 = HEAP8[$73>>0]|0;
    $94 = $93&255;
    $95 = $91 << 2;
    $tmp26 = ($90*20)|0;
    $96 = (($tmp3$031) + 16)|0;
    $97 = (($96) - ($91))|0;
    $98 = (($97) - ($95))|0;
    $99 = (($98) + ($94))|0;
    $100 = (($99) + ($tmp26))|0;
    $101 = $100 >> 5;
    $$sum9 = (($101) + 512)|0;
    $102 = (60442 + ($$sum9)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $$pn10 = $16 ? $56 : $37;
    $tmp3$1 = (($$pn10) + 1)|0;
    $105 = (($tmp3$1) + ($104))|0;
    $106 = $105 >>> 1;
    $107 = $106&255;
    $108 = ((($$129)) + 4|0);
    HEAP8[$89>>0] = $107;
    $109 = (($x$028) + -1)|0;
    $110 = ($109|0)==(0);
    if ($110) {
     break;
    } else {
     $tmp6$034$phi = $tmp2$030;$$129 = $108;$ptrJ$127 = $92;$tmp2$030 = $94;$tmp3$031 = $75;$tmp4$032 = $56;$tmp5$033 = $37;$x$028 = $109;$tmp6$034 = $tmp6$034$phi;
    }
   }
   $scevgep43 = (($ptrJ$036) + ($17)|0);
   $$1$lcssa = $scevgep;$ptrJ$1$lcssa = $scevgep43;
  }
  $111 = (($ptrJ$1$lcssa) + ($14)|0);
  $112 = (($$1$lcssa) + ($15)|0);
  $113 = (($y$037) + -1)|0;
  $114 = ($113|0)==(0);
  if ($114) {
   break;
  } else {
   $$0238 = $112;$ptrJ$036 = $111;$y$037 = $113;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateHorVerQuarter($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight,$horVerOffset) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 $horVerOffset = $horVerOffset|0;
 var $$0 = 0, $$0272 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$1$lcssa$lcssa = 0, $$159 = 0, $$254 = 0, $$3$lcssa = 0, $$348 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum6 = 0, $$sum779 = 0, $$sum8 = 0, $$sum89 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $p1 = 0, $ptrC$055 = 0, $ptrC$1$lcssa = 0, $ptrC$149 = 0;
 var $ptrJ$073 = 0, $ptrJ$1$lcssa = 0, $ptrJ$160 = 0, $ptrV$056 = 0, $ptrV$1$lcssa = 0, $ptrV$150 = 0, $scevgep = 0, $scevgep85 = 0, $scevgep86 = 0, $scevgep87 = 0, $scevgep88 = 0, $tmp2$062 = 0, $tmp20 = 0, $tmp24 = 0, $tmp28 = 0, $tmp3$063 = 0, $tmp32 = 0, $tmp35 = 0, $tmp39 = 0, $tmp4$064 = 0;
 var $tmp43 = 0, $tmp47 = 0, $tmp5$065 = 0, $tmp6$066 = 0, $tmp6$066$phi = 0, $x$061 = 0, $x$151 = 0, $y$074 = 0, $y$157 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1 = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 4;
 } else {
  $1 = (($x0) + 5)|0;
  $2 = (($1) + ($partWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $4 | $3;
  if ($or$cond) {
   label = 4;
  } else {
   $5 = (($y0) + 5)|0;
   $6 = (($5) + ($partHeight))|0;
   $7 = ($6>>>0)>($height>>>0);
   if ($7) {
    label = 4;
   } else {
    $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = (($partWidth) + 5)|0;
  $9 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$8,$9,$8);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $8;
 }
 $10 = Math_imul($$04, $$05)|0;
 $11 = (($10) + ($$03))|0;
 $12 = $horVerOffset & 1;
 $$sum779 = $12 | 2;
 $$sum8 = (($$sum779) + ($$05))|0;
 $$sum9 = (($$sum8) + ($11))|0;
 $13 = (($$0) + ($$sum9)|0);
 $14 = ($partHeight|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $horVerOffset >>> 1;
 $16 = $15 & 1;
 $17 = $16 | 2;
 $18 = Math_imul($$05, $17)|0;
 $$sum = (($18) + 5)|0;
 $$sum6 = (($$sum) + ($11))|0;
 $19 = (($$0) + ($$sum6)|0);
 $20 = $partWidth >>> 2;
 $21 = ($20|0)==(0);
 $22 = (($$05) - ($partWidth))|0;
 $23 = (16 - ($partWidth))|0;
 $24 = $20 << 2;
 $$0272 = $mb;$ptrJ$073 = $19;$y$074 = $partHeight;
 while(1) {
  if ($21) {
   $$1$lcssa = $$0272;$ptrJ$1$lcssa = $ptrJ$073;
  } else {
   $25 = ((($ptrJ$073)) + -1|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = ((($ptrJ$073)) + -2|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = ((($ptrJ$073)) + -3|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = ((($ptrJ$073)) + -4|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ((($ptrJ$073)) + -5|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $scevgep87 = (($$0272) + ($24)|0);
   $$159 = $$0272;$ptrJ$160 = $ptrJ$073;$tmp2$062 = $27;$tmp3$063 = $30;$tmp4$064 = $33;$tmp5$065 = $36;$tmp6$066 = $39;$x$061 = $20;
   while(1) {
    $40 = (($tmp4$064) + ($tmp3$063))|0;
    $41 = (($tmp5$065) + ($tmp2$062))|0;
    $42 = ((($ptrJ$160)) + 1|0);
    $43 = HEAP8[$ptrJ$160>>0]|0;
    $44 = $43&255;
    $45 = $41 << 2;
    $tmp20 = ($40*20)|0;
    $46 = (($tmp6$066) + 16)|0;
    $47 = (($46) - ($41))|0;
    $48 = (($47) - ($45))|0;
    $49 = (($48) + ($44))|0;
    $50 = (($49) + ($tmp20))|0;
    $51 = $50 >> 5;
    $$sum15 = (($51) + 512)|0;
    $52 = (60442 + ($$sum15)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = (($tmp3$063) + ($tmp2$062))|0;
    $55 = ((($$159)) + 1|0);
    HEAP8[$$159>>0] = $53;
    $56 = (($44) + ($tmp4$064))|0;
    $57 = ((($ptrJ$160)) + 2|0);
    $58 = HEAP8[$42>>0]|0;
    $59 = $58&255;
    $60 = $56 << 2;
    $tmp24 = ($54*20)|0;
    $61 = (($tmp5$065) + 16)|0;
    $62 = (($61) - ($56))|0;
    $63 = (($62) - ($60))|0;
    $64 = (($63) + ($59))|0;
    $65 = (($64) + ($tmp24))|0;
    $66 = $65 >> 5;
    $$sum16 = (($66) + 512)|0;
    $67 = (60442 + ($$sum16)|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = (($44) + ($tmp2$062))|0;
    $70 = ((($$159)) + 2|0);
    HEAP8[$55>>0] = $68;
    $71 = (($59) + ($tmp3$063))|0;
    $72 = ((($ptrJ$160)) + 3|0);
    $73 = HEAP8[$57>>0]|0;
    $74 = $73&255;
    $75 = $71 << 2;
    $tmp28 = ($69*20)|0;
    $76 = (($tmp4$064) + 16)|0;
    $77 = (($76) - ($71))|0;
    $78 = (($77) - ($75))|0;
    $79 = (($78) + ($74))|0;
    $80 = (($79) + ($tmp28))|0;
    $81 = $80 >> 5;
    $$sum17 = (($81) + 512)|0;
    $82 = (60442 + ($$sum17)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = (($59) + ($44))|0;
    $85 = ((($$159)) + 3|0);
    HEAP8[$70>>0] = $83;
    $86 = (($74) + ($tmp2$062))|0;
    $87 = ((($ptrJ$160)) + 4|0);
    $88 = HEAP8[$72>>0]|0;
    $89 = $88&255;
    $90 = $86 << 2;
    $tmp32 = ($84*20)|0;
    $91 = (($tmp3$063) + 16)|0;
    $92 = (($91) - ($86))|0;
    $93 = (($92) - ($90))|0;
    $94 = (($93) + ($89))|0;
    $95 = (($94) + ($tmp32))|0;
    $96 = $95 >> 5;
    $$sum18 = (($96) + 512)|0;
    $97 = (60442 + ($$sum18)|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = ((($$159)) + 4|0);
    HEAP8[$85>>0] = $98;
    $100 = (($x$061) + -1)|0;
    $101 = ($100|0)==(0);
    if ($101) {
     break;
    } else {
     $tmp6$066$phi = $tmp2$062;$$159 = $99;$ptrJ$160 = $87;$tmp2$062 = $89;$tmp3$063 = $74;$tmp4$064 = $59;$tmp5$065 = $44;$x$061 = $100;$tmp6$066 = $tmp6$066$phi;
    }
   }
   $scevgep88 = (($ptrJ$073) + ($24)|0);
   $$1$lcssa = $scevgep87;$ptrJ$1$lcssa = $scevgep88;
  }
  $102 = (($ptrJ$1$lcssa) + ($22)|0);
  $103 = (($$1$lcssa) + ($23)|0);
  $104 = (($y$074) + -1)|0;
  $105 = ($104|0)==(0);
  if ($105) {
   $$1$lcssa$lcssa = $$1$lcssa;
   break;
  } else {
   $$0272 = $103;$ptrJ$073 = $102;$y$074 = $104;
  }
 }
 $106 = $partHeight >>> 2;
 $107 = ($106|0)==(0);
 if ($107) {
  STACKTOP = sp;return;
 }
 $108 = ($$05*5)|0;
 $$sum10 = (($$sum9) + ($108))|0;
 $109 = (($$0) + ($$sum10)|0);
 $110 = $partHeight << 4;
 $$sum89 = (($23) - ($110))|0;
 $111 = (($$1$lcssa$lcssa) + ($$sum89)|0);
 $112 = ($partWidth|0)==(0);
 $113 = $$05 << 2;
 $114 = (($113) - ($partWidth))|0;
 $115 = (64 - ($partWidth))|0;
 $116 = (0 - ($$05))|0;
 $117 = $116 << 1;
 $118 = $$05 << 1;
 $$254 = $111;$ptrC$055 = $13;$ptrV$056 = $109;$y$157 = $106;
 while(1) {
  if ($112) {
   $$3$lcssa = $$254;$ptrC$1$lcssa = $ptrC$055;$ptrV$1$lcssa = $ptrV$056;
  } else {
   $scevgep85 = (($$254) + ($partWidth)|0);
   $$348 = $$254;$ptrC$149 = $ptrC$055;$ptrV$150 = $ptrV$056;$x$151 = $partWidth;
   while(1) {
    $119 = (($ptrV$150) + ($117)|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120&255;
    $122 = (($ptrV$150) + ($116)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = (($ptrV$150) + ($$05)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = (($ptrV$150) + ($118)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ((($ptrV$150)) + 1|0);
    $132 = HEAP8[$ptrV$150>>0]|0;
    $133 = $132&255;
    $134 = (($127) + ($121))|0;
    $135 = $134 << 2;
    $136 = (($133) + ($124))|0;
    $137 = (($ptrC$149) + ($118)|0);
    $138 = HEAP8[$137>>0]|0;
    $139 = $138&255;
    $tmp35 = ($136*20)|0;
    $140 = (($130) + 16)|0;
    $141 = (($140) - ($134))|0;
    $142 = (($141) - ($135))|0;
    $143 = (($142) + ($139))|0;
    $144 = (($143) + ($tmp35))|0;
    $145 = $144 >> 5;
    $$sum11 = (($145) + 512)|0;
    $146 = (60442 + ($$sum11)|0);
    $147 = HEAP8[$146>>0]|0;
    $148 = $147&255;
    $149 = ((($$348)) + 48|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = $150&255;
    $152 = (($148) + 1)|0;
    $153 = (($152) + ($151))|0;
    $154 = $153 >>> 1;
    $155 = $154&255;
    HEAP8[$149>>0] = $155;
    $156 = (($139) + ($133))|0;
    $157 = $156 << 2;
    $158 = (($124) + ($121))|0;
    $159 = (($ptrC$149) + ($$05)|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $160&255;
    $tmp39 = ($158*20)|0;
    $162 = (($127) + 16)|0;
    $163 = (($162) - ($156))|0;
    $164 = (($163) - ($157))|0;
    $165 = (($164) + ($161))|0;
    $166 = (($165) + ($tmp39))|0;
    $167 = $166 >> 5;
    $$sum12 = (($167) + 512)|0;
    $168 = (60442 + ($$sum12)|0);
    $169 = HEAP8[$168>>0]|0;
    $170 = $169&255;
    $171 = ((($$348)) + 32|0);
    $172 = HEAP8[$171>>0]|0;
    $173 = $172&255;
    $174 = (($170) + 1)|0;
    $175 = (($174) + ($173))|0;
    $176 = $175 >>> 1;
    $177 = $176&255;
    HEAP8[$171>>0] = $177;
    $178 = HEAP8[$ptrC$149>>0]|0;
    $179 = $178&255;
    $180 = (($161) + ($124))|0;
    $181 = $180 << 2;
    $182 = (($139) + ($121))|0;
    $tmp43 = ($182*20)|0;
    $183 = (($133) + 16)|0;
    $184 = (($183) - ($180))|0;
    $185 = (($184) - ($181))|0;
    $186 = (($185) + ($179))|0;
    $187 = (($186) + ($tmp43))|0;
    $188 = $187 >> 5;
    $$sum13 = (($188) + 512)|0;
    $189 = (60442 + ($$sum13)|0);
    $190 = HEAP8[$189>>0]|0;
    $191 = $190&255;
    $192 = ((($$348)) + 16|0);
    $193 = HEAP8[$192>>0]|0;
    $194 = $193&255;
    $195 = (($191) + 1)|0;
    $196 = (($195) + ($194))|0;
    $197 = $196 >>> 1;
    $198 = $197&255;
    HEAP8[$192>>0] = $198;
    $199 = (($ptrC$149) + ($116)|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200&255;
    $202 = (($179) + ($121))|0;
    $203 = $202 << 2;
    $204 = (($161) + ($139))|0;
    $tmp47 = ($204*20)|0;
    $205 = (($124) + 16)|0;
    $206 = (($205) - ($202))|0;
    $207 = (($206) - ($203))|0;
    $208 = (($207) + ($201))|0;
    $209 = (($208) + ($tmp47))|0;
    $210 = $209 >> 5;
    $$sum14 = (($210) + 512)|0;
    $211 = (60442 + ($$sum14)|0);
    $212 = HEAP8[$211>>0]|0;
    $213 = $212&255;
    $214 = HEAP8[$$348>>0]|0;
    $215 = $214&255;
    $216 = (($213) + 1)|0;
    $217 = (($216) + ($215))|0;
    $218 = $217 >>> 1;
    $219 = $218&255;
    $220 = ((($$348)) + 1|0);
    HEAP8[$$348>>0] = $219;
    $221 = ((($ptrC$149)) + 1|0);
    $222 = (($x$151) + -1)|0;
    $223 = ($222|0)==(0);
    if ($223) {
     break;
    } else {
     $$348 = $220;$ptrC$149 = $221;$ptrV$150 = $131;$x$151 = $222;
    }
   }
   $scevgep = (($ptrC$055) + ($partWidth)|0);
   $scevgep86 = (($ptrV$056) + ($partWidth)|0);
   $$3$lcssa = $scevgep85;$ptrC$1$lcssa = $scevgep;$ptrV$1$lcssa = $scevgep86;
  }
  $224 = (($ptrC$1$lcssa) + ($114)|0);
  $225 = (($ptrV$1$lcssa) + ($114)|0);
  $226 = (($$3$lcssa) + ($115)|0);
  $227 = (($y$157) + -1)|0;
  $228 = ($227|0)==(0);
  if ($228) {
   break;
  } else {
   $$254 = $226;$ptrC$055 = $224;$ptrV$056 = $225;$y$157 = $227;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateMidHalf($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 var $$0 = 0, $$0246 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$140 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum10 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b1$065 = 0;
 var $b1$1$lcssa = 0, $b1$157 = 0, $or$cond = 0, $p1 = 0, $phitmp = 0, $ptrC$048 = 0, $ptrC$1$lcssa = 0, $ptrC$142 = 0, $ptrJ$066 = 0, $ptrJ$1$lcssa = 0, $ptrJ$158 = 0, $ptrV$049 = 0, $ptrV$1$lcssa = 0, $ptrV$143 = 0, $scevgep = 0, $scevgep74 = 0, $scevgep75 = 0, $scevgep76 = 0, $scevgep77 = 0, $table = 0;
 var $tmp12 = 0, $tmp16 = 0, $tmp2$052 = 0, $tmp20 = 0, $tmp24 = 0, $tmp27 = 0, $tmp3$053 = 0, $tmp31 = 0, $tmp35 = 0, $tmp39 = 0, $tmp4$054 = 0, $tmp5$055 = 0, $tmp6$056 = 0, $tmp6$056$phi = 0, $x$051 = 0, $x$141 = 0, $y$064 = 0, $y$147 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1 = sp + 1344|0;
 $table = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 5;
 } else {
  $1 = (($x0) + 5)|0;
  $2 = (($1) + ($partWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $4 | $3;
  if ($or$cond) {
   label = 5;
  } else {
   $5 = (($y0) + 5)|0;
   $6 = (($5) + ($partHeight))|0;
   $7 = ($6>>>0)>($height>>>0);
   if ($7) {
    label = 5;
   } else {
    $$pre = (($partHeight) + 5)|0;
    $phitmp = (($x0) + 5)|0;
    $$0 = $ref;$$03 = $phitmp;$$04 = $y0;$$05 = $width;$$pre$phiZ2D = $$pre;
   }
  }
 }
 if ((label|0) == 5) {
  $8 = (($partWidth) + 5)|0;
  $9 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$8,$9,$8);
  $$0 = $p1;$$03 = 5;$$04 = 0;$$05 = $8;$$pre$phiZ2D = $9;
 }
 $10 = ($$pre$phiZ2D|0)==(0);
 if (!($10)) {
  $11 = Math_imul($$04, $$05)|0;
  $$sum = (($$03) + ($11))|0;
  $12 = (($$0) + ($$sum)|0);
  $13 = $partWidth >>> 2;
  $14 = ($13|0)==(0);
  $15 = (($$05) - ($partWidth))|0;
  $16 = $13 << 2;
  $b1$065 = $table;$ptrJ$066 = $12;$y$064 = $$pre$phiZ2D;
  while(1) {
   if ($14) {
    $b1$1$lcssa = $b1$065;$ptrJ$1$lcssa = $ptrJ$066;
   } else {
    $17 = ((($ptrJ$066)) + -1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = ((($ptrJ$066)) + -2|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = ((($ptrJ$066)) + -3|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = ((($ptrJ$066)) + -4|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = ((($ptrJ$066)) + -5|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $scevgep76 = (($b1$065) + ($16<<2)|0);
    $b1$157 = $b1$065;$ptrJ$158 = $ptrJ$066;$tmp2$052 = $19;$tmp3$053 = $22;$tmp4$054 = $25;$tmp5$055 = $28;$tmp6$056 = $31;$x$051 = $13;
    while(1) {
     $32 = (($tmp4$054) + ($tmp3$053))|0;
     $33 = (($tmp5$055) + ($tmp2$052))|0;
     $34 = ((($ptrJ$158)) + 1|0);
     $35 = HEAP8[$ptrJ$158>>0]|0;
     $36 = $35&255;
     $37 = $33 << 2;
     $tmp12 = ($32*20)|0;
     $38 = (($tmp6$056) - ($33))|0;
     $39 = (($38) - ($37))|0;
     $40 = (($39) + ($36))|0;
     $41 = (($40) + ($tmp12))|0;
     $42 = ((($b1$157)) + 4|0);
     HEAP32[$b1$157>>2] = $41;
     $43 = (($tmp3$053) + ($tmp2$052))|0;
     $44 = (($36) + ($tmp4$054))|0;
     $45 = ((($ptrJ$158)) + 2|0);
     $46 = HEAP8[$34>>0]|0;
     $47 = $46&255;
     $48 = $44 << 2;
     $tmp16 = ($43*20)|0;
     $49 = (($tmp5$055) - ($44))|0;
     $50 = (($49) + ($47))|0;
     $51 = (($50) - ($48))|0;
     $52 = (($51) + ($tmp16))|0;
     $53 = ((($b1$157)) + 8|0);
     HEAP32[$42>>2] = $52;
     $54 = (($36) + ($tmp2$052))|0;
     $55 = (($47) + ($tmp3$053))|0;
     $56 = ((($ptrJ$158)) + 3|0);
     $57 = HEAP8[$45>>0]|0;
     $58 = $57&255;
     $59 = $55 << 2;
     $tmp20 = ($54*20)|0;
     $60 = (($tmp4$054) - ($55))|0;
     $61 = (($60) + ($58))|0;
     $62 = (($61) - ($59))|0;
     $63 = (($62) + ($tmp20))|0;
     $64 = ((($b1$157)) + 12|0);
     HEAP32[$53>>2] = $63;
     $65 = (($47) + ($36))|0;
     $66 = (($58) + ($tmp2$052))|0;
     $67 = ((($ptrJ$158)) + 4|0);
     $68 = HEAP8[$56>>0]|0;
     $69 = $68&255;
     $70 = $66 << 2;
     $tmp24 = ($65*20)|0;
     $71 = (($tmp3$053) - ($66))|0;
     $72 = (($71) + ($69))|0;
     $73 = (($72) - ($70))|0;
     $74 = (($73) + ($tmp24))|0;
     $75 = ((($b1$157)) + 16|0);
     HEAP32[$64>>2] = $74;
     $76 = (($x$051) + -1)|0;
     $77 = ($76|0)==(0);
     if ($77) {
      break;
     } else {
      $tmp6$056$phi = $tmp2$052;$b1$157 = $75;$ptrJ$158 = $67;$tmp2$052 = $69;$tmp3$053 = $58;$tmp4$054 = $47;$tmp5$055 = $36;$x$051 = $76;$tmp6$056 = $tmp6$056$phi;
     }
    }
    $scevgep77 = (($ptrJ$066) + ($16)|0);
    $b1$1$lcssa = $scevgep76;$ptrJ$1$lcssa = $scevgep77;
   }
   $78 = (($ptrJ$1$lcssa) + ($15)|0);
   $79 = (($y$064) + -1)|0;
   $80 = ($79|0)==(0);
   if ($80) {
    break;
   } else {
    $b1$065 = $b1$1$lcssa;$ptrJ$066 = $78;$y$064 = $79;
   }
  }
 }
 $81 = $partHeight >>> 2;
 $82 = ($81|0)==(0);
 if ($82) {
  STACKTOP = sp;return;
 }
 $$sum6 = ($partWidth*6)|0;
 $83 = (($table) + ($$sum6<<2)|0);
 $84 = (($table) + ($partWidth<<2)|0);
 $85 = ($partWidth|0)==(0);
 $86 = (64 - ($partWidth))|0;
 $87 = ($partWidth*3)|0;
 $88 = (0 - ($partWidth))|0;
 $89 = $88 << 1;
 $90 = $partWidth << 1;
 $$0246 = $mb;$ptrC$048 = $84;$ptrV$049 = $83;$y$147 = $81;
 while(1) {
  if ($85) {
   $$1$lcssa = $$0246;$ptrC$1$lcssa = $ptrC$048;$ptrV$1$lcssa = $ptrV$049;
  } else {
   $scevgep74 = (($$0246) + ($partWidth)|0);
   $$140 = $$0246;$ptrC$142 = $ptrC$048;$ptrV$143 = $ptrV$049;$x$141 = $partWidth;
   while(1) {
    $91 = (($ptrV$143) + ($89<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($ptrV$143) + ($88<<2)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($ptrV$143) + ($partWidth<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($ptrV$143) + ($90<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ((($ptrV$143)) + 4|0);
    $100 = HEAP32[$ptrV$143>>2]|0;
    $101 = (($96) + ($92))|0;
    $102 = $101 << 2;
    $103 = (($100) + ($94))|0;
    $104 = (($ptrC$142) + ($90<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    $tmp27 = ($103*20)|0;
    $106 = (($98) + 512)|0;
    $107 = (($106) - ($101))|0;
    $108 = (($107) - ($102))|0;
    $109 = (($108) + ($105))|0;
    $110 = (($109) + ($tmp27))|0;
    $111 = $110 >> 10;
    $$sum7 = (($111) + 512)|0;
    $112 = (60442 + ($$sum7)|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = ((($$140)) + 48|0);
    HEAP8[$114>>0] = $113;
    $115 = (($105) + ($100))|0;
    $116 = $115 << 2;
    $117 = (($94) + ($92))|0;
    $118 = (($ptrC$142) + ($partWidth<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $tmp31 = ($117*20)|0;
    $120 = (($96) + 512)|0;
    $121 = (($120) - ($115))|0;
    $122 = (($121) - ($116))|0;
    $123 = (($122) + ($119))|0;
    $124 = (($123) + ($tmp31))|0;
    $125 = $124 >> 10;
    $$sum8 = (($125) + 512)|0;
    $126 = (60442 + ($$sum8)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = ((($$140)) + 32|0);
    HEAP8[$128>>0] = $127;
    $129 = HEAP32[$ptrC$142>>2]|0;
    $130 = (($119) + ($94))|0;
    $131 = $130 << 2;
    $132 = (($105) + ($92))|0;
    $tmp35 = ($132*20)|0;
    $133 = (($100) + 512)|0;
    $134 = (($133) - ($130))|0;
    $135 = (($134) - ($131))|0;
    $136 = (($135) + ($129))|0;
    $137 = (($136) + ($tmp35))|0;
    $138 = $137 >> 10;
    $$sum9 = (($138) + 512)|0;
    $139 = (60442 + ($$sum9)|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = ((($$140)) + 16|0);
    HEAP8[$141>>0] = $140;
    $142 = (($ptrC$142) + ($88<<2)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (($129) + ($92))|0;
    $145 = $144 << 2;
    $146 = (($119) + ($105))|0;
    $tmp39 = ($146*20)|0;
    $147 = (($94) + 512)|0;
    $148 = (($147) - ($144))|0;
    $149 = (($148) - ($145))|0;
    $150 = (($149) + ($143))|0;
    $151 = (($150) + ($tmp39))|0;
    $152 = $151 >> 10;
    $$sum10 = (($152) + 512)|0;
    $153 = (60442 + ($$sum10)|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = ((($$140)) + 1|0);
    HEAP8[$$140>>0] = $154;
    $156 = ((($ptrC$142)) + 4|0);
    $157 = (($x$141) + -1)|0;
    $158 = ($157|0)==(0);
    if ($158) {
     break;
    } else {
     $$140 = $155;$ptrC$142 = $156;$ptrV$143 = $99;$x$141 = $157;
    }
   }
   $scevgep = (($ptrC$048) + ($partWidth<<2)|0);
   $scevgep75 = (($ptrV$049) + ($partWidth<<2)|0);
   $$1$lcssa = $scevgep74;$ptrC$1$lcssa = $scevgep;$ptrV$1$lcssa = $scevgep75;
  }
  $159 = (($$1$lcssa) + ($86)|0);
  $160 = (($ptrC$1$lcssa) + ($87<<2)|0);
  $161 = (($ptrV$1$lcssa) + ($87<<2)|0);
  $162 = (($y$147) + -1)|0;
  $163 = ($162|0)==(0);
  if ($163) {
   break;
  } else {
   $$0246 = $159;$ptrC$048 = $160;$ptrV$049 = $161;$y$147 = $162;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateMidVerQuarter($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight,$verOffset) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 $verOffset = $verOffset|0;
 var $$0 = 0, $$0253 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$145 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b1$073 = 0, $b1$1$lcssa = 0, $b1$165 = 0, $or$cond = 0;
 var $p1 = 0, $phitmp = 0, $ptrC$055 = 0, $ptrC$1$lcssa = 0, $ptrC$147 = 0, $ptrInt$057 = 0, $ptrInt$1$lcssa = 0, $ptrInt$149 = 0, $ptrJ$074 = 0, $ptrJ$1$lcssa = 0, $ptrJ$166 = 0, $ptrV$056 = 0, $ptrV$1$lcssa = 0, $ptrV$148 = 0, $scevgep = 0, $scevgep83 = 0, $scevgep84 = 0, $scevgep85 = 0, $scevgep86 = 0, $scevgep87 = 0;
 var $table = 0, $tmp17 = 0, $tmp2$060 = 0, $tmp21 = 0, $tmp25 = 0, $tmp29 = 0, $tmp3$061 = 0, $tmp32 = 0, $tmp36 = 0, $tmp4$062 = 0, $tmp40 = 0, $tmp44 = 0, $tmp5$063 = 0, $tmp6$064 = 0, $tmp6$064$phi = 0, $x$059 = 0, $x$146 = 0, $y$072 = 0, $y$154 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1 = sp + 1344|0;
 $table = sp;
 $0 = ($x0|0)<(0);
 if ($0) {
  label = 5;
 } else {
  $1 = (($x0) + 5)|0;
  $2 = (($1) + ($partWidth))|0;
  $3 = ($2>>>0)>($width>>>0);
  $4 = ($y0|0)<(0);
  $or$cond = $4 | $3;
  if ($or$cond) {
   label = 5;
  } else {
   $5 = (($y0) + 5)|0;
   $6 = (($5) + ($partHeight))|0;
   $7 = ($6>>>0)>($height>>>0);
   if ($7) {
    label = 5;
   } else {
    $$pre = (($partHeight) + 5)|0;
    $phitmp = (($x0) + 5)|0;
    $$0 = $ref;$$03 = $phitmp;$$04 = $y0;$$05 = $width;$$pre$phiZ2D = $$pre;
   }
  }
 }
 if ((label|0) == 5) {
  $8 = (($partWidth) + 5)|0;
  $9 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$8,$9,$8);
  $$0 = $p1;$$03 = 5;$$04 = 0;$$05 = $8;$$pre$phiZ2D = $9;
 }
 $10 = ($$pre$phiZ2D|0)==(0);
 if (!($10)) {
  $11 = Math_imul($$04, $$05)|0;
  $$sum = (($$03) + ($11))|0;
  $12 = (($$0) + ($$sum)|0);
  $13 = $partWidth >>> 2;
  $14 = ($13|0)==(0);
  $15 = (($$05) - ($partWidth))|0;
  $16 = $13 << 2;
  $b1$073 = $table;$ptrJ$074 = $12;$y$072 = $$pre$phiZ2D;
  while(1) {
   if ($14) {
    $b1$1$lcssa = $b1$073;$ptrJ$1$lcssa = $ptrJ$074;
   } else {
    $17 = ((($ptrJ$074)) + -1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = ((($ptrJ$074)) + -2|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = ((($ptrJ$074)) + -3|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = ((($ptrJ$074)) + -4|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = ((($ptrJ$074)) + -5|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $scevgep86 = (($b1$073) + ($16<<2)|0);
    $b1$165 = $b1$073;$ptrJ$166 = $ptrJ$074;$tmp2$060 = $19;$tmp3$061 = $22;$tmp4$062 = $25;$tmp5$063 = $28;$tmp6$064 = $31;$x$059 = $13;
    while(1) {
     $32 = (($tmp4$062) + ($tmp3$061))|0;
     $33 = (($tmp5$063) + ($tmp2$060))|0;
     $34 = ((($ptrJ$166)) + 1|0);
     $35 = HEAP8[$ptrJ$166>>0]|0;
     $36 = $35&255;
     $37 = $33 << 2;
     $tmp17 = ($32*20)|0;
     $38 = (($tmp6$064) - ($33))|0;
     $39 = (($38) - ($37))|0;
     $40 = (($39) + ($36))|0;
     $41 = (($40) + ($tmp17))|0;
     $42 = ((($b1$165)) + 4|0);
     HEAP32[$b1$165>>2] = $41;
     $43 = (($tmp3$061) + ($tmp2$060))|0;
     $44 = (($36) + ($tmp4$062))|0;
     $45 = ((($ptrJ$166)) + 2|0);
     $46 = HEAP8[$34>>0]|0;
     $47 = $46&255;
     $48 = $44 << 2;
     $tmp21 = ($43*20)|0;
     $49 = (($tmp5$063) - ($44))|0;
     $50 = (($49) + ($47))|0;
     $51 = (($50) - ($48))|0;
     $52 = (($51) + ($tmp21))|0;
     $53 = ((($b1$165)) + 8|0);
     HEAP32[$42>>2] = $52;
     $54 = (($36) + ($tmp2$060))|0;
     $55 = (($47) + ($tmp3$061))|0;
     $56 = ((($ptrJ$166)) + 3|0);
     $57 = HEAP8[$45>>0]|0;
     $58 = $57&255;
     $59 = $55 << 2;
     $tmp25 = ($54*20)|0;
     $60 = (($tmp4$062) - ($55))|0;
     $61 = (($60) + ($58))|0;
     $62 = (($61) - ($59))|0;
     $63 = (($62) + ($tmp25))|0;
     $64 = ((($b1$165)) + 12|0);
     HEAP32[$53>>2] = $63;
     $65 = (($47) + ($36))|0;
     $66 = (($58) + ($tmp2$060))|0;
     $67 = ((($ptrJ$166)) + 4|0);
     $68 = HEAP8[$56>>0]|0;
     $69 = $68&255;
     $70 = $66 << 2;
     $tmp29 = ($65*20)|0;
     $71 = (($tmp3$061) - ($66))|0;
     $72 = (($71) + ($69))|0;
     $73 = (($72) - ($70))|0;
     $74 = (($73) + ($tmp29))|0;
     $75 = ((($b1$165)) + 16|0);
     HEAP32[$64>>2] = $74;
     $76 = (($x$059) + -1)|0;
     $77 = ($76|0)==(0);
     if ($77) {
      break;
     } else {
      $tmp6$064$phi = $tmp2$060;$b1$165 = $75;$ptrJ$166 = $67;$tmp2$060 = $69;$tmp3$061 = $58;$tmp4$062 = $47;$tmp5$063 = $36;$x$059 = $76;$tmp6$064 = $tmp6$064$phi;
     }
    }
    $scevgep87 = (($ptrJ$074) + ($16)|0);
    $b1$1$lcssa = $scevgep86;$ptrJ$1$lcssa = $scevgep87;
   }
   $78 = (($ptrJ$1$lcssa) + ($15)|0);
   $79 = (($y$072) + -1)|0;
   $80 = ($79|0)==(0);
   if ($80) {
    break;
   } else {
    $b1$073 = $b1$1$lcssa;$ptrJ$074 = $78;$y$072 = $79;
   }
  }
 }
 $81 = $partHeight >>> 2;
 $82 = ($81|0)==(0);
 if ($82) {
  STACKTOP = sp;return;
 }
 $83 = (($verOffset) + 2)|0;
 $84 = Math_imul($83, $partWidth)|0;
 $$sum7 = (($84) + ($partWidth))|0;
 $85 = (($table) + ($$sum7<<2)|0);
 $$sum6 = ($partWidth*6)|0;
 $86 = (($table) + ($$sum6<<2)|0);
 $87 = (($table) + ($partWidth<<2)|0);
 $88 = ($partWidth|0)==(0);
 $89 = (64 - ($partWidth))|0;
 $90 = ($partWidth*3)|0;
 $91 = (0 - ($partWidth))|0;
 $92 = $91 << 1;
 $93 = $partWidth << 1;
 $$0253 = $mb;$ptrC$055 = $87;$ptrInt$057 = $85;$ptrV$056 = $86;$y$154 = $81;
 while(1) {
  if ($88) {
   $$1$lcssa = $$0253;$ptrC$1$lcssa = $ptrC$055;$ptrInt$1$lcssa = $ptrInt$057;$ptrV$1$lcssa = $ptrV$056;
  } else {
   $scevgep = (($ptrInt$057) + ($partWidth<<2)|0);
   $scevgep84 = (($$0253) + ($partWidth)|0);
   $$145 = $$0253;$ptrC$147 = $ptrC$055;$ptrInt$149 = $ptrInt$057;$ptrV$148 = $ptrV$056;$x$146 = $partWidth;
   while(1) {
    $94 = (($ptrV$148) + ($92<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($ptrV$148) + ($91<<2)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($ptrV$148) + ($partWidth<<2)|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($ptrV$148) + ($93<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ((($ptrV$148)) + 4|0);
    $103 = HEAP32[$ptrV$148>>2]|0;
    $104 = (($99) + ($95))|0;
    $105 = $104 << 2;
    $106 = (($103) + ($97))|0;
    $107 = (($ptrC$147) + ($93<<2)|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($ptrInt$149) + ($93<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    $tmp32 = ($106*20)|0;
    $111 = (($101) + 512)|0;
    $112 = (($111) - ($104))|0;
    $113 = (($112) - ($105))|0;
    $114 = (($113) + ($108))|0;
    $115 = (($114) + ($tmp32))|0;
    $116 = $115 >> 10;
    $$sum8 = (($116) + 512)|0;
    $117 = (60442 + ($$sum8)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = (($110) + 16)|0;
    $121 = $120 >> 5;
    $$sum9 = (($121) + 512)|0;
    $122 = (60442 + ($$sum9)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = (($119) + 1)|0;
    $126 = (($125) + ($124))|0;
    $127 = $126 >>> 1;
    $128 = $127&255;
    $129 = ((($$145)) + 48|0);
    HEAP8[$129>>0] = $128;
    $130 = (($108) + ($103))|0;
    $131 = $130 << 2;
    $132 = (($97) + ($95))|0;
    $133 = (($ptrC$147) + ($partWidth<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($ptrInt$149) + ($partWidth<<2)|0);
    $136 = HEAP32[$135>>2]|0;
    $tmp36 = ($132*20)|0;
    $137 = (($99) + 512)|0;
    $138 = (($137) - ($130))|0;
    $139 = (($138) - ($131))|0;
    $140 = (($139) + ($134))|0;
    $141 = (($140) + ($tmp36))|0;
    $142 = $141 >> 10;
    $$sum10 = (($142) + 512)|0;
    $143 = (60442 + ($$sum10)|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144&255;
    $146 = (($136) + 16)|0;
    $147 = $146 >> 5;
    $$sum11 = (($147) + 512)|0;
    $148 = (60442 + ($$sum11)|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $149&255;
    $151 = (($145) + 1)|0;
    $152 = (($151) + ($150))|0;
    $153 = $152 >>> 1;
    $154 = $153&255;
    $155 = ((($$145)) + 32|0);
    HEAP8[$155>>0] = $154;
    $156 = HEAP32[$ptrC$147>>2]|0;
    $157 = (($134) + ($97))|0;
    $158 = $157 << 2;
    $159 = (($108) + ($95))|0;
    $160 = HEAP32[$ptrInt$149>>2]|0;
    $tmp40 = ($159*20)|0;
    $161 = (($103) + 512)|0;
    $162 = (($161) - ($157))|0;
    $163 = (($162) - ($158))|0;
    $164 = (($163) + ($156))|0;
    $165 = (($164) + ($tmp40))|0;
    $166 = $165 >> 10;
    $$sum12 = (($166) + 512)|0;
    $167 = (60442 + ($$sum12)|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = (($160) + 16)|0;
    $171 = $170 >> 5;
    $$sum13 = (($171) + 512)|0;
    $172 = (60442 + ($$sum13)|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $175 = (($169) + 1)|0;
    $176 = (($175) + ($174))|0;
    $177 = $176 >>> 1;
    $178 = $177&255;
    $179 = ((($$145)) + 16|0);
    HEAP8[$179>>0] = $178;
    $180 = (($ptrC$147) + ($91<<2)|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = (($156) + ($95))|0;
    $183 = $182 << 2;
    $184 = (($134) + ($108))|0;
    $185 = (($ptrInt$149) + ($91<<2)|0);
    $186 = HEAP32[$185>>2]|0;
    $tmp44 = ($184*20)|0;
    $187 = (($97) + 512)|0;
    $188 = (($187) - ($182))|0;
    $189 = (($188) - ($183))|0;
    $190 = (($189) + ($181))|0;
    $191 = (($190) + ($tmp44))|0;
    $192 = $191 >> 10;
    $$sum14 = (($192) + 512)|0;
    $193 = (60442 + ($$sum14)|0);
    $194 = HEAP8[$193>>0]|0;
    $195 = $194&255;
    $196 = (($186) + 16)|0;
    $197 = $196 >> 5;
    $$sum15 = (($197) + 512)|0;
    $198 = (60442 + ($$sum15)|0);
    $199 = HEAP8[$198>>0]|0;
    $200 = $199&255;
    $201 = (($195) + 1)|0;
    $202 = (($201) + ($200))|0;
    $203 = $202 >>> 1;
    $204 = $203&255;
    $205 = ((($$145)) + 1|0);
    HEAP8[$$145>>0] = $204;
    $206 = ((($ptrC$147)) + 4|0);
    $207 = ((($ptrInt$149)) + 4|0);
    $208 = (($x$146) + -1)|0;
    $209 = ($208|0)==(0);
    if ($209) {
     break;
    } else {
     $$145 = $205;$ptrC$147 = $206;$ptrInt$149 = $207;$ptrV$148 = $102;$x$146 = $208;
    }
   }
   $scevgep83 = (($ptrC$055) + ($partWidth<<2)|0);
   $scevgep85 = (($ptrV$056) + ($partWidth<<2)|0);
   $$1$lcssa = $scevgep84;$ptrC$1$lcssa = $scevgep83;$ptrInt$1$lcssa = $scevgep;$ptrV$1$lcssa = $scevgep85;
  }
  $210 = (($$1$lcssa) + ($89)|0);
  $211 = (($ptrC$1$lcssa) + ($90<<2)|0);
  $212 = (($ptrV$1$lcssa) + ($90<<2)|0);
  $213 = (($ptrInt$1$lcssa) + ($90<<2)|0);
  $214 = (($y$154) + -1)|0;
  $215 = ($214|0)==(0);
  if ($215) {
   break;
  } else {
   $$0253 = $210;$ptrC$055 = $211;$ptrInt$057 = $213;$ptrV$056 = $212;$y$154 = $214;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdInterpolateMidHorQuarter($ref,$mb,$x0,$y0,$width,$height,$partWidth,$partHeight,$horOffset) {
 $ref = $ref|0;
 $mb = $mb|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $width = $width|0;
 $height = $height|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 $horOffset = $horOffset|0;
 var $$0 = 0, $$0259 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1$lcssa = 0, $$153 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $h1$073 = 0, $h1$1$lcssa = 0, $h1$164 = 0, $or$cond = 0, $p1 = 0, $ptrC$074 = 0, $ptrC$1$lcssa = 0, $ptrC$165 = 0, $ptrInt$058 = 0, $ptrInt$1$lcssa = 0, $ptrInt$152 = 0, $ptrJ$057 = 0, $ptrJ$1$lcssa = 0, $ptrJ$151 = 0, $ptrV$075 = 0, $ptrV$1$lcssa = 0, $ptrV$166 = 0, $scevgep = 0, $scevgep82 = 0, $scevgep83 = 0;
 var $scevgep84 = 0, $scevgep85 = 0, $scevgep86 = 0, $table = 0, $tmp17 = 0, $tmp2$046 = 0, $tmp21 = 0, $tmp25 = 0, $tmp29 = 0, $tmp3$047 = 0, $tmp32 = 0, $tmp36 = 0, $tmp4$048 = 0, $tmp40 = 0, $tmp44 = 0, $tmp5$049 = 0, $tmp6$050 = 0, $tmp6$050$phi = 0, $x$063 = 0, $x$145 = 0;
 var $y$072 = 0, $y$156 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1 = sp + 1344|0;
 $table = sp;
 $0 = (($partWidth) + 5)|0;
 $1 = ($x0|0)<(0);
 if ($1) {
  label = 4;
 } else {
  $2 = (($x0) + 5)|0;
  $3 = (($2) + ($partWidth))|0;
  $4 = ($3>>>0)>($width>>>0);
  $5 = ($y0|0)<(0);
  $or$cond = $5 | $4;
  if ($or$cond) {
   label = 4;
  } else {
   $6 = (($y0) + 5)|0;
   $7 = (($6) + ($partHeight))|0;
   $8 = ($7>>>0)>($height>>>0);
   if ($8) {
    label = 4;
   } else {
    $$0 = $ref;$$03 = $x0;$$04 = $y0;$$05 = $width;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = (($partHeight) + 5)|0;
  _h264bsdFillBlock($ref,$p1,$x0,$y0,$width,$height,$0,$9,$0);
  $$0 = $p1;$$03 = 0;$$04 = 0;$$05 = $0;
 }
 $10 = Math_imul($$04, $$05)|0;
 $11 = (($$03) + ($$05))|0;
 $$sum = (($11) + ($10))|0;
 $12 = $partHeight >>> 2;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = ($$05*5)|0;
  $$sum6 = (($$sum) + ($14))|0;
  $15 = (($$0) + ($$sum6)|0);
  $16 = (($$0) + ($$sum)|0);
  $17 = (($table) + ($0<<2)|0);
  $18 = ($0|0)==(0);
  $19 = $$05 << 2;
  $20 = (($19) - ($partWidth))|0;
  $21 = (($20) + -5)|0;
  $22 = ($0*3)|0;
  $23 = (0 - ($$05))|0;
  $24 = $23 << 1;
  $25 = $$05 << 1;
  $26 = $0 << 1;
  $27 = (-5 - ($partWidth))|0;
  $h1$073 = $17;$ptrC$074 = $16;$ptrV$075 = $15;$y$072 = $12;
  while(1) {
   if ($18) {
    $h1$1$lcssa = $h1$073;$ptrC$1$lcssa = $ptrC$074;$ptrV$1$lcssa = $ptrV$075;
   } else {
    $scevgep85 = (($h1$073) + ($0<<2)|0);
    $h1$164 = $h1$073;$ptrC$165 = $ptrC$074;$ptrV$166 = $ptrV$075;$x$063 = $0;
    while(1) {
     $28 = (($ptrV$166) + ($24)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&255;
     $31 = (($ptrV$166) + ($23)|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = (($ptrV$166) + ($$05)|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35&255;
     $37 = (($ptrV$166) + ($25)|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = ((($ptrV$166)) + 1|0);
     $41 = HEAP8[$ptrV$166>>0]|0;
     $42 = $41&255;
     $43 = (($36) + ($30))|0;
     $44 = $43 << 2;
     $45 = (($42) + ($33))|0;
     $46 = (($ptrC$165) + ($25)|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = $47&255;
     $tmp17 = ($45*20)|0;
     $49 = (($39) - ($43))|0;
     $50 = (($49) - ($44))|0;
     $51 = (($50) + ($48))|0;
     $52 = (($51) + ($tmp17))|0;
     $53 = (($h1$164) + ($26<<2)|0);
     HEAP32[$53>>2] = $52;
     $54 = (($48) + ($42))|0;
     $55 = $54 << 2;
     $56 = (($33) + ($30))|0;
     $57 = (($ptrC$165) + ($$05)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $tmp21 = ($56*20)|0;
     $60 = (($36) - ($54))|0;
     $61 = (($60) + ($59))|0;
     $62 = (($61) - ($55))|0;
     $63 = (($62) + ($tmp21))|0;
     $64 = (($h1$164) + ($0<<2)|0);
     HEAP32[$64>>2] = $63;
     $65 = HEAP8[$ptrC$165>>0]|0;
     $66 = $65&255;
     $67 = (($59) + ($33))|0;
     $68 = $67 << 2;
     $69 = (($48) + ($30))|0;
     $tmp25 = ($69*20)|0;
     $70 = (($42) - ($67))|0;
     $71 = (($70) + ($66))|0;
     $72 = (($71) - ($68))|0;
     $73 = (($72) + ($tmp25))|0;
     HEAP32[$h1$164>>2] = $73;
     $74 = (($ptrC$165) + ($23)|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     $77 = (($66) + ($30))|0;
     $78 = $77 << 2;
     $79 = (($59) + ($48))|0;
     $tmp29 = ($79*20)|0;
     $80 = (($33) - ($77))|0;
     $81 = (($80) + ($76))|0;
     $82 = (($81) - ($78))|0;
     $83 = (($82) + ($tmp29))|0;
     $84 = (($h1$164) + ($27<<2)|0);
     HEAP32[$84>>2] = $83;
     $85 = ((($h1$164)) + 4|0);
     $86 = ((($ptrC$165)) + 1|0);
     $87 = (($x$063) + -1)|0;
     $88 = ($87|0)==(0);
     if ($88) {
      break;
     } else {
      $h1$164 = $85;$ptrC$165 = $86;$ptrV$166 = $40;$x$063 = $87;
     }
    }
    $scevgep84 = (($ptrC$074) + ($0)|0);
    $scevgep86 = (($ptrV$075) + ($0)|0);
    $h1$1$lcssa = $scevgep85;$ptrC$1$lcssa = $scevgep84;$ptrV$1$lcssa = $scevgep86;
   }
   $89 = (($ptrC$1$lcssa) + ($21)|0);
   $90 = (($ptrV$1$lcssa) + ($21)|0);
   $91 = (($h1$1$lcssa) + ($22<<2)|0);
   $92 = (($y$072) + -1)|0;
   $93 = ($92|0)==(0);
   if ($93) {
    break;
   } else {
    $h1$073 = $91;$ptrC$074 = $89;$ptrV$075 = $90;$y$072 = $92;
   }
  }
 }
 $94 = ($partHeight|0)==(0);
 if ($94) {
  STACKTOP = sp;return;
 }
 $$sum7 = (($horOffset) + 2)|0;
 $95 = (($table) + ($$sum7<<2)|0);
 $96 = ((($table)) + 20|0);
 $97 = $partWidth >>> 2;
 $98 = ($97|0)==(0);
 $99 = (16 - ($partWidth))|0;
 $100 = $97 << 2;
 $$0259 = $mb;$ptrInt$058 = $95;$ptrJ$057 = $96;$y$156 = $partHeight;
 while(1) {
  if ($98) {
   $$1$lcssa = $$0259;$ptrInt$1$lcssa = $ptrInt$058;$ptrJ$1$lcssa = $ptrJ$057;
  } else {
   $101 = ((($ptrJ$057)) + -4|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ((($ptrJ$057)) + -8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($ptrJ$057)) + -12|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ((($ptrJ$057)) + -16|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ((($ptrJ$057)) + -20|0);
   $110 = HEAP32[$109>>2]|0;
   $scevgep82 = (($ptrInt$058) + ($100<<2)|0);
   $$153 = $$0259;$ptrInt$152 = $ptrInt$058;$ptrJ$151 = $ptrJ$057;$tmp2$046 = $102;$tmp3$047 = $104;$tmp4$048 = $106;$tmp5$049 = $108;$tmp6$050 = $110;$x$145 = $97;
   while(1) {
    $111 = (($tmp4$048) + ($tmp3$047))|0;
    $112 = (($tmp5$049) + ($tmp2$046))|0;
    $113 = ((($ptrJ$151)) + 4|0);
    $114 = HEAP32[$ptrJ$151>>2]|0;
    $115 = $112 << 2;
    $116 = ((($ptrInt$152)) + 4|0);
    $117 = HEAP32[$ptrInt$152>>2]|0;
    $tmp32 = ($111*20)|0;
    $118 = (($tmp6$050) + 512)|0;
    $119 = (($118) - ($112))|0;
    $120 = (($119) - ($115))|0;
    $121 = (($120) + ($114))|0;
    $122 = (($121) + ($tmp32))|0;
    $123 = $122 >> 10;
    $$sum8 = (($123) + 512)|0;
    $124 = (60442 + ($$sum8)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125&255;
    $127 = (($117) + 16)|0;
    $128 = $127 >> 5;
    $$sum9 = (($128) + 512)|0;
    $129 = (60442 + ($$sum9)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = (($126) + 1)|0;
    $133 = (($132) + ($131))|0;
    $134 = $133 >>> 1;
    $135 = $134&255;
    $136 = ((($$153)) + 1|0);
    HEAP8[$$153>>0] = $135;
    $137 = (($tmp3$047) + ($tmp2$046))|0;
    $138 = (($114) + ($tmp4$048))|0;
    $139 = ((($ptrJ$151)) + 8|0);
    $140 = HEAP32[$113>>2]|0;
    $141 = $138 << 2;
    $142 = ((($ptrInt$152)) + 8|0);
    $143 = HEAP32[$116>>2]|0;
    $tmp36 = ($137*20)|0;
    $144 = (($tmp5$049) + 512)|0;
    $145 = (($144) - ($138))|0;
    $146 = (($145) - ($141))|0;
    $147 = (($146) + ($140))|0;
    $148 = (($147) + ($tmp36))|0;
    $149 = $148 >> 10;
    $$sum10 = (($149) + 512)|0;
    $150 = (60442 + ($$sum10)|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = $151&255;
    $153 = (($143) + 16)|0;
    $154 = $153 >> 5;
    $$sum11 = (($154) + 512)|0;
    $155 = (60442 + ($$sum11)|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = $156&255;
    $158 = (($152) + 1)|0;
    $159 = (($158) + ($157))|0;
    $160 = $159 >>> 1;
    $161 = $160&255;
    $162 = ((($$153)) + 2|0);
    HEAP8[$136>>0] = $161;
    $163 = (($114) + ($tmp2$046))|0;
    $164 = (($140) + ($tmp3$047))|0;
    $165 = ((($ptrJ$151)) + 12|0);
    $166 = HEAP32[$139>>2]|0;
    $167 = $164 << 2;
    $168 = ((($ptrInt$152)) + 12|0);
    $169 = HEAP32[$142>>2]|0;
    $tmp40 = ($163*20)|0;
    $170 = (($tmp4$048) + 512)|0;
    $171 = (($170) - ($164))|0;
    $172 = (($171) - ($167))|0;
    $173 = (($172) + ($166))|0;
    $174 = (($173) + ($tmp40))|0;
    $175 = $174 >> 10;
    $$sum12 = (($175) + 512)|0;
    $176 = (60442 + ($$sum12)|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = $177&255;
    $179 = (($169) + 16)|0;
    $180 = $179 >> 5;
    $$sum13 = (($180) + 512)|0;
    $181 = (60442 + ($$sum13)|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $182&255;
    $184 = (($178) + 1)|0;
    $185 = (($184) + ($183))|0;
    $186 = $185 >>> 1;
    $187 = $186&255;
    $188 = ((($$153)) + 3|0);
    HEAP8[$162>>0] = $187;
    $189 = (($140) + ($114))|0;
    $190 = (($166) + ($tmp2$046))|0;
    $191 = ((($ptrJ$151)) + 16|0);
    $192 = HEAP32[$165>>2]|0;
    $193 = $190 << 2;
    $194 = ((($ptrInt$152)) + 16|0);
    $195 = HEAP32[$168>>2]|0;
    $tmp44 = ($189*20)|0;
    $196 = (($tmp3$047) + 512)|0;
    $197 = (($196) - ($190))|0;
    $198 = (($197) - ($193))|0;
    $199 = (($198) + ($192))|0;
    $200 = (($199) + ($tmp44))|0;
    $201 = $200 >> 10;
    $$sum14 = (($201) + 512)|0;
    $202 = (60442 + ($$sum14)|0);
    $203 = HEAP8[$202>>0]|0;
    $204 = $203&255;
    $205 = (($195) + 16)|0;
    $206 = $205 >> 5;
    $$sum15 = (($206) + 512)|0;
    $207 = (60442 + ($$sum15)|0);
    $208 = HEAP8[$207>>0]|0;
    $209 = $208&255;
    $210 = (($204) + 1)|0;
    $211 = (($210) + ($209))|0;
    $212 = $211 >>> 1;
    $213 = $212&255;
    $214 = ((($$153)) + 4|0);
    HEAP8[$188>>0] = $213;
    $215 = (($x$145) + -1)|0;
    $216 = ($215|0)==(0);
    if ($216) {
     break;
    } else {
     $tmp6$050$phi = $tmp2$046;$$153 = $214;$ptrInt$152 = $194;$ptrJ$151 = $191;$tmp2$046 = $192;$tmp3$047 = $166;$tmp4$048 = $140;$tmp5$049 = $114;$x$145 = $215;$tmp6$050 = $tmp6$050$phi;
    }
   }
   $scevgep = (($$0259) + ($100)|0);
   $scevgep83 = (($ptrJ$057) + ($100<<2)|0);
   $$1$lcssa = $scevgep;$ptrInt$1$lcssa = $scevgep82;$ptrJ$1$lcssa = $scevgep83;
  }
  $217 = ((($ptrJ$1$lcssa)) + 20|0);
  $218 = ((($ptrInt$1$lcssa)) + 20|0);
  $219 = (($$1$lcssa) + ($99)|0);
  $220 = (($y$156) + -1)|0;
  $221 = ($220|0)==(0);
  if ($221) {
   break;
  } else {
   $$0259 = $219;$ptrInt$058 = $218;$ptrJ$057 = $217;$y$156 = $220;
  }
 }
 STACKTOP = sp;return;
}
function _h264bsdPredictSamples($data,$mv,$refPic,$xA,$yA,$partX,$partY,$partWidth,$partHeight) {
 $data = $data|0;
 $mv = $mv|0;
 $refPic = $refPic|0;
 $xA = $xA|0;
 $yA = $yA|0;
 $partX = $partX|0;
 $partY = $partY|0;
 $partWidth = $partWidth|0;
 $partHeight = $partHeight|0;
 var $$sum = 0, $$sum$i = 0, $$sum1 = 0, $$sum2 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $mv$idx$val = 0, $mv$idx3$val = 0, $or$cond$i = 0, $refPic$idx$pre$phiZZ2D = 0, $refPic$idx$val = 0, $refPic$idx4$val = 0;
 var $refPic$idx5$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $partY << 4;
 $$sum = (($0) + ($partX))|0;
 $1 = (($data) + ($$sum)|0);
 $2 = HEAP16[$mv>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = $3 & 3;
 $5 = ((($mv)) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = $7 & 3;
 $9 = ((($refPic)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 4;
 $12 = ((($refPic)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 4;
 $15 = (($partX) + ($xA))|0;
 $16 = $3 >> 2;
 $17 = (($15) + ($16))|0;
 $18 = (($partY) + ($yA))|0;
 $19 = $7 >> 2;
 $20 = (($18) + ($19))|0;
 $21 = ((5968 + ($4<<4)|0) + ($8<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 do {
  switch ($22|0) {
  case 0:  {
   $23 = HEAP32[$refPic>>2]|0;
   _h264bsdFillBlock($23,$1,$17,$20,$11,$14,$partWidth,$partHeight,16);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 1:  {
   $24 = HEAP32[$refPic>>2]|0;
   $25 = (($20) + -2)|0;
   _h264bsdInterpolateVerQuarter($24,$1,$17,$25,$11,$14,$partWidth,$partHeight,0);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 2:  {
   $26 = HEAP32[$refPic>>2]|0;
   $27 = (($20) + -2)|0;
   _h264bsdInterpolateVerHalf($26,$1,$17,$27,$11,$14,$partWidth,$partHeight);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 3:  {
   $28 = HEAP32[$refPic>>2]|0;
   $29 = (($20) + -2)|0;
   _h264bsdInterpolateVerQuarter($28,$1,$17,$29,$11,$14,$partWidth,$partHeight,1);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 4:  {
   $30 = HEAP32[$refPic>>2]|0;
   $31 = (($17) + -2)|0;
   _h264bsdInterpolateHorQuarter($30,$1,$31,$20,$11,$14,$partWidth,$partHeight,0);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 5:  {
   $32 = HEAP32[$refPic>>2]|0;
   $33 = (($17) + -2)|0;
   $34 = (($20) + -2)|0;
   _h264bsdInterpolateHorVerQuarter($32,$1,$33,$34,$11,$14,$partWidth,$partHeight,0);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 6:  {
   $35 = HEAP32[$refPic>>2]|0;
   $36 = (($17) + -2)|0;
   $37 = (($20) + -2)|0;
   _h264bsdInterpolateMidHorQuarter($35,$1,$36,$37,$11,$14,$partWidth,$partHeight,0);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 7:  {
   $38 = HEAP32[$refPic>>2]|0;
   $39 = (($17) + -2)|0;
   $40 = (($20) + -2)|0;
   _h264bsdInterpolateHorVerQuarter($38,$1,$39,$40,$11,$14,$partWidth,$partHeight,2);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 8:  {
   $41 = HEAP32[$refPic>>2]|0;
   $42 = (($17) + -2)|0;
   _h264bsdInterpolateHorHalf($41,$1,$42,$20,$11,$14,$partWidth,$partHeight);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 9:  {
   $43 = HEAP32[$refPic>>2]|0;
   $44 = (($17) + -2)|0;
   $45 = (($20) + -2)|0;
   _h264bsdInterpolateMidVerQuarter($43,$1,$44,$45,$11,$14,$partWidth,$partHeight,0);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 10:  {
   $46 = HEAP32[$refPic>>2]|0;
   $47 = (($17) + -2)|0;
   $48 = (($20) + -2)|0;
   _h264bsdInterpolateMidHalf($46,$1,$47,$48,$11,$14,$partWidth,$partHeight);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 11:  {
   $49 = HEAP32[$refPic>>2]|0;
   $50 = (($17) + -2)|0;
   $51 = (($20) + -2)|0;
   _h264bsdInterpolateMidVerQuarter($49,$1,$50,$51,$11,$14,$partWidth,$partHeight,1);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 12:  {
   $52 = HEAP32[$refPic>>2]|0;
   $53 = (($17) + -2)|0;
   _h264bsdInterpolateHorQuarter($52,$1,$53,$20,$11,$14,$partWidth,$partHeight,1);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 13:  {
   $54 = HEAP32[$refPic>>2]|0;
   $55 = (($17) + -2)|0;
   $56 = (($20) + -2)|0;
   _h264bsdInterpolateHorVerQuarter($54,$1,$55,$56,$11,$14,$partWidth,$partHeight,1);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  case 14:  {
   $57 = HEAP32[$refPic>>2]|0;
   $58 = (($17) + -2)|0;
   $59 = (($20) + -2)|0;
   _h264bsdInterpolateMidHorQuarter($57,$1,$58,$59,$11,$14,$partWidth,$partHeight,1);
   $refPic$idx$pre$phiZZ2D = $refPic;
   break;
  }
  default: {
   $60 = HEAP32[$refPic>>2]|0;
   $61 = (($17) + -2)|0;
   $62 = (($20) + -2)|0;
   _h264bsdInterpolateHorVerQuarter($60,$1,$61,$62,$11,$14,$partWidth,$partHeight,3);
   $refPic$idx$pre$phiZZ2D = $refPic;
  }
  }
 } while(0);
 $63 = $partY >>> 1;
 $64 = $63 << 3;
 $65 = $partX >>> 1;
 $$sum1 = (($65) + 256)|0;
 $$sum2 = (($$sum1) + ($64))|0;
 $66 = (($data) + ($$sum2)|0);
 $mv$idx$val = HEAP16[$mv>>1]|0;
 $mv$idx3$val = HEAP16[$5>>1]|0;
 $refPic$idx$val = HEAP32[$refPic$idx$pre$phiZZ2D>>2]|0;
 $refPic$idx4$val = HEAP32[$9>>2]|0;
 $refPic$idx5$val = HEAP32[$12>>2]|0;
 $67 = $refPic$idx4$val << 3;
 $68 = $refPic$idx5$val << 3;
 $69 = $15 >>> 1;
 $70 = $mv$idx$val << 16 >> 16;
 $71 = $70 >> 3;
 $72 = (($71) + ($69))|0;
 $73 = $18 >>> 1;
 $74 = $mv$idx3$val << 16 >> 16;
 $75 = $74 >> 3;
 $76 = (($75) + ($73))|0;
 $77 = $70 & 7;
 $78 = $74 & 7;
 $79 = $partWidth >>> 1;
 $80 = $partHeight >>> 1;
 $81 = $refPic$idx4$val << 8;
 $82 = Math_imul($81, $refPic$idx5$val)|0;
 $83 = (($refPic$idx$val) + ($82)|0);
 $84 = ($77|0)!=(0);
 $85 = ($78|0)!=(0);
 $or$cond$i = $84 & $85;
 if ($or$cond$i) {
  _h264bsdInterpolateChromaHorVer($83,$66,$72,$76,$67,$68,$77,$78,$79,$80);
  return;
 }
 if ($84) {
  _h264bsdInterpolateChromaHor($83,$66,$72,$76,$67,$68,$77,$79,$80);
  return;
 }
 if ($85) {
  _h264bsdInterpolateChromaVer($83,$66,$72,$76,$67,$68,$78,$79,$80);
  return;
 } else {
  _h264bsdFillBlock($83,$66,$72,$76,$67,$68,$79,$80,8);
  $86 = Math_imul($68, $67)|0;
  $$sum$i = (($86) + ($82))|0;
  $87 = (($refPic$idx$val) + ($$sum$i)|0);
  $$sum6 = (($$sum2) + 64)|0;
  $88 = (($data) + ($$sum6)|0);
  _h264bsdFillBlock($87,$88,$72,$76,$67,$68,$79,$80,8);
  return;
 }
}
function _h264bsdFillRow7($ref,$fill,$left,$center,$right) {
 $ref = $ref|0;
 $fill = $fill|0;
 $left = $left|0;
 $center = $center|0;
 $right = $right|0;
 var $$0111 = 0, $$03$lcssa = 0, $$04$lcssa = 0, $$049 = 0, $$1$lcssa = 0, $$110 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep21 = 0, $scevgep22 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($left|0)==(0);
 if ($0) {
  $$03$lcssa = $fill;
 } else {
  $1 = HEAP8[$ref>>0]|0;
  _memset(($fill|0),($1|0),($left|0))|0;
  $scevgep22 = (($fill) + ($left)|0);
  $$03$lcssa = $scevgep22;
 }
 $2 = ($center|0)==(0);
 if ($2) {
  $$04$lcssa = $ref;$$1$lcssa = $$03$lcssa;
 } else {
  $scevgep = (($$03$lcssa) + ($center)|0);
  $$0111 = $center;$$049 = $ref;$$110 = $$03$lcssa;
  while(1) {
   $3 = ((($$049)) + 1|0);
   $4 = HEAP8[$$049>>0]|0;
   $5 = ((($$110)) + 1|0);
   HEAP8[$$110>>0] = $4;
   $6 = (($$0111) + -1)|0;
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   } else {
    $$0111 = $6;$$049 = $3;$$110 = $5;
   }
  }
  $scevgep21 = (($ref) + ($center)|0);
  $$04$lcssa = $scevgep21;$$1$lcssa = $scevgep;
 }
 $8 = ($right|0)==(0);
 if ($8) {
  return;
 }
 $9 = ((($$04$lcssa)) + -1|0);
 $10 = HEAP8[$9>>0]|0;
 _memset(($$1$lcssa|0),($10|0),($right|0))|0;
 return;
}
function _h264bsdReorderRefPicList($dpb,$order,$currFrameNum,$numRefIdxActive) {
 $dpb = $dpb|0;
 $order = $order|0;
 $currFrameNum = $currFrameNum|0;
 $numRefIdxActive = $numRefIdxActive|0;
 var $$ = 0, $$0 = 0, $$off$i = 0, $$off$us$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $exitcond = 0, $found$2$i = 0, $frameNumWrap$0$i = 0, $i$0$ph$i12 = 0;
 var $i$01$i = 0, $i$1$ph$i11 = 0, $j$013 = 0, $j$114 = 0, $k$015 = 0, $k$1 = 0, $or$cond = 0, $picNum$1$ph = 0, $picNumNoWrap$0 = 0, $picNumPred$020 = 0, $picNumPred$11 = 0, $refIdx$021 = 0, $switch$i = 0, $switch$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dpb)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = HEAP32[$dpb>>2]|0;
  $4 = ((($dpb)) + 32|0);
  $i$01$i = 0;
  while(1) {
   $5 = (((($3) + (($i$01$i*40)|0)|0)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $$off$i = (($6) + -1)|0;
   $switch$i = ($$off$i>>>0)<(2);
   if ($switch$i) {
    $7 = (((($3) + (($i$01$i*40)|0)|0)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8>>>0)>($currFrameNum>>>0);
    if ($9) {
     $10 = HEAP32[$4>>2]|0;
     $11 = (($8) - ($10))|0;
     $frameNumWrap$0$i = $11;
    } else {
     $frameNumWrap$0$i = $8;
    }
    $12 = (((($3) + (($i$01$i*40)|0)|0)) + 8|0);
    HEAP32[$12>>2] = $frameNumWrap$0$i;
   }
   $13 = (($i$01$i) + 1)|0;
   $exitcond = ($13|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $i$01$i = $13;
   }
  }
 }
 $14 = HEAP32[$order>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = ((($order)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17>>>0)<(3);
 if (!($18)) {
  $$0 = 0;
  return ($$0|0);
 }
 $19 = ((($dpb)) + 32|0);
 $20 = ((($dpb)) + 24|0);
 $21 = ((($dpb)) + 4|0);
 $22 = $17;$picNumPred$020 = $currFrameNum;$refIdx$021 = 0;
 L18: while(1) {
  $23 = ($22>>>0)<(2);
  L20: do {
   if ($23) {
    $24 = ($22|0)==(0);
    $25 = (((((($order)) + 4|0) + (($refIdx$021*12)|0)|0)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    if ($24) {
     $27 = (($picNumPred$020) - ($26))|0;
     $28 = ($27|0)<(0);
     if ($28) {
      $29 = HEAP32[$19>>2]|0;
      $30 = (($29) + ($27))|0;
      $picNumNoWrap$0 = $30;
     } else {
      $picNumNoWrap$0 = $27;
     }
    } else {
     $31 = (($26) + ($picNumPred$020))|0;
     $32 = HEAP32[$19>>2]|0;
     $33 = ($31|0)<($32|0);
     $34 = $33 ? 0 : $32;
     $$ = (($31) - ($34))|0;
     $picNumNoWrap$0 = $$;
    }
    $35 = ($picNumNoWrap$0>>>0)>($currFrameNum>>>0);
    if ($35) {
     $36 = HEAP32[$19>>2]|0;
     $37 = (($picNumNoWrap$0) - ($36))|0;
     $picNum$1$ph = $37;
    } else {
     $picNum$1$ph = $picNumNoWrap$0;
    }
    $38 = HEAP32[$20>>2]|0;
    $39 = ($38|0)==(0);
    if ($39) {
     $$0 = 1;
     label = 37;
     break L18;
    }
    $40 = HEAP32[$dpb>>2]|0;
    $i$0$ph$i12 = 0;
    while(1) {
     $48 = (((($40) + (($i$0$ph$i12*40)|0)|0)) + 20|0);
     $49 = HEAP32[$48>>2]|0;
     $$off$us$i = (($49) + -1)|0;
     $switch$us$i = ($$off$us$i>>>0)<(2);
     if ($switch$us$i) {
      $50 = (((($40) + (($i$0$ph$i12*40)|0)|0)) + 8|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==($picNum$1$ph|0);
      if ($52) {
       $62 = $49;$90 = $40;$found$2$i = $i$0$ph$i12;$picNumPred$11 = $picNumNoWrap$0;
       break L20;
      }
     }
     $46 = (($i$0$ph$i12) + 1)|0;
     $47 = ($46>>>0)<($38>>>0);
     if ($47) {
      $i$0$ph$i12 = $46;
     } else {
      $$0 = 1;
      label = 37;
      break L18;
     }
    }
   } else {
    $41 = (((((($order)) + 4|0) + (($refIdx$021*12)|0)|0)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[$20>>2]|0;
    $44 = ($43|0)==(0);
    if ($44) {
     $$0 = 1;
     label = 37;
     break L18;
    }
    $45 = HEAP32[$dpb>>2]|0;
    $i$1$ph$i11 = 0;
    while(1) {
     $55 = (((($45) + (($i$1$ph$i11*40)|0)|0)) + 20|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(3);
     if ($57) {
      $58 = (((($45) + (($i$1$ph$i11*40)|0)|0)) + 8|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($59|0)==($42|0);
      if ($60) {
       $62 = 3;$90 = $45;$found$2$i = $i$1$ph$i11;$picNumPred$11 = $picNumPred$020;
       break L20;
      }
     }
     $53 = (($i$1$ph$i11) + 1)|0;
     $54 = ($53>>>0)<($43>>>0);
     if ($54) {
      $i$1$ph$i11 = $53;
     } else {
      $$0 = 1;
      label = 37;
      break L18;
     }
    }
   }
  } while(0);
  $61 = ($found$2$i|0)>(-1);
  $63 = ($62>>>0)>(1);
  $or$cond = $61 & $63;
  if (!($or$cond)) {
   $$0 = 1;
   label = 37;
   break;
  }
  $64 = ($refIdx$021>>>0)<($numRefIdxActive>>>0);
  if ($64) {
   $j$013 = $numRefIdxActive;
   while(1) {
    $65 = (($j$013) + -1)|0;
    $66 = HEAP32[$21>>2]|0;
    $67 = (($66) + ($65<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($66) + ($j$013<<2)|0);
    HEAP32[$69>>2] = $68;
    $70 = ($65>>>0)>($refIdx$021>>>0);
    if ($70) {
     $j$013 = $65;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$dpb>>2]|0;
   $72 = $$pre;
  } else {
   $72 = $90;
  }
  $71 = (($72) + (($found$2$i*40)|0)|0);
  $73 = (($refIdx$021) + 1)|0;
  $74 = HEAP32[$21>>2]|0;
  $75 = (($74) + ($refIdx$021<<2)|0);
  HEAP32[$75>>2] = $71;
  $76 = ($73>>>0)>($numRefIdxActive>>>0);
  if (!($76)) {
   $j$114 = $73;$k$015 = $73;
   while(1) {
    $77 = HEAP32[$21>>2]|0;
    $78 = (($77) + ($j$114<<2)|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = HEAP32[$dpb>>2]|0;
    $81 = (($80) + (($found$2$i*40)|0)|0);
    $82 = ($79|0)==($81|0);
    if ($82) {
     $k$1 = $k$015;
    } else {
     $83 = (($k$015) + 1)|0;
     $84 = (($77) + ($k$015<<2)|0);
     HEAP32[$84>>2] = $79;
     $k$1 = $83;
    }
    $85 = (($j$114) + 1)|0;
    $86 = ($85>>>0)>($numRefIdxActive>>>0);
    if ($86) {
     break;
    } else {
     $j$114 = $85;$k$015 = $k$1;
    }
   }
  }
  $87 = (((($order)) + 4|0) + (($73*12)|0)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88>>>0)<(3);
  if ($89) {
   $22 = $88;$picNumPred$020 = $picNumPred$11;$refIdx$021 = $73;
  } else {
   $$0 = 0;
   label = 37;
   break;
  }
 }
 if ((label|0) == 37) {
  return ($$0|0);
 }
 return (0)|0;
}
function _h264bsdMarkDecRefPic($dpb,$mark,$image,$frameNum,$picOrderCnt,$isIdr,$currentPicId,$numErrMbs) {
 $dpb = $dpb|0;
 $mark = $mark|0;
 $image = $image|0;
 $frameNum = $frameNum|0;
 $picOrderCnt = $picOrderCnt|0;
 $isIdr = $isIdr|0;
 $currentPicId = $currentPicId|0;
 $numErrMbs = $numErrMbs|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$01 = 0, $$01$lcssa = 0, $$01257 = 0, $$157 = 0, $$263 = 0, $$66 = 0, $$lcssa = 0, $$lcssa239 = 0, $$lcssa242 = 0, $$lcssa244 = 0, $$lcssa246 = 0, $$lcssa248 = 0, $$lcssa251 = 0, $$not = 0, $$off$i = 0, $$off$us$i$i = 0, $$off$us$i$i44 = 0;
 var $$phi$trans$insert133 = 0, $$picNum$0$i = 0, $$picOrderCnt$0$i$i = 0, $$picOrderCnt$0$i$i26 = 0, $$picOrderCnt$0$i$i6 = 0, $$pre = 0, $$pre$i = 0, $$pre$phi135Z2D = 0, $$pre132 = 0, $$pre134 = 0, $$tmp$0$i$i = 0, $$tmp$0$i$i27 = 0, $$tmp$0$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i20 = 0, $exitcond130 = 0, $i$0 = 0, $i$0$index$0$i = 0, $i$0$ph$i2$i = 0, $i$0$ph$i2$i$lcssa = 0, $i$0$ph$i6$i = 0, $i$0$ph$i6$i$lcssa = 0, $i$01$i = 0, $i$01$i$i = 0;
 var $i$01$i$i25 = 0, $i$01$i$i5 = 0, $i$01$i19 = 0, $i$01$i34 = 0, $i$04$i = 0, $i$05$i = 0, $i$05$i$lcssa = 0, $i$07$i = 0, $i$07$i$lcssa = 0, $i$1$ph$i2$i = 0, $i$1$ph$i2$i$lcssa = 0, $index$02$i = 0, $index$1$i = 0, $index$1$i$lcssa = 0, $markedAsLongTerm$0 = 0, $markedAsLongTerm$0$lcssa = 0, $markedAsLongTerm$0262 = 0, $markedAsLongTerm$159 = 0, $not$ = 0, $not$$not = 0;
 var $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i36 = 0, $or$cond19$i = 0, $picNum$03$i = 0, $picNum$1$i = 0, $picOrderCnt$02$i$i = 0, $picOrderCnt$02$i$i24 = 0, $picOrderCnt$02$i$i4 = 0, $picOrderCnt$1$i$i = 0, $picOrderCnt$1$i$i28 = 0, $picOrderCnt$1$i$i8 = 0, $status$2 = 0, $status$264 = 0, $status$3 = 0, $status$3137 = 0, $status$3138 = 0, $status$3140 = 0, $switch$i = 0, $switch$us$i$i = 0;
 var $switch$us$i$i45 = 0, $tmp$03$i$i = 0, $tmp$03$i$i23 = 0, $tmp$03$i$i3 = 0, $tmp$1$i$i = 0, $tmp$1$i$i$lcssa = 0, $tmp$1$i$i29 = 0, $tmp$1$i$i29$lcssa = 0, $tmp$1$i$i9 = 0, $tmp$1$i$i9$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$image>>2]|0;
 $1 = ((($dpb)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($0|0)==($3|0);
 if (!($4)) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ((($dpb)) + 52|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($dpb)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $not$ = ($7|0)==(0);
 $8 = $not$&1;
 $9 = ($mark|0)==(0|0);
 do {
  if ($9) {
   $10 = ((($2)) + 20|0);
   HEAP32[$10>>2] = 0;
   $11 = ((($2)) + 12|0);
   HEAP32[$11>>2] = $frameNum;
   $12 = ((($2)) + 8|0);
   HEAP32[$12>>2] = $frameNum;
   $13 = ((($2)) + 16|0);
   HEAP32[$13>>2] = $picOrderCnt;
   $14 = ((($2)) + 24|0);
   HEAP32[$14>>2] = $8;
   if ($not$) {
    $18 = ((($dpb)) + 44|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + 1)|0;
    HEAP32[$18>>2] = $20;
    $21 = ((($2)) + 36|0);
    HEAP32[$21>>2] = $isIdr;
    $22 = ((($2)) + 28|0);
    HEAP32[$22>>2] = $currentPicId;
    $23 = ((($2)) + 32|0);
    HEAP32[$23>>2] = $numErrMbs;
    $status$3138 = 0;
    label = 109;
    break;
   } else {
    $15 = ((($2)) + 36|0);
    HEAP32[$15>>2] = $isIdr;
    $16 = ((($2)) + 28|0);
    HEAP32[$16>>2] = $currentPicId;
    $17 = ((($2)) + 32|0);
    HEAP32[$17>>2] = $numErrMbs;
    $status$3140 = 0;
    label = 111;
    break;
   }
  } else {
   $24 = ($isIdr|0)==(0);
   do {
    if ($24) {
     $83 = ((($mark)) + 8|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==(0);
     if ($85) {
      $275 = ((($dpb)) + 40|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = ((($dpb)) + 24|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = ($276>>>0)<($278>>>0);
      if ($279) {
       $$263 = $frameNum;$$pre$phi135Z2D = $275;$299 = $276;$301 = $278;$status$264 = 0;
      } else {
       $280 = ($276|0)==(0);
       if ($280) {
        $$263 = $frameNum;$$pre$phi135Z2D = $275;$299 = 0;$301 = $278;$status$264 = 1;
       } else {
        $281 = HEAP32[$dpb>>2]|0;
        $i$04$i = 0;$index$02$i = -1;$picNum$03$i = 0;
        while(1) {
         $282 = (((($281) + (($i$04$i*40)|0)|0)) + 20|0);
         $283 = HEAP32[$282>>2]|0;
         $$off$i = (($283) + -1)|0;
         $switch$i = ($$off$i>>>0)<(2);
         if ($switch$i) {
          $284 = (((($281) + (($i$04$i*40)|0)|0)) + 8|0);
          $285 = HEAP32[$284>>2]|0;
          $286 = ($285|0)<($picNum$03$i|0);
          $287 = ($index$02$i|0)==(-1);
          $or$cond$i = $287 | $286;
          $i$0$index$0$i = $or$cond$i ? $i$04$i : $index$02$i;
          $$picNum$0$i = $or$cond$i ? $285 : $picNum$03$i;
          $index$1$i = $i$0$index$0$i;$picNum$1$i = $$picNum$0$i;
         } else {
          $index$1$i = $index$02$i;$picNum$1$i = $picNum$03$i;
         }
         $288 = (($i$04$i) + 1)|0;
         $exitcond = ($288|0)==($276|0);
         if ($exitcond) {
          $index$1$i$lcssa = $index$1$i;
          break;
         } else {
          $i$04$i = $288;$index$02$i = $index$1$i;$picNum$03$i = $picNum$1$i;
         }
        }
        $289 = ($index$1$i$lcssa|0)>(-1);
        if ($289) {
         $290 = (((($281) + (($index$1$i$lcssa*40)|0)|0)) + 20|0);
         HEAP32[$290>>2] = 0;
         $291 = (($276) + -1)|0;
         HEAP32[$275>>2] = $291;
         $292 = (((($281) + (($index$1$i$lcssa*40)|0)|0)) + 24|0);
         $293 = HEAP32[$292>>2]|0;
         $294 = ($293|0)==(0);
         if ($294) {
          $295 = ((($dpb)) + 44|0);
          $296 = HEAP32[$295>>2]|0;
          $297 = (($296) + -1)|0;
          HEAP32[$295>>2] = $297;
          $$263 = $frameNum;$$pre$phi135Z2D = $275;$299 = $291;$301 = $278;$status$264 = 0;
         } else {
          $$263 = $frameNum;$$pre$phi135Z2D = $275;$299 = $291;$301 = $278;$status$264 = 0;
         }
        } else {
         $$263 = $frameNum;$$pre$phi135Z2D = $275;$299 = $276;$301 = $278;$status$264 = 1;
        }
       }
      }
     } else {
      $86 = ((($dpb)) + 24|0);
      $87 = ((($dpb)) + 40|0);
      $88 = ((($dpb)) + 44|0);
      $89 = ((($dpb)) + 36|0);
      $90 = ((($dpb)) + 48|0);
      $91 = ((($dpb)) + 28|0);
      $92 = ((($dpb)) + 16|0);
      $93 = ((($dpb)) + 12|0);
      $94 = ((($2)) + 12|0);
      $95 = ((($2)) + 8|0);
      $96 = ((($2)) + 16|0);
      $97 = ((($2)) + 20|0);
      $98 = ((($2)) + 24|0);
      $$01 = $frameNum;$210 = $7;$367 = $7;$i$0 = 0;$markedAsLongTerm$0 = 0;
      L25: while(1) {
       $99 = (((($mark)) + 12|0) + (($i$0*20)|0)|0);
       $100 = HEAP32[$99>>2]|0;
       switch ($100|0) {
       case 0:  {
        $$01257 = $$01;$markedAsLongTerm$0262 = $markedAsLongTerm$0;$status$2 = 0;
        break L25;
        break;
       }
       case 1:  {
        $101 = (((((($mark)) + 12|0) + (($i$0*20)|0)|0)) + 4|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = (($$01) - ($102))|0;
        $104 = HEAP32[$86>>2]|0;
        $105 = ($104|0)==(0);
        if ($105) {
         $$01$lcssa = $$01;$markedAsLongTerm$0$lcssa = $markedAsLongTerm$0;
         label = 103;
         break L25;
        }
        $106 = HEAP32[$dpb>>2]|0;
        $i$0$ph$i2$i = 0;
        while(1) {
         $109 = (((($106) + (($i$0$ph$i2$i*40)|0)|0)) + 20|0);
         $110 = HEAP32[$109>>2]|0;
         $$off$us$i$i = (($110) + -1)|0;
         $switch$us$i$i = ($$off$us$i$i>>>0)<(2);
         if ($switch$us$i$i) {
          $111 = (((($106) + (($i$0$ph$i2$i*40)|0)|0)) + 8|0);
          $112 = HEAP32[$111>>2]|0;
          $113 = ($112|0)==($103|0);
          if ($113) {
           $$lcssa251 = $109;$i$0$ph$i2$i$lcssa = $i$0$ph$i2$i;
           break;
          }
         }
         $107 = (($i$0$ph$i2$i) + 1)|0;
         $108 = ($107>>>0)<($104>>>0);
         if ($108) {
          $i$0$ph$i2$i = $107;
         } else {
          $$01257 = $$01;$markedAsLongTerm$0262 = $markedAsLongTerm$0;$status$2 = 1;
          break L25;
         }
        }
        $114 = ($i$0$ph$i2$i$lcssa|0)<(0);
        if ($114) {
         $$01$lcssa = $$01;$markedAsLongTerm$0$lcssa = $markedAsLongTerm$0;
         label = 103;
         break L25;
        }
        HEAP32[$$lcssa251>>2] = 0;
        $115 = HEAP32[$87>>2]|0;
        $116 = (($115) + -1)|0;
        HEAP32[$87>>2] = $116;
        $117 = (((($106) + (($i$0$ph$i2$i$lcssa*40)|0)|0)) + 24|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = ($118|0)==(0);
        if ($119) {
         $120 = HEAP32[$88>>2]|0;
         $121 = (($120) + -1)|0;
         HEAP32[$88>>2] = $121;
         $$157 = $$01;$368 = $367;$369 = $210;$markedAsLongTerm$159 = $markedAsLongTerm$0;
        } else {
         $$157 = $$01;$368 = $367;$369 = $210;$markedAsLongTerm$159 = $markedAsLongTerm$0;
        }
        break;
       }
       case 2:  {
        $122 = (((((($mark)) + 12|0) + (($i$0*20)|0)|0)) + 8|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = HEAP32[$86>>2]|0;
        $125 = ($124|0)==(0);
        if ($125) {
         $$01$lcssa = $$01;$markedAsLongTerm$0$lcssa = $markedAsLongTerm$0;
         label = 103;
         break L25;
        }
        $126 = HEAP32[$dpb>>2]|0;
        $i$1$ph$i2$i = 0;
        while(1) {
         $129 = (((($126) + (($i$1$ph$i2$i*40)|0)|0)) + 20|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = ($130|0)==(3);
         if ($131) {
          $132 = (((($126) + (($i$1$ph$i2$i*40)|0)|0)) + 8|0);
          $133 = HEAP32[$132>>2]|0;
          $134 = ($133|0)==($123|0);
          if ($134) {
           $$lcssa248 = $129;$i$1$ph$i2$i$lcssa = $i$1$ph$i2$i;
           break;
          }
         }
         $127 = (($i$1$ph$i2$i) + 1)|0;
         $128 = ($127>>>0)<($124>>>0);
         if ($128) {
          $i$1$ph$i2$i = $127;
         } else {
          $$01257 = $$01;$markedAsLongTerm$0262 = $markedAsLongTerm$0;$status$2 = 1;
          break L25;
         }
        }
        $135 = ($i$1$ph$i2$i$lcssa|0)<(0);
        if ($135) {
         $$01$lcssa = $$01;$markedAsLongTerm$0$lcssa = $markedAsLongTerm$0;
         label = 103;
         break L25;
        }
        HEAP32[$$lcssa248>>2] = 0;
        $136 = HEAP32[$87>>2]|0;
        $137 = (($136) + -1)|0;
        HEAP32[$87>>2] = $137;
        $138 = (((($126) + (($i$1$ph$i2$i$lcssa*40)|0)|0)) + 24|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = ($139|0)==(0);
        if ($140) {
         $141 = HEAP32[$88>>2]|0;
         $142 = (($141) + -1)|0;
         HEAP32[$88>>2] = $142;
         $$157 = $$01;$368 = $367;$369 = $210;$markedAsLongTerm$159 = $markedAsLongTerm$0;
        } else {
         $$157 = $$01;$368 = $367;$369 = $210;$markedAsLongTerm$159 = $markedAsLongTerm$0;
        }
        break;
       }
       case 3:  {
        $143 = (((((($mark)) + 12|0) + (($i$0*20)|0)|0)) + 4|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (((((($mark)) + 12|0) + (($i$0*20)|0)|0)) + 12|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = HEAP32[$89>>2]|0;
        $148 = ($147|0)==(65535);
        $149 = ($147>>>0)<($146>>>0);
        $or$cond$i36 = $148 | $149;
        if ($or$cond$i36) {
         $$01$lcssa = $$01;$markedAsLongTerm$0$lcssa = $markedAsLongTerm$0;
         label = 103;
         break L25;
        }
        $150 = HEAP32[$86>>2]|0;
        $151 = ($150|0)==(0);
        if ($151) {
         $$01$lcssa = $$01;$markedAsLongTerm$0$lcssa = $markedAsLongTerm$0;
         label = 103;
         break L25;
        }
        $152 = HEAP32[$dpb>>2]|0;
        $i$07$i = 0;
        while(1) {
         $153 = (((($152) + (($i$07$i*40)|0)|0)) + 20|0);
         $154 = HEAP32[$153>>2]|0;
         $155 = ($154|0)==(3);
         if ($155) {
          $156 = (((($152) + (($i$07$i*40)|0)|0)) + 8|0);
          $157 = HEAP32[$156>>2]|0;
          $158 = ($157|0)==($146|0);
          if ($158) {
           $$lcssa239 = $153;$i$07$i$lcssa = $i$07$i;
           label = 48;
           break;
          }
         }
         $166 = (($i$07$i) + 1)|0;
         $167 = ($166>>>0)<($150>>>0);
         if ($167) {
          $i$07$i = $166;
         } else {
          break;
         }
        }
        if ((label|0) == 48) {
         label = 0;
         HEAP32[$$lcssa239>>2] = 0;
         $159 = HEAP32[$87>>2]|0;
         $160 = (($159) + -1)|0;
         HEAP32[$87>>2] = $160;
         $161 = (((($152) + (($i$07$i$lcssa*40)|0)|0)) + 24|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==(0);
         if ($163) {
          $164 = HEAP32[$88>>2]|0;
          $165 = (($164) + -1)|0;
          HEAP32[$88>>2] = $165;
         }
        }
        $168 = (($$01) - ($144))|0;
        if ($151) {
         $$01$lcssa = $$01;$markedAsLongTerm$0$lcssa = $markedAsLongTerm$0;
         label = 103;
         break L25;
        }
        $169 = HEAP32[$dpb>>2]|0;
        $i$0$ph$i6$i = 0;
        while(1) {
         $172 = (((($169) + (($i$0$ph$i6$i*40)|0)|0)) + 20|0);
         $173 = HEAP32[$172>>2]|0;
         $$off$us$i$i44 = (($173) + -1)|0;
         $switch$us$i$i45 = ($$off$us$i$i44>>>0)<(2);
         if ($switch$us$i$i45) {
          $174 = (((($169) + (($i$0$ph$i6$i*40)|0)|0)) + 8|0);
          $175 = HEAP32[$174>>2]|0;
          $176 = ($175|0)==($168|0);
          if ($176) {
           $$lcssa242 = $172;$$lcssa244 = $173;$$lcssa246 = $174;$i$0$ph$i6$i$lcssa = $i$0$ph$i6$i;
           break;
          }
         }
         $170 = (($i$0$ph$i6$i) + 1)|0;
         $171 = ($170>>>0)<($150>>>0);
         if ($171) {
          $i$0$ph$i6$i = $170;
         } else {
          $$01257 = $$01;$markedAsLongTerm$0262 = $markedAsLongTerm$0;$status$2 = 1;
          break L25;
         }
        }
        $177 = ($i$0$ph$i6$i$lcssa|0)>(-1);
        $178 = ($$lcssa244>>>0)>(1);
        $or$cond19$i = $177 & $178;
        if (!($or$cond19$i)) {
         $$01$lcssa = $$01;$markedAsLongTerm$0$lcssa = $markedAsLongTerm$0;
         label = 103;
         break L25;
        }
        HEAP32[$$lcssa242>>2] = 3;
        HEAP32[$$lcssa246>>2] = $146;
        $$157 = $$01;$368 = $367;$369 = $210;$markedAsLongTerm$159 = $markedAsLongTerm$0;
        break;
       }
       case 4:  {
        $179 = (((((($mark)) + 12|0) + (($i$0*20)|0)|0)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        HEAP32[$89>>2] = $180;
        $181 = HEAP32[$86>>2]|0;
        $182 = ($181|0)==(0);
        if ($182) {
         $$157 = $$01;$368 = $367;$369 = $210;$markedAsLongTerm$159 = $markedAsLongTerm$0;
        } else {
         $183 = HEAP32[$dpb>>2]|0;
         $190 = $180;$i$01$i34 = 0;
         while(1) {
          $184 = (((($183) + (($i$01$i34*40)|0)|0)) + 20|0);
          $185 = HEAP32[$184>>2]|0;
          $186 = ($185|0)==(3);
          do {
           if ($186) {
            $187 = (((($183) + (($i$01$i34*40)|0)|0)) + 8|0);
            $188 = HEAP32[$187>>2]|0;
            $189 = ($188>>>0)>($180>>>0);
            if ($189) {
             $371 = $190;
            } else {
             $191 = ($190|0)==(65535);
             if ($191) {
              $371 = 65535;
             } else {
              $370 = $190;
              break;
             }
            }
            HEAP32[$184>>2] = 0;
            $192 = HEAP32[$87>>2]|0;
            $193 = (($192) + -1)|0;
            HEAP32[$87>>2] = $193;
            $194 = (((($183) + (($i$01$i34*40)|0)|0)) + 24|0);
            $195 = HEAP32[$194>>2]|0;
            $196 = ($195|0)==(0);
            if ($196) {
             $197 = HEAP32[$88>>2]|0;
             $198 = (($197) + -1)|0;
             HEAP32[$88>>2] = $198;
             $370 = $371;
            } else {
             $370 = $371;
            }
           } else {
            $370 = $190;
           }
          } while(0);
          $199 = (($i$01$i34) + 1)|0;
          $exitcond130 = ($199|0)==($181|0);
          if ($exitcond130) {
           $$157 = $$01;$368 = $367;$369 = $210;$markedAsLongTerm$159 = $markedAsLongTerm$0;
           break;
          } else {
           $190 = $370;$i$01$i34 = $199;
          }
         }
        }
        break;
       }
       case 5:  {
        $200 = HEAP32[$dpb>>2]|0;
        $i$01$i19 = 0;
        while(1) {
         $201 = (((($200) + (($i$01$i19*40)|0)|0)) + 20|0);
         $202 = HEAP32[$201>>2]|0;
         $203 = ($202|0)==(0);
         if (!($203)) {
          HEAP32[$201>>2] = 0;
          $204 = (((($200) + (($i$01$i19*40)|0)|0)) + 24|0);
          $205 = HEAP32[$204>>2]|0;
          $206 = ($205|0)==(0);
          if ($206) {
           $207 = HEAP32[$88>>2]|0;
           $208 = (($207) + -1)|0;
           HEAP32[$88>>2] = $208;
          }
         }
         $209 = (($i$01$i19) + 1)|0;
         $exitcond$i20 = ($209|0)==(16);
         if ($exitcond$i20) {
          break;
         } else {
          $i$01$i19 = $209;
         }
        }
        $211 = ($210|0)==(0);
        L87: do {
         if ($211) {
          $212 = HEAP32[$91>>2]|0;
          $241 = $367;
          while(1) {
           $i$01$i$i25 = 0;$picOrderCnt$02$i$i24 = 2147483647;$tmp$03$i$i23 = 0;
           while(1) {
            $213 = (((($200) + (($i$01$i$i25*40)|0)|0)) + 24|0);
            $214 = HEAP32[$213>>2]|0;
            $215 = ($214|0)==(0);
            if ($215) {
             $picOrderCnt$1$i$i28 = $picOrderCnt$02$i$i24;$tmp$1$i$i29 = $tmp$03$i$i23;
            } else {
             $216 = (($200) + (($i$01$i$i25*40)|0)|0);
             $217 = (((($200) + (($i$01$i$i25*40)|0)|0)) + 16|0);
             $218 = HEAP32[$217>>2]|0;
             $219 = ($218|0)<($picOrderCnt$02$i$i24|0);
             $$picOrderCnt$0$i$i26 = $219 ? $218 : $picOrderCnt$02$i$i24;
             $$tmp$0$i$i27 = $219 ? $216 : $tmp$03$i$i23;
             $picOrderCnt$1$i$i28 = $$picOrderCnt$0$i$i26;$tmp$1$i$i29 = $$tmp$0$i$i27;
            }
            $220 = (($i$01$i$i25) + 1)|0;
            $221 = ($220>>>0)>($212>>>0);
            if ($221) {
             $tmp$1$i$i29$lcssa = $tmp$1$i$i29;
             break;
            } else {
             $i$01$i$i25 = $220;$picOrderCnt$02$i$i24 = $picOrderCnt$1$i$i28;$tmp$03$i$i23 = $tmp$1$i$i29;
            }
           }
           $222 = ($tmp$1$i$i29$lcssa|0)==(0|0);
           if ($222) {
            $372 = $241;$373 = 0;
            break L87;
           }
           $223 = HEAP32[$tmp$1$i$i29$lcssa>>2]|0;
           $224 = HEAP32[$92>>2]|0;
           $225 = HEAP32[$93>>2]|0;
           $226 = (($225) + ($224<<4)|0);
           HEAP32[$226>>2] = $223;
           $227 = ((($tmp$1$i$i29$lcssa)) + 36|0);
           $228 = HEAP32[$227>>2]|0;
           $229 = (((($225) + ($224<<4)|0)) + 12|0);
           HEAP32[$229>>2] = $228;
           $230 = ((($tmp$1$i$i29$lcssa)) + 28|0);
           $231 = HEAP32[$230>>2]|0;
           $232 = (((($225) + ($224<<4)|0)) + 4|0);
           HEAP32[$232>>2] = $231;
           $233 = ((($tmp$1$i$i29$lcssa)) + 32|0);
           $234 = HEAP32[$233>>2]|0;
           $235 = (((($225) + ($224<<4)|0)) + 8|0);
           HEAP32[$235>>2] = $234;
           $236 = (($224) + 1)|0;
           HEAP32[$92>>2] = $236;
           $237 = ((($tmp$1$i$i29$lcssa)) + 24|0);
           HEAP32[$237>>2] = 0;
           $238 = ((($tmp$1$i$i29$lcssa)) + 20|0);
           $239 = HEAP32[$238>>2]|0;
           $240 = ($239|0)==(0);
           if ($240) {
            $243 = HEAP32[$88>>2]|0;
            $244 = (($243) + -1)|0;
            HEAP32[$88>>2] = $244;
           }
           $242 = ($241|0)==(0);
           if ($242) {
            $241 = 0;
           } else {
            $372 = $241;$373 = $241;
            break;
           }
          }
         } else {
          $372 = $367;$373 = $210;
         }
        } while(0);
        HEAP32[$87>>2] = 0;
        HEAP32[$89>>2] = 65535;
        HEAP32[$90>>2] = 0;
        HEAP32[$5>>2] = 1;
        $$157 = 0;$368 = $372;$369 = $373;$markedAsLongTerm$159 = $markedAsLongTerm$0;
        break;
       }
       case 6:  {
        $245 = (((((($mark)) + 12|0) + (($i$0*20)|0)|0)) + 12|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = HEAP32[$89>>2]|0;
        $248 = ($247|0)==(65535);
        $249 = ($247>>>0)<($246>>>0);
        $or$cond$i15 = $248 | $249;
        if ($or$cond$i15) {
         $$01257 = $$01;$markedAsLongTerm$0262 = $markedAsLongTerm$0;$status$2 = 1;
         break L25;
        }
        $250 = HEAP32[$86>>2]|0;
        $251 = ($250|0)==(0);
        L104: do {
         if ($251) {
          label = 90;
         } else {
          $252 = HEAP32[$dpb>>2]|0;
          $i$05$i = 0;
          while(1) {
           $253 = (((($252) + (($i$05$i*40)|0)|0)) + 20|0);
           $254 = HEAP32[$253>>2]|0;
           $255 = ($254|0)==(3);
           if ($255) {
            $256 = (((($252) + (($i$05$i*40)|0)|0)) + 8|0);
            $257 = HEAP32[$256>>2]|0;
            $258 = ($257|0)==($246|0);
            if ($258) {
             $$lcssa = $253;$i$05$i$lcssa = $i$05$i;
             break;
            }
           }
           $266 = (($i$05$i) + 1)|0;
           $267 = ($266>>>0)<($250>>>0);
           if ($267) {
            $i$05$i = $266;
           } else {
            label = 90;
            break L104;
           }
          }
          HEAP32[$$lcssa>>2] = 0;
          $259 = HEAP32[$87>>2]|0;
          $260 = (($259) + -1)|0;
          HEAP32[$87>>2] = $260;
          $261 = (((($252) + (($i$05$i$lcssa*40)|0)|0)) + 24|0);
          $262 = HEAP32[$261>>2]|0;
          $263 = ($262|0)==(0);
          if ($263) {
           $264 = HEAP32[$88>>2]|0;
           $265 = (($264) + -1)|0;
           HEAP32[$88>>2] = $265;
           $268 = $260;
          } else {
           $268 = $260;
          }
         }
        } while(0);
        if ((label|0) == 90) {
         label = 0;
         $$pre$i = HEAP32[$87>>2]|0;
         $268 = $$pre$i;
        }
        $269 = ($268>>>0)<($250>>>0);
        if (!($269)) {
         $$01257 = $$01;$markedAsLongTerm$0262 = $markedAsLongTerm$0;$status$2 = 1;
         break L25;
        }
        HEAP32[$94>>2] = $$01;
        HEAP32[$95>>2] = $246;
        HEAP32[$96>>2] = $picOrderCnt;
        HEAP32[$97>>2] = 3;
        $270 = ($210|0)==(0);
        $$$i = $270&1;
        HEAP32[$98>>2] = $$$i;
        $271 = (($268) + 1)|0;
        HEAP32[$87>>2] = $271;
        $272 = HEAP32[$88>>2]|0;
        $273 = (($272) + 1)|0;
        HEAP32[$88>>2] = $273;
        $$157 = $$01;$368 = $367;$369 = $210;$markedAsLongTerm$159 = 1;
        break;
       }
       default: {
        $$01$lcssa = $$01;$markedAsLongTerm$0$lcssa = $markedAsLongTerm$0;
        label = 103;
        break L25;
       }
       }
       $274 = (($i$0) + 1)|0;
       $$01 = $$157;$210 = $369;$367 = $368;$i$0 = $274;$markedAsLongTerm$0 = $markedAsLongTerm$159;
      }
      if ((label|0) == 103) {
       $$01257 = $$01$lcssa;$markedAsLongTerm$0262 = $markedAsLongTerm$0$lcssa;$status$2 = 1;
      }
      $298 = ($markedAsLongTerm$0262|0)==(0);
      if (!($298)) {
       $status$3 = $status$2;
       break;
      }
      $$pre = HEAP32[$87>>2]|0;
      $$pre132 = HEAP32[$86>>2]|0;
      $$263 = $$01257;$$pre$phi135Z2D = $87;$299 = $$pre;$301 = $$pre132;$status$264 = $status$2;
     }
     $300 = ($299>>>0)<($301>>>0);
     if ($300) {
      $302 = ((($2)) + 12|0);
      HEAP32[$302>>2] = $$263;
      $303 = ((($2)) + 8|0);
      HEAP32[$303>>2] = $$263;
      $304 = ((($2)) + 16|0);
      HEAP32[$304>>2] = $picOrderCnt;
      $305 = ((($2)) + 20|0);
      HEAP32[$305>>2] = 2;
      $306 = ((($2)) + 24|0);
      HEAP32[$306>>2] = $8;
      $307 = ((($dpb)) + 44|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = (($308) + 1)|0;
      HEAP32[$307>>2] = $309;
      $310 = (($299) + 1)|0;
      HEAP32[$$pre$phi135Z2D>>2] = $310;
      $status$3 = $status$264;
     } else {
      $status$3 = 1;
     }
    } else {
     $25 = ((($dpb)) + 20|0);
     HEAP32[$25>>2] = 0;
     $26 = ((($dpb)) + 16|0);
     HEAP32[$26>>2] = 0;
     $27 = HEAP32[$dpb>>2]|0;
     $28 = ((($dpb)) + 44|0);
     $i$01$i = 0;
     while(1) {
      $29 = (((($27) + (($i$01$i*40)|0)|0)) + 20|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ($30|0)==(0);
      if (!($31)) {
       HEAP32[$29>>2] = 0;
       $32 = (((($27) + (($i$01$i*40)|0)|0)) + 24|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ($33|0)==(0);
       if ($34) {
        $35 = HEAP32[$28>>2]|0;
        $36 = (($35) + -1)|0;
        HEAP32[$28>>2] = $36;
       }
      }
      $37 = (($i$01$i) + 1)|0;
      $exitcond$i = ($37|0)==(16);
      if ($exitcond$i) {
       break;
      } else {
       $i$01$i = $37;
      }
     }
     L132: do {
      if ($not$) {
       $38 = ((($dpb)) + 28|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ((($dpb)) + 12|0);
       $54 = 0;
       while(1) {
        $i$01$i$i = 0;$picOrderCnt$02$i$i = 2147483647;$tmp$03$i$i = 0;
        while(1) {
         $41 = (((($27) + (($i$01$i$i*40)|0)|0)) + 24|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = ($42|0)==(0);
         if ($43) {
          $picOrderCnt$1$i$i = $picOrderCnt$02$i$i;$tmp$1$i$i = $tmp$03$i$i;
         } else {
          $44 = (($27) + (($i$01$i$i*40)|0)|0);
          $45 = (((($27) + (($i$01$i$i*40)|0)|0)) + 16|0);
          $46 = HEAP32[$45>>2]|0;
          $47 = ($46|0)<($picOrderCnt$02$i$i|0);
          $$picOrderCnt$0$i$i = $47 ? $46 : $picOrderCnt$02$i$i;
          $$tmp$0$i$i = $47 ? $44 : $tmp$03$i$i;
          $picOrderCnt$1$i$i = $$picOrderCnt$0$i$i;$tmp$1$i$i = $$tmp$0$i$i;
         }
         $48 = (($i$01$i$i) + 1)|0;
         $49 = ($48>>>0)>($39>>>0);
         if ($49) {
          $tmp$1$i$i$lcssa = $tmp$1$i$i;
          break;
         } else {
          $i$01$i$i = $48;$picOrderCnt$02$i$i = $picOrderCnt$1$i$i;$tmp$03$i$i = $tmp$1$i$i;
         }
        }
        $50 = ($tmp$1$i$i$lcssa|0)==(0|0);
        if ($50) {
         break L132;
        }
        $51 = HEAP32[$tmp$1$i$i$lcssa>>2]|0;
        $52 = HEAP32[$40>>2]|0;
        $53 = (($52) + ($54<<4)|0);
        HEAP32[$53>>2] = $51;
        $55 = ((($tmp$1$i$i$lcssa)) + 36|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = (((($52) + ($54<<4)|0)) + 12|0);
        HEAP32[$57>>2] = $56;
        $58 = ((($tmp$1$i$i$lcssa)) + 28|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = (((($52) + ($54<<4)|0)) + 4|0);
        HEAP32[$60>>2] = $59;
        $61 = ((($tmp$1$i$i$lcssa)) + 32|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = (((($52) + ($54<<4)|0)) + 8|0);
        HEAP32[$63>>2] = $62;
        $64 = (($54) + 1)|0;
        HEAP32[$26>>2] = $64;
        $65 = ((($tmp$1$i$i$lcssa)) + 24|0);
        HEAP32[$65>>2] = 0;
        $66 = ((($tmp$1$i$i$lcssa)) + 20|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = ($67|0)==(0);
        if (!($68)) {
         $54 = $64;
         continue;
        }
        $69 = HEAP32[$28>>2]|0;
        $70 = (($69) + -1)|0;
        HEAP32[$28>>2] = $70;
        $54 = $64;
       }
      }
     } while(0);
     $71 = ((($dpb)) + 40|0);
     HEAP32[$71>>2] = 0;
     $72 = ((($dpb)) + 36|0);
     HEAP32[$72>>2] = 65535;
     $73 = ((($dpb)) + 48|0);
     HEAP32[$73>>2] = 0;
     $74 = HEAP32[$mark>>2]|0;
     $$not = ($74|0)!=(0);
     $not$$not = $not$ ^ 1;
     $brmerge = $$not | $not$$not;
     if ($brmerge) {
      HEAP32[$26>>2] = 0;
      HEAP32[$25>>2] = 0;
     }
     $75 = ((($mark)) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)==(0);
     $78 = ((($2)) + 20|0);
     $$ = $77 ? 2 : 3;
     $$66 = $77 ? 65535 : 0;
     HEAP32[$78>>2] = $$;
     HEAP32[$72>>2] = $$66;
     $79 = ((($2)) + 12|0);
     HEAP32[$79>>2] = 0;
     $80 = ((($2)) + 8|0);
     HEAP32[$80>>2] = 0;
     $81 = ((($2)) + 16|0);
     HEAP32[$81>>2] = 0;
     $82 = ((($2)) + 24|0);
     HEAP32[$82>>2] = $8;
     HEAP32[$28>>2] = 1;
     HEAP32[$71>>2] = 1;
     $status$3 = 0;
    }
   } while(0);
   $311 = ((($2)) + 36|0);
   HEAP32[$311>>2] = $isIdr;
   $312 = ((($2)) + 28|0);
   HEAP32[$312>>2] = $currentPicId;
   $313 = ((($2)) + 32|0);
   HEAP32[$313>>2] = $numErrMbs;
   if ($not$) {
    $status$3138 = $status$3;
    label = 109;
   } else {
    $status$3140 = $status$3;
    label = 111;
   }
  }
 } while(0);
 if ((label|0) == 109) {
  $314 = ((($dpb)) + 44|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = ((($dpb)) + 28|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = ($315>>>0)>($317>>>0);
  if ($318) {
   $319 = ((($dpb)) + 16|0);
   $320 = ((($dpb)) + 12|0);
   $321 = HEAP32[$dpb>>2]|0;
   $363 = $315;
   while(1) {
    $i$01$i$i5 = 0;$picOrderCnt$02$i$i4 = 2147483647;$tmp$03$i$i3 = 0;
    while(1) {
     $334 = (((($321) + (($i$01$i$i5*40)|0)|0)) + 24|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = ($335|0)==(0);
     if ($336) {
      $picOrderCnt$1$i$i8 = $picOrderCnt$02$i$i4;$tmp$1$i$i9 = $tmp$03$i$i3;
     } else {
      $337 = (($321) + (($i$01$i$i5*40)|0)|0);
      $338 = (((($321) + (($i$01$i$i5*40)|0)|0)) + 16|0);
      $339 = HEAP32[$338>>2]|0;
      $340 = ($339|0)<($picOrderCnt$02$i$i4|0);
      $$picOrderCnt$0$i$i6 = $340 ? $339 : $picOrderCnt$02$i$i4;
      $$tmp$0$i$i7 = $340 ? $337 : $tmp$03$i$i3;
      $picOrderCnt$1$i$i8 = $$picOrderCnt$0$i$i6;$tmp$1$i$i9 = $$tmp$0$i$i7;
     }
     $341 = (($i$01$i$i5) + 1)|0;
     $342 = ($341>>>0)>($317>>>0);
     if ($342) {
      $tmp$1$i$i9$lcssa = $tmp$1$i$i9;
      break;
     } else {
      $i$01$i$i5 = $341;$picOrderCnt$02$i$i4 = $picOrderCnt$1$i$i8;$tmp$03$i$i3 = $tmp$1$i$i9;
     }
    }
    $343 = ($tmp$1$i$i9$lcssa|0)==(0|0);
    if ($343) {
     $332 = $363;
    } else {
     $344 = HEAP32[$tmp$1$i$i9$lcssa>>2]|0;
     $345 = HEAP32[$319>>2]|0;
     $346 = HEAP32[$320>>2]|0;
     $347 = (($346) + ($345<<4)|0);
     HEAP32[$347>>2] = $344;
     $348 = ((($tmp$1$i$i9$lcssa)) + 36|0);
     $349 = HEAP32[$348>>2]|0;
     $350 = (((($346) + ($345<<4)|0)) + 12|0);
     HEAP32[$350>>2] = $349;
     $351 = ((($tmp$1$i$i9$lcssa)) + 28|0);
     $352 = HEAP32[$351>>2]|0;
     $353 = (((($346) + ($345<<4)|0)) + 4|0);
     HEAP32[$353>>2] = $352;
     $354 = ((($tmp$1$i$i9$lcssa)) + 32|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = (((($346) + ($345<<4)|0)) + 8|0);
     HEAP32[$356>>2] = $355;
     $357 = (($345) + 1)|0;
     HEAP32[$319>>2] = $357;
     $358 = ((($tmp$1$i$i9$lcssa)) + 24|0);
     HEAP32[$358>>2] = 0;
     $359 = ((($tmp$1$i$i9$lcssa)) + 20|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = ($360|0)==(0);
     if ($361) {
      $362 = (($363) + -1)|0;
      HEAP32[$314>>2] = $362;
      $332 = $362;
     } else {
      $332 = $363;
     }
    }
    $333 = ($332>>>0)>($317>>>0);
    if ($333) {
     $363 = $332;
    } else {
     $366 = $317;$status$3137 = $status$3138;
     break;
    }
   }
  } else {
   $366 = $317;$status$3137 = $status$3138;
  }
 }
 else if ((label|0) == 111) {
  $322 = HEAP32[$2>>2]|0;
  $323 = ((($dpb)) + 16|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = ((($dpb)) + 12|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = (($326) + ($324<<4)|0);
  HEAP32[$327>>2] = $322;
  $328 = (((($326) + ($324<<4)|0)) + 12|0);
  HEAP32[$328>>2] = $isIdr;
  $329 = (((($326) + ($324<<4)|0)) + 4|0);
  HEAP32[$329>>2] = $currentPicId;
  $330 = (((($326) + ($324<<4)|0)) + 8|0);
  HEAP32[$330>>2] = $numErrMbs;
  $331 = (($324) + 1)|0;
  HEAP32[$323>>2] = $331;
  $$phi$trans$insert133 = ((($dpb)) + 28|0);
  $$pre134 = HEAP32[$$phi$trans$insert133>>2]|0;
  $366 = $$pre134;$status$3137 = $status$3140;
 }
 $364 = HEAP32[$dpb>>2]|0;
 $365 = (($366) + 1)|0;
 _ShellSort($364,$365);
 $$0 = $status$3137;
 return ($$0|0);
}
function _h264bsdGetRefPicData($dpb,$index) {
 $dpb = $dpb|0;
 $index = $index|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($index>>>0)>(16);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($dpb)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($index<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($4)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(1);
 if (!($8)) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = HEAP32[$4>>2]|0;
 $$0 = $9;
 return ($$0|0);
}
function _h264bsdAllocateDpbImage($dpb) {
 $dpb = $dpb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dpb>>2]|0;
 $1 = ((($dpb)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + (($2*40)|0)|0);
 $4 = ((($dpb)) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 return ($5|0);
}
function _h264bsdInitDpb($dpb,$picSizeInMbs,$dpbSize,$maxRefFrames,$maxFrameNum,$noReordering) {
 $dpb = $dpb|0;
 $picSizeInMbs = $picSizeInMbs|0;
 $dpbSize = $dpbSize|0;
 $maxRefFrames = $maxRefFrames|0;
 $maxFrameNum = $maxFrameNum|0;
 $noReordering = $noReordering|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $dpbSize$ = 0, $i$01 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dpb)) + 36|0);
 HEAP32[$0>>2] = 65535;
 $1 = ($maxRefFrames>>>0)>(1);
 $2 = $1 ? $maxRefFrames : 1;
 $3 = ((($dpb)) + 24|0);
 HEAP32[$3>>2] = $2;
 $4 = ($noReordering|0)==(0);
 $5 = ((($dpb)) + 28|0);
 $dpbSize$ = $4 ? $dpbSize : $2;
 HEAP32[$5>>2] = $dpbSize$;
 $6 = ((($dpb)) + 32|0);
 HEAP32[$6>>2] = $maxFrameNum;
 $7 = ((($dpb)) + 56|0);
 HEAP32[$7>>2] = $noReordering;
 $8 = ((($dpb)) + 44|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($dpb)) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($dpb)) + 48|0);
 HEAP32[$10>>2] = 0;
 $11 = (_H264SwDecMalloc(680)|0);
 HEAP32[$dpb>>2] = $11;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 65535;
  return ($$0|0);
 }
 _H264SwDecMemset($11,0,680);
 $13 = HEAP32[$5>>2]|0;
 $14 = ($13|0)==(-1);
 L4: do {
  if (!($14)) {
   $15 = ($picSizeInMbs*384)|0;
   $16 = $15 | 47;
   $i$01 = 0;
   while(1) {
    $17 = (_H264SwDecMalloc($16)|0);
    $18 = HEAP32[$dpb>>2]|0;
    $19 = (((($18) + (($i$01*40)|0)|0)) + 4|0);
    HEAP32[$19>>2] = $17;
    $20 = ($17|0)==(0|0);
    if ($20) {
     $$0 = 65535;
     break;
    }
    $21 = $17;
    $22 = (0 - ($21))|0;
    $23 = $22 & 15;
    $24 = (($17) + ($23)|0);
    $25 = (($18) + (($i$01*40)|0)|0);
    HEAP32[$25>>2] = $24;
    $26 = (($i$01) + 1)|0;
    $27 = HEAP32[$5>>2]|0;
    $28 = (($27) + 1)|0;
    $29 = ($26>>>0)<($28>>>0);
    if ($29) {
     $i$01 = $26;
    } else {
     break L4;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $30 = (_H264SwDecMalloc(68)|0);
 $31 = ((($dpb)) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = HEAP32[$5>>2]|0;
 $33 = $32 << 4;
 $34 = (($33) + 16)|0;
 $35 = (_H264SwDecMalloc($34)|0);
 $36 = ((($dpb)) + 12|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$31>>2]|0;
 $38 = ($37|0)==(0|0);
 $39 = ($35|0)==(0|0);
 $or$cond = $39 | $38;
 if ($or$cond) {
  $$0 = 65535;
  return ($$0|0);
 }
 _H264SwDecMemset($37,0,68);
 $40 = ((($dpb)) + 20|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($dpb)) + 16|0);
 HEAP32[$41>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdResetDpb($dpb,$picSizeInMbs,$dpbSize,$maxRefFrames,$maxFrameNum,$noReordering) {
 $dpb = $dpb|0;
 $picSizeInMbs = $picSizeInMbs|0;
 $dpbSize = $dpbSize|0;
 $maxRefFrames = $maxRefFrames|0;
 $maxFrameNum = $maxFrameNum|0;
 $noReordering = $noReordering|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dpb>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $14 = $0;
 } else {
  $2 = ((($dpb)) + 28|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(-1);
  if ($4) {
   $14 = $0;
  } else {
   $6 = $0;$i$01$i = 0;
   while(1) {
    $5 = (((($6) + (($i$01$i*40)|0)|0)) + 4|0);
    $7 = HEAP32[$5>>2]|0;
    _H264SwDecFree($7);
    $8 = HEAP32[$dpb>>2]|0;
    $9 = (((($8) + (($i$01$i*40)|0)|0)) + 4|0);
    HEAP32[$9>>2] = 0;
    $10 = (($i$01$i) + 1)|0;
    $11 = HEAP32[$2>>2]|0;
    $12 = (($11) + 1)|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $6 = $8;$i$01$i = $10;
    } else {
     $$lcssa = $8;
     break;
    }
   }
   $14 = $$lcssa;
  }
 }
 _H264SwDecFree($14);
 HEAP32[$dpb>>2] = 0;
 $15 = ((($dpb)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _H264SwDecFree($16);
 HEAP32[$15>>2] = 0;
 $17 = ((($dpb)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 _H264SwDecFree($18);
 HEAP32[$17>>2] = 0;
 $19 = (_h264bsdInitDpb($dpb,$picSizeInMbs,$dpbSize,$maxRefFrames,$maxFrameNum,$noReordering)|0);
 return ($19|0);
}
function _h264bsdFreeDpb($dpb) {
 $dpb = $dpb|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dpb>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $14 = $0;
 } else {
  $2 = ((($dpb)) + 28|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(-1);
  if ($4) {
   $14 = $0;
  } else {
   $6 = $0;$i$01 = 0;
   while(1) {
    $5 = (((($6) + (($i$01*40)|0)|0)) + 4|0);
    $7 = HEAP32[$5>>2]|0;
    _H264SwDecFree($7);
    $8 = HEAP32[$dpb>>2]|0;
    $9 = (((($8) + (($i$01*40)|0)|0)) + 4|0);
    HEAP32[$9>>2] = 0;
    $10 = (($i$01) + 1)|0;
    $11 = HEAP32[$2>>2]|0;
    $12 = (($11) + 1)|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $6 = $8;$i$01 = $10;
    } else {
     $$lcssa = $8;
     break;
    }
   }
   $14 = $$lcssa;
  }
 }
 _H264SwDecFree($14);
 HEAP32[$dpb>>2] = 0;
 $15 = ((($dpb)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _H264SwDecFree($16);
 HEAP32[$15>>2] = 0;
 $17 = ((($dpb)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 _H264SwDecFree($18);
 HEAP32[$17>>2] = 0;
 return;
}
function _h264bsdInitRefPicList($dpb) {
 $dpb = $dpb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dpb)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = ((($dpb)) + 4|0);
 $i$01 = 0;
 while(1) {
  $4 = HEAP32[$dpb>>2]|0;
  $5 = (($4) + (($i$01*40)|0)|0);
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($i$01<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = (($i$01) + 1)|0;
  $9 = ($8>>>0)<($1>>>0);
  if ($9) {
   $i$01 = $8;
  } else {
   break;
  }
 }
 return;
}
function _h264bsdCheckGapsInFrameNum($dpb,$frameNum,$isRefPic,$gapsAllowed) {
 $dpb = $dpb|0;
 $frameNum = $frameNum|0;
 $isRefPic = $isRefPic|0;
 $gapsAllowed = $gapsAllowed|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$off$i = 0, $$off$i2 = 0, $$picNum$0$i = 0, $$picOrderCnt$0$i$i = 0, $$pre = 0, $$tmp$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $exitcond21 = 0, $i$0$index$0$i = 0, $i$01$i = 0, $i$01$i$i = 0, $i$014 = 0, $i$04$i = 0, $i$113 = 0, $index$02$i = 0, $index$1$i = 0, $index$1$i$lcssa = 0, $or$cond$i = 0, $picNum$03$i = 0, $picNum$1$i = 0, $picOrderCnt$02$i$i = 0, $picOrderCnt$1$i$i = 0, $switch$i = 0;
 var $switch$i3 = 0, $tmp$03$i$i = 0, $tmp$1$i$i = 0, $tmp$1$i$i$lcssa = 0, $unUsedShortTermFrameNum$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dpb)) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($dpb)) + 20|0);
 HEAP32[$1>>2] = 0;
 $2 = ($gapsAllowed|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($dpb)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($frameNum|0);
 do {
  if ($5) {
   label = 39;
  } else {
   $6 = (($4) + 1)|0;
   $7 = ((($dpb)) + 32|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6>>>0) % ($8>>>0))&-1;
   $10 = ($9|0)==($frameNum|0);
   if ($10) {
    label = 39;
   } else {
    $11 = ((($dpb)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$dpb>>2]|0;
    $14 = (($13) + (($12*40)|0)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($dpb)) + 40|0);
    $17 = ((($dpb)) + 24|0);
    $18 = ((($dpb)) + 44|0);
    $19 = ((($dpb)) + 56|0);
    $20 = ((($dpb)) + 12|0);
    $29 = $8;$unUsedShortTermFrameNum$0 = $9;
    while(1) {
     $21 = HEAP32[$16>>2]|0;
     $22 = ($21|0)==(0);
     if ($22) {
      $34 = 0;
     } else {
      $23 = HEAP32[$dpb>>2]|0;
      $i$01$i = 0;
      while(1) {
       $24 = (((($23) + (($i$01$i*40)|0)|0)) + 20|0);
       $25 = HEAP32[$24>>2]|0;
       $$off$i = (($25) + -1)|0;
       $switch$i = ($$off$i>>>0)<(2);
       if ($switch$i) {
        $26 = (((($23) + (($i$01$i*40)|0)|0)) + 12|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = ($27>>>0)>($unUsedShortTermFrameNum$0>>>0);
        $30 = $28 ? $29 : 0;
        $$ = (($27) - ($30))|0;
        $31 = (((($23) + (($i$01$i*40)|0)|0)) + 8|0);
        HEAP32[$31>>2] = $$;
       }
       $32 = (($i$01$i) + 1)|0;
       $exitcond = ($32|0)==($21|0);
       if ($exitcond) {
        $34 = $21;
        break;
       } else {
        $i$01$i = $32;
       }
      }
     }
     $33 = HEAP32[$17>>2]|0;
     $35 = ($34>>>0)<($33>>>0);
     if ($35) {
      $100 = $21;
     } else {
      $36 = ($34|0)==(0);
      if ($36) {
       $$0 = 1;
       label = 46;
       break;
      }
      $37 = HEAP32[$dpb>>2]|0;
      $i$04$i = 0;$index$02$i = -1;$picNum$03$i = 0;
      while(1) {
       $38 = (((($37) + (($i$04$i*40)|0)|0)) + 20|0);
       $39 = HEAP32[$38>>2]|0;
       $$off$i2 = (($39) + -1)|0;
       $switch$i3 = ($$off$i2>>>0)<(2);
       if ($switch$i3) {
        $40 = (((($37) + (($i$04$i*40)|0)|0)) + 8|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = ($41|0)<($picNum$03$i|0);
        $43 = ($index$02$i|0)==(-1);
        $or$cond$i = $43 | $42;
        $i$0$index$0$i = $or$cond$i ? $i$04$i : $index$02$i;
        $$picNum$0$i = $or$cond$i ? $41 : $picNum$03$i;
        $index$1$i = $i$0$index$0$i;$picNum$1$i = $$picNum$0$i;
       } else {
        $index$1$i = $index$02$i;$picNum$1$i = $picNum$03$i;
       }
       $44 = (($i$04$i) + 1)|0;
       $exitcond21 = ($44|0)==($34|0);
       if ($exitcond21) {
        $index$1$i$lcssa = $index$1$i;
        break;
       } else {
        $i$04$i = $44;$index$02$i = $index$1$i;$picNum$03$i = $picNum$1$i;
       }
      }
      $45 = ($index$1$i$lcssa|0)>(-1);
      if (!($45)) {
       $$0 = 1;
       label = 46;
       break;
      }
      $46 = (((($37) + (($index$1$i$lcssa*40)|0)|0)) + 20|0);
      HEAP32[$46>>2] = 0;
      $47 = (($34) + -1)|0;
      HEAP32[$16>>2] = $47;
      $48 = (((($37) + (($index$1$i$lcssa*40)|0)|0)) + 24|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)==(0);
      if ($50) {
       $51 = HEAP32[$18>>2]|0;
       $52 = (($51) + -1)|0;
       HEAP32[$18>>2] = $52;
       $100 = $47;
      } else {
       $100 = $47;
      }
     }
     $53 = HEAP32[$18>>2]|0;
     $54 = HEAP32[$11>>2]|0;
     $55 = ($53>>>0)<($54>>>0);
     if ($55) {
      $98 = $53;
     } else {
      $56 = HEAP32[$19>>2]|0;
      $57 = ($56|0)==(0);
      $90 = $53;
      while(1) {
       if ($57) {
        $60 = HEAP32[$dpb>>2]|0;
        $i$01$i$i = 0;$picOrderCnt$02$i$i = 2147483647;$tmp$03$i$i = 0;
        while(1) {
         $61 = (((($60) + (($i$01$i$i*40)|0)|0)) + 24|0);
         $62 = HEAP32[$61>>2]|0;
         $63 = ($62|0)==(0);
         if ($63) {
          $picOrderCnt$1$i$i = $picOrderCnt$02$i$i;$tmp$1$i$i = $tmp$03$i$i;
         } else {
          $64 = (($60) + (($i$01$i$i*40)|0)|0);
          $65 = (((($60) + (($i$01$i$i*40)|0)|0)) + 16|0);
          $66 = HEAP32[$65>>2]|0;
          $67 = ($66|0)<($picOrderCnt$02$i$i|0);
          $$picOrderCnt$0$i$i = $67 ? $66 : $picOrderCnt$02$i$i;
          $$tmp$0$i$i = $67 ? $64 : $tmp$03$i$i;
          $picOrderCnt$1$i$i = $$picOrderCnt$0$i$i;$tmp$1$i$i = $$tmp$0$i$i;
         }
         $68 = (($i$01$i$i) + 1)|0;
         $69 = ($68>>>0)>($54>>>0);
         if ($69) {
          $tmp$1$i$i$lcssa = $tmp$1$i$i;
          break;
         } else {
          $i$01$i$i = $68;$picOrderCnt$02$i$i = $picOrderCnt$1$i$i;$tmp$03$i$i = $tmp$1$i$i;
         }
        }
        $70 = ($tmp$1$i$i$lcssa|0)==(0|0);
        if ($70) {
         $58 = $90;
        } else {
         $71 = HEAP32[$tmp$1$i$i$lcssa>>2]|0;
         $72 = HEAP32[$0>>2]|0;
         $73 = HEAP32[$20>>2]|0;
         $74 = (($73) + ($72<<4)|0);
         HEAP32[$74>>2] = $71;
         $75 = ((($tmp$1$i$i$lcssa)) + 36|0);
         $76 = HEAP32[$75>>2]|0;
         $77 = (((($73) + ($72<<4)|0)) + 12|0);
         HEAP32[$77>>2] = $76;
         $78 = ((($tmp$1$i$i$lcssa)) + 28|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = (((($73) + ($72<<4)|0)) + 4|0);
         HEAP32[$80>>2] = $79;
         $81 = ((($tmp$1$i$i$lcssa)) + 32|0);
         $82 = HEAP32[$81>>2]|0;
         $83 = (((($73) + ($72<<4)|0)) + 8|0);
         HEAP32[$83>>2] = $82;
         $84 = (($72) + 1)|0;
         HEAP32[$0>>2] = $84;
         $85 = ((($tmp$1$i$i$lcssa)) + 24|0);
         HEAP32[$85>>2] = 0;
         $86 = ((($tmp$1$i$i$lcssa)) + 20|0);
         $87 = HEAP32[$86>>2]|0;
         $88 = ($87|0)==(0);
         if ($88) {
          $89 = (($90) + -1)|0;
          HEAP32[$18>>2] = $89;
          $58 = $89;
         } else {
          $58 = $90;
         }
        }
       } else {
        $58 = $90;
       }
       $59 = ($58>>>0)<($54>>>0);
       if ($59) {
        $98 = $58;
        break;
       } else {
        $90 = $58;
       }
      }
     }
     $91 = HEAP32[$dpb>>2]|0;
     $92 = (((($91) + (($54*40)|0)|0)) + 20|0);
     HEAP32[$92>>2] = 1;
     $93 = (((($91) + (($54*40)|0)|0)) + 12|0);
     HEAP32[$93>>2] = $unUsedShortTermFrameNum$0;
     $94 = (((($91) + (($54*40)|0)|0)) + 8|0);
     HEAP32[$94>>2] = $unUsedShortTermFrameNum$0;
     $95 = (((($91) + (($54*40)|0)|0)) + 16|0);
     HEAP32[$95>>2] = 0;
     $96 = (((($91) + (($54*40)|0)|0)) + 24|0);
     HEAP32[$96>>2] = 0;
     $97 = (($98) + 1)|0;
     HEAP32[$18>>2] = $97;
     $99 = (($100) + 1)|0;
     HEAP32[$16>>2] = $99;
     $101 = (($54) + 1)|0;
     _ShellSort($91,$101);
     $102 = (($unUsedShortTermFrameNum$0) + 1)|0;
     $103 = HEAP32[$7>>2]|0;
     $104 = (($102>>>0) % ($103>>>0))&-1;
     $105 = ($104|0)==($frameNum|0);
     if ($105) {
      label = 31;
      break;
     } else {
      $29 = $103;$unUsedShortTermFrameNum$0 = $104;
     }
    }
    if ((label|0) == 31) {
     $106 = HEAP32[$0>>2]|0;
     $107 = ($106|0)==(0);
     L47: do {
      if (!($107)) {
       $108 = HEAP32[$20>>2]|0;
       $109 = HEAP32[$11>>2]|0;
       $110 = HEAP32[$dpb>>2]|0;
       $111 = (($110) + (($109*40)|0)|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = $112;
       $i$014 = 0;
       while(1) {
        $116 = (($108) + ($i$014<<4)|0);
        $117 = HEAP32[$116>>2]|0;
        $118 = ($117|0)==($112|0);
        $114 = (($i$014) + 1)|0;
        if ($118) {
         break;
        }
        $115 = ($114>>>0)<($106>>>0);
        if ($115) {
         $i$014 = $114;
        } else {
         break L47;
        }
       }
       $119 = ($109|0)==(0);
       if (!($119)) {
        $i$113 = 0;
        while(1) {
         $122 = (($110) + (($i$113*40)|0)|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = ($123|0)==($15|0);
         $120 = (($i$113) + 1)|0;
         if ($124) {
          $$lcssa = $122;
          break;
         }
         $121 = ($120>>>0)<($109>>>0);
         if ($121) {
          $i$113 = $120;
         } else {
          break L47;
         }
        }
        HEAP32[$$lcssa>>2] = $113;
        HEAP32[$111>>2] = $15;
       }
      }
     } while(0);
     $125 = ($isRefPic|0)==(0);
     if (!($125)) {
      label = 43;
      break;
     }
     $$pre = HEAP32[$3>>2]|0;
     $126 = $$pre;
     break;
    }
    else if ((label|0) == 46) {
     return ($$0|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 39) {
  $cond = ($isRefPic|0)==(0);
  if ($cond) {
   $126 = $4;
  } else {
   if ($5) {
    $$0 = 1;
    return ($$0|0);
   } else {
    label = 43;
   }
  }
 }
 if ((label|0) == 43) {
  HEAP32[$3>>2] = $frameNum;
  $$0 = 0;
  return ($$0|0);
 }
 $127 = ($126|0)==($frameNum|0);
 if ($127) {
  $$0 = 0;
  return ($$0|0);
 }
 $128 = ((($dpb)) + 32|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($frameNum) + -1)|0;
 $131 = (($130) + ($129))|0;
 $132 = (($131>>>0) % ($129>>>0))&-1;
 HEAP32[$3>>2] = $132;
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdDpbOutputPicture($dpb) {
 $dpb = $dpb|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dpb)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($dpb)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($dpb)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + 1)|0;
 HEAP32[$0>>2] = $7;
 $8 = (($6) + ($1<<4)|0);
 $$0 = $8;
 return ($$0|0);
}
function _h264bsdFlushDpb($dpb) {
 $dpb = $dpb|0;
 var $$picOrderCnt$0$i$i = 0, $$tmp$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$01$i$i = 0, $picOrderCnt$02$i$i = 0, $picOrderCnt$1$i$i = 0, $tmp$03$i$i = 0, $tmp$1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dpb>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($dpb)) + 60|0);
 HEAP32[$2>>2] = 1;
 $3 = ((($dpb)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  return;
 }
 $6 = ((($dpb)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($dpb)) + 16|0);
 $9 = ((($dpb)) + 12|0);
 $10 = ((($dpb)) + 44|0);
 $i$01$i$i = 0;$picOrderCnt$02$i$i = 2147483647;$tmp$03$i$i = 0;
 while(1) {
  $11 = (((($0) + (($i$01$i$i*40)|0)|0)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $picOrderCnt$1$i$i = $picOrderCnt$02$i$i;$tmp$1$i$i = $tmp$03$i$i;
  } else {
   $14 = (($0) + (($i$01$i$i*40)|0)|0);
   $15 = (((($0) + (($i$01$i$i*40)|0)|0)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)<($picOrderCnt$02$i$i|0);
   $$picOrderCnt$0$i$i = $17 ? $16 : $picOrderCnt$02$i$i;
   $$tmp$0$i$i = $17 ? $14 : $tmp$03$i$i;
   $picOrderCnt$1$i$i = $$picOrderCnt$0$i$i;$tmp$1$i$i = $$tmp$0$i$i;
  }
  $18 = (($i$01$i$i) + 1)|0;
  $19 = ($18>>>0)>($7>>>0);
  if (!($19)) {
   $i$01$i$i = $18;$picOrderCnt$02$i$i = $picOrderCnt$1$i$i;$tmp$03$i$i = $tmp$1$i$i;
   continue;
  }
  $20 = ($tmp$1$i$i|0)==(0|0);
  if ($20) {
   break;
  }
  $21 = HEAP32[$tmp$1$i$i>>2]|0;
  $22 = HEAP32[$8>>2]|0;
  $23 = HEAP32[$9>>2]|0;
  $24 = (($23) + ($22<<4)|0);
  HEAP32[$24>>2] = $21;
  $25 = ((($tmp$1$i$i)) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (((($23) + ($22<<4)|0)) + 12|0);
  HEAP32[$27>>2] = $26;
  $28 = ((($tmp$1$i$i)) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (((($23) + ($22<<4)|0)) + 4|0);
  HEAP32[$30>>2] = $29;
  $31 = ((($tmp$1$i$i)) + 32|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (((($23) + ($22<<4)|0)) + 8|0);
  HEAP32[$33>>2] = $32;
  $34 = (($22) + 1)|0;
  HEAP32[$8>>2] = $34;
  $35 = ((($tmp$1$i$i)) + 24|0);
  HEAP32[$35>>2] = 0;
  $36 = ((($tmp$1$i$i)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0);
  if (!($38)) {
   $i$01$i$i = 0;$picOrderCnt$02$i$i = 2147483647;$tmp$03$i$i = 0;
   continue;
  }
  $39 = HEAP32[$10>>2]|0;
  $40 = (($39) + -1)|0;
  HEAP32[$10>>2] = $40;
  $i$01$i$i = 0;$picOrderCnt$02$i$i = 2147483647;$tmp$03$i$i = 0;
 }
 return;
}
function _h264bsdWriteMacroblock($image,$data) {
 $image = $image|0;
 $data = $data|0;
 var $$sum = 0, $$sum15 = 0, $$sum1617 = 0, $$sum18 = 0, $$sum1920 = 0, $$sum21 = 0, $$sum2223 = 0, $$sum24 = 0, $$sum2526 = 0, $$sum27 = 0, $$sum2829 = 0, $$sum30 = 0, $$sum31 = 0, $$sum3233 = 0, $$sum34 = 0, $$sum3536 = 0, $$sum37 = 0, $$sum3839 = 0, $$sum40 = 0, $$sum4142 = 0;
 var $$sum43 = 0, $$sum4445 = 0, $$sum46 = 0, $$sum4748 = 0, $$sum49 = 0, $$sum50 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i$07 = 0, $lum$08 = 0, $ptr$09 = 0, $scevgep = 0, $scevgep13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($image)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($image)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($image)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($image)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1 << 2;
 $scevgep13 = ((($data)) + 256|0);
 $i$07 = 16;$lum$08 = $3;$ptr$09 = $data;
 while(1) {
  $9 = ((($ptr$09)) + 4|0);
  $10 = HEAP32[$ptr$09>>2]|0;
  $11 = ((($ptr$09)) + 8|0);
  $12 = HEAP32[$9>>2]|0;
  $13 = ((($lum$08)) + 4|0);
  HEAP32[$lum$08>>2] = $10;
  $14 = ((($lum$08)) + 8|0);
  HEAP32[$13>>2] = $12;
  $15 = ((($ptr$09)) + 12|0);
  $16 = HEAP32[$11>>2]|0;
  $17 = ((($ptr$09)) + 16|0);
  $18 = HEAP32[$15>>2]|0;
  $19 = ((($lum$08)) + 12|0);
  HEAP32[$14>>2] = $16;
  HEAP32[$19>>2] = $18;
  $20 = (($lum$08) + ($8<<2)|0);
  $21 = (($i$07) + -1)|0;
  $22 = ($21|0)==(0);
  if ($22) {
   break;
  } else {
   $i$07 = $21;$lum$08 = $20;$ptr$09 = $17;
  }
 }
 $23 = $1 << 1;
 $24 = $23 & 2147483646;
 $scevgep = ((($data)) + 320|0);
 $25 = ((($data)) + 260|0);
 $26 = HEAP32[$scevgep13>>2]|0;
 $27 = ((($data)) + 264|0);
 $28 = HEAP32[$25>>2]|0;
 $29 = ((($5)) + 4|0);
 HEAP32[$5>>2] = $26;
 HEAP32[$29>>2] = $28;
 $30 = (($5) + ($24<<2)|0);
 $31 = ((($data)) + 268|0);
 $32 = HEAP32[$27>>2]|0;
 $33 = ((($data)) + 272|0);
 $34 = HEAP32[$31>>2]|0;
 $$sum15 = $24 | 1;
 $35 = (($5) + ($$sum15<<2)|0);
 HEAP32[$30>>2] = $32;
 HEAP32[$35>>2] = $34;
 $$sum = $1 << 2;
 $36 = (($5) + ($$sum<<2)|0);
 $37 = ((($data)) + 276|0);
 $38 = HEAP32[$33>>2]|0;
 $39 = ((($data)) + 280|0);
 $40 = HEAP32[$37>>2]|0;
 $$sum1617 = $$sum | 1;
 $41 = (($5) + ($$sum1617<<2)|0);
 HEAP32[$36>>2] = $38;
 HEAP32[$41>>2] = $40;
 $$sum18 = (($$sum) + ($24))|0;
 $42 = (($5) + ($$sum18<<2)|0);
 $43 = ((($data)) + 284|0);
 $44 = HEAP32[$39>>2]|0;
 $45 = ((($data)) + 288|0);
 $46 = HEAP32[$43>>2]|0;
 $$sum1920 = $$sum18 | 1;
 $47 = (($5) + ($$sum1920<<2)|0);
 HEAP32[$42>>2] = $44;
 HEAP32[$47>>2] = $46;
 $$sum21 = (($$sum18) + ($24))|0;
 $48 = (($5) + ($$sum21<<2)|0);
 $49 = ((($data)) + 292|0);
 $50 = HEAP32[$45>>2]|0;
 $51 = ((($data)) + 296|0);
 $52 = HEAP32[$49>>2]|0;
 $$sum2223 = $$sum21 | 1;
 $53 = (($5) + ($$sum2223<<2)|0);
 HEAP32[$48>>2] = $50;
 HEAP32[$53>>2] = $52;
 $$sum24 = (($$sum21) + ($24))|0;
 $54 = (($5) + ($$sum24<<2)|0);
 $55 = ((($data)) + 300|0);
 $56 = HEAP32[$51>>2]|0;
 $57 = ((($data)) + 304|0);
 $58 = HEAP32[$55>>2]|0;
 $$sum2526 = $$sum24 | 1;
 $59 = (($5) + ($$sum2526<<2)|0);
 HEAP32[$54>>2] = $56;
 HEAP32[$59>>2] = $58;
 $$sum27 = (($$sum24) + ($24))|0;
 $60 = (($5) + ($$sum27<<2)|0);
 $61 = ((($data)) + 308|0);
 $62 = HEAP32[$57>>2]|0;
 $63 = ((($data)) + 312|0);
 $64 = HEAP32[$61>>2]|0;
 $$sum2829 = $$sum27 | 1;
 $65 = (($5) + ($$sum2829<<2)|0);
 HEAP32[$60>>2] = $62;
 HEAP32[$65>>2] = $64;
 $$sum30 = (($$sum27) + ($24))|0;
 $66 = (($5) + ($$sum30<<2)|0);
 $67 = ((($data)) + 316|0);
 $68 = HEAP32[$63>>2]|0;
 $69 = HEAP32[$67>>2]|0;
 $$sum31 = $$sum30 | 1;
 $70 = (($5) + ($$sum31<<2)|0);
 HEAP32[$66>>2] = $68;
 HEAP32[$70>>2] = $69;
 $71 = ((($data)) + 324|0);
 $72 = HEAP32[$scevgep>>2]|0;
 $73 = ((($data)) + 328|0);
 $74 = HEAP32[$71>>2]|0;
 $75 = ((($7)) + 4|0);
 HEAP32[$7>>2] = $72;
 HEAP32[$75>>2] = $74;
 $76 = (($7) + ($24<<2)|0);
 $77 = ((($data)) + 332|0);
 $78 = HEAP32[$73>>2]|0;
 $79 = ((($data)) + 336|0);
 $80 = HEAP32[$77>>2]|0;
 $$sum3233 = $24 | 1;
 $81 = (($7) + ($$sum3233<<2)|0);
 HEAP32[$76>>2] = $78;
 HEAP32[$81>>2] = $80;
 $$sum34 = $1 << 2;
 $82 = (($7) + ($$sum34<<2)|0);
 $83 = ((($data)) + 340|0);
 $84 = HEAP32[$79>>2]|0;
 $85 = ((($data)) + 344|0);
 $86 = HEAP32[$83>>2]|0;
 $$sum3536 = $$sum34 | 1;
 $87 = (($7) + ($$sum3536<<2)|0);
 HEAP32[$82>>2] = $84;
 HEAP32[$87>>2] = $86;
 $$sum37 = (($$sum34) + ($24))|0;
 $88 = (($7) + ($$sum37<<2)|0);
 $89 = ((($data)) + 348|0);
 $90 = HEAP32[$85>>2]|0;
 $91 = ((($data)) + 352|0);
 $92 = HEAP32[$89>>2]|0;
 $$sum3839 = $$sum37 | 1;
 $93 = (($7) + ($$sum3839<<2)|0);
 HEAP32[$88>>2] = $90;
 HEAP32[$93>>2] = $92;
 $$sum40 = (($$sum37) + ($24))|0;
 $94 = (($7) + ($$sum40<<2)|0);
 $95 = ((($data)) + 356|0);
 $96 = HEAP32[$91>>2]|0;
 $97 = ((($data)) + 360|0);
 $98 = HEAP32[$95>>2]|0;
 $$sum4142 = $$sum40 | 1;
 $99 = (($7) + ($$sum4142<<2)|0);
 HEAP32[$94>>2] = $96;
 HEAP32[$99>>2] = $98;
 $$sum43 = (($$sum40) + ($24))|0;
 $100 = (($7) + ($$sum43<<2)|0);
 $101 = ((($data)) + 364|0);
 $102 = HEAP32[$97>>2]|0;
 $103 = ((($data)) + 368|0);
 $104 = HEAP32[$101>>2]|0;
 $$sum4445 = $$sum43 | 1;
 $105 = (($7) + ($$sum4445<<2)|0);
 HEAP32[$100>>2] = $102;
 HEAP32[$105>>2] = $104;
 $$sum46 = (($$sum43) + ($24))|0;
 $106 = (($7) + ($$sum46<<2)|0);
 $107 = ((($data)) + 372|0);
 $108 = HEAP32[$103>>2]|0;
 $109 = ((($data)) + 376|0);
 $110 = HEAP32[$107>>2]|0;
 $$sum4748 = $$sum46 | 1;
 $111 = (($7) + ($$sum4748<<2)|0);
 HEAP32[$106>>2] = $108;
 HEAP32[$111>>2] = $110;
 $$sum49 = (($$sum46) + ($24))|0;
 $112 = (($7) + ($$sum49<<2)|0);
 $113 = ((($data)) + 380|0);
 $114 = HEAP32[$109>>2]|0;
 $115 = HEAP32[$113>>2]|0;
 $$sum50 = $$sum49 | 1;
 $116 = (($7) + ($$sum50<<2)|0);
 HEAP32[$112>>2] = $114;
 HEAP32[$116>>2] = $115;
 return;
}
function _h264bsdWriteOutputBlocks($image,$mbNum,$data,$residual) {
 $image = $image|0;
 $mbNum = $mbNum|0;
 $data = $data|0;
 $residual = $residual|0;
 var $$ = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum100 = 0, $$sum101 = 0, $$sum102 = 0, $$sum103 = 0, $$sum104 = 0, $$sum105 = 0, $$sum106 = 0, $$sum107 = 0, $$sum108 = 0, $$sum109 = 0, $$sum1146 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0;
 var $$sum16$1 = 0, $$sum16$2 = 0, $$sum16$3 = 0, $$sum17 = 0, $$sum17$1 = 0, $$sum17$2 = 0, $$sum17$3 = 0, $$sum18 = 0, $$sum18$1 = 0, $$sum18$2 = 0, $$sum18$3 = 0, $$sum19 = 0, $$sum19$1 = 0, $$sum19$2 = 0, $$sum19$3 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0;
 var $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum3 = 0, $$sum3$$sum2 = 0, $$sum4 = 0, $$sum4$1 = 0, $$sum4$2 = 0, $$sum4$3 = 0, $$sum5 = 0, $$sum5$1 = 0, $$sum5$2 = 0, $$sum5$3 = 0, $$sum50 = 0, $$sum51 = 0, $$sum52 = 0, $$sum53 = 0, $$sum54 = 0;
 var $$sum55 = 0, $$sum56 = 0, $$sum57 = 0, $$sum58 = 0, $$sum59 = 0, $$sum6 = 0, $$sum6$1 = 0, $$sum6$2 = 0, $$sum6$3 = 0, $$sum60 = 0, $$sum61 = 0, $$sum62 = 0, $$sum63 = 0, $$sum64 = 0, $$sum65 = 0, $$sum66 = 0, $$sum67 = 0, $$sum68 = 0, $$sum69 = 0, $$sum7 = 0;
 var $$sum7$1 = 0, $$sum7$2 = 0, $$sum7$3 = 0, $$sum70 = 0, $$sum71 = 0, $$sum72 = 0, $$sum73 = 0, $$sum74 = 0, $$sum75 = 0, $$sum76 = 0, $$sum77 = 0, $$sum78 = 0, $$sum79 = 0, $$sum80 = 0, $$sum81 = 0, $$sum82 = 0, $$sum83 = 0, $$sum84 = 0, $$sum844 = 0, $$sum85 = 0;
 var $$sum86 = 0, $$sum87 = 0, $$sum88 = 0, $$sum89 = 0, $$sum90 = 0, $$sum91 = 0, $$sum92 = 0, $$sum93 = 0, $$sum94 = 0, $$sum945 = 0, $$sum95 = 0, $$sum96 = 0, $$sum97 = 0, $$sum98 = 0, $$sum99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $block$043 = 0, $block$138 = 0, $exitcond = 0, $exitcond49 = 0, $imageBlock$1$sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($image)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($image)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = (($mbNum>>>0) % ($1>>>0))&-1;
 $6 = HEAP32[$image>>2]|0;
 $7 = (($mbNum) - ($5))|0;
 $8 = $7 << 8;
 $9 = $5 << 4;
 $$sum = (($8) + ($9))|0;
 $10 = $4 << 8;
 $11 = $5 << 3;
 $12 = $1 << 4;
 $13 = $1 << 2;
 $14 = $13 & 1073741820;
 $$sum22 = $14 << 1;
 $$sum24 = ($14*3)|0;
 $block$043 = 0;
 while(1) {
  $15 = (2824 + ($block$043<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (2888 + ($block$043<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($residual) + ($block$043<<6)|0);
  $20 = $18 << 4;
  $$sum13 = (($20) + ($16))|0;
  $21 = (($data) + ($$sum13)|0);
  $22 = Math_imul($18, $12)|0;
  $$sum14 = (($$sum) + ($16))|0;
  $$sum15 = (($$sum14) + ($22))|0;
  $23 = (($6) + ($$sum15)|0);
  $24 = HEAP32[$19>>2]|0;
  $25 = ($24|0)==(16777215);
  if ($25) {
   $166 = HEAP32[$21>>2]|0;
   $$sum20 = (($$sum13) + 16)|0;
   $167 = (($data) + ($$sum20)|0);
   $168 = HEAP32[$167>>2]|0;
   $$sum21 = (($$sum13) + 32)|0;
   $169 = (($data) + ($$sum21)|0);
   HEAP32[$23>>2] = $166;
   $170 = (($23) + ($14<<2)|0);
   HEAP32[$170>>2] = $168;
   $171 = (($23) + ($$sum22<<2)|0);
   $172 = HEAP32[$169>>2]|0;
   $$sum23 = (($$sum13) + 48)|0;
   $173 = (($data) + ($$sum23)|0);
   $174 = HEAP32[$173>>2]|0;
   HEAP32[$171>>2] = $172;
   $175 = (($23) + ($$sum24<<2)|0);
   HEAP32[$175>>2] = $174;
  } else {
   $26 = HEAP8[$21>>0]|0;
   $27 = $26&255;
   $28 = (((($residual) + ($block$043<<6)|0)) + 4|0);
   $$sum50 = (($$sum13) + 1)|0;
   $29 = (($data) + ($$sum50)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = (($24) + 512)|0;
   $$sum16 = (($32) + ($27))|0;
   $33 = (60442 + ($$sum16)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = (((($residual) + ($block$043<<6)|0)) + 8|0);
   $36 = HEAP32[$28>>2]|0;
   HEAP8[$23>>0] = $34;
   $37 = $31 | 512;
   $$sum17 = (($37) + ($36))|0;
   $38 = (60442 + ($$sum17)|0);
   $39 = HEAP8[$38>>0]|0;
   $$sum51 = (($$sum13) + 2)|0;
   $40 = (($data) + ($$sum51)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = (((($residual) + ($block$043<<6)|0)) + 12|0);
   $44 = HEAP32[$35>>2]|0;
   $$sum52 = (($$sum15) + 1)|0;
   $45 = (($6) + ($$sum52)|0);
   HEAP8[$45>>0] = $39;
   $46 = (($44) + 512)|0;
   $$sum18 = (($46) + ($42))|0;
   $47 = (60442 + ($$sum18)|0);
   $48 = HEAP8[$47>>0]|0;
   $$sum53 = (($$sum13) + 3)|0;
   $49 = (($data) + ($$sum53)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = (((($residual) + ($block$043<<6)|0)) + 16|0);
   $53 = HEAP32[$43>>2]|0;
   $$sum54 = (($$sum15) + 2)|0;
   $54 = (($6) + ($$sum54)|0);
   HEAP8[$54>>0] = $48;
   $55 = (($53) + 512)|0;
   $$sum19 = (($55) + ($51))|0;
   $56 = (60442 + ($$sum19)|0);
   $57 = HEAP8[$56>>0]|0;
   $$sum55 = (($$sum13) + 16)|0;
   $58 = (($data) + ($$sum55)|0);
   $$sum56 = (($$sum15) + 3)|0;
   $59 = (($6) + ($$sum56)|0);
   HEAP8[$59>>0] = $57;
   $$sum57 = (($$sum15) + ($12))|0;
   $60 = (($6) + ($$sum57)|0);
   $61 = HEAP8[$58>>0]|0;
   $62 = $61&255;
   $63 = (((($residual) + ($block$043<<6)|0)) + 20|0);
   $64 = HEAP32[$52>>2]|0;
   $$sum58 = (($$sum13) + 17)|0;
   $65 = (($data) + ($$sum58)|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = (($64) + 512)|0;
   $$sum16$1 = (($68) + ($62))|0;
   $69 = (60442 + ($$sum16$1)|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = (((($residual) + ($block$043<<6)|0)) + 24|0);
   $72 = HEAP32[$63>>2]|0;
   HEAP8[$60>>0] = $70;
   $73 = $67 | 512;
   $$sum17$1 = (($73) + ($72))|0;
   $74 = (60442 + ($$sum17$1)|0);
   $75 = HEAP8[$74>>0]|0;
   $$sum59 = (($$sum13) + 18)|0;
   $76 = (($data) + ($$sum59)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = (((($residual) + ($block$043<<6)|0)) + 28|0);
   $80 = HEAP32[$71>>2]|0;
   $$sum60 = (($$sum57) + 1)|0;
   $81 = (($6) + ($$sum60)|0);
   HEAP8[$81>>0] = $75;
   $82 = (($80) + 512)|0;
   $$sum18$1 = (($82) + ($78))|0;
   $83 = (60442 + ($$sum18$1)|0);
   $84 = HEAP8[$83>>0]|0;
   $$sum61 = (($$sum13) + 19)|0;
   $85 = (($data) + ($$sum61)|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = (((($residual) + ($block$043<<6)|0)) + 32|0);
   $89 = HEAP32[$79>>2]|0;
   $$sum62 = (($$sum57) + 2)|0;
   $90 = (($6) + ($$sum62)|0);
   HEAP8[$90>>0] = $84;
   $91 = (($89) + 512)|0;
   $$sum19$1 = (($91) + ($87))|0;
   $92 = (60442 + ($$sum19$1)|0);
   $93 = HEAP8[$92>>0]|0;
   $$sum63 = (($$sum13) + 32)|0;
   $94 = (($data) + ($$sum63)|0);
   $$sum64 = (($$sum57) + 3)|0;
   $95 = (($6) + ($$sum64)|0);
   HEAP8[$95>>0] = $93;
   $$sum65 = (($$sum57) + ($12))|0;
   $96 = (($6) + ($$sum65)|0);
   $97 = HEAP8[$94>>0]|0;
   $98 = $97&255;
   $99 = (((($residual) + ($block$043<<6)|0)) + 36|0);
   $100 = HEAP32[$88>>2]|0;
   $$sum66 = (($$sum13) + 33)|0;
   $101 = (($data) + ($$sum66)|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = (($100) + 512)|0;
   $$sum16$2 = (($104) + ($98))|0;
   $105 = (60442 + ($$sum16$2)|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = (((($residual) + ($block$043<<6)|0)) + 40|0);
   $108 = HEAP32[$99>>2]|0;
   HEAP8[$96>>0] = $106;
   $109 = $103 | 512;
   $$sum17$2 = (($109) + ($108))|0;
   $110 = (60442 + ($$sum17$2)|0);
   $111 = HEAP8[$110>>0]|0;
   $$sum67 = (($$sum13) + 34)|0;
   $112 = (($data) + ($$sum67)|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $113&255;
   $115 = (((($residual) + ($block$043<<6)|0)) + 44|0);
   $116 = HEAP32[$107>>2]|0;
   $$sum68 = (($$sum65) + 1)|0;
   $117 = (($6) + ($$sum68)|0);
   HEAP8[$117>>0] = $111;
   $118 = (($116) + 512)|0;
   $$sum18$2 = (($118) + ($114))|0;
   $119 = (60442 + ($$sum18$2)|0);
   $120 = HEAP8[$119>>0]|0;
   $$sum69 = (($$sum13) + 35)|0;
   $121 = (($data) + ($$sum69)|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = (((($residual) + ($block$043<<6)|0)) + 48|0);
   $125 = HEAP32[$115>>2]|0;
   $$sum70 = (($$sum65) + 2)|0;
   $126 = (($6) + ($$sum70)|0);
   HEAP8[$126>>0] = $120;
   $127 = (($125) + 512)|0;
   $$sum19$2 = (($127) + ($123))|0;
   $128 = (60442 + ($$sum19$2)|0);
   $129 = HEAP8[$128>>0]|0;
   $$sum71 = (($$sum13) + 48)|0;
   $130 = (($data) + ($$sum71)|0);
   $$sum72 = (($$sum65) + 3)|0;
   $131 = (($6) + ($$sum72)|0);
   HEAP8[$131>>0] = $129;
   $$sum73 = (($$sum65) + ($12))|0;
   $132 = (($6) + ($$sum73)|0);
   $133 = HEAP8[$130>>0]|0;
   $134 = $133&255;
   $135 = (((($residual) + ($block$043<<6)|0)) + 52|0);
   $136 = HEAP32[$124>>2]|0;
   $$sum74 = (($$sum13) + 49)|0;
   $137 = (($data) + ($$sum74)|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = (($136) + 512)|0;
   $$sum16$3 = (($140) + ($134))|0;
   $141 = (60442 + ($$sum16$3)|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = (((($residual) + ($block$043<<6)|0)) + 56|0);
   $144 = HEAP32[$135>>2]|0;
   HEAP8[$132>>0] = $142;
   $145 = $139 | 512;
   $$sum17$3 = (($145) + ($144))|0;
   $146 = (60442 + ($$sum17$3)|0);
   $147 = HEAP8[$146>>0]|0;
   $$sum75 = (($$sum13) + 50)|0;
   $148 = (($data) + ($$sum75)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (((($residual) + ($block$043<<6)|0)) + 60|0);
   $152 = HEAP32[$143>>2]|0;
   $$sum76 = (($$sum73) + 1)|0;
   $153 = (($6) + ($$sum76)|0);
   HEAP8[$153>>0] = $147;
   $154 = (($152) + 512)|0;
   $$sum18$3 = (($154) + ($150))|0;
   $155 = (60442 + ($$sum18$3)|0);
   $156 = HEAP8[$155>>0]|0;
   $$sum77 = (($$sum13) + 51)|0;
   $157 = (($data) + ($$sum77)|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158&255;
   $160 = HEAP32[$151>>2]|0;
   $$sum78 = (($$sum73) + 2)|0;
   $161 = (($6) + ($$sum78)|0);
   HEAP8[$161>>0] = $156;
   $162 = (($160) + 512)|0;
   $$sum19$3 = (($162) + ($159))|0;
   $163 = (60442 + ($$sum19$3)|0);
   $164 = HEAP8[$163>>0]|0;
   $$sum79 = (($$sum73) + 3)|0;
   $165 = (($6) + ($$sum79)|0);
   HEAP8[$165>>0] = $164;
  }
  $176 = (($block$043) + 1)|0;
  $exitcond49 = ($176|0)==(16);
  if ($exitcond49) {
   break;
  } else {
   $block$043 = $176;
  }
 }
 $177 = $7 << 6;
 $178 = $4 << 6;
 $179 = $1 << 3;
 $180 = $179 & 2147483640;
 $181 = (($11) + ($10))|0;
 $$sum1 = (($181) + ($177))|0;
 $182 = $180 >>> 2;
 $$sum10 = $180 >>> 1;
 $$sum12 = (($$sum10) + ($182))|0;
 $block$138 = 16;
 while(1) {
  $183 = $block$138 & 3;
  $184 = (2824 + ($183<<2)|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = (2888 + ($183<<2)|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = (($residual) + ($block$138<<6)|0);
  $189 = ($block$138>>>0)>(19);
  $$ = $189 ? 320 : 256;
  $$sum3 = $189 ? $178 : 0;
  $190 = $187 << 3;
  $191 = (($190) + ($185))|0;
  $$sum25 = (($191) + ($$))|0;
  $192 = (($data) + ($$sum25)|0);
  $193 = Math_imul($187, $180)|0;
  $$sum2 = (($$sum1) + ($$sum3))|0;
  $$sum3$$sum2 = (($$sum2) + ($185))|0;
  $imageBlock$1$sum = (($$sum3$$sum2) + ($193))|0;
  $194 = (($6) + ($imageBlock$1$sum)|0);
  $195 = HEAP32[$188>>2]|0;
  $196 = ($195|0)==(16777215);
  if ($196) {
   $337 = HEAP32[$192>>2]|0;
   $$sum844 = $$ | 8;
   $$sum26 = (($$sum844) + ($191))|0;
   $338 = (($data) + ($$sum26)|0);
   $339 = HEAP32[$338>>2]|0;
   $$sum945 = $$ | 16;
   $$sum27 = (($$sum945) + ($191))|0;
   $340 = (($data) + ($$sum27)|0);
   HEAP32[$194>>2] = $337;
   $341 = (($194) + ($182<<2)|0);
   HEAP32[$341>>2] = $339;
   $342 = (($194) + ($$sum10<<2)|0);
   $343 = HEAP32[$340>>2]|0;
   $$sum1146 = $$ | 24;
   $$sum28 = (($$sum1146) + ($191))|0;
   $344 = (($data) + ($$sum28)|0);
   $345 = HEAP32[$344>>2]|0;
   HEAP32[$342>>2] = $343;
   $346 = (($194) + ($$sum12<<2)|0);
   HEAP32[$346>>2] = $345;
  } else {
   $197 = HEAP8[$192>>0]|0;
   $198 = $197&255;
   $199 = (((($residual) + ($block$138<<6)|0)) + 4|0);
   $$sum80 = (($$sum25) + 1)|0;
   $200 = (($data) + ($$sum80)|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = (($195) + 512)|0;
   $$sum4 = (($203) + ($198))|0;
   $204 = (60442 + ($$sum4)|0);
   $205 = HEAP8[$204>>0]|0;
   $206 = (((($residual) + ($block$138<<6)|0)) + 8|0);
   $207 = HEAP32[$199>>2]|0;
   HEAP8[$194>>0] = $205;
   $208 = $202 | 512;
   $$sum5 = (($208) + ($207))|0;
   $209 = (60442 + ($$sum5)|0);
   $210 = HEAP8[$209>>0]|0;
   $$sum81 = (($$sum25) + 2)|0;
   $211 = (($data) + ($$sum81)|0);
   $212 = HEAP8[$211>>0]|0;
   $213 = $212&255;
   $214 = (((($residual) + ($block$138<<6)|0)) + 12|0);
   $215 = HEAP32[$206>>2]|0;
   $$sum82 = (($imageBlock$1$sum) + 1)|0;
   $216 = (($6) + ($$sum82)|0);
   HEAP8[$216>>0] = $210;
   $217 = (($215) + 512)|0;
   $$sum6 = (($217) + ($213))|0;
   $218 = (60442 + ($$sum6)|0);
   $219 = HEAP8[$218>>0]|0;
   $$sum83 = (($$sum25) + 3)|0;
   $220 = (($data) + ($$sum83)|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $221&255;
   $223 = (((($residual) + ($block$138<<6)|0)) + 16|0);
   $224 = HEAP32[$214>>2]|0;
   $$sum84 = (($imageBlock$1$sum) + 2)|0;
   $225 = (($6) + ($$sum84)|0);
   HEAP8[$225>>0] = $219;
   $226 = (($224) + 512)|0;
   $$sum7 = (($226) + ($222))|0;
   $227 = (60442 + ($$sum7)|0);
   $228 = HEAP8[$227>>0]|0;
   $$sum85 = (($$sum25) + 8)|0;
   $229 = (($data) + ($$sum85)|0);
   $$sum86 = (($imageBlock$1$sum) + 3)|0;
   $230 = (($6) + ($$sum86)|0);
   HEAP8[$230>>0] = $228;
   $$sum87 = (($imageBlock$1$sum) + ($180))|0;
   $231 = (($6) + ($$sum87)|0);
   $232 = HEAP8[$229>>0]|0;
   $233 = $232&255;
   $234 = (((($residual) + ($block$138<<6)|0)) + 20|0);
   $235 = HEAP32[$223>>2]|0;
   $$sum88 = (($$sum25) + 9)|0;
   $236 = (($data) + ($$sum88)|0);
   $237 = HEAP8[$236>>0]|0;
   $238 = $237&255;
   $239 = (($235) + 512)|0;
   $$sum4$1 = (($239) + ($233))|0;
   $240 = (60442 + ($$sum4$1)|0);
   $241 = HEAP8[$240>>0]|0;
   $242 = (((($residual) + ($block$138<<6)|0)) + 24|0);
   $243 = HEAP32[$234>>2]|0;
   HEAP8[$231>>0] = $241;
   $244 = $238 | 512;
   $$sum5$1 = (($244) + ($243))|0;
   $245 = (60442 + ($$sum5$1)|0);
   $246 = HEAP8[$245>>0]|0;
   $$sum89 = (($$sum25) + 10)|0;
   $247 = (($data) + ($$sum89)|0);
   $248 = HEAP8[$247>>0]|0;
   $249 = $248&255;
   $250 = (((($residual) + ($block$138<<6)|0)) + 28|0);
   $251 = HEAP32[$242>>2]|0;
   $$sum90 = (($$sum87) + 1)|0;
   $252 = (($6) + ($$sum90)|0);
   HEAP8[$252>>0] = $246;
   $253 = (($251) + 512)|0;
   $$sum6$1 = (($253) + ($249))|0;
   $254 = (60442 + ($$sum6$1)|0);
   $255 = HEAP8[$254>>0]|0;
   $$sum91 = (($$sum25) + 11)|0;
   $256 = (($data) + ($$sum91)|0);
   $257 = HEAP8[$256>>0]|0;
   $258 = $257&255;
   $259 = (((($residual) + ($block$138<<6)|0)) + 32|0);
   $260 = HEAP32[$250>>2]|0;
   $$sum92 = (($$sum87) + 2)|0;
   $261 = (($6) + ($$sum92)|0);
   HEAP8[$261>>0] = $255;
   $262 = (($260) + 512)|0;
   $$sum7$1 = (($262) + ($258))|0;
   $263 = (60442 + ($$sum7$1)|0);
   $264 = HEAP8[$263>>0]|0;
   $$sum93 = (($$sum25) + 16)|0;
   $265 = (($data) + ($$sum93)|0);
   $$sum94 = (($$sum87) + 3)|0;
   $266 = (($6) + ($$sum94)|0);
   HEAP8[$266>>0] = $264;
   $$sum95 = (($$sum87) + ($180))|0;
   $267 = (($6) + ($$sum95)|0);
   $268 = HEAP8[$265>>0]|0;
   $269 = $268&255;
   $270 = (((($residual) + ($block$138<<6)|0)) + 36|0);
   $271 = HEAP32[$259>>2]|0;
   $$sum96 = (($$sum25) + 17)|0;
   $272 = (($data) + ($$sum96)|0);
   $273 = HEAP8[$272>>0]|0;
   $274 = $273&255;
   $275 = (($271) + 512)|0;
   $$sum4$2 = (($275) + ($269))|0;
   $276 = (60442 + ($$sum4$2)|0);
   $277 = HEAP8[$276>>0]|0;
   $278 = (((($residual) + ($block$138<<6)|0)) + 40|0);
   $279 = HEAP32[$270>>2]|0;
   HEAP8[$267>>0] = $277;
   $280 = $274 | 512;
   $$sum5$2 = (($280) + ($279))|0;
   $281 = (60442 + ($$sum5$2)|0);
   $282 = HEAP8[$281>>0]|0;
   $$sum97 = (($$sum25) + 18)|0;
   $283 = (($data) + ($$sum97)|0);
   $284 = HEAP8[$283>>0]|0;
   $285 = $284&255;
   $286 = (((($residual) + ($block$138<<6)|0)) + 44|0);
   $287 = HEAP32[$278>>2]|0;
   $$sum98 = (($$sum95) + 1)|0;
   $288 = (($6) + ($$sum98)|0);
   HEAP8[$288>>0] = $282;
   $289 = (($287) + 512)|0;
   $$sum6$2 = (($289) + ($285))|0;
   $290 = (60442 + ($$sum6$2)|0);
   $291 = HEAP8[$290>>0]|0;
   $$sum99 = (($$sum25) + 19)|0;
   $292 = (($data) + ($$sum99)|0);
   $293 = HEAP8[$292>>0]|0;
   $294 = $293&255;
   $295 = (((($residual) + ($block$138<<6)|0)) + 48|0);
   $296 = HEAP32[$286>>2]|0;
   $$sum100 = (($$sum95) + 2)|0;
   $297 = (($6) + ($$sum100)|0);
   HEAP8[$297>>0] = $291;
   $298 = (($296) + 512)|0;
   $$sum7$2 = (($298) + ($294))|0;
   $299 = (60442 + ($$sum7$2)|0);
   $300 = HEAP8[$299>>0]|0;
   $$sum101 = (($$sum25) + 24)|0;
   $301 = (($data) + ($$sum101)|0);
   $$sum102 = (($$sum95) + 3)|0;
   $302 = (($6) + ($$sum102)|0);
   HEAP8[$302>>0] = $300;
   $$sum103 = (($$sum95) + ($180))|0;
   $303 = (($6) + ($$sum103)|0);
   $304 = HEAP8[$301>>0]|0;
   $305 = $304&255;
   $306 = (((($residual) + ($block$138<<6)|0)) + 52|0);
   $307 = HEAP32[$295>>2]|0;
   $$sum104 = (($$sum25) + 25)|0;
   $308 = (($data) + ($$sum104)|0);
   $309 = HEAP8[$308>>0]|0;
   $310 = $309&255;
   $311 = (($307) + 512)|0;
   $$sum4$3 = (($311) + ($305))|0;
   $312 = (60442 + ($$sum4$3)|0);
   $313 = HEAP8[$312>>0]|0;
   $314 = (((($residual) + ($block$138<<6)|0)) + 56|0);
   $315 = HEAP32[$306>>2]|0;
   HEAP8[$303>>0] = $313;
   $316 = $310 | 512;
   $$sum5$3 = (($316) + ($315))|0;
   $317 = (60442 + ($$sum5$3)|0);
   $318 = HEAP8[$317>>0]|0;
   $$sum105 = (($$sum25) + 26)|0;
   $319 = (($data) + ($$sum105)|0);
   $320 = HEAP8[$319>>0]|0;
   $321 = $320&255;
   $322 = (((($residual) + ($block$138<<6)|0)) + 60|0);
   $323 = HEAP32[$314>>2]|0;
   $$sum106 = (($$sum103) + 1)|0;
   $324 = (($6) + ($$sum106)|0);
   HEAP8[$324>>0] = $318;
   $325 = (($323) + 512)|0;
   $$sum6$3 = (($325) + ($321))|0;
   $326 = (60442 + ($$sum6$3)|0);
   $327 = HEAP8[$326>>0]|0;
   $$sum107 = (($$sum25) + 27)|0;
   $328 = (($data) + ($$sum107)|0);
   $329 = HEAP8[$328>>0]|0;
   $330 = $329&255;
   $331 = HEAP32[$322>>2]|0;
   $$sum108 = (($$sum103) + 2)|0;
   $332 = (($6) + ($$sum108)|0);
   HEAP8[$332>>0] = $327;
   $333 = (($331) + 512)|0;
   $$sum7$3 = (($333) + ($330))|0;
   $334 = (60442 + ($$sum7$3)|0);
   $335 = HEAP8[$334>>0]|0;
   $$sum109 = (($$sum103) + 3)|0;
   $336 = (($6) + ($$sum109)|0);
   HEAP8[$336>>0] = $335;
  }
  $347 = (($block$138) + 1)|0;
  $exitcond = ($347|0)==(24);
  if ($exitcond) {
   break;
  } else {
   $block$138 = $347;
  }
 }
 return;
}
function _h264bsdFilterPicture($image,$mb) {
 $image = $image|0;
 $mb = $mb|0;
 var $$ = 0, $$$i = 0, $$$i$i = 0, $$$i134$i = 0, $$$i14$i = 0, $$$i142$i = 0, $$$i150$i = 0, $$$i158$i = 0, $$$i198$i = 0, $$$i206$i = 0, $$$i214$i = 0, $$$i222$i = 0, $$$i230$i = 0, $$$i238$i = 0, $$$i246$i = 0, $$$i254$i = 0, $$$i261$i = 0, $$$i268$i = 0, $$$i275$i = 0, $$$i282$i = 0;
 var $$$i289$i = 0, $$$i296$i = 0, $$$i303$i = 0, $$$i38$i = 0, $$$i62$i = 0, $$$i86$i = 0, $$013$i = 0, $$025$i$i = 0, $$05$i = 0, $$128$i$i = 0, $$306$i = 0, $$307$i = 0, $$308$i = 0, $$309$i = 0, $$310$i = 0, $$311$i = 0, $$312$i = 0, $$313$i = 0, $$314$i = 0, $$315$i = 0;
 var $$316$i = 0, $$317$i = 0, $$318$i = 0, $$319$i = 0, $$320$i = 0, $$327$i = 0, $$328$i = 0, $$330$i = 0, $$335$i = 0, $$337$i = 0, $$338$i = 0, $$mbRow$0 = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i4 = 0, $$pre$phi$i13Z2D = 0, $$pre$phi$iZ2D = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i16 = 0;
 var $$sum1 = 0, $$sum19$i$i = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0;
 var $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0;
 var $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0;
 var $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0;
 var $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0;
 var $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0;
 var $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0;
 var $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0;
 var $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0;
 var $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0;
 var $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0;
 var $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0;
 var $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0;
 var $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0;
 var $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0;
 var $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0;
 var $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0;
 var $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0;
 var $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0;
 var $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0;
 var $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0;
 var $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0;
 var $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0;
 var $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0;
 var $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0;
 var $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0;
 var $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0;
 var $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0;
 var $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0;
 var $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0;
 var $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0;
 var $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0;
 var $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0;
 var $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0;
 var $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0;
 var $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0;
 var $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0;
 var $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0;
 var $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0;
 var $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bS = 0, $exitcond$i = 0, $flags$0$i = 0, $flags$1$i$ph = 0, $i$024$i$i = 0, $i$127$i$i = 0, $ispos$i$i = 0;
 var $ispos$i$i5 = 0, $ispos$i105$i = 0, $ispos$i113$i = 0, $ispos$i121$i = 0, $ispos$i129$i = 0, $ispos$i137$i = 0, $ispos$i145$i = 0, $ispos$i153$i = 0, $ispos$i161$i = 0, $ispos$i169$i = 0, $ispos$i17$i = 0, $ispos$i177$i = 0, $ispos$i185$i = 0, $ispos$i193$i = 0, $ispos$i201$i = 0, $ispos$i209$i = 0, $ispos$i217$i = 0, $ispos$i225$i = 0, $ispos$i233$i = 0, $ispos$i241$i = 0;
 var $ispos$i249$i = 0, $ispos$i25$i = 0, $ispos$i257$i = 0, $ispos$i264$i = 0, $ispos$i271$i = 0, $ispos$i278$i = 0, $ispos$i285$i = 0, $ispos$i292$i = 0, $ispos$i299$i = 0, $ispos$i33$i = 0, $ispos$i41$i = 0, $ispos$i49$i = 0, $ispos$i5$i = 0, $ispos$i57$i = 0, $ispos$i65$i = 0, $ispos$i73$i = 0, $ispos$i81$i = 0, $ispos$i89$i = 0, $ispos$i9$i = 0, $ispos$i97$i = 0;
 var $ispos1$i$i = 0, $ispos1$i$i7 = 0, $ispos1$i259$i = 0, $ispos1$i266$i = 0, $ispos1$i273$i = 0, $ispos1$i280$i = 0, $ispos1$i287$i = 0, $ispos1$i294$i = 0, $ispos1$i301$i = 0, $ispos11$i$i = 0, $ispos13$i$i = 0, $ispos15$i$i = 0, $ispos17$i$i = 0, $ispos2$i$i = 0, $ispos2$i107$i = 0, $ispos2$i11$i = 0, $ispos2$i115$i = 0, $ispos2$i123$i = 0, $ispos2$i131$i = 0, $ispos2$i139$i = 0;
 var $ispos2$i147$i = 0, $ispos2$i155$i = 0, $ispos2$i163$i = 0, $ispos2$i171$i = 0, $ispos2$i179$i = 0, $ispos2$i187$i = 0, $ispos2$i19$i = 0, $ispos2$i195$i = 0, $ispos2$i203$i = 0, $ispos2$i211$i = 0, $ispos2$i219$i = 0, $ispos2$i227$i = 0, $ispos2$i235$i = 0, $ispos2$i243$i = 0, $ispos2$i251$i = 0, $ispos2$i27$i = 0, $ispos2$i35$i = 0, $ispos2$i43$i = 0, $ispos2$i51$i = 0, $ispos2$i59$i = 0;
 var $ispos2$i67$i = 0, $ispos2$i75$i = 0, $ispos2$i83$i = 0, $ispos2$i91$i = 0, $ispos2$i99$i = 0, $ispos3$i$i = 0, $ispos5$i$i = 0, $ispos7$i$i = 0, $ispos9$i$i = 0, $mb$idx$i = 0, $mb$idx$val$i = 0, $mb$idx1$val$idx$i = 0, $mb$idx1$val$idx$val$i = 0, $mb$idx2$i = 0, $mb$idx2$val$i = 0, $mb$idx3$val$idx$i = 0, $mb$idx3$val$idx$val$i = 0, $mbCol$020 = 0, $mbRow$022 = 0, $neg$i$i = 0;
 var $neg$i$i6 = 0, $neg$i10$i = 0, $neg$i106$i = 0, $neg$i114$i = 0, $neg$i122$i = 0, $neg$i130$i = 0, $neg$i138$i = 0, $neg$i146$i = 0, $neg$i154$i = 0, $neg$i162$i = 0, $neg$i170$i = 0, $neg$i178$i = 0, $neg$i18$i = 0, $neg$i186$i = 0, $neg$i194$i = 0, $neg$i202$i = 0, $neg$i210$i = 0, $neg$i218$i = 0, $neg$i226$i = 0, $neg$i234$i = 0;
 var $neg$i242$i = 0, $neg$i250$i = 0, $neg$i258$i = 0, $neg$i26$i = 0, $neg$i265$i = 0, $neg$i272$i = 0, $neg$i279$i = 0, $neg$i286$i = 0, $neg$i293$i = 0, $neg$i300$i = 0, $neg$i34$i = 0, $neg$i42$i = 0, $neg$i50$i = 0, $neg$i58$i = 0, $neg$i6$i = 0, $neg$i66$i = 0, $neg$i74$i = 0, $neg$i82$i = 0, $neg$i90$i = 0, $neg$i98$i = 0;
 var $neg10$i$i = 0, $neg12$i$i = 0, $neg14$i$i = 0, $neg16$i$i = 0, $neg18$i$i = 0, $neg2$i$i = 0, $neg2$i$i8 = 0, $neg2$i260$i = 0, $neg2$i267$i = 0, $neg2$i274$i = 0, $neg2$i281$i = 0, $neg2$i288$i = 0, $neg2$i295$i = 0, $neg2$i302$i = 0, $neg3$i$i = 0, $neg3$i100$i = 0, $neg3$i108$i = 0, $neg3$i116$i = 0, $neg3$i12$i = 0, $neg3$i124$i = 0;
 var $neg3$i132$i = 0, $neg3$i140$i = 0, $neg3$i148$i = 0, $neg3$i156$i = 0, $neg3$i164$i = 0, $neg3$i172$i = 0, $neg3$i180$i = 0, $neg3$i188$i = 0, $neg3$i196$i = 0, $neg3$i20$i = 0, $neg3$i204$i = 0, $neg3$i212$i = 0, $neg3$i220$i = 0, $neg3$i228$i = 0, $neg3$i236$i = 0, $neg3$i244$i = 0, $neg3$i252$i = 0, $neg3$i28$i = 0, $neg3$i36$i = 0, $neg3$i44$i = 0;
 var $neg3$i52$i = 0, $neg3$i60$i = 0, $neg3$i68$i = 0, $neg3$i76$i = 0, $neg3$i84$i = 0, $neg3$i92$i = 0, $neg4$i$i = 0, $neg6$i$i = 0, $neg8$i$i = 0, $nonZeroBs$0$i = 0, $nonZeroBs$1$i = 0, $nonZeroBs$1$i14 = 0, $not$$i = 0, $not$$i$i = 0, $not$$i13$i = 0, $not$$i133$i = 0, $not$$i141$i = 0, $not$$i149$i = 0, $not$$i157$i = 0, $not$$i197$i = 0;
 var $not$$i205$i = 0, $not$$i213$i = 0, $not$$i221$i = 0, $not$$i229$i = 0, $not$$i237$i = 0, $not$$i245$i = 0, $not$$i253$i = 0, $not$$i37$i = 0, $not$$i4$i = 0, $not$$i61$i = 0, $not$$i85$i = 0, $not$344$i = 0, $not$346$i = 0, $not$347$i = 0, $not$348$i = 0, $not$354$i = 0, $not$355$i = 0, $not$356$i = 0, $not$360$i = 0, $not$361$i = 0;
 var $offset$010$i = 0, $offset$07$i = 0, $pMb$023 = 0, $phitmp$i = 0, $phitmp1$i = 0, $phitmp2$i = 0, $phitmp3$i = 0, $phitmp351$i = 0, $ptr$05$i = 0, $thresholds = 0, $tmp$04$i = 0, $tmp$08$i = 0, $tmp$1$i$i = 0, $tmp$2$i$i = 0, $vblock$07$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bS = sp + 40|0;
 $thresholds = sp;
 $0 = ((($image)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($image)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = ($3|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ((($bS)) + 24|0);
 $7 = ((($bS)) + 16|0);
 $8 = ((($bS)) + 8|0);
 $9 = ((($bS)) + 100|0);
 $10 = ((($bS)) + 68|0);
 $11 = ((($bS)) + 36|0);
 $12 = ((($bS)) + 4|0);
 $13 = ((($bS)) + 120|0);
 $14 = ((($bS)) + 112|0);
 $15 = ((($bS)) + 104|0);
 $16 = ((($bS)) + 96|0);
 $17 = ((($bS)) + 88|0);
 $18 = ((($bS)) + 80|0);
 $19 = ((($bS)) + 72|0);
 $20 = ((($bS)) + 64|0);
 $21 = ((($bS)) + 56|0);
 $22 = ((($bS)) + 48|0);
 $23 = ((($bS)) + 40|0);
 $24 = ((($bS)) + 32|0);
 $25 = ((($bS)) + 124|0);
 $26 = ((($bS)) + 116|0);
 $27 = ((($bS)) + 108|0);
 $28 = ((($bS)) + 92|0);
 $29 = ((($bS)) + 84|0);
 $30 = ((($bS)) + 76|0);
 $31 = ((($bS)) + 60|0);
 $32 = ((($bS)) + 52|0);
 $33 = ((($bS)) + 44|0);
 $34 = ((($bS)) + 28|0);
 $35 = ((($bS)) + 20|0);
 $36 = ((($bS)) + 12|0);
 $37 = ((($thresholds)) + 28|0);
 $38 = ((($thresholds)) + 32|0);
 $39 = ((($thresholds)) + 24|0);
 $40 = $1 << 4;
 $41 = (0 - ($40))|0;
 $42 = $41 << 1;
 $43 = Math_imul($1, -48)|0;
 $44 = $1 << 5;
 $45 = $41 << 2;
 $46 = ($1*48)|0;
 $47 = $1 << 6;
 $48 = ((($thresholds)) + 24|0);
 $49 = ((($thresholds)) + 12|0);
 $50 = $4 << 8;
 $51 = $4 << 6;
 $52 = $1 << 3;
 $$sum$i16 = $40 | 4;
 $53 = ((($thresholds)) + 16|0);
 $54 = ((($thresholds)) + 20|0);
 $55 = ((($thresholds)) + 12|0);
 $56 = ((($thresholds)) + 4|0);
 $57 = ((($thresholds)) + 8|0);
 $mbCol$020 = 0;$mbRow$022 = 0;$pMb$023 = $mb;
 while(1) {
  $58 = ((($pMb$023)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(1);
  do {
   if (!($60)) {
    $61 = ((($pMb$023)) + 200|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(0|0);
    do {
     if ($63) {
      $flags$0$i = 1;
     } else {
      $64 = ($59|0)==(2);
      if ($64) {
       $mb$idx$i = ((($pMb$023)) + 4|0);
       $mb$idx$val$i = HEAP32[$mb$idx$i>>2]|0;
       $mb$idx1$val$idx$i = ((($62)) + 4|0);
       $mb$idx1$val$idx$val$i = HEAP32[$mb$idx1$val$idx$i>>2]|0;
       $not$$i$i = ($mb$idx$val$i|0)==($mb$idx1$val$idx$val$i|0);
       if (!($not$$i$i)) {
        $flags$0$i = 1;
        break;
       }
      }
      $flags$0$i = 5;
     }
    } while(0);
    $65 = ((($pMb$023)) + 204|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    do {
     if ($67) {
      $flags$1$i$ph = $flags$0$i;
     } else {
      $68 = ($59|0)==(2);
      if ($68) {
       $mb$idx2$i = ((($pMb$023)) + 4|0);
       $mb$idx2$val$i = HEAP32[$mb$idx2$i>>2]|0;
       $mb$idx3$val$idx$i = ((($66)) + 4|0);
       $mb$idx3$val$idx$val$i = HEAP32[$mb$idx3$val$idx$i>>2]|0;
       $not$$i4$i = ($mb$idx2$val$i|0)==($mb$idx3$val$idx$val$i|0);
       if (!($not$$i4$i)) {
        $flags$1$i$ph = $flags$0$i;
        break;
       }
      }
      $69 = $flags$0$i | 2;
      $flags$1$i$ph = $69;
     }
    } while(0);
    $70 = $flags$1$i$ph & 2;
    $71 = ($70|0)==(0);
    do {
     if ($71) {
      HEAP32[$6>>2] = 0;
      HEAP32[$7>>2] = 0;
      HEAP32[$8>>2] = 0;
      HEAP32[$bS>>2] = 0;
      $nonZeroBs$0$i = 0;
     } else {
      $72 = HEAP32[$pMb$023>>2]|0;
      $73 = ($72>>>0)>(5);
      if (!($73)) {
       $74 = HEAP32[$66>>2]|0;
       $75 = ($74>>>0)>(5);
       if (!($75)) {
        $76 = ((($pMb$023)) + 28|0);
        $77 = HEAP16[$76>>1]|0;
        $78 = ($77<<16>>16)==(0);
        if ($78) {
         $79 = ((($66)) + 48|0);
         $80 = HEAP16[$79>>1]|0;
         $81 = ($80<<16>>16)==(0);
         if ($81) {
          $82 = ((($pMb$023)) + 116|0);
          $83 = HEAP32[$82>>2]|0;
          $84 = ((($66)) + 124|0);
          $85 = HEAP32[$84>>2]|0;
          $86 = ($83|0)==($85|0);
          if ($86) {
           $87 = ((($pMb$023)) + 132|0);
           $88 = HEAP16[$87>>1]|0;
           $89 = $88 << 16 >> 16;
           $90 = ((($66)) + 172|0);
           $91 = HEAP16[$90>>1]|0;
           $92 = $91 << 16 >> 16;
           $93 = (($89) - ($92))|0;
           $ispos$i$i = ($93|0)>(-1);
           $neg$i$i = (0 - ($93))|0;
           $94 = $ispos$i$i ? $93 : $neg$i$i;
           $95 = ($94|0)>(3);
           if ($95) {
            $105 = 1;
           } else {
            $96 = ((($pMb$023)) + 134|0);
            $97 = HEAP16[$96>>1]|0;
            $98 = $97 << 16 >> 16;
            $99 = ((($66)) + 174|0);
            $100 = HEAP16[$99>>1]|0;
            $101 = $100 << 16 >> 16;
            $102 = (($98) - ($101))|0;
            $ispos1$i$i = ($102|0)>(-1);
            $neg2$i$i = (0 - ($102))|0;
            $103 = $ispos1$i$i ? $102 : $neg2$i$i;
            $104 = ($103|0)>(3);
            $$$i$i = $104&1;
            $105 = $$$i$i;
           }
          } else {
           $105 = 1;
          }
         } else {
          $105 = 2;
         }
        } else {
         $105 = 2;
        }
        HEAP32[$bS>>2] = $105;
        $106 = ((($pMb$023)) + 30|0);
        $107 = HEAP16[$106>>1]|0;
        $108 = ($107<<16>>16)==(0);
        if ($108) {
         $109 = ((($66)) + 50|0);
         $110 = HEAP16[$109>>1]|0;
         $111 = ($110<<16>>16)==(0);
         if ($111) {
          $112 = ((($pMb$023)) + 116|0);
          $113 = HEAP32[$112>>2]|0;
          $114 = ((($66)) + 124|0);
          $115 = HEAP32[$114>>2]|0;
          $116 = ($113|0)==($115|0);
          if ($116) {
           $117 = ((($pMb$023)) + 136|0);
           $118 = HEAP16[$117>>1]|0;
           $119 = $118 << 16 >> 16;
           $120 = ((($66)) + 176|0);
           $121 = HEAP16[$120>>1]|0;
           $122 = $121 << 16 >> 16;
           $123 = (($119) - ($122))|0;
           $ispos$i257$i = ($123|0)>(-1);
           $neg$i258$i = (0 - ($123))|0;
           $124 = $ispos$i257$i ? $123 : $neg$i258$i;
           $125 = ($124|0)>(3);
           if ($125) {
            $135 = 1;
           } else {
            $126 = ((($pMb$023)) + 138|0);
            $127 = HEAP16[$126>>1]|0;
            $128 = $127 << 16 >> 16;
            $129 = ((($66)) + 178|0);
            $130 = HEAP16[$129>>1]|0;
            $131 = $130 << 16 >> 16;
            $132 = (($128) - ($131))|0;
            $ispos1$i259$i = ($132|0)>(-1);
            $neg2$i260$i = (0 - ($132))|0;
            $133 = $ispos1$i259$i ? $132 : $neg2$i260$i;
            $134 = ($133|0)>(3);
            $$$i261$i = $134&1;
            $135 = $$$i261$i;
           }
          } else {
           $135 = 1;
          }
         } else {
          $135 = 2;
         }
        } else {
         $135 = 2;
        }
        HEAP32[$8>>2] = $135;
        $136 = ((($pMb$023)) + 36|0);
        $137 = HEAP16[$136>>1]|0;
        $138 = ($137<<16>>16)==(0);
        if ($138) {
         $139 = ((($66)) + 56|0);
         $140 = HEAP16[$139>>1]|0;
         $141 = ($140<<16>>16)==(0);
         if ($141) {
          $142 = ((($pMb$023)) + 120|0);
          $143 = HEAP32[$142>>2]|0;
          $144 = ((($66)) + 128|0);
          $145 = HEAP32[$144>>2]|0;
          $146 = ($143|0)==($145|0);
          if ($146) {
           $147 = ((($pMb$023)) + 148|0);
           $148 = HEAP16[$147>>1]|0;
           $149 = $148 << 16 >> 16;
           $150 = ((($66)) + 188|0);
           $151 = HEAP16[$150>>1]|0;
           $152 = $151 << 16 >> 16;
           $153 = (($149) - ($152))|0;
           $ispos$i299$i = ($153|0)>(-1);
           $neg$i300$i = (0 - ($153))|0;
           $154 = $ispos$i299$i ? $153 : $neg$i300$i;
           $155 = ($154|0)>(3);
           if ($155) {
            $165 = 1;
           } else {
            $156 = ((($pMb$023)) + 150|0);
            $157 = HEAP16[$156>>1]|0;
            $158 = $157 << 16 >> 16;
            $159 = ((($66)) + 190|0);
            $160 = HEAP16[$159>>1]|0;
            $161 = $160 << 16 >> 16;
            $162 = (($158) - ($161))|0;
            $ispos1$i301$i = ($162|0)>(-1);
            $neg2$i302$i = (0 - ($162))|0;
            $163 = $ispos1$i301$i ? $162 : $neg2$i302$i;
            $164 = ($163|0)>(3);
            $$$i303$i = $164&1;
            $165 = $$$i303$i;
           }
          } else {
           $165 = 1;
          }
         } else {
          $165 = 2;
         }
        } else {
         $165 = 2;
        }
        HEAP32[$7>>2] = $165;
        $166 = ((($pMb$023)) + 38|0);
        $167 = HEAP16[$166>>1]|0;
        $168 = ($167<<16>>16)==(0);
        if ($168) {
         $169 = ((($66)) + 58|0);
         $170 = HEAP16[$169>>1]|0;
         $171 = ($170<<16>>16)==(0);
         if ($171) {
          $172 = ((($pMb$023)) + 120|0);
          $173 = HEAP32[$172>>2]|0;
          $174 = ((($66)) + 128|0);
          $175 = HEAP32[$174>>2]|0;
          $176 = ($173|0)==($175|0);
          if ($176) {
           $177 = ((($pMb$023)) + 152|0);
           $178 = HEAP16[$177>>1]|0;
           $179 = $178 << 16 >> 16;
           $180 = ((($66)) + 192|0);
           $181 = HEAP16[$180>>1]|0;
           $182 = $181 << 16 >> 16;
           $183 = (($179) - ($182))|0;
           $ispos$i292$i = ($183|0)>(-1);
           $neg$i293$i = (0 - ($183))|0;
           $184 = $ispos$i292$i ? $183 : $neg$i293$i;
           $185 = ($184|0)>(3);
           if ($185) {
            $195 = 1;
           } else {
            $186 = ((($pMb$023)) + 154|0);
            $187 = HEAP16[$186>>1]|0;
            $188 = $187 << 16 >> 16;
            $189 = ((($66)) + 194|0);
            $190 = HEAP16[$189>>1]|0;
            $191 = $190 << 16 >> 16;
            $192 = (($188) - ($191))|0;
            $ispos1$i294$i = ($192|0)>(-1);
            $neg2$i295$i = (0 - ($192))|0;
            $193 = $ispos1$i294$i ? $192 : $neg2$i295$i;
            $194 = ($193|0)>(3);
            $$$i296$i = $194&1;
            $195 = $$$i296$i;
           }
          } else {
           $195 = 1;
          }
         } else {
          $195 = 2;
         }
        } else {
         $195 = 2;
        }
        HEAP32[$6>>2] = $195;
        $196 = $135 | $105;
        $197 = $196 | $165;
        $198 = $197 | $195;
        $not$$i = ($198|0)!=(0);
        $$337$i = $not$$i&1;
        $nonZeroBs$0$i = $$337$i;
        break;
       }
      }
      HEAP32[$6>>2] = 4;
      HEAP32[$7>>2] = 4;
      HEAP32[$8>>2] = 4;
      HEAP32[$bS>>2] = 4;
      $nonZeroBs$0$i = 1;
     }
    } while(0);
    $199 = $flags$1$i$ph & 4;
    $200 = ($199|0)==(0);
    do {
     if ($200) {
      HEAP32[$9>>2] = 0;
      HEAP32[$10>>2] = 0;
      HEAP32[$11>>2] = 0;
      HEAP32[$12>>2] = 0;
      $$pre$i4 = HEAP32[$pMb$023>>2]|0;
      $$pre$phi$iZ2D = $pMb$023;$329 = $$pre$i4;$nonZeroBs$1$i = $nonZeroBs$0$i;
      label = 65;
     } else {
      $201 = HEAP32[$pMb$023>>2]|0;
      $202 = ($201>>>0)>(5);
      if (!($202)) {
       $203 = HEAP32[$62>>2]|0;
       $204 = ($203>>>0)>(5);
       if (!($204)) {
        $205 = ((($pMb$023)) + 28|0);
        $206 = HEAP16[$205>>1]|0;
        $207 = ($206<<16>>16)==(0);
        if ($207) {
         $208 = ((($62)) + 38|0);
         $209 = HEAP16[$208>>1]|0;
         $210 = ($209<<16>>16)==(0);
         if ($210) {
          $211 = ((($pMb$023)) + 116|0);
          $212 = HEAP32[$211>>2]|0;
          $213 = ((($62)) + 120|0);
          $214 = HEAP32[$213>>2]|0;
          $215 = ($212|0)==($214|0);
          if ($215) {
           $216 = ((($pMb$023)) + 132|0);
           $217 = HEAP16[$216>>1]|0;
           $218 = $217 << 16 >> 16;
           $219 = ((($62)) + 152|0);
           $220 = HEAP16[$219>>1]|0;
           $221 = $220 << 16 >> 16;
           $222 = (($218) - ($221))|0;
           $ispos$i285$i = ($222|0)>(-1);
           $neg$i286$i = (0 - ($222))|0;
           $223 = $ispos$i285$i ? $222 : $neg$i286$i;
           $224 = ($223|0)>(3);
           if ($224) {
            $234 = 1;
           } else {
            $225 = ((($pMb$023)) + 134|0);
            $226 = HEAP16[$225>>1]|0;
            $227 = $226 << 16 >> 16;
            $228 = ((($62)) + 154|0);
            $229 = HEAP16[$228>>1]|0;
            $230 = $229 << 16 >> 16;
            $231 = (($227) - ($230))|0;
            $ispos1$i287$i = ($231|0)>(-1);
            $neg2$i288$i = (0 - ($231))|0;
            $232 = $ispos1$i287$i ? $231 : $neg2$i288$i;
            $233 = ($232|0)>(3);
            $$$i289$i = $233&1;
            $234 = $$$i289$i;
           }
          } else {
           $234 = 1;
          }
         } else {
          $234 = 2;
         }
        } else {
         $234 = 2;
        }
        HEAP32[$12>>2] = $234;
        $235 = ((($pMb$023)) + 32|0);
        $236 = HEAP16[$235>>1]|0;
        $237 = ($236<<16>>16)==(0);
        if ($237) {
         $238 = ((($62)) + 42|0);
         $239 = HEAP16[$238>>1]|0;
         $240 = ($239<<16>>16)==(0);
         if ($240) {
          $241 = ((($pMb$023)) + 116|0);
          $242 = HEAP32[$241>>2]|0;
          $243 = ((($62)) + 120|0);
          $244 = HEAP32[$243>>2]|0;
          $245 = ($242|0)==($244|0);
          if ($245) {
           $246 = ((($pMb$023)) + 140|0);
           $247 = HEAP16[$246>>1]|0;
           $248 = $247 << 16 >> 16;
           $249 = ((($62)) + 160|0);
           $250 = HEAP16[$249>>1]|0;
           $251 = $250 << 16 >> 16;
           $252 = (($248) - ($251))|0;
           $ispos$i278$i = ($252|0)>(-1);
           $neg$i279$i = (0 - ($252))|0;
           $253 = $ispos$i278$i ? $252 : $neg$i279$i;
           $254 = ($253|0)>(3);
           if ($254) {
            $264 = 1;
           } else {
            $255 = ((($pMb$023)) + 142|0);
            $256 = HEAP16[$255>>1]|0;
            $257 = $256 << 16 >> 16;
            $258 = ((($62)) + 162|0);
            $259 = HEAP16[$258>>1]|0;
            $260 = $259 << 16 >> 16;
            $261 = (($257) - ($260))|0;
            $ispos1$i280$i = ($261|0)>(-1);
            $neg2$i281$i = (0 - ($261))|0;
            $262 = $ispos1$i280$i ? $261 : $neg2$i281$i;
            $263 = ($262|0)>(3);
            $$$i282$i = $263&1;
            $264 = $$$i282$i;
           }
          } else {
           $264 = 1;
          }
         } else {
          $264 = 2;
         }
        } else {
         $264 = 2;
        }
        HEAP32[$11>>2] = $264;
        $265 = ((($pMb$023)) + 44|0);
        $266 = HEAP16[$265>>1]|0;
        $267 = ($266<<16>>16)==(0);
        if ($267) {
         $268 = ((($62)) + 54|0);
         $269 = HEAP16[$268>>1]|0;
         $270 = ($269<<16>>16)==(0);
         if ($270) {
          $271 = ((($pMb$023)) + 124|0);
          $272 = HEAP32[$271>>2]|0;
          $273 = ((($62)) + 128|0);
          $274 = HEAP32[$273>>2]|0;
          $275 = ($272|0)==($274|0);
          if ($275) {
           $276 = ((($pMb$023)) + 164|0);
           $277 = HEAP16[$276>>1]|0;
           $278 = $277 << 16 >> 16;
           $279 = ((($62)) + 184|0);
           $280 = HEAP16[$279>>1]|0;
           $281 = $280 << 16 >> 16;
           $282 = (($278) - ($281))|0;
           $ispos$i271$i = ($282|0)>(-1);
           $neg$i272$i = (0 - ($282))|0;
           $283 = $ispos$i271$i ? $282 : $neg$i272$i;
           $284 = ($283|0)>(3);
           if ($284) {
            $294 = 1;
           } else {
            $285 = ((($pMb$023)) + 166|0);
            $286 = HEAP16[$285>>1]|0;
            $287 = $286 << 16 >> 16;
            $288 = ((($62)) + 186|0);
            $289 = HEAP16[$288>>1]|0;
            $290 = $289 << 16 >> 16;
            $291 = (($287) - ($290))|0;
            $ispos1$i273$i = ($291|0)>(-1);
            $neg2$i274$i = (0 - ($291))|0;
            $292 = $ispos1$i273$i ? $291 : $neg2$i274$i;
            $293 = ($292|0)>(3);
            $$$i275$i = $293&1;
            $294 = $$$i275$i;
           }
          } else {
           $294 = 1;
          }
         } else {
          $294 = 2;
         }
        } else {
         $294 = 2;
        }
        HEAP32[$10>>2] = $294;
        $295 = ((($pMb$023)) + 48|0);
        $296 = HEAP16[$295>>1]|0;
        $297 = ($296<<16>>16)==(0);
        if ($297) {
         $298 = ((($62)) + 58|0);
         $299 = HEAP16[$298>>1]|0;
         $300 = ($299<<16>>16)==(0);
         if ($300) {
          $301 = ((($pMb$023)) + 124|0);
          $302 = HEAP32[$301>>2]|0;
          $303 = ((($62)) + 128|0);
          $304 = HEAP32[$303>>2]|0;
          $305 = ($302|0)==($304|0);
          if ($305) {
           $306 = ((($pMb$023)) + 172|0);
           $307 = HEAP16[$306>>1]|0;
           $308 = $307 << 16 >> 16;
           $309 = ((($62)) + 192|0);
           $310 = HEAP16[$309>>1]|0;
           $311 = $310 << 16 >> 16;
           $312 = (($308) - ($311))|0;
           $ispos$i264$i = ($312|0)>(-1);
           $neg$i265$i = (0 - ($312))|0;
           $313 = $ispos$i264$i ? $312 : $neg$i265$i;
           $314 = ($313|0)>(3);
           if ($314) {
            $324 = 1;
           } else {
            $315 = ((($pMb$023)) + 174|0);
            $316 = HEAP16[$315>>1]|0;
            $317 = $316 << 16 >> 16;
            $318 = ((($62)) + 194|0);
            $319 = HEAP16[$318>>1]|0;
            $320 = $319 << 16 >> 16;
            $321 = (($317) - ($320))|0;
            $ispos1$i266$i = ($321|0)>(-1);
            $neg2$i267$i = (0 - ($321))|0;
            $322 = $ispos1$i266$i ? $321 : $neg2$i267$i;
            $323 = ($322|0)>(3);
            $$$i268$i = $323&1;
            $324 = $$$i268$i;
           }
          } else {
           $324 = 1;
          }
         } else {
          $324 = 2;
         }
        } else {
         $324 = 2;
        }
        HEAP32[$9>>2] = $324;
        $325 = ($nonZeroBs$0$i|0)==(0);
        if (!($325)) {
         $$pre$phi$i13Z2D = $pMb$023;$331 = $201;$nonZeroBs$1$i14 = $nonZeroBs$0$i;
         label = 67;
         break;
        }
        $326 = $264 | $234;
        $327 = $326 | $294;
        $328 = $327 | $324;
        $not$361$i = ($328|0)!=(0);
        $$338$i = $not$361$i&1;
        $$pre$phi$i13Z2D = $pMb$023;$331 = $201;$nonZeroBs$1$i14 = $$338$i;
        label = 67;
        break;
       }
      }
      HEAP32[$9>>2] = 4;
      HEAP32[$10>>2] = 4;
      HEAP32[$11>>2] = 4;
      HEAP32[$12>>2] = 4;
      $$pre$phi$iZ2D = $pMb$023;$329 = $201;$nonZeroBs$1$i = 1;
      label = 65;
     }
    } while(0);
    if ((label|0) == 65) {
     label = 0;
     $330 = ($329>>>0)>(5);
     if ($330) {
      HEAP32[$13>>2] = 3;
      HEAP32[$14>>2] = 3;
      HEAP32[$15>>2] = 3;
      HEAP32[$16>>2] = 3;
      HEAP32[$17>>2] = 3;
      HEAP32[$18>>2] = 3;
      HEAP32[$19>>2] = 3;
      HEAP32[$20>>2] = 3;
      HEAP32[$21>>2] = 3;
      HEAP32[$22>>2] = 3;
      HEAP32[$23>>2] = 3;
      HEAP32[$24>>2] = 3;
      HEAP32[$25>>2] = 3;
      HEAP32[$26>>2] = 3;
      HEAP32[$27>>2] = 3;
      HEAP32[$28>>2] = 3;
      HEAP32[$29>>2] = 3;
      HEAP32[$30>>2] = 3;
      HEAP32[$31>>2] = 3;
      HEAP32[$32>>2] = 3;
      HEAP32[$33>>2] = 3;
      HEAP32[$34>>2] = 3;
      HEAP32[$35>>2] = 3;
      HEAP32[$36>>2] = 3;
     } else {
      $$pre$phi$i13Z2D = $$pre$phi$iZ2D;$331 = $329;$nonZeroBs$1$i14 = $nonZeroBs$1$i;
      label = 67;
     }
    }
    if ((label|0) == 67) {
     label = 0;
     $332 = (_h264bsdNumMbPart($331)|0);
     $333 = ($332|0)==(1);
     L89: do {
      if ($333) {
       _GetBoundaryStrengthsA($pMb$023,$bS);
      } else {
       $334 = HEAP32[$$pre$phi$i13Z2D>>2]|0;
       switch ($334|0) {
       case 2:  {
        $335 = ((($pMb$023)) + 28|0);
        $336 = ((($pMb$023)) + 32|0);
        $337 = HEAP16[$336>>1]|0;
        $338 = ($337<<16>>16)==(0);
        if ($338) {
         $339 = HEAP16[$335>>1]|0;
         $340 = ($339<<16>>16)!=(0);
         $341 = $340;
        } else {
         $341 = 1;
        }
        $342 = $341 ? 2 : 0;
        HEAP32[$24>>2] = $342;
        $343 = ((($pMb$023)) + 34|0);
        $344 = HEAP16[$343>>1]|0;
        $345 = ($344<<16>>16)==(0);
        if ($345) {
         $346 = ((($pMb$023)) + 30|0);
         $347 = HEAP16[$346>>1]|0;
         $348 = ($347<<16>>16)!=(0);
         $349 = $348;
        } else {
         $349 = 1;
        }
        $350 = $349 ? 2 : 0;
        HEAP32[$23>>2] = $350;
        $351 = ((($pMb$023)) + 40|0);
        $352 = HEAP16[$351>>1]|0;
        $353 = ($352<<16>>16)==(0);
        if ($353) {
         $354 = ((($pMb$023)) + 36|0);
         $355 = HEAP16[$354>>1]|0;
         $356 = ($355<<16>>16)!=(0);
         $357 = $356;
        } else {
         $357 = 1;
        }
        $358 = $357 ? 2 : 0;
        HEAP32[$22>>2] = $358;
        $359 = ((($pMb$023)) + 42|0);
        $360 = HEAP16[$359>>1]|0;
        $361 = ($360<<16>>16)==(0);
        if ($361) {
         $362 = ((($pMb$023)) + 38|0);
         $363 = HEAP16[$362>>1]|0;
         $364 = ($363<<16>>16)!=(0);
         $365 = $364;
        } else {
         $365 = 1;
        }
        $366 = $365 ? 2 : 0;
        HEAP32[$21>>2] = $366;
        $367 = ((($pMb$023)) + 48|0);
        $368 = HEAP16[$367>>1]|0;
        $369 = ($368<<16>>16)==(0);
        if ($369) {
         $370 = ((($pMb$023)) + 44|0);
         $371 = HEAP16[$370>>1]|0;
         $372 = ($371<<16>>16)!=(0);
         $373 = $372;
        } else {
         $373 = 1;
        }
        $374 = $373 ? 2 : 0;
        HEAP32[$16>>2] = $374;
        $375 = ((($pMb$023)) + 50|0);
        $376 = HEAP16[$375>>1]|0;
        $377 = ($376<<16>>16)==(0);
        if ($377) {
         $378 = ((($pMb$023)) + 46|0);
         $379 = HEAP16[$378>>1]|0;
         $380 = ($379<<16>>16)!=(0);
         $381 = $380;
        } else {
         $381 = 1;
        }
        $382 = $381 ? 2 : 0;
        HEAP32[$15>>2] = $382;
        $383 = ((($pMb$023)) + 56|0);
        $384 = HEAP16[$383>>1]|0;
        $385 = ($384<<16>>16)==(0);
        if ($385) {
         $386 = ((($pMb$023)) + 52|0);
         $387 = HEAP16[$386>>1]|0;
         $388 = ($387<<16>>16)!=(0);
         $389 = $388;
        } else {
         $389 = 1;
        }
        $390 = $389 ? 2 : 0;
        HEAP32[$14>>2] = $390;
        $391 = ((($pMb$023)) + 58|0);
        $392 = HEAP16[$391>>1]|0;
        $393 = ($392<<16>>16)==(0);
        if ($393) {
         $394 = ((($pMb$023)) + 54|0);
         $395 = HEAP16[$394>>1]|0;
         $396 = ($395<<16>>16)!=(0);
         $397 = $396;
        } else {
         $397 = 1;
        }
        $398 = $397 ? 2 : 0;
        HEAP32[$13>>2] = $398;
        $399 = ((($pMb$023)) + 44|0);
        $400 = HEAP16[$399>>1]|0;
        $401 = ((($pMb$023)) + 166|0);
        $402 = HEAP16[$401>>1]|0;
        $403 = $402 << 16 >> 16;
        $404 = ((($pMb$023)) + 142|0);
        $405 = HEAP16[$404>>1]|0;
        $406 = $405 << 16 >> 16;
        $407 = $400 | $337;
        $408 = ($407<<16>>16)==(0);
        do {
         if ($408) {
          $409 = ((($pMb$023)) + 140|0);
          $410 = HEAP16[$409>>1]|0;
          $411 = $410 << 16 >> 16;
          $412 = ((($pMb$023)) + 164|0);
          $413 = HEAP16[$412>>1]|0;
          $414 = $413 << 16 >> 16;
          $415 = (($414) - ($411))|0;
          $ispos$i249$i = ($415|0)>(-1);
          $neg$i250$i = (0 - ($415))|0;
          $416 = $ispos$i249$i ? $415 : $neg$i250$i;
          $417 = ($416|0)>(3);
          if ($417) {
           $425 = 1;
           break;
          }
          $418 = (($403) - ($406))|0;
          $ispos2$i251$i = ($418|0)>(-1);
          $neg3$i252$i = (0 - ($418))|0;
          $419 = $ispos2$i251$i ? $418 : $neg3$i252$i;
          $420 = ($419|0)>(3);
          if ($420) {
           $425 = 1;
           break;
          }
          $421 = ((($pMb$023)) + 124|0);
          $422 = HEAP32[$421>>2]|0;
          $423 = ((($pMb$023)) + 116|0);
          $424 = HEAP32[$423>>2]|0;
          $not$$i253$i = ($422|0)!=($424|0);
          $$$i254$i = $not$$i253$i&1;
          $425 = $$$i254$i;
         } else {
          $425 = 2;
         }
        } while(0);
        HEAP32[$20>>2] = $425;
        $426 = ((($pMb$023)) + 46|0);
        $427 = HEAP16[$426>>1]|0;
        $428 = ((($pMb$023)) + 170|0);
        $429 = HEAP16[$428>>1]|0;
        $430 = $429 << 16 >> 16;
        $431 = ((($pMb$023)) + 146|0);
        $432 = HEAP16[$431>>1]|0;
        $433 = $432 << 16 >> 16;
        $434 = $427 | $344;
        $435 = ($434<<16>>16)==(0);
        do {
         if ($435) {
          $436 = ((($pMb$023)) + 144|0);
          $437 = HEAP16[$436>>1]|0;
          $438 = $437 << 16 >> 16;
          $439 = ((($pMb$023)) + 168|0);
          $440 = HEAP16[$439>>1]|0;
          $441 = $440 << 16 >> 16;
          $442 = (($441) - ($438))|0;
          $ispos$i241$i = ($442|0)>(-1);
          $neg$i242$i = (0 - ($442))|0;
          $443 = $ispos$i241$i ? $442 : $neg$i242$i;
          $444 = ($443|0)>(3);
          if ($444) {
           $452 = 1;
           break;
          }
          $445 = (($430) - ($433))|0;
          $ispos2$i243$i = ($445|0)>(-1);
          $neg3$i244$i = (0 - ($445))|0;
          $446 = $ispos2$i243$i ? $445 : $neg3$i244$i;
          $447 = ($446|0)>(3);
          if ($447) {
           $452 = 1;
           break;
          }
          $448 = ((($pMb$023)) + 124|0);
          $449 = HEAP32[$448>>2]|0;
          $450 = ((($pMb$023)) + 116|0);
          $451 = HEAP32[$450>>2]|0;
          $not$$i245$i = ($449|0)!=($451|0);
          $$$i246$i = $not$$i245$i&1;
          $452 = $$$i246$i;
         } else {
          $452 = 2;
         }
        } while(0);
        HEAP32[$19>>2] = $452;
        $453 = ((($pMb$023)) + 52|0);
        $454 = HEAP16[$453>>1]|0;
        $455 = ((($pMb$023)) + 182|0);
        $456 = HEAP16[$455>>1]|0;
        $457 = $456 << 16 >> 16;
        $458 = ((($pMb$023)) + 158|0);
        $459 = HEAP16[$458>>1]|0;
        $460 = $459 << 16 >> 16;
        $461 = $454 | $352;
        $462 = ($461<<16>>16)==(0);
        do {
         if ($462) {
          $463 = ((($pMb$023)) + 156|0);
          $464 = HEAP16[$463>>1]|0;
          $465 = $464 << 16 >> 16;
          $466 = ((($pMb$023)) + 180|0);
          $467 = HEAP16[$466>>1]|0;
          $468 = $467 << 16 >> 16;
          $469 = (($468) - ($465))|0;
          $ispos$i233$i = ($469|0)>(-1);
          $neg$i234$i = (0 - ($469))|0;
          $470 = $ispos$i233$i ? $469 : $neg$i234$i;
          $471 = ($470|0)>(3);
          if ($471) {
           $479 = 1;
           break;
          }
          $472 = (($457) - ($460))|0;
          $ispos2$i235$i = ($472|0)>(-1);
          $neg3$i236$i = (0 - ($472))|0;
          $473 = $ispos2$i235$i ? $472 : $neg3$i236$i;
          $474 = ($473|0)>(3);
          if ($474) {
           $479 = 1;
           break;
          }
          $475 = ((($pMb$023)) + 128|0);
          $476 = HEAP32[$475>>2]|0;
          $477 = ((($pMb$023)) + 120|0);
          $478 = HEAP32[$477>>2]|0;
          $not$$i237$i = ($476|0)!=($478|0);
          $$$i238$i = $not$$i237$i&1;
          $479 = $$$i238$i;
         } else {
          $479 = 2;
         }
        } while(0);
        HEAP32[$18>>2] = $479;
        $480 = ((($pMb$023)) + 54|0);
        $481 = HEAP16[$480>>1]|0;
        $482 = ((($pMb$023)) + 186|0);
        $483 = HEAP16[$482>>1]|0;
        $484 = $483 << 16 >> 16;
        $485 = ((($pMb$023)) + 162|0);
        $486 = HEAP16[$485>>1]|0;
        $487 = $486 << 16 >> 16;
        $488 = $481 | $360;
        $489 = ($488<<16>>16)==(0);
        do {
         if ($489) {
          $490 = ((($pMb$023)) + 160|0);
          $491 = HEAP16[$490>>1]|0;
          $492 = $491 << 16 >> 16;
          $493 = ((($pMb$023)) + 184|0);
          $494 = HEAP16[$493>>1]|0;
          $495 = $494 << 16 >> 16;
          $496 = (($495) - ($492))|0;
          $ispos$i225$i = ($496|0)>(-1);
          $neg$i226$i = (0 - ($496))|0;
          $497 = $ispos$i225$i ? $496 : $neg$i226$i;
          $498 = ($497|0)>(3);
          if ($498) {
           $506 = 1;
           break;
          }
          $499 = (($484) - ($487))|0;
          $ispos2$i227$i = ($499|0)>(-1);
          $neg3$i228$i = (0 - ($499))|0;
          $500 = $ispos2$i227$i ? $499 : $neg3$i228$i;
          $501 = ($500|0)>(3);
          if ($501) {
           $506 = 1;
           break;
          }
          $502 = ((($pMb$023)) + 128|0);
          $503 = HEAP32[$502>>2]|0;
          $504 = ((($pMb$023)) + 120|0);
          $505 = HEAP32[$504>>2]|0;
          $not$$i229$i = ($503|0)!=($505|0);
          $$$i230$i = $not$$i229$i&1;
          $506 = $$$i230$i;
         } else {
          $506 = 2;
         }
        } while(0);
        HEAP32[$17>>2] = $506;
        $507 = ((($pMb$023)) + 30|0);
        $508 = HEAP16[$507>>1]|0;
        $509 = ($508<<16>>16)==(0);
        if ($509) {
         $510 = HEAP16[$335>>1]|0;
         $511 = ($510<<16>>16)!=(0);
         $phitmp351$i = $511 ? 2 : 0;
         $512 = $phitmp351$i;
        } else {
         $512 = 2;
        }
        HEAP32[$36>>2] = $512;
        $513 = ((($pMb$023)) + 36|0);
        $514 = HEAP16[$513>>1]|0;
        $515 = $514 | $508;
        $516 = ($515<<16>>16)!=(0);
        $517 = $516 ? 2 : 0;
        HEAP32[$35>>2] = $517;
        $518 = ((($pMb$023)) + 38|0);
        $519 = HEAP16[$518>>1]|0;
        $520 = $519 | $514;
        $521 = ($520<<16>>16)!=(0);
        $522 = $521 ? 2 : 0;
        HEAP32[$34>>2] = $522;
        $523 = ($337<<16>>16)!=(0);
        $not$354$i = $345 ^ 1;
        $$327$i = $523 | $not$354$i;
        $524 = $$327$i ? 2 : 0;
        HEAP32[$33>>2] = $524;
        $525 = ($344<<16>>16)!=(0);
        $not$355$i = $353 ^ 1;
        $526 = $525 | $not$355$i;
        $527 = $526 ? 2 : 0;
        HEAP32[$32>>2] = $527;
        $528 = ($352<<16>>16)!=(0);
        $not$356$i = $361 ^ 1;
        $$328$i = $528 | $not$356$i;
        $529 = $$328$i ? 2 : 0;
        HEAP32[$31>>2] = $529;
        $530 = $427 | $400;
        $531 = ($530<<16>>16)!=(0);
        $532 = $531 ? 2 : 0;
        HEAP32[$30>>2] = $532;
        $533 = $454 | $427;
        $534 = ($533<<16>>16)!=(0);
        $535 = $534 ? 2 : 0;
        HEAP32[$29>>2] = $535;
        $536 = $481 | $454;
        $537 = ($536<<16>>16)!=(0);
        $538 = $537 ? 2 : 0;
        HEAP32[$28>>2] = $538;
        $539 = ($368<<16>>16)!=(0);
        $not$360$i = $377 ^ 1;
        $$330$i = $539 | $not$360$i;
        $540 = $$330$i ? 2 : 0;
        HEAP32[$27>>2] = $540;
        $541 = ($376<<16>>16)!=(0);
        $phitmp2$i = $541 ? 2 : 0;
        $542 = $385 ? $phitmp2$i : 2;
        HEAP32[$26>>2] = $542;
        $543 = ($384<<16>>16)!=(0);
        $phitmp3$i = $543 ? 2 : 0;
        $544 = $393 ? $phitmp3$i : 2;
        HEAP32[$25>>2] = $544;
        break L89;
        break;
       }
       case 3:  {
        $545 = ((($pMb$023)) + 28|0);
        $546 = ((($pMb$023)) + 32|0);
        $547 = HEAP16[$546>>1]|0;
        $548 = ($547<<16>>16)==(0);
        if ($548) {
         $549 = HEAP16[$545>>1]|0;
         $550 = ($549<<16>>16)!=(0);
         $551 = $550;
        } else {
         $551 = 1;
        }
        $552 = $551 ? 2 : 0;
        HEAP32[$24>>2] = $552;
        $553 = ((($pMb$023)) + 34|0);
        $554 = HEAP16[$553>>1]|0;
        $555 = ($554<<16>>16)==(0);
        if ($555) {
         $556 = ((($pMb$023)) + 30|0);
         $557 = HEAP16[$556>>1]|0;
         $558 = ($557<<16>>16)!=(0);
         $559 = $558;
        } else {
         $559 = 1;
        }
        $560 = $559 ? 2 : 0;
        HEAP32[$23>>2] = $560;
        $561 = ((($pMb$023)) + 40|0);
        $562 = HEAP16[$561>>1]|0;
        $563 = ($562<<16>>16)==(0);
        if ($563) {
         $564 = ((($pMb$023)) + 36|0);
         $565 = HEAP16[$564>>1]|0;
         $566 = ($565<<16>>16)!=(0);
         $567 = $566;
        } else {
         $567 = 1;
        }
        $568 = $567 ? 2 : 0;
        HEAP32[$22>>2] = $568;
        $569 = ((($pMb$023)) + 42|0);
        $570 = HEAP16[$569>>1]|0;
        $571 = ($570<<16>>16)==(0);
        if ($571) {
         $572 = ((($pMb$023)) + 38|0);
         $573 = HEAP16[$572>>1]|0;
         $574 = ($573<<16>>16)!=(0);
         $575 = $574;
        } else {
         $575 = 1;
        }
        $576 = $575 ? 2 : 0;
        HEAP32[$21>>2] = $576;
        $577 = ((($pMb$023)) + 44|0);
        $578 = HEAP16[$577>>1]|0;
        $579 = $578 | $547;
        $580 = ($579<<16>>16)!=(0);
        $581 = $580 ? 2 : 0;
        HEAP32[$20>>2] = $581;
        $582 = ((($pMb$023)) + 46|0);
        $583 = HEAP16[$582>>1]|0;
        $584 = $583 | $554;
        $585 = ($584<<16>>16)!=(0);
        $586 = $585 ? 2 : 0;
        HEAP32[$19>>2] = $586;
        $587 = ((($pMb$023)) + 52|0);
        $588 = HEAP16[$587>>1]|0;
        $589 = $588 | $562;
        $590 = ($589<<16>>16)!=(0);
        $591 = $590 ? 2 : 0;
        HEAP32[$18>>2] = $591;
        $592 = ((($pMb$023)) + 54|0);
        $593 = HEAP16[$592>>1]|0;
        $594 = $593 | $570;
        $595 = ($594<<16>>16)!=(0);
        $596 = $595 ? 2 : 0;
        HEAP32[$17>>2] = $596;
        $597 = ((($pMb$023)) + 48|0);
        $598 = HEAP16[$597>>1]|0;
        $599 = $598 | $578;
        $600 = ($599<<16>>16)!=(0);
        $601 = $600 ? 2 : 0;
        HEAP32[$16>>2] = $601;
        $602 = ((($pMb$023)) + 50|0);
        $603 = HEAP16[$602>>1]|0;
        $604 = ($603<<16>>16)==(0);
        $605 = ($583<<16>>16)!=(0);
        $not$344$i = $604 ^ 1;
        $606 = $605 | $not$344$i;
        $607 = $606 ? 2 : 0;
        HEAP32[$15>>2] = $607;
        $608 = ((($pMb$023)) + 56|0);
        $609 = HEAP16[$608>>1]|0;
        $610 = $609 | $588;
        $611 = ($610<<16>>16)!=(0);
        $612 = $611 ? 2 : 0;
        HEAP32[$14>>2] = $612;
        $613 = ((($pMb$023)) + 58|0);
        $614 = HEAP16[$613>>1]|0;
        $615 = ($614<<16>>16)==(0);
        $616 = ($593<<16>>16)!=(0);
        $not$346$i = $615 ^ 1;
        $617 = $616 | $not$346$i;
        $618 = $617 ? 2 : 0;
        HEAP32[$13>>2] = $618;
        $619 = ((($pMb$023)) + 30|0);
        $620 = HEAP16[$619>>1]|0;
        $621 = ($620<<16>>16)==(0);
        if ($621) {
         $622 = HEAP16[$545>>1]|0;
         $623 = ($622<<16>>16)!=(0);
         $624 = $623;
        } else {
         $624 = 1;
        }
        $625 = $624 ? 2 : 0;
        HEAP32[$36>>2] = $625;
        $626 = ((($pMb$023)) + 38|0);
        $627 = HEAP16[$626>>1]|0;
        $628 = ((($pMb$023)) + 36|0);
        $629 = HEAP16[$628>>1]|0;
        $630 = $629 | $627;
        $631 = ($630<<16>>16)!=(0);
        $632 = $631 ? 2 : 0;
        HEAP32[$34>>2] = $632;
        $633 = ($547<<16>>16)!=(0);
        $not$347$i = $555 ^ 1;
        $$335$i = $633 | $not$347$i;
        $634 = $$335$i ? 2 : 0;
        HEAP32[$33>>2] = $634;
        $635 = ($562<<16>>16)!=(0);
        $not$348$i = $571 ^ 1;
        $636 = $635 | $not$348$i;
        $637 = $636 ? 2 : 0;
        HEAP32[$31>>2] = $637;
        $638 = $583 | $578;
        $639 = ($638<<16>>16)!=(0);
        $640 = $639 ? 2 : 0;
        HEAP32[$30>>2] = $640;
        $641 = $593 | $588;
        $642 = ($641<<16>>16)!=(0);
        $643 = $642 ? 2 : 0;
        HEAP32[$28>>2] = $643;
        $644 = ($598<<16>>16)!=(0);
        $phitmp$i = $644 ? 2 : 0;
        $645 = $604 ? $phitmp$i : 2;
        HEAP32[$27>>2] = $645;
        $646 = ($609<<16>>16)!=(0);
        $phitmp1$i = $646 ? 2 : 0;
        $647 = $615 ? $phitmp1$i : 2;
        HEAP32[$25>>2] = $647;
        $648 = ((($pMb$023)) + 150|0);
        $649 = HEAP16[$648>>1]|0;
        $650 = $649 << 16 >> 16;
        $651 = ((($pMb$023)) + 138|0);
        $652 = HEAP16[$651>>1]|0;
        $653 = $652 << 16 >> 16;
        $654 = $629 | $620;
        $655 = ($654<<16>>16)==(0);
        do {
         if ($655) {
          $656 = ((($pMb$023)) + 136|0);
          $657 = HEAP16[$656>>1]|0;
          $658 = $657 << 16 >> 16;
          $659 = ((($pMb$023)) + 148|0);
          $660 = HEAP16[$659>>1]|0;
          $661 = $660 << 16 >> 16;
          $662 = (($661) - ($658))|0;
          $ispos$i217$i = ($662|0)>(-1);
          $neg$i218$i = (0 - ($662))|0;
          $663 = $ispos$i217$i ? $662 : $neg$i218$i;
          $664 = ($663|0)>(3);
          if ($664) {
           $672 = 1;
          } else {
           $665 = (($650) - ($653))|0;
           $ispos2$i219$i = ($665|0)>(-1);
           $neg3$i220$i = (0 - ($665))|0;
           $666 = $ispos2$i219$i ? $665 : $neg3$i220$i;
           $667 = ($666|0)>(3);
           if ($667) {
            $672 = 1;
            break;
           }
           $668 = ((($pMb$023)) + 120|0);
           $669 = HEAP32[$668>>2]|0;
           $670 = ((($pMb$023)) + 116|0);
           $671 = HEAP32[$670>>2]|0;
           $not$$i221$i = ($669|0)!=($671|0);
           $$$i222$i = $not$$i221$i&1;
           $672 = $$$i222$i;
          }
         } else {
          $672 = 2;
         }
        } while(0);
        HEAP32[$35>>2] = $672;
        $673 = ((($pMb$023)) + 158|0);
        $674 = HEAP16[$673>>1]|0;
        $675 = $674 << 16 >> 16;
        $676 = ((($pMb$023)) + 146|0);
        $677 = HEAP16[$676>>1]|0;
        $678 = $677 << 16 >> 16;
        $679 = $562 | $554;
        $680 = ($679<<16>>16)==(0);
        do {
         if ($680) {
          $681 = ((($pMb$023)) + 144|0);
          $682 = HEAP16[$681>>1]|0;
          $683 = $682 << 16 >> 16;
          $684 = ((($pMb$023)) + 156|0);
          $685 = HEAP16[$684>>1]|0;
          $686 = $685 << 16 >> 16;
          $687 = (($686) - ($683))|0;
          $ispos$i209$i = ($687|0)>(-1);
          $neg$i210$i = (0 - ($687))|0;
          $688 = $ispos$i209$i ? $687 : $neg$i210$i;
          $689 = ($688|0)>(3);
          if ($689) {
           $697 = 1;
           break;
          }
          $690 = (($675) - ($678))|0;
          $ispos2$i211$i = ($690|0)>(-1);
          $neg3$i212$i = (0 - ($690))|0;
          $691 = $ispos2$i211$i ? $690 : $neg3$i212$i;
          $692 = ($691|0)>(3);
          if ($692) {
           $697 = 1;
           break;
          }
          $693 = ((($pMb$023)) + 120|0);
          $694 = HEAP32[$693>>2]|0;
          $695 = ((($pMb$023)) + 116|0);
          $696 = HEAP32[$695>>2]|0;
          $not$$i213$i = ($694|0)!=($696|0);
          $$$i214$i = $not$$i213$i&1;
          $697 = $$$i214$i;
         } else {
          $697 = 2;
         }
        } while(0);
        HEAP32[$32>>2] = $697;
        $698 = ((($pMb$023)) + 182|0);
        $699 = HEAP16[$698>>1]|0;
        $700 = $699 << 16 >> 16;
        $701 = ((($pMb$023)) + 170|0);
        $702 = HEAP16[$701>>1]|0;
        $703 = $702 << 16 >> 16;
        $704 = $588 | $583;
        $705 = ($704<<16>>16)==(0);
        do {
         if ($705) {
          $706 = ((($pMb$023)) + 168|0);
          $707 = HEAP16[$706>>1]|0;
          $708 = $707 << 16 >> 16;
          $709 = ((($pMb$023)) + 180|0);
          $710 = HEAP16[$709>>1]|0;
          $711 = $710 << 16 >> 16;
          $712 = (($711) - ($708))|0;
          $ispos$i201$i = ($712|0)>(-1);
          $neg$i202$i = (0 - ($712))|0;
          $713 = $ispos$i201$i ? $712 : $neg$i202$i;
          $714 = ($713|0)>(3);
          if ($714) {
           $722 = 1;
           break;
          }
          $715 = (($700) - ($703))|0;
          $ispos2$i203$i = ($715|0)>(-1);
          $neg3$i204$i = (0 - ($715))|0;
          $716 = $ispos2$i203$i ? $715 : $neg3$i204$i;
          $717 = ($716|0)>(3);
          if ($717) {
           $722 = 1;
           break;
          }
          $718 = ((($pMb$023)) + 128|0);
          $719 = HEAP32[$718>>2]|0;
          $720 = ((($pMb$023)) + 124|0);
          $721 = HEAP32[$720>>2]|0;
          $not$$i205$i = ($719|0)!=($721|0);
          $$$i206$i = $not$$i205$i&1;
          $722 = $$$i206$i;
         } else {
          $722 = 2;
         }
        } while(0);
        HEAP32[$29>>2] = $722;
        $723 = ((($pMb$023)) + 190|0);
        $724 = HEAP16[$723>>1]|0;
        $725 = $724 << 16 >> 16;
        $726 = ((($pMb$023)) + 178|0);
        $727 = HEAP16[$726>>1]|0;
        $728 = $727 << 16 >> 16;
        $729 = $609 | $603;
        $730 = ($729<<16>>16)==(0);
        do {
         if ($730) {
          $731 = ((($pMb$023)) + 176|0);
          $732 = HEAP16[$731>>1]|0;
          $733 = $732 << 16 >> 16;
          $734 = ((($pMb$023)) + 188|0);
          $735 = HEAP16[$734>>1]|0;
          $736 = $735 << 16 >> 16;
          $737 = (($736) - ($733))|0;
          $ispos$i193$i = ($737|0)>(-1);
          $neg$i194$i = (0 - ($737))|0;
          $738 = $ispos$i193$i ? $737 : $neg$i194$i;
          $739 = ($738|0)>(3);
          if ($739) {
           $747 = 1;
           break;
          }
          $740 = (($725) - ($728))|0;
          $ispos2$i195$i = ($740|0)>(-1);
          $neg3$i196$i = (0 - ($740))|0;
          $741 = $ispos2$i195$i ? $740 : $neg3$i196$i;
          $742 = ($741|0)>(3);
          if ($742) {
           $747 = 1;
           break;
          }
          $743 = ((($pMb$023)) + 128|0);
          $744 = HEAP32[$743>>2]|0;
          $745 = ((($pMb$023)) + 124|0);
          $746 = HEAP32[$745>>2]|0;
          $not$$i197$i = ($744|0)!=($746|0);
          $$$i198$i = $not$$i197$i&1;
          $747 = $$$i198$i;
         } else {
          $747 = 2;
         }
        } while(0);
        HEAP32[$26>>2] = $747;
        break L89;
        break;
       }
       default: {
        $748 = ((($pMb$023)) + 32|0);
        $749 = HEAP16[$748>>1]|0;
        $750 = ((($pMb$023)) + 28|0);
        $751 = HEAP16[$750>>1]|0;
        $752 = ((($pMb$023)) + 142|0);
        $753 = HEAP16[$752>>1]|0;
        $754 = $753 << 16 >> 16;
        $755 = ((($pMb$023)) + 134|0);
        $756 = HEAP16[$755>>1]|0;
        $757 = $756 << 16 >> 16;
        $758 = $751 | $749;
        $759 = ($758<<16>>16)==(0);
        if ($759) {
         $760 = ((($pMb$023)) + 132|0);
         $761 = HEAP16[$760>>1]|0;
         $762 = $761 << 16 >> 16;
         $763 = ((($pMb$023)) + 140|0);
         $764 = HEAP16[$763>>1]|0;
         $765 = $764 << 16 >> 16;
         $766 = (($765) - ($762))|0;
         $ispos$i185$i = ($766|0)>(-1);
         $neg$i186$i = (0 - ($766))|0;
         $767 = $ispos$i185$i ? $766 : $neg$i186$i;
         $768 = ($767|0)>(3);
         if ($768) {
          $772 = 1;
         } else {
          $769 = (($754) - ($757))|0;
          $ispos2$i187$i = ($769|0)>(-1);
          $neg3$i188$i = (0 - ($769))|0;
          $770 = $ispos2$i187$i ? $769 : $neg3$i188$i;
          $771 = ($770|0)>(3);
          $$$i = $771&1;
          $772 = $$$i;
         }
        } else {
         $772 = 2;
        }
        HEAP32[$24>>2] = $772;
        $773 = ((($pMb$023)) + 34|0);
        $774 = HEAP16[$773>>1]|0;
        $775 = ((($pMb$023)) + 30|0);
        $776 = HEAP16[$775>>1]|0;
        $777 = ((($pMb$023)) + 146|0);
        $778 = HEAP16[$777>>1]|0;
        $779 = $778 << 16 >> 16;
        $780 = ((($pMb$023)) + 138|0);
        $781 = HEAP16[$780>>1]|0;
        $782 = $781 << 16 >> 16;
        $783 = $776 | $774;
        $784 = ($783<<16>>16)==(0);
        if ($784) {
         $785 = ((($pMb$023)) + 136|0);
         $786 = HEAP16[$785>>1]|0;
         $787 = $786 << 16 >> 16;
         $788 = ((($pMb$023)) + 144|0);
         $789 = HEAP16[$788>>1]|0;
         $790 = $789 << 16 >> 16;
         $791 = (($790) - ($787))|0;
         $ispos$i177$i = ($791|0)>(-1);
         $neg$i178$i = (0 - ($791))|0;
         $792 = $ispos$i177$i ? $791 : $neg$i178$i;
         $793 = ($792|0)>(3);
         if ($793) {
          $797 = 1;
         } else {
          $794 = (($779) - ($782))|0;
          $ispos2$i179$i = ($794|0)>(-1);
          $neg3$i180$i = (0 - ($794))|0;
          $795 = $ispos2$i179$i ? $794 : $neg3$i180$i;
          $796 = ($795|0)>(3);
          $$306$i = $796&1;
          $797 = $$306$i;
         }
        } else {
         $797 = 2;
        }
        HEAP32[$23>>2] = $797;
        $798 = ((($pMb$023)) + 40|0);
        $799 = HEAP16[$798>>1]|0;
        $800 = ((($pMb$023)) + 36|0);
        $801 = HEAP16[$800>>1]|0;
        $802 = ((($pMb$023)) + 158|0);
        $803 = HEAP16[$802>>1]|0;
        $804 = $803 << 16 >> 16;
        $805 = ((($pMb$023)) + 150|0);
        $806 = HEAP16[$805>>1]|0;
        $807 = $806 << 16 >> 16;
        $808 = $801 | $799;
        $809 = ($808<<16>>16)==(0);
        if ($809) {
         $810 = ((($pMb$023)) + 148|0);
         $811 = HEAP16[$810>>1]|0;
         $812 = $811 << 16 >> 16;
         $813 = ((($pMb$023)) + 156|0);
         $814 = HEAP16[$813>>1]|0;
         $815 = $814 << 16 >> 16;
         $816 = (($815) - ($812))|0;
         $ispos$i169$i = ($816|0)>(-1);
         $neg$i170$i = (0 - ($816))|0;
         $817 = $ispos$i169$i ? $816 : $neg$i170$i;
         $818 = ($817|0)>(3);
         if ($818) {
          $822 = 1;
         } else {
          $819 = (($804) - ($807))|0;
          $ispos2$i171$i = ($819|0)>(-1);
          $neg3$i172$i = (0 - ($819))|0;
          $820 = $ispos2$i171$i ? $819 : $neg3$i172$i;
          $821 = ($820|0)>(3);
          $$307$i = $821&1;
          $822 = $$307$i;
         }
        } else {
         $822 = 2;
        }
        HEAP32[$22>>2] = $822;
        $823 = ((($pMb$023)) + 42|0);
        $824 = HEAP16[$823>>1]|0;
        $825 = ((($pMb$023)) + 38|0);
        $826 = HEAP16[$825>>1]|0;
        $827 = ((($pMb$023)) + 162|0);
        $828 = HEAP16[$827>>1]|0;
        $829 = $828 << 16 >> 16;
        $830 = ((($pMb$023)) + 154|0);
        $831 = HEAP16[$830>>1]|0;
        $832 = $831 << 16 >> 16;
        $833 = $826 | $824;
        $834 = ($833<<16>>16)==(0);
        if ($834) {
         $835 = ((($pMb$023)) + 152|0);
         $836 = HEAP16[$835>>1]|0;
         $837 = $836 << 16 >> 16;
         $838 = ((($pMb$023)) + 160|0);
         $839 = HEAP16[$838>>1]|0;
         $840 = $839 << 16 >> 16;
         $841 = (($840) - ($837))|0;
         $ispos$i161$i = ($841|0)>(-1);
         $neg$i162$i = (0 - ($841))|0;
         $842 = $ispos$i161$i ? $841 : $neg$i162$i;
         $843 = ($842|0)>(3);
         if ($843) {
          $847 = 1;
         } else {
          $844 = (($829) - ($832))|0;
          $ispos2$i163$i = ($844|0)>(-1);
          $neg3$i164$i = (0 - ($844))|0;
          $845 = $ispos2$i163$i ? $844 : $neg3$i164$i;
          $846 = ($845|0)>(3);
          $$308$i = $846&1;
          $847 = $$308$i;
         }
        } else {
         $847 = 2;
        }
        HEAP32[$21>>2] = $847;
        $848 = ((($pMb$023)) + 44|0);
        $849 = HEAP16[$848>>1]|0;
        $850 = ((($pMb$023)) + 166|0);
        $851 = HEAP16[$850>>1]|0;
        $852 = $851 << 16 >> 16;
        $853 = $849 | $749;
        $854 = ($853<<16>>16)==(0);
        if ($854) {
         $855 = ((($pMb$023)) + 140|0);
         $856 = HEAP16[$855>>1]|0;
         $857 = $856 << 16 >> 16;
         $858 = ((($pMb$023)) + 164|0);
         $859 = HEAP16[$858>>1]|0;
         $860 = $859 << 16 >> 16;
         $861 = (($860) - ($857))|0;
         $ispos$i153$i = ($861|0)>(-1);
         $neg$i154$i = (0 - ($861))|0;
         $862 = $ispos$i153$i ? $861 : $neg$i154$i;
         $863 = ($862|0)>(3);
         if ($863) {
          $871 = 1;
         } else {
          $864 = (($852) - ($754))|0;
          $ispos2$i155$i = ($864|0)>(-1);
          $neg3$i156$i = (0 - ($864))|0;
          $865 = $ispos2$i155$i ? $864 : $neg3$i156$i;
          $866 = ($865|0)>(3);
          if ($866) {
           $871 = 1;
          } else {
           $867 = ((($pMb$023)) + 124|0);
           $868 = HEAP32[$867>>2]|0;
           $869 = ((($pMb$023)) + 116|0);
           $870 = HEAP32[$869>>2]|0;
           $not$$i157$i = ($868|0)!=($870|0);
           $$$i158$i = $not$$i157$i&1;
           $871 = $$$i158$i;
          }
         }
        } else {
         $871 = 2;
        }
        HEAP32[$20>>2] = $871;
        $872 = ((($pMb$023)) + 46|0);
        $873 = HEAP16[$872>>1]|0;
        $874 = ((($pMb$023)) + 170|0);
        $875 = HEAP16[$874>>1]|0;
        $876 = $875 << 16 >> 16;
        $877 = $873 | $774;
        $878 = ($877<<16>>16)==(0);
        do {
         if ($878) {
          $879 = ((($pMb$023)) + 144|0);
          $880 = HEAP16[$879>>1]|0;
          $881 = $880 << 16 >> 16;
          $882 = ((($pMb$023)) + 168|0);
          $883 = HEAP16[$882>>1]|0;
          $884 = $883 << 16 >> 16;
          $885 = (($884) - ($881))|0;
          $ispos$i145$i = ($885|0)>(-1);
          $neg$i146$i = (0 - ($885))|0;
          $886 = $ispos$i145$i ? $885 : $neg$i146$i;
          $887 = ($886|0)>(3);
          if ($887) {
           $895 = 1;
          } else {
           $888 = (($876) - ($779))|0;
           $ispos2$i147$i = ($888|0)>(-1);
           $neg3$i148$i = (0 - ($888))|0;
           $889 = $ispos2$i147$i ? $888 : $neg3$i148$i;
           $890 = ($889|0)>(3);
           if ($890) {
            $895 = 1;
            break;
           }
           $891 = ((($pMb$023)) + 124|0);
           $892 = HEAP32[$891>>2]|0;
           $893 = ((($pMb$023)) + 116|0);
           $894 = HEAP32[$893>>2]|0;
           $not$$i149$i = ($892|0)!=($894|0);
           $$$i150$i = $not$$i149$i&1;
           $895 = $$$i150$i;
          }
         } else {
          $895 = 2;
         }
        } while(0);
        HEAP32[$19>>2] = $895;
        $896 = ((($pMb$023)) + 52|0);
        $897 = HEAP16[$896>>1]|0;
        $898 = ((($pMb$023)) + 182|0);
        $899 = HEAP16[$898>>1]|0;
        $900 = $899 << 16 >> 16;
        $901 = $897 | $799;
        $902 = ($901<<16>>16)==(0);
        do {
         if ($902) {
          $903 = ((($pMb$023)) + 156|0);
          $904 = HEAP16[$903>>1]|0;
          $905 = $904 << 16 >> 16;
          $906 = ((($pMb$023)) + 180|0);
          $907 = HEAP16[$906>>1]|0;
          $908 = $907 << 16 >> 16;
          $909 = (($908) - ($905))|0;
          $ispos$i137$i = ($909|0)>(-1);
          $neg$i138$i = (0 - ($909))|0;
          $910 = $ispos$i137$i ? $909 : $neg$i138$i;
          $911 = ($910|0)>(3);
          if ($911) {
           $919 = 1;
           break;
          }
          $912 = (($900) - ($804))|0;
          $ispos2$i139$i = ($912|0)>(-1);
          $neg3$i140$i = (0 - ($912))|0;
          $913 = $ispos2$i139$i ? $912 : $neg3$i140$i;
          $914 = ($913|0)>(3);
          if ($914) {
           $919 = 1;
           break;
          }
          $915 = ((($pMb$023)) + 128|0);
          $916 = HEAP32[$915>>2]|0;
          $917 = ((($pMb$023)) + 120|0);
          $918 = HEAP32[$917>>2]|0;
          $not$$i141$i = ($916|0)!=($918|0);
          $$$i142$i = $not$$i141$i&1;
          $919 = $$$i142$i;
         } else {
          $919 = 2;
         }
        } while(0);
        HEAP32[$18>>2] = $919;
        $920 = ((($pMb$023)) + 54|0);
        $921 = HEAP16[$920>>1]|0;
        $922 = ((($pMb$023)) + 186|0);
        $923 = HEAP16[$922>>1]|0;
        $924 = $923 << 16 >> 16;
        $925 = $921 | $824;
        $926 = ($925<<16>>16)==(0);
        do {
         if ($926) {
          $927 = ((($pMb$023)) + 160|0);
          $928 = HEAP16[$927>>1]|0;
          $929 = $928 << 16 >> 16;
          $930 = ((($pMb$023)) + 184|0);
          $931 = HEAP16[$930>>1]|0;
          $932 = $931 << 16 >> 16;
          $933 = (($932) - ($929))|0;
          $ispos$i129$i = ($933|0)>(-1);
          $neg$i130$i = (0 - ($933))|0;
          $934 = $ispos$i129$i ? $933 : $neg$i130$i;
          $935 = ($934|0)>(3);
          if ($935) {
           $943 = 1;
           break;
          }
          $936 = (($924) - ($829))|0;
          $ispos2$i131$i = ($936|0)>(-1);
          $neg3$i132$i = (0 - ($936))|0;
          $937 = $ispos2$i131$i ? $936 : $neg3$i132$i;
          $938 = ($937|0)>(3);
          if ($938) {
           $943 = 1;
           break;
          }
          $939 = ((($pMb$023)) + 128|0);
          $940 = HEAP32[$939>>2]|0;
          $941 = ((($pMb$023)) + 120|0);
          $942 = HEAP32[$941>>2]|0;
          $not$$i133$i = ($940|0)!=($942|0);
          $$$i134$i = $not$$i133$i&1;
          $943 = $$$i134$i;
         } else {
          $943 = 2;
         }
        } while(0);
        HEAP32[$17>>2] = $943;
        $944 = ((($pMb$023)) + 48|0);
        $945 = HEAP16[$944>>1]|0;
        $946 = ((($pMb$023)) + 174|0);
        $947 = HEAP16[$946>>1]|0;
        $948 = $947 << 16 >> 16;
        $949 = $945 | $849;
        $950 = ($949<<16>>16)==(0);
        do {
         if ($950) {
          $951 = ((($pMb$023)) + 164|0);
          $952 = HEAP16[$951>>1]|0;
          $953 = $952 << 16 >> 16;
          $954 = ((($pMb$023)) + 172|0);
          $955 = HEAP16[$954>>1]|0;
          $956 = $955 << 16 >> 16;
          $957 = (($956) - ($953))|0;
          $ispos$i121$i = ($957|0)>(-1);
          $neg$i122$i = (0 - ($957))|0;
          $958 = $ispos$i121$i ? $957 : $neg$i122$i;
          $959 = ($958|0)>(3);
          if ($959) {
           $963 = 1;
           break;
          }
          $960 = (($948) - ($852))|0;
          $ispos2$i123$i = ($960|0)>(-1);
          $neg3$i124$i = (0 - ($960))|0;
          $961 = $ispos2$i123$i ? $960 : $neg3$i124$i;
          $962 = ($961|0)>(3);
          $$309$i = $962&1;
          $963 = $$309$i;
         } else {
          $963 = 2;
         }
        } while(0);
        HEAP32[$16>>2] = $963;
        $964 = ((($pMb$023)) + 50|0);
        $965 = HEAP16[$964>>1]|0;
        $966 = ((($pMb$023)) + 178|0);
        $967 = HEAP16[$966>>1]|0;
        $968 = $967 << 16 >> 16;
        $969 = $965 | $873;
        $970 = ($969<<16>>16)==(0);
        do {
         if ($970) {
          $971 = ((($pMb$023)) + 168|0);
          $972 = HEAP16[$971>>1]|0;
          $973 = $972 << 16 >> 16;
          $974 = ((($pMb$023)) + 176|0);
          $975 = HEAP16[$974>>1]|0;
          $976 = $975 << 16 >> 16;
          $977 = (($976) - ($973))|0;
          $ispos$i113$i = ($977|0)>(-1);
          $neg$i114$i = (0 - ($977))|0;
          $978 = $ispos$i113$i ? $977 : $neg$i114$i;
          $979 = ($978|0)>(3);
          if ($979) {
           $983 = 1;
           break;
          }
          $980 = (($968) - ($876))|0;
          $ispos2$i115$i = ($980|0)>(-1);
          $neg3$i116$i = (0 - ($980))|0;
          $981 = $ispos2$i115$i ? $980 : $neg3$i116$i;
          $982 = ($981|0)>(3);
          $$310$i = $982&1;
          $983 = $$310$i;
         } else {
          $983 = 2;
         }
        } while(0);
        HEAP32[$15>>2] = $983;
        $984 = ((($pMb$023)) + 56|0);
        $985 = HEAP16[$984>>1]|0;
        $986 = ((($pMb$023)) + 190|0);
        $987 = HEAP16[$986>>1]|0;
        $988 = $987 << 16 >> 16;
        $989 = $985 | $897;
        $990 = ($989<<16>>16)==(0);
        do {
         if ($990) {
          $991 = ((($pMb$023)) + 180|0);
          $992 = HEAP16[$991>>1]|0;
          $993 = $992 << 16 >> 16;
          $994 = ((($pMb$023)) + 188|0);
          $995 = HEAP16[$994>>1]|0;
          $996 = $995 << 16 >> 16;
          $997 = (($996) - ($993))|0;
          $ispos$i105$i = ($997|0)>(-1);
          $neg$i106$i = (0 - ($997))|0;
          $998 = $ispos$i105$i ? $997 : $neg$i106$i;
          $999 = ($998|0)>(3);
          if ($999) {
           $1003 = 1;
           break;
          }
          $1000 = (($988) - ($900))|0;
          $ispos2$i107$i = ($1000|0)>(-1);
          $neg3$i108$i = (0 - ($1000))|0;
          $1001 = $ispos2$i107$i ? $1000 : $neg3$i108$i;
          $1002 = ($1001|0)>(3);
          $$311$i = $1002&1;
          $1003 = $$311$i;
         } else {
          $1003 = 2;
         }
        } while(0);
        HEAP32[$14>>2] = $1003;
        $1004 = ((($pMb$023)) + 58|0);
        $1005 = HEAP16[$1004>>1]|0;
        $1006 = ((($pMb$023)) + 194|0);
        $1007 = HEAP16[$1006>>1]|0;
        $1008 = $1007 << 16 >> 16;
        $1009 = $1005 | $921;
        $1010 = ($1009<<16>>16)==(0);
        do {
         if ($1010) {
          $1011 = ((($pMb$023)) + 184|0);
          $1012 = HEAP16[$1011>>1]|0;
          $1013 = $1012 << 16 >> 16;
          $1014 = ((($pMb$023)) + 192|0);
          $1015 = HEAP16[$1014>>1]|0;
          $1016 = $1015 << 16 >> 16;
          $1017 = (($1016) - ($1013))|0;
          $ispos$i97$i = ($1017|0)>(-1);
          $neg$i98$i = (0 - ($1017))|0;
          $1018 = $ispos$i97$i ? $1017 : $neg$i98$i;
          $1019 = ($1018|0)>(3);
          if ($1019) {
           $1023 = 1;
           break;
          }
          $1020 = (($1008) - ($924))|0;
          $ispos2$i99$i = ($1020|0)>(-1);
          $neg3$i100$i = (0 - ($1020))|0;
          $1021 = $ispos2$i99$i ? $1020 : $neg3$i100$i;
          $1022 = ($1021|0)>(3);
          $$312$i = $1022&1;
          $1023 = $$312$i;
         } else {
          $1023 = 2;
         }
        } while(0);
        HEAP32[$13>>2] = $1023;
        $1024 = $776 | $751;
        $1025 = ($1024<<16>>16)==(0);
        do {
         if ($1025) {
          $1026 = ((($pMb$023)) + 132|0);
          $1027 = HEAP16[$1026>>1]|0;
          $1028 = $1027 << 16 >> 16;
          $1029 = ((($pMb$023)) + 136|0);
          $1030 = HEAP16[$1029>>1]|0;
          $1031 = $1030 << 16 >> 16;
          $1032 = (($1031) - ($1028))|0;
          $ispos$i89$i = ($1032|0)>(-1);
          $neg$i90$i = (0 - ($1032))|0;
          $1033 = $ispos$i89$i ? $1032 : $neg$i90$i;
          $1034 = ($1033|0)>(3);
          if ($1034) {
           $1038 = 1;
           break;
          }
          $1035 = (($782) - ($757))|0;
          $ispos2$i91$i = ($1035|0)>(-1);
          $neg3$i92$i = (0 - ($1035))|0;
          $1036 = $ispos2$i91$i ? $1035 : $neg3$i92$i;
          $1037 = ($1036|0)>(3);
          $$313$i = $1037&1;
          $1038 = $$313$i;
         } else {
          $1038 = 2;
         }
        } while(0);
        HEAP32[$36>>2] = $1038;
        $1039 = $801 | $776;
        $1040 = ($1039<<16>>16)==(0);
        do {
         if ($1040) {
          $1041 = ((($pMb$023)) + 136|0);
          $1042 = HEAP16[$1041>>1]|0;
          $1043 = $1042 << 16 >> 16;
          $1044 = ((($pMb$023)) + 148|0);
          $1045 = HEAP16[$1044>>1]|0;
          $1046 = $1045 << 16 >> 16;
          $1047 = (($1046) - ($1043))|0;
          $ispos$i81$i = ($1047|0)>(-1);
          $neg$i82$i = (0 - ($1047))|0;
          $1048 = $ispos$i81$i ? $1047 : $neg$i82$i;
          $1049 = ($1048|0)>(3);
          if ($1049) {
           $1057 = 1;
           break;
          }
          $1050 = (($807) - ($782))|0;
          $ispos2$i83$i = ($1050|0)>(-1);
          $neg3$i84$i = (0 - ($1050))|0;
          $1051 = $ispos2$i83$i ? $1050 : $neg3$i84$i;
          $1052 = ($1051|0)>(3);
          if ($1052) {
           $1057 = 1;
           break;
          }
          $1053 = ((($pMb$023)) + 120|0);
          $1054 = HEAP32[$1053>>2]|0;
          $1055 = ((($pMb$023)) + 116|0);
          $1056 = HEAP32[$1055>>2]|0;
          $not$$i85$i = ($1054|0)!=($1056|0);
          $$$i86$i = $not$$i85$i&1;
          $1057 = $$$i86$i;
         } else {
          $1057 = 2;
         }
        } while(0);
        HEAP32[$35>>2] = $1057;
        $1058 = $826 | $801;
        $1059 = ($1058<<16>>16)==(0);
        do {
         if ($1059) {
          $1060 = ((($pMb$023)) + 148|0);
          $1061 = HEAP16[$1060>>1]|0;
          $1062 = $1061 << 16 >> 16;
          $1063 = ((($pMb$023)) + 152|0);
          $1064 = HEAP16[$1063>>1]|0;
          $1065 = $1064 << 16 >> 16;
          $1066 = (($1065) - ($1062))|0;
          $ispos$i73$i = ($1066|0)>(-1);
          $neg$i74$i = (0 - ($1066))|0;
          $1067 = $ispos$i73$i ? $1066 : $neg$i74$i;
          $1068 = ($1067|0)>(3);
          if ($1068) {
           $1072 = 1;
           break;
          }
          $1069 = (($832) - ($807))|0;
          $ispos2$i75$i = ($1069|0)>(-1);
          $neg3$i76$i = (0 - ($1069))|0;
          $1070 = $ispos2$i75$i ? $1069 : $neg3$i76$i;
          $1071 = ($1070|0)>(3);
          $$314$i = $1071&1;
          $1072 = $$314$i;
         } else {
          $1072 = 2;
         }
        } while(0);
        HEAP32[$34>>2] = $1072;
        $1073 = $774 | $749;
        $1074 = ($1073<<16>>16)==(0);
        do {
         if ($1074) {
          $1075 = ((($pMb$023)) + 140|0);
          $1076 = HEAP16[$1075>>1]|0;
          $1077 = $1076 << 16 >> 16;
          $1078 = ((($pMb$023)) + 144|0);
          $1079 = HEAP16[$1078>>1]|0;
          $1080 = $1079 << 16 >> 16;
          $1081 = (($1080) - ($1077))|0;
          $ispos$i65$i = ($1081|0)>(-1);
          $neg$i66$i = (0 - ($1081))|0;
          $1082 = $ispos$i65$i ? $1081 : $neg$i66$i;
          $1083 = ($1082|0)>(3);
          if ($1083) {
           $1087 = 1;
           break;
          }
          $1084 = (($779) - ($754))|0;
          $ispos2$i67$i = ($1084|0)>(-1);
          $neg3$i68$i = (0 - ($1084))|0;
          $1085 = $ispos2$i67$i ? $1084 : $neg3$i68$i;
          $1086 = ($1085|0)>(3);
          $$315$i = $1086&1;
          $1087 = $$315$i;
         } else {
          $1087 = 2;
         }
        } while(0);
        HEAP32[$33>>2] = $1087;
        $1088 = $799 | $774;
        $1089 = ($1088<<16>>16)==(0);
        do {
         if ($1089) {
          $1090 = ((($pMb$023)) + 144|0);
          $1091 = HEAP16[$1090>>1]|0;
          $1092 = $1091 << 16 >> 16;
          $1093 = ((($pMb$023)) + 156|0);
          $1094 = HEAP16[$1093>>1]|0;
          $1095 = $1094 << 16 >> 16;
          $1096 = (($1095) - ($1092))|0;
          $ispos$i57$i = ($1096|0)>(-1);
          $neg$i58$i = (0 - ($1096))|0;
          $1097 = $ispos$i57$i ? $1096 : $neg$i58$i;
          $1098 = ($1097|0)>(3);
          if ($1098) {
           $1106 = 1;
           break;
          }
          $1099 = (($804) - ($779))|0;
          $ispos2$i59$i = ($1099|0)>(-1);
          $neg3$i60$i = (0 - ($1099))|0;
          $1100 = $ispos2$i59$i ? $1099 : $neg3$i60$i;
          $1101 = ($1100|0)>(3);
          if ($1101) {
           $1106 = 1;
           break;
          }
          $1102 = ((($pMb$023)) + 120|0);
          $1103 = HEAP32[$1102>>2]|0;
          $1104 = ((($pMb$023)) + 116|0);
          $1105 = HEAP32[$1104>>2]|0;
          $not$$i61$i = ($1103|0)!=($1105|0);
          $$$i62$i = $not$$i61$i&1;
          $1106 = $$$i62$i;
         } else {
          $1106 = 2;
         }
        } while(0);
        HEAP32[$32>>2] = $1106;
        $1107 = $824 | $799;
        $1108 = ($1107<<16>>16)==(0);
        do {
         if ($1108) {
          $1109 = ((($pMb$023)) + 156|0);
          $1110 = HEAP16[$1109>>1]|0;
          $1111 = $1110 << 16 >> 16;
          $1112 = ((($pMb$023)) + 160|0);
          $1113 = HEAP16[$1112>>1]|0;
          $1114 = $1113 << 16 >> 16;
          $1115 = (($1114) - ($1111))|0;
          $ispos$i49$i = ($1115|0)>(-1);
          $neg$i50$i = (0 - ($1115))|0;
          $1116 = $ispos$i49$i ? $1115 : $neg$i50$i;
          $1117 = ($1116|0)>(3);
          if ($1117) {
           $1121 = 1;
           break;
          }
          $1118 = (($829) - ($804))|0;
          $ispos2$i51$i = ($1118|0)>(-1);
          $neg3$i52$i = (0 - ($1118))|0;
          $1119 = $ispos2$i51$i ? $1118 : $neg3$i52$i;
          $1120 = ($1119|0)>(3);
          $$316$i = $1120&1;
          $1121 = $$316$i;
         } else {
          $1121 = 2;
         }
        } while(0);
        HEAP32[$31>>2] = $1121;
        $1122 = $873 | $849;
        $1123 = ($1122<<16>>16)==(0);
        do {
         if ($1123) {
          $1124 = ((($pMb$023)) + 164|0);
          $1125 = HEAP16[$1124>>1]|0;
          $1126 = $1125 << 16 >> 16;
          $1127 = ((($pMb$023)) + 168|0);
          $1128 = HEAP16[$1127>>1]|0;
          $1129 = $1128 << 16 >> 16;
          $1130 = (($1129) - ($1126))|0;
          $ispos$i41$i = ($1130|0)>(-1);
          $neg$i42$i = (0 - ($1130))|0;
          $1131 = $ispos$i41$i ? $1130 : $neg$i42$i;
          $1132 = ($1131|0)>(3);
          if ($1132) {
           $1136 = 1;
           break;
          }
          $1133 = (($876) - ($852))|0;
          $ispos2$i43$i = ($1133|0)>(-1);
          $neg3$i44$i = (0 - ($1133))|0;
          $1134 = $ispos2$i43$i ? $1133 : $neg3$i44$i;
          $1135 = ($1134|0)>(3);
          $$317$i = $1135&1;
          $1136 = $$317$i;
         } else {
          $1136 = 2;
         }
        } while(0);
        HEAP32[$30>>2] = $1136;
        $1137 = $897 | $873;
        $1138 = ($1137<<16>>16)==(0);
        do {
         if ($1138) {
          $1139 = ((($pMb$023)) + 168|0);
          $1140 = HEAP16[$1139>>1]|0;
          $1141 = $1140 << 16 >> 16;
          $1142 = ((($pMb$023)) + 180|0);
          $1143 = HEAP16[$1142>>1]|0;
          $1144 = $1143 << 16 >> 16;
          $1145 = (($1144) - ($1141))|0;
          $ispos$i33$i = ($1145|0)>(-1);
          $neg$i34$i = (0 - ($1145))|0;
          $1146 = $ispos$i33$i ? $1145 : $neg$i34$i;
          $1147 = ($1146|0)>(3);
          if ($1147) {
           $1155 = 1;
           break;
          }
          $1148 = (($900) - ($876))|0;
          $ispos2$i35$i = ($1148|0)>(-1);
          $neg3$i36$i = (0 - ($1148))|0;
          $1149 = $ispos2$i35$i ? $1148 : $neg3$i36$i;
          $1150 = ($1149|0)>(3);
          if ($1150) {
           $1155 = 1;
           break;
          }
          $1151 = ((($pMb$023)) + 128|0);
          $1152 = HEAP32[$1151>>2]|0;
          $1153 = ((($pMb$023)) + 124|0);
          $1154 = HEAP32[$1153>>2]|0;
          $not$$i37$i = ($1152|0)!=($1154|0);
          $$$i38$i = $not$$i37$i&1;
          $1155 = $$$i38$i;
         } else {
          $1155 = 2;
         }
        } while(0);
        HEAP32[$29>>2] = $1155;
        $1156 = $921 | $897;
        $1157 = ($1156<<16>>16)==(0);
        do {
         if ($1157) {
          $1158 = ((($pMb$023)) + 180|0);
          $1159 = HEAP16[$1158>>1]|0;
          $1160 = $1159 << 16 >> 16;
          $1161 = ((($pMb$023)) + 184|0);
          $1162 = HEAP16[$1161>>1]|0;
          $1163 = $1162 << 16 >> 16;
          $1164 = (($1163) - ($1160))|0;
          $ispos$i25$i = ($1164|0)>(-1);
          $neg$i26$i = (0 - ($1164))|0;
          $1165 = $ispos$i25$i ? $1164 : $neg$i26$i;
          $1166 = ($1165|0)>(3);
          if ($1166) {
           $1170 = 1;
           break;
          }
          $1167 = (($924) - ($900))|0;
          $ispos2$i27$i = ($1167|0)>(-1);
          $neg3$i28$i = (0 - ($1167))|0;
          $1168 = $ispos2$i27$i ? $1167 : $neg3$i28$i;
          $1169 = ($1168|0)>(3);
          $$318$i = $1169&1;
          $1170 = $$318$i;
         } else {
          $1170 = 2;
         }
        } while(0);
        HEAP32[$28>>2] = $1170;
        $1171 = $965 | $945;
        $1172 = ($1171<<16>>16)==(0);
        do {
         if ($1172) {
          $1173 = ((($pMb$023)) + 172|0);
          $1174 = HEAP16[$1173>>1]|0;
          $1175 = $1174 << 16 >> 16;
          $1176 = ((($pMb$023)) + 176|0);
          $1177 = HEAP16[$1176>>1]|0;
          $1178 = $1177 << 16 >> 16;
          $1179 = (($1178) - ($1175))|0;
          $ispos$i17$i = ($1179|0)>(-1);
          $neg$i18$i = (0 - ($1179))|0;
          $1180 = $ispos$i17$i ? $1179 : $neg$i18$i;
          $1181 = ($1180|0)>(3);
          if ($1181) {
           $1185 = 1;
           break;
          }
          $1182 = (($968) - ($948))|0;
          $ispos2$i19$i = ($1182|0)>(-1);
          $neg3$i20$i = (0 - ($1182))|0;
          $1183 = $ispos2$i19$i ? $1182 : $neg3$i20$i;
          $1184 = ($1183|0)>(3);
          $$319$i = $1184&1;
          $1185 = $$319$i;
         } else {
          $1185 = 2;
         }
        } while(0);
        HEAP32[$27>>2] = $1185;
        $1186 = $985 | $965;
        $1187 = ($1186<<16>>16)==(0);
        do {
         if ($1187) {
          $1188 = ((($pMb$023)) + 176|0);
          $1189 = HEAP16[$1188>>1]|0;
          $1190 = $1189 << 16 >> 16;
          $1191 = ((($pMb$023)) + 188|0);
          $1192 = HEAP16[$1191>>1]|0;
          $1193 = $1192 << 16 >> 16;
          $1194 = (($1193) - ($1190))|0;
          $ispos$i9$i = ($1194|0)>(-1);
          $neg$i10$i = (0 - ($1194))|0;
          $1195 = $ispos$i9$i ? $1194 : $neg$i10$i;
          $1196 = ($1195|0)>(3);
          if ($1196) {
           $1204 = 1;
           break;
          }
          $1197 = (($988) - ($968))|0;
          $ispos2$i11$i = ($1197|0)>(-1);
          $neg3$i12$i = (0 - ($1197))|0;
          $1198 = $ispos2$i11$i ? $1197 : $neg3$i12$i;
          $1199 = ($1198|0)>(3);
          if ($1199) {
           $1204 = 1;
           break;
          }
          $1200 = ((($pMb$023)) + 128|0);
          $1201 = HEAP32[$1200>>2]|0;
          $1202 = ((($pMb$023)) + 124|0);
          $1203 = HEAP32[$1202>>2]|0;
          $not$$i13$i = ($1201|0)!=($1203|0);
          $$$i14$i = $not$$i13$i&1;
          $1204 = $$$i14$i;
         } else {
          $1204 = 2;
         }
        } while(0);
        HEAP32[$26>>2] = $1204;
        $1205 = $1005 | $985;
        $1206 = ($1205<<16>>16)==(0);
        do {
         if ($1206) {
          $1207 = ((($pMb$023)) + 188|0);
          $1208 = HEAP16[$1207>>1]|0;
          $1209 = $1208 << 16 >> 16;
          $1210 = ((($pMb$023)) + 192|0);
          $1211 = HEAP16[$1210>>1]|0;
          $1212 = $1211 << 16 >> 16;
          $1213 = (($1212) - ($1209))|0;
          $ispos$i5$i = ($1213|0)>(-1);
          $neg$i6$i = (0 - ($1213))|0;
          $1214 = $ispos$i5$i ? $1213 : $neg$i6$i;
          $1215 = ($1214|0)>(3);
          if ($1215) {
           $1219 = 1;
           break;
          }
          $1216 = (($1008) - ($988))|0;
          $ispos2$i$i = ($1216|0)>(-1);
          $neg3$i$i = (0 - ($1216))|0;
          $1217 = $ispos2$i$i ? $1216 : $neg3$i$i;
          $1218 = ($1217|0)>(3);
          $$320$i = $1218&1;
          $1219 = $$320$i;
         } else {
          $1219 = 2;
         }
        } while(0);
        HEAP32[$25>>2] = $1219;
        break L89;
       }
       }
      }
     } while(0);
     $1220 = HEAP32[$24>>2]|0;
     $1221 = $nonZeroBs$1$i14 | $1220;
     $1222 = HEAP32[$23>>2]|0;
     $1223 = $1221 | $1222;
     $1224 = HEAP32[$22>>2]|0;
     $1225 = $1223 | $1224;
     $1226 = HEAP32[$21>>2]|0;
     $1227 = $1225 | $1226;
     $1228 = HEAP32[$20>>2]|0;
     $1229 = $1227 | $1228;
     $1230 = HEAP32[$19>>2]|0;
     $1231 = $1229 | $1230;
     $1232 = HEAP32[$18>>2]|0;
     $1233 = $1231 | $1232;
     $1234 = HEAP32[$17>>2]|0;
     $1235 = $1233 | $1234;
     $1236 = HEAP32[$16>>2]|0;
     $1237 = $1235 | $1236;
     $1238 = HEAP32[$15>>2]|0;
     $1239 = $1237 | $1238;
     $1240 = HEAP32[$14>>2]|0;
     $1241 = $1239 | $1240;
     $1242 = HEAP32[$13>>2]|0;
     $1243 = $1241 | $1242;
     $1244 = HEAP32[$36>>2]|0;
     $1245 = $1243 | $1244;
     $1246 = HEAP32[$35>>2]|0;
     $1247 = $1245 | $1246;
     $1248 = HEAP32[$34>>2]|0;
     $1249 = $1247 | $1248;
     $1250 = HEAP32[$33>>2]|0;
     $1251 = $1249 | $1250;
     $1252 = HEAP32[$32>>2]|0;
     $1253 = $1251 | $1252;
     $1254 = HEAP32[$31>>2]|0;
     $1255 = $1253 | $1254;
     $1256 = HEAP32[$30>>2]|0;
     $1257 = $1255 | $1256;
     $1258 = HEAP32[$29>>2]|0;
     $1259 = $1257 | $1258;
     $1260 = HEAP32[$28>>2]|0;
     $1261 = $1259 | $1260;
     $1262 = HEAP32[$27>>2]|0;
     $1263 = $1261 | $1262;
     $1264 = HEAP32[$26>>2]|0;
     $1265 = $1263 | $1264;
     $1266 = HEAP32[$25>>2]|0;
     $1267 = $1265 | $1266;
     $1268 = ($1267|0)==(0);
     if ($1268) {
      break;
     }
    }
    $1269 = ((($pMb$023)) + 20|0);
    $1270 = HEAP32[$1269>>2]|0;
    $1271 = ((($pMb$023)) + 12|0);
    $1272 = HEAP32[$1271>>2]|0;
    $1273 = (($1272) + ($1270))|0;
    $1274 = (_clip(0,51,$1273)|0);
    $1275 = ((($pMb$023)) + 16|0);
    $1276 = HEAP32[$1275>>2]|0;
    $1277 = (($1276) + ($1270))|0;
    $1278 = (_clip(0,51,$1277)|0);
    $1279 = (62544 + ($1274)|0);
    $1280 = HEAP8[$1279>>0]|0;
    $1281 = $1280&255;
    HEAP32[$37>>2] = $1281;
    $1282 = (62596 + ($1278)|0);
    $1283 = HEAP8[$1282>>0]|0;
    $1284 = $1283&255;
    HEAP32[$38>>2] = $1284;
    $1285 = (62648 + (($1274*3)|0)|0);
    HEAP32[$39>>2] = $1285;
    $1286 = $1285;
    do {
     if (!($71)) {
      $1287 = HEAP32[$65>>2]|0;
      $1288 = ((($1287)) + 20|0);
      $1289 = HEAP32[$1288>>2]|0;
      $1290 = ($1289|0)==($1270|0);
      if ($1290) {
       HEAP32[$56>>2] = $1281;
       HEAP32[$57>>2] = $1284;
       HEAP32[$thresholds>>2] = $1286;
       break;
      } else {
       $1291 = (($1270) + 1)|0;
       $1292 = (($1291) + ($1289))|0;
       $1293 = $1292 >>> 1;
       $1294 = HEAP32[$1271>>2]|0;
       $1295 = (($1294) + ($1293))|0;
       $1296 = (_clip(0,51,$1295)|0);
       $1297 = HEAP32[$1275>>2]|0;
       $1298 = (($1297) + ($1293))|0;
       $1299 = (_clip(0,51,$1298)|0);
       $1300 = (62544 + ($1296)|0);
       $1301 = HEAP8[$1300>>0]|0;
       $1302 = $1301&255;
       HEAP32[$56>>2] = $1302;
       $1303 = (62596 + ($1299)|0);
       $1304 = HEAP8[$1303>>0]|0;
       $1305 = $1304&255;
       HEAP32[$57>>2] = $1305;
       $1306 = (62648 + (($1296*3)|0)|0);
       HEAP32[$thresholds>>2] = $1306;
       break;
      }
     }
    } while(0);
    do {
     if (!($200)) {
      $1307 = HEAP32[$61>>2]|0;
      $1308 = ((($1307)) + 20|0);
      $1309 = HEAP32[$1308>>2]|0;
      $1310 = ($1309|0)==($1270|0);
      if ($1310) {
       $1327 = HEAP32[$37>>2]|0;
       HEAP32[$53>>2] = $1327;
       $1328 = HEAP32[$38>>2]|0;
       HEAP32[$54>>2] = $1328;
       $1329 = HEAP32[$39>>2]|0;
       HEAP32[$49>>2] = $1329;
       break;
      } else {
       $1311 = (($1270) + 1)|0;
       $1312 = (($1311) + ($1309))|0;
       $1313 = $1312 >>> 1;
       $1314 = HEAP32[$1271>>2]|0;
       $1315 = (($1314) + ($1313))|0;
       $1316 = (_clip(0,51,$1315)|0);
       $1317 = HEAP32[$1275>>2]|0;
       $1318 = (($1317) + ($1313))|0;
       $1319 = (_clip(0,51,$1318)|0);
       $1320 = (62544 + ($1316)|0);
       $1321 = HEAP8[$1320>>0]|0;
       $1322 = $1321&255;
       HEAP32[$53>>2] = $1322;
       $1323 = (62596 + ($1319)|0);
       $1324 = HEAP8[$1323>>0]|0;
       $1325 = $1324&255;
       HEAP32[$54>>2] = $1325;
       $1326 = (62648 + (($1316*3)|0)|0);
       HEAP32[$55>>2] = $1326;
       break;
      }
     }
    } while(0);
    $1330 = HEAP32[$image>>2]|0;
    $1331 = Math_imul($mbRow$022, $1)|0;
    $1332 = $1331 << 8;
    $1333 = $mbCol$020 << 4;
    $$sum = (($1332) + ($1333))|0;
    $1334 = (($1330) + ($$sum)|0);
    $1561 = 3;$offset$07$i = 0;$ptr$05$i = $1334;$tmp$04$i = $bS;
    while(1) {
     $1335 = ((($tmp$04$i)) + 4|0);
     $1336 = HEAP32[$1335>>2]|0;
     $1337 = ($1336|0)==(0);
     if (!($1337)) {
      _FilterVerLumaEdge($ptr$05$i,$1336,$49,$40);
     }
     $1338 = ((($tmp$04$i)) + 12|0);
     $1339 = HEAP32[$1338>>2]|0;
     $1340 = ($1339|0)==(0);
     if (!($1340)) {
      $1341 = ((($ptr$05$i)) + 4|0);
      _FilterVerLumaEdge($1341,$1339,$48,$40);
     }
     $1342 = ((($tmp$04$i)) + 16|0);
     $1343 = ((($tmp$04$i)) + 20|0);
     $1344 = HEAP32[$1343>>2]|0;
     $1345 = ($1344|0)==(0);
     if (!($1345)) {
      $1346 = ((($ptr$05$i)) + 8|0);
      _FilterVerLumaEdge($1346,$1344,$48,$40);
     }
     $1347 = ((($tmp$04$i)) + 24|0);
     $1348 = ((($tmp$04$i)) + 28|0);
     $1349 = HEAP32[$1348>>2]|0;
     $1350 = ($1349|0)==(0);
     if (!($1350)) {
      $1351 = ((($ptr$05$i)) + 12|0);
      _FilterVerLumaEdge($1351,$1349,$48,$40);
     }
     $1352 = HEAP32[$tmp$04$i>>2]|0;
     $1353 = ((($tmp$04$i)) + 8|0);
     $1354 = HEAP32[$1353>>2]|0;
     $1355 = ($1352|0)==($1354|0);
     L310: do {
      if ($1355) {
       $1356 = HEAP32[$1342>>2]|0;
       $1357 = ($1352|0)==($1356|0);
       if ($1357) {
        $1358 = HEAP32[$1347>>2]|0;
        $1359 = ($1352|0)==($1358|0);
        if ($1359) {
         $1360 = ($1352|0)==(0);
         if (!($1360)) {
          $1361 = (((($thresholds) + (($offset$07$i*12)|0)|0)) + 4|0);
          $1362 = HEAP32[$1361>>2]|0;
          $1363 = (((($thresholds) + (($offset$07$i*12)|0)|0)) + 8|0);
          $1364 = HEAP32[$1363>>2]|0;
          $1365 = ($1352>>>0)<(4);
          if ($1365) {
           $1368 = (($1352) + -1)|0;
           $1369 = (($thresholds) + (($offset$07$i*12)|0)|0);
           $1370 = HEAP32[$1369>>2]|0;
           $1371 = (($1370) + ($1368)|0);
           $1372 = HEAP8[$1371>>0]|0;
           $1373 = $1372&255;
           $1374 = (0 - ($1373))|0;
           $1375 = (($1373) + 1)|0;
           $$025$i$i = $ptr$05$i;$i$024$i$i = 16;
           while(1) {
            $1376 = (($$025$i$i) + ($42)|0);
            $1377 = HEAP8[$1376>>0]|0;
            $1378 = $1377&255;
            $1379 = (($$025$i$i) + ($41)|0);
            $1380 = HEAP8[$1379>>0]|0;
            $1381 = $1380&255;
            $1382 = HEAP8[$$025$i$i>>0]|0;
            $1383 = $1382&255;
            $1384 = (($$025$i$i) + ($40)|0);
            $1385 = HEAP8[$1384>>0]|0;
            $1386 = $1385&255;
            $1387 = (($1381) - ($1383))|0;
            $ispos9$i$i = ($1387|0)>(-1);
            $neg10$i$i = (0 - ($1387))|0;
            $1388 = $ispos9$i$i ? $1387 : $neg10$i$i;
            $1389 = ($1388>>>0)<($1362>>>0);
            do {
             if ($1389) {
              $1390 = (($1378) - ($1381))|0;
              $ispos11$i$i = ($1390|0)>(-1);
              $neg12$i$i = (0 - ($1390))|0;
              $1391 = $ispos11$i$i ? $1390 : $neg12$i$i;
              $1392 = ($1391>>>0)<($1364>>>0);
              if (!($1392)) {
               break;
              }
              $1393 = (($1386) - ($1383))|0;
              $ispos13$i$i = ($1393|0)>(-1);
              $neg14$i$i = (0 - ($1393))|0;
              $1394 = $ispos13$i$i ? $1393 : $neg14$i$i;
              $1395 = ($1394>>>0)<($1364>>>0);
              if (!($1395)) {
               break;
              }
              $1396 = (($$025$i$i) + ($43)|0);
              $1397 = HEAP8[$1396>>0]|0;
              $1398 = $1397&255;
              $1399 = (($1398) - ($1381))|0;
              $ispos15$i$i = ($1399|0)>(-1);
              $neg16$i$i = (0 - ($1399))|0;
              $1400 = $ispos15$i$i ? $1399 : $neg16$i$i;
              $1401 = ($1400>>>0)<($1364>>>0);
              if ($1401) {
               $1402 = (($1381) + 1)|0;
               $1403 = (($1402) + ($1383))|0;
               $1404 = $1403 >>> 1;
               $1405 = $1378 << 1;
               $1406 = (($1404) - ($1405))|0;
               $1407 = (($1406) + ($1398))|0;
               $1408 = $1407 >> 1;
               $1409 = (_clip($1374,$1373,$1408)|0);
               $1410 = (($1409) + ($1378))|0;
               $1411 = $1410&255;
               HEAP8[$1376>>0] = $1411;
               $tmp$1$i$i = $1375;
              } else {
               $tmp$1$i$i = $1373;
              }
              $1412 = (($$025$i$i) + ($44)|0);
              $1413 = HEAP8[$1412>>0]|0;
              $1414 = $1413&255;
              $1415 = (($1414) - ($1383))|0;
              $ispos17$i$i = ($1415|0)>(-1);
              $neg18$i$i = (0 - ($1415))|0;
              $1416 = $ispos17$i$i ? $1415 : $neg18$i$i;
              $1417 = ($1416>>>0)<($1364>>>0);
              if ($1417) {
               $1418 = (($1381) + 1)|0;
               $1419 = (($1418) + ($1383))|0;
               $1420 = $1419 >>> 1;
               $1421 = $1386 << 1;
               $1422 = (($1420) - ($1421))|0;
               $1423 = (($1422) + ($1414))|0;
               $1424 = $1423 >> 1;
               $1425 = (_clip($1374,$1373,$1424)|0);
               $1426 = (($1425) + ($1386))|0;
               $1427 = $1426&255;
               HEAP8[$1384>>0] = $1427;
               $1428 = (($tmp$1$i$i) + 1)|0;
               $tmp$2$i$i = $1428;
              } else {
               $tmp$2$i$i = $tmp$1$i$i;
              }
              $1429 = (($1383) - ($1381))|0;
              $1430 = $1429 << 2;
              $1431 = (($1378) + 4)|0;
              $1432 = (($1431) - ($1386))|0;
              $1433 = (($1432) + ($1430))|0;
              $1434 = $1433 >> 3;
              $1435 = (0 - ($tmp$2$i$i))|0;
              $1436 = (_clip($1435,$tmp$2$i$i,$1434)|0);
              $1437 = $1381 | 512;
              $$sum$i$i = (($1436) + ($1437))|0;
              $1438 = (60442 + ($$sum$i$i)|0);
              $1439 = HEAP8[$1438>>0]|0;
              $1440 = $1383 | 512;
              $$sum19$i$i = (($1440) - ($1436))|0;
              $1441 = (60442 + ($$sum19$i$i)|0);
              $1442 = HEAP8[$1441>>0]|0;
              HEAP8[$1379>>0] = $1439;
              HEAP8[$$025$i$i>>0] = $1442;
             }
            } while(0);
            $1443 = (($i$024$i$i) + -1)|0;
            $1444 = ((($$025$i$i)) + 1|0);
            $1445 = ($1443|0)==(0);
            if ($1445) {
             break L310;
            } else {
             $$025$i$i = $1444;$i$024$i$i = $1443;
            }
           }
          }
          $1366 = $1362 >>> 2;
          $1367 = (($1366) + 2)|0;
          $$128$i$i = $ptr$05$i;$i$127$i$i = 16;
          while(1) {
           $1446 = (($$128$i$i) + ($42)|0);
           $1447 = HEAP8[$1446>>0]|0;
           $1448 = $1447&255;
           $1449 = (($$128$i$i) + ($41)|0);
           $1450 = HEAP8[$1449>>0]|0;
           $1451 = $1450&255;
           $1452 = HEAP8[$$128$i$i>>0]|0;
           $1453 = $1452&255;
           $1454 = (($$128$i$i) + ($40)|0);
           $1455 = HEAP8[$1454>>0]|0;
           $1456 = $1455&255;
           $1457 = (($1451) - ($1453))|0;
           $ispos$i$i5 = ($1457|0)>(-1);
           $neg$i$i6 = (0 - ($1457))|0;
           $1458 = $ispos$i$i5 ? $1457 : $neg$i$i6;
           $1459 = ($1458>>>0)<($1362>>>0);
           L333: do {
            if ($1459) {
             $1460 = (($1448) - ($1451))|0;
             $ispos1$i$i7 = ($1460|0)>(-1);
             $neg2$i$i8 = (0 - ($1460))|0;
             $1461 = $ispos1$i$i7 ? $1460 : $neg2$i$i8;
             $1462 = ($1461>>>0)<($1364>>>0);
             if (!($1462)) {
              break;
             }
             $1463 = (($1456) - ($1453))|0;
             $ispos3$i$i = ($1463|0)>(-1);
             $neg4$i$i = (0 - ($1463))|0;
             $1464 = $ispos3$i$i ? $1463 : $neg4$i$i;
             $1465 = ($1464>>>0)<($1364>>>0);
             if (!($1465)) {
              break;
             }
             $1466 = ($1458>>>0)<($1367>>>0);
             $1467 = (($$128$i$i) + ($43)|0);
             $1468 = HEAP8[$1467>>0]|0;
             $1469 = $1468&255;
             $1470 = (($$128$i$i) + ($44)|0);
             $1471 = HEAP8[$1470>>0]|0;
             $1472 = $1471&255;
             do {
              if ($1466) {
               $1473 = (($1469) - ($1451))|0;
               $ispos7$i$i = ($1473|0)>(-1);
               $neg8$i$i = (0 - ($1473))|0;
               $1474 = $ispos7$i$i ? $1473 : $neg8$i$i;
               $1475 = ($1474>>>0)<($1364>>>0);
               if ($1475) {
                $1476 = (($1451) + ($1448))|0;
                $1477 = (($1476) + ($1453))|0;
                $1478 = $1477 << 1;
                $1479 = (($1456) + 4)|0;
                $1480 = (($1479) + ($1478))|0;
                $1481 = (($1480) + ($1469))|0;
                $1482 = $1481 >>> 3;
                $1483 = $1482&255;
                HEAP8[$1449>>0] = $1483;
                $1484 = (($1477) + 2)|0;
                $1485 = (($1484) + ($1469))|0;
                $1486 = $1485 >>> 2;
                $1487 = $1486&255;
                HEAP8[$1446>>0] = $1487;
                $1488 = (($$128$i$i) + ($45)|0);
                $1489 = HEAP8[$1488>>0]|0;
                $1490 = $1489&255;
                $1491 = $1490 << 1;
                $1492 = ($1469*3)|0;
                $1493 = (($1477) + 4)|0;
                $1494 = (($1493) + ($1492))|0;
                $1495 = (($1494) + ($1491))|0;
                $1496 = $1495 >>> 3;
                $1497 = $1496&255;
                HEAP8[$1467>>0] = $1497;
               } else {
                $1498 = $1448 << 1;
                $1499 = (($1451) + 2)|0;
                $1500 = (($1499) + ($1498))|0;
                $1501 = (($1500) + ($1456))|0;
                $1502 = $1501 >>> 2;
                $1503 = $1502&255;
                HEAP8[$1449>>0] = $1503;
               }
               $1504 = (($1472) - ($1453))|0;
               $ispos5$i$i = ($1504|0)>(-1);
               $neg6$i$i = (0 - ($1504))|0;
               $1505 = $ispos5$i$i ? $1504 : $neg6$i$i;
               $1506 = ($1505>>>0)<($1364>>>0);
               if (!($1506)) {
                break;
               }
               $1507 = (($1453) + ($1451))|0;
               $1508 = (($1507) + ($1456))|0;
               $1509 = $1508 << 1;
               $1510 = (($1448) + 4)|0;
               $1511 = (($1510) + ($1509))|0;
               $1512 = (($1511) + ($1472))|0;
               $1513 = $1512 >>> 3;
               $1514 = $1513&255;
               HEAP8[$$128$i$i>>0] = $1514;
               $1515 = (($1508) + 2)|0;
               $1516 = (($1515) + ($1472))|0;
               $1517 = $1516 >>> 2;
               $1518 = $1517&255;
               HEAP8[$1454>>0] = $1518;
               $1519 = (($$128$i$i) + ($46)|0);
               $1520 = HEAP8[$1519>>0]|0;
               $1521 = $1520&255;
               $1522 = $1521 << 1;
               $1523 = ($1472*3)|0;
               $1524 = (($1508) + 4)|0;
               $1525 = (($1524) + ($1523))|0;
               $1526 = (($1525) + ($1522))|0;
               $1527 = $1526 >>> 3;
               $1528 = $1527&255;
               HEAP8[$1470>>0] = $1528;
               break L333;
              } else {
               $1529 = $1448 << 1;
               $1530 = (($1451) + 2)|0;
               $1531 = (($1530) + ($1529))|0;
               $1532 = (($1531) + ($1456))|0;
               $1533 = $1532 >>> 2;
               $1534 = $1533&255;
               HEAP8[$1449>>0] = $1534;
              }
             } while(0);
             $1535 = $1456 << 1;
             $1536 = (($1448) + 2)|0;
             $1537 = (($1536) + ($1453))|0;
             $1538 = (($1537) + ($1535))|0;
             $1539 = $1538 >>> 2;
             $1540 = $1539&255;
             HEAP8[$$128$i$i>>0] = $1540;
            }
           } while(0);
           $1541 = (($i$127$i$i) + -1)|0;
           $1542 = ((($$128$i$i)) + 1|0);
           $1543 = ($1541|0)==(0);
           if ($1543) {
            break;
           } else {
            $$128$i$i = $1542;$i$127$i$i = $1541;
           }
          }
         }
        } else {
         label = 259;
        }
       } else {
        label = 259;
       }
      } else {
       label = 259;
      }
     } while(0);
     do {
      if ((label|0) == 259) {
       label = 0;
       $1544 = ($1352|0)==(0);
       if ($1544) {
        $1546 = $1354;
       } else {
        $1545 = (($thresholds) + (($offset$07$i*12)|0)|0);
        _FilterHorLumaEdge($ptr$05$i,$1352,$1545,$40);
        $$pre$i10 = HEAP32[$1353>>2]|0;
        $1546 = $$pre$i10;
       }
       $1547 = ($1546|0)==(0);
       if (!($1547)) {
        $1548 = ((($ptr$05$i)) + 4|0);
        $1549 = (($thresholds) + (($offset$07$i*12)|0)|0);
        _FilterHorLumaEdge($1548,$1546,$1549,$40);
       }
       $1550 = HEAP32[$1342>>2]|0;
       $1551 = ($1550|0)==(0);
       if (!($1551)) {
        $1552 = ((($ptr$05$i)) + 8|0);
        $1553 = (($thresholds) + (($offset$07$i*12)|0)|0);
        _FilterHorLumaEdge($1552,$1550,$1553,$40);
       }
       $1554 = HEAP32[$1347>>2]|0;
       $1555 = ($1554|0)==(0);
       if ($1555) {
        break;
       }
       $1556 = ((($ptr$05$i)) + 12|0);
       $1557 = (($thresholds) + (($offset$07$i*12)|0)|0);
       _FilterHorLumaEdge($1556,$1554,$1557,$40);
      }
     } while(0);
     $1558 = (($ptr$05$i) + ($47)|0);
     $1559 = ((($tmp$04$i)) + 32|0);
     $1560 = (($1561) + -1)|0;
     $1562 = ($1561|0)==(0);
     if ($1562) {
      break;
     } else {
      $1561 = $1560;$offset$07$i = 2;$ptr$05$i = $1558;$tmp$04$i = $1559;
     }
    }
    $1563 = ((($pMb$023)) + 24|0);
    $1564 = HEAP32[$1563>>2]|0;
    $1565 = HEAP32[$1269>>2]|0;
    $1566 = (($1565) + ($1564))|0;
    $1567 = (_clip(0,51,$1566)|0);
    $1568 = (2616 + ($1567<<2)|0);
    $1569 = HEAP32[$1568>>2]|0;
    $1570 = HEAP32[$1271>>2]|0;
    $1571 = (($1570) + ($1569))|0;
    $1572 = (_clip(0,51,$1571)|0);
    $1573 = HEAP32[$1275>>2]|0;
    $1574 = (($1573) + ($1569))|0;
    $1575 = (_clip(0,51,$1574)|0);
    $1576 = (62544 + ($1572)|0);
    $1577 = HEAP8[$1576>>0]|0;
    $1578 = $1577&255;
    HEAP32[$37>>2] = $1578;
    $1579 = (62596 + ($1575)|0);
    $1580 = HEAP8[$1579>>0]|0;
    $1581 = $1580&255;
    HEAP32[$38>>2] = $1581;
    $1582 = (62648 + (($1572*3)|0)|0);
    HEAP32[$39>>2] = $1582;
    $1583 = $1582;
    do {
     if (!($71)) {
      $1584 = HEAP32[$65>>2]|0;
      $1585 = ((($1584)) + 20|0);
      $1586 = HEAP32[$1585>>2]|0;
      $1587 = HEAP32[$1269>>2]|0;
      $1588 = ($1586|0)==($1587|0);
      if ($1588) {
       HEAP32[$56>>2] = $1578;
       HEAP32[$57>>2] = $1581;
       HEAP32[$thresholds>>2] = $1583;
       break;
      } else {
       $1589 = (($1586) + ($1564))|0;
       $1590 = (_clip(0,51,$1589)|0);
       $1591 = (2616 + ($1590<<2)|0);
       $1592 = HEAP32[$1591>>2]|0;
       $1593 = (($1569) + 1)|0;
       $1594 = (($1593) + ($1592))|0;
       $1595 = $1594 >>> 1;
       $1596 = HEAP32[$1271>>2]|0;
       $1597 = (($1595) + ($1596))|0;
       $1598 = (_clip(0,51,$1597)|0);
       $1599 = HEAP32[$1275>>2]|0;
       $1600 = (($1599) + ($1595))|0;
       $1601 = (_clip(0,51,$1600)|0);
       $1602 = (62544 + ($1598)|0);
       $1603 = HEAP8[$1602>>0]|0;
       $1604 = $1603&255;
       HEAP32[$56>>2] = $1604;
       $1605 = (62596 + ($1601)|0);
       $1606 = HEAP8[$1605>>0]|0;
       $1607 = $1606&255;
       HEAP32[$57>>2] = $1607;
       $1608 = (62648 + (($1598*3)|0)|0);
       HEAP32[$thresholds>>2] = $1608;
       break;
      }
     }
    } while(0);
    do {
     if (!($200)) {
      $1609 = HEAP32[$61>>2]|0;
      $1610 = ((($1609)) + 20|0);
      $1611 = HEAP32[$1610>>2]|0;
      $1612 = HEAP32[$1269>>2]|0;
      $1613 = ($1611|0)==($1612|0);
      if ($1613) {
       $1634 = HEAP32[$37>>2]|0;
       HEAP32[$53>>2] = $1634;
       $1635 = HEAP32[$38>>2]|0;
       HEAP32[$54>>2] = $1635;
       $1636 = HEAP32[$39>>2]|0;
       HEAP32[$49>>2] = $1636;
       break;
      } else {
       $1614 = (($1611) + ($1564))|0;
       $1615 = (_clip(0,51,$1614)|0);
       $1616 = (2616 + ($1615<<2)|0);
       $1617 = HEAP32[$1616>>2]|0;
       $1618 = (($1569) + 1)|0;
       $1619 = (($1618) + ($1617))|0;
       $1620 = $1619 >>> 1;
       $1621 = HEAP32[$1271>>2]|0;
       $1622 = (($1620) + ($1621))|0;
       $1623 = (_clip(0,51,$1622)|0);
       $1624 = HEAP32[$1275>>2]|0;
       $1625 = (($1624) + ($1620))|0;
       $1626 = (_clip(0,51,$1625)|0);
       $1627 = (62544 + ($1623)|0);
       $1628 = HEAP8[$1627>>0]|0;
       $1629 = $1628&255;
       HEAP32[$53>>2] = $1629;
       $1630 = (62596 + ($1626)|0);
       $1631 = HEAP8[$1630>>0]|0;
       $1632 = $1631&255;
       HEAP32[$54>>2] = $1632;
       $1633 = (62648 + (($1623*3)|0)|0);
       HEAP32[$55>>2] = $1633;
       break;
      }
     }
    } while(0);
    $1637 = HEAP32[$image>>2]|0;
    $1638 = $1331 << 6;
    $1639 = $mbCol$020 << 3;
    $$sum1 = (($1639) + ($50))|0;
    $$sum2 = (($$sum1) + ($1638))|0;
    $1640 = (($1637) + ($$sum2)|0);
    $$sum3 = (($$sum2) + ($51))|0;
    $1641 = (($1637) + ($$sum3)|0);
    $$013$i = $1641;$$05$i = $1640;$offset$010$i = 0;$tmp$08$i = $bS;$vblock$07$i = 0;
    while(1) {
     $1642 = ((($tmp$08$i)) + 4|0);
     $1643 = HEAP32[$1642>>2]|0;
     $1644 = ($1643|0)==(0);
     if (!($1644)) {
      _FilterVerChromaEdge($$05$i,$1643,$49,$52);
      $1645 = HEAP32[$1642>>2]|0;
      _FilterVerChromaEdge($$013$i,$1645,$49,$52);
     }
     $1646 = ((($tmp$08$i)) + 36|0);
     $1647 = HEAP32[$1646>>2]|0;
     $1648 = ($1647|0)==(0);
     if (!($1648)) {
      $1649 = (($$05$i) + ($40)|0);
      _FilterVerChromaEdge($1649,$1647,$49,$52);
      $1650 = (($$013$i) + ($40)|0);
      $1651 = HEAP32[$1646>>2]|0;
      _FilterVerChromaEdge($1650,$1651,$49,$52);
     }
     $1652 = ((($tmp$08$i)) + 16|0);
     $1653 = ((($tmp$08$i)) + 20|0);
     $1654 = HEAP32[$1653>>2]|0;
     $1655 = ($1654|0)==(0);
     if (!($1655)) {
      $1656 = ((($$05$i)) + 4|0);
      _FilterVerChromaEdge($1656,$1654,$48,$52);
      $1657 = ((($$013$i)) + 4|0);
      $1658 = HEAP32[$1653>>2]|0;
      _FilterVerChromaEdge($1657,$1658,$48,$52);
     }
     $1659 = ((($tmp$08$i)) + 52|0);
     $1660 = HEAP32[$1659>>2]|0;
     $1661 = ($1660|0)==(0);
     if (!($1661)) {
      $1662 = (($$05$i) + ($$sum$i16)|0);
      _FilterVerChromaEdge($1662,$1660,$48,$52);
      $1663 = (($$013$i) + ($$sum$i16)|0);
      $1664 = HEAP32[$1659>>2]|0;
      _FilterVerChromaEdge($1663,$1664,$48,$52);
     }
     $1665 = HEAP32[$tmp$08$i>>2]|0;
     $1666 = ((($tmp$08$i)) + 8|0);
     $1667 = HEAP32[$1666>>2]|0;
     $1668 = ($1665|0)==($1667|0);
     do {
      if ($1668) {
       $1669 = HEAP32[$1652>>2]|0;
       $1670 = ($1665|0)==($1669|0);
       if ($1670) {
        $1671 = ((($tmp$08$i)) + 24|0);
        $1672 = HEAP32[$1671>>2]|0;
        $1673 = ($1665|0)==($1672|0);
        if (!($1673)) {
         label = 290;
         break;
        }
        $1674 = ($1665|0)==(0);
        if ($1674) {
         break;
        }
        $1675 = (($thresholds) + (($offset$010$i*12)|0)|0);
        _FilterHorChroma($$05$i,$1665,$1675,$52);
        $1676 = HEAP32[$tmp$08$i>>2]|0;
        _FilterHorChroma($$013$i,$1676,$1675,$52);
       } else {
        label = 290;
       }
      } else {
       label = 290;
      }
     } while(0);
     do {
      if ((label|0) == 290) {
       label = 0;
       $1677 = ($1665|0)==(0);
       if ($1677) {
        $1680 = $1667;
       } else {
        $1678 = (($thresholds) + (($offset$010$i*12)|0)|0);
        _FilterHorChromaEdge($$05$i,$1665,$1678,$52);
        $1679 = HEAP32[$tmp$08$i>>2]|0;
        _FilterHorChromaEdge($$013$i,$1679,$1678,$52);
        $$pre$i = HEAP32[$1666>>2]|0;
        $1680 = $$pre$i;
       }
       $1681 = ($1680|0)==(0);
       if (!($1681)) {
        $1682 = ((($$05$i)) + 2|0);
        $1683 = (($thresholds) + (($offset$010$i*12)|0)|0);
        _FilterHorChromaEdge($1682,$1680,$1683,$52);
        $1684 = ((($$013$i)) + 2|0);
        $1685 = HEAP32[$1666>>2]|0;
        _FilterHorChromaEdge($1684,$1685,$1683,$52);
       }
       $1686 = HEAP32[$1652>>2]|0;
       $1687 = ($1686|0)==(0);
       if (!($1687)) {
        $1688 = ((($$05$i)) + 4|0);
        $1689 = (($thresholds) + (($offset$010$i*12)|0)|0);
        _FilterHorChromaEdge($1688,$1686,$1689,$52);
        $1690 = ((($$013$i)) + 4|0);
        $1691 = HEAP32[$1652>>2]|0;
        _FilterHorChromaEdge($1690,$1691,$1689,$52);
       }
       $1692 = ((($tmp$08$i)) + 24|0);
       $1693 = HEAP32[$1692>>2]|0;
       $1694 = ($1693|0)==(0);
       if ($1694) {
        break;
       }
       $1695 = ((($$05$i)) + 6|0);
       $1696 = (($thresholds) + (($offset$010$i*12)|0)|0);
       _FilterHorChromaEdge($1695,$1693,$1696,$52);
       $1697 = ((($$013$i)) + 6|0);
       $1698 = HEAP32[$1692>>2]|0;
       _FilterHorChromaEdge($1697,$1698,$1696,$52);
      }
     } while(0);
     $1699 = ((($tmp$08$i)) + 64|0);
     $1700 = (($$05$i) + ($44)|0);
     $1701 = (($$013$i) + ($44)|0);
     $1702 = (($vblock$07$i) + 1)|0;
     $exitcond$i = ($1702|0)==(2);
     if ($exitcond$i) {
      break;
     } else {
      $$013$i = $1701;$$05$i = $1700;$offset$010$i = 2;$tmp$08$i = $1699;$vblock$07$i = $1702;
     }
    }
   }
  } while(0);
  $1703 = (($mbCol$020) + 1)|0;
  $1704 = ($1703|0)==($1|0);
  $$ = $1704 ? 0 : $1703;
  $1705 = $1704&1;
  $$mbRow$0 = (($1705) + ($mbRow$022))|0;
  $1706 = ((($pMb$023)) + 216|0);
  $1707 = HEAP32[$2>>2]|0;
  $1708 = ($$mbRow$0>>>0)<($1707>>>0);
  if ($1708) {
   $mbCol$020 = $$;$mbRow$022 = $$mbRow$0;$pMb$023 = $1706;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _GetBoundaryStrengthsA($mb,$bS) {
 $mb = $mb|0;
 $bS = $bS|0;
 var $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $not$21 = 0, $not$22 = 0, $phitmp = 0, $phitmp1 = 0, $phitmp10 = 0, $phitmp11 = 0, $phitmp12 = 0, $phitmp13 = 0, $phitmp14 = 0, $phitmp15 = 0;
 var $phitmp17 = 0, $phitmp18 = 0, $phitmp19 = 0, $phitmp2 = 0, $phitmp20 = 0, $phitmp3 = 0, $phitmp4 = 0, $phitmp5 = 0, $phitmp6 = 0, $phitmp7 = 0, $phitmp8 = 0, $phitmp9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($mb)) + 28|0);
 $1 = ((($mb)) + 32|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $4 = HEAP16[$0>>1]|0;
  $5 = ($4<<16>>16)!=(0);
  $phitmp17 = $5 ? 2 : 0;
  $7 = $phitmp17;
 } else {
  $7 = 2;
 }
 $6 = ((($bS)) + 32|0);
 HEAP32[$6>>2] = $7;
 $8 = ((($mb)) + 34|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  $11 = ((($mb)) + 30|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($12<<16>>16)!=(0);
  $phitmp18 = $13 ? 2 : 0;
  $15 = $phitmp18;
 } else {
  $15 = 2;
 }
 $14 = ((($bS)) + 40|0);
 HEAP32[$14>>2] = $15;
 $16 = ((($mb)) + 40|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = ($17<<16>>16)==(0);
 if ($18) {
  $19 = ((($mb)) + 36|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = ($20<<16>>16)!=(0);
  $phitmp19 = $21 ? 2 : 0;
  $23 = $phitmp19;
 } else {
  $23 = 2;
 }
 $22 = ((($bS)) + 48|0);
 HEAP32[$22>>2] = $23;
 $24 = ((($mb)) + 42|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = ($25<<16>>16)==(0);
 if ($26) {
  $27 = ((($mb)) + 38|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = ($28<<16>>16)!=(0);
  $phitmp20 = $29 ? 2 : 0;
  $31 = $phitmp20;
 } else {
  $31 = 2;
 }
 $30 = ((($bS)) + 56|0);
 HEAP32[$30>>2] = $31;
 $32 = ((($mb)) + 44|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $2 | $33;
 $35 = ($34<<16>>16)!=(0);
 $36 = $35 ? 2 : 0;
 $37 = ((($bS)) + 64|0);
 HEAP32[$37>>2] = $36;
 $38 = ((($mb)) + 46|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = ($39<<16>>16)==(0);
 $41 = ($9<<16>>16)!=(0);
 $not$ = $40 ^ 1;
 $42 = $41 | $not$;
 $43 = $42 ? 2 : 0;
 $44 = ((($bS)) + 72|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($mb)) + 52|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = ($46<<16>>16)==(0);
 $48 = ($17<<16>>16)!=(0);
 $not$21 = $47 ^ 1;
 $$16 = $48 | $not$21;
 $49 = $$16 ? 2 : 0;
 $50 = ((($bS)) + 80|0);
 HEAP32[$50>>2] = $49;
 $51 = ((($mb)) + 54|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = ($52<<16>>16)==(0);
 $54 = ($25<<16>>16)!=(0);
 $not$22 = $53 ^ 1;
 $55 = $54 | $not$22;
 $56 = $55 ? 2 : 0;
 $57 = ((($bS)) + 88|0);
 HEAP32[$57>>2] = $56;
 $58 = ((($mb)) + 48|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = ($59<<16>>16)==(0);
 $61 = ($33<<16>>16)!=(0);
 $phitmp = $61 ? 2 : 0;
 $62 = $60 ? $phitmp : 2;
 $63 = ((($bS)) + 96|0);
 HEAP32[$63>>2] = $62;
 $64 = ((($mb)) + 50|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = ($65<<16>>16)==(0);
 $67 = ($39<<16>>16)!=(0);
 $phitmp1 = $67 ? 2 : 0;
 $68 = $66 ? $phitmp1 : 2;
 $69 = ((($bS)) + 104|0);
 HEAP32[$69>>2] = $68;
 $70 = ((($mb)) + 56|0);
 $71 = HEAP16[$70>>1]|0;
 $72 = ($71<<16>>16)==(0);
 $73 = ($46<<16>>16)!=(0);
 $phitmp2 = $73 ? 2 : 0;
 $74 = $72 ? $phitmp2 : 2;
 $75 = ((($bS)) + 112|0);
 HEAP32[$75>>2] = $74;
 $76 = ((($mb)) + 58|0);
 $77 = HEAP16[$76>>1]|0;
 $78 = ($77<<16>>16)==(0);
 $79 = ($52<<16>>16)!=(0);
 $phitmp3 = $79 ? 2 : 0;
 $80 = $78 ? $phitmp3 : 2;
 $81 = ((($bS)) + 120|0);
 HEAP32[$81>>2] = $80;
 $82 = ((($mb)) + 30|0);
 $83 = HEAP16[$82>>1]|0;
 $84 = ($83<<16>>16)==(0);
 if ($84) {
  $85 = HEAP16[$0>>1]|0;
  $86 = ($85<<16>>16)!=(0);
  $phitmp4 = $86 ? 2 : 0;
  $88 = $phitmp4;
 } else {
  $88 = 2;
 }
 $87 = ((($bS)) + 12|0);
 HEAP32[$87>>2] = $88;
 $89 = ((($mb)) + 36|0);
 $90 = HEAP16[$89>>1]|0;
 $91 = ($90<<16>>16)==(0);
 $92 = ($83<<16>>16)!=(0);
 $phitmp5 = $92 ? 2 : 0;
 $93 = $91 ? $phitmp5 : 2;
 $94 = ((($bS)) + 20|0);
 HEAP32[$94>>2] = $93;
 $95 = ((($mb)) + 38|0);
 $96 = HEAP16[$95>>1]|0;
 $97 = ($96<<16>>16)==(0);
 $98 = ($90<<16>>16)!=(0);
 $phitmp6 = $98 ? 2 : 0;
 $99 = $97 ? $phitmp6 : 2;
 $100 = ((($bS)) + 28|0);
 HEAP32[$100>>2] = $99;
 $101 = ($2<<16>>16)!=(0);
 $phitmp7 = $101 ? 2 : 0;
 $102 = $10 ? $phitmp7 : 2;
 $103 = ((($bS)) + 44|0);
 HEAP32[$103>>2] = $102;
 $104 = ($9<<16>>16)!=(0);
 $phitmp8 = $104 ? 2 : 0;
 $105 = $18 ? $phitmp8 : 2;
 $106 = ((($bS)) + 52|0);
 HEAP32[$106>>2] = $105;
 $107 = ($17<<16>>16)!=(0);
 $phitmp9 = $107 ? 2 : 0;
 $108 = $26 ? $phitmp9 : 2;
 $109 = ((($bS)) + 60|0);
 HEAP32[$109>>2] = $108;
 $110 = ($33<<16>>16)!=(0);
 $phitmp10 = $110 ? 2 : 0;
 $111 = $40 ? $phitmp10 : 2;
 $112 = ((($bS)) + 76|0);
 HEAP32[$112>>2] = $111;
 $113 = ($39<<16>>16)!=(0);
 $phitmp11 = $113 ? 2 : 0;
 $114 = $47 ? $phitmp11 : 2;
 $115 = ((($bS)) + 84|0);
 HEAP32[$115>>2] = $114;
 $116 = ($46<<16>>16)!=(0);
 $phitmp12 = $116 ? 2 : 0;
 $117 = $53 ? $phitmp12 : 2;
 $118 = ((($bS)) + 92|0);
 HEAP32[$118>>2] = $117;
 $119 = ($59<<16>>16)!=(0);
 $phitmp13 = $119 ? 2 : 0;
 $120 = $66 ? $phitmp13 : 2;
 $121 = ((($bS)) + 108|0);
 HEAP32[$121>>2] = $120;
 $122 = ($65<<16>>16)!=(0);
 $phitmp14 = $122 ? 2 : 0;
 $123 = $72 ? $phitmp14 : 2;
 $124 = ((($bS)) + 116|0);
 HEAP32[$124>>2] = $123;
 $125 = ($71<<16>>16)!=(0);
 $phitmp15 = $125 ? 2 : 0;
 $126 = $78 ? $phitmp15 : 2;
 $127 = ((($bS)) + 124|0);
 HEAP32[$127>>2] = $126;
 return;
}
function _h264bsdConceal($pStorage,$currImage,$sliceType) {
 $pStorage = $pStorage|0;
 $currImage = $currImage|0;
 $sliceType = $sliceType|0;
 var $$ = 0, $$in = 0, $$old6 = 0, $$row$0 = 0, $$sum$us = 0, $$sum10 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $col$0$lcssa = 0, $col$032 = 0;
 var $exitcond = 0, $exitcond48 = 0, $exitcond49 = 0, $exitcond50 = 0, $i$0 = 0, $i$1$lcssa = 0, $i$133 = 0, $i$218 = 0, $i$3 = 0, $i$4$in$ph = 0, $i$4$us = 0, $i$421 = 0, $i$422$us = 0, $j$1 = 0, $j$126 = 0, $j$127 = 0, $j$224 = 0, $j$319$us = 0, $mb$0 = 0, $or$cond3 = 0;
 var $or$cond7 = 0, $refData$0 = 0, $row$0$lcssa = 0, $row$031 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($currImage)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($currImage)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($sliceType|0) {
 case 0: case 5:  {
  label = 3;
  break;
 }
 default: {
  $4 = ((($pStorage)) + 3384|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $refData$0 = 0;
  } else {
   label = 3;
  }
 }
 }
 if ((label|0) == 3) {
  $7 = ((($pStorage)) + 1220|0);
  $i$0 = 0;
  while(1) {
   $8 = (_h264bsdGetRefPicData($7,$i$0)|0);
   $9 = (($i$0) + 1)|0;
   $10 = ($9>>>0)<(16);
   $11 = ($8|0)==(0|0);
   $or$cond3 = $10 & $11;
   if ($or$cond3) {
    $i$0 = $9;
   } else {
    $refData$0 = $8;
    break;
   }
  }
 }
 $12 = ((($pStorage)) + 1176|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 L8: do {
  if ($14) {
   $col$0$lcssa = 0;$i$1$lcssa = 0;$row$0$lcssa = 0;
  } else {
   $15 = ((($pStorage)) + 1212|0);
   $16 = HEAP32[$15>>2]|0;
   $col$032 = 0;$i$133 = 0;$row$031 = 0;
   while(1) {
    $17 = (((($16) + (($i$133*216)|0)|0)) + 196|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0);
    if (!($19)) {
     $col$0$lcssa = $col$032;$i$1$lcssa = $i$133;$row$0$lcssa = $row$031;
     break L8;
    }
    $20 = (($i$133) + 1)|0;
    $21 = (($col$032) + 1)|0;
    $22 = ($21|0)==($1|0);
    $23 = $22&1;
    $$row$0 = (($23) + ($row$031))|0;
    $$ = $22 ? 0 : $21;
    $24 = ($20>>>0)<($13>>>0);
    if ($24) {
     $col$032 = $$;$i$133 = $20;$row$031 = $$row$0;
    } else {
     $col$0$lcssa = $$;$i$1$lcssa = $20;$row$0$lcssa = $$row$0;
     break;
    }
   }
  }
 } while(0);
 $25 = ($i$1$lcssa|0)==($13|0);
 if ($25) {
  switch ($sliceType|0) {
  case 2: case 7:  {
   $26 = ((($pStorage)) + 3384|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0);
   $29 = ($refData$0|0)==(0|0);
   $or$cond7 = $29 | $28;
   if ($or$cond7) {
    label = 13;
   } else {
    label = 14;
   }
   break;
  }
  default: {
   $$old6 = ($refData$0|0)==(0|0);
   if ($$old6) {
    label = 13;
   } else {
    label = 14;
   }
  }
  }
  if ((label|0) == 13) {
   $30 = HEAP32[$currImage>>2]|0;
   $31 = ($1*384)|0;
   $32 = Math_imul($31, $3)|0;
   _H264SwDecMemset($30,128,$32);
  }
  else if ((label|0) == 14) {
   $33 = HEAP32[$currImage>>2]|0;
   $34 = ($1*384)|0;
   $35 = Math_imul($34, $3)|0;
   _H264SwDecMemcpy($33,$refData$0,$35);
  }
  $36 = HEAP32[$12>>2]|0;
  $37 = ((($pStorage)) + 1204|0);
  HEAP32[$37>>2] = $36;
  $38 = ($36|0)==(0);
  if ($38) {
   return 0;
  }
  $39 = ((($pStorage)) + 1212|0);
  $40 = HEAP32[$39>>2]|0;
  $i$218 = 0;
  while(1) {
   $41 = (((($40) + (($i$218*216)|0)|0)) + 8|0);
   HEAP32[$41>>2] = 1;
   $42 = (($i$218) + 1)|0;
   $43 = ($42>>>0)<($36>>>0);
   if ($43) {
    $i$218 = $42;
   } else {
    break;
   }
  }
  return 0;
 }
 $44 = ((($pStorage)) + 1212|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = Math_imul($row$0$lcssa, $1)|0;
 $47 = ($col$0$lcssa|0)==(0);
 if (!($47)) {
  $48 = ((($pStorage)) + 1204|0);
  $$in = $col$0$lcssa;
  while(1) {
   $51 = (($$in) + -1)|0;
   $$sum10 = (($51) + ($46))|0;
   $52 = (($45) + (($$sum10*216)|0)|0);
   _ConcealMb($52,$currImage,$row$0$lcssa,$51,$sliceType,$refData$0);
   $53 = (((($45) + (($$sum10*216)|0)|0)) + 196|0);
   HEAP32[$53>>2] = 1;
   $54 = HEAP32[$48>>2]|0;
   $55 = (($54) + 1)|0;
   HEAP32[$48>>2] = $55;
   $56 = ($51|0)==(0);
   if ($56) {
    break;
   } else {
    $$in = $51;
   }
  }
 }
 $j$126 = (($col$0$lcssa) + 1)|0;
 $49 = ($j$126>>>0)<($1>>>0);
 if ($49) {
  $50 = ((($pStorage)) + 1204|0);
  $j$127 = $j$126;
  while(1) {
   $$sum9 = (($j$127) + ($46))|0;
   $57 = (((($45) + (($$sum9*216)|0)|0)) + 196|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(0);
   if ($59) {
    $60 = (($45) + (($$sum9*216)|0)|0);
    _ConcealMb($60,$currImage,$row$0$lcssa,$j$127,$sliceType,$refData$0);
    HEAP32[$57>>2] = 1;
    $61 = HEAP32[$50>>2]|0;
    $62 = (($61) + 1)|0;
    HEAP32[$50>>2] = $62;
   }
   $j$1 = (($j$127) + 1)|0;
   $exitcond48 = ($j$1|0)==($1|0);
   if ($exitcond48) {
    break;
   } else {
    $j$127 = $j$1;
   }
  }
 }
 $63 = ($row$0$lcssa|0)==(0);
 if ($63) {
  $i$4$in$ph = 0;
 } else {
  $64 = ($1|0)==(0);
  if ($64) {
   $i$4$in$ph = $row$0$lcssa;
  } else {
   $65 = (($row$0$lcssa) + -1)|0;
   $66 = Math_imul($65, $1)|0;
   $67 = ((($pStorage)) + 1204|0);
   $68 = (0 - ($1))|0;
   $j$224 = 0;
   while(1) {
    $81 = HEAP32[$44>>2]|0;
    $$sum8 = (($j$224) + ($66))|0;
    $82 = (($81) + (($$sum8*216)|0)|0);
    $i$3 = $65;$mb$0 = $82;
    while(1) {
     _ConcealMb($mb$0,$currImage,$i$3,$j$224,$sliceType,$refData$0);
     $83 = ((($mb$0)) + 196|0);
     HEAP32[$83>>2] = 1;
     $84 = HEAP32[$67>>2]|0;
     $85 = (($84) + 1)|0;
     HEAP32[$67>>2] = $85;
     $86 = (($mb$0) + (($68*216)|0)|0);
     $87 = (($i$3) + -1)|0;
     $88 = ($i$3|0)==(0);
     if ($88) {
      break;
     } else {
      $i$3 = $87;$mb$0 = $86;
     }
    }
    $89 = (($j$224) + 1)|0;
    $exitcond = ($89|0)==($1|0);
    if ($exitcond) {
     $i$4$in$ph = $row$0$lcssa;
     break;
    } else {
     $j$224 = $89;
    }
   }
  }
 }
 $i$421 = (($i$4$in$ph) + 1)|0;
 $69 = ($i$421>>>0)<($3>>>0);
 if (!($69)) {
  return 0;
 }
 $70 = ($1|0)==(0);
 $71 = ((($pStorage)) + 1204|0);
 if ($70) {
  return 0;
 } else {
  $i$422$us = $i$421;
 }
 while(1) {
  $74 = HEAP32[$44>>2]|0;
  $72 = Math_imul($i$422$us, $1)|0;
  $j$319$us = 0;
  while(1) {
   $$sum$us = (($j$319$us) + ($72))|0;
   $73 = (((($74) + (($$sum$us*216)|0)|0)) + 196|0);
   $75 = HEAP32[$73>>2]|0;
   $76 = ($75|0)==(0);
   if ($76) {
    $77 = (($74) + (($$sum$us*216)|0)|0);
    _ConcealMb($77,$currImage,$i$422$us,$j$319$us,$sliceType,$refData$0);
    HEAP32[$73>>2] = 1;
    $78 = HEAP32[$71>>2]|0;
    $79 = (($78) + 1)|0;
    HEAP32[$71>>2] = $79;
   }
   $80 = (($j$319$us) + 1)|0;
   $exitcond49 = ($80|0)==($1|0);
   if ($exitcond49) {
    break;
   } else {
    $j$319$us = $80;
   }
  }
  $i$4$us = (($i$422$us) + 1)|0;
  $exitcond50 = ($i$4$us|0)==($3|0);
  if ($exitcond50) {
   break;
  } else {
   $i$422$us = $i$4$us;
  }
 }
 return 0;
}
function _h264bsdDecodeVuiParameters($pStrmData,$pVuiParameters) {
 $pStrmData = $pStrmData|0;
 $pVuiParameters = $pVuiParameters|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _H264SwDecMemset($pVuiParameters,0,952);
 $0 = (_h264bsdGetBits($pStrmData,1)|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  $$0 = 1;
  return ($$0|0);
 }
 $2 = ($0|0)==(1);
 $3 = $2&1;
 HEAP32[$pVuiParameters>>2] = $3;
 do {
  if ($2) {
   $4 = (_h264bsdGetBits($pStrmData,8)|0);
   $5 = ($4|0)==(-1);
   if ($5) {
    $$0 = 1;
    return ($$0|0);
   }
   $6 = ((($pVuiParameters)) + 4|0);
   HEAP32[$6>>2] = $4;
   $7 = ($4|0)==(255);
   if ($7) {
    $8 = (_h264bsdGetBits($pStrmData,16)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $$0 = 1;
     return ($$0|0);
    }
    $10 = ((($pVuiParameters)) + 8|0);
    HEAP32[$10>>2] = $8;
    $11 = (_h264bsdGetBits($pStrmData,16)|0);
    $12 = ($11|0)==(-1);
    if ($12) {
     $$0 = 1;
     return ($$0|0);
    } else {
     $13 = ((($pVuiParameters)) + 12|0);
     HEAP32[$13>>2] = $11;
     break;
    }
   }
  }
 } while(0);
 $14 = (_h264bsdGetBits($pStrmData,1)|0);
 $15 = ($14|0)==(-1);
 if ($15) {
  $$0 = 1;
  return ($$0|0);
 }
 $16 = ($14|0)==(1);
 $17 = $16&1;
 $18 = ((($pVuiParameters)) + 16|0);
 HEAP32[$18>>2] = $17;
 do {
  if ($16) {
   $19 = (_h264bsdGetBits($pStrmData,1)|0);
   $20 = ($19|0)==(-1);
   if ($20) {
    $$0 = 1;
    return ($$0|0);
   } else {
    $21 = ($19|0)==(1);
    $22 = $21&1;
    $23 = ((($pVuiParameters)) + 20|0);
    HEAP32[$23>>2] = $22;
    break;
   }
  }
 } while(0);
 $24 = (_h264bsdGetBits($pStrmData,1)|0);
 $25 = ($24|0)==(-1);
 if ($25) {
  $$0 = 1;
  return ($$0|0);
 }
 $26 = ($24|0)==(1);
 $27 = $26&1;
 $28 = ((($pVuiParameters)) + 24|0);
 HEAP32[$28>>2] = $27;
 do {
  if ($26) {
   $29 = (_h264bsdGetBits($pStrmData,3)|0);
   $30 = ($29|0)==(-1);
   if ($30) {
    $$0 = 1;
    return ($$0|0);
   }
   $31 = ((($pVuiParameters)) + 28|0);
   HEAP32[$31>>2] = $29;
   $32 = (_h264bsdGetBits($pStrmData,1)|0);
   $33 = ($32|0)==(-1);
   if ($33) {
    $$0 = 1;
    return ($$0|0);
   }
   $34 = ($32|0)==(1);
   $35 = $34&1;
   $36 = ((($pVuiParameters)) + 32|0);
   HEAP32[$36>>2] = $35;
   $37 = (_h264bsdGetBits($pStrmData,1)|0);
   $38 = ($37|0)==(-1);
   if ($38) {
    $$0 = 1;
    return ($$0|0);
   }
   $39 = ($37|0)==(1);
   $40 = $39&1;
   $41 = ((($pVuiParameters)) + 36|0);
   HEAP32[$41>>2] = $40;
   if (!($39)) {
    $51 = ((($pVuiParameters)) + 40|0);
    HEAP32[$51>>2] = 2;
    $52 = ((($pVuiParameters)) + 44|0);
    HEAP32[$52>>2] = 2;
    $53 = ((($pVuiParameters)) + 48|0);
    HEAP32[$53>>2] = 2;
    break;
   }
   $42 = (_h264bsdGetBits($pStrmData,8)|0);
   $43 = ($42|0)==(-1);
   if ($43) {
    $$0 = 1;
    return ($$0|0);
   }
   $44 = ((($pVuiParameters)) + 40|0);
   HEAP32[$44>>2] = $42;
   $45 = (_h264bsdGetBits($pStrmData,8)|0);
   $46 = ($45|0)==(-1);
   if ($46) {
    $$0 = 1;
    return ($$0|0);
   }
   $47 = ((($pVuiParameters)) + 44|0);
   HEAP32[$47>>2] = $45;
   $48 = (_h264bsdGetBits($pStrmData,8)|0);
   $49 = ($48|0)==(-1);
   if ($49) {
    $$0 = 1;
    return ($$0|0);
   } else {
    $50 = ((($pVuiParameters)) + 48|0);
    HEAP32[$50>>2] = $48;
    break;
   }
  } else {
   $54 = ((($pVuiParameters)) + 28|0);
   HEAP32[$54>>2] = 5;
   $55 = ((($pVuiParameters)) + 40|0);
   HEAP32[$55>>2] = 2;
   $56 = ((($pVuiParameters)) + 44|0);
   HEAP32[$56>>2] = 2;
   $57 = ((($pVuiParameters)) + 48|0);
   HEAP32[$57>>2] = 2;
  }
 } while(0);
 $58 = (_h264bsdGetBits($pStrmData,1)|0);
 $59 = ($58|0)==(-1);
 if ($59) {
  $$0 = 1;
  return ($$0|0);
 }
 $60 = ($58|0)==(1);
 $61 = $60&1;
 $62 = ((($pVuiParameters)) + 52|0);
 HEAP32[$62>>2] = $61;
 if ($60) {
  $63 = ((($pVuiParameters)) + 56|0);
  $64 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$63)|0);
  $65 = ($64|0)==(0);
  if (!($65)) {
   $$0 = $64;
   return ($$0|0);
  }
  $66 = HEAP32[$63>>2]|0;
  $67 = ($66>>>0)>(5);
  if ($67) {
   $$0 = 1;
   return ($$0|0);
  }
  $68 = ((($pVuiParameters)) + 60|0);
  $69 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$68)|0);
  $70 = ($69|0)==(0);
  if (!($70)) {
   $$0 = $69;
   return ($$0|0);
  }
  $71 = HEAP32[$68>>2]|0;
  $72 = ($71>>>0)>(5);
  if ($72) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $73 = (_h264bsdGetBits($pStrmData,1)|0);
 $74 = ($73|0)==(-1);
 if ($74) {
  $$0 = 1;
  return ($$0|0);
 }
 $75 = ($73|0)==(1);
 $76 = $75&1;
 $77 = ((($pVuiParameters)) + 64|0);
 HEAP32[$77>>2] = $76;
 do {
  if ($75) {
   $78 = (_h264bsdShowBits32($pStrmData)|0);
   $79 = (_h264bsdFlushBits($pStrmData,32)|0);
   $80 = ($79|0)==(-1);
   $81 = ($78|0)==(0);
   $or$cond = $81 | $80;
   if ($or$cond) {
    $$0 = 1;
    return ($$0|0);
   }
   $82 = ((($pVuiParameters)) + 68|0);
   HEAP32[$82>>2] = $78;
   $83 = (_h264bsdShowBits32($pStrmData)|0);
   $84 = (_h264bsdFlushBits($pStrmData,32)|0);
   $85 = ($84|0)==(-1);
   $86 = ($83|0)==(0);
   $or$cond1 = $86 | $85;
   if ($or$cond1) {
    $$0 = 1;
    return ($$0|0);
   }
   $87 = ((($pVuiParameters)) + 72|0);
   HEAP32[$87>>2] = $83;
   $88 = (_h264bsdGetBits($pStrmData,1)|0);
   $89 = ($88|0)==(-1);
   if ($89) {
    $$0 = 1;
    return ($$0|0);
   } else {
    $90 = ($88|0)==(1);
    $91 = $90&1;
    $92 = ((($pVuiParameters)) + 76|0);
    HEAP32[$92>>2] = $91;
    break;
   }
  }
 } while(0);
 $93 = (_h264bsdGetBits($pStrmData,1)|0);
 $94 = ($93|0)==(-1);
 if ($94) {
  $$0 = 1;
  return ($$0|0);
 }
 $95 = ($93|0)==(1);
 $96 = $95&1;
 $97 = ((($pVuiParameters)) + 80|0);
 HEAP32[$97>>2] = $96;
 if ($95) {
  $98 = ((($pVuiParameters)) + 84|0);
  $99 = (_DecodeHrdParameters($pStrmData,$98)|0);
  $100 = ($99|0)==(0);
  if (!($100)) {
   $$0 = $99;
   return ($$0|0);
  }
 } else {
  $101 = ((($pVuiParameters)) + 84|0);
  HEAP32[$101>>2] = 1;
  $102 = ((($pVuiParameters)) + 96|0);
  HEAP32[$102>>2] = 288000001;
  $103 = ((($pVuiParameters)) + 224|0);
  HEAP32[$103>>2] = 288000001;
  $104 = ((($pVuiParameters)) + 480|0);
  HEAP32[$104>>2] = 24;
  $105 = ((($pVuiParameters)) + 484|0);
  HEAP32[$105>>2] = 24;
  $106 = ((($pVuiParameters)) + 488|0);
  HEAP32[$106>>2] = 24;
  $107 = ((($pVuiParameters)) + 492|0);
  HEAP32[$107>>2] = 24;
 }
 $108 = (_h264bsdGetBits($pStrmData,1)|0);
 $109 = ($108|0)==(-1);
 if ($109) {
  $$0 = 1;
  return ($$0|0);
 }
 $110 = ($108|0)==(1);
 $111 = $110&1;
 $112 = ((($pVuiParameters)) + 496|0);
 HEAP32[$112>>2] = $111;
 if ($110) {
  $113 = ((($pVuiParameters)) + 500|0);
  $114 = (_DecodeHrdParameters($pStrmData,$113)|0);
  $115 = ($114|0)==(0);
  if (!($115)) {
   $$0 = $114;
   return ($$0|0);
  }
 } else {
  $116 = ((($pVuiParameters)) + 500|0);
  HEAP32[$116>>2] = 1;
  $117 = ((($pVuiParameters)) + 512|0);
  HEAP32[$117>>2] = 240000001;
  $118 = ((($pVuiParameters)) + 640|0);
  HEAP32[$118>>2] = 240000001;
  $119 = ((($pVuiParameters)) + 896|0);
  HEAP32[$119>>2] = 24;
  $120 = ((($pVuiParameters)) + 900|0);
  HEAP32[$120>>2] = 24;
  $121 = ((($pVuiParameters)) + 904|0);
  HEAP32[$121>>2] = 24;
  $122 = ((($pVuiParameters)) + 908|0);
  HEAP32[$122>>2] = 24;
 }
 $123 = HEAP32[$97>>2]|0;
 $124 = ($123|0)==(0);
 if ($124) {
  $125 = HEAP32[$112>>2]|0;
  $126 = ($125|0)==(0);
  if (!($126)) {
   label = 46;
  }
 } else {
  label = 46;
 }
 do {
  if ((label|0) == 46) {
   $127 = (_h264bsdGetBits($pStrmData,1)|0);
   $128 = ($127|0)==(-1);
   if ($128) {
    $$0 = 1;
    return ($$0|0);
   } else {
    $129 = ($127|0)==(1);
    $130 = $129&1;
    $131 = ((($pVuiParameters)) + 912|0);
    HEAP32[$131>>2] = $130;
    break;
   }
  }
 } while(0);
 $132 = (_h264bsdGetBits($pStrmData,1)|0);
 $133 = ($132|0)==(-1);
 if ($133) {
  $$0 = 1;
  return ($$0|0);
 }
 $134 = ($132|0)==(1);
 $135 = $134&1;
 $136 = ((($pVuiParameters)) + 916|0);
 HEAP32[$136>>2] = $135;
 $137 = (_h264bsdGetBits($pStrmData,1)|0);
 $138 = ($137|0)==(-1);
 if ($138) {
  $$0 = 1;
  return ($$0|0);
 }
 $139 = ($137|0)==(1);
 $140 = $139&1;
 $141 = ((($pVuiParameters)) + 920|0);
 HEAP32[$141>>2] = $140;
 do {
  if ($139) {
   $142 = (_h264bsdGetBits($pStrmData,1)|0);
   $143 = ($142|0)==(-1);
   if ($143) {
    $$0 = 1;
    return ($$0|0);
   }
   $144 = ($142|0)==(1);
   $145 = $144&1;
   $146 = ((($pVuiParameters)) + 924|0);
   HEAP32[$146>>2] = $145;
   $147 = ((($pVuiParameters)) + 928|0);
   $148 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$147)|0);
   $149 = ($148|0)==(0);
   if (!($149)) {
    $$0 = $148;
    return ($$0|0);
   }
   $150 = HEAP32[$147>>2]|0;
   $151 = ($150>>>0)>(16);
   if ($151) {
    $$0 = 1;
    return ($$0|0);
   }
   $152 = ((($pVuiParameters)) + 932|0);
   $153 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$152)|0);
   $154 = ($153|0)==(0);
   if (!($154)) {
    $$0 = $153;
    return ($$0|0);
   }
   $155 = HEAP32[$152>>2]|0;
   $156 = ($155>>>0)>(16);
   if ($156) {
    $$0 = 1;
    return ($$0|0);
   }
   $157 = ((($pVuiParameters)) + 936|0);
   $158 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$157)|0);
   $159 = ($158|0)==(0);
   if (!($159)) {
    $$0 = $158;
    return ($$0|0);
   }
   $160 = HEAP32[$157>>2]|0;
   $161 = ($160>>>0)>(16);
   if ($161) {
    $$0 = 1;
    return ($$0|0);
   }
   $162 = ((($pVuiParameters)) + 940|0);
   $163 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$162)|0);
   $164 = ($163|0)==(0);
   if (!($164)) {
    $$0 = $163;
    return ($$0|0);
   }
   $165 = HEAP32[$162>>2]|0;
   $166 = ($165>>>0)>(16);
   if ($166) {
    $$0 = 1;
    return ($$0|0);
   }
   $167 = ((($pVuiParameters)) + 944|0);
   $168 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$167)|0);
   $169 = ($168|0)==(0);
   if (!($169)) {
    $$0 = $168;
    return ($$0|0);
   }
   $170 = ((($pVuiParameters)) + 948|0);
   $171 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$170)|0);
   $172 = ($171|0)==(0);
   if ($172) {
    break;
   } else {
    $$0 = $171;
   }
   return ($$0|0);
  } else {
   $173 = ((($pVuiParameters)) + 924|0);
   HEAP32[$173>>2] = 1;
   $174 = ((($pVuiParameters)) + 928|0);
   HEAP32[$174>>2] = 2;
   $175 = ((($pVuiParameters)) + 932|0);
   HEAP32[$175>>2] = 1;
   $176 = ((($pVuiParameters)) + 936|0);
   HEAP32[$176>>2] = 16;
   $177 = ((($pVuiParameters)) + 940|0);
   HEAP32[$177>>2] = 16;
   $178 = ((($pVuiParameters)) + 944|0);
   HEAP32[$178>>2] = 16;
   $179 = ((($pVuiParameters)) + 948|0);
   HEAP32[$179>>2] = 16;
  }
 } while(0);
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdDecodePicOrderCnt($poc,$sps,$pSliceHeader,$pNalUnit) {
 $poc = $poc|0;
 $sps = $sps|0;
 $pSliceHeader = $pSliceHeader|0;
 $pNalUnit = $pNalUnit|0;
 var $$ = 0, $$19 = 0, $$2 = 0, $$3 = 0, $$absFrameNum$0 = 0, $$pre = 0, $$pre$phi14Z2D = 0, $$pre$phi16Z2D = 0, $$pre$phi17Z2D = 0, $$pre13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $absFrameNum$0 = 0, $containsMmco5$0 = 0, $expectedDeltaPicOrderCntCycle$0$lcssa = 0, $expectedDeltaPicOrderCntCycle$09 = 0, $frameNumInPicOrderCntCycle$0 = 0, $frameNumOffset$0 = 0, $frameNumOffset$1$ph = 0, $frameNumOffset$14 = 0, $i$0 = 0, $i$18 = 0, $i$26 = 0;
 var $or$cond = 0, $picOrderCnt$0 = 0, $picOrderCnt$27 = 0, $picOrderCnt$3 = 0, $picOrderCnt$4 = 0, $picOrderCnt$6 = 0, $picOrderCnt$7 = 0, $picOrderCntCycleCnt$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pSliceHeader)) + 284|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $containsMmco5$0 = 0;
  } else {
   $i$0 = 0;
   L2: while(1) {
    $3 = (((($pSliceHeader)) + 288|0) + (($i$0*20)|0)|0);
    $4 = HEAP32[$3>>2]|0;
    switch ($4|0) {
    case 0:  {
     $containsMmco5$0 = 0;
     break L1;
     break;
    }
    case 5:  {
     break L2;
     break;
    }
    default: {
    }
    }
    $5 = (($i$0) + 1)|0;
    $i$0 = $5;
   }
   $containsMmco5$0 = 1;
  }
 } while(0);
 $6 = ((($sps)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 switch ($7|0) {
 case 0:  {
  $8 = HEAP32[$pNalUnit>>2]|0;
  $9 = ($8|0)==(5);
  if ($9) {
   $10 = ((($poc)) + 4|0);
   HEAP32[$10>>2] = 0;
   HEAP32[$poc>>2] = 0;
   $11 = ((($pSliceHeader)) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $$pre$phi17Z2D = $poc;$24 = $12;$26 = 0;
   label = 11;
  } else {
   $$pre = HEAP32[$poc>>2]|0;
   $13 = ((($pSliceHeader)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($$pre>>>0)>($14>>>0);
   if ($15) {
    $16 = (($$pre) - ($14))|0;
    $17 = ((($sps)) + 20|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 >>> 1;
    $20 = ($16>>>0)<($19>>>0);
    if ($20) {
     $$pre$phi17Z2D = $poc;$24 = $14;$26 = $$pre;
     label = 11;
    } else {
     $21 = ((($poc)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + ($18))|0;
     $$pre$phi16Z2D = $poc;$41 = $14;$picOrderCnt$0 = $23;
    }
   } else {
    $$pre$phi17Z2D = $poc;$24 = $14;$26 = $$pre;
    label = 11;
   }
  }
  do {
   if ((label|0) == 11) {
    $25 = ($24>>>0)>($26>>>0);
    if ($25) {
     $27 = (($24) - ($26))|0;
     $28 = ((($sps)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 >>> 1;
     $31 = ($27>>>0)>($30>>>0);
     if ($31) {
      $32 = ((($poc)) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($33) - ($29))|0;
      $$pre$phi16Z2D = $$pre$phi17Z2D;$41 = $24;$picOrderCnt$0 = $34;
      break;
     }
    }
    $35 = ((($poc)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $$pre$phi16Z2D = $$pre$phi17Z2D;$41 = $24;$picOrderCnt$0 = $36;
   }
  } while(0);
  $37 = ((($pNalUnit)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = (($41) + ($picOrderCnt$0))|0;
   $42 = ((($pSliceHeader)) + 24|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)<(0);
   $45 = $44 ? $43 : 0;
   $$19 = (($40) + ($45))|0;
   $picOrderCnt$7 = $$19;
   return ($picOrderCnt$7|0);
  }
  $46 = ((($poc)) + 4|0);
  HEAP32[$46>>2] = $picOrderCnt$0;
  $47 = ((($pSliceHeader)) + 24|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)<(0);
  $50 = ($containsMmco5$0|0)==(0);
  if ($50) {
   $53 = (($41) + ($picOrderCnt$0))|0;
   $54 = $49 ? $48 : 0;
   $$ = (($53) + ($54))|0;
   HEAP32[$$pre$phi16Z2D>>2] = $41;
   $picOrderCnt$7 = $$;
   return ($picOrderCnt$7|0);
  } else {
   $51 = ((($poc)) + 4|0);
   HEAP32[$51>>2] = 0;
   $52 = (0 - ($48))|0;
   $storemerge = $49 ? $52 : 0;
   HEAP32[$$pre$phi16Z2D>>2] = $storemerge;
   $picOrderCnt$7 = 0;
   return ($picOrderCnt$7|0);
  }
  break;
 }
 case 1:  {
  $55 = HEAP32[$pNalUnit>>2]|0;
  $56 = ($55|0)==(5);
  if ($56) {
   $frameNumOffset$0 = 0;
  } else {
   $57 = ((($poc)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($pSliceHeader)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($58>>>0)>($60>>>0);
   $62 = ((($poc)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   if ($61) {
    $64 = ((($sps)) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + ($63))|0;
    $frameNumOffset$0 = $66;
   } else {
    $frameNumOffset$0 = $63;
   }
  }
  $67 = ((($sps)) + 36|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)==(0);
  if ($69) {
   $absFrameNum$0 = 0;
  } else {
   $70 = ((($pSliceHeader)) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + ($frameNumOffset$0))|0;
   $absFrameNum$0 = $72;
  }
  $73 = ((($pNalUnit)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)==(0);
  $76 = ($absFrameNum$0|0)!=(0);
  $or$cond = $76 & $75;
  $77 = $or$cond << 31 >> 31;
  $$absFrameNum$0 = (($77) + ($absFrameNum$0))|0;
  $78 = ($$absFrameNum$0|0)!=(0);
  if ($78) {
   $79 = (($$absFrameNum$0) + -1)|0;
   $80 = (($79>>>0) / ($68>>>0))&-1;
   $81 = (($79>>>0) % ($68>>>0))&-1;
   $frameNumInPicOrderCntCycle$0 = $81;$picOrderCntCycleCnt$0 = $80;
  } else {
   $frameNumInPicOrderCntCycle$0 = 0;$picOrderCntCycleCnt$0 = 0;
  }
  if ($69) {
   $expectedDeltaPicOrderCntCycle$0$lcssa = 0;
  } else {
   $82 = ((($sps)) + 40|0);
   $83 = HEAP32[$82>>2]|0;
   $expectedDeltaPicOrderCntCycle$09 = 0;$i$18 = 0;
   while(1) {
    $84 = (($83) + ($i$18<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($85) + ($expectedDeltaPicOrderCntCycle$09))|0;
    $87 = (($i$18) + 1)|0;
    $88 = ($87>>>0)<($68>>>0);
    if ($88) {
     $expectedDeltaPicOrderCntCycle$09 = $86;$i$18 = $87;
    } else {
     $expectedDeltaPicOrderCntCycle$0$lcssa = $86;
     break;
    }
   }
  }
  if ($78) {
   $89 = Math_imul($expectedDeltaPicOrderCntCycle$0$lcssa, $picOrderCntCycleCnt$0)|0;
   $90 = ((($sps)) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   $i$26 = 0;$picOrderCnt$27 = $89;
   while(1) {
    $92 = (($91) + ($i$26<<2)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + ($picOrderCnt$27))|0;
    $95 = (($i$26) + 1)|0;
    $96 = ($95>>>0)>($frameNumInPicOrderCntCycle$0>>>0);
    if ($96) {
     $picOrderCnt$3 = $94;
     break;
    } else {
     $i$26 = $95;$picOrderCnt$27 = $94;
    }
   }
  } else {
   $picOrderCnt$3 = 0;
  }
  if ($75) {
   $97 = ((($sps)) + 28|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($picOrderCnt$3))|0;
   $picOrderCnt$4 = $99;
  } else {
   $picOrderCnt$4 = $picOrderCnt$3;
  }
  $100 = ((($sps)) + 32|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ((($pSliceHeader)) + 32|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + ($101))|0;
  $105 = ($containsMmco5$0|0)==(0);
  $106 = ((($poc)) + 12|0);
  if ($105) {
   $107 = ($104|0)<(0);
   $108 = ((($pSliceHeader)) + 28|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $107 ? $104 : 0;
   $111 = (($110) + ($picOrderCnt$4))|0;
   $$2 = (($111) + ($109))|0;
   HEAP32[$106>>2] = $frameNumOffset$0;
   $112 = ((($pSliceHeader)) + 12|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ((($poc)) + 8|0);
   HEAP32[$114>>2] = $113;
   $picOrderCnt$7 = $$2;
   return ($picOrderCnt$7|0);
  } else {
   HEAP32[$106>>2] = 0;
   $115 = ((($poc)) + 8|0);
   HEAP32[$115>>2] = 0;
   $picOrderCnt$7 = 0;
   return ($picOrderCnt$7|0);
  }
  break;
 }
 default: {
  $116 = HEAP32[$pNalUnit>>2]|0;
  $117 = ($116|0)==(5);
  if ($117) {
   $$pre13 = ((($poc)) + 12|0);
   $$pre$phi14Z2D = $$pre13;$frameNumOffset$14 = 0;$picOrderCnt$6 = 0;
  } else {
   $118 = ((($poc)) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ((($pSliceHeader)) + 12|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ($119>>>0)>($121>>>0);
   $123 = ((($poc)) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   if ($122) {
    $125 = ((($sps)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + ($124))|0;
    $frameNumOffset$1$ph = $127;
   } else {
    $frameNumOffset$1$ph = $124;
   }
   $128 = ((($pNalUnit)) + 4|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($129|0)==(0);
   $131 = (($121) + ($frameNumOffset$1$ph))|0;
   $132 = $131 << 1;
   $133 = $130 << 31 >> 31;
   $$3 = (($132) + ($133))|0;
   $$pre$phi14Z2D = $123;$frameNumOffset$14 = $frameNumOffset$1$ph;$picOrderCnt$6 = $$3;
  }
  $134 = ($containsMmco5$0|0)==(0);
  if ($134) {
   HEAP32[$$pre$phi14Z2D>>2] = $frameNumOffset$14;
   $135 = ((($pSliceHeader)) + 12|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ((($poc)) + 8|0);
   HEAP32[$137>>2] = $136;
   $picOrderCnt$7 = $picOrderCnt$6;
   return ($picOrderCnt$7|0);
  } else {
   HEAP32[$$pre$phi14Z2D>>2] = 0;
   $138 = ((($poc)) + 8|0);
   HEAP32[$138>>2] = 0;
   $picOrderCnt$7 = 0;
   return ($picOrderCnt$7|0);
  }
 }
 }
 return (0)|0;
}
function _h264bsdInit($pStorage,$noOutputReordering) {
 $pStorage = $pStorage|0;
 $noOutputReordering = $noOutputReordering|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _h264bsdInitStorage($pStorage);
 $0 = (_H264SwDecMalloc(2112)|0);
 $1 = ((($pStorage)) + 3376|0);
 HEAP32[$1>>2] = $0;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($noOutputReordering|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($pStorage)) + 1216|0);
 HEAP32[$4>>2] = 1;
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdDecode($pStorage,$byteStrm,$len,$picId,$readBytes) {
 $pStorage = $pStorage|0;
 $byteStrm = $byteStrm|0;
 $len = $len|0;
 $picId = $picId|0;
 $readBytes = $readBytes|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $$pre$phi12Z2D = 0, $$pre$phi14Z2D = 0, $$pre$phi15Z2D = 0, $$pre$phi17Z2D = 0, $$pre$phiZ2D = 0, $$pre$pre$phiZZ2D = 0, $$pre13 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $accessUnitBoundaryFlag = 0, $nalUnit = 0, $noOutputOfPriorPicsFlag = 0, $oldSPS$0 = 0;
 var $or$cond3 = 0, $picParamSet = 0, $ppsId = 0, $seqParamSet = 0, $strm = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ppsId = sp + 204|0;
 $nalUnit = sp;
 $seqParamSet = sp + 112|0;
 $picParamSet = sp + 40|0;
 $strm = sp + 16|0;
 $accessUnitBoundaryFlag = sp + 12|0;
 $noOutputOfPriorPicsFlag = sp + 8|0;
 HEAP32[$accessUnitBoundaryFlag>>2] = 0;
 $0 = ((($pStorage)) + 3344|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 4;
 } else {
  $3 = ((($pStorage)) + 3348|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($byteStrm|0);
  if ($5) {
   $6 = ((($pStorage)) + 3356|0);
   ;HEAP32[$strm>>2]=HEAP32[$6>>2]|0;HEAP32[$strm+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$strm+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$strm+12>>2]=HEAP32[$6+12>>2]|0;
   $7 = HEAP32[$strm>>2]|0;
   $8 = ((($strm)) + 4|0);
   HEAP32[$8>>2] = $7;
   $9 = ((($strm)) + 8|0);
   HEAP32[$9>>2] = 0;
   $10 = ((($strm)) + 16|0);
   HEAP32[$10>>2] = 0;
   $11 = ((($pStorage)) + 3352|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$readBytes>>2] = $12;
  } else {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $13 = (_h264bsdExtractNalUnit($byteStrm,$len,$strm,$readBytes)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = ((($pStorage)) + 3356|0);
    ;HEAP32[$15>>2]=HEAP32[$strm>>2]|0;HEAP32[$15+4>>2]=HEAP32[$strm+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$strm+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[$strm+12>>2]|0;HEAP32[$15+16>>2]=HEAP32[$strm+16>>2]|0;
    $16 = HEAP32[$readBytes>>2]|0;
    $17 = ((($pStorage)) + 3352|0);
    HEAP32[$17>>2] = $16;
    $18 = ((($pStorage)) + 3348|0);
    HEAP32[$18>>2] = $byteStrm;
    break;
   } else {
    $$0 = 3;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $19 = (_h264bsdDecodeNalUnit($strm,$nalUnit)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP32[$nalUnit>>2]|0;
 $22 = (($21) + -1)|0;
 $23 = ($22>>>0)>(11);
 if ($23) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = (_h264bsdCheckAccessUnitBoundary($strm,$nalUnit,$pStorage,$accessUnitBoundaryFlag)|0);
 $switch$split2D = ($24|0)<(65520);
 L16: do {
  if ($switch$split2D) {
   switch ($24|0) {
   case 0:  {
    break;
   }
   default: {
    break L16;
   }
   }
   $25 = HEAP32[$accessUnitBoundaryFlag>>2]|0;
   $26 = ($25|0)==(0);
   do {
    if ($26) {
     label = 19;
    } else {
     $27 = ((($pStorage)) + 1184|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0);
     if (!($29)) {
      $30 = ((($pStorage)) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(0|0);
      if (!($32)) {
       $33 = ((($pStorage)) + 3380|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ($34|0)==(0);
       if (!($35)) {
        $$0 = 3;
        STACKTOP = sp;return ($$0|0);
       }
       $36 = ((($pStorage)) + 1188|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(0);
       if ($38) {
        $39 = ((($pStorage)) + 1220|0);
        $40 = (_h264bsdAllocateDpbImage($39)|0);
        $41 = ((($pStorage)) + 1336|0);
        HEAP32[$41>>2] = $40;
        _h264bsdInitRefPicList($39);
        (_h264bsdConceal($pStorage,$41,0)|0);
        $$pre$pre$phiZZ2D = $41;
       } else {
        $42 = ((($pStorage)) + 1336|0);
        $43 = ((($pStorage)) + 1372|0);
        $44 = HEAP32[$43>>2]|0;
        (_h264bsdConceal($pStorage,$42,$44)|0);
        $$pre$pre$phiZZ2D = $42;
       }
       HEAP32[$readBytes>>2] = 0;
       HEAP32[$0>>2] = 1;
       $47 = ((($pStorage)) + 1180|0);
       HEAP32[$47>>2] = 0;
       $$pre13 = ((($pStorage)) + 1360|0);
       $$pre$phi12Z2D = $30;$$pre$phi14Z2D = $$pre13;$$pre$phi15Z2D = $36;$$pre$phiZ2D = $$pre$pre$phiZZ2D;
       break;
      }
     }
     $45 = ((($pStorage)) + 1188|0);
     HEAP32[$45>>2] = 0;
     $46 = ((($pStorage)) + 1180|0);
     HEAP32[$46>>2] = 0;
     label = 19;
    }
   } while(0);
   L32: do {
    if ((label|0) == 19) {
     $48 = HEAP32[$nalUnit>>2]|0;
     switch ($48|0) {
     case 7:  {
      $49 = (_h264bsdDecodeSeqParamSet($strm,$seqParamSet)|0);
      $50 = ($49|0)==(0);
      if ($50) {
       (_h264bsdStoreSeqParamSet($pStorage,$seqParamSet)|0);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      } else {
       $51 = ((($seqParamSet)) + 40|0);
       $52 = HEAP32[$51>>2]|0;
       _H264SwDecFree($52);
       HEAP32[$51>>2] = 0;
       $53 = ((($seqParamSet)) + 84|0);
       $54 = HEAP32[$53>>2]|0;
       _H264SwDecFree($54);
       HEAP32[$53>>2] = 0;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      break;
     }
     case 8:  {
      $55 = (_h264bsdDecodePicParamSet($strm,$picParamSet)|0);
      $56 = ($55|0)==(0);
      if ($56) {
       (_h264bsdStorePicParamSet($pStorage,$picParamSet)|0);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      } else {
       $57 = ((($picParamSet)) + 20|0);
       $58 = HEAP32[$57>>2]|0;
       _H264SwDecFree($58);
       HEAP32[$57>>2] = 0;
       $59 = ((($picParamSet)) + 24|0);
       $60 = HEAP32[$59>>2]|0;
       _H264SwDecFree($60);
       HEAP32[$59>>2] = 0;
       $61 = ((($picParamSet)) + 28|0);
       $62 = HEAP32[$61>>2]|0;
       _H264SwDecFree($62);
       HEAP32[$61>>2] = 0;
       $63 = ((($picParamSet)) + 44|0);
       $64 = HEAP32[$63>>2]|0;
       _H264SwDecFree($64);
       HEAP32[$63>>2] = 0;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      break;
     }
     case 1: case 5:  {
      $65 = ((($pStorage)) + 1180|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0);
      if (!($67)) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      $68 = ((($pStorage)) + 1184|0);
      HEAP32[$68>>2] = 1;
      $69 = (_h264bsdIsStartOfPicture($pStorage)|0);
      $70 = ($69|0)==(0);
      if (!($70)) {
       $71 = ((($pStorage)) + 1204|0);
       HEAP32[$71>>2] = 0;
       $72 = ((($pStorage)) + 1208|0);
       HEAP32[$72>>2] = $picId;
       (_h264bsdCheckPpsId($strm,$ppsId)|0);
       $73 = ((($pStorage)) + 8|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = HEAP32[$ppsId>>2]|0;
       $76 = HEAP32[$nalUnit>>2]|0;
       $77 = ($76|0)==(5);
       $78 = $77&1;
       $79 = (_h264bsdActivateParamSets($pStorage,$75,$78)|0);
       $80 = ($79|0)==(0);
       if (!($80)) {
        $81 = ((($pStorage)) + 4|0);
        HEAP32[$81>>2] = 256;
        $82 = ((($pStorage)) + 12|0);
        HEAP32[$82>>2] = 0;
        HEAP32[$73>>2] = 32;
        $83 = ((($pStorage)) + 16|0);
        HEAP32[$83>>2] = 0;
        $84 = ((($pStorage)) + 3380|0);
        HEAP32[$84>>2] = 0;
        $85 = ($79|0)==(65535);
        $$ = $85 ? 5 : 4;
        $$0 = $$;
        STACKTOP = sp;return ($$0|0);
       }
       $86 = HEAP32[$73>>2]|0;
       $87 = ($74|0)==($86|0);
       if (!($87)) {
        $88 = ((($pStorage)) + 16|0);
        $89 = HEAP32[$88>>2]|0;
        HEAP32[$noOutputOfPriorPicsFlag>>2] = 1;
        $90 = HEAP32[$pStorage>>2]|0;
        $91 = ($90>>>0)<(32);
        if ($91) {
         $92 = (((($pStorage)) + 20|0) + ($90<<2)|0);
         $93 = HEAP32[$92>>2]|0;
         $oldSPS$0 = $93;
        } else {
         $oldSPS$0 = 0;
        }
        HEAP32[$readBytes>>2] = 0;
        HEAP32[$0>>2] = 1;
        $94 = HEAP32[$nalUnit>>2]|0;
        $95 = ($94|0)==(5);
        do {
         if ($95) {
          $96 = ((($pStorage)) + 12|0);
          $97 = HEAP32[$96>>2]|0;
          $98 = (_h264bsdCheckPriorPicsFlag($noOutputOfPriorPicsFlag,$strm,$89,$97,5)|0);
          $99 = HEAP32[$noOutputOfPriorPicsFlag>>2]|0;
          $100 = $99 | $98;
          $101 = ($100|0)==(0);
          if ($101) {
           $102 = ((($pStorage)) + 1220|0);
           $103 = ((($pStorage)) + 1276|0);
           $104 = HEAP32[$103>>2]|0;
           $105 = ($104|0)!=(0);
           $106 = ($oldSPS$0|0)==(0|0);
           $or$cond3 = $106 | $105;
           if ($or$cond3) {
            label = 39;
           } else {
            $107 = ((($oldSPS$0)) + 52|0);
            $108 = HEAP32[$107>>2]|0;
            $109 = ((($89)) + 52|0);
            $110 = HEAP32[$109>>2]|0;
            $111 = ($108|0)==($110|0);
            if ($111) {
             $112 = ((($oldSPS$0)) + 56|0);
             $113 = HEAP32[$112>>2]|0;
             $114 = ((($89)) + 56|0);
             $115 = HEAP32[$114>>2]|0;
             $116 = ($113|0)==($115|0);
             if ($116) {
              $117 = ((($oldSPS$0)) + 88|0);
              $118 = HEAP32[$117>>2]|0;
              $119 = ((($89)) + 88|0);
              $120 = HEAP32[$119>>2]|0;
              $121 = ($118|0)==($120|0);
              if (!($121)) {
               label = 39;
               break;
              }
              _h264bsdFlushDpb($102);
             } else {
              label = 39;
             }
            } else {
             label = 39;
            }
           }
          } else {
           label = 39;
          }
         } else {
          label = 39;
         }
        } while(0);
        if ((label|0) == 39) {
         $122 = ((($pStorage)) + 1280|0);
         HEAP32[$122>>2] = 0;
        }
        $123 = HEAP32[$73>>2]|0;
        HEAP32[$pStorage>>2] = $123;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
      }
      $124 = ((($pStorage)) + 3380|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)==(0);
      if (!($126)) {
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $127 = ((($pStorage)) + 1368|0);
      $128 = ((($pStorage)) + 2356|0);
      $129 = ((($pStorage)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ((($pStorage)) + 12|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (_h264bsdDecodeSliceHeader($strm,$128,$130,$132,$nalUnit)|0);
      $134 = ($133|0)==(0);
      if (!($134)) {
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $135 = (_h264bsdIsStartOfPicture($pStorage)|0);
      $136 = ($135|0)==(0);
      if ($136) {
       $$pre = ((($pStorage)) + 1220|0);
       $$pre$phi17Z2D = $$pre;
      } else {
       $137 = HEAP32[$nalUnit>>2]|0;
       $138 = ($137|0)==(5);
       $$pre18 = ((($pStorage)) + 1220|0);
       if (!($138)) {
        $139 = ((($pStorage)) + 2368|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = ((($nalUnit)) + 4|0);
        $142 = HEAP32[$141>>2]|0;
        $143 = ($142|0)!=(0);
        $144 = $143&1;
        $145 = HEAP32[$129>>2]|0;
        $146 = ((($145)) + 48|0);
        $147 = HEAP32[$146>>2]|0;
        $148 = (_h264bsdCheckGapsInFrameNum($$pre18,$140,$144,$147)|0);
        $149 = ($148|0)==(0);
        if (!($149)) {
         $$0 = 3;
         STACKTOP = sp;return ($$0|0);
        }
       }
       $150 = (_h264bsdAllocateDpbImage($$pre18)|0);
       $151 = ((($pStorage)) + 1336|0);
       HEAP32[$151>>2] = $150;
       $$pre$phi17Z2D = $$pre18;
      }
      _memcpy(($127|0),($128|0),988)|0;
      $152 = ((($pStorage)) + 1188|0);
      HEAP32[$152>>2] = 1;
      $153 = ((($pStorage)) + 1360|0);
      $154 = $nalUnit;
      $155 = $154;
      $156 = HEAP32[$155>>2]|0;
      $157 = (($154) + 4)|0;
      $158 = $157;
      $159 = HEAP32[$158>>2]|0;
      $160 = $153;
      $161 = $160;
      HEAP32[$161>>2] = $156;
      $162 = (($160) + 4)|0;
      $163 = $162;
      HEAP32[$163>>2] = $159;
      $164 = ((($pStorage)) + 1432|0);
      $165 = HEAP32[$164>>2]|0;
      _h264bsdComputeSliceGroupMap($pStorage,$165);
      _h264bsdInitRefPicList($$pre$phi17Z2D);
      $166 = ((($pStorage)) + 1436|0);
      $167 = ((($pStorage)) + 1380|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ((($pStorage)) + 1412|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = (_h264bsdReorderRefPicList($$pre$phi17Z2D,$166,$168,$170)|0);
      $172 = ($171|0)==(0);
      if (!($172)) {
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $173 = ((($pStorage)) + 1336|0);
      $174 = (_h264bsdDecodeSliceData($strm,$pStorage,$173,$127)|0);
      $175 = ($174|0)==(0);
      if (!($175)) {
       $176 = HEAP32[$127>>2]|0;
       _h264bsdMarkSliceCorrupted($pStorage,$176);
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $177 = (_h264bsdIsEndOfPicture($pStorage)|0);
      $178 = ($177|0)==(0);
      if ($178) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      } else {
       HEAP32[$65>>2] = 1;
       $$pre$phi12Z2D = $129;$$pre$phi14Z2D = $153;$$pre$phi15Z2D = $152;$$pre$phiZ2D = $173;
       break L32;
      }
      break;
     }
     default: {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     }
    }
   } while(0);
   $179 = ((($pStorage)) + 1212|0);
   $180 = HEAP32[$179>>2]|0;
   _h264bsdFilterPicture($$pre$phiZ2D,$180);
   _h264bsdResetStorage($pStorage);
   $181 = ((($pStorage)) + 1284|0);
   $182 = HEAP32[$$pre$phi12Z2D>>2]|0;
   $183 = ((($pStorage)) + 1368|0);
   $184 = (_h264bsdDecodePicOrderCnt($181,$182,$183,$$pre$phi14Z2D)|0);
   $185 = HEAP32[$$pre$phi15Z2D>>2]|0;
   $186 = ($185|0)==(0);
   do {
    if (!($186)) {
     $187 = ((($pStorage)) + 1364|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = ($188|0)==(0);
     $190 = ((($pStorage)) + 1220|0);
     $191 = ((($pStorage)) + 1380|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = ((($pStorage)) + 1360|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = ((($pStorage)) + 1208|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ((($pStorage)) + 1204|0);
     $198 = HEAP32[$197>>2]|0;
     if ($189) {
      $202 = ($194|0)==(5);
      $203 = $202&1;
      (_h264bsdMarkDecRefPic($190,0,$$pre$phiZ2D,$192,$184,$203,$196,$198)|0);
      break;
     } else {
      $199 = ((($pStorage)) + 1644|0);
      $200 = ($194|0)==(5);
      $201 = $200&1;
      (_h264bsdMarkDecRefPic($190,$199,$$pre$phiZ2D,$192,$184,$201,$196,$198)|0);
      break;
     }
    }
   } while(0);
   $204 = ((($pStorage)) + 1184|0);
   HEAP32[$204>>2] = 0;
   HEAP32[$$pre$phi15Z2D>>2] = 0;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   switch ($24|0) {
   case 65520:  {
    $$0 = 4;
    break;
   }
   default: {
    break L16;
   }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $$0 = 3;
 STACKTOP = sp;return ($$0|0);
}
function _h264bsdShutdown($pStorage) {
 $pStorage = $pStorage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond3 = 0, $i$02 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$02 = 0;
 while(1) {
  $0 = (((($pStorage)) + 20|0) + ($i$02<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = ((($1)) + 40|0);
   $4 = HEAP32[$3>>2]|0;
   _H264SwDecFree($4);
   $5 = HEAP32[$0>>2]|0;
   $6 = ((($5)) + 40|0);
   HEAP32[$6>>2] = 0;
   $7 = HEAP32[$0>>2]|0;
   $8 = ((($7)) + 84|0);
   $9 = HEAP32[$8>>2]|0;
   _H264SwDecFree($9);
   $10 = HEAP32[$0>>2]|0;
   $11 = ((($10)) + 84|0);
   HEAP32[$11>>2] = 0;
   $12 = HEAP32[$0>>2]|0;
   _H264SwDecFree($12);
   HEAP32[$0>>2] = 0;
  }
  $13 = (($i$02) + 1)|0;
  $exitcond3 = ($13|0)==(32);
  if ($exitcond3) {
   $i$11 = 0;
   break;
  } else {
   $i$02 = $13;
  }
 }
 while(1) {
  $14 = (((($pStorage)) + 148|0) + ($i$11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   _H264SwDecFree($18);
   $19 = HEAP32[$14>>2]|0;
   $20 = ((($19)) + 20|0);
   HEAP32[$20>>2] = 0;
   $21 = HEAP32[$14>>2]|0;
   $22 = ((($21)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   _H264SwDecFree($23);
   $24 = HEAP32[$14>>2]|0;
   $25 = ((($24)) + 24|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$14>>2]|0;
   $27 = ((($26)) + 28|0);
   $28 = HEAP32[$27>>2]|0;
   _H264SwDecFree($28);
   $29 = HEAP32[$14>>2]|0;
   $30 = ((($29)) + 28|0);
   HEAP32[$30>>2] = 0;
   $31 = HEAP32[$14>>2]|0;
   $32 = ((($31)) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   _H264SwDecFree($33);
   $34 = HEAP32[$14>>2]|0;
   $35 = ((($34)) + 44|0);
   HEAP32[$35>>2] = 0;
   $36 = HEAP32[$14>>2]|0;
   _H264SwDecFree($36);
   HEAP32[$14>>2] = 0;
  }
  $37 = (($i$11) + 1)|0;
  $exitcond = ($37|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $37;
  }
 }
 $38 = ((($pStorage)) + 3376|0);
 $39 = HEAP32[$38>>2]|0;
 _H264SwDecFree($39);
 HEAP32[$38>>2] = 0;
 $40 = ((($pStorage)) + 1212|0);
 $41 = HEAP32[$40>>2]|0;
 _H264SwDecFree($41);
 HEAP32[$40>>2] = 0;
 $42 = ((($pStorage)) + 1172|0);
 $43 = HEAP32[$42>>2]|0;
 _H264SwDecFree($43);
 HEAP32[$42>>2] = 0;
 $44 = ((($pStorage)) + 1220|0);
 _h264bsdFreeDpb($44);
 return;
}
function _h264bsdNextOutputPicture($pStorage,$picId,$isIdrPic,$numErrMbs) {
 $pStorage = $pStorage|0;
 $picId = $picId|0;
 $isIdrPic = $isIdrPic|0;
 $numErrMbs = $numErrMbs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 1220|0);
 $1 = (_h264bsdDpbOutputPicture($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$picId>>2] = $4;
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$isIdrPic>>2] = $6;
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$numErrMbs>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $$0 = $9;
 return ($$0|0);
}
function _h264bsdPicWidth($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $$0 = $4;
 return ($$0|0);
}
function _h264bsdPicHeight($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $$0 = $4;
 return ($$0|0);
}
function _h264bsdFlushBuffer($pStorage) {
 $pStorage = $pStorage|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 1220|0);
 _h264bsdFlushDpb($0);
 return;
}
function _h264bsdCheckValidParamSets($pStorage) {
 $pStorage = $pStorage|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_h264bsdValidParamSets($pStorage)|0);
 $1 = ($0|0)==(0);
 $2 = $1&1;
 return ($2|0);
}
function _h264bsdVideoRange($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 80|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = ((($1)) + 84|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = ((($7)) + 24|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if (!($11)) {
     $12 = ((($7)) + 32|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0);
     if (!($14)) {
      $$0 = 1;
      return ($$0|0);
     }
    }
   }
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function _h264bsdMatrixCoefficients($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 2;
 } else {
  $3 = ((($1)) + 80|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 2;
  } else {
   $6 = ((($1)) + 84|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 2;
   } else {
    $9 = ((($7)) + 24|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     $$0 = 2;
    } else {
     $12 = ((($7)) + 36|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0);
     if ($14) {
      $$0 = 2;
     } else {
      $15 = ((($7)) + 48|0);
      $16 = HEAP32[$15>>2]|0;
      $$0 = $16;
     }
    }
   }
  }
 }
 return ($$0|0);
}
function _h264bsdCroppingParams($pStorage,$croppingFlag,$leftOffset,$width,$topOffset,$height) {
 $pStorage = $pStorage|0;
 $croppingFlag = $croppingFlag|0;
 $leftOffset = $leftOffset|0;
 $width = $width|0;
 $topOffset = $topOffset|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   HEAP32[$croppingFlag>>2] = 1;
   $6 = ((($1)) + 64|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 << 1;
   HEAP32[$leftOffset>>2] = $8;
   $9 = ((($1)) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 << 4;
   $12 = HEAP32[$6>>2]|0;
   $13 = ((($1)) + 68|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($12))|0;
   $16 = $15 << 1;
   $17 = (($11) - ($16))|0;
   HEAP32[$width>>2] = $17;
   $18 = ((($1)) + 72|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 << 1;
   HEAP32[$topOffset>>2] = $20;
   $21 = ((($1)) + 56|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 << 4;
   $24 = HEAP32[$18>>2]|0;
   $25 = ((($1)) + 76|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + ($24))|0;
   $28 = $27 << 1;
   $29 = (($23) - ($28))|0;
   $storemerge = $29;
   HEAP32[$height>>2] = $storemerge;
   return;
  }
 }
 HEAP32[$croppingFlag>>2] = 0;
 HEAP32[$leftOffset>>2] = 0;
 HEAP32[$width>>2] = 0;
 HEAP32[$topOffset>>2] = 0;
 $storemerge = 0;
 HEAP32[$height>>2] = $storemerge;
 return;
}
function _h264bsdSampleAspectRatio($pStorage,$sarWidth,$sarHeight) {
 $pStorage = $pStorage|0;
 $sarWidth = $sarWidth|0;
 $sarHeight = $sarHeight|0;
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $h$0 = 0, $or$cond = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $h$0 = 1;$w$0 = 1;
  } else {
   $3 = ((($1)) + 80|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    $h$0 = 1;$w$0 = 1;
   } else {
    $6 = ((($1)) + 84|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     $h$0 = 1;$w$0 = 1;
    } else {
     $9 = HEAP32[$7>>2]|0;
     $10 = ($9|0)==(0);
     if ($10) {
      $h$0 = 1;$w$0 = 1;
     } else {
      $11 = ((($7)) + 4|0);
      $12 = HEAP32[$11>>2]|0;
      do {
       switch ($12|0) {
       case 1: case 0:  {
        $h$0 = $12;$w$0 = $12;
        break L1;
        break;
       }
       case 2:  {
        $h$0 = 11;$w$0 = 12;
        break L1;
        break;
       }
       case 3:  {
        $h$0 = 11;$w$0 = 10;
        break L1;
        break;
       }
       case 4:  {
        $h$0 = 11;$w$0 = 16;
        break L1;
        break;
       }
       case 5:  {
        $h$0 = 33;$w$0 = 40;
        break L1;
        break;
       }
       case 6:  {
        $h$0 = 11;$w$0 = 24;
        break L1;
        break;
       }
       case 7:  {
        $h$0 = 11;$w$0 = 20;
        break L1;
        break;
       }
       case 8:  {
        $h$0 = 11;$w$0 = 32;
        break L1;
        break;
       }
       case 9:  {
        $h$0 = 33;$w$0 = 80;
        break L1;
        break;
       }
       case 10:  {
        $h$0 = 11;$w$0 = 18;
        break L1;
        break;
       }
       case 11:  {
        $h$0 = 11;$w$0 = 15;
        break L1;
        break;
       }
       case 12:  {
        $h$0 = 33;$w$0 = 64;
        break L1;
        break;
       }
       case 13:  {
        $h$0 = 99;$w$0 = 160;
        break L1;
        break;
       }
       case 255:  {
        $13 = ((($7)) + 8|0);
        $14 = HEAP32[$13>>2]|0;
        $15 = ((($7)) + 12|0);
        $16 = HEAP32[$15>>2]|0;
        $17 = ($14|0)==(0);
        $18 = ($16|0)==(0);
        $or$cond = $17 | $18;
        $$ = $or$cond ? 0 : $14;
        $$2 = $or$cond ? 0 : $16;
        $h$0 = $$2;$w$0 = $$;
        break L1;
        break;
       }
       default: {
        $h$0 = 0;$w$0 = 0;
        break L1;
       }
       }
      } while(0);
     }
    }
   }
  }
 } while(0);
 HEAP32[$sarWidth>>2] = $w$0;
 HEAP32[$sarHeight>>2] = $h$0;
 return;
}
function _h264bsdProfile($pStorage) {
 $pStorage = $pStorage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pStorage)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$1>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _H264SwDecInit($decInst,$noOutputReordering) {
 $decInst = $decInst|0;
 $noOutputReordering = $noOutputReordering|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($decInst|0)==(0|0);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 $1 = (_H264SwDecMalloc(3396)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = -4;
  return ($$0|0);
 }
 $3 = ((($1)) + 8|0);
 $4 = (_h264bsdInit($3,$noOutputReordering)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP32[$1>>2] = 1;
  $6 = ((($1)) + 4|0);
  HEAP32[$6>>2] = 0;
  HEAP32[$decInst>>2] = $1;
  $$0 = 0;
  return ($$0|0);
 } else {
  _h264bsdShutdown($3);
  _H264SwDecFree($1);
  $$0 = -4;
  return ($$0|0);
 }
 return (0)|0;
}
function _H264SwDecRelease($decInst) {
 $decInst = $decInst|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($decInst|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($decInst)) + 8|0);
 _h264bsdShutdown($1);
 _H264SwDecFree($decInst);
 return;
}
function _H264SwDecGetInfo($decInst,$pDecInfo) {
 $decInst = $decInst|0;
 $pDecInfo = $pDecInfo|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($decInst|0)==(0|0);
 $1 = ($pDecInfo|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($decInst)) + 8|0);
 $3 = ((($decInst)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -6;
  return ($$0|0);
 }
 $6 = ((($decInst)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = -6;
  return ($$0|0);
 }
 $9 = (_h264bsdPicWidth($2)|0);
 $10 = $9 << 4;
 $11 = ((($pDecInfo)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = (_h264bsdPicHeight($2)|0);
 $13 = $12 << 4;
 $14 = ((($pDecInfo)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = (_h264bsdVideoRange($2)|0);
 $16 = ((($pDecInfo)) + 12|0);
 HEAP32[$16>>2] = $15;
 $17 = (_h264bsdMatrixCoefficients($2)|0);
 $18 = ((($pDecInfo)) + 16|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($pDecInfo)) + 28|0);
 $20 = ((($pDecInfo)) + 32|0);
 $21 = ((($pDecInfo)) + 36|0);
 $22 = ((($pDecInfo)) + 40|0);
 $23 = ((($pDecInfo)) + 44|0);
 _h264bsdCroppingParams($2,$19,$20,$21,$22,$23);
 $24 = ((($pDecInfo)) + 20|0);
 $25 = ((($pDecInfo)) + 24|0);
 _h264bsdSampleAspectRatio($2,$24,$25);
 $26 = (_h264bsdProfile($2)|0);
 HEAP32[$pDecInfo>>2] = $26;
 $$0 = 0;
 return ($$0|0);
}
function _H264SwDecDecode($decInst,$pInput,$pOutput) {
 $decInst = $decInst|0;
 $pInput = $pInput|0;
 $pOutput = $pOutput|0;
 var $$ = 0, $$$lcssa40 = 0, $$0 = 0, $$4 = 0, $$pre = 0, $$returnValue$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $numReadBytes = 0, $or$cond = 0, $returnValue$029 = 0, $returnValue$2 = 0, $strmLen$027 = 0, $tmpStream$0$lcssa = 0, $tmpStream$028 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numReadBytes = sp;
 $0 = ($pInput|0)==(0|0);
 $1 = ($pOutput|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$pInput>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($pInput)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ($decInst|0)==(0|0);
 if ($7) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$decInst>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$pOutput>>2] = 0;
 HEAP32[$numReadBytes>>2] = 0;
 $10 = ((($pInput)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($decInst)) + 8|0);
 $13 = ((($decInst)) + 3392|0);
 HEAP32[$13>>2] = $11;
 $14 = ((($pInput)) + 8|0);
 $15 = ($8|0)==(2);
 L16: do {
  if ($15) {
   $tmpStream$0$lcssa = $2;
   label = 7;
  } else {
   $returnValue$029 = 1;$strmLen$027 = $5;$tmpStream$028 = $2;
   L17: while(1) {
    $18 = HEAP32[$14>>2]|0;
    $19 = (_h264bsdDecode($12,$tmpStream$028,$strmLen$027,$18,$numReadBytes)|0);
    $20 = HEAP32[$numReadBytes>>2]|0;
    $21 = (($tmpStream$028) + ($20)|0);
    $22 = (($strmLen$027) - ($20))|0;
    $23 = ($22|0)<(0);
    $$ = $23 ? 0 : $22;
    HEAP32[$pOutput>>2] = $21;
    switch ($19|0) {
    case 2:  {
     break L16;
     break;
    }
    case 1:  {
     $$$lcssa40 = $$;
     label = 12;
     break L17;
     break;
    }
    case 5:  {
     $$0 = -4;
     label = 16;
     break L17;
     break;
    }
    case 4:  {
     $36 = (_h264bsdCheckValidParamSets($12)|0);
     $37 = $36 | $$;
     $38 = ($37|0)==(0);
     $$returnValue$0 = $38 ? -2 : $returnValue$029;
     $returnValue$2 = $$returnValue$0;
     break;
    }
    default: {
     $returnValue$2 = $returnValue$029;
    }
    }
    $39 = ($$|0)==(0);
    if ($39) {
     $$0 = $returnValue$2;
     label = 16;
     break;
    }
    $$pre = HEAP32[$decInst>>2]|0;
    $40 = ($$pre|0)==(2);
    if ($40) {
     $tmpStream$0$lcssa = $21;
     label = 7;
     break L16;
    } else {
     $returnValue$029 = $returnValue$2;$strmLen$027 = $$;$tmpStream$028 = $21;
    }
   }
   if ((label|0) == 12) {
    $32 = ((($decInst)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
    $35 = ($$$lcssa40|0)==(0);
    $$4 = $35 ? 2 : 3;
    $$0 = $$4;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 16) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 if ((label|0) == 7) {
  HEAP32[$decInst>>2] = 1;
  $16 = HEAP32[$numReadBytes>>2]|0;
  $17 = (($tmpStream$0$lcssa) + ($16)|0);
  HEAP32[$pOutput>>2] = $17;
 }
 $24 = ((($decInst)) + 1288|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 if ($26) {
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = ((($decInst)) + 1244|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($decInst)) + 1248|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($28|0)==($30|0);
 if ($31) {
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$24>>2] = 0;
 HEAP32[$decInst>>2] = 2;
 $$0 = 3;
 STACKTOP = sp;return ($$0|0);
}
function _H264SwDecNextPicture($decInst,$pOutput,$flushBuffer) {
 $decInst = $decInst|0;
 $pOutput = $pOutput|0;
 $flushBuffer = $flushBuffer|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isIdrPic = 0, $numErrMbs = 0, $or$cond = 0, $picId = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numErrMbs = sp + 8|0;
 $isIdrPic = sp + 4|0;
 $picId = sp;
 $0 = ($decInst|0)==(0|0);
 $1 = ($pOutput|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($flushBuffer|0)==(0);
 $$pre = ((($decInst)) + 8|0);
 if (!($2)) {
  _h264bsdFlushBuffer($$pre);
 }
 $3 = (_h264bsdNextOutputPicture($$pre,$picId,$isIdrPic,$numErrMbs)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$pOutput>>2] = $3;
 $5 = HEAP32[$picId>>2]|0;
 $6 = ((($pOutput)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$isIdrPic>>2]|0;
 $8 = ((($pOutput)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$numErrMbs>>2]|0;
 $10 = ((($pOutput)) + 12|0);
 HEAP32[$10>>2] = $9;
 $$0 = 2;
 STACKTOP = sp;return ($$0|0);
}
function _DetermineNc($pMb,$blockIndex,$pTotalCoeff) {
 $pMb = $pMb|0;
 $blockIndex = $blockIndex|0;
 $pTotalCoeff = $pTotalCoeff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $n$0 = 0, $n$1 = 0, $tmp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_h264bsdNeighbour4x4BlockA($blockIndex)|0);
 $1 = (_h264bsdNeighbour4x4BlockB($blockIndex)|0);
 $2 = ((($0)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)==(4);
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)==(4);
 if ($7) {
  $10 = $3&255;
  $11 = (($pTotalCoeff) + ($10<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  if ($9) {
   $14 = $5&255;
   $15 = (($pTotalCoeff) + ($14<<1)|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16 << 16 >> 16;
   $18 = (($13) + 1)|0;
   $19 = (($18) + ($17))|0;
   $20 = $19 >> 1;
   $n$1 = $20;
   return ($n$1|0);
  }
  $21 = ((($pMb)) + 204|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_h264bsdIsNeighbourAvailable($pMb,$22)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   $n$1 = $13;
   return ($n$1|0);
  }
  $25 = $5&255;
  $26 = HEAP32[$21>>2]|0;
  $27 = (((($26)) + 28|0) + ($25<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = (($13) + 1)|0;
  $31 = (($30) + ($29))|0;
  $32 = $31 >> 1;
  $n$1 = $32;
  return ($n$1|0);
 }
 if ($9) {
  $33 = $5&255;
  $34 = (($pTotalCoeff) + ($33<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = ((($pMb)) + 200|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_h264bsdIsNeighbourAvailable($pMb,$38)|0);
  $40 = ($39|0)==(0);
  if ($40) {
   $n$1 = $36;
   return ($n$1|0);
  }
  $41 = $3&255;
  $42 = HEAP32[$37>>2]|0;
  $43 = (((($42)) + 28|0) + ($41<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = (($36) + 1)|0;
  $47 = (($46) + ($45))|0;
  $48 = $47 >> 1;
  $n$1 = $48;
  return ($n$1|0);
 }
 $49 = ((($pMb)) + 200|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (_h264bsdIsNeighbourAvailable($pMb,$50)|0);
 $52 = ($51|0)==(0);
 if ($52) {
  $n$0 = 0;$tmp$0 = 0;
 } else {
  $53 = $3&255;
  $54 = HEAP32[$49>>2]|0;
  $55 = (((($54)) + 28|0) + ($53<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $n$0 = $57;$tmp$0 = 1;
 }
 $58 = ((($pMb)) + 204|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (_h264bsdIsNeighbourAvailable($pMb,$59)|0);
 $61 = ($60|0)==(0);
 if ($61) {
  $n$1 = $n$0;
  return ($n$1|0);
 }
 $62 = ($tmp$0|0)==(0);
 $63 = $5&255;
 $64 = HEAP32[$58>>2]|0;
 $65 = (((($64)) + 28|0) + ($63<<1)|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66 << 16 >> 16;
 if ($62) {
  $n$1 = $67;
  return ($n$1|0);
 }
 $68 = (($n$0) + 1)|0;
 $69 = (($68) + ($67))|0;
 $70 = $69 >> 1;
 $n$1 = $70;
 return ($n$1|0);
}
function _FillRow1($ref,$fill,$left,$center,$right) {
 $ref = $ref|0;
 $fill = $fill|0;
 $left = $left|0;
 $center = $center|0;
 $right = $right|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _H264SwDecMemcpy($fill,$ref,$center);
 return;
}
function _ShellSort($pPic,$num) {
 $pPic = $pPic|0;
 $num = $num|0;
 var $$not$us = 0, $$off$i = 0, $$off16$i = 0, $$sum = 0, $$sum$us = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $8 = 0, $9 = 0, $brmerge$us = 0, $exitcond = 0, $i$010 = 0, $j$0$lcssa = 0, $j$0$lcssa5 = 0, $j$07 = 0, $j$08 = 0, $j$08$us = 0, $step$012 = 0, $switch3$i = 0, $switch5$i = 0, $tmpPic$sroa$6 = 0, $tmpPic$sroa$8 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpPic$sroa$6 = sp + 16|0;
 $tmpPic$sroa$8 = sp;
 $step$012 = 7;
 while(1) {
  $0 = ($step$012>>>0)<($num>>>0);
  if ($0) {
   $i$010 = $step$012;
   while(1) {
    $1 = (($pPic) + (($i$010*40)|0)|0);
    $2 = $1;
    $3 = $2;
    $4 = HEAP32[$3>>2]|0;
    $5 = (($2) + 4)|0;
    $6 = $5;
    $7 = HEAP32[$6>>2]|0;
    $8 = (((($pPic) + (($i$010*40)|0)|0)) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (((($pPic) + (($i$010*40)|0)|0)) + 12|0);
    $11 = $10;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($11) + 4)|0;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = $tmpPic$sroa$6;
    $18 = $17;
    HEAP32[$18>>2] = $13;
    $19 = (($17) + 4)|0;
    $20 = $19;
    HEAP32[$20>>2] = $16;
    $21 = (((($pPic) + (($i$010*40)|0)|0)) + 20|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (((($pPic) + (($i$010*40)|0)|0)) + 24|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (((($pPic) + (($i$010*40)|0)|0)) + 28|0);
    ;HEAP32[$tmpPic$sroa$8>>2]=HEAP32[$25>>2]|0;HEAP32[$tmpPic$sroa$8+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$tmpPic$sroa$8+8>>2]=HEAP32[$25+8>>2]|0;
    $26 = ($i$010>>>0)<($step$012>>>0);
    L6: do {
     if ($26) {
      $j$0$lcssa = $i$010;
      label = 8;
     } else {
      $27 = ($22|0)==(0);
      $28 = ($24|0)==(0);
      $$off$i = (($22) + -1)|0;
      $switch5$i = ($$off$i>>>0)<(2);
      L8: do {
       if ($27) {
        $j$08$us = $i$010;
        while(1) {
         $$sum$us = (($j$08$us) - ($step$012))|0;
         $29 = (((($pPic) + (($$sum$us*40)|0)|0)) + 20|0);
         $30 = HEAP32[$29>>2]|0;
         $31 = ($30|0)==(0);
         if (!($31)) {
          $j$0$lcssa5 = $j$08$us;
          break L8;
         }
         $32 = (((($pPic) + (($$sum$us*40)|0)|0)) + 24|0);
         $33 = HEAP32[$32>>2]|0;
         $$not$us = ($33|0)!=(0);
         $brmerge$us = $28 | $$not$us;
         if ($brmerge$us) {
          $j$0$lcssa5 = $j$08$us;
          break L8;
         }
         $34 = (($pPic) + (($j$08$us*40)|0)|0);
         $35 = (($pPic) + (($$sum$us*40)|0)|0);
         dest=$34; src=$35; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
         $36 = ($$sum$us>>>0)<($step$012>>>0);
         if ($36) {
          $j$0$lcssa = $$sum$us;
          label = 8;
          break L6;
         } else {
          $j$08$us = $$sum$us;
         }
        }
       } else {
        $j$08 = $i$010;
        while(1) {
         $$sum = (($j$08) - ($step$012))|0;
         $38 = (((($pPic) + (($$sum*40)|0)|0)) + 20|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = ($39|0)==(0);
         do {
          if ($40) {
           label = 16;
          } else {
           $$off16$i = (($39) + -1)|0;
           $41 = $$off16$i | $$off$i;
           $42 = ($41>>>0)<(2);
           if ($42) {
            $43 = (((($pPic) + (($$sum*40)|0)|0)) + 8|0);
            $44 = HEAP32[$43>>2]|0;
            $45 = ($44|0)>($9|0);
            if ($45) {
             $j$0$lcssa5 = $j$08;
             break L8;
            }
            $51 = ($44|0)<($9|0);
            $52 = (($pPic) + (($j$08*40)|0)|0);
            if ($51) {
             $54 = $52;
             break;
            } else {
             $56 = $52;$j$07 = $j$08;
             break L6;
            }
           }
           $switch3$i = ($$off16$i>>>0)<(2);
           if ($switch3$i) {
            $j$0$lcssa5 = $j$08;
            break L8;
           }
           if ($switch5$i) {
            label = 16;
           } else {
            $46 = (((($pPic) + (($$sum*40)|0)|0)) + 8|0);
            $47 = HEAP32[$46>>2]|0;
            $48 = ($47|0)>($9|0);
            if ($48) {
             label = 16;
            } else {
             $j$0$lcssa5 = $j$08;
             break L8;
            }
           }
          }
         } while(0);
         if ((label|0) == 16) {
          label = 0;
          $50 = (($pPic) + (($j$08*40)|0)|0);
          $54 = $50;
         }
         $53 = (($pPic) + (($$sum*40)|0)|0);
         dest=$54; src=$53; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
         $55 = ($$sum>>>0)<($step$012>>>0);
         if ($55) {
          $j$0$lcssa = $$sum;
          label = 8;
          break L6;
         } else {
          $j$08 = $$sum;
         }
        }
       }
      } while(0);
      $49 = (($pPic) + (($j$0$lcssa5*40)|0)|0);
      $56 = $49;$j$07 = $j$0$lcssa5;
     }
    } while(0);
    if ((label|0) == 8) {
     label = 0;
     $37 = (($pPic) + (($j$0$lcssa*40)|0)|0);
     $56 = $37;$j$07 = $j$0$lcssa;
    }
    $57 = $56;
    $58 = $57;
    HEAP32[$58>>2] = $4;
    $59 = (($57) + 4)|0;
    $60 = $59;
    HEAP32[$60>>2] = $7;
    $61 = (((($pPic) + (($j$07*40)|0)|0)) + 8|0);
    HEAP32[$61>>2] = $9;
    $62 = (((($pPic) + (($j$07*40)|0)|0)) + 12|0);
    $63 = $tmpPic$sroa$6;
    $64 = $63;
    $65 = HEAP32[$64>>2]|0;
    $66 = (($63) + 4)|0;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = $62;
    $70 = $69;
    HEAP32[$70>>2] = $65;
    $71 = (($69) + 4)|0;
    $72 = $71;
    HEAP32[$72>>2] = $68;
    $73 = (((($pPic) + (($j$07*40)|0)|0)) + 20|0);
    HEAP32[$73>>2] = $22;
    $74 = (((($pPic) + (($j$07*40)|0)|0)) + 24|0);
    HEAP32[$74>>2] = $24;
    $75 = (((($pPic) + (($j$07*40)|0)|0)) + 28|0);
    ;HEAP32[$75>>2]=HEAP32[$tmpPic$sroa$8>>2]|0;HEAP32[$75+4>>2]=HEAP32[$tmpPic$sroa$8+4>>2]|0;HEAP32[$75+8>>2]=HEAP32[$tmpPic$sroa$8+8>>2]|0;
    $76 = (($i$010) + 1)|0;
    $exitcond = ($76|0)==($num|0);
    if ($exitcond) {
     break;
    } else {
     $i$010 = $76;
    }
   }
  }
  $77 = $step$012 >>> 1;
  $78 = ($77|0)==(0);
  if ($78) {
   break;
  } else {
   $step$012 = $77;
  }
 }
 STACKTOP = sp;return;
}
function _FilterVerLumaEdge($data,$bS,$thresholds,$imageWidth) {
 $data = $data|0;
 $bS = $bS|0;
 $thresholds = $thresholds|0;
 $imageWidth = $imageWidth|0;
 var $$025 = 0, $$128 = 0, $$sum = 0, $$sum19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$024 = 0, $i$127 = 0, $ispos = 0, $ispos1 = 0, $ispos11 = 0, $ispos13 = 0, $ispos15 = 0, $ispos17 = 0, $ispos3 = 0, $ispos5 = 0, $ispos7 = 0, $ispos9 = 0, $neg = 0, $neg10 = 0;
 var $neg12 = 0, $neg14 = 0, $neg16 = 0, $neg18 = 0, $neg2 = 0, $neg4 = 0, $neg6 = 0, $neg8 = 0, $tmp$1 = 0, $tmp$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($thresholds)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($thresholds)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($bS>>>0)<(4);
 if ($4) {
  $7 = (($bS) + -1)|0;
  $8 = HEAP32[$thresholds>>2]|0;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (0 - ($11))|0;
  $13 = (($11) + 1)|0;
  $$025 = $data;$i$024 = 4;
  while(1) {
   $14 = ((($$025)) + -2|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = ((($$025)) + -1|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = HEAP8[$$025>>0]|0;
   $21 = $20&255;
   $22 = ((($$025)) + 1|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = (($19) - ($21))|0;
   $ispos9 = ($25|0)>(-1);
   $neg10 = (0 - ($25))|0;
   $26 = $ispos9 ? $25 : $neg10;
   $27 = ($26>>>0)<($1>>>0);
   if ($27) {
    $28 = (($16) - ($19))|0;
    $ispos11 = ($28|0)>(-1);
    $neg12 = (0 - ($28))|0;
    $29 = $ispos11 ? $28 : $neg12;
    $30 = ($29>>>0)<($3>>>0);
    if ($30) {
     $31 = (($24) - ($21))|0;
     $ispos13 = ($31|0)>(-1);
     $neg14 = (0 - ($31))|0;
     $32 = $ispos13 ? $31 : $neg14;
     $33 = ($32>>>0)<($3>>>0);
     if ($33) {
      $34 = ((($$025)) + -3|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = $35&255;
      $37 = ((($$025)) + 2|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38&255;
      $40 = (($36) - ($19))|0;
      $ispos15 = ($40|0)>(-1);
      $neg16 = (0 - ($40))|0;
      $41 = $ispos15 ? $40 : $neg16;
      $42 = ($41>>>0)<($3>>>0);
      if ($42) {
       $43 = (($19) + 1)|0;
       $44 = (($43) + ($21))|0;
       $45 = $44 >>> 1;
       $46 = $16 << 1;
       $47 = (($45) - ($46))|0;
       $48 = (($47) + ($36))|0;
       $49 = $48 >> 1;
       $50 = (_clip($12,$11,$49)|0);
       $51 = (($50) + ($16))|0;
       $52 = $51&255;
       HEAP8[$14>>0] = $52;
       $tmp$1 = $13;
      } else {
       $tmp$1 = $11;
      }
      $53 = (($39) - ($21))|0;
      $ispos17 = ($53|0)>(-1);
      $neg18 = (0 - ($53))|0;
      $54 = $ispos17 ? $53 : $neg18;
      $55 = ($54>>>0)<($3>>>0);
      if ($55) {
       $56 = (($19) + 1)|0;
       $57 = (($56) + ($21))|0;
       $58 = $57 >>> 1;
       $59 = $24 << 1;
       $60 = (($58) - ($59))|0;
       $61 = (($60) + ($39))|0;
       $62 = $61 >> 1;
       $63 = (_clip($12,$11,$62)|0);
       $64 = (($63) + ($24))|0;
       $65 = $64&255;
       HEAP8[$22>>0] = $65;
       $66 = (($tmp$1) + 1)|0;
       $tmp$2 = $66;
      } else {
       $tmp$2 = $tmp$1;
      }
      $67 = (($21) - ($19))|0;
      $68 = $67 << 2;
      $69 = (($16) + 4)|0;
      $70 = (($69) - ($24))|0;
      $71 = (($70) + ($68))|0;
      $72 = $71 >> 3;
      $73 = (0 - ($tmp$2))|0;
      $74 = (_clip($73,$tmp$2,$72)|0);
      $75 = $19 | 512;
      $$sum = (($75) + ($74))|0;
      $76 = (60442 + ($$sum)|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = $21 | 512;
      $$sum19 = (($78) - ($74))|0;
      $79 = (60442 + ($$sum19)|0);
      $80 = HEAP8[$79>>0]|0;
      HEAP8[$17>>0] = $77;
      HEAP8[$$025>>0] = $80;
     }
    }
   }
   $81 = (($i$024) + -1)|0;
   $82 = (($$025) + ($imageWidth)|0);
   $83 = ($81|0)==(0);
   if ($83) {
    break;
   } else {
    $$025 = $82;$i$024 = $81;
   }
  }
  return;
 }
 $5 = $1 >>> 2;
 $6 = (($5) + 2)|0;
 $$128 = $data;$i$127 = 4;
 while(1) {
  $84 = ((($$128)) + -2|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = ((($$128)) + -1|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = HEAP8[$$128>>0]|0;
  $91 = $90&255;
  $92 = ((($$128)) + 1|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = (($89) - ($91))|0;
  $ispos = ($95|0)>(-1);
  $neg = (0 - ($95))|0;
  $96 = $ispos ? $95 : $neg;
  $97 = ($96>>>0)<($1>>>0);
  do {
   if ($97) {
    $98 = (($86) - ($89))|0;
    $ispos1 = ($98|0)>(-1);
    $neg2 = (0 - ($98))|0;
    $99 = $ispos1 ? $98 : $neg2;
    $100 = ($99>>>0)<($3>>>0);
    if ($100) {
     $101 = (($94) - ($91))|0;
     $ispos3 = ($101|0)>(-1);
     $neg4 = (0 - ($101))|0;
     $102 = $ispos3 ? $101 : $neg4;
     $103 = ($102>>>0)<($3>>>0);
     if ($103) {
      $104 = ($96>>>0)<($6>>>0);
      $105 = ((($$128)) + -3|0);
      $106 = HEAP8[$105>>0]|0;
      $107 = $106&255;
      $108 = ((($$128)) + 2|0);
      $109 = HEAP8[$108>>0]|0;
      $110 = $109&255;
      if ($104) {
       $111 = (($107) - ($89))|0;
       $ispos7 = ($111|0)>(-1);
       $neg8 = (0 - ($111))|0;
       $112 = $ispos7 ? $111 : $neg8;
       $113 = ($112>>>0)<($3>>>0);
       if ($113) {
        $114 = (($89) + ($86))|0;
        $115 = (($114) + ($91))|0;
        $116 = $115 << 1;
        $117 = (($94) + 4)|0;
        $118 = (($117) + ($116))|0;
        $119 = (($118) + ($107))|0;
        $120 = $119 >>> 3;
        $121 = $120&255;
        HEAP8[$87>>0] = $121;
        $122 = (($115) + 2)|0;
        $123 = (($122) + ($107))|0;
        $124 = $123 >>> 2;
        $125 = $124&255;
        HEAP8[$84>>0] = $125;
        $126 = ((($$128)) + -4|0);
        $127 = HEAP8[$126>>0]|0;
        $128 = $127&255;
        $129 = $128 << 1;
        $130 = ($107*3)|0;
        $131 = (($115) + 4)|0;
        $132 = (($131) + ($130))|0;
        $133 = (($132) + ($129))|0;
        $134 = $133 >>> 3;
        $135 = $134&255;
        HEAP8[$105>>0] = $135;
       } else {
        $136 = $86 << 1;
        $137 = (($89) + 2)|0;
        $138 = (($137) + ($136))|0;
        $139 = (($138) + ($94))|0;
        $140 = $139 >>> 2;
        $141 = $140&255;
        HEAP8[$87>>0] = $141;
       }
       $142 = (($110) - ($91))|0;
       $ispos5 = ($142|0)>(-1);
       $neg6 = (0 - ($142))|0;
       $143 = $ispos5 ? $142 : $neg6;
       $144 = ($143>>>0)<($3>>>0);
       if ($144) {
        $145 = (($91) + ($89))|0;
        $146 = (($145) + ($94))|0;
        $147 = $146 << 1;
        $148 = (($86) + 4)|0;
        $149 = (($148) + ($147))|0;
        $150 = (($149) + ($110))|0;
        $151 = $150 >>> 3;
        $152 = $151&255;
        HEAP8[$$128>>0] = $152;
        $153 = (($146) + 2)|0;
        $154 = (($153) + ($110))|0;
        $155 = $154 >>> 2;
        $156 = $155&255;
        HEAP8[$92>>0] = $156;
        $157 = ((($$128)) + 3|0);
        $158 = HEAP8[$157>>0]|0;
        $159 = $158&255;
        $160 = $159 << 1;
        $161 = ($110*3)|0;
        $162 = (($146) + 4)|0;
        $163 = (($162) + ($161))|0;
        $164 = (($163) + ($160))|0;
        $165 = $164 >>> 3;
        $166 = $165&255;
        HEAP8[$108>>0] = $166;
        break;
       }
      } else {
       $167 = $86 << 1;
       $168 = (($89) + 2)|0;
       $169 = (($168) + ($167))|0;
       $170 = (($169) + ($94))|0;
       $171 = $170 >>> 2;
       $172 = $171&255;
       HEAP8[$87>>0] = $172;
      }
      $173 = $94 << 1;
      $174 = (($86) + 2)|0;
      $175 = (($174) + ($91))|0;
      $176 = (($175) + ($173))|0;
      $177 = $176 >>> 2;
      $178 = $177&255;
      HEAP8[$$128>>0] = $178;
     }
    }
   }
  } while(0);
  $179 = (($i$127) + -1)|0;
  $180 = (($$128) + ($imageWidth)|0);
  $181 = ($179|0)==(0);
  if ($181) {
   break;
  } else {
   $$128 = $180;$i$127 = $179;
  }
 }
 return;
}
function _FilterHorLumaEdge($data,$bS,$thresholds,$imageWidth) {
 $data = $data|0;
 $bS = $bS|0;
 $thresholds = $thresholds|0;
 $imageWidth = $imageWidth|0;
 var $$014 = 0, $$pre = 0, $$sum = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $i$013 = 0, $ispos = 0, $ispos1 = 0, $ispos3 = 0, $ispos5 = 0, $ispos7 = 0, $neg = 0, $neg2 = 0, $neg4 = 0, $neg6 = 0;
 var $neg8 = 0, $tmp$1 = 0, $tmp$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($bS) + -1)|0;
 $1 = HEAP32[$thresholds>>2]|0;
 $2 = (($1) + ($0)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (0 - ($imageWidth))|0;
 $6 = $5 << 1;
 $7 = ((($thresholds)) + 4|0);
 $8 = ((($thresholds)) + 8|0);
 $9 = Math_imul($imageWidth, -3)|0;
 $10 = (0 - ($4))|0;
 $11 = (($4) + 1)|0;
 $12 = $imageWidth << 1;
 $$014 = $data;$i$013 = 4;
 while(1) {
  $13 = (($$014) + ($6)|0);
  $14 = (($$014) + ($5)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = HEAP8[$$014>>0]|0;
  $17 = (($$014) + ($imageWidth)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $15&255;
  $20 = $16&255;
  $21 = (($19) - ($20))|0;
  $ispos = ($21|0)>(-1);
  $neg = (0 - ($21))|0;
  $22 = $ispos ? $21 : $neg;
  $23 = HEAP32[$7>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   $25 = HEAP8[$13>>0]|0;
   $26 = $25&255;
   $27 = (($26) - ($19))|0;
   $ispos1 = ($27|0)>(-1);
   $neg2 = (0 - ($27))|0;
   $28 = $ispos1 ? $27 : $neg2;
   $29 = HEAP32[$8>>2]|0;
   $30 = ($28>>>0)<($29>>>0);
   if ($30) {
    $31 = $18&255;
    $32 = (($31) - ($20))|0;
    $ispos3 = ($32|0)>(-1);
    $neg4 = (0 - ($32))|0;
    $33 = $ispos3 ? $32 : $neg4;
    $34 = ($33>>>0)<($29>>>0);
    if ($34) {
     $35 = (($$014) + ($9)|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = (($37) - ($19))|0;
     $ispos5 = ($38|0)>(-1);
     $neg6 = (0 - ($38))|0;
     $39 = $ispos5 ? $38 : $neg6;
     $40 = ($39>>>0)<($29>>>0);
     if ($40) {
      $41 = (($19) + 1)|0;
      $42 = (($41) + ($20))|0;
      $43 = $42 >>> 1;
      $44 = $26 << 1;
      $45 = (($43) - ($44))|0;
      $46 = (($45) + ($37))|0;
      $47 = $46 >> 1;
      $48 = (_clip($10,$4,$47)|0);
      $49 = (($48) + ($26))|0;
      $50 = $49&255;
      HEAP8[$13>>0] = $50;
      $$pre = HEAP32[$8>>2]|0;
      $57 = $$pre;$tmp$1 = $11;
     } else {
      $57 = $29;$tmp$1 = $4;
     }
     $51 = (($$014) + ($12)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = (($53) - ($20))|0;
     $ispos7 = ($54|0)>(-1);
     $neg8 = (0 - ($54))|0;
     $55 = $ispos7 ? $54 : $neg8;
     $56 = ($55>>>0)<($57>>>0);
     if ($56) {
      $58 = (($19) + 1)|0;
      $59 = (($58) + ($20))|0;
      $60 = $59 >>> 1;
      $61 = $31 << 1;
      $62 = (($60) - ($61))|0;
      $63 = (($62) + ($53))|0;
      $64 = $63 >> 1;
      $65 = (_clip($10,$4,$64)|0);
      $66 = (($65) + ($31))|0;
      $67 = $66&255;
      HEAP8[$17>>0] = $67;
      $68 = (($tmp$1) + 1)|0;
      $tmp$2 = $68;
     } else {
      $tmp$2 = $tmp$1;
     }
     $69 = (($20) - ($19))|0;
     $70 = $69 << 2;
     $71 = (4 - ($31))|0;
     $72 = (($71) + ($70))|0;
     $73 = (($72) + ($26))|0;
     $74 = $73 >> 3;
     $75 = (0 - ($tmp$2))|0;
     $76 = (_clip($75,$tmp$2,$74)|0);
     $77 = $19 | 512;
     $$sum = (($77) + ($76))|0;
     $78 = (60442 + ($$sum)|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $20 | 512;
     $$sum9 = (($80) - ($76))|0;
     $81 = (60442 + ($$sum9)|0);
     $82 = HEAP8[$81>>0]|0;
     HEAP8[$14>>0] = $79;
     HEAP8[$$014>>0] = $82;
    }
   }
  }
  $83 = (($i$013) + -1)|0;
  $84 = ((($$014)) + 1|0);
  $85 = ($83|0)==(0);
  if ($85) {
   break;
  } else {
   $$014 = $84;$i$013 = $83;
  }
 }
 return;
}
function _FilterVerChromaEdge($data,$bS,$thresholds,$width) {
 $data = $data|0;
 $bS = $bS|0;
 $thresholds = $thresholds|0;
 $width = $width|0;
 var $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum15 = 0, $$sum16 = 0, $$sum2 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ispos = 0, $ispos11 = 0, $ispos13 = 0, $ispos3 = 0, $ispos5 = 0, $ispos7 = 0, $neg = 0, $neg12 = 0, $neg14 = 0, $neg4 = 0, $neg6 = 0, $neg8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($data)) + -1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = HEAP8[$data>>0]|0;
 $3 = ((($data)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $1&255;
 $6 = $2&255;
 $7 = (($5) - ($6))|0;
 $ispos = ($7|0)>(-1);
 $neg = (0 - ($7))|0;
 $8 = $ispos ? $7 : $neg;
 $9 = ((($thresholds)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 do {
  if ($11) {
   $12 = ((($data)) + -2|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = (($14) - ($5))|0;
   $ispos11 = ($15|0)>(-1);
   $neg12 = (0 - ($15))|0;
   $16 = $ispos11 ? $15 : $neg12;
   $17 = ((($thresholds)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = $4&255;
    $21 = (($20) - ($6))|0;
    $ispos13 = ($21|0)>(-1);
    $neg14 = (0 - ($21))|0;
    $22 = $ispos13 ? $21 : $neg14;
    $23 = ($22>>>0)<($18>>>0);
    if ($23) {
     $24 = ($bS>>>0)<(4);
     if ($24) {
      $25 = (($bS) + -1)|0;
      $26 = HEAP32[$thresholds>>2]|0;
      $27 = (($26) + ($25)|0);
      $28 = HEAP8[$27>>0]|0;
      $29 = $28&255;
      $30 = (($29) + 1)|0;
      $31 = $29 ^ -1;
      $32 = (($6) - ($5))|0;
      $33 = $32 << 2;
      $34 = (4 - ($20))|0;
      $35 = (($34) + ($33))|0;
      $36 = (($35) + ($14))|0;
      $37 = $36 >> 3;
      $38 = (_clip($31,$30,$37)|0);
      $39 = $5 | 512;
      $$sum15 = (($39) + ($38))|0;
      $40 = (60442 + ($$sum15)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $6 | 512;
      $$sum16 = (($42) - ($38))|0;
      $43 = (60442 + ($$sum16)|0);
      $44 = HEAP8[$43>>0]|0;
      HEAP8[$0>>0] = $41;
      HEAP8[$data>>0] = $44;
      break;
     } else {
      $45 = $14 << 1;
      $46 = (($5) + 2)|0;
      $47 = (($46) + ($20))|0;
      $48 = (($47) + ($45))|0;
      $49 = $48 >>> 2;
      $50 = $49&255;
      HEAP8[$0>>0] = $50;
      $51 = $20 << 1;
      $52 = (($6) + 2)|0;
      $53 = (($52) + ($51))|0;
      $54 = (($53) + ($14))|0;
      $55 = $54 >>> 2;
      $56 = $55&255;
      HEAP8[$data>>0] = $56;
      break;
     }
    }
   }
  }
 } while(0);
 $57 = (($data) + ($width)|0);
 $$sum1 = (($width) + -1)|0;
 $58 = (($data) + ($$sum1)|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = HEAP8[$57>>0]|0;
 $$sum2 = (($width) + 1)|0;
 $61 = (($data) + ($$sum2)|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $59&255;
 $64 = $60&255;
 $65 = (($63) - ($64))|0;
 $ispos3 = ($65|0)>(-1);
 $neg4 = (0 - ($65))|0;
 $66 = $ispos3 ? $65 : $neg4;
 $67 = HEAP32[$9>>2]|0;
 $68 = ($66>>>0)<($67>>>0);
 if (!($68)) {
  return;
 }
 $$sum = (($width) + -2)|0;
 $69 = (($data) + ($$sum)|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = (($71) - ($63))|0;
 $ispos5 = ($72|0)>(-1);
 $neg6 = (0 - ($72))|0;
 $73 = $ispos5 ? $72 : $neg6;
 $74 = ((($thresholds)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($73>>>0)<($75>>>0);
 if (!($76)) {
  return;
 }
 $77 = $62&255;
 $78 = (($77) - ($64))|0;
 $ispos7 = ($78|0)>(-1);
 $neg8 = (0 - ($78))|0;
 $79 = $ispos7 ? $78 : $neg8;
 $80 = ($79>>>0)<($75>>>0);
 if (!($80)) {
  return;
 }
 $81 = ($bS>>>0)<(4);
 if ($81) {
  $82 = (($bS) + -1)|0;
  $83 = HEAP32[$thresholds>>2]|0;
  $84 = (($83) + ($82)|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = (($86) + 1)|0;
  $88 = $86 ^ -1;
  $89 = (($64) - ($63))|0;
  $90 = $89 << 2;
  $91 = (4 - ($77))|0;
  $92 = (($91) + ($90))|0;
  $93 = (($92) + ($71))|0;
  $94 = $93 >> 3;
  $95 = (_clip($88,$87,$94)|0);
  $96 = $63 | 512;
  $$sum9 = (($96) + ($95))|0;
  $97 = (60442 + ($$sum9)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $64 | 512;
  $$sum10 = (($99) - ($95))|0;
  $100 = (60442 + ($$sum10)|0);
  $101 = HEAP8[$100>>0]|0;
  HEAP8[$58>>0] = $98;
  HEAP8[$57>>0] = $101;
  return;
 } else {
  $102 = $71 << 1;
  $103 = (($63) + 2)|0;
  $104 = (($103) + ($77))|0;
  $105 = (($104) + ($102))|0;
  $106 = $105 >>> 2;
  $107 = $106&255;
  HEAP8[$58>>0] = $107;
  $108 = $77 << 1;
  $109 = (($64) + 2)|0;
  $110 = (($109) + ($108))|0;
  $111 = (($110) + ($71))|0;
  $112 = $111 >>> 2;
  $113 = $112&255;
  HEAP8[$57>>0] = $113;
  return;
 }
}
function _FilterHorChroma($data,$bS,$thresholds,$width) {
 $data = $data|0;
 $bS = $bS|0;
 $thresholds = $thresholds|0;
 $width = $width|0;
 var $$015 = 0, $$117 = 0, $$sum = 0, $$sum11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $i$014 = 0, $i$116 = 0, $ispos = 0, $ispos1 = 0, $ispos3 = 0;
 var $ispos5 = 0, $ispos7 = 0, $ispos9 = 0, $neg = 0, $neg10 = 0, $neg2 = 0, $neg4 = 0, $neg6 = 0, $neg8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bS>>>0)<(4);
 if ($0) {
  $5 = (($bS) + -1)|0;
  $6 = HEAP32[$thresholds>>2]|0;
  $7 = (($6) + ($5)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = (($9) + 1)|0;
  $11 = (0 - ($width))|0;
  $12 = ((($thresholds)) + 4|0);
  $13 = $11 << 1;
  $14 = ((($thresholds)) + 8|0);
  $15 = $9 ^ -1;
  $$015 = $data;$i$014 = 8;
  while(1) {
   $16 = (($$015) + ($11)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = HEAP8[$$015>>0]|0;
   $19 = (($$015) + ($width)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $17&255;
   $22 = $18&255;
   $23 = (($21) - ($22))|0;
   $ispos5 = ($23|0)>(-1);
   $neg6 = (0 - ($23))|0;
   $24 = $ispos5 ? $23 : $neg6;
   $25 = HEAP32[$12>>2]|0;
   $26 = ($24>>>0)<($25>>>0);
   if ($26) {
    $27 = (($$015) + ($13)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = (($29) - ($21))|0;
    $ispos7 = ($30|0)>(-1);
    $neg8 = (0 - ($30))|0;
    $31 = $ispos7 ? $30 : $neg8;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = $20&255;
     $35 = (($34) - ($22))|0;
     $ispos9 = ($35|0)>(-1);
     $neg10 = (0 - ($35))|0;
     $36 = $ispos9 ? $35 : $neg10;
     $37 = ($36>>>0)<($32>>>0);
     if ($37) {
      $38 = (($22) - ($21))|0;
      $39 = $38 << 2;
      $40 = (4 - ($34))|0;
      $41 = (($40) + ($39))|0;
      $42 = (($41) + ($29))|0;
      $43 = $42 >> 3;
      $44 = (_clip($15,$10,$43)|0);
      $45 = $21 | 512;
      $$sum = (($45) + ($44))|0;
      $46 = (60442 + ($$sum)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $22 | 512;
      $$sum11 = (($48) - ($44))|0;
      $49 = (60442 + ($$sum11)|0);
      $50 = HEAP8[$49>>0]|0;
      HEAP8[$16>>0] = $47;
      HEAP8[$$015>>0] = $50;
     }
    }
   }
   $51 = (($i$014) + -1)|0;
   $52 = ((($$015)) + 1|0);
   $53 = ($51|0)==(0);
   if ($53) {
    break;
   } else {
    $$015 = $52;$i$014 = $51;
   }
  }
  return;
 } else {
  $1 = (0 - ($width))|0;
  $2 = ((($thresholds)) + 4|0);
  $3 = $1 << 1;
  $4 = ((($thresholds)) + 8|0);
  $$117 = $data;$i$116 = 8;
  while(1) {
   $54 = (($$117) + ($1)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = HEAP8[$$117>>0]|0;
   $57 = (($$117) + ($width)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $55&255;
   $60 = $56&255;
   $61 = (($59) - ($60))|0;
   $ispos = ($61|0)>(-1);
   $neg = (0 - ($61))|0;
   $62 = $ispos ? $61 : $neg;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($$117) + ($3)|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = (($67) - ($59))|0;
    $ispos1 = ($68|0)>(-1);
    $neg2 = (0 - ($68))|0;
    $69 = $ispos1 ? $68 : $neg2;
    $70 = HEAP32[$4>>2]|0;
    $71 = ($69>>>0)<($70>>>0);
    if ($71) {
     $72 = $58&255;
     $73 = (($72) - ($60))|0;
     $ispos3 = ($73|0)>(-1);
     $neg4 = (0 - ($73))|0;
     $74 = $ispos3 ? $73 : $neg4;
     $75 = ($74>>>0)<($70>>>0);
     if ($75) {
      $76 = $67 << 1;
      $77 = (($59) + 2)|0;
      $78 = (($77) + ($72))|0;
      $79 = (($78) + ($76))|0;
      $80 = $79 >>> 2;
      $81 = $80&255;
      HEAP8[$54>>0] = $81;
      $82 = $72 << 1;
      $83 = (($60) + 2)|0;
      $84 = (($83) + ($82))|0;
      $85 = (($84) + ($67))|0;
      $86 = $85 >>> 2;
      $87 = $86&255;
      HEAP8[$$117>>0] = $87;
     }
    }
   }
   $88 = (($i$116) + -1)|0;
   $89 = ((($$117)) + 1|0);
   $90 = ($88|0)==(0);
   if ($90) {
    break;
   } else {
    $$117 = $89;$i$116 = $88;
   }
  }
  return;
 }
}
function _FilterHorChromaEdge($data,$bS,$thresholds,$width) {
 $data = $data|0;
 $bS = $bS|0;
 $thresholds = $thresholds|0;
 $width = $width|0;
 var $$pre = 0, $$sum = 0, $$sum$1 = 0, $$sum10 = 0, $$sum1112 = 0, $$sum5 = 0, $$sum5$1 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $ispos = 0, $ispos$1 = 0, $ispos1 = 0, $ispos1$1 = 0, $ispos3 = 0, $ispos3$1 = 0, $neg = 0, $neg$1 = 0, $neg2 = 0, $neg2$1 = 0;
 var $neg4 = 0, $neg4$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($bS) + -1)|0;
 $1 = HEAP32[$thresholds>>2]|0;
 $2 = (($1) + ($0)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($4) + 1)|0;
 $6 = (0 - ($width))|0;
 $7 = ((($thresholds)) + 4|0);
 $8 = $6 << 1;
 $9 = ((($thresholds)) + 8|0);
 $10 = $4 ^ -1;
 $11 = (($data) + ($6)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = HEAP8[$data>>0]|0;
 $14 = (($data) + ($width)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $12&255;
 $17 = $13&255;
 $18 = (($16) - ($17))|0;
 $ispos = ($18|0)>(-1);
 $neg = (0 - ($18))|0;
 $19 = $ispos ? $18 : $neg;
 $20 = HEAP32[$7>>2]|0;
 $21 = ($19>>>0)<($20>>>0);
 if ($21) {
  $22 = (($data) + ($8)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($24) - ($16))|0;
  $ispos1 = ($25|0)>(-1);
  $neg2 = (0 - ($25))|0;
  $26 = $ispos1 ? $25 : $neg2;
  $27 = HEAP32[$9>>2]|0;
  $28 = ($26>>>0)<($27>>>0);
  if ($28) {
   $29 = $15&255;
   $30 = (($29) - ($17))|0;
   $ispos3 = ($30|0)>(-1);
   $neg4 = (0 - ($30))|0;
   $31 = $ispos3 ? $30 : $neg4;
   $32 = ($31>>>0)<($27>>>0);
   if ($32) {
    $33 = (($17) - ($16))|0;
    $34 = $33 << 2;
    $35 = (4 - ($29))|0;
    $36 = (($35) + ($34))|0;
    $37 = (($36) + ($24))|0;
    $38 = $37 >> 3;
    $39 = (_clip($10,$5,$38)|0);
    $40 = $16 | 512;
    $$sum = (($40) + ($39))|0;
    $41 = (60442 + ($$sum)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $17 | 512;
    $$sum5 = (($43) - ($39))|0;
    $44 = (60442 + ($$sum5)|0);
    $45 = HEAP8[$44>>0]|0;
    HEAP8[$11>>0] = $42;
    HEAP8[$data>>0] = $45;
    $$pre = HEAP32[$7>>2]|0;
    $57 = $$pre;
   } else {
    $57 = $20;
   }
  } else {
   $57 = $20;
  }
 } else {
  $57 = $20;
 }
 $46 = ((($data)) + 1|0);
 $$sum9 = (1 - ($width))|0;
 $47 = (($data) + ($$sum9)|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = HEAP8[$46>>0]|0;
 $$sum10 = (($width) + 1)|0;
 $50 = (($data) + ($$sum10)|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $48&255;
 $53 = $49&255;
 $54 = (($52) - ($53))|0;
 $ispos$1 = ($54|0)>(-1);
 $neg$1 = (0 - ($54))|0;
 $55 = $ispos$1 ? $54 : $neg$1;
 $56 = ($55>>>0)<($57>>>0);
 if (!($56)) {
  return;
 }
 $$sum1112 = $8 | 1;
 $58 = (($data) + ($$sum1112)|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = (($60) - ($52))|0;
 $ispos1$1 = ($61|0)>(-1);
 $neg2$1 = (0 - ($61))|0;
 $62 = $ispos1$1 ? $61 : $neg2$1;
 $63 = HEAP32[$9>>2]|0;
 $64 = ($62>>>0)<($63>>>0);
 if (!($64)) {
  return;
 }
 $65 = $51&255;
 $66 = (($65) - ($53))|0;
 $ispos3$1 = ($66|0)>(-1);
 $neg4$1 = (0 - ($66))|0;
 $67 = $ispos3$1 ? $66 : $neg4$1;
 $68 = ($67>>>0)<($63>>>0);
 if (!($68)) {
  return;
 }
 $69 = (($53) - ($52))|0;
 $70 = $69 << 2;
 $71 = (4 - ($65))|0;
 $72 = (($71) + ($70))|0;
 $73 = (($72) + ($60))|0;
 $74 = $73 >> 3;
 $75 = (_clip($10,$5,$74)|0);
 $76 = $52 | 512;
 $$sum$1 = (($76) + ($75))|0;
 $77 = (60442 + ($$sum$1)|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $53 | 512;
 $$sum5$1 = (($79) - ($75))|0;
 $80 = (60442 + ($$sum5$1)|0);
 $81 = HEAP8[$80>>0]|0;
 HEAP8[$47>>0] = $78;
 HEAP8[$46>>0] = $81;
 return;
}
function _ConcealMb($pMb,$currImage,$row,$col,$sliceType,$refData) {
 $pMb = $pMb|0;
 $currImage = $currImage|0;
 $row = $row|0;
 $col = $col|0;
 $sliceType = $sliceType|0;
 $refData = $refData|0;
 var $$pTmp$0 = 0, $$pTmp$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre250 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum100 = 0, $$sum101102 = 0, $$sum103 = 0, $$sum104 = 0, $$sum105 = 0, $$sum106 = 0, $$sum107 = 0, $$sum108 = 0, $$sum109 = 0, $$sum11 = 0, $$sum110111 = 0;
 var $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1920 = 0, $$sum2 = 0, $$sum21 = 0, $$sum2223 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum2728 = 0, $$sum2930 = 0, $$sum3 = 0, $$sum31 = 0, $$sum3233 = 0, $$sum34 = 0;
 var $$sum35 = 0, $$sum36 = 0, $$sum3738 = 0, $$sum39 = 0, $$sum4 = 0, $$sum40 = 0, $$sum41 = 0, $$sum42 = 0, $$sum43 = 0, $$sum44 = 0, $$sum45 = 0, $$sum46 = 0, $$sum47 = 0, $$sum48 = 0, $$sum49 = 0, $$sum50 = 0, $$sum51 = 0, $$sum52 = 0, $$sum53 = 0, $$sum54 = 0;
 var $$sum55 = 0, $$sum56 = 0, $$sum57 = 0, $$sum58 = 0, $$sum59 = 0, $$sum60 = 0, $$sum61 = 0, $$sum62 = 0, $$sum63 = 0, $$sum64 = 0, $$sum65 = 0, $$sum66 = 0, $$sum67 = 0, $$sum68 = 0, $$sum69 = 0, $$sum7 = 0, $$sum70 = 0, $$sum71 = 0, $$sum72 = 0, $$sum7374 = 0;
 var $$sum75 = 0, $$sum7677 = 0, $$sum78 = 0, $$sum79 = 0, $$sum8 = 0, $$sum80 = 0, $$sum8182 = 0, $$sum83 = 0, $$sum84 = 0, $$sum85 = 0, $$sum86 = 0, $$sum87 = 0, $$sum88 = 0, $$sum89 = 0, $$sum9 = 0, $$sum9091 = 0, $$sum92 = 0, $$sum9394 = 0, $$sum95 = 0, $$sum9697 = 0;
 var $$sum98 = 0, $$sum99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $B$0 = 0, $R$0128 = 0, $R$0128141 = 0, $R$0128142161 = 0, $R$0129130 = 0, $a$sroa$0$0 = 0, $a$sroa$0$1232 = 0, $a$sroa$0$2 = 0, $a$sroa$16$0 = 0, $a$sroa$16$1231 = 0;
 var $a$sroa$16$2 = 0, $a$sroa$32$0 = 0, $a$sroa$32$1230 = 0, $a$sroa$32$2 = 0, $a$sroa$48$0 = 0, $a$sroa$48$1229 = 0, $a$sroa$48$2 = 0, $b$sroa$0$0 = 0, $b$sroa$0$1236 = 0, $b$sroa$0$2 = 0, $b$sroa$16$0 = 0, $b$sroa$16$1235 = 0, $b$sroa$16$2 = 0, $b$sroa$32$0 = 0, $b$sroa$32$1234 = 0, $b$sroa$32$2 = 0, $b$sroa$48$0 = 0, $b$sroa$48$1233 = 0, $b$sroa$48$2 = 0, $comp$0227 = 0;
 var $data = 0, $exitcond = 0, $exitcond248 = 0, $exitcond249 = 0, $firstPhase = 0, $hor$0 = 0, $hor$1 = 0, $hor$2 = 0, $hor$3 = 0, $i$0245 = 0, $i$1224 = 0, $j$2 = 0, $j$3118 = 0, $j$3118151 = 0, $j$3118152156 = 0, $j$3119135 = 0, $j$6 = 0, $j$7167 = 0, $j$7167195 = 0, $j$7167196200 = 0;
 var $j$7168181 = 0, $l$sroa$0$0 = 0, $l$sroa$0$1240 = 0, $l$sroa$0$2 = 0, $l$sroa$16$0 = 0, $l$sroa$16$1239 = 0, $l$sroa$16$2 = 0, $l$sroa$32$0 = 0, $l$sroa$32$1238 = 0, $l$sroa$32$2 = 0, $l$sroa$48$0 = 0, $l$sroa$48$1237 = 0, $l$sroa$48$2 = 0, $mbPos$0228 = 0, $mv = 0, $or$cond11 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, $pData$0246 = 0, $pData$1225 = 0, $pTmp$0247 = 0, $pTmp$1226 = 0, $refImage = 0, $ver$0 = 0, $ver$1116 = 0, $ver$1116153155 = 0, $ver$1117136 = 0, $ver$2 = 0, $ver$3165 = 0, $ver$3165197199 = 0, $ver$3166182 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 96|0;
 $firstPhase = sp + 32|0;
 $mv = sp + 24|0;
 $refImage = sp;
 $0 = ((($currImage)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($currImage)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($1, $row)|0;
 $5 = (($4) + ($col))|0;
 _h264bsdSetCurrImageMbPointers($currImage,$5);
 $6 = HEAP32[$currImage>>2]|0;
 $7 = $row << 4;
 $8 = $row << 8;
 $9 = Math_imul($8, $1)|0;
 $10 = $col << 4;
 $$sum = (($9) + ($10))|0;
 $11 = ((($pMb)) + 20|0);
 HEAP32[$11>>2] = 40;
 $12 = ((($pMb)) + 8|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$pMb>>2] = 6;
 $13 = ((($pMb)) + 12|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($pMb)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($pMb)) + 24|0);
 HEAP32[$15>>2] = 0;
 L1: do {
  switch ($sliceType|0) {
  case 2: case 7:  {
   _H264SwDecMemset($data,0,384);
   break;
  }
  default: {
   HEAP32[$mv>>2] = 0;
   $16 = ((($refImage)) + 4|0);
   HEAP32[$16>>2] = $1;
   $17 = ((($refImage)) + 8|0);
   HEAP32[$17>>2] = $3;
   HEAP32[$refImage>>2] = $refData;
   $18 = ($refData|0)==(0|0);
   if ($18) {
    _H264SwDecMemset($data,0,384);
    break L1;
   }
   _h264bsdPredictSamples($data,$mv,$refImage,$10,$7,0,0,16,16);
   _h264bsdWriteMacroblock($currImage,$data);
   STACKTOP = sp;return;
  }
  }
 } while(0);
 _H264SwDecMemset($firstPhase,0,64);
 $19 = ($row|0)==(0);
 if ($19) {
  $a$sroa$0$0 = 0;$a$sroa$16$0 = 0;$a$sroa$32$0 = 0;$a$sroa$48$0 = 0;$hor$0 = 0;
 } else {
  $20 = (0 - ($1))|0;
  $21 = (((($pMb) + (($20*216)|0)|0)) + 196|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $a$sroa$0$0 = 0;$a$sroa$16$0 = 0;$a$sroa$32$0 = 0;$a$sroa$48$0 = 0;$hor$0 = 0;
  } else {
   $24 = $1 << 4;
   $$sum92 = (($$sum) - ($24))|0;
   $25 = (($6) + ($$sum92)|0);
   $$sum9394 = $$sum92 | 1;
   $26 = (($6) + ($$sum9394)|0);
   $27 = HEAP8[$25>>0]|0;
   $28 = $27&255;
   $$sum95 = (($$sum9394) + 1)|0;
   $29 = (($6) + ($$sum95)|0);
   $30 = HEAP8[$26>>0]|0;
   $31 = $30&255;
   $32 = (($31) + ($28))|0;
   $$sum9697 = $$sum92 | 3;
   $33 = (($6) + ($$sum9697)|0);
   $34 = HEAP8[$29>>0]|0;
   $35 = $34&255;
   $36 = (($32) + ($35))|0;
   $$sum98 = (($$sum9697) + 1)|0;
   $37 = (($6) + ($$sum98)|0);
   $38 = HEAP8[$33>>0]|0;
   $39 = $38&255;
   $40 = (($36) + ($39))|0;
   $$sum99 = (($$sum9697) + 2)|0;
   $41 = (($6) + ($$sum99)|0);
   $42 = HEAP8[$37>>0]|0;
   $43 = $42&255;
   $$sum100 = (($$sum9697) + 3)|0;
   $44 = (($6) + ($$sum100)|0);
   $45 = HEAP8[$41>>0]|0;
   $46 = $45&255;
   $47 = (($46) + ($43))|0;
   $$sum101102 = $$sum92 | 7;
   $48 = (($6) + ($$sum101102)|0);
   $49 = HEAP8[$44>>0]|0;
   $50 = $49&255;
   $51 = (($47) + ($50))|0;
   $$sum103 = (($$sum101102) + 1)|0;
   $52 = (($6) + ($$sum103)|0);
   $53 = HEAP8[$48>>0]|0;
   $54 = $53&255;
   $55 = (($51) + ($54))|0;
   $$sum104 = (($$sum101102) + 2)|0;
   $56 = (($6) + ($$sum104)|0);
   $57 = HEAP8[$52>>0]|0;
   $58 = $57&255;
   $$sum105 = (($$sum101102) + 3)|0;
   $59 = (($6) + ($$sum105)|0);
   $60 = HEAP8[$56>>0]|0;
   $61 = $60&255;
   $62 = (($61) + ($58))|0;
   $$sum106 = (($$sum101102) + 4)|0;
   $63 = (($6) + ($$sum106)|0);
   $64 = HEAP8[$59>>0]|0;
   $65 = $64&255;
   $66 = (($62) + ($65))|0;
   $$sum107 = (($$sum101102) + 5)|0;
   $67 = (($6) + ($$sum107)|0);
   $68 = HEAP8[$63>>0]|0;
   $69 = $68&255;
   $70 = (($66) + ($69))|0;
   $$sum108 = (($$sum101102) + 6)|0;
   $71 = (($6) + ($$sum108)|0);
   $72 = HEAP8[$67>>0]|0;
   $73 = $72&255;
   $$sum109 = (($$sum101102) + 7)|0;
   $74 = (($6) + ($$sum109)|0);
   $75 = HEAP8[$71>>0]|0;
   $76 = $75&255;
   $77 = (($76) + ($73))|0;
   $$sum110111 = $$sum92 | 15;
   $78 = (($6) + ($$sum110111)|0);
   $79 = HEAP8[$74>>0]|0;
   $80 = $79&255;
   $81 = (($77) + ($80))|0;
   $82 = HEAP8[$78>>0]|0;
   $83 = $82&255;
   $84 = (($81) + ($83))|0;
   $85 = (($55) + ($40))|0;
   $86 = (($70) + ($85))|0;
   $87 = HEAP32[$firstPhase>>2]|0;
   $88 = (($86) + ($87))|0;
   $89 = (($88) + ($84))|0;
   HEAP32[$firstPhase>>2] = $89;
   $90 = (($85) - ($70))|0;
   $91 = (($90) - ($84))|0;
   $92 = ((($firstPhase)) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($91) + ($93))|0;
   HEAP32[$92>>2] = $94;
   $a$sroa$0$0 = $40;$a$sroa$16$0 = $55;$a$sroa$32$0 = $70;$a$sroa$48$0 = $84;$hor$0 = 1;
  }
 }
 $95 = (($3) + -1)|0;
 $96 = ($95|0)==($row|0);
 if ($96) {
  $B$0 = 0;$b$sroa$0$0 = 0;$b$sroa$16$0 = 0;$b$sroa$32$0 = 0;$b$sroa$48$0 = 0;$hor$1 = $hor$0;
 } else {
  $97 = (((($pMb) + (($1*216)|0)|0)) + 196|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)==(0);
  if ($99) {
   $B$0 = 0;$b$sroa$0$0 = 0;$b$sroa$16$0 = 0;$b$sroa$32$0 = 0;$b$sroa$48$0 = 0;$hor$1 = $hor$0;
  } else {
   $100 = $1 << 8;
   $$sum72 = (($$sum) + ($100))|0;
   $101 = (($6) + ($$sum72)|0);
   $$sum7374 = $$sum72 | 1;
   $102 = (($6) + ($$sum7374)|0);
   $103 = HEAP8[$101>>0]|0;
   $104 = $103&255;
   $$sum75 = (($$sum7374) + 1)|0;
   $105 = (($6) + ($$sum75)|0);
   $106 = HEAP8[$102>>0]|0;
   $107 = $106&255;
   $108 = (($107) + ($104))|0;
   $$sum7677 = $$sum72 | 3;
   $109 = (($6) + ($$sum7677)|0);
   $110 = HEAP8[$105>>0]|0;
   $111 = $110&255;
   $112 = (($108) + ($111))|0;
   $$sum78 = (($$sum7677) + 1)|0;
   $113 = (($6) + ($$sum78)|0);
   $114 = HEAP8[$109>>0]|0;
   $115 = $114&255;
   $116 = (($112) + ($115))|0;
   $$sum79 = (($$sum7677) + 2)|0;
   $117 = (($6) + ($$sum79)|0);
   $118 = HEAP8[$113>>0]|0;
   $119 = $118&255;
   $$sum80 = (($$sum7677) + 3)|0;
   $120 = (($6) + ($$sum80)|0);
   $121 = HEAP8[$117>>0]|0;
   $122 = $121&255;
   $123 = (($122) + ($119))|0;
   $$sum8182 = $$sum72 | 7;
   $124 = (($6) + ($$sum8182)|0);
   $125 = HEAP8[$120>>0]|0;
   $126 = $125&255;
   $127 = (($123) + ($126))|0;
   $$sum83 = (($$sum8182) + 1)|0;
   $128 = (($6) + ($$sum83)|0);
   $129 = HEAP8[$124>>0]|0;
   $130 = $129&255;
   $131 = (($127) + ($130))|0;
   $$sum84 = (($$sum8182) + 2)|0;
   $132 = (($6) + ($$sum84)|0);
   $133 = HEAP8[$128>>0]|0;
   $134 = $133&255;
   $$sum85 = (($$sum8182) + 3)|0;
   $135 = (($6) + ($$sum85)|0);
   $136 = HEAP8[$132>>0]|0;
   $137 = $136&255;
   $138 = (($137) + ($134))|0;
   $$sum86 = (($$sum8182) + 4)|0;
   $139 = (($6) + ($$sum86)|0);
   $140 = HEAP8[$135>>0]|0;
   $141 = $140&255;
   $142 = (($138) + ($141))|0;
   $$sum87 = (($$sum8182) + 5)|0;
   $143 = (($6) + ($$sum87)|0);
   $144 = HEAP8[$139>>0]|0;
   $145 = $144&255;
   $146 = (($142) + ($145))|0;
   $$sum88 = (($$sum8182) + 6)|0;
   $147 = (($6) + ($$sum88)|0);
   $148 = HEAP8[$143>>0]|0;
   $149 = $148&255;
   $$sum89 = (($$sum8182) + 7)|0;
   $150 = (($6) + ($$sum89)|0);
   $151 = HEAP8[$147>>0]|0;
   $152 = $151&255;
   $153 = (($152) + ($149))|0;
   $$sum9091 = $$sum72 | 15;
   $154 = (($6) + ($$sum9091)|0);
   $155 = HEAP8[$150>>0]|0;
   $156 = $155&255;
   $157 = (($153) + ($156))|0;
   $158 = HEAP8[$154>>0]|0;
   $159 = $158&255;
   $160 = (($157) + ($159))|0;
   $161 = (($hor$0) + 1)|0;
   $162 = (($131) + ($116))|0;
   $163 = (($146) + ($162))|0;
   $164 = HEAP32[$firstPhase>>2]|0;
   $165 = (($163) + ($164))|0;
   $166 = (($165) + ($160))|0;
   HEAP32[$firstPhase>>2] = $166;
   $167 = (($162) - ($146))|0;
   $168 = (($167) - ($160))|0;
   $169 = ((($firstPhase)) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($168) + ($170))|0;
   HEAP32[$169>>2] = $171;
   $B$0 = 1;$b$sroa$0$0 = $116;$b$sroa$16$0 = $131;$b$sroa$32$0 = $146;$b$sroa$48$0 = $160;$hor$1 = $161;
  }
 }
 $172 = ($col|0)==(0);
 if ($172) {
  $j$2 = $hor$1;$l$sroa$0$0 = 0;$l$sroa$16$0 = 0;$l$sroa$32$0 = 0;$l$sroa$48$0 = 0;$ver$0 = 0;
 } else {
  $173 = ((($pMb)) + -20|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ($174|0)==(0);
  if ($175) {
   $j$2 = $hor$1;$l$sroa$0$0 = 0;$l$sroa$16$0 = 0;$l$sroa$32$0 = 0;$l$sroa$48$0 = 0;$ver$0 = 0;
  } else {
   $$sum55 = (($$sum) + -1)|0;
   $176 = (($6) + ($$sum55)|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = $1 << 4;
   $$sum57 = (($$sum55) + ($179))|0;
   $180 = (($6) + ($$sum57)|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181&255;
   $183 = (($182) + ($178))|0;
   $184 = $1 << 5;
   $$sum58 = (($$sum55) + ($184))|0;
   $185 = (($6) + ($$sum58)|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $188 = (($183) + ($187))|0;
   $189 = ($1*48)|0;
   $$sum59 = (($$sum55) + ($189))|0;
   $190 = (($6) + ($$sum59)|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = (($188) + ($192))|0;
   $194 = $1 << 6;
   $$sum60 = (($$sum55) + ($194))|0;
   $195 = (($6) + ($$sum60)|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196&255;
   $$sum61 = (($$sum60) + ($179))|0;
   $198 = (($6) + ($$sum61)|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = $199&255;
   $201 = (($200) + ($197))|0;
   $$sum62 = (($$sum60) + ($184))|0;
   $202 = (($6) + ($$sum62)|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203&255;
   $205 = (($201) + ($204))|0;
   $$sum63 = (($$sum60) + ($189))|0;
   $206 = (($6) + ($$sum63)|0);
   $207 = HEAP8[$206>>0]|0;
   $208 = $207&255;
   $209 = (($205) + ($208))|0;
   $$sum64 = (($$sum60) + ($194))|0;
   $210 = (($6) + ($$sum64)|0);
   $211 = HEAP8[$210>>0]|0;
   $212 = $211&255;
   $$sum65 = (($$sum64) + ($179))|0;
   $213 = (($6) + ($$sum65)|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = (($215) + ($212))|0;
   $$sum66 = (($$sum64) + ($184))|0;
   $217 = (($6) + ($$sum66)|0);
   $218 = HEAP8[$217>>0]|0;
   $219 = $218&255;
   $220 = (($216) + ($219))|0;
   $$sum67 = (($$sum64) + ($189))|0;
   $221 = (($6) + ($$sum67)|0);
   $222 = HEAP8[$221>>0]|0;
   $223 = $222&255;
   $224 = (($220) + ($223))|0;
   $$sum68 = (($$sum64) + ($194))|0;
   $225 = (($6) + ($$sum68)|0);
   $226 = HEAP8[$225>>0]|0;
   $227 = $226&255;
   $$sum69 = (($$sum68) + ($179))|0;
   $228 = (($6) + ($$sum69)|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229&255;
   $231 = (($230) + ($227))|0;
   $$sum70 = (($$sum68) + ($184))|0;
   $232 = (($6) + ($$sum70)|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = $233&255;
   $235 = (($231) + ($234))|0;
   $$sum71 = (($$sum68) + ($189))|0;
   $236 = (($6) + ($$sum71)|0);
   $237 = HEAP8[$236>>0]|0;
   $238 = $237&255;
   $239 = (($235) + ($238))|0;
   $240 = (($hor$1) + 1)|0;
   $241 = (($209) + ($193))|0;
   $242 = (($224) + ($241))|0;
   $243 = HEAP32[$firstPhase>>2]|0;
   $244 = (($242) + ($243))|0;
   $245 = (($244) + ($239))|0;
   HEAP32[$firstPhase>>2] = $245;
   $246 = (($241) - ($224))|0;
   $247 = (($246) - ($239))|0;
   $248 = ((($firstPhase)) + 16|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (($247) + ($249))|0;
   HEAP32[$248>>2] = $250;
   $j$2 = $240;$l$sroa$0$0 = $193;$l$sroa$16$0 = $209;$l$sroa$32$0 = $224;$l$sroa$48$0 = $239;$ver$0 = 1;
  }
 }
 $251 = (($1) + -1)|0;
 $252 = ($251|0)==($col|0);
 do {
  if ($252) {
   label = 17;
  } else {
   $253 = ((($pMb)) + 412|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ($254|0)==(0);
   if ($255) {
    label = 17;
   } else {
    $$sum39 = (($$sum) + 16)|0;
    $258 = (($6) + ($$sum39)|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = $259&255;
    $261 = $1 << 4;
    $$sum40 = (($$sum39) + ($261))|0;
    $262 = (($6) + ($$sum40)|0);
    $263 = HEAP8[$262>>0]|0;
    $264 = $263&255;
    $265 = (($264) + ($260))|0;
    $266 = $1 << 5;
    $$sum41 = (($$sum39) + ($266))|0;
    $267 = (($6) + ($$sum41)|0);
    $268 = HEAP8[$267>>0]|0;
    $269 = $268&255;
    $270 = (($265) + ($269))|0;
    $271 = ($1*48)|0;
    $$sum42 = (($$sum39) + ($271))|0;
    $272 = (($6) + ($$sum42)|0);
    $273 = HEAP8[$272>>0]|0;
    $274 = $273&255;
    $275 = (($270) + ($274))|0;
    $276 = $1 << 6;
    $$sum43 = (($$sum39) + ($276))|0;
    $277 = (($6) + ($$sum43)|0);
    $278 = HEAP8[$277>>0]|0;
    $279 = $278&255;
    $$sum44 = (($$sum43) + ($261))|0;
    $280 = (($6) + ($$sum44)|0);
    $281 = HEAP8[$280>>0]|0;
    $282 = $281&255;
    $283 = (($282) + ($279))|0;
    $$sum45 = (($$sum43) + ($266))|0;
    $284 = (($6) + ($$sum45)|0);
    $285 = HEAP8[$284>>0]|0;
    $286 = $285&255;
    $287 = (($283) + ($286))|0;
    $$sum46 = (($$sum43) + ($271))|0;
    $288 = (($6) + ($$sum46)|0);
    $289 = HEAP8[$288>>0]|0;
    $290 = $289&255;
    $291 = (($287) + ($290))|0;
    $$sum47 = (($$sum43) + ($276))|0;
    $292 = (($6) + ($$sum47)|0);
    $293 = HEAP8[$292>>0]|0;
    $294 = $293&255;
    $$sum48 = (($$sum47) + ($261))|0;
    $295 = (($6) + ($$sum48)|0);
    $296 = HEAP8[$295>>0]|0;
    $297 = $296&255;
    $298 = (($297) + ($294))|0;
    $$sum49 = (($$sum47) + ($266))|0;
    $299 = (($6) + ($$sum49)|0);
    $300 = HEAP8[$299>>0]|0;
    $301 = $300&255;
    $302 = (($298) + ($301))|0;
    $$sum50 = (($$sum47) + ($271))|0;
    $303 = (($6) + ($$sum50)|0);
    $304 = HEAP8[$303>>0]|0;
    $305 = $304&255;
    $306 = (($302) + ($305))|0;
    $$sum51 = (($$sum47) + ($276))|0;
    $307 = (($6) + ($$sum51)|0);
    $308 = HEAP8[$307>>0]|0;
    $309 = $308&255;
    $$sum52 = (($$sum51) + ($261))|0;
    $310 = (($6) + ($$sum52)|0);
    $311 = HEAP8[$310>>0]|0;
    $312 = $311&255;
    $313 = (($312) + ($309))|0;
    $$sum53 = (($$sum51) + ($266))|0;
    $314 = (($6) + ($$sum53)|0);
    $315 = HEAP8[$314>>0]|0;
    $316 = $315&255;
    $317 = (($313) + ($316))|0;
    $$sum54 = (($$sum51) + ($271))|0;
    $318 = (($6) + ($$sum54)|0);
    $319 = HEAP8[$318>>0]|0;
    $320 = $319&255;
    $321 = (($317) + ($320))|0;
    $322 = (($j$2) + 1)|0;
    $323 = (($ver$0) + 1)|0;
    $324 = (($291) + ($275))|0;
    $325 = (($306) + ($324))|0;
    $326 = HEAP32[$firstPhase>>2]|0;
    $327 = (($325) + ($326))|0;
    $328 = (($327) + ($321))|0;
    HEAP32[$firstPhase>>2] = $328;
    $329 = (($324) - ($306))|0;
    $330 = (($329) - ($321))|0;
    $331 = ((($firstPhase)) + 16|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = (($330) + ($332))|0;
    HEAP32[$331>>2] = $333;
    $334 = ($hor$1|0)==(0);
    $335 = ($ver$0|0)!=(0);
    $or$cond5 = $334 & $335;
    if ($or$cond5) {
     $336 = (($l$sroa$32$0) + ($l$sroa$48$0))|0;
     $337 = (($336) + ($l$sroa$16$0))|0;
     $338 = (($337) + ($l$sroa$0$0))|0;
     $339 = (($338) - ($275))|0;
     $340 = (($339) - ($291))|0;
     $341 = (($340) - ($306))|0;
     $342 = (($341) - ($321))|0;
     $343 = $342 >> 5;
     $344 = ((($firstPhase)) + 4|0);
     HEAP32[$344>>2] = $343;
    } else {
     if (!($334)) {
      $704 = $335;$R$0129130 = 1;$j$3119135 = $322;$ver$1117136 = $323;
      label = 21;
      break;
     }
    }
    $349 = ($hor$0|0)!=(0);
    $350 = ($B$0|0)!=(0);
    $$pre$phiZ2D = $331;$365 = $333;$705 = $335;$706 = $349;$707 = $350;$R$0128142161 = 1;$j$3118152156 = $322;$ver$1116153155 = $323;
    label = 27;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $256 = ($hor$1|0)==(0);
  $257 = ($ver$0|0)!=(0);
  if ($256) {
   $703 = $257;$R$0128 = 0;$j$3118 = $j$2;$ver$1116 = $ver$0;
   label = 23;
  } else {
   $704 = $257;$R$0129130 = 0;$j$3119135 = $j$2;$ver$1117136 = $ver$0;
   label = 21;
  }
 }
 if ((label|0) == 21) {
  $345 = (($hor$1) + 3)|0;
  $346 = ((($firstPhase)) + 4|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = $347 >> $345;
  HEAP32[$346>>2] = $348;
  $703 = $704;$R$0128 = $R$0129130;$j$3118 = $j$3119135;$ver$1116 = $ver$1117136;
  label = 23;
 }
 do {
  if ((label|0) == 23) {
   $351 = ($ver$1116|0)==(0);
   $352 = ($hor$0|0)!=(0);
   $or$cond7 = $352 & $351;
   $353 = ($B$0|0)!=(0);
   $or$cond9 = $353 & $or$cond7;
   if ($or$cond9) {
    $354 = (($a$sroa$32$0) + ($a$sroa$48$0))|0;
    $355 = (($354) + ($a$sroa$16$0))|0;
    $356 = (($355) + ($a$sroa$0$0))|0;
    $357 = (($356) - ($b$sroa$48$0))|0;
    $358 = (($357) - ($b$sroa$32$0))|0;
    $359 = (($358) - ($b$sroa$16$0))|0;
    $360 = (($359) - ($b$sroa$0$0))|0;
    $361 = $360 >> 5;
    $362 = ((($firstPhase)) + 16|0);
    HEAP32[$362>>2] = $361;
    $623 = $703;$636 = 1;$637 = 1;$R$0128141 = $R$0128;$j$3118151 = $j$3118;
    break;
   }
   if ($351) {
    $623 = $703;$636 = $352;$637 = $353;$R$0128141 = $R$0128;$j$3118151 = $j$3118;
   } else {
    $$phi$trans$insert = ((($firstPhase)) + 16|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$pre$phiZ2D = $$phi$trans$insert;$365 = $$pre;$705 = $703;$706 = $352;$707 = $353;$R$0128142161 = $R$0128;$j$3118152156 = $j$3118;$ver$1116153155 = $ver$1116;
    label = 27;
   }
  }
 } while(0);
 if ((label|0) == 27) {
  $363 = (($ver$1116153155) + 3)|0;
  $364 = $365 >> $363;
  HEAP32[$$pre$phiZ2D>>2] = $364;
  $623 = $705;$636 = $706;$637 = $707;$R$0128141 = $R$0128142161;$j$3118151 = $j$3118152156;
 }
 switch ($j$3118151|0) {
 case 1:  {
  $366 = HEAP32[$firstPhase>>2]|0;
  $367 = $366 >> 4;
  HEAP32[$firstPhase>>2] = $367;
  $382 = $367;
  break;
 }
 case 2:  {
  $368 = HEAP32[$firstPhase>>2]|0;
  $369 = $368 >> 5;
  HEAP32[$firstPhase>>2] = $369;
  $382 = $369;
  break;
 }
 case 3:  {
  $370 = HEAP32[$firstPhase>>2]|0;
  $371 = ($370*21)|0;
  $372 = $371 >> 10;
  HEAP32[$firstPhase>>2] = $372;
  $382 = $372;
  break;
 }
 default: {
  $373 = HEAP32[$firstPhase>>2]|0;
  $374 = $373 >> 6;
  HEAP32[$firstPhase>>2] = $374;
  $382 = $374;
 }
 }
 $375 = ((($firstPhase)) + 4|0);
 $376 = HEAP32[$375>>2]|0;
 $377 = ((($firstPhase)) + 16|0);
 $378 = HEAP32[$377>>2]|0;
 $379 = $378 | $376;
 $380 = ($379|0)==(0);
 if ($380) {
  $381 = ((($firstPhase)) + 60|0);
  HEAP32[$381>>2] = $382;
  $383 = ((($firstPhase)) + 56|0);
  HEAP32[$383>>2] = $382;
  $384 = ((($firstPhase)) + 52|0);
  HEAP32[$384>>2] = $382;
  $385 = ((($firstPhase)) + 48|0);
  HEAP32[$385>>2] = $382;
  $386 = ((($firstPhase)) + 44|0);
  HEAP32[$386>>2] = $382;
  $387 = ((($firstPhase)) + 40|0);
  HEAP32[$387>>2] = $382;
  $388 = ((($firstPhase)) + 36|0);
  HEAP32[$388>>2] = $382;
  $389 = ((($firstPhase)) + 32|0);
  HEAP32[$389>>2] = $382;
  $390 = ((($firstPhase)) + 28|0);
  HEAP32[$390>>2] = $382;
  $391 = ((($firstPhase)) + 24|0);
  HEAP32[$391>>2] = $382;
  $392 = ((($firstPhase)) + 20|0);
  HEAP32[$392>>2] = $382;
  HEAP32[$377>>2] = $382;
  $393 = ((($firstPhase)) + 12|0);
  HEAP32[$393>>2] = $382;
  $394 = ((($firstPhase)) + 8|0);
  HEAP32[$394>>2] = $382;
  HEAP32[$375>>2] = $382;
  $i$0245 = 0;$pData$0246 = $data;$pTmp$0247 = $firstPhase;
 } else {
  $395 = (($382) + ($376))|0;
  $396 = $376 >> 1;
  $397 = (($382) + ($396))|0;
  $398 = (($382) - ($396))|0;
  $399 = (($382) - ($376))|0;
  $400 = (($395) + ($378))|0;
  HEAP32[$firstPhase>>2] = $400;
  $401 = $378 >> 1;
  $402 = (($395) + ($401))|0;
  HEAP32[$377>>2] = $402;
  $403 = (($395) - ($401))|0;
  $404 = ((($firstPhase)) + 32|0);
  HEAP32[$404>>2] = $403;
  $405 = (($395) - ($378))|0;
  $406 = ((($firstPhase)) + 48|0);
  HEAP32[$406>>2] = $405;
  $407 = ((($firstPhase)) + 20|0);
  $408 = (($397) + ($378))|0;
  HEAP32[$375>>2] = $408;
  $409 = (($397) + ($401))|0;
  HEAP32[$407>>2] = $409;
  $410 = (($397) - ($401))|0;
  $411 = ((($firstPhase)) + 36|0);
  HEAP32[$411>>2] = $410;
  $412 = (($397) - ($378))|0;
  $413 = ((($firstPhase)) + 52|0);
  HEAP32[$413>>2] = $412;
  $414 = ((($firstPhase)) + 8|0);
  $415 = ((($firstPhase)) + 24|0);
  $416 = (($398) + ($378))|0;
  HEAP32[$414>>2] = $416;
  $417 = (($398) + ($401))|0;
  HEAP32[$415>>2] = $417;
  $418 = (($398) - ($401))|0;
  $419 = ((($firstPhase)) + 40|0);
  HEAP32[$419>>2] = $418;
  $420 = (($398) - ($378))|0;
  $421 = ((($firstPhase)) + 56|0);
  HEAP32[$421>>2] = $420;
  $422 = ((($firstPhase)) + 12|0);
  $423 = ((($firstPhase)) + 28|0);
  $424 = (($399) + ($378))|0;
  HEAP32[$422>>2] = $424;
  $425 = (($399) + ($401))|0;
  HEAP32[$423>>2] = $425;
  $426 = (($399) - ($401))|0;
  $427 = ((($firstPhase)) + 44|0);
  HEAP32[$427>>2] = $426;
  $428 = (($399) - ($378))|0;
  $429 = ((($firstPhase)) + 60|0);
  HEAP32[$429>>2] = $428;
  $i$0245 = 0;$pData$0246 = $data;$pTmp$0247 = $firstPhase;
 }
 while(1) {
  $430 = $i$0245 >>> 2;
  $431 = $430 & 3;
  $432 = (($pTmp$0247) + ($431<<2)|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = ($433|0)<(0);
  $435 = ($433|0)>(255);
  $436 = $433&255;
  $437 = $435 ? -1 : $436;
  $438 = $434 ? 0 : $437;
  $439 = ((($pData$0246)) + 1|0);
  HEAP8[$pData$0246>>0] = $438;
  $440 = (($i$0245) + 1)|0;
  $441 = $440 & 63;
  $442 = ($441|0)==(0);
  $443 = ((($pTmp$0247)) + 16|0);
  $$pTmp$0 = $442 ? $443 : $pTmp$0247;
  $exitcond249 = ($440|0)==(256);
  if ($exitcond249) {
   break;
  } else {
   $i$0245 = $440;$pData$0246 = $439;$pTmp$0247 = $$pTmp$0;
  }
 }
 $444 = HEAP32[$currImage>>2]|0;
 $445 = Math_imul($3, $1)|0;
 $446 = $445 << 8;
 $447 = $row << 6;
 $448 = Math_imul($447, $1)|0;
 $449 = $col << 3;
 $$sum1 = (($448) + ($449))|0;
 $$sum2 = (($$sum1) + ($446))|0;
 $450 = (($444) + ($$sum2)|0);
 $451 = $1 << 3;
 $452 = (0 - ($451))|0;
 $$sum2930 = $452 | 1;
 $$sum31 = (($$sum2930) + 1)|0;
 $$sum3233 = $452 | 3;
 $$sum34 = (($$sum3233) + 1)|0;
 $$sum35 = (($$sum3233) + 2)|0;
 $$sum36 = (($$sum3233) + 3)|0;
 $$sum3738 = $452 | 7;
 $453 = $1 << 6;
 $$sum1920 = $453 | 1;
 $$sum21 = (($$sum1920) + 1)|0;
 $$sum2223 = $453 | 3;
 $$sum24 = (($$sum2223) + 1)|0;
 $$sum25 = (($$sum2223) + 2)|0;
 $$sum26 = (($$sum2223) + 3)|0;
 $$sum2728 = $453 | 7;
 $$sum12 = (($451) + -1)|0;
 $454 = $1 << 4;
 $$sum13 = (($454) + -1)|0;
 $$sum14 = (($$sum13) + ($451))|0;
 $$sum15 = (($$sum13) + ($454))|0;
 $$sum16 = (($$sum15) + ($451))|0;
 $$sum17 = (($$sum15) + ($454))|0;
 $$sum18 = (($$sum17) + ($451))|0;
 $$sum4 = (($451) + 8)|0;
 $$sum56 = $454 | 8;
 $$sum7 = (($$sum56) + ($451))|0;
 $$sum8 = (($$sum56) + ($454))|0;
 $$sum9 = (($$sum8) + ($451))|0;
 $$sum10 = (($$sum8) + ($454))|0;
 $$sum11 = (($$sum10) + ($451))|0;
 $455 = ((($firstPhase)) + 60|0);
 $456 = ((($firstPhase)) + 56|0);
 $457 = ((($firstPhase)) + 52|0);
 $458 = ((($firstPhase)) + 48|0);
 $459 = ((($firstPhase)) + 44|0);
 $460 = ((($firstPhase)) + 40|0);
 $461 = ((($firstPhase)) + 36|0);
 $462 = ((($firstPhase)) + 32|0);
 $463 = ((($firstPhase)) + 28|0);
 $464 = ((($firstPhase)) + 24|0);
 $465 = ((($firstPhase)) + 20|0);
 $466 = ((($firstPhase)) + 12|0);
 $467 = ((($firstPhase)) + 8|0);
 $468 = $445 << 6;
 $a$sroa$0$1232 = $a$sroa$0$0;$a$sroa$16$1231 = $a$sroa$16$0;$a$sroa$32$1230 = $a$sroa$32$0;$a$sroa$48$1229 = $a$sroa$48$0;$b$sroa$0$1236 = $b$sroa$0$0;$b$sroa$16$1235 = $b$sroa$16$0;$b$sroa$32$1234 = $b$sroa$32$0;$b$sroa$48$1233 = $b$sroa$48$0;$comp$0227 = 0;$l$sroa$0$1240 = $l$sroa$0$0;$l$sroa$16$1239 = $l$sroa$16$0;$l$sroa$32$1238 = $l$sroa$32$0;$l$sroa$48$1237 = $l$sroa$48$0;$mbPos$0228 = $450;
 while(1) {
  _H264SwDecMemset($firstPhase,0,64);
  if ($636) {
   $469 = (($mbPos$0228) + ($452)|0);
   $470 = (($mbPos$0228) + ($$sum2930)|0);
   $471 = HEAP8[$469>>0]|0;
   $472 = $471&255;
   $473 = (($mbPos$0228) + ($$sum31)|0);
   $474 = HEAP8[$470>>0]|0;
   $475 = $474&255;
   $476 = (($475) + ($472))|0;
   $477 = (($mbPos$0228) + ($$sum3233)|0);
   $478 = HEAP8[$473>>0]|0;
   $479 = $478&255;
   $480 = (($mbPos$0228) + ($$sum34)|0);
   $481 = HEAP8[$477>>0]|0;
   $482 = $481&255;
   $483 = (($482) + ($479))|0;
   $484 = (($mbPos$0228) + ($$sum35)|0);
   $485 = HEAP8[$480>>0]|0;
   $486 = $485&255;
   $487 = (($mbPos$0228) + ($$sum36)|0);
   $488 = HEAP8[$484>>0]|0;
   $489 = $488&255;
   $490 = (($489) + ($486))|0;
   $491 = (($mbPos$0228) + ($$sum3738)|0);
   $492 = HEAP8[$487>>0]|0;
   $493 = $492&255;
   $494 = HEAP8[$491>>0]|0;
   $495 = $494&255;
   $496 = (($495) + ($493))|0;
   $497 = (($483) + ($476))|0;
   $498 = (($490) + ($497))|0;
   $499 = HEAP32[$firstPhase>>2]|0;
   $500 = (($498) + ($499))|0;
   $501 = (($500) + ($496))|0;
   HEAP32[$firstPhase>>2] = $501;
   $502 = (($497) - ($490))|0;
   $503 = (($502) - ($496))|0;
   $504 = HEAP32[$375>>2]|0;
   $505 = (($503) + ($504))|0;
   HEAP32[$375>>2] = $505;
   $a$sroa$0$2 = $476;$a$sroa$16$2 = $483;$a$sroa$32$2 = $490;$a$sroa$48$2 = $496;$hor$2 = 1;
  } else {
   $a$sroa$0$2 = $a$sroa$0$1232;$a$sroa$16$2 = $a$sroa$16$1231;$a$sroa$32$2 = $a$sroa$32$1230;$a$sroa$48$2 = $a$sroa$48$1229;$hor$2 = 0;
  }
  if ($637) {
   $506 = (($mbPos$0228) + ($453)|0);
   $507 = (($mbPos$0228) + ($$sum1920)|0);
   $508 = HEAP8[$506>>0]|0;
   $509 = $508&255;
   $510 = (($mbPos$0228) + ($$sum21)|0);
   $511 = HEAP8[$507>>0]|0;
   $512 = $511&255;
   $513 = (($512) + ($509))|0;
   $514 = (($mbPos$0228) + ($$sum2223)|0);
   $515 = HEAP8[$510>>0]|0;
   $516 = $515&255;
   $517 = (($mbPos$0228) + ($$sum24)|0);
   $518 = HEAP8[$514>>0]|0;
   $519 = $518&255;
   $520 = (($519) + ($516))|0;
   $521 = (($mbPos$0228) + ($$sum25)|0);
   $522 = HEAP8[$517>>0]|0;
   $523 = $522&255;
   $524 = (($mbPos$0228) + ($$sum26)|0);
   $525 = HEAP8[$521>>0]|0;
   $526 = $525&255;
   $527 = (($526) + ($523))|0;
   $528 = (($mbPos$0228) + ($$sum2728)|0);
   $529 = HEAP8[$524>>0]|0;
   $530 = $529&255;
   $531 = HEAP8[$528>>0]|0;
   $532 = $531&255;
   $533 = (($532) + ($530))|0;
   $534 = (($hor$2) + 1)|0;
   $535 = (($520) + ($513))|0;
   $536 = (($527) + ($535))|0;
   $537 = HEAP32[$firstPhase>>2]|0;
   $538 = (($536) + ($537))|0;
   $539 = (($538) + ($533))|0;
   HEAP32[$firstPhase>>2] = $539;
   $540 = (($535) - ($527))|0;
   $541 = (($540) - ($533))|0;
   $542 = HEAP32[$375>>2]|0;
   $543 = (($541) + ($542))|0;
   HEAP32[$375>>2] = $543;
   $b$sroa$0$2 = $513;$b$sroa$16$2 = $520;$b$sroa$32$2 = $527;$b$sroa$48$2 = $533;$hor$3 = $534;
  } else {
   $b$sroa$0$2 = $b$sroa$0$1236;$b$sroa$16$2 = $b$sroa$16$1235;$b$sroa$32$2 = $b$sroa$32$1234;$b$sroa$48$2 = $b$sroa$48$1233;$hor$3 = $hor$2;
  }
  if ($623) {
   $544 = ((($mbPos$0228)) + -1|0);
   $545 = HEAP8[$544>>0]|0;
   $546 = $545&255;
   $547 = (($mbPos$0228) + ($$sum12)|0);
   $548 = HEAP8[$547>>0]|0;
   $549 = $548&255;
   $550 = (($549) + ($546))|0;
   $551 = (($mbPos$0228) + ($$sum13)|0);
   $552 = HEAP8[$551>>0]|0;
   $553 = $552&255;
   $554 = (($mbPos$0228) + ($$sum14)|0);
   $555 = HEAP8[$554>>0]|0;
   $556 = $555&255;
   $557 = (($556) + ($553))|0;
   $558 = (($mbPos$0228) + ($$sum15)|0);
   $559 = HEAP8[$558>>0]|0;
   $560 = $559&255;
   $561 = (($mbPos$0228) + ($$sum16)|0);
   $562 = HEAP8[$561>>0]|0;
   $563 = $562&255;
   $564 = (($563) + ($560))|0;
   $565 = (($mbPos$0228) + ($$sum17)|0);
   $566 = HEAP8[$565>>0]|0;
   $567 = $566&255;
   $568 = (($mbPos$0228) + ($$sum18)|0);
   $569 = HEAP8[$568>>0]|0;
   $570 = $569&255;
   $571 = (($570) + ($567))|0;
   $572 = (($hor$3) + 1)|0;
   $573 = (($557) + ($550))|0;
   $574 = (($564) + ($573))|0;
   $575 = HEAP32[$firstPhase>>2]|0;
   $576 = (($574) + ($575))|0;
   $577 = (($576) + ($571))|0;
   HEAP32[$firstPhase>>2] = $577;
   $578 = (($573) - ($564))|0;
   $579 = (($578) - ($571))|0;
   $580 = HEAP32[$377>>2]|0;
   $581 = (($579) + ($580))|0;
   HEAP32[$377>>2] = $581;
   $j$6 = $572;$l$sroa$0$2 = $550;$l$sroa$16$2 = $557;$l$sroa$32$2 = $564;$l$sroa$48$2 = $571;$ver$2 = 1;
  } else {
   $j$6 = $hor$3;$l$sroa$0$2 = $l$sroa$0$1240;$l$sroa$16$2 = $l$sroa$16$1239;$l$sroa$32$2 = $l$sroa$32$1238;$l$sroa$48$2 = $l$sroa$48$1237;$ver$2 = 0;
  }
  do {
   if ($R$0128141) {
    $583 = ((($mbPos$0228)) + 8|0);
    $584 = HEAP8[$583>>0]|0;
    $585 = $584&255;
    $586 = (($mbPos$0228) + ($$sum4)|0);
    $587 = HEAP8[$586>>0]|0;
    $588 = $587&255;
    $589 = (($588) + ($585))|0;
    $590 = (($mbPos$0228) + ($$sum56)|0);
    $591 = HEAP8[$590>>0]|0;
    $592 = $591&255;
    $593 = (($mbPos$0228) + ($$sum7)|0);
    $594 = HEAP8[$593>>0]|0;
    $595 = $594&255;
    $596 = (($595) + ($592))|0;
    $597 = (($mbPos$0228) + ($$sum8)|0);
    $598 = HEAP8[$597>>0]|0;
    $599 = $598&255;
    $600 = (($mbPos$0228) + ($$sum9)|0);
    $601 = HEAP8[$600>>0]|0;
    $602 = $601&255;
    $603 = (($602) + ($599))|0;
    $604 = (($mbPos$0228) + ($$sum10)|0);
    $605 = HEAP8[$604>>0]|0;
    $606 = $605&255;
    $607 = (($mbPos$0228) + ($$sum11)|0);
    $608 = HEAP8[$607>>0]|0;
    $609 = $608&255;
    $610 = (($609) + ($606))|0;
    $611 = (($j$6) + 1)|0;
    $612 = (($ver$2) + 1)|0;
    $613 = (($596) + ($589))|0;
    $614 = (($603) + ($613))|0;
    $615 = HEAP32[$firstPhase>>2]|0;
    $616 = (($614) + ($615))|0;
    $617 = (($616) + ($610))|0;
    HEAP32[$firstPhase>>2] = $617;
    $618 = (($613) - ($603))|0;
    $619 = (($618) - ($610))|0;
    $620 = HEAP32[$377>>2]|0;
    $621 = (($619) + ($620))|0;
    HEAP32[$377>>2] = $621;
    $622 = ($hor$3|0)==(0);
    $or$cond11 = $623 & $622;
    if ($or$cond11) {
     $624 = (($l$sroa$32$2) + ($l$sroa$48$2))|0;
     $625 = (($624) + ($l$sroa$16$2))|0;
     $626 = (($625) + ($l$sroa$0$2))|0;
     $627 = (($626) - ($589))|0;
     $628 = (($627) - ($596))|0;
     $629 = (($628) - ($603))|0;
     $630 = (($629) - ($610))|0;
     $631 = $630 >> 4;
     HEAP32[$375>>2] = $631;
     $648 = $621;$j$7167196200 = $611;$ver$3165197199 = $612;
     label = 54;
     break;
    } else {
     if ($622) {
      $648 = $621;$j$7167196200 = $611;$ver$3165197199 = $612;
      label = 54;
      break;
     } else {
      $j$7168181 = $611;$ver$3166182 = $612;
      label = 49;
      break;
     }
    }
   } else {
    $582 = ($hor$3|0)==(0);
    if ($582) {
     $j$7167 = $j$6;$ver$3165 = $ver$2;
     label = 50;
    } else {
     $j$7168181 = $j$6;$ver$3166182 = $ver$2;
     label = 49;
    }
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   $632 = (($hor$3) + 2)|0;
   $633 = HEAP32[$375>>2]|0;
   $634 = $633 >> $632;
   HEAP32[$375>>2] = $634;
   $j$7167 = $j$7168181;$ver$3165 = $ver$3166182;
   label = 50;
  }
  do {
   if ((label|0) == 50) {
    label = 0;
    $635 = ($ver$3165|0)==(0);
    $or$cond15 = $636 & $635;
    $or$cond17 = $637 & $or$cond15;
    if ($or$cond17) {
     $638 = (($a$sroa$32$2) + ($a$sroa$48$2))|0;
     $639 = (($638) + ($a$sroa$16$2))|0;
     $640 = (($639) + ($a$sroa$0$2))|0;
     $641 = (($640) - ($b$sroa$48$2))|0;
     $642 = (($641) - ($b$sroa$32$2))|0;
     $643 = (($642) - ($b$sroa$16$2))|0;
     $644 = (($643) - ($b$sroa$0$2))|0;
     $645 = $644 >> 4;
     HEAP32[$377>>2] = $645;
     $j$7167195 = $j$7167;
     break;
    }
    if ($635) {
     $j$7167195 = $j$7167;
    } else {
     $$pre250 = HEAP32[$377>>2]|0;
     $648 = $$pre250;$j$7167196200 = $j$7167;$ver$3165197199 = $ver$3165;
     label = 54;
    }
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   $646 = (($ver$3165197199) + 2)|0;
   $647 = $648 >> $646;
   HEAP32[$377>>2] = $647;
   $j$7167195 = $j$7167196200;
  }
  switch ($j$7167195|0) {
  case 1:  {
   $649 = HEAP32[$firstPhase>>2]|0;
   $650 = $649 >> 3;
   HEAP32[$firstPhase>>2] = $650;
   $662 = $650;
   break;
  }
  case 2:  {
   $651 = HEAP32[$firstPhase>>2]|0;
   $652 = $651 >> 4;
   HEAP32[$firstPhase>>2] = $652;
   $662 = $652;
   break;
  }
  case 3:  {
   $653 = HEAP32[$firstPhase>>2]|0;
   $654 = ($653*21)|0;
   $655 = $654 >> 9;
   HEAP32[$firstPhase>>2] = $655;
   $662 = $655;
   break;
  }
  default: {
   $656 = HEAP32[$firstPhase>>2]|0;
   $657 = $656 >> 5;
   HEAP32[$firstPhase>>2] = $657;
   $662 = $657;
  }
  }
  $658 = HEAP32[$375>>2]|0;
  $659 = HEAP32[$377>>2]|0;
  $660 = $659 | $658;
  $661 = ($660|0)==(0);
  if ($661) {
   HEAP32[$455>>2] = $662;
   HEAP32[$456>>2] = $662;
   HEAP32[$457>>2] = $662;
   HEAP32[$458>>2] = $662;
   HEAP32[$459>>2] = $662;
   HEAP32[$460>>2] = $662;
   HEAP32[$461>>2] = $662;
   HEAP32[$462>>2] = $662;
   HEAP32[$463>>2] = $662;
   HEAP32[$464>>2] = $662;
   HEAP32[$465>>2] = $662;
   HEAP32[$377>>2] = $662;
   HEAP32[$466>>2] = $662;
   HEAP32[$467>>2] = $662;
   HEAP32[$375>>2] = $662;
  } else {
   $663 = (($662) + ($658))|0;
   $664 = $658 >> 1;
   $665 = (($662) + ($664))|0;
   $666 = (($662) - ($664))|0;
   $667 = (($662) - ($658))|0;
   $668 = (($663) + ($659))|0;
   HEAP32[$firstPhase>>2] = $668;
   $669 = $659 >> 1;
   $670 = (($663) + ($669))|0;
   HEAP32[$377>>2] = $670;
   $671 = (($663) - ($669))|0;
   HEAP32[$462>>2] = $671;
   $672 = (($663) - ($659))|0;
   HEAP32[$458>>2] = $672;
   $673 = (($665) + ($659))|0;
   HEAP32[$375>>2] = $673;
   $674 = (($665) + ($669))|0;
   HEAP32[$465>>2] = $674;
   $675 = (($665) - ($669))|0;
   HEAP32[$461>>2] = $675;
   $676 = (($665) - ($659))|0;
   HEAP32[$457>>2] = $676;
   $677 = (($666) + ($659))|0;
   HEAP32[$467>>2] = $677;
   $678 = (($666) + ($669))|0;
   HEAP32[$464>>2] = $678;
   $679 = (($666) - ($669))|0;
   HEAP32[$460>>2] = $679;
   $680 = (($666) - ($659))|0;
   HEAP32[$456>>2] = $680;
   $681 = (($667) + ($659))|0;
   HEAP32[$466>>2] = $681;
   $682 = (($667) + ($669))|0;
   HEAP32[$463>>2] = $682;
   $683 = (($667) - ($669))|0;
   HEAP32[$459>>2] = $683;
   $684 = (($667) - ($659))|0;
   HEAP32[$455>>2] = $684;
  }
  $685 = $comp$0227 << 6;
  $$sum3 = (($685) + 256)|0;
  $686 = (($data) + ($$sum3)|0);
  $i$1224 = 0;$pData$1225 = $686;$pTmp$1226 = $firstPhase;
  while(1) {
   $687 = $i$1224 >>> 1;
   $688 = $687 & 3;
   $689 = (($pTmp$1226) + ($688<<2)|0);
   $690 = HEAP32[$689>>2]|0;
   $691 = ($690|0)<(0);
   $692 = ($690|0)>(255);
   $693 = $690&255;
   $694 = $692 ? -1 : $693;
   $695 = $691 ? 0 : $694;
   $696 = ((($pData$1225)) + 1|0);
   HEAP8[$pData$1225>>0] = $695;
   $697 = (($i$1224) + 1)|0;
   $698 = $697 & 15;
   $699 = ($698|0)==(0);
   $700 = ((($pTmp$1226)) + 16|0);
   $$pTmp$1 = $699 ? $700 : $pTmp$1226;
   $exitcond = ($697|0)==(64);
   if ($exitcond) {
    break;
   } else {
    $i$1224 = $697;$pData$1225 = $696;$pTmp$1226 = $$pTmp$1;
   }
  }
  $701 = (($mbPos$0228) + ($468)|0);
  $702 = (($comp$0227) + 1)|0;
  $exitcond248 = ($702|0)==(2);
  if ($exitcond248) {
   break;
  } else {
   $a$sroa$0$1232 = $a$sroa$0$2;$a$sroa$16$1231 = $a$sroa$16$2;$a$sroa$32$1230 = $a$sroa$32$2;$a$sroa$48$1229 = $a$sroa$48$2;$b$sroa$0$1236 = $b$sroa$0$2;$b$sroa$16$1235 = $b$sroa$16$2;$b$sroa$32$1234 = $b$sroa$32$2;$b$sroa$48$1233 = $b$sroa$48$2;$comp$0227 = $702;$l$sroa$0$1240 = $l$sroa$0$2;$l$sroa$16$1239 = $l$sroa$16$2;$l$sroa$32$1238 = $l$sroa$32$2;$l$sroa$48$1237 = $l$sroa$48$2;$mbPos$0228 = $701;
  }
 }
 _h264bsdWriteMacroblock($currImage,$data);
 STACKTOP = sp;return;
}
function _DecodeHrdParameters($pStrmData,$pHrdParameters) {
 $pStrmData = $pStrmData|0;
 $pHrdParameters = $pHrdParameters|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$pHrdParameters)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = HEAP32[$pHrdParameters>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$pHrdParameters>>2] = $3;
 $4 = ($3>>>0)>(32);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = (_h264bsdGetBits($pStrmData,4)|0);
 $6 = ($5|0)==(-1);
 if ($6) {
  $$0 = 1;
  return ($$0|0);
 }
 $7 = ((($pHrdParameters)) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = (_h264bsdGetBits($pStrmData,4)|0);
 $9 = ($8|0)==(-1);
 if ($9) {
  $$0 = 1;
  return ($$0|0);
 }
 $10 = ((($pHrdParameters)) + 8|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$pHrdParameters>>2]|0;
 $12 = ($11|0)==(0);
 L13: do {
  if (!($12)) {
   $i$01 = 0;
   while(1) {
    $13 = (((($pHrdParameters)) + 12|0) + ($i$01<<2)|0);
    $14 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$13)|0);
    $15 = ($14|0)==(0);
    if (!($15)) {
     $$0 = $14;
     label = 17;
     break;
    }
    $16 = HEAP32[$13>>2]|0;
    $17 = ($16|0)==(-1);
    if ($17) {
     $$0 = 1;
     label = 17;
     break;
    }
    $18 = (($16) + 1)|0;
    HEAP32[$13>>2] = $18;
    $19 = HEAP32[$7>>2]|0;
    $20 = (($19) + 6)|0;
    $21 = $18 << $20;
    HEAP32[$13>>2] = $21;
    $22 = (((($pHrdParameters)) + 140|0) + ($i$01<<2)|0);
    $23 = (_h264bsdDecodeExpGolombUnsigned($pStrmData,$22)|0);
    $24 = ($23|0)==(0);
    if (!($24)) {
     $$0 = $23;
     label = 17;
     break;
    }
    $25 = HEAP32[$22>>2]|0;
    $26 = ($25|0)==(-1);
    if ($26) {
     $$0 = 1;
     label = 17;
     break;
    }
    $27 = (($25) + 1)|0;
    HEAP32[$22>>2] = $27;
    $28 = HEAP32[$10>>2]|0;
    $29 = (($28) + 4)|0;
    $30 = $27 << $29;
    HEAP32[$22>>2] = $30;
    $31 = (_h264bsdGetBits($pStrmData,1)|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$0 = 1;
     label = 17;
     break;
    }
    $33 = ($31|0)==(1);
    $34 = $33&1;
    $35 = (((($pHrdParameters)) + 268|0) + ($i$01<<2)|0);
    HEAP32[$35>>2] = $34;
    $36 = (($i$01) + 1)|0;
    $37 = HEAP32[$pHrdParameters>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $i$01 = $36;
    } else {
     break L13;
    }
   }
   if ((label|0) == 17) {
    return ($$0|0);
   }
  }
 } while(0);
 $39 = (_h264bsdGetBits($pStrmData,5)|0);
 $40 = ($39|0)==(-1);
 if ($40) {
  $$0 = 1;
  return ($$0|0);
 }
 $41 = (($39) + 1)|0;
 $42 = ((($pHrdParameters)) + 396|0);
 HEAP32[$42>>2] = $41;
 $43 = (_h264bsdGetBits($pStrmData,5)|0);
 $44 = ($43|0)==(-1);
 if ($44) {
  $$0 = 1;
  return ($$0|0);
 }
 $45 = (($43) + 1)|0;
 $46 = ((($pHrdParameters)) + 400|0);
 HEAP32[$46>>2] = $45;
 $47 = (_h264bsdGetBits($pStrmData,5)|0);
 $48 = ($47|0)==(-1);
 if ($48) {
  $$0 = 1;
  return ($$0|0);
 }
 $49 = (($47) + 1)|0;
 $50 = ((($pHrdParameters)) + 404|0);
 HEAP32[$50>>2] = $49;
 $51 = (_h264bsdGetBits($pStrmData,5)|0);
 $52 = ($51|0)==(-1);
 if ($52) {
  $$0 = 1;
  return ($$0|0);
 }
 $53 = ((($pHrdParameters)) + 408|0);
 HEAP32[$53>>2] = $51;
 $$0 = 0;
 return ($$0|0);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$sroa$0$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$sroa$0$1 = 0;
  STACKTOP = sp;return ($$sroa$0$1|0);
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = ((($__iob)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($4|0);
 $8 = (($6) - ($4))|0;
 $__ns$0 = $7 ? $8 : 0;
 $9 = $__op;
 $10 = (($9) - ($3))|0;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iiii[$14 & 1023]($0,$__ob,$10)|0);
  $16 = ($15|0)==($10|0);
  if (!($16)) {
   HEAP32[$__s>>2] = 0;
   $$sroa$0$1 = 0;
   STACKTOP = sp;return ($$sroa$0$1|0);
  }
 }
 $17 = ($__ns$0|0)>(0);
 do {
  if ($17) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
   $18 = HEAP8[$__sp>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   $21 = ((($__sp)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($__sp)) + 1|0);
   $24 = $20 ? $23 : $22;
   $25 = HEAP32[$0>>2]|0;
   $26 = ((($25)) + 48|0);
   $27 = HEAP32[$26>>2]|0;
   __THREW__ = 0;
   $28 = (invoke_iiii($27|0,($0|0),($24|0),($__ns$0|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
    ___resumeException($32|0);
    // unreachable;
   }
   $31 = ($28|0)==($__ns$0|0);
   if ($31) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
   $$sroa$0$1 = 0;
   STACKTOP = sp;return ($$sroa$0$1|0);
  }
 } while(0);
 $34 = (($2) - ($9))|0;
 $35 = ($34|0)>(0);
 if ($35) {
  $36 = HEAP32[$0>>2]|0;
  $37 = ((($36)) + 48|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (FUNCTION_TABLE_iiii[$38 & 1023]($0,$__op,$34)|0);
  $40 = ($39|0)==($34|0);
  if (!($40)) {
   HEAP32[$__s>>2] = 0;
   $$sroa$0$1 = 0;
   STACKTOP = sp;return ($$sroa$0$1|0);
  }
 }
 HEAP32[$5>>2] = 0;
 $$sroa$0$1 = $0;
 STACKTOP = sp;return ($$sroa$0$1|0);
}
function _H264SwDecMalloc($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $0;
 $2 = (_malloc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _H264SwDecFree($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function _H264SwDecMemcpy($dest,$src,$count) {
 $dest = $dest|0;
 $src = $src|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dest;
 $1 = $src;
 $2 = $count;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _memcpy(($3|0),($4|0),($5|0))|0;
 STACKTOP = sp;return;
}
function _H264SwDecMemset($ptr,$value,$count) {
 $ptr = $ptr|0;
 $value = $value|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $value;
 $2 = $count;
 $3 = $0;
 $4 = $1;
 $5 = $4&255;
 $6 = $2;
 _memset(($3|0),($5|0),($6|0))|0;
 STACKTOP = sp;return;
}
function __ZN38EmscriptenBindingInitializer_NetStreamC2Ev($this) {
 $this = $this|0;
 var $$byval_copy = 0, $$byval_copy56 = 0, $$field = 0, $$field44 = 0, $$field49 = 0, $$field52 = 0, $$index1 = 0, $$index13 = 0, $$index15 = 0, $$index20 = 0, $$index22 = 0, $$index27 = 0, $$index29 = 0, $$index31 = 0, $$index39 = 0, $$index41 = 0, $$index43 = 0, $$index47 = 0, $$index51 = 0, $$index55 = 0;
 var $$index6 = 0, $$index8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_getActualType$i = 0, $args$i = 0, $args$i$i = 0, $args$i2 = 0, $args$i5 = 0, $args$i8 = 0, $destructor$i = 0, $downcast$i = 0, $getter$i$field = 0, $getter$i$field33 = 0;
 var $getter$i$index32 = 0, $gter$i = 0, $invoke$i$i = 0, $invoker$i = 0, $invoker$i1 = 0, $invoker$i4 = 0, $invoker$i7 = 0, $memberFunction$i$field = 0, $memberFunction$i$field3 = 0, $memberFunction$i$index2 = 0, $memberFunction$i3$field = 0, $memberFunction$i3$field10 = 0, $memberFunction$i3$index9 = 0, $memberFunction$i6$field = 0, $memberFunction$i6$field17 = 0, $memberFunction$i6$index16 = 0, $memberFunction$i9$field = 0, $memberFunction$i9$field24 = 0, $memberFunction$i9$index23 = 0, $setter$i$field = 0;
 var $setter$i$field36 = 0, $setter$i$index35 = 0, $ster$i = 0, $upcast$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy56 = sp + 344|0;
 $$byval_copy = sp + 336|0;
 $4 = sp + 312|0;
 $5 = sp + 304|0;
 $6 = sp + 288|0;
 $7 = sp + 280|0;
 $8 = sp + 56|0;
 $9 = sp + 48|0;
 $13 = sp + 256|0;
 $args$i8 = sp + 359|0;
 $14 = sp + 40|0;
 $18 = sp + 232|0;
 $args$i5 = sp + 358|0;
 $19 = sp + 32|0;
 $23 = sp + 208|0;
 $args$i2 = sp + 357|0;
 $24 = sp + 24|0;
 $28 = sp + 184|0;
 $args$i = sp + 356|0;
 $29 = sp + 16|0;
 $args$i$i = sp + 355|0;
 $33 = sp + 8|0;
 $35 = sp + 354|0;
 $36 = sp;
 $44 = sp + 353|0;
 $45 = sp + 352|0;
 $46 = sp + 104|0;
 $47 = sp + 96|0;
 $48 = sp + 88|0;
 $49 = sp + 80|0;
 $50 = sp + 72|0;
 $51 = sp + 64|0;
 $43 = $this;
 $41 = $44;
 $42 = 62804;
 __ZN10emscripten8internal11NoBaseClass6verifyI9NetStreamEEvv();
 $_getActualType$i = 346;
 $52 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI9NetStreamEEPFvvEv()|0);
 $upcast$i = $52;
 $53 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI9NetStreamEEPFvvEv()|0);
 $downcast$i = $53;
 $destructor$i = 347;
 $54 = (__ZN10emscripten8internal6TypeIDI9NetStreamE3getEv()|0);
 $55 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9NetStreamEEE3getEv()|0);
 $56 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9NetStreamEEE3getEv()|0);
 $57 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $58 = $_getActualType$i;
 $40 = $58;
 $59 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $60 = $_getActualType$i;
 $61 = $upcast$i;
 $39 = $61;
 $62 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $63 = $upcast$i;
 $64 = $downcast$i;
 $38 = $64;
 $65 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $66 = $downcast$i;
 $67 = $42;
 $68 = $destructor$i;
 $37 = $68;
 $69 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 $70 = $destructor$i;
 __embind_register_class(($54|0),($55|0),($56|0),($57|0),($59|0),($60|0),($62|0),($63|0),($65|0),($66|0),($67|0),($69|0),($70|0));
 ;HEAP8[$36>>0]=HEAP8[$45>>0]|0;
 $34 = $44;
 $71 = $34;
 ;HEAP8[$33>>0]=HEAP8[$35>>0]|0;
 $31 = $71;
 $32 = 348;
 $72 = $31;
 $invoke$i$i = 349;
 $73 = (__ZN10emscripten8internal6TypeIDI9NetStreamE3getEv()|0);
 $74 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9NetStreamOP10MonaClientEE8getCountEv($args$i$i)|0);
 $75 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9NetStreamOP10MonaClientEE8getTypesEv($args$i$i)|0);
 $76 = $invoke$i$i;
 $30 = $76;
 $77 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $78 = $invoke$i$i;
 $79 = $32;
 __embind_register_class_constructor(($73|0),($74|0),($75|0),($77|0),($78|0),($79|0));
 HEAP32[$46>>2] = (350);
 $$index1 = ((($46)) + 4|0);
 HEAP32[$$index1>>2] = 0;
 ;HEAP8[$29>>0]=HEAP8[$46>>0]|0;HEAP8[$29+1>>0]=HEAP8[$46+1>>0]|0;HEAP8[$29+2>>0]=HEAP8[$46+2>>0]|0;HEAP8[$29+3>>0]=HEAP8[$46+3>>0]|0;HEAP8[$29+4>>0]=HEAP8[$46+4>>0]|0;HEAP8[$29+5>>0]=HEAP8[$46+5>>0]|0;HEAP8[$29+6>>0]=HEAP8[$46+6>>0]|0;HEAP8[$29+7>>0]=HEAP8[$46+7>>0]|0;
 $memberFunction$i$field = HEAP32[$29>>2]|0;
 $memberFunction$i$index2 = ((($29)) + 4|0);
 $memberFunction$i$field3 = HEAP32[$memberFunction$i$index2>>2]|0;
 $26 = $72;
 $27 = 62814;
 HEAP32[$28>>2] = $memberFunction$i$field;
 $$index6 = ((($28)) + 4|0);
 HEAP32[$$index6>>2] = $memberFunction$i$field3;
 $80 = $26;
 $invoker$i = 351;
 $81 = (__ZN10emscripten8internal6TypeIDI9NetStreamE3getEv()|0);
 $82 = $27;
 $83 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEENS_3valEbEE8getCountEv($args$i)|0);
 $84 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEENS_3valEbEE8getTypesEv($args$i)|0);
 $85 = $invoker$i;
 $25 = $85;
 $86 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $87 = $invoker$i;
 $88 = (__ZN10emscripten8internal10getContextIM9NetStreamFvNS_3valEbEEEPT_RKS6_($28)|0);
 __embind_register_class_function(($81|0),($82|0),($83|0),($84|0),($86|0),($87|0),($88|0),0);
 HEAP32[$47>>2] = (352);
 $$index8 = ((($47)) + 4|0);
 HEAP32[$$index8>>2] = 0;
 ;HEAP8[$24>>0]=HEAP8[$47>>0]|0;HEAP8[$24+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$47+3>>0]|0;HEAP8[$24+4>>0]=HEAP8[$47+4>>0]|0;HEAP8[$24+5>>0]=HEAP8[$47+5>>0]|0;HEAP8[$24+6>>0]=HEAP8[$47+6>>0]|0;HEAP8[$24+7>>0]=HEAP8[$47+7>>0]|0;
 $memberFunction$i3$field = HEAP32[$24>>2]|0;
 $memberFunction$i3$index9 = ((($24)) + 4|0);
 $memberFunction$i3$field10 = HEAP32[$memberFunction$i3$index9>>2]|0;
 $21 = $80;
 $22 = 62828;
 HEAP32[$23>>2] = $memberFunction$i3$field;
 $$index13 = ((($23)) + 4|0);
 HEAP32[$$index13>>2] = $memberFunction$i3$field10;
 $89 = $21;
 $invoker$i1 = 353;
 $90 = (__ZN10emscripten8internal6TypeIDI9NetStreamE3getEv()|0);
 $91 = $22;
 $92 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerI9NetStreamEENS_3valEiiEE8getCountEv($args$i2)|0);
 $93 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerI9NetStreamEENS_3valEiiEE8getTypesEv($args$i2)|0);
 $94 = $invoker$i1;
 $20 = $94;
 $95 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiiEEEPKcv()|0);
 $96 = $invoker$i1;
 $97 = (__ZN10emscripten8internal10getContextIM9NetStreamFiNS_3valEiiEEEPT_RKS6_($23)|0);
 __embind_register_class_function(($90|0),($91|0),($92|0),($93|0),($95|0),($96|0),($97|0),0);
 HEAP32[$48>>2] = (354);
 $$index15 = ((($48)) + 4|0);
 HEAP32[$$index15>>2] = 0;
 ;HEAP8[$19>>0]=HEAP8[$48>>0]|0;HEAP8[$19+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$48+3>>0]|0;HEAP8[$19+4>>0]=HEAP8[$48+4>>0]|0;HEAP8[$19+5>>0]=HEAP8[$48+5>>0]|0;HEAP8[$19+6>>0]=HEAP8[$48+6>>0]|0;HEAP8[$19+7>>0]=HEAP8[$48+7>>0]|0;
 $memberFunction$i6$field = HEAP32[$19>>2]|0;
 $memberFunction$i6$index16 = ((($19)) + 4|0);
 $memberFunction$i6$field17 = HEAP32[$memberFunction$i6$index16>>2]|0;
 $16 = $89;
 $17 = 62839;
 HEAP32[$18>>2] = $memberFunction$i6$field;
 $$index20 = ((($18)) + 4|0);
 HEAP32[$$index20>>2] = $memberFunction$i6$field17;
 $98 = $16;
 $invoker$i4 = 355;
 $99 = (__ZN10emscripten8internal6TypeIDI9NetStreamE3getEv()|0);
 $100 = $17;
 $101 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getCountEv($args$i5)|0);
 $102 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getTypesEv($args$i5)|0);
 $103 = $invoker$i4;
 $15 = $103;
 $104 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $105 = $invoker$i4;
 $106 = (__ZN10emscripten8internal10getContextIM9NetStreamFvNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($18)|0);
 __embind_register_class_function(($99|0),($100|0),($101|0),($102|0),($104|0),($105|0),($106|0),0);
 HEAP32[$49>>2] = (356);
 $$index22 = ((($49)) + 4|0);
 HEAP32[$$index22>>2] = 0;
 ;HEAP8[$14>>0]=HEAP8[$49>>0]|0;HEAP8[$14+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$49+3>>0]|0;HEAP8[$14+4>>0]=HEAP8[$49+4>>0]|0;HEAP8[$14+5>>0]=HEAP8[$49+5>>0]|0;HEAP8[$14+6>>0]=HEAP8[$49+6>>0]|0;HEAP8[$14+7>>0]=HEAP8[$49+7>>0]|0;
 $memberFunction$i9$field = HEAP32[$14>>2]|0;
 $memberFunction$i9$index23 = ((($14)) + 4|0);
 $memberFunction$i9$field24 = HEAP32[$memberFunction$i9$index23>>2]|0;
 $11 = $98;
 $12 = 62844;
 HEAP32[$13>>2] = $memberFunction$i9$field;
 $$index27 = ((($13)) + 4|0);
 HEAP32[$$index27>>2] = $memberFunction$i9$field24;
 $107 = $11;
 $invoker$i7 = 357;
 $108 = (__ZN10emscripten8internal6TypeIDI9NetStreamE3getEv()|0);
 $109 = $12;
 $110 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEEEE8getCountEv($args$i8)|0);
 $111 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEEEE8getTypesEv($args$i8)|0);
 $112 = $invoker$i7;
 $10 = $112;
 $113 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $114 = $invoker$i7;
 $115 = (__ZN10emscripten8internal10getContextIM9NetStreamFvvEEEPT_RKS5_($13)|0);
 __embind_register_class_function(($108|0),($109|0),($110|0),($111|0),($113|0),($114|0),($115|0),0);
 HEAP32[$50>>2] = (358);
 $$index29 = ((($50)) + 4|0);
 HEAP32[$$index29>>2] = 0;
 HEAP32[$51>>2] = (359);
 $$index31 = ((($51)) + 4|0);
 HEAP32[$$index31>>2] = 0;
 ;HEAP8[$8>>0]=HEAP8[$51>>0]|0;HEAP8[$8+1>>0]=HEAP8[$51+1>>0]|0;HEAP8[$8+2>>0]=HEAP8[$51+2>>0]|0;HEAP8[$8+3>>0]=HEAP8[$51+3>>0]|0;HEAP8[$8+4>>0]=HEAP8[$51+4>>0]|0;HEAP8[$8+5>>0]=HEAP8[$51+5>>0]|0;HEAP8[$8+6>>0]=HEAP8[$51+6>>0]|0;HEAP8[$8+7>>0]=HEAP8[$51+7>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$50>>0]|0;HEAP8[$9+1>>0]=HEAP8[$50+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$50+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$50+3>>0]|0;HEAP8[$9+4>>0]=HEAP8[$50+4>>0]|0;HEAP8[$9+5>>0]=HEAP8[$50+5>>0]|0;HEAP8[$9+6>>0]=HEAP8[$50+6>>0]|0;HEAP8[$9+7>>0]=HEAP8[$50+7>>0]|0;
 $getter$i$field = HEAP32[$9>>2]|0;
 $getter$i$index32 = ((($9)) + 4|0);
 $getter$i$field33 = HEAP32[$getter$i$index32>>2]|0;
 $setter$i$field = HEAP32[$8>>2]|0;
 $setter$i$index35 = ((($8)) + 4|0);
 $setter$i$field36 = HEAP32[$setter$i$index35>>2]|0;
 $2 = $107;
 $3 = 62862;
 HEAP32[$4>>2] = $getter$i$field;
 $$index39 = ((($4)) + 4|0);
 HEAP32[$$index39>>2] = $getter$i$field33;
 HEAP32[$5>>2] = $setter$i$field;
 $$index41 = ((($5)) + 4|0);
 HEAP32[$$index41>>2] = $setter$i$field36;
 $gter$i = 360;
 $ster$i = 361;
 $116 = (__ZN10emscripten8internal6TypeIDI9NetStreamE3getEv()|0);
 $117 = $3;
 $118 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 $119 = $gter$i;
 $1 = $119;
 $120 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $121 = $gter$i;
 $$field = HEAP32[$4>>2]|0;
 $$index43 = ((($4)) + 4|0);
 $$field44 = HEAP32[$$index43>>2]|0;
 HEAP32[$6>>2] = $$field;
 $$index47 = ((($6)) + 4|0);
 HEAP32[$$index47>>2] = $$field44;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;
 $122 = (__ZN10emscripten8internal12GetterPolicyIM9NetStreamKFNS_3valEvEE10getContextES5_($$byval_copy)|0);
 $123 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 $124 = $ster$i;
 $0 = $124;
 $125 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $126 = $ster$i;
 $$field49 = HEAP32[$5>>2]|0;
 $$index51 = ((($5)) + 4|0);
 $$field52 = HEAP32[$$index51>>2]|0;
 HEAP32[$7>>2] = $$field49;
 $$index55 = ((($7)) + 4|0);
 HEAP32[$$index55>>2] = $$field52;
 ;HEAP32[$$byval_copy56>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy56+4>>2]=HEAP32[$7+4>>2]|0;
 $127 = (__ZN10emscripten8internal12SetterPolicyIM9NetStreamFvNS_3valEEE10getContextES5_($$byval_copy56)|0);
 __embind_register_class_property(($116|0),($117|0),($118|0),($120|0),($121|0),($122|0),($123|0),($125|0),($126|0),($127|0));
 STACKTOP = sp;return;
}
function _main() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = 0;
 _emscripten_asm_const_0(0);
 STACKTOP = sp;return 0;
}
function __ZN10MonaClientC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__a$i$i1 = 0, $__a$i$i4 = 0, $__i$i$i = 0, $__i$i$i2 = 0;
 var $__i$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp;
 $17 = sp + 125|0;
 $18 = sp + 124|0;
 $26 = $this;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($27)) + 8|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($27)) + 12|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($27)) + 16|0);
 $25 = $31;
 $32 = $25;
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $22 = $34;
 $21 = $32;
 $35 = $21;
 $20 = $35;
 $36 = $20;
 $19 = $36;
 $37 = $19;
 $__a$i$i = $37;
 $__i$i$i = 0;
 while(1) {
  $38 = $__i$i$i;
  $39 = ($38>>>0)<(3);
  if (!($39)) {
   break;
  }
  $40 = $__i$i$i;
  $41 = $__a$i$i;
  $42 = (($41) + ($40<<2)|0);
  HEAP32[$42>>2] = 0;
  $43 = $__i$i$i;
  $44 = (($43) + 1)|0;
  $__i$i$i = $44;
 }
 $45 = ((($27)) + 28|0);
 $13 = $45;
 $46 = $13;
 $12 = $46;
 $47 = $12;
 $11 = $47;
 $48 = $11;
 $10 = $48;
 $9 = $46;
 $49 = $9;
 $8 = $49;
 $50 = $8;
 $7 = $50;
 $51 = $7;
 $__a$i$i1 = $51;
 $__i$i$i2 = 0;
 while(1) {
  $52 = $__i$i$i2;
  $53 = ($52>>>0)<(3);
  if (!($53)) {
   break;
  }
  $54 = $__i$i$i2;
  $55 = $__a$i$i1;
  $56 = (($55) + ($54<<2)|0);
  HEAP32[$56>>2] = 0;
  $57 = $__i$i$i2;
  $58 = (($57) + 1)|0;
  $__i$i$i2 = $58;
 }
 $59 = ((($27)) + 40|0);
 $6 = $59;
 $60 = $6;
 $5 = $60;
 $61 = $5;
 $4 = $61;
 $62 = $4;
 $3 = $62;
 $2 = $60;
 $63 = $2;
 $1 = $63;
 $64 = $1;
 $0 = $64;
 $65 = $0;
 $__a$i$i4 = $65;
 $__i$i$i5 = 0;
 while(1) {
  $66 = $__i$i$i5;
  $67 = ($66>>>0)<(3);
  if (!($67)) {
   break;
  }
  $68 = $__i$i$i5;
  $69 = $__a$i$i4;
  $70 = (($69) + ($68<<2)|0);
  HEAP32[$70>>2] = 0;
  $71 = $__i$i$i5;
  $72 = (($71) + 1)|0;
  $__i$i$i5 = $72;
 }
 $73 = ((($27)) + 52|0);
 $16 = $73;
 $74 = $16;
 ;HEAP8[$15>>0]=HEAP8[$18>>0]|0;
 $14 = $17;
 __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_($74,$17);
 STACKTOP = sp;return;
}
function __ZN10MonaClientD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZN10emscripten3valD2Ev($2);
  __ZdlPv($2);
 }
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  __ZN10emscripten3valD2Ev($5);
  __ZdlPv($5);
 }
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  __ZN10emscripten3valD2Ev($8);
  __ZdlPv($8);
 }
 $10 = ((($1)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  __ZN10emscripten3valD2Ev($11);
  __ZdlPv($11);
 }
 $13 = ((($1)) + 52|0);
 __ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEED2Ev($13);
 $14 = ((($1)) + 40|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 $15 = ((($1)) + 28|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
 $16 = ((($1)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($16);
 STACKTOP = sp;return;
}
function __ZN10MonaClient11OnWsMessageEN10emscripten3valE($this,$evt) {
 $this = $this|0;
 $evt = $evt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $dataType = 0, $ms = 0, $ms1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $32 = sp + 116|0;
 $33 = sp + 112|0;
 $34 = sp + 108|0;
 $data = sp + 88|0;
 $37 = sp + 84|0;
 $38 = sp + 80|0;
 $ms = sp + 64|0;
 $39 = sp + 48|0;
 $40 = sp + 44|0;
 $41 = sp + 40|0;
 $ms1 = sp + 24|0;
 $42 = sp + 8|0;
 $43 = sp + 4|0;
 $31 = $this;
 $44 = $31;
 $45 = (__ZNK10emscripten3valixIA5_cEES0_RKT_($evt,66269)|0);
 HEAP32[$34>>2] = $45;
 __THREW__ = 0;
 $46 = (invoke_ii(362,($34|0))|0);
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 do {
  if ($48) {
   $69 = ___cxa_find_matching_catch()|0;
   $70 = tempRet0;
   $35 = $69;
   $36 = $70;
  } else {
   HEAP32[$33>>2] = $46;
   __THREW__ = 0;
   invoke_vii(363,($32|0),($33|0));
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if ($50) {
    $71 = ___cxa_find_matching_catch()|0;
    $72 = tempRet0;
    $35 = $71;
    $36 = $72;
    __ZN10emscripten3valD2Ev($33);
    break;
   }
   __ZN10emscripten3valD2Ev($33);
   __ZN10emscripten3valD2Ev($34);
   $dataType = $32;
   __THREW__ = 0;
   $51 = (invoke_iii(364,($evt|0),(66269|0))|0);
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   do {
    if ($53) {
     $73 = ___cxa_find_matching_catch()|0;
     $74 = tempRet0;
     $35 = $73;
     $36 = $74;
    } else {
     HEAP32[$37>>2] = $51;
     __THREW__ = 0;
     invoke_vii(363,($data|0),($37|0));
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if ($55) {
      $75 = ___cxa_find_matching_catch()|0;
      $76 = tempRet0;
      $35 = $75;
      $36 = $76;
      __ZN10emscripten3valD2Ev($37);
      break;
     }
     __ZN10emscripten3valD2Ev($37);
     $56 = ((($44)) + 52|0);
     $30 = $56;
     $57 = $30;
     $29 = $57;
     $58 = $29;
     $59 = ((($58)) + 8|0);
     $28 = $59;
     $60 = $28;
     $27 = $60;
     $61 = $27;
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62>>>0)>(0);
     if (!($63)) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($data);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     $64 = (invoke_iii(365,($data|0),0)|0);
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     L16: do {
      if ($66) {
       label = 13;
      } else {
       $67 = HEAP8[$64>>0]|0;
       $68 = $67 << 24 >> 24;
       switch ($68|0) {
       case 1:  {
        $79 = ((($44)) + 52|0);
        HEAP32[$38>>2] = 0;
        __THREW__ = 0;
        $80 = (invoke_iii(366,($79|0),($38|0))|0);
        $81 = __THREW__; __THREW__ = 0;
        $82 = $81&1;
        if ($82) {
         label = 13;
         break L16;
        }
        $83 = HEAP32[$80>>2]|0;
        $84 = HEAP32[$83>>2]|0;
        $85 = ($84|0)!=(0|0);
        if (!($85)) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($data);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
         STACKTOP = sp;return;
        }
        $24 = $data;
        $25 = 1;
        $26 = -1;
        $86 = $24;
        $87 = $25;
        $88 = $26;
        $23 = $86;
        $89 = $23;
        $22 = $89;
        $90 = $22;
        $21 = $90;
        $91 = $21;
        __THREW__ = 0;
        invoke_viiiii(367,($39|0),($86|0),($87|0),($88|0),($91|0));
        $92 = __THREW__; __THREW__ = 0;
        $93 = $92&1;
        if ($93) {
         label = 13;
         break L16;
        }
        __THREW__ = 0;
        invoke_vii(368,($ms|0),($39|0));
        $94 = __THREW__; __THREW__ = 0;
        $95 = $94&1;
        if ($95) {
         $106 = ___cxa_find_matching_catch()|0;
         $107 = tempRet0;
         $35 = $106;
         $36 = $107;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($39);
         break L16;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($39);
        $96 = ((($44)) + 52|0);
        HEAP32[$40>>2] = 0;
        __THREW__ = 0;
        $97 = (invoke_iii(366,($96|0),($40|0))|0);
        $98 = __THREW__; __THREW__ = 0;
        $99 = $98&1;
        if (!($99)) {
         $100 = HEAP32[$97>>2]|0;
         __THREW__ = 0;
         $101 = (invoke_ii(369,($ms|0))|0);
         $102 = __THREW__; __THREW__ = 0;
         $103 = $102&1;
         if (!($103)) {
          __THREW__ = 0;
          (invoke_iiii(370,($100|0),($101|0),($ms|0))|0);
          $104 = __THREW__; __THREW__ = 0;
          $105 = $104&1;
          if (!($105)) {
           __ZN12MemoryStreamD2Ev($ms);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($data);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
           STACKTOP = sp;return;
          }
         }
        }
        $108 = ___cxa_find_matching_catch()|0;
        $109 = tempRet0;
        $35 = $108;
        $36 = $109;
        __ZN12MemoryStreamD2Ev($ms);
        break L16;
        break;
       }
       case 2:  {
        $110 = ((($44)) + 52|0);
        HEAP32[$41>>2] = 0;
        __THREW__ = 0;
        $111 = (invoke_iii(366,($110|0),($41|0))|0);
        $112 = __THREW__; __THREW__ = 0;
        $113 = $112&1;
        if ($113) {
         label = 13;
         break L16;
        }
        $114 = HEAP32[$111>>2]|0;
        $115 = ((($114)) + 4|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = ($116|0)!=(0|0);
        if (!($117)) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($data);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
         STACKTOP = sp;return;
        }
        $18 = $data;
        $19 = 1;
        $20 = -1;
        $118 = $18;
        $119 = $19;
        $120 = $20;
        $17 = $118;
        $121 = $17;
        $16 = $121;
        $122 = $16;
        $15 = $122;
        $123 = $15;
        __THREW__ = 0;
        invoke_viiiii(367,($42|0),($118|0),($119|0),($120|0),($123|0));
        $124 = __THREW__; __THREW__ = 0;
        $125 = $124&1;
        if ($125) {
         label = 13;
         break L16;
        }
        __THREW__ = 0;
        invoke_vii(368,($ms1|0),($42|0));
        $126 = __THREW__; __THREW__ = 0;
        $127 = $126&1;
        if ($127) {
         $138 = ___cxa_find_matching_catch()|0;
         $139 = tempRet0;
         $35 = $138;
         $36 = $139;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($42);
         break L16;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($42);
        $128 = ((($44)) + 52|0);
        HEAP32[$43>>2] = 0;
        __THREW__ = 0;
        $129 = (invoke_iii(366,($128|0),($43|0))|0);
        $130 = __THREW__; __THREW__ = 0;
        $131 = $130&1;
        if (!($131)) {
         $132 = HEAP32[$129>>2]|0;
         __THREW__ = 0;
         $133 = (invoke_ii(369,($ms1|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if (!($135)) {
          __THREW__ = 0;
          (invoke_iiii(371,($132|0),($133|0),($ms1|0))|0);
          $136 = __THREW__; __THREW__ = 0;
          $137 = $136&1;
          if (!($137)) {
           __ZN12MemoryStreamD2Ev($ms1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($data);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
           STACKTOP = sp;return;
          }
         }
        }
        $140 = ___cxa_find_matching_catch()|0;
        $141 = tempRet0;
        $35 = $140;
        $36 = $141;
        __ZN12MemoryStreamD2Ev($ms1);
        break L16;
        break;
       }
       default: {
        $14 = $data;
        $142 = $14;
        $13 = $142;
        $143 = $13;
        $12 = $143;
        $144 = $12;
        $11 = $144;
        $145 = $11;
        $10 = $145;
        $146 = $10;
        $9 = $146;
        $147 = $9;
        $148 = HEAP8[$147>>0]|0;
        $149 = $148&255;
        $150 = $149 & 1;
        $151 = ($150|0)!=(0);
        if ($151) {
         $3 = $144;
         $152 = $3;
         $2 = $152;
         $153 = $2;
         $1 = $153;
         $154 = $1;
         $155 = ((($154)) + 8|0);
         $156 = HEAP32[$155>>2]|0;
         $163 = $156;
        } else {
         $8 = $144;
         $157 = $8;
         $7 = $157;
         $158 = $7;
         $6 = $158;
         $159 = $6;
         $160 = ((($159)) + 1|0);
         $5 = $160;
         $161 = $5;
         $4 = $161;
         $162 = $4;
         $163 = $162;
        }
        $0 = $163;
        $164 = $0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer>>2] = $164;
        invoke_vii(372,0,($vararg_buffer|0));
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         label = 13;
         break L16;
        }
        $167 = ((($44)) + 12|0);
        $168 = HEAP32[$167>>2]|0;
        __THREW__ = 0;
        invoke_viii(373,($168|0),(66274|0),($data|0));
        $169 = __THREW__; __THREW__ = 0;
        $170 = $169&1;
        if ($170) {
         label = 13;
         break L16;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($data);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
        STACKTOP = sp;return;
       }
       }
      }
     } while(0);
     if ((label|0) == 13) {
      $77 = ___cxa_find_matching_catch()|0;
      $78 = tempRet0;
      $35 = $77;
      $36 = $78;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($data);
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
   $171 = $35;
   $172 = $36;
   ___resumeException($171|0);
   // unreachable;
  }
 } while(0);
 __ZN10emscripten3valD2Ev($34);
 $171 = $35;
 $172 = $36;
 ___resumeException($171|0);
 // unreachable;
}
function __ZN10MonaClient8OnWsOpenEN10emscripten3valE($this,$evt) {
 $this = $this|0;
 $evt = $evt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = 66286;
 _emscripten_log(0,($vararg_buffer|0));
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNK10emscripten3val4callIvJEEET_PKcDpOT0_($3,66302);
 STACKTOP = sp;return;
}
function __ZN10MonaClient12GetWebSocketEN10emscripten3valE($this,$evt) {
 $this = $this|0;
 $evt = $evt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $this;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten3valC2ERKS0_($0,$3);
 $4 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNK10MonaClient4SendERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $buffer;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 __ZNK10emscripten3val4callIvJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEET_PKcDpOT0_($3,66311,$4);
 STACKTOP = sp;return;
}
function __ZN10MonaClient7ConnectEN10emscripten3valENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_($this,$_this,$url,$appName,$roomName) {
 $this = $this|0;
 $_this = $_this|0;
 $url = $url|0;
 $appName = $appName|0;
 $roomName = $roomName|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $WebSocket = 0, $__a$i$i$i = 0, $__a$i$i$i1 = 0, $__a$i$i$i4 = 0;
 var $__a$i$i$i8 = 0, $__i$i$i$i = 0, $__i$i$i$i2 = 0, $__i$i$i$i5 = 0, $__i$i$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $88 = sp + 104|0;
 $WebSocket = sp + 88|0;
 $92 = sp + 76|0;
 $93 = sp + 64|0;
 $94 = sp + 52|0;
 $95 = sp + 40|0;
 $96 = sp + 28|0;
 $97 = sp + 492|0;
 $98 = sp + 24|0;
 $99 = sp + 20|0;
 $100 = sp + 16|0;
 $101 = sp + 12|0;
 $102 = sp + 8|0;
 $103 = sp + 4|0;
 $89 = $this;
 $105 = $89;
 $106 = ((($105)) + 12|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 do {
  if (!($108)) {
   $109 = (__Znwj(4)|0);
   __THREW__ = 0;
   invoke_vii(374,($109|0),($_this|0));
   $110 = __THREW__; __THREW__ = 0;
   $111 = $110&1;
   if (!($111)) {
    $112 = ((($105)) + 12|0);
    HEAP32[$112>>2] = $109;
    break;
   }
   $113 = ___cxa_find_matching_catch()|0;
   $114 = tempRet0;
   $90 = $113;
   $91 = $114;
   __ZdlPv($109);
   $371 = $90;
   $372 = $91;
   ___resumeException($371|0);
   // unreachable;
  }
 } while(0);
 $115 = (__ZN10emscripten3val6globalEPKc(66316)|0);
 HEAP32[$WebSocket>>2] = $115;
 $116 = HEAP32[$105>>2]|0;
 $117 = ($116|0)!=(0|0);
 if ($117) {
  $118 = HEAP32[$105>>2]|0;
  __THREW__ = 0;
  invoke_vii(375,($118|0),(66326|0));
  $119 = __THREW__; __THREW__ = 0;
  $120 = $119&1;
  if ($120) {
   label = 9;
  } else {
   $121 = HEAP32[$105>>2]|0;
   $122 = ($121|0)==(0|0);
   if ($122) {
    label = 10;
   } else {
    __ZN10emscripten3valD2Ev($121);
    __ZdlPv($121);
    label = 10;
   }
  }
 } else {
  label = 10;
 }
 L12: do {
  if ((label|0) == 10) {
   __THREW__ = 0;
   $125 = (invoke_ii(376,4)|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if ($127) {
    label = 9;
   } else {
    $$expand_i1_val = 1;
    HEAP8[$97>>0] = $$expand_i1_val;
    __THREW__ = 0;
    invoke_viii(377,($96|0),(66332|0),($url|0));
    $128 = __THREW__; __THREW__ = 0;
    $129 = $128&1;
    if ($129) {
     $346 = ___cxa_find_matching_catch()|0;
     $347 = tempRet0;
     $90 = $346;
     $91 = $347;
    } else {
     $86 = $96;
     $87 = 66338;
     $130 = $86;
     $131 = $87;
     __THREW__ = 0;
     $132 = (invoke_iii(378,($130|0),($131|0))|0);
     $133 = __THREW__; __THREW__ = 0;
     $134 = $133&1;
     if ($134) {
      $348 = ___cxa_find_matching_catch()|0;
      $349 = tempRet0;
      $90 = $348;
      $91 = $349;
     } else {
      $85 = $132;
      $135 = $85;
      $83 = $95;
      $84 = $135;
      $136 = $83;
      $137 = $84;
      $82 = $137;
      $138 = $82;
      ;HEAP32[$136>>2]=HEAP32[$138>>2]|0;HEAP32[$136+4>>2]=HEAP32[$138+4>>2]|0;HEAP32[$136+8>>2]=HEAP32[$138+8>>2]|0;
      $139 = $84;
      $81 = $139;
      $140 = $81;
      $80 = $140;
      $141 = $80;
      $79 = $141;
      $142 = $79;
      $__a$i$i$i = $142;
      $__i$i$i$i = 0;
      while(1) {
       $143 = $__i$i$i$i;
       $144 = ($143>>>0)<(3);
       if (!($144)) {
        break;
       }
       $145 = $__i$i$i$i;
       $146 = $__a$i$i$i;
       $147 = (($146) + ($145<<2)|0);
       HEAP32[$147>>2] = 0;
       $148 = $__i$i$i$i;
       $149 = (($148) + 1)|0;
       $__i$i$i$i = $149;
      }
      $77 = $95;
      $78 = $appName;
      $150 = $77;
      $151 = $78;
      $75 = $150;
      $76 = $151;
      $152 = $75;
      $153 = $76;
      $74 = $153;
      $154 = $74;
      $73 = $154;
      $155 = $73;
      $72 = $155;
      $156 = $72;
      $71 = $156;
      $157 = $71;
      $70 = $157;
      $158 = $70;
      $159 = HEAP8[$158>>0]|0;
      $160 = $159&255;
      $161 = $160 & 1;
      $162 = ($161|0)!=(0);
      if ($162) {
       $64 = $155;
       $163 = $64;
       $63 = $163;
       $164 = $63;
       $62 = $164;
       $165 = $62;
       $166 = ((($165)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $174 = $167;
      } else {
       $69 = $155;
       $168 = $69;
       $68 = $168;
       $169 = $68;
       $67 = $169;
       $170 = $67;
       $171 = ((($170)) + 1|0);
       $66 = $171;
       $172 = $66;
       $65 = $172;
       $173 = $65;
       $174 = $173;
      }
      $61 = $174;
      $175 = $61;
      $176 = $76;
      $60 = $176;
      $177 = $60;
      $59 = $177;
      $178 = $59;
      $58 = $178;
      $179 = $58;
      $57 = $179;
      $180 = $57;
      $181 = HEAP8[$180>>0]|0;
      $182 = $181&255;
      $183 = $182 & 1;
      $184 = ($183|0)!=(0);
      if ($184) {
       $53 = $177;
       $185 = $53;
       $52 = $185;
       $186 = $52;
       $51 = $186;
       $187 = $51;
       $188 = ((($187)) + 4|0);
       $189 = HEAP32[$188>>2]|0;
       $196 = $189;
      } else {
       $56 = $177;
       $190 = $56;
       $55 = $190;
       $191 = $55;
       $54 = $191;
       $192 = $54;
       $193 = HEAP8[$192>>0]|0;
       $194 = $193&255;
       $195 = $194 >> 1;
       $196 = $195;
      }
      __THREW__ = 0;
      $197 = (invoke_iiii(379,($152|0),($175|0),($196|0))|0);
      $198 = __THREW__; __THREW__ = 0;
      $199 = $198&1;
      if ($199) {
       $350 = ___cxa_find_matching_catch()|0;
       $351 = tempRet0;
       $90 = $350;
       $91 = $351;
      } else {
       $50 = $197;
       $200 = $50;
       $48 = $94;
       $49 = $200;
       $201 = $48;
       $202 = $49;
       $47 = $202;
       $203 = $47;
       ;HEAP32[$201>>2]=HEAP32[$203>>2]|0;HEAP32[$201+4>>2]=HEAP32[$203+4>>2]|0;HEAP32[$201+8>>2]=HEAP32[$203+8>>2]|0;
       $204 = $49;
       $46 = $204;
       $205 = $46;
       $45 = $205;
       $206 = $45;
       $44 = $206;
       $207 = $44;
       $__a$i$i$i1 = $207;
       $__i$i$i$i2 = 0;
       while(1) {
        $208 = $__i$i$i$i2;
        $209 = ($208>>>0)<(3);
        if (!($209)) {
         break;
        }
        $210 = $__i$i$i$i2;
        $211 = $__a$i$i$i1;
        $212 = (($211) + ($210<<2)|0);
        HEAP32[$212>>2] = 0;
        $213 = $__i$i$i$i2;
        $214 = (($213) + 1)|0;
        $__i$i$i$i2 = $214;
       }
       $42 = $94;
       $43 = 66338;
       $215 = $42;
       $216 = $43;
       __THREW__ = 0;
       $217 = (invoke_iii(378,($215|0),($216|0))|0);
       $218 = __THREW__; __THREW__ = 0;
       $219 = $218&1;
       if ($219) {
        $352 = ___cxa_find_matching_catch()|0;
        $353 = tempRet0;
        $90 = $352;
        $91 = $353;
       } else {
        $41 = $217;
        $220 = $41;
        $39 = $93;
        $40 = $220;
        $221 = $39;
        $222 = $40;
        $38 = $222;
        $223 = $38;
        ;HEAP32[$221>>2]=HEAP32[$223>>2]|0;HEAP32[$221+4>>2]=HEAP32[$223+4>>2]|0;HEAP32[$221+8>>2]=HEAP32[$223+8>>2]|0;
        $224 = $40;
        $37 = $224;
        $225 = $37;
        $36 = $225;
        $226 = $36;
        $35 = $226;
        $227 = $35;
        $__a$i$i$i4 = $227;
        $__i$i$i$i5 = 0;
        while(1) {
         $228 = $__i$i$i$i5;
         $229 = ($228>>>0)<(3);
         if (!($229)) {
          break;
         }
         $230 = $__i$i$i$i5;
         $231 = $__a$i$i$i4;
         $232 = (($231) + ($230<<2)|0);
         HEAP32[$232>>2] = 0;
         $233 = $__i$i$i$i5;
         $234 = (($233) + 1)|0;
         $__i$i$i$i5 = $234;
        }
        $33 = $93;
        $34 = $roomName;
        $235 = $33;
        $236 = $34;
        $31 = $235;
        $32 = $236;
        $237 = $31;
        $238 = $32;
        $30 = $238;
        $239 = $30;
        $29 = $239;
        $240 = $29;
        $28 = $240;
        $241 = $28;
        $27 = $241;
        $242 = $27;
        $26 = $242;
        $243 = $26;
        $244 = HEAP8[$243>>0]|0;
        $245 = $244&255;
        $246 = $245 & 1;
        $247 = ($246|0)!=(0);
        if ($247) {
         $20 = $240;
         $248 = $20;
         $19 = $248;
         $249 = $19;
         $18 = $249;
         $250 = $18;
         $251 = ((($250)) + 8|0);
         $252 = HEAP32[$251>>2]|0;
         $259 = $252;
        } else {
         $25 = $240;
         $253 = $25;
         $24 = $253;
         $254 = $24;
         $23 = $254;
         $255 = $23;
         $256 = ((($255)) + 1|0);
         $22 = $256;
         $257 = $22;
         $21 = $257;
         $258 = $21;
         $259 = $258;
        }
        $17 = $259;
        $260 = $17;
        $261 = $32;
        $16 = $261;
        $262 = $16;
        $15 = $262;
        $263 = $15;
        $14 = $263;
        $264 = $14;
        $13 = $264;
        $265 = $13;
        $266 = HEAP8[$265>>0]|0;
        $267 = $266&255;
        $268 = $267 & 1;
        $269 = ($268|0)!=(0);
        if ($269) {
         $9 = $262;
         $270 = $9;
         $8 = $270;
         $271 = $8;
         $7 = $271;
         $272 = $7;
         $273 = ((($272)) + 4|0);
         $274 = HEAP32[$273>>2]|0;
         $281 = $274;
        } else {
         $12 = $262;
         $275 = $12;
         $11 = $275;
         $276 = $11;
         $10 = $276;
         $277 = $10;
         $278 = HEAP8[$277>>0]|0;
         $279 = $278&255;
         $280 = $279 >> 1;
         $281 = $280;
        }
        __THREW__ = 0;
        $282 = (invoke_iiii(379,($237|0),($260|0),($281|0))|0);
        $283 = __THREW__; __THREW__ = 0;
        $284 = $283&1;
        do {
         if ($284) {
          $354 = ___cxa_find_matching_catch()|0;
          $355 = tempRet0;
          $90 = $354;
          $91 = $355;
         } else {
          $6 = $282;
          $285 = $6;
          $4 = $92;
          $5 = $285;
          $286 = $4;
          $287 = $5;
          $3 = $287;
          $288 = $3;
          ;HEAP32[$286>>2]=HEAP32[$288>>2]|0;HEAP32[$286+4>>2]=HEAP32[$288+4>>2]|0;HEAP32[$286+8>>2]=HEAP32[$288+8>>2]|0;
          $289 = $5;
          $2 = $289;
          $290 = $2;
          $1 = $290;
          $291 = $1;
          $0 = $291;
          $292 = $0;
          $__a$i$i$i8 = $292;
          $__i$i$i$i9 = 0;
          while(1) {
           $293 = $__i$i$i$i9;
           $294 = ($293>>>0)<(3);
           if (!($294)) {
            break;
           }
           $295 = $__i$i$i$i9;
           $296 = $__a$i$i$i8;
           $297 = (($296) + ($295<<2)|0);
           HEAP32[$297>>2] = 0;
           $298 = $__i$i$i$i9;
           $299 = (($298) + 1)|0;
           $__i$i$i$i9 = $299;
          }
          __THREW__ = 0;
          $300 = (invoke_iii(380,($WebSocket|0),($92|0))|0);
          $301 = __THREW__; __THREW__ = 0;
          $302 = $301&1;
          if ($302) {
           $356 = ___cxa_find_matching_catch()|0;
           $357 = tempRet0;
           $90 = $356;
           $91 = $357;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($92);
           break;
          }
          HEAP32[$125>>2] = $300;
          $$expand_i1_val2 = 0;
          HEAP8[$97>>0] = $$expand_i1_val2;
          HEAP32[$105>>2] = $125;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($92);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($93);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($94);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($95);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($96);
          $303 = HEAP32[$105>>2]|0;
          __THREW__ = 0;
          invoke_viii(381,($303|0),(66340|0),(66351|0));
          $304 = __THREW__; __THREW__ = 0;
          $305 = $304&1;
          if ($305) {
           label = 9;
           break L12;
          }
          $306 = HEAP32[$105>>2]|0;
          __THREW__ = 0;
          $307 = (invoke_iii(382,($_this|0),(66363|0))|0);
          $308 = __THREW__; __THREW__ = 0;
          $309 = $308&1;
          if ($309) {
           label = 9;
           break L12;
          }
          HEAP32[$99>>2] = $307;
          __THREW__ = 0;
          $310 = (invoke_iiii(383,($99|0),(66373|0),($_this|0))|0);
          $311 = __THREW__; __THREW__ = 0;
          $312 = $311&1;
          do {
           if ($312) {
            $359 = ___cxa_find_matching_catch()|0;
            $360 = tempRet0;
            $90 = $359;
            $91 = $360;
           } else {
            HEAP32[$98>>2] = $310;
            __THREW__ = 0;
            invoke_viii(384,($306|0),(66378|0),($98|0));
            $313 = __THREW__; __THREW__ = 0;
            $314 = $313&1;
            if ($314) {
             $361 = ___cxa_find_matching_catch()|0;
             $362 = tempRet0;
             $90 = $361;
             $91 = $362;
             __ZN10emscripten3valD2Ev($98);
             break;
            }
            __ZN10emscripten3valD2Ev($98);
            __ZN10emscripten3valD2Ev($99);
            $315 = HEAP32[$105>>2]|0;
            __THREW__ = 0;
            $316 = (invoke_iii(385,($_this|0),(66385|0))|0);
            $317 = __THREW__; __THREW__ = 0;
            $318 = $317&1;
            if ($318) {
             label = 9;
             break L12;
            }
            HEAP32[$101>>2] = $316;
            __THREW__ = 0;
            $319 = (invoke_iiii(383,($101|0),(66373|0),($_this|0))|0);
            $320 = __THREW__; __THREW__ = 0;
            $321 = $320&1;
            do {
             if ($321) {
              $363 = ___cxa_find_matching_catch()|0;
              $364 = tempRet0;
              $90 = $363;
              $91 = $364;
             } else {
              HEAP32[$100>>2] = $319;
              __THREW__ = 0;
              invoke_viii(386,($315|0),(66398|0),($100|0));
              $322 = __THREW__; __THREW__ = 0;
              $323 = $322&1;
              if ($323) {
               $365 = ___cxa_find_matching_catch()|0;
               $366 = tempRet0;
               $90 = $365;
               $91 = $366;
               __ZN10emscripten3valD2Ev($100);
               break;
              }
              __ZN10emscripten3valD2Ev($100);
              __ZN10emscripten3valD2Ev($101);
              $324 = HEAP32[$105>>2]|0;
              __THREW__ = 0;
              $325 = (invoke_iii(382,($_this|0),(66408|0))|0);
              $326 = __THREW__; __THREW__ = 0;
              $327 = $326&1;
              if ($327) {
               label = 9;
               break L12;
              }
              HEAP32[$102>>2] = $325;
              __THREW__ = 0;
              invoke_viii(387,($324|0),(66418|0),($102|0));
              $328 = __THREW__; __THREW__ = 0;
              $329 = $328&1;
              if ($329) {
               $367 = ___cxa_find_matching_catch()|0;
               $368 = tempRet0;
               $90 = $367;
               $91 = $368;
               __ZN10emscripten3valD2Ev($102);
               break L12;
              }
              __ZN10emscripten3valD2Ev($102);
              $330 = HEAP32[$105>>2]|0;
              __THREW__ = 0;
              $331 = (invoke_iii(382,($_this|0),(66426|0))|0);
              $332 = __THREW__; __THREW__ = 0;
              $333 = $332&1;
              if ($333) {
               label = 9;
               break L12;
              }
              HEAP32[$103>>2] = $331;
              __THREW__ = 0;
              invoke_viii(387,($330|0),(66436|0),($103|0));
              $334 = __THREW__; __THREW__ = 0;
              $335 = $334&1;
              if ($335) {
               $369 = ___cxa_find_matching_catch()|0;
               $370 = tempRet0;
               $90 = $369;
               $91 = $370;
               __ZN10emscripten3valD2Ev($103);
               break L12;
              }
              __ZN10emscripten3valD2Ev($103);
              $336 = ((($105)) + 28|0);
              __THREW__ = 0;
              (invoke_iii(388,($336|0),($appName|0))|0);
              $337 = __THREW__; __THREW__ = 0;
              $338 = $337&1;
              if ($338) {
               label = 9;
               break L12;
              }
              $339 = ((($105)) + 40|0);
              __THREW__ = 0;
              (invoke_iii(388,($339|0),($roomName|0))|0);
              $340 = __THREW__; __THREW__ = 0;
              $341 = $340&1;
              if ($341) {
               label = 9;
               break L12;
              }
              $342 = HEAP32[$105>>2]|0;
              __THREW__ = 0;
              invoke_vii(389,($88|0),($342|0));
              $343 = __THREW__; __THREW__ = 0;
              $344 = $343&1;
              if ($344) {
               label = 9;
               break L12;
              }
              $104 = 1;
              __ZN10emscripten3valD2Ev($WebSocket);
              $345 = HEAP32[$88>>2]|0;
              STACKTOP = sp;return ($345|0);
             }
            } while(0);
            __ZN10emscripten3valD2Ev($101);
            break L12;
           }
          } while(0);
          __ZN10emscripten3valD2Ev($99);
          break L12;
         }
        } while(0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($93);
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($94);
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($95);
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($96);
    }
    $$pre_trunc = HEAP8[$97>>0]|0;
    $358 = $$pre_trunc&1;
    if ($358) {
     __ZdlPv($125);
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $123 = ___cxa_find_matching_catch()|0;
  $124 = tempRet0;
  $90 = $123;
  $91 = $124;
 }
 __ZN10emscripten3valD2Ev($WebSocket);
 $371 = $90;
 $372 = $91;
 ___resumeException($371|0);
 // unreachable;
 return (0)|0;
}
function __ZN10MonaClient5CloseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $5 = $this;
 $7 = $5;
 $8 = HEAP32[$7>>2]|0;
 __ZNK10emscripten3val4callIvJEEET_PKcDpOT0_($8,66326);
 $9 = ((($7)) + 52|0);
 $4 = $9;
 $10 = $4;
 $3 = $10;
 $11 = $3;
 $12 = ((($11)) + 8|0);
 $2 = $12;
 $13 = $2;
 $1 = $13;
 $14 = $1;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15>>>0)>(0);
 if ($16) {
  $17 = ((($7)) + 52|0);
  HEAP32[$6>>2] = 0;
  $18 = (__ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixEOi($17,$6)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   __ZN9NetStreamD2Ev($19);
   __ZdlPv($19);
  }
  $21 = ((($7)) + 52|0);
  $0 = $21;
  $22 = $0;
  __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE5clearEv($22);
 }
 $23 = ($7|0)==(0|0);
 if ($23) {
  STACKTOP = sp;return;
 }
 __ZN10MonaClientD2Ev($7);
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZN39EmscriptenBindingInitializer_MonaClientC2Ev($this) {
 $this = $this|0;
 var $$index1 = 0, $$index13 = 0, $$index15 = 0, $$index20 = 0, $$index22 = 0, $$index27 = 0, $$index29 = 0, $$index34 = 0, $$index6 = 0, $$index8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_getActualType$i = 0, $args$i = 0, $args$i$i = 0, $args$i11 = 0, $args$i2 = 0, $args$i5 = 0, $args$i8 = 0, $destructor$i = 0, $downcast$i = 0, $invoke$i$i = 0, $invoker$i = 0, $invoker$i1 = 0, $invoker$i10 = 0, $invoker$i4 = 0, $invoker$i7 = 0, $memberFunction$i$field = 0;
 var $memberFunction$i$field3 = 0, $memberFunction$i$index2 = 0, $memberFunction$i12$field = 0, $memberFunction$i12$field31 = 0, $memberFunction$i12$index30 = 0, $memberFunction$i3$field = 0, $memberFunction$i3$field10 = 0, $memberFunction$i3$index9 = 0, $memberFunction$i6$field = 0, $memberFunction$i6$field17 = 0, $memberFunction$i6$index16 = 0, $memberFunction$i9$field = 0, $memberFunction$i9$field24 = 0, $memberFunction$i9$index23 = 0, $upcast$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 248|0;
 $args$i11 = sp + 274|0;
 $4 = sp + 32|0;
 $8 = sp + 224|0;
 $args$i8 = sp + 273|0;
 $9 = sp + 24|0;
 $13 = sp + 200|0;
 $args$i5 = sp + 272|0;
 $14 = sp + 16|0;
 $18 = sp + 176|0;
 $args$i2 = sp + 271|0;
 $19 = sp + 8|0;
 $23 = sp + 152|0;
 $args$i = sp + 270|0;
 $24 = sp;
 $args$i$i = sp + 269|0;
 $36 = sp + 268|0;
 $37 = sp + 72|0;
 $38 = sp + 64|0;
 $39 = sp + 56|0;
 $40 = sp + 48|0;
 $41 = sp + 40|0;
 $35 = $this;
 $33 = $36;
 $34 = 66444;
 __ZN10emscripten8internal11NoBaseClass6verifyI10MonaClientEEvv();
 $_getActualType$i = 390;
 $42 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10MonaClientEEPFvvEv()|0);
 $upcast$i = $42;
 $43 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10MonaClientEEPFvvEv()|0);
 $downcast$i = $43;
 $destructor$i = 391;
 $44 = (__ZN10emscripten8internal6TypeIDI10MonaClientE3getEv()|0);
 $45 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10MonaClientEEE3getEv()|0);
 $46 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10MonaClientEEE3getEv()|0);
 $47 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $48 = $_getActualType$i;
 $32 = $48;
 $49 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $50 = $_getActualType$i;
 $51 = $upcast$i;
 $31 = $51;
 $52 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $53 = $upcast$i;
 $54 = $downcast$i;
 $30 = $54;
 $55 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $56 = $downcast$i;
 $57 = $34;
 $58 = $destructor$i;
 $29 = $58;
 $59 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 $60 = $destructor$i;
 __embind_register_class(($44|0),($45|0),($46|0),($47|0),($49|0),($50|0),($52|0),($53|0),($55|0),($56|0),($57|0),($59|0),($60|0));
 $28 = $36;
 $61 = $28;
 $26 = $61;
 $27 = 392;
 $62 = $26;
 $invoke$i$i = 393;
 $63 = (__ZN10emscripten8internal6TypeIDI10MonaClientE3getEv()|0);
 $64 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP10MonaClientEE8getCountEv($args$i$i)|0);
 $65 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP10MonaClientEE8getTypesEv($args$i$i)|0);
 $66 = $invoke$i$i;
 $25 = $66;
 $67 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $68 = $invoke$i$i;
 $69 = $27;
 __embind_register_class_constructor(($63|0),($64|0),($65|0),($67|0),($68|0),($69|0));
 HEAP32[$37>>2] = (394);
 $$index1 = ((($37)) + 4|0);
 HEAP32[$$index1>>2] = 0;
 ;HEAP8[$24>>0]=HEAP8[$37>>0]|0;HEAP8[$24+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$37+3>>0]|0;HEAP8[$24+4>>0]=HEAP8[$37+4>>0]|0;HEAP8[$24+5>>0]=HEAP8[$37+5>>0]|0;HEAP8[$24+6>>0]=HEAP8[$37+6>>0]|0;HEAP8[$24+7>>0]=HEAP8[$37+7>>0]|0;
 $memberFunction$i$field = HEAP32[$24>>2]|0;
 $memberFunction$i$index2 = ((($24)) + 4|0);
 $memberFunction$i$field3 = HEAP32[$memberFunction$i$index2>>2]|0;
 $21 = $62;
 $22 = 66385;
 HEAP32[$23>>2] = $memberFunction$i$field;
 $$index6 = ((($23)) + 4|0);
 HEAP32[$$index6>>2] = $memberFunction$i$field3;
 $70 = $21;
 $invoker$i = 395;
 $71 = (__ZN10emscripten8internal6TypeIDI10MonaClientE3getEv()|0);
 $72 = $22;
 $73 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10MonaClientEENS_3valEEE8getCountEv($args$i)|0);
 $74 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10MonaClientEENS_3valEEE8getTypesEv($args$i)|0);
 $75 = $invoker$i;
 $20 = $75;
 $76 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $77 = $invoker$i;
 $78 = (__ZN10emscripten8internal10getContextIM10MonaClientFvNS_3valEEEEPT_RKS6_($23)|0);
 __embind_register_class_function(($71|0),($72|0),($73|0),($74|0),($76|0),($77|0),($78|0),0);
 HEAP32[$38>>2] = (396);
 $$index8 = ((($38)) + 4|0);
 HEAP32[$$index8>>2] = 0;
 ;HEAP8[$19>>0]=HEAP8[$38>>0]|0;HEAP8[$19+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$38+3>>0]|0;HEAP8[$19+4>>0]=HEAP8[$38+4>>0]|0;HEAP8[$19+5>>0]=HEAP8[$38+5>>0]|0;HEAP8[$19+6>>0]=HEAP8[$38+6>>0]|0;HEAP8[$19+7>>0]=HEAP8[$38+7>>0]|0;
 $memberFunction$i3$field = HEAP32[$19>>2]|0;
 $memberFunction$i3$index9 = ((($19)) + 4|0);
 $memberFunction$i3$field10 = HEAP32[$memberFunction$i3$index9>>2]|0;
 $16 = $70;
 $17 = 66363;
 HEAP32[$18>>2] = $memberFunction$i3$field;
 $$index13 = ((($18)) + 4|0);
 HEAP32[$$index13>>2] = $memberFunction$i3$field10;
 $79 = $16;
 $invoker$i1 = 395;
 $80 = (__ZN10emscripten8internal6TypeIDI10MonaClientE3getEv()|0);
 $81 = $17;
 $82 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10MonaClientEENS_3valEEE8getCountEv($args$i2)|0);
 $83 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10MonaClientEENS_3valEEE8getTypesEv($args$i2)|0);
 $84 = $invoker$i1;
 $15 = $84;
 $85 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $86 = $invoker$i1;
 $87 = (__ZN10emscripten8internal10getContextIM10MonaClientFvNS_3valEEEEPT_RKS6_($18)|0);
 __embind_register_class_function(($80|0),($81|0),($82|0),($83|0),($85|0),($86|0),($87|0),0);
 HEAP32[$39>>2] = (397);
 $$index15 = ((($39)) + 4|0);
 HEAP32[$$index15>>2] = 0;
 ;HEAP8[$14>>0]=HEAP8[$39>>0]|0;HEAP8[$14+1>>0]=HEAP8[$39+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$39+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$39+3>>0]|0;HEAP8[$14+4>>0]=HEAP8[$39+4>>0]|0;HEAP8[$14+5>>0]=HEAP8[$39+5>>0]|0;HEAP8[$14+6>>0]=HEAP8[$39+6>>0]|0;HEAP8[$14+7>>0]=HEAP8[$39+7>>0]|0;
 $memberFunction$i6$field = HEAP32[$14>>2]|0;
 $memberFunction$i6$index16 = ((($14)) + 4|0);
 $memberFunction$i6$field17 = HEAP32[$memberFunction$i6$index16>>2]|0;
 $11 = $79;
 $12 = 66455;
 HEAP32[$13>>2] = $memberFunction$i6$field;
 $$index20 = ((($13)) + 4|0);
 HEAP32[$$index20>>2] = $memberFunction$i6$field17;
 $88 = $11;
 $invoker$i4 = 398;
 $89 = (__ZN10emscripten8internal6TypeIDI10MonaClientE3getEv()|0);
 $90 = $12;
 $91 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES4_EE8getCountEv($args$i5)|0);
 $92 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES4_EE8getTypesEv($args$i5)|0);
 $93 = $invoker$i4;
 $10 = $93;
 $94 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $95 = $invoker$i4;
 $96 = (__ZN10emscripten8internal10getContextIM10MonaClientFNS_3valES3_EEEPT_RKS6_($13)|0);
 __embind_register_class_function(($89|0),($90|0),($91|0),($92|0),($94|0),($95|0),($96|0),0);
 HEAP32[$40>>2] = (399);
 $$index22 = ((($40)) + 4|0);
 HEAP32[$$index22>>2] = 0;
 ;HEAP8[$9>>0]=HEAP8[$40>>0]|0;HEAP8[$9+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$40+3>>0]|0;HEAP8[$9+4>>0]=HEAP8[$40+4>>0]|0;HEAP8[$9+5>>0]=HEAP8[$40+5>>0]|0;HEAP8[$9+6>>0]=HEAP8[$40+6>>0]|0;HEAP8[$9+7>>0]=HEAP8[$40+7>>0]|0;
 $memberFunction$i9$field = HEAP32[$9>>2]|0;
 $memberFunction$i9$index23 = ((($9)) + 4|0);
 $memberFunction$i9$field24 = HEAP32[$memberFunction$i9$index23>>2]|0;
 $6 = $88;
 $7 = 66326;
 HEAP32[$8>>2] = $memberFunction$i9$field;
 $$index27 = ((($8)) + 4|0);
 HEAP32[$$index27>>2] = $memberFunction$i9$field24;
 $97 = $6;
 $invoker$i7 = 400;
 $98 = (__ZN10emscripten8internal6TypeIDI10MonaClientE3getEv()|0);
 $99 = $7;
 $100 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10MonaClientEEEE8getCountEv($args$i8)|0);
 $101 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10MonaClientEEEE8getTypesEv($args$i8)|0);
 $102 = $invoker$i7;
 $5 = $102;
 $103 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $104 = $invoker$i7;
 $105 = (__ZN10emscripten8internal10getContextIM10MonaClientFvvEEEPT_RKS5_($8)|0);
 __embind_register_class_function(($98|0),($99|0),($100|0),($101|0),($103|0),($104|0),($105|0),0);
 HEAP32[$41>>2] = (401);
 $$index29 = ((($41)) + 4|0);
 HEAP32[$$index29>>2] = 0;
 ;HEAP8[$4>>0]=HEAP8[$41>>0]|0;HEAP8[$4+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$41+3>>0]|0;HEAP8[$4+4>>0]=HEAP8[$41+4>>0]|0;HEAP8[$4+5>>0]=HEAP8[$41+5>>0]|0;HEAP8[$4+6>>0]=HEAP8[$41+6>>0]|0;HEAP8[$4+7>>0]=HEAP8[$41+7>>0]|0;
 $memberFunction$i12$field = HEAP32[$4>>2]|0;
 $memberFunction$i12$index30 = ((($4)) + 4|0);
 $memberFunction$i12$field31 = HEAP32[$memberFunction$i12$index30>>2]|0;
 $1 = $97;
 $2 = 66468;
 HEAP32[$3>>2] = $memberFunction$i12$field;
 $$index34 = ((($3)) + 4|0);
 HEAP32[$$index34>>2] = $memberFunction$i12$field31;
 $invoker$i10 = 402;
 $106 = (__ZN10emscripten8internal6TypeIDI10MonaClientE3getEv()|0);
 $107 = $2;
 $108 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES4_NSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESE_SE_EE8getCountEv($args$i11)|0);
 $109 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES4_NSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESE_SE_EE8getTypesEv($args$i11)|0);
 $110 = $invoker$i10;
 $0 = $110;
 $111 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiiiEEEPKcv()|0);
 $112 = $invoker$i10;
 $113 = (__ZN10emscripten8internal10getContextIM10MonaClientFNS_3valES3_NSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_EEEPT_RKSD_($3)|0);
 __embind_register_class_function(($106|0),($107|0),($108|0),($109|0),($111|0),($112|0),($113|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI9NetStreamEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI9NetStreamEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = (__ZN10emscripten8internal14getLightTypeIDI9NetStreamEEPKvRKT_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI9NetStreamEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI9NetStreamEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI9NetStreamEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZN9NetStreamD2Ev($1);
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDI9NetStreamE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI9NetStreamE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9NetStreamEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP9NetStreamE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9NetStreamEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK9NetStreamE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11NoBaseClass3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (67195|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (67193|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (67190|0);
}
function __ZN10emscripten8internal12operator_newI9NetStreamJP10MonaClientEEEPT_DpOT0_($args) {
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $args;
 $4 = (__Znwj(64)|0);
 $5 = $1;
 $0 = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vii(403,($4|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $2 = $10;
  $3 = $11;
  __ZdlPv($4);
  $12 = $2;
  $13 = $3;
  ___resumeException($12|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerIP9NetStreamJOP10MonaClientEE6invokeEPFS3_S6_ES5_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIOP10MonaClientE12fromWireTypeES3_($4)|0);
 HEAP32[$2>>2] = $5;
 $6 = (FUNCTION_TABLE_ii[$3 & 1023]($2)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeIP9NetStreamE10toWireTypeES3_($6)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9NetStreamOP10MonaClientEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersES2_EE11ArgTypeListIJP9NetStreamOP10MonaClientEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI9NetStreamEEOP10MonaClientEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (67164|0);
}
function __ZN9NetStream12attachCanvasEN10emscripten3valEb($this,$_this,$webgl) {
 $this = $this|0;
 $_this = $_this|0;
 $webgl = $webgl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $4 = $webgl&1;
 $1 = $4;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = $9&1;
 $11 = ((($5)) + 14|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 $13 = $1;
 $14 = $13&1;
 $15 = $14 ? 77298 : 77303;
 HEAP32[$vararg_buffer>>2] = 67114;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 _emscripten_log(0,($vararg_buffer|0));
 $16 = (__Znwj(132)|0);
 __THREW__ = 0;
 invoke_vi(404,($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  $2 = $27;
  $3 = $28;
  __ZdlPv($16);
  $41 = $2;
  $42 = $3;
  ___resumeException($41|0);
  // unreachable;
 }
 $19 = ((($5)) + 4|0);
 HEAP32[$19>>2] = $16;
 $20 = ((($5)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 do {
  if (!($22)) {
   $23 = (__Znwj(4)|0);
   __THREW__ = 0;
   invoke_vii(374,($23|0),($_this|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $26 = ((($5)) + 16|0);
    HEAP32[$26>>2] = $23;
    break;
   }
   $29 = ___cxa_find_matching_catch()|0;
   $30 = tempRet0;
   $2 = $29;
   $3 = $30;
   __ZdlPv($23);
   $41 = $2;
   $42 = $3;
   ___resumeException($41|0);
   // unreachable;
  }
 } while(0);
 $31 = ((($5)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($5)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$34>>2] = $32;
 $35 = $1;
 $36 = $35&1;
 $37 = ((($5)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 128|0);
 $40 = $36&1;
 HEAP8[$39>>0] = $40;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIM9NetStreamFvNS_3valEbEvPS2_JS3_bEE6invokeERKS5_S6_PNS0_7_EM_VALEb($method,$wireThis,$args,$args1) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $0 = $method;
 $1 = $wireThis;
 $2 = $args;
 $7 = $args1&1;
 $3 = $7;
 $8 = $0;
 $$field = HEAP32[$8>>2]|0;
 $$index1 = ((($8)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $9 = $1;
 $10 = (__ZN10emscripten8internal11BindingTypeIP9NetStreamE12fromWireTypeES3_($9)|0);
 $11 = $$field2 >> 1;
 $12 = (($10) + ($11)|0);
 $13 = $$field2 & 1;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = HEAP32[$12>>2]|0;
  $16 = (($15) + ($$field)|0);
  $17 = HEAP32[$16>>2]|0;
  $26 = $17;
 } else {
  $18 = $$field;
  $26 = $18;
 }
 $19 = $2;
 $20 = (__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($19)|0);
 HEAP32[$4>>2] = $20;
 $21 = $3;
 $22 = $21&1;
 __THREW__ = 0;
 $23 = (invoke_ii(405,($22|0))|0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $5 = $29;
  $6 = $30;
  __ZN10emscripten3valD2Ev($4);
  $31 = $5;
  $32 = $6;
  ___resumeException($31|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viii($26|0,($12|0),($4|0),($23|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $5 = $29;
  $6 = $30;
  __ZN10emscripten3valD2Ev($4);
  $31 = $5;
  $32 = $6;
  ___resumeException($31|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($4);
  STACKTOP = sp;return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEENS_3valEbEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEENS_3valEbEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9NetStreamEENS_3valEbEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (67108|0);
}
function __ZN10emscripten8internal10getContextIM9NetStreamFvNS_3valEbEEEPT_RKS6_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN9NetStream9initAudioEN10emscripten3valEii($this,$_this,$frameCount,$channels) {
 $this = $this|0;
 $_this = $_this|0;
 $frameCount = $frameCount|0;
 $channels = $channels|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $frameCount;
 $2 = $channels;
 $5 = $0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 do {
  if (!($8)) {
   $9 = (__Znwj(4)|0);
   __THREW__ = 0;
   invoke_vii(374,($9|0),($_this|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = ((($5)) + 16|0);
    HEAP32[$12>>2] = $9;
    break;
   }
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   $3 = $13;
   $4 = $14;
   __ZdlPv($9);
   $29 = $3;
   $30 = $4;
   ___resumeException($29|0);
   // unreachable;
  }
 } while(0);
 $15 = (__Znwj(22700)|0);
 $16 = $1;
 $17 = $2;
 $18 = Math_imul($16, $17)|0;
 $19 = $18<<1;
 __THREW__ = 0;
 invoke_vii(406,($15|0),($19|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if (!($21)) {
  HEAP32[$5>>2] = $15;
  $22 = HEAP32[$5>>2]|0;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24;
  $26 = $25 >> 1;
  STACKTOP = sp;return ($26|0);
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $3 = $27;
 $4 = $28;
 __ZdlPv($15);
 $29 = $3;
 $30 = $4;
 ___resumeException($29|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal13MethodInvokerIM9NetStreamFiNS_3valEiiEiPS2_JS3_iiEE6invokeERKS5_S6_PNS0_7_EM_VALEii($method,$wireThis,$args,$args1,$args2) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $0 = $method;
 $1 = $wireThis;
 $2 = $args;
 $3 = $args1;
 $4 = $args2;
 $9 = $0;
 $$field = HEAP32[$9>>2]|0;
 $$index1 = ((($9)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $10 = $1;
 $11 = (__ZN10emscripten8internal11BindingTypeIP9NetStreamE12fromWireTypeES3_($10)|0);
 $12 = $$field2 >> 1;
 $13 = (($11) + ($12)|0);
 $14 = $$field2 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = HEAP32[$13>>2]|0;
  $17 = (($16) + ($$field)|0);
  $18 = HEAP32[$17>>2]|0;
  $30 = $18;
 } else {
  $19 = $$field;
  $30 = $19;
 }
 $20 = $2;
 $21 = (__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($20)|0);
 HEAP32[$6>>2] = $21;
 $22 = $3;
 __THREW__ = 0;
 $23 = (invoke_ii(407,($22|0))|0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if (!($25)) {
  $26 = $4;
  __THREW__ = 0;
  $27 = (invoke_ii(407,($26|0))|0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if (!($29)) {
   __THREW__ = 0;
   $31 = (invoke_iiiii($30|0,($13|0),($6|0),($23|0),($27|0))|0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if (!($33)) {
    HEAP32[$5>>2] = $31;
    __THREW__ = 0;
    $34 = (invoke_ii(408,($5|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     __ZN10emscripten3valD2Ev($6);
     STACKTOP = sp;return ($34|0);
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 $7 = $37;
 $8 = $38;
 __ZN10emscripten3valD2Ev($6);
 $39 = $7;
 $40 = $8;
 ___resumeException($39|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerI9NetStreamEENS_3valEiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerI9NetStreamEENS_3valEiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerI9NetStreamEENS_3valEiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (67076|0);
}
function __ZN10emscripten8internal10getContextIM9NetStreamFiNS_3valEiiEEEPT_RKS6_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN9NetStream4playENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 20|0;
 $11 = sp + 8|0;
 $9 = $this;
 $14 = $9;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($11,67061,$name);
 $7 = $11;
 $8 = 67073;
 $17 = $7;
 $18 = $8;
 __THREW__ = 0;
 $19 = (invoke_iii(378,($17|0),($18|0))|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $39 = ___cxa_find_matching_catch()|0;
  $40 = tempRet0;
  $12 = $39;
  $13 = $40;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $43 = $12;
  $44 = $13;
  ___resumeException($43|0);
  // unreachable;
 }
 $6 = $19;
 $22 = $6;
 $4 = $10;
 $5 = $22;
 $23 = $4;
 $24 = $5;
 $3 = $24;
 $25 = $3;
 ;HEAP32[$23>>2]=HEAP32[$25>>2]|0;HEAP32[$23+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$25+8>>2]|0;
 $26 = $5;
 $2 = $26;
 $27 = $2;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 $29 = $0;
 $__a$i$i$i = $29;
 $__i$i$i$i = 0;
 while(1) {
  $30 = $__i$i$i$i;
  $31 = ($30>>>0)<(3);
  if (!($31)) {
   break;
  }
  $32 = $__i$i$i$i;
  $33 = $__a$i$i$i;
  $34 = (($33) + ($32<<2)|0);
  HEAP32[$34>>2] = 0;
  $35 = $__i$i$i$i;
  $36 = (($35) + 1)|0;
  $__i$i$i$i = $36;
 }
 __THREW__ = 0;
 invoke_vii(409,($16|0),($10|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if (!($38)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  STACKTOP = sp;return;
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 $12 = $41;
 $13 = $42;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
 $43 = $12;
 $44 = $13;
 ___resumeException($43|0);
 // unreachable;
}
function __ZN10emscripten8internal13MethodInvokerIM9NetStreamFvNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEvPS2_JS9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_EUt_E($method,$wireThis,$args) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $method;
 $1 = $wireThis;
 $2 = $args;
 $6 = $0;
 $$field = HEAP32[$6>>2]|0;
 $$index1 = ((($6)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal11BindingTypeIP9NetStreamE12fromWireTypeES3_($7)|0);
 $9 = $$field2 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$field2 & 1;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$field)|0);
  $15 = HEAP32[$14>>2]|0;
  $18 = $15;
 } else {
  $16 = $$field;
  $18 = $16;
 }
 $17 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($3,$17);
 __THREW__ = 0;
 invoke_vii($18|0,($10|0),($3|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $4 = $21;
  $5 = $22;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $23 = $4;
  $24 = $5;
  ___resumeException($23|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9NetStreamEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (67056|0);
}
function __ZN10emscripten8internal10getContextIM9NetStreamFvNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN9NetStream17decodeVideoBufferEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $info = 0, $targetTime = 0, $time = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 16|0;
 $19 = sp + 8|0;
 $17 = $this;
 $22 = $17;
 $23 = ((($22)) + 28|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $27 = ((($26)) + 20|0);
 $13 = $27;
 $28 = $13;
 $12 = $28;
 $29 = $12;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  $100 = ((($22)) + 52|0);
  HEAP8[$100>>0] = 0;
  $101 = (__ZN10emscripten3val6objectEv()|0);
  HEAP32[$19>>2] = $101;
  $info = $19;
  $102 = $info;
  __THREW__ = 0;
  invoke_viii(410,($102|0),(66826|0),(67033|0));
  $103 = __THREW__; __THREW__ = 0;
  $104 = $103&1;
  if ($104) {
   $110 = ___cxa_find_matching_catch()|0;
   $111 = tempRet0;
   $20 = $110;
   $21 = $111;
   __ZN10emscripten3valD2Ev($19);
   $112 = $20;
   $113 = $21;
   ___resumeException($112|0);
   // unreachable;
  }
  $105 = ((($22)) + 16|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $info;
  __THREW__ = 0;
  invoke_viii(411,($106|0),(66852|0),($107|0));
  $108 = __THREW__; __THREW__ = 0;
  $109 = $108&1;
  if ($109) {
   $110 = ___cxa_find_matching_catch()|0;
   $111 = tempRet0;
   $20 = $110;
   $21 = $111;
   __ZN10emscripten3valD2Ev($19);
   $112 = $20;
   $113 = $21;
   ___resumeException($112|0);
   // unreachable;
  }
  __ZN10emscripten3valD2Ev($19);
  STACKTOP = sp;return;
 }
 $32 = ((($22)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($22)) + 28|0);
 $11 = $34;
 $35 = $11;
 $10 = $35;
 $36 = $10;
 $9 = $36;
 $37 = $9;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($36)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41>>>0) / 204)&-1;
 $43 = (($39) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($36)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46>>>0) % 204)&-1;
 $48 = (($44) + (($47*20)|0)|0);
 $49 = ((($48)) + 4|0);
 __ZN12VideoDecoder6decodeER12MemoryStream($33,$49);
 $50 = ((($22)) + 28|0);
 $8 = $50;
 $51 = $8;
 __ZNSt3__15dequeI11VideoPacketNS_9allocatorIS1_EEE9pop_frontEv($51);
 $52 = ((($22)) + 28|0);
 $7 = $52;
 $53 = $7;
 $6 = $53;
 $54 = $6;
 $5 = $54;
 $55 = $5;
 $56 = ((($55)) + 20|0);
 $4 = $56;
 $57 = $4;
 $3 = $57;
 $58 = $3;
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(0);
 if ($60) {
  $99 = ((($22)) + 52|0);
  HEAP8[$99>>0] = 0;
  STACKTOP = sp;return;
 }
 $61 = ((($22)) + 28|0);
 $2 = $61;
 $62 = $2;
 $1 = $62;
 $63 = $1;
 $0 = $63;
 $64 = $0;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($63)) + 16|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68>>>0) / 204)&-1;
 $70 = (($66) + ($69<<2)|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($63)) + 16|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73>>>0) % 204)&-1;
 $75 = (($71) + (($74*20)|0)|0);
 $76 = HEAP32[$75>>2]|0;
 $time = $76;
 $77 = (__ZNK9NetStream7getTimeEv($22)|0);
 $78 = ((($22)) + 24|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($77) - ($79))|0;
 $targetTime = $80;
 $81 = $time;
 $82 = ((($22)) + 56|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83*1000)|0;
 $85 = (($81) + ($84))|0;
 $86 = $targetTime;
 $87 = ($85|0)>($86|0);
 if ($87) {
  $88 = ((($22)) + 16|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $time;
  $91 = $targetTime;
  $92 = (($90) - ($91))|0;
  $93 = ((($22)) + 56|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($94*1000)|0;
  $96 = (($92) + ($95))|0;
  HEAP32[$18>>2] = $96;
  $97 = (__ZNK10emscripten3val4callIiJlEEET_PKcDpOT0_($89,66899,$18)|0);
  $98 = ((($22)) + 60|0);
  HEAP32[$98>>2] = $97;
  STACKTOP = sp;return;
 } else {
  __ZN9NetStream17decodeVideoBufferEv($22);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal13MethodInvokerIM9NetStreamFvvEvPS2_JEE6invokeERKS4_S5_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $method;
 $1 = $wireThis;
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal11BindingTypeIP9NetStreamE12fromWireTypeES3_($3)|0);
 $5 = $$field2 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$field2 & 1;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$field)|0);
  $11 = HEAP32[$10>>2]|0;
  $13 = $11;
  FUNCTION_TABLE_vi[$13 & 1023]($6);
  STACKTOP = sp;return;
 } else {
  $12 = $$field;
  $13 = $12;
  FUNCTION_TABLE_vi[$13 & 1023]($6);
  STACKTOP = sp;return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9NetStreamEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9NetStreamEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (67006|0);
}
function __ZN10emscripten8internal10getContextIM9NetStreamFvvEEEPT_RKS5_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZNK9NetStream13getBufferTimeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 __ZN10emscripten3valC2IRKiEEOT_($0,$3);
 $4 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN9NetStream13setBufferTimeEN10emscripten3valE($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK10emscripten3val2asIiEET_v($value)|0);
 $3 = ((($1)) + 56|0);
 HEAP32[$3>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12GetterPolicyIM9NetStreamKFNS_3valEvEE3getIS2_EEPNS0_7_EM_VALERKS5_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $context;
 $1 = $ptr;
 $5 = $0;
 $$field = HEAP32[$5>>2]|0;
 $$index1 = ((($5)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $6 = $1;
 $7 = $$field2 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$field2 & 1;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$field)|0);
  $13 = HEAP32[$12>>2]|0;
  $15 = $13;
 } else {
  $14 = $$field;
  $15 = $14;
 }
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($8)|0);
 HEAP32[$2>>2] = $16;
 __THREW__ = 0;
 $17 = (invoke_ii(412,($2|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $3 = $20;
  $4 = $21;
  __ZN10emscripten3valD2Ev($2);
  $22 = $3;
  $23 = $4;
  ___resumeException($22|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($2);
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal12SetterPolicyIM9NetStreamFvNS_3valEEE3setIS2_EEvRKS5_RT_PNS0_7_EM_VALE($context,$ptr,$wt) {
 $context = $context|0;
 $ptr = $ptr|0;
 $wt = $wt|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $context;
 $1 = $ptr;
 $2 = $wt;
 $6 = $0;
 $$field = HEAP32[$6>>2]|0;
 $$index1 = ((($6)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $7 = $1;
 $8 = $$field2 >> 1;
 $9 = (($7) + ($8)|0);
 $10 = $$field2 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$field)|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 } else {
  $15 = $$field;
  $18 = $15;
 }
 $16 = $2;
 $17 = (__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($16)|0);
 HEAP32[$3>>2] = $17;
 __THREW__ = 0;
 invoke_vii($18|0,($9|0),($3|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $4 = $21;
  $5 = $22;
  __ZN10emscripten3valD2Ev($3);
  $23 = $4;
  $24 = $5;
  ___resumeException($23|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal12GetterPolicyIM9NetStreamKFNS_3valEvEE10getContextES5_($0) {
 $0 = $0|0;
 var $$index4 = 0, $1 = 0, $2 = 0, $context$field = 0, $context$field2 = 0, $context$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $context$field = HEAP32[$0>>2]|0;
 $context$index1 = ((($0)) + 4|0);
 $context$field2 = HEAP32[$context$index1>>2]|0;
 HEAP32[$1>>2] = $context$field;
 $$index4 = ((($1)) + 4|0);
 HEAP32[$$index4>>2] = $context$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9NetStreamKFNS_3valEvEEEPT_RKS6_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12SetterPolicyIM9NetStreamFvNS_3valEEE10getContextES5_($0) {
 $0 = $0|0;
 var $$index4 = 0, $1 = 0, $2 = 0, $context$field = 0, $context$field2 = 0, $context$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $context$field = HEAP32[$0>>2]|0;
 $context$index1 = ((($0)) + 4|0);
 $context$field2 = HEAP32[$context$index1>>2]|0;
 HEAP32[$1>>2] = $context$field;
 $$index4 = ((($1)) + 4|0);
 HEAP32[$$index4>>2] = $context$field2;
 $2 = (__ZN10emscripten8internal10getContextIM9NetStreamFvNS_3valEEEEPT_RKS6_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEEC2ERKS8_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 48|0;
 $11 = sp + 8|0;
 $14 = sp + 36|0;
 $15 = sp + 93|0;
 $16 = sp;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = ((($24)) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = ((($24)) + 8|0);
 ;HEAP8[$16>>0]=HEAP8[$23>>0]|0;
 $13 = $29;
 HEAP32[$14>>2] = 0;
 $30 = $13;
 $12 = $14;
 $31 = $12;
 $32 = HEAP32[$31>>2]|0;
 $6 = $16;
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $9 = $30;
 HEAP32[$10>>2] = $32;
 $33 = $9;
 $8 = $11;
 $7 = $10;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $4 = $24;
 $36 = $4;
 $37 = ((($36)) + 4|0);
 $3 = $37;
 $38 = $3;
 $2 = $38;
 $39 = $2;
 $1 = $39;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $5 = $24;
 $42 = $5;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZN10emscripten3valD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(413,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK10emscripten3valixIA5_cEES0_RKT_($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $key;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 __ZN10emscripten3valC2EPKc($3,$8);
 $9 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 $10 = (invoke_iii(414,($7|0),($9|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __THREW__ = 0;
  invoke_vii(415,($0|0),($10|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   __ZN10emscripten3valD2Ev($3);
   $15 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($15|0);
  }
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $4 = $16;
 $5 = $17;
 __ZN10emscripten3valD2Ev($3);
 $18 = $4;
 $19 = $5;
 ___resumeException($18|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten3val6typeofEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $this;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (__emval_typeof(($3|0))|0);
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$4);
 $5 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function __ZNK10emscripten3val2asINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_v($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $destructors = 0, $dr = 0, $result = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $destructors = sp + 24|0;
 $dr = sp + 20|0;
 $0 = $this;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 $7 = (+__emval_as(($5|0),($6|0),($destructors|0)));
 $result = $7;
 $8 = HEAP32[$destructors>>2]|0;
 __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE($dr,$8);
 $9 = $result;
 __THREW__ = 0;
 invoke_vid(416,($agg$result|0),(+$9));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $1 = $12;
  $2 = $13;
  __ZN10emscripten8internal17DestructorsRunnerD2Ev($dr);
  $14 = $1;
  $15 = $2;
  ___resumeException($14|0);
  // unreachable;
 } else {
  $3 = 1;
  __ZN10emscripten8internal17DestructorsRunnerD2Ev($dr);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixEOi($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0, $__t$i = 0;
 var $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp + 24|0;
 $14 = sp + 343|0;
 $25 = sp + 16|0;
 $28 = sp + 342|0;
 $46 = sp + 8|0;
 $49 = sp + 341|0;
 $60 = sp;
 $63 = sp + 340|0;
 $__parent = sp + 56|0;
 $__h = sp + 36|0;
 $73 = $this;
 $74 = $__k;
 $77 = $73;
 $78 = $74;
 $79 = (__ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERS7_($77,$__parent,$78)|0);
 $__child = $79;
 $80 = $__child;
 $81 = HEAP32[$80>>2]|0;
 $__r = $81;
 $82 = $__child;
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(0|0);
 if (!($84)) {
  $190 = $__r;
  $191 = ((($190)) + 16|0);
  $192 = ((($191)) + 4|0);
  STACKTOP = sp;return ($192|0);
 }
 $85 = $74;
 $72 = $85;
 $86 = $72;
 __ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyEOi($__h,$77,$86);
 $87 = HEAP32[$__parent>>2]|0;
 $88 = $__child;
 $39 = $__h;
 $89 = $39;
 $38 = $89;
 $90 = $38;
 $37 = $90;
 $91 = $37;
 $92 = HEAP32[$91>>2]|0;
 __THREW__ = 0;
 invoke_viiii(417,($77|0),($87|0),($88|0),($92|0));
 $93 = __THREW__; __THREW__ = 0;
 $94 = $93&1;
 if ($94) {
  $145 = ___cxa_find_matching_catch()|0;
  $146 = tempRet0;
  $75 = $145;
  $76 = $146;
  $71 = $__h;
  $147 = $71;
  $69 = $147;
  $70 = 0;
  $148 = $69;
  $68 = $148;
  $149 = $68;
  $67 = $149;
  $150 = $67;
  $151 = HEAP32[$150>>2]|0;
  $__tmp$i$i = $151;
  $152 = $70;
  $43 = $148;
  $153 = $43;
  $42 = $153;
  $154 = $42;
  HEAP32[$154>>2] = $152;
  $155 = $__tmp$i$i;
  $156 = ($155|0)!=(0|0);
  if (!($156)) {
   $193 = $75;
   $194 = $76;
   ___resumeException($193|0);
   // unreachable;
  }
  $41 = $148;
  $157 = $41;
  $40 = $157;
  $158 = $40;
  $159 = ((($158)) + 4|0);
  $160 = $__tmp$i$i;
  $65 = $159;
  $66 = $160;
  $161 = $65;
  $162 = ((($161)) + 5|0);
  $163 = HEAP8[$162>>0]|0;
  $164 = $163&1;
  if ($164) {
   $165 = HEAP32[$161>>2]|0;
   $166 = $66;
   $167 = ((($166)) + 16|0);
   $168 = ((($167)) + 4|0);
   $64 = $168;
   $169 = $64;
   $61 = $165;
   $62 = $169;
   $170 = $61;
   $171 = $62;
   ;HEAP8[$60>>0]=HEAP8[$63>>0]|0;
   $58 = $170;
   $59 = $171;
  }
  $172 = ((($161)) + 4|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&1;
  if ($174) {
   $175 = HEAP32[$161>>2]|0;
   $176 = $66;
   $177 = ((($176)) + 16|0);
   $50 = $177;
   $178 = $50;
   $47 = $175;
   $48 = $178;
   $179 = $47;
   $180 = $48;
   ;HEAP8[$46>>0]=HEAP8[$49>>0]|0;
   $44 = $179;
   $45 = $180;
  }
  $181 = $66;
  $182 = ($181|0)!=(0|0);
  if (!($182)) {
   $193 = $75;
   $194 = $76;
   ___resumeException($193|0);
   // unreachable;
  }
  $183 = HEAP32[$161>>2]|0;
  $184 = $66;
  $55 = $183;
  $56 = $184;
  $57 = 1;
  $185 = $55;
  $186 = $56;
  $187 = $57;
  $52 = $185;
  $53 = $186;
  $54 = $187;
  $188 = $53;
  $51 = $188;
  $189 = $51;
  __ZdlPv($189);
  $193 = $75;
  $194 = $76;
  ___resumeException($193|0);
  // unreachable;
 } else {
  $4 = $__h;
  $95 = $4;
  $3 = $95;
  $96 = $3;
  $2 = $96;
  $97 = $2;
  $98 = HEAP32[$97>>2]|0;
  $__t$i = $98;
  $1 = $95;
  $99 = $1;
  $0 = $99;
  $100 = $0;
  HEAP32[$100>>2] = 0;
  $101 = $__t$i;
  $__r = $101;
  $36 = $__h;
  $102 = $36;
  $34 = $102;
  $35 = 0;
  $103 = $34;
  $33 = $103;
  $104 = $33;
  $32 = $104;
  $105 = $32;
  $106 = HEAP32[$105>>2]|0;
  $__tmp$i$i1 = $106;
  $107 = $35;
  $8 = $103;
  $108 = $8;
  $7 = $108;
  $109 = $7;
  HEAP32[$109>>2] = $107;
  $110 = $__tmp$i$i1;
  $111 = ($110|0)!=(0|0);
  if (!($111)) {
   $190 = $__r;
   $191 = ((($190)) + 16|0);
   $192 = ((($191)) + 4|0);
   STACKTOP = sp;return ($192|0);
  }
  $6 = $103;
  $112 = $6;
  $5 = $112;
  $113 = $5;
  $114 = ((($113)) + 4|0);
  $115 = $__tmp$i$i1;
  $30 = $114;
  $31 = $115;
  $116 = $30;
  $117 = ((($116)) + 5|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&1;
  if ($119) {
   $120 = HEAP32[$116>>2]|0;
   $121 = $31;
   $122 = ((($121)) + 16|0);
   $123 = ((($122)) + 4|0);
   $29 = $123;
   $124 = $29;
   $26 = $120;
   $27 = $124;
   $125 = $26;
   $126 = $27;
   ;HEAP8[$25>>0]=HEAP8[$28>>0]|0;
   $23 = $125;
   $24 = $126;
  }
  $127 = ((($116)) + 4|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128&1;
  if ($129) {
   $130 = HEAP32[$116>>2]|0;
   $131 = $31;
   $132 = ((($131)) + 16|0);
   $15 = $132;
   $133 = $15;
   $12 = $130;
   $13 = $133;
   $134 = $12;
   $135 = $13;
   ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
   $9 = $134;
   $10 = $135;
  }
  $136 = $31;
  $137 = ($136|0)!=(0|0);
  if (!($137)) {
   $190 = $__r;
   $191 = ((($190)) + 16|0);
   $192 = ((($191)) + 4|0);
   STACKTOP = sp;return ($192|0);
  }
  $138 = HEAP32[$116>>2]|0;
  $139 = $31;
  $20 = $138;
  $21 = $139;
  $22 = 1;
  $140 = $20;
  $141 = $21;
  $142 = $22;
  $17 = $140;
  $18 = $141;
  $19 = $142;
  $143 = $18;
  $16 = $143;
  $144 = $16;
  __ZdlPv($144);
  $190 = $__r;
  $191 = ((($190)) + 16|0);
  $192 = ((($191)) + 4|0);
  STACKTOP = sp;return ($192|0);
 }
 return (0)|0;
}
function __ZN12MemoryStreamC2EONSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$right) {
 $this = $this|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = $this;
 $8 = $right;
 $9 = $7;
 $10 = $8;
 $6 = $10;
 $11 = $6;
 $4 = $9;
 $5 = $11;
 $12 = $4;
 $13 = $5;
 $3 = $13;
 $14 = $3;
 ;HEAP32[$12>>2]=HEAP32[$14>>2]|0;HEAP32[$12+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$14+8>>2]|0;
 $15 = $5;
 $2 = $15;
 $16 = $2;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $0;
 $__a$i$i = $18;
 $__i$i$i = 0;
 while(1) {
  $19 = $__i$i$i;
  $20 = ($19>>>0)<(3);
  if (!($20)) {
   break;
  }
  $21 = $__i$i$i;
  $22 = $__a$i$i;
  $23 = (($22) + ($21<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = $__i$i$i;
  $25 = (($24) + 1)|0;
  $__i$i$i = $25;
 }
 $26 = ((($9)) + 12|0);
 HEAP32[$26>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN12MemoryStream5readBILi4EjEET0_v($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $out = sp;
 $14 = $this;
 $15 = $14;
 $13 = $15;
 $16 = $13;
 $12 = $16;
 $17 = $12;
 $11 = $17;
 $18 = $11;
 $10 = $18;
 $19 = $10;
 $9 = $19;
 $20 = $9;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 & 1;
 $24 = ($23|0)!=(0);
 if ($24) {
  $3 = $17;
  $25 = $3;
  $2 = $25;
  $26 = $2;
  $1 = $26;
  $27 = $1;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $36 = $29;
 } else {
  $8 = $17;
  $30 = $8;
  $7 = $30;
  $31 = $7;
  $6 = $31;
  $32 = $6;
  $33 = ((($32)) + 1|0);
  $5 = $33;
  $34 = $5;
  $4 = $34;
  $35 = $4;
  $36 = $35;
 }
 $0 = $36;
 $37 = $0;
 $38 = ((($15)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + ($39)|0);
 $41 = ((($40)) + 4|0);
 $42 = ((($41)) + -1|0);
 __Z7reverseILi4EEvPhS0_($out,$42);
 $43 = ((($15)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 4)|0;
 HEAP32[$43>>2] = $45;
 $46 = HEAP32[$out>>2]|0;
 STACKTOP = sp;return ($46|0);
}
function __ZN9NetStream11decodeAudioElR12MemoryStream($this,$_timestamp,$data) {
 $this = $this|0;
 $_timestamp = $_timestamp|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $audioType = 0, $flag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $flag = sp + 16|0;
 $0 = $this;
 $1 = $_timestamp;
 $2 = $data;
 $3 = $0;
 HEAP8[$flag>>0] = 0;
 $4 = $2;
 (__ZN12MemoryStream5readBILi1EhEERS_RT0_($4,$flag)|0);
 $5 = HEAP8[$flag>>0]|0;
 $6 = $5&255;
 $7 = $6 >> 4;
 $audioType = $7;
 $8 = HEAP32[$3>>2]|0;
 $9 = $audioType;
 $10 = $2;
 $11 = (__ZN12AudioDecoder6decodeEiR12MemoryStream($8,$9,$10)|0);
 if (!($11)) {
  STACKTOP = sp;return 1;
 }
 $12 = ((($3)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 __ZNK10emscripten3val4callIvJEEET_PKcDpOT0_($13,66996);
 STACKTOP = sp;return 1;
}
function __ZN12MemoryStreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN9NetStream11decodeVideoElR12MemoryStream($this,$_timestamp,$data) {
 $this = $this|0;
 $_timestamp = $_timestamp|0;
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avc_packet_type = 0, $codec_id = 0, $frame_type = 0, $info = 0, $or$cond = 0, $targetTime = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 82|0;
 $8 = sp + 48|0;
 $10 = sp + 28|0;
 $13 = sp + 16|0;
 $7 = $this;
 HEAP32[$8>>2] = $_timestamp;
 $9 = $data;
 $14 = $7;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$expand_i1_val = 0;
  HEAP8[$6>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $124 = $$pre_trunc&1;
  STACKTOP = sp;return ($124|0);
 }
 $18 = $9;
 $19 = (__ZN12MemoryStreamixEi($18,0)|0);
 $20 = HEAP8[$19>>0]|0;
 $frame_type = $20;
 $21 = $frame_type;
 $22 = $21&255;
 $23 = $22 & 15;
 $codec_id = $23;
 $24 = $frame_type;
 $25 = $24&255;
 $26 = $25 >> 4;
 $27 = $26 & 15;
 $28 = $27&255;
 $frame_type = $28;
 $29 = $codec_id;
 $30 = ($29|0)==(7);
 $31 = $codec_id;
 $32 = ($31|0)==(12);
 $or$cond = $30 | $32;
 $33 = $9;
 if (!($or$cond)) {
  $34 = (__ZN12MemoryStreamixEi($33,0)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  HEAP32[$vararg_buffer>>2] = 66766;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $36;
  _emscripten_log(0,($vararg_buffer|0));
  $$expand_i1_val8 = 0;
  HEAP8[$6>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $124 = $$pre_trunc&1;
  STACKTOP = sp;return ($124|0);
 }
 $37 = (__ZN12MemoryStreamixEi($33,1)|0);
 $38 = HEAP8[$37>>0]|0;
 $avc_packet_type = $38;
 $39 = $frame_type;
 $40 = $39&255;
 $41 = ($40|0)==(1);
 if ($41) {
  $42 = $avc_packet_type;
  $43 = $42&255;
  $44 = ($43|0)==(0);
  if ($44) {
   $45 = ((($14)) + 12|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&1;
   if ($47) {
    $48 = (__ZNK9NetStream7getTimeEv($14)|0);
    $49 = HEAP32[$8>>2]|0;
    $50 = (($48) - ($49))|0;
    $51 = ((($14)) + 24|0);
    HEAP32[$51>>2] = $50;
    $52 = ((($14)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $9;
    $55 = $codec_id;
    __ZN12VideoDecoder12decodeHeaderER12MemoryStreami($53,$54,$55);
    $56 = ((($14)) + 12|0);
    HEAP8[$56>>0] = 0;
   }
  } else {
   label = 9;
  }
 } else {
  label = 9;
 }
 if ((label|0) == 9) {
  $57 = ((($14)) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)!=(0|0);
  if (!($59)) {
   $$expand_i1_val10 = 0;
   HEAP8[$6>>0] = $$expand_i1_val10;
   $$pre_trunc = HEAP8[$6>>0]|0;
   $124 = $$pre_trunc&1;
   STACKTOP = sp;return ($124|0);
  }
  $60 = ((($14)) + 56|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)!=(0);
  if ($62) {
   $63 = (__ZNK9NetStream7getTimeEv($14)|0);
   $64 = ((($14)) + 24|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($63) - ($65))|0;
   $targetTime = $66;
   $67 = HEAP32[$8>>2]|0;
   $68 = ((($14)) + 56|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69*1000)|0;
   $71 = (($67) + ($70))|0;
   $72 = $targetTime;
   $73 = ($71|0)>($72|0);
   if ($73) {
    $74 = ((($14)) + 28|0);
    $75 = $9;
    $5 = $75;
    $76 = $5;
    $2 = $74;
    $3 = $8;
    $4 = $76;
    $77 = $2;
    $78 = $3;
    $1 = $78;
    $79 = $1;
    $80 = $4;
    $0 = $80;
    $81 = $0;
    __ZNSt3__15dequeI11VideoPacketNS_9allocatorIS1_EEE12emplace_backIJRl12MemoryStreamEEEvDpOT_($77,$79,$81);
    $82 = ((($14)) + 52|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&1;
    do {
     if (!($84)) {
      $85 = ((($14)) + 52|0);
      HEAP8[$85>>0] = 1;
      $86 = (__ZN10emscripten3val6objectEv()|0);
      HEAP32[$10>>2] = $86;
      $info = $10;
      $87 = $info;
      __THREW__ = 0;
      invoke_viii(418,($87|0),(66826|0),(66831|0));
      $88 = __THREW__; __THREW__ = 0;
      $89 = $88&1;
      if ($89) {
       $117 = ___cxa_find_matching_catch()|0;
       $118 = tempRet0;
       $11 = $117;
       $12 = $118;
       __ZN10emscripten3valD2Ev($10);
       $119 = $11;
       $120 = $12;
       ___resumeException($119|0);
       // unreachable;
      }
      $90 = ((($14)) + 16|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = $info;
      __THREW__ = 0;
      invoke_viii(411,($91|0),(66852|0),($92|0));
      $93 = __THREW__; __THREW__ = 0;
      $94 = $93&1;
      if ($94) {
       $117 = ___cxa_find_matching_catch()|0;
       $118 = tempRet0;
       $11 = $117;
       $12 = $118;
       __ZN10emscripten3valD2Ev($10);
       $119 = $11;
       $120 = $12;
       ___resumeException($119|0);
       // unreachable;
      }
      $95 = HEAP32[$8>>2]|0;
      $96 = $targetTime;
      $97 = (($95) - ($96))|0;
      $98 = ((($14)) + 56|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($99*1000)|0;
      $101 = (($97) + ($100))|0;
      __THREW__ = 0;
      HEAP32[$vararg_buffer3>>2] = 66864;
      $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
      HEAP32[$vararg_ptr6>>2] = $101;
      invoke_vii(372,0,($vararg_buffer3|0));
      $102 = __THREW__; __THREW__ = 0;
      $103 = $102&1;
      if ($103) {
       $117 = ___cxa_find_matching_catch()|0;
       $118 = tempRet0;
       $11 = $117;
       $12 = $118;
       __ZN10emscripten3valD2Ev($10);
       $119 = $11;
       $120 = $12;
       ___resumeException($119|0);
       // unreachable;
      }
      $104 = ((($14)) + 16|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = HEAP32[$8>>2]|0;
      $107 = $targetTime;
      $108 = (($106) - ($107))|0;
      $109 = ((($14)) + 56|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ($110*1000)|0;
      $112 = (($108) + ($111))|0;
      HEAP32[$13>>2] = $112;
      __THREW__ = 0;
      $113 = (invoke_iiii(419,($105|0),(66899|0),($13|0))|0);
      $114 = __THREW__; __THREW__ = 0;
      $115 = $114&1;
      if ($115) {
       $117 = ___cxa_find_matching_catch()|0;
       $118 = tempRet0;
       $11 = $117;
       $12 = $118;
       __ZN10emscripten3valD2Ev($10);
       $119 = $11;
       $120 = $12;
       ___resumeException($119|0);
       // unreachable;
      } else {
       $116 = ((($14)) + 60|0);
       HEAP32[$116>>2] = $113;
       __ZN10emscripten3valD2Ev($10);
       break;
      }
     }
    } while(0);
    $$expand_i1_val12 = 0;
    HEAP8[$6>>0] = $$expand_i1_val12;
    $$pre_trunc = HEAP8[$6>>0]|0;
    $124 = $$pre_trunc&1;
    STACKTOP = sp;return ($124|0);
   }
  }
  $121 = ((($14)) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $9;
  __ZN12VideoDecoder6decodeER12MemoryStream($122,$123);
 }
 $$expand_i1_val14 = 1;
 HEAP8[$6>>0] = $$expand_i1_val14;
 $$pre_trunc = HEAP8[$6>>0]|0;
 $124 = $$pre_trunc&1;
 STACKTOP = sp;return ($124|0);
}
function __ZNK10emscripten3val4callIvJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEET_PKcDpOT0_($this,$name,$args) {
 $this = $this|0;
 $name = $name|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $args;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = $3;
 $0 = $7;
 $8 = $0;
 __ZN10emscripten8internal12MethodCallerIvJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE4callEPNS0_7_EM_VALEPKcS9_($5,$6,$8);
 STACKTOP = sp;return;
}
function __ZNK10emscripten3val4callIvJEEET_PKcDpOT0_($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 __ZN10emscripten8internal12MethodCallerIvJEE4callEPNS0_7_EM_VALEPKc($3,$4);
 STACKTOP = sp;return;
}
function __ZN10emscripten3valC2ERKS0_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 __emval_incref(($5|0));
 STACKTOP = sp;return;
}
function __ZNK10emscripten3val4callIvJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEET_PKcDpOT0_($this,$name,$args) {
 $this = $this|0;
 $name = $name|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $args;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = $3;
 $0 = $7;
 $8 = $0;
 __ZN10emscripten8internal12MethodCallerIvJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE4callEPNS0_7_EM_VALEPKcSA_($5,$6,$8);
 STACKTOP = sp;return;
}
function __ZN10emscripten3valC2IRS0_EEOT_($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $argv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp;
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = $2;
 $0 = $4;
 $5 = $0;
 __ZN10emscripten8internal12WireTypePackIJRNS_3valEEEC2ES3_($argv,$5);
 $6 = (__ZN10emscripten8internal6TypeIDIRNS_3valEE3getEv()|0);
 $7 = (__ZNK10emscripten8internal12WireTypePackIJRNS_3valEEEcvPKvEv($argv)|0);
 $8 = (__emval_take_value(($6|0),($7|0))|0);
 HEAP32[$3>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN10emscripten3val6globalEPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $name;
 $2 = $1;
 $3 = (__emval_get_global(($2|0))|0);
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$3);
 $4 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $__lhs_sz = 0, $__rhs_sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 199|0;
 $9 = sp;
 $12 = sp + 198|0;
 $43 = sp + 197|0;
 $44 = sp + 196|0;
 $41 = $__lhs;
 $42 = $__rhs;
 $$expand_i1_val = 0;
 HEAP8[$43>>0] = $$expand_i1_val;
 $48 = $42;
 $40 = $48;
 $49 = $40;
 $39 = $49;
 $50 = $39;
 $38 = $50;
 $51 = $38;
 $37 = $51;
 $10 = $agg$result;
 $11 = $44;
 $52 = $10;
 ;HEAP8[$9>>0]=HEAP8[$12>>0]|0;
 $7 = $52;
 $53 = $7;
 $6 = $9;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $4 = $53;
 $3 = $5;
 $2 = $52;
 $54 = $2;
 $1 = $54;
 $55 = $1;
 $0 = $55;
 $56 = $0;
 $__a$i$i = $56;
 $__i$i$i = 0;
 while(1) {
  $57 = $__i$i$i;
  $58 = ($57>>>0)<(3);
  if (!($58)) {
   break;
  }
  $59 = $__i$i$i;
  $60 = $__a$i$i;
  $61 = (($60) + ($59<<2)|0);
  HEAP32[$61>>2] = 0;
  $62 = $__i$i$i;
  $63 = (($62) + 1)|0;
  $__i$i$i = $63;
 }
 $64 = $41;
 __THREW__ = 0;
 $65 = (invoke_ii(420,($64|0))|0);
 $66 = __THREW__; __THREW__ = 0;
 $67 = $66&1;
 if ($67) {
  $123 = ___cxa_find_matching_catch()|0;
  $124 = tempRet0;
  $45 = $123;
  $46 = $124;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $125 = $45;
  $126 = $46;
  ___resumeException($125|0);
  // unreachable;
 }
 $__lhs_sz = $65;
 $68 = $42;
 $22 = $68;
 $69 = $22;
 $21 = $69;
 $70 = $21;
 $20 = $70;
 $71 = $20;
 $19 = $71;
 $72 = $19;
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $74 & 1;
 $76 = ($75|0)!=(0);
 if ($76) {
  $15 = $69;
  $77 = $15;
  $14 = $77;
  $78 = $14;
  $13 = $78;
  $79 = $13;
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $88 = $81;
 } else {
  $18 = $69;
  $82 = $18;
  $17 = $82;
  $83 = $17;
  $16 = $83;
  $84 = $16;
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = $86 >> 1;
  $88 = $87;
 }
 $__rhs_sz = $88;
 $89 = $41;
 $90 = $__lhs_sz;
 $91 = $__lhs_sz;
 $92 = $__rhs_sz;
 $93 = (($91) + ($92))|0;
 __THREW__ = 0;
 invoke_viiii(421,($agg$result|0),($89|0),($90|0),($93|0));
 $94 = __THREW__; __THREW__ = 0;
 $95 = $94&1;
 if ($95) {
  $123 = ___cxa_find_matching_catch()|0;
  $124 = tempRet0;
  $45 = $123;
  $46 = $124;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $125 = $45;
  $126 = $46;
  ___resumeException($125|0);
  // unreachable;
 }
 $96 = $42;
 $36 = $96;
 $97 = $36;
 $35 = $97;
 $98 = $35;
 $34 = $98;
 $99 = $34;
 $33 = $99;
 $100 = $33;
 $32 = $100;
 $101 = $32;
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = $103 & 1;
 $105 = ($104|0)!=(0);
 if ($105) {
  $26 = $98;
  $106 = $26;
  $25 = $106;
  $107 = $25;
  $24 = $107;
  $108 = $24;
  $109 = ((($108)) + 8|0);
  $110 = HEAP32[$109>>2]|0;
  $117 = $110;
 } else {
  $31 = $98;
  $111 = $31;
  $30 = $111;
  $112 = $30;
  $29 = $112;
  $113 = $29;
  $114 = ((($113)) + 1|0);
  $28 = $114;
  $115 = $28;
  $27 = $115;
  $116 = $27;
  $117 = $116;
 }
 $23 = $117;
 $118 = $23;
 $119 = $__rhs_sz;
 __THREW__ = 0;
 (invoke_iiii(379,($agg$result|0),($118|0),($119|0))|0);
 $120 = __THREW__; __THREW__ = 0;
 $121 = $120&1;
 if ($121) {
  $123 = ___cxa_find_matching_catch()|0;
  $124 = tempRet0;
  $45 = $123;
  $46 = $124;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $125 = $45;
  $126 = $46;
  ___resumeException($125|0);
  // unreachable;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$43>>0] = $$expand_i1_val2;
 $47 = 1;
 $$pre_trunc = HEAP8[$43>>0]|0;
 $122 = $$pre_trunc&1;
 if ($122) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZNK10emscripten3val4new_IJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEES0_DpOT_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 8|0;
 $2 = $this;
 $3 = $args;
 $4 = $2;
 $5 = $3;
 $0 = $5;
 $6 = $0;
 $7 = (__ZNK10emscripten3val12internalCallIPFPNS_8internal7_EM_VALES4_jPKPKvS6_EJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEES0_T_DpOT0_($4,422,$6)|0);
 HEAP32[$1>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZN10emscripten3val3setIA11_cA12_cEEvRKT_RKT0_($this,$key,$value) {
 $this = $this|0;
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $0 = $this;
 $1 = $key;
 $2 = $value;
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 __ZN10emscripten3valC2EPKc($3,$9);
 $10 = HEAP32[$3>>2]|0;
 $11 = $2;
 __THREW__ = 0;
 invoke_vii(423,($4|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $5 = $17;
  $6 = $18;
  __ZN10emscripten3valD2Ev($3);
  $21 = $5;
  $22 = $6;
  ___resumeException($21|0);
  // unreachable;
 }
 $14 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_viii(424,($8|0),($10|0),($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  __ZN10emscripten3valD2Ev($4);
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $5 = $19;
 $6 = $20;
 __ZN10emscripten3valD2Ev($4);
 __ZN10emscripten3valD2Ev($3);
 $21 = $5;
 $22 = $6;
 ___resumeException($21|0);
 // unreachable;
}
function __ZNK10emscripten3valixIA10_cEES0_RKT_($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $key;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 __ZN10emscripten3valC2EPKc($3,$8);
 $9 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 $10 = (invoke_iii(414,($7|0),($9|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __THREW__ = 0;
  invoke_vii(415,($0|0),($10|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   __ZN10emscripten3valD2Ev($3);
   $15 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($15|0);
  }
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $4 = $16;
 $5 = $17;
 __ZN10emscripten3valD2Ev($3);
 $18 = $4;
 $19 = $5;
 ___resumeException($18|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten3val4callIS0_JRS0_EEET_PKcDpOT0_($this,$name,$args) {
 $this = $this|0;
 $name = $name|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 12|0;
 $2 = $this;
 $3 = $name;
 $4 = $args;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = $4;
 $0 = $8;
 $9 = $0;
 $10 = (__ZN10emscripten8internal12MethodCallerINS_3valEJRS2_EE4callEPNS0_7_EM_VALEPKcS3_($6,$7,$9)|0);
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function __ZN10emscripten3val3setIA7_cEEvRKT_RKS0_($this,$key,$v) {
 $this = $this|0;
 $key = $key|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $this;
 $1 = $key;
 $2 = $v;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 __ZN10emscripten3valC2EPKc($3,$8);
 $9 = HEAP32[$3>>2]|0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 __THREW__ = 0;
 invoke_viii(424,($7|0),($9|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZN10emscripten3valD2Ev($3);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNK10emscripten3valixIA13_cEES0_RKT_($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $key;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 __ZN10emscripten3valC2EPKc($3,$8);
 $9 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 $10 = (invoke_iii(414,($7|0),($9|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __THREW__ = 0;
  invoke_vii(415,($0|0),($10|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   __ZN10emscripten3valD2Ev($3);
   $15 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($15|0);
  }
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $4 = $16;
 $5 = $17;
 __ZN10emscripten3valD2Ev($3);
 $18 = $4;
 $19 = $5;
 ___resumeException($18|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten3val3setIA10_cEEvRKT_RKS0_($this,$key,$v) {
 $this = $this|0;
 $key = $key|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $this;
 $1 = $key;
 $2 = $v;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 __ZN10emscripten3valC2EPKc($3,$8);
 $9 = HEAP32[$3>>2]|0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 __THREW__ = 0;
 invoke_viii(424,($7|0),($9|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZN10emscripten3valD2Ev($3);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten3val3setIA8_cEEvRKT_RKS0_($this,$key,$v) {
 $this = $this|0;
 $key = $key|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $this;
 $1 = $key;
 $2 = $v;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 __ZN10emscripten3valC2EPKc($3,$8);
 $9 = HEAP32[$3>>2]|0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 __THREW__ = 0;
 invoke_viii(424,($7|0),($9|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZN10emscripten3valD2Ev($3);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN9NetStreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 HEAP32[$vararg_buffer>>2] = 66654;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 invoke_vii(372,0,($vararg_buffer|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $17 = ___cxa_find_matching_catch(0|0)|0;
  $18 = tempRet0;
  $1 = $17;
  $2 = $18;
  $19 = ((($3)) + 28|0);
  __ZNSt3__15queueI11VideoPacketNS_5dequeIS1_NS_9allocatorIS1_EEEEED2Ev($19);
  $20 = $1;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $8 = ((($3)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = _emscripten_asm_const_1(1, ($9|0))|0;
 $11 = ((($3)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = ((($3)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   __ZN12VideoDecoderD2Ev($15);
   __ZdlPv($15);
  }
 }
 $21 = HEAP32[$3>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = HEAP32[$3>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   __ZN12AudioDecoderD2Ev($23);
   __ZdlPv($23);
  }
 }
 $25 = ((($3)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $31 = ((($3)) + 28|0);
  __ZNSt3__15queueI11VideoPacketNS_5dequeIS1_NS_9allocatorIS1_EEEEED2Ev($31);
  STACKTOP = sp;return;
 }
 $28 = ((($3)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = ((($3)) + 28|0);
  __ZNSt3__15queueI11VideoPacketNS_5dequeIS1_NS_9allocatorIS1_EEEEED2Ev($31);
  STACKTOP = sp;return;
 }
 __ZN10emscripten3valD2Ev($29);
 __ZdlPv($29);
 $31 = ((($3)) + 28|0);
 __ZNSt3__15queueI11VideoPacketNS_5dequeIS1_NS_9allocatorIS1_EEEEED2Ev($31);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = $this;
 $21 = $20;
 $19 = $21;
 $22 = $19;
 $18 = $22;
 $23 = $18;
 $24 = ((($23)) + 4|0);
 $17 = $24;
 $25 = $17;
 $16 = $25;
 $26 = $16;
 $15 = $26;
 $27 = $15;
 $14 = $27;
 $28 = $14;
 $29 = HEAP32[$28>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($21,$29);
 $2 = $21;
 $30 = $2;
 $31 = ((($30)) + 8|0);
 $1 = $31;
 $32 = $1;
 $0 = $32;
 $33 = $0;
 HEAP32[$33>>2] = 0;
 $7 = $21;
 $34 = $7;
 $35 = ((($34)) + 4|0);
 $6 = $35;
 $36 = $6;
 $5 = $36;
 $37 = $5;
 $4 = $37;
 $38 = $4;
 $3 = $38;
 $39 = $3;
 $8 = $21;
 $40 = $8;
 HEAP32[$40>>2] = $39;
 $13 = $21;
 $41 = $13;
 $42 = ((($41)) + 4|0);
 $12 = $42;
 $43 = $12;
 $11 = $43;
 $44 = $11;
 $10 = $44;
 $45 = $10;
 $9 = $45;
 $46 = $9;
 HEAP32[$46>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10MonaClientEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI10MonaClientEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = (__ZN10emscripten8internal14getLightTypeIDI10MonaClientEEPKvRKT_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10MonaClientEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10MonaClientEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI10MonaClientEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZN10MonaClientD2Ev($1);
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDI10MonaClientE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10MonaClientE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10MonaClientEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10MonaClientE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10MonaClientEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10MonaClientE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal12operator_newI10MonaClientJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(64)|0);
 __THREW__ = 0;
 invoke_vi(425,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerIP10MonaClientJEE6invokeEPFS3_vE($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $0;
 $2 = (FUNCTION_TABLE_i[$1 & 1023]()|0);
 $3 = (__ZN10emscripten8internal11BindingTypeIP10MonaClientE10toWireTypeES3_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP10MonaClientEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP10MonaClientEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI10MonaClientEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10MonaClientFvNS_3valEEvPS2_JS3_EE6invokeERKS5_S6_PNS0_7_EM_VALE($method,$wireThis,$args) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $method;
 $1 = $wireThis;
 $2 = $args;
 $6 = $0;
 $$field = HEAP32[$6>>2]|0;
 $$index1 = ((($6)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal11BindingTypeIP10MonaClientE12fromWireTypeES3_($7)|0);
 $9 = $$field2 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$field2 & 1;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$field)|0);
  $15 = HEAP32[$14>>2]|0;
  $19 = $15;
 } else {
  $16 = $$field;
  $19 = $16;
 }
 $17 = $2;
 $18 = (__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($17)|0);
 HEAP32[$3>>2] = $18;
 __THREW__ = 0;
 invoke_vii($19|0,($10|0),($3|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $4 = $22;
  $5 = $23;
  __ZN10emscripten3valD2Ev($3);
  $24 = $4;
  $25 = $5;
  ___resumeException($24|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10MonaClientEENS_3valEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10MonaClientEENS_3valEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10MonaClientEENS_3valEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10MonaClientFvNS_3valEEEEPT_RKS6_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10MonaClientFNS_3valES3_ES3_PS2_JS3_EE6invokeERKS5_S6_PNS0_7_EM_VALE($method,$wireThis,$args) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $0 = $method;
 $1 = $wireThis;
 $2 = $args;
 $7 = $0;
 $$field = HEAP32[$7>>2]|0;
 $$index1 = ((($7)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $8 = $1;
 $9 = (__ZN10emscripten8internal11BindingTypeIP10MonaClientE12fromWireTypeES3_($8)|0);
 $10 = $$field2 >> 1;
 $11 = (($9) + ($10)|0);
 $12 = $$field2 & 1;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = HEAP32[$11>>2]|0;
  $15 = (($14) + ($$field)|0);
  $16 = HEAP32[$15>>2]|0;
  $20 = $16;
 } else {
  $17 = $$field;
  $20 = $17;
 }
 $18 = $2;
 $19 = (__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($18)|0);
 HEAP32[$4>>2] = $19;
 __THREW__ = 0;
 $21 = (invoke_iii($20|0,($11|0),($4|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  $5 = $27;
  $6 = $28;
  __ZN10emscripten3valD2Ev($4);
  $31 = $5;
  $32 = $6;
  ___resumeException($31|0);
  // unreachable;
 }
 HEAP32[$3>>2] = $21;
 __THREW__ = 0;
 $24 = (invoke_ii(412,($3|0))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if (!($26)) {
  __ZN10emscripten3valD2Ev($3);
  __ZN10emscripten3valD2Ev($4);
  STACKTOP = sp;return ($24|0);
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $5 = $29;
 $6 = $30;
 __ZN10emscripten3valD2Ev($3);
 __ZN10emscripten3valD2Ev($4);
 $31 = $5;
 $32 = $6;
 ___resumeException($31|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES4_EE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES4_EE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES3_EEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (66634|0);
}
function __ZN10emscripten8internal10getContextIM10MonaClientFNS_3valES3_EEEPT_RKS6_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10MonaClientFvvEvPS2_JEE6invokeERKS4_S5_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $method;
 $1 = $wireThis;
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal11BindingTypeIP10MonaClientE12fromWireTypeES3_($3)|0);
 $5 = $$field2 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$field2 & 1;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$field)|0);
  $11 = HEAP32[$10>>2]|0;
  $13 = $11;
  FUNCTION_TABLE_vi[$13 & 1023]($6);
  STACKTOP = sp;return;
 } else {
  $12 = $$field;
  $13 = $12;
  FUNCTION_TABLE_vi[$13 & 1023]($6);
  STACKTOP = sp;return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10MonaClientEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10MonaClientEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10MonaClientEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10MonaClientFvvEEEPT_RKS5_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10MonaClientFNS_3valES3_NSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_ES3_PS2_JS3_SA_SA_SA_EE6invokeERKSC_SD_PNS0_7_EM_VALEPNS0_11BindingTypeISA_EUt_ESM_SM_($method,$wireThis,$args,$args1,$args2,$args3) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 $args3 = $args3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 48|0;
 $7 = sp + 44|0;
 $8 = sp + 32|0;
 $11 = sp + 12|0;
 $12 = sp;
 $0 = $method;
 $1 = $wireThis;
 $2 = $args;
 $3 = $args1;
 $4 = $args2;
 $5 = $args3;
 $13 = $0;
 $$field = HEAP32[$13>>2]|0;
 $$index1 = ((($13)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $14 = $1;
 $15 = (__ZN10emscripten8internal11BindingTypeIP10MonaClientE12fromWireTypeES3_($14)|0);
 $16 = $$field2 >> 1;
 $17 = (($15) + ($16)|0);
 $18 = $$field2 & 1;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = HEAP32[$17>>2]|0;
  $21 = (($20) + ($$field)|0);
  $22 = HEAP32[$21>>2]|0;
  $35 = $22;
 } else {
  $23 = $$field;
  $35 = $23;
 }
 $24 = $2;
 $25 = (__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($24)|0);
 HEAP32[$7>>2] = $25;
 $26 = $3;
 __THREW__ = 0;
 invoke_vii(426,($8|0),($26|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $9 = $42;
  $10 = $43;
  __ZN10emscripten3valD2Ev($7);
  $52 = $9;
  $53 = $10;
  ___resumeException($52|0);
  // unreachable;
 }
 $29 = $4;
 __THREW__ = 0;
 invoke_vii(426,($11|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $9 = $44;
  $10 = $45;
 } else {
  $32 = $5;
  __THREW__ = 0;
  invoke_vii(426,($12|0),($32|0));
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if ($34) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $9 = $46;
   $10 = $47;
  } else {
   __THREW__ = 0;
   $36 = (invoke_iiiiii($35|0,($17|0),($7|0),($8|0),($11|0),($12|0))|0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   do {
    if ($38) {
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     $9 = $48;
     $10 = $49;
    } else {
     HEAP32[$6>>2] = $36;
     __THREW__ = 0;
     $39 = (invoke_ii(412,($6|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $50 = ___cxa_find_matching_catch()|0;
      $51 = tempRet0;
      $9 = $50;
      $10 = $51;
      __ZN10emscripten3valD2Ev($6);
      break;
     } else {
      __ZN10emscripten3valD2Ev($6);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      __ZN10emscripten3valD2Ev($7);
      STACKTOP = sp;return ($39|0);
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZN10emscripten3valD2Ev($7);
 $52 = $9;
 $53 = $10;
 ___resumeException($52|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES4_NSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESE_SE_EE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES4_NSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESE_SE_EE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES3_NSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESD_SD_EEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (66479|0);
}
function __ZN10emscripten8internal10getContextIM10MonaClientFNS_3valES3_NSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_EEEPT_RKSD_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __GLOBAL__sub_I_MonaClient_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 ___cxx_global_var_init27();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_NetStreamC2Ev(66478);
 return;
}
function ___cxx_global_var_init27() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN39EmscriptenBindingInitializer_MonaClientC2Ev(66477);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES3_NSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESD_SD_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6032|0);
}
function __ZN10emscripten8internal11BindingTypeIP10MonaClientE12fromWireTypeES3_($wt) {
 $wt = $wt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $v;
 $2 = $1;
 $3 = (__ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($2)|0);
 HEAP32[$0>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg$result,$v) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $v;
 $7 = $6;
 $8 = ((($7)) + 4|0);
 $9 = $6;
 $10 = HEAP32[$9>>2]|0;
 $3 = $agg$result;
 $4 = $8;
 $5 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $4;
 $15 = $5;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($11,$14,$15);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 __emval_incref(($2|0));
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $e;
 $2 = $1;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$2);
 $3 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($this,$handle) {
 $this = $this|0;
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $handle;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10MonaClientEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6056|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valENS0_17AllowedRawPointerI10MonaClientEES3_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6064|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10MonaClientEENS_3valEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6076|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI10MonaClientEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6088|0);
}
function __ZN10emscripten8internal11BindingTypeIP10MonaClientE10toWireTypeES3_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK10MonaClientE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (72|0);
}
function __ZN10emscripten8internal11LightTypeIDIP10MonaClientE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (16|0);
}
function __ZN10emscripten8internal11LightTypeIDI10MonaClientE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (64|0);
}
function __ZN10emscripten8internal14getLightTypeIDI10MonaClientEEPKvRKT_($value) {
 $value = $value|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 STACKTOP = sp;return (64|0);
}
function __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 80|0;
 $18 = $this;
 $19 = $__nd;
 $20 = $18;
 $21 = $19;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $19;
 $24 = HEAP32[$23>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($20,$24);
 $25 = $19;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($20,$27);
 $10 = $20;
 $28 = $10;
 $29 = ((($28)) + 4|0);
 $9 = $29;
 $30 = $9;
 $8 = $30;
 $31 = $8;
 $__na = $31;
 $32 = $__na;
 $33 = $19;
 $34 = ((($33)) + 16|0);
 $7 = $34;
 $35 = $7;
 $4 = $32;
 $5 = $35;
 $36 = $4;
 $37 = $5;
 ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
 $1 = $36;
 $2 = $37;
 $38 = $2;
 $0 = $38;
 $39 = $__na;
 $40 = $19;
 $15 = $39;
 $16 = $40;
 $17 = 1;
 $41 = $15;
 $42 = $16;
 $43 = $17;
 $12 = $41;
 $13 = $42;
 $14 = $43;
 $44 = $13;
 $11 = $44;
 $45 = $11;
 __ZdlPv($45);
 STACKTOP = sp;return;
}
function __ZN12VideoDecoderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 128|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  label = 4;
 } else {
  $5 = ((($1)) + 100|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = ((($1)) + 100|0);
   $9 = HEAP32[$8>>2]|0;
   __THREW__ = 0;
   invoke_vi(427,($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    label = 4;
   }
  } else {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $12 = ((($1)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0|0);
   if ($14) {
    $15 = ((($1)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    __THREW__ = 0;
    invoke_vi(428,($16|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($1)) + 4|0);
    HEAP32[$19>>2] = 0;
   }
   __THREW__ = 0;
   HEAP32[$vararg_buffer>>2] = 66742;
   invoke_vii(372,0,($vararg_buffer|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $22 = ___cxa_find_matching_catch(0|0)|0;
 $23 = tempRet0;
 ___clang_call_terminate($22);
 // unreachable;
}
function __ZNSt3__15queueI11VideoPacketNS_5dequeIS1_NS_9allocatorIS1_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__15dequeI11VideoPacketNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AudioDecoderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 HEAP32[$vararg_buffer>>2] = 66695;
 invoke_vii(372,0,($vararg_buffer|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = ((($3)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  __THREW__ = 0;
  invoke_vi(427,($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   __THREW__ = 0;
   HEAP32[$vararg_buffer1>>2] = 66718;
   invoke_vii(372,0,($vararg_buffer1|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = ((($3)) + 12|0);
    __ZN10MP3DecoderD2Ev($12);
    STACKTOP = sp;return;
   }
  }
 }
 $13 = ___cxa_find_matching_catch(0|0)|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 $15 = ((($3)) + 12|0);
 __ZN10MP3DecoderD2Ev($15);
 $16 = $1;
 ___clang_call_terminate($16);
 // unreachable;
}
function __ZN10MP3DecoderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 64|0);
 __THREW__ = 0;
 invoke_vi(429,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  $1 = $9;
  $2 = $10;
  $11 = ((($3)) + 22672|0);
  __ZN12MemoryStreamD2Ev($11);
  $12 = ((($3)) + 22656|0);
  __ZN12MemoryStreamD2Ev($12);
  $13 = $1;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $7 = ((($3)) + 22672|0);
  __ZN12MemoryStreamD2Ev($7);
  $8 = ((($3)) + 22656|0);
  __ZN12MemoryStreamD2Ev($8);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__15dequeI11VideoPacketNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__deque_baseI11VideoPacketNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseI11VideoPacketNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__e = 0, $__i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $12;
 __ZNSt3__112__deque_baseI11VideoPacketNS_9allocatorIS1_EEE5clearEv($13);
 $11 = $13;
 $14 = $11;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $__i = $16;
 $10 = $13;
 $17 = $10;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $__e = $19;
 while(1) {
  $20 = $__i;
  $21 = $__e;
  $22 = ($20|0)!=($21|0);
  if (!($22)) {
   break;
  }
  $9 = $13;
  $23 = $9;
  $24 = ((($23)) + 20|0);
  $8 = $24;
  $25 = $8;
  $7 = $25;
  $26 = $7;
  $27 = $__i;
  $28 = HEAP32[$27>>2]|0;
  $4 = $26;
  $5 = $28;
  $6 = 204;
  $29 = $4;
  $30 = $5;
  $31 = $6;
  $1 = $29;
  $2 = $30;
  $3 = $31;
  $32 = $2;
  $0 = $32;
  $33 = $0;
  __ZdlPv($33);
  $34 = $__i;
  $35 = ((($34)) + 4|0);
  $__i = $35;
 }
 __ZNSt3__114__split_bufferIP11VideoPacketNS_9allocatorIS2_EEED2Ev($13);
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseI11VideoPacketNS_9allocatorIS1_EEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__e = 0, $__i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 177|0;
 $25 = sp;
 $28 = sp + 176|0;
 $__i = sp + 24|0;
 $__e = sp + 16|0;
 $38 = $this;
 $39 = $38;
 $37 = $39;
 $40 = $37;
 $41 = ((($40)) + 20|0);
 $36 = $41;
 $42 = $36;
 $35 = $42;
 $43 = $35;
 $__a = $43;
 __ZNSt3__112__deque_baseI11VideoPacketNS_9allocatorIS1_EEE5beginEv($__i,$39);
 __ZNSt3__112__deque_baseI11VideoPacketNS_9allocatorIS1_EEE3endEv($__e,$39);
 while(1) {
  $33 = $__i;
  $34 = $__e;
  $44 = $33;
  $45 = $34;
  $31 = $44;
  $32 = $45;
  $46 = $31;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $32;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($48|0)==($51|0);
  $53 = $52 ^ 1;
  if (!($53)) {
   break;
  }
  $54 = $__a;
  $15 = $__i;
  $55 = $15;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $0 = $57;
  $58 = $0;
  $6 = $54;
  $7 = $58;
  $59 = $6;
  $60 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $59;
  $4 = $60;
  $61 = $3;
  $62 = $4;
  $1 = $61;
  $2 = $62;
  $63 = $2;
  __ZN11VideoPacketD2Ev($63);
  $9 = $__i;
  $64 = $9;
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 20|0);
  HEAP32[$65>>2] = $67;
  $68 = HEAP32[$64>>2]|0;
  $69 = HEAP32[$68>>2]|0;
  $70 = $67;
  $71 = $69;
  $72 = (($70) - ($71))|0;
  $73 = (($72|0) / 20)&-1;
  $74 = ($73|0)==(204);
  if (!($74)) {
   continue;
  }
  $75 = HEAP32[$64>>2]|0;
  $76 = ((($75)) + 4|0);
  HEAP32[$64>>2] = $76;
  $77 = HEAP32[$64>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($64)) + 4|0);
  HEAP32[$79>>2] = $78;
 }
 $12 = $39;
 $80 = $12;
 $81 = ((($80)) + 20|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 HEAP32[$83>>2] = 0;
 while(1) {
  $13 = $39;
  $84 = $13;
  $85 = ((($84)) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($84)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $86;
  $90 = $88;
  $91 = (($89) - ($90))|0;
  $92 = (($91|0) / 4)&-1;
  $93 = ($92>>>0)>(2);
  if (!($93)) {
   break;
  }
  $94 = $__a;
  $14 = $39;
  $95 = $14;
  $96 = ((($95)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = HEAP32[$97>>2]|0;
  $20 = $94;
  $21 = $98;
  $22 = 204;
  $99 = $20;
  $100 = $21;
  $101 = $22;
  $17 = $99;
  $18 = $100;
  $19 = $101;
  $102 = $18;
  $16 = $102;
  $103 = $16;
  __ZdlPv($103);
  $29 = $39;
  $104 = $29;
  $105 = ((($104)) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ((($106)) + 4|0);
  $26 = $104;
  $27 = $107;
  $108 = $26;
  $109 = $27;
  ;HEAP8[$25>>0]=HEAP8[$28>>0]|0;
  $23 = $108;
  $24 = $109;
  $110 = $23;
  $111 = $24;
  $112 = ((($110)) + 4|0);
  HEAP32[$112>>2] = $111;
 }
 $30 = $39;
 $113 = $30;
 $114 = ((($113)) + 8|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ((($113)) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $115;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 4)&-1;
 switch ($121|0) {
 case 1:  {
  $122 = ((($39)) + 16|0);
  HEAP32[$122>>2] = 102;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $123 = ((($39)) + 16|0);
  HEAP32[$123>>2] = 204;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZNSt3__114__split_bufferIP11VideoPacketNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($40)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $22 = $51;
  $52 = $22;
  $19 = $48;
  $20 = $52;
  $53 = $19;
  $54 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $53;
  $17 = $54;
  $55 = $16;
  $56 = $17;
  $14 = $55;
  $15 = $56;
 }
 $57 = HEAP32[$34>>2]|0;
 $58 = ($57|0)!=(0|0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $59 = $13;
 $60 = ((($59)) + 12|0);
 $12 = $60;
 $61 = $12;
 $11 = $61;
 $62 = $11;
 $63 = HEAP32[$34>>2]|0;
 $3 = $34;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $8 = $62;
 $9 = $63;
 $10 = $74;
 $75 = $8;
 $76 = $9;
 $77 = $10;
 $5 = $75;
 $6 = $76;
 $7 = $77;
 $78 = $6;
 $4 = $78;
 $79 = $4;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseI11VideoPacketNS_9allocatorIS1_EEE5beginEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $5;
 $4 = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($6)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11>>>0) / 204)&-1;
 $13 = (($9) + ($12<<2)|0);
 $__mp = $13;
 $14 = $__mp;
 $3 = $6;
 $15 = $3;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($15)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)==($19|0);
 if ($20) {
  $27 = 0;
 } else {
  $21 = $__mp;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($6)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24>>>0) % 204)&-1;
  $26 = (($22) + (($25*20)|0)|0);
  $27 = $26;
 }
 $0 = $agg$result;
 $1 = $14;
 $2 = $27;
 $28 = $0;
 $29 = $1;
 HEAP32[$28>>2] = $29;
 $30 = ((($28)) + 4|0);
 $31 = $2;
 HEAP32[$30>>2] = $31;
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseI11VideoPacketNS_9allocatorIS1_EEE3endEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__mp = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $this;
 $9 = $8;
 $7 = $9;
 $10 = $7;
 $11 = ((($10)) + 20|0);
 $6 = $11;
 $12 = $6;
 $5 = $12;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($9)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($16))|0;
 $__p = $17;
 $4 = $9;
 $18 = $4;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__p;
 $22 = (($21>>>0) / 204)&-1;
 $23 = (($20) + ($22<<2)|0);
 $__mp = $23;
 $24 = $__mp;
 $0 = $9;
 $25 = $0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($25)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27|0)==($29|0);
 if ($30) {
  $36 = 0;
 } else {
  $31 = $__mp;
  $32 = HEAP32[$31>>2]|0;
  $33 = $__p;
  $34 = (($33>>>0) % 204)&-1;
  $35 = (($32) + (($34*20)|0)|0);
  $36 = $35;
 }
 $1 = $agg$result;
 $2 = $24;
 $3 = $36;
 $37 = $1;
 $38 = $2;
 HEAP32[$37>>2] = $38;
 $39 = ((($37)) + 4|0);
 $40 = $3;
 HEAP32[$39>>2] = $40;
 STACKTOP = sp;return;
}
function __ZN11VideoPacketD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN12MemoryStreamD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten3valC2EPKc($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = (__emval_new_cstring(($3|0))|0);
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12MethodCallerINS_3valEJRS2_EE4callEPNS0_7_EM_VALEPKcS3_($handle,$methodName,$args) {
 $handle = $handle|0;
 $methodName = $methodName|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argv = 0, $caller = 0, $destructors = 0, $rd = 0, $result = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 52|0;
 $argv = sp + 8|0;
 $destructors = sp + 32|0;
 $rd = sp + 28|0;
 $2 = $handle;
 $3 = $methodName;
 $4 = $args;
 $8 = (__ZN10emscripten8internal9SignatureINS_3valEJRS2_EE17get_method_callerEv()|0);
 $caller = $8;
 $9 = $4;
 $0 = $9;
 $10 = $0;
 __ZN10emscripten8internal12WireTypePackIJRNS_3valEEEC2ES3_($argv,$10);
 $11 = $caller;
 $12 = $2;
 $13 = $3;
 $14 = (__ZNK10emscripten8internal12WireTypePackIJRNS_3valEEEcvPKvEv($argv)|0);
 $15 = (+__emval_call_method(($11|0),($12|0),($13|0),($destructors|0),($14|0)));
 $result = $15;
 $16 = HEAP32[$destructors>>2]|0;
 __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE($rd,$16);
 $17 = $result;
 __THREW__ = 0;
 $18 = (invoke_id(430,(+$17))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $5 = $22;
  $6 = $23;
  __ZN10emscripten8internal17DestructorsRunnerD2Ev($rd);
  $24 = $5;
  $25 = $6;
  ___resumeException($24|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = $18;
  $7 = 1;
  __ZN10emscripten8internal17DestructorsRunnerD2Ev($rd);
  $21 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal9SignatureINS_3valEJRS2_EE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[88>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((88|0))|0);
   $5 = ($4|0)!=(0);
   if ($5) {
    __THREW__ = 0;
    $6 = (invoke_i(431)|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $10 = ___cxa_find_matching_catch()|0;
     $11 = tempRet0;
     $0 = $10;
     $1 = $11;
     ___cxa_guard_abort((88|0));
     $12 = $0;
     $13 = $1;
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6092>>2] = $6;
     ___cxa_guard_release((88|0));
     break;
    }
   }
  }
 } while(0);
 $9 = HEAP32[6092>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function __ZN10emscripten8internal12WireTypePackIJRNS_3valEEEC2ES3_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cursor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cursor = sp;
 $5 = $this;
 $6 = $args;
 $7 = $5;
 $4 = $7;
 $8 = $4;
 HEAP32[$cursor>>2] = $8;
 $9 = $6;
 $0 = $9;
 $10 = $0;
 $2 = $cursor;
 $3 = $10;
 $11 = $2;
 $12 = $3;
 $1 = $12;
 $13 = $1;
 $14 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($13)|0);
 __ZN10emscripten8internal20writeGenericWireTypeINS0_7_EM_VALEEEvRPNS0_15GenericWireTypeEPT_($11,$14);
 $15 = $2;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($15);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WireTypePackIJRNS_3valEEEcvPKvEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE($this,$d) {
 $this = $this|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $d;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal19fromGenericWireTypeINS_3valEEET_d($g) {
 $g = +$g;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $wt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $g;
 $2 = $1;
 $3 = (__ZN10emscripten8internal24GenericWireTypeConverterIPNS0_7_EM_VALEE4fromEd($2)|0);
 $wt = $3;
 $4 = $wt;
 $5 = (__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($4)|0);
 HEAP32[$0>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN10emscripten8internal17DestructorsRunnerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(432,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal24GenericWireTypeConverterIPNS0_7_EM_VALEE4fromEd($wt) {
 $wt = +$wt;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 $2 = (~~(($1))>>>0);
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeINS0_7_EM_VALEEEvRPNS0_15GenericWireTypeEPT_($cursor,$wt) {
 $cursor = $cursor|0;
 $wt = $wt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cursor;
 $1 = $wt;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal9SignatureINS_3valEJRS2_EE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERS4_EE8getCountEv($args)|0);
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERS4_EE8getTypesEv($args)|0);
 $2 = (__emval_get_method_caller(($0|0),($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERS4_EE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERS4_EE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERS3_EEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERS3_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6096|0);
}
function __ZNK10emscripten3val12internalCallIPFPNS_8internal7_EM_VALES4_jPKPKvS6_EJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEES0_T_DpOT0_($this,$impl,$args) {
 $this = $this|0;
 $impl = $impl|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argList = 0, $argv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 20|0;
 $argList = sp + 28|0;
 $argv = sp;
 $2 = $this;
 $3 = $impl;
 $4 = $args;
 $5 = $2;
 $6 = $4;
 $0 = $6;
 $7 = $0;
 __ZN10emscripten8internal12WireTypePackIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2EOS8_($argv,$7);
 $8 = $3;
 $9 = HEAP32[$5>>2]|0;
 $10 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($argList)|0);
 $11 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($argList)|0);
 $12 = (__ZNK10emscripten8internal12WireTypePackIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($argv)|0);
 $13 = (FUNCTION_TABLE_iiiii[$8 & 1023]($9,$10,$11,$12)|0);
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($1,$13);
 $14 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function __ZN10emscripten8internal12WireTypePackIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2EOS8_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cursor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cursor = sp;
 $5 = $this;
 $6 = $args;
 $7 = $5;
 $4 = $7;
 $8 = $4;
 HEAP32[$cursor>>2] = $8;
 $9 = $6;
 $0 = $9;
 $10 = $0;
 $2 = $cursor;
 $3 = $10;
 $11 = $2;
 $12 = $3;
 $1 = $12;
 $13 = $1;
 $14 = (__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($13)|0);
 __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EEEvRPNS0_15GenericWireTypeEPT_($11,$14);
 $15 = $2;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($15);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK10emscripten8internal12WireTypePackIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6104|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $wt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $47 = $v;
 $48 = $47;
 $46 = $48;
 $49 = $46;
 $45 = $49;
 $50 = $45;
 $44 = $50;
 $51 = $44;
 $43 = $51;
 $52 = $43;
 $42 = $52;
 $53 = $42;
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 & 1;
 $57 = ($56|0)!=(0);
 if ($57) {
  $38 = $50;
  $58 = $38;
  $37 = $58;
  $59 = $37;
  $36 = $59;
  $60 = $36;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $70 = $62;
 } else {
  $41 = $50;
  $63 = $41;
  $40 = $63;
  $64 = $40;
  $39 = $64;
  $65 = $39;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $67 >> 1;
  $70 = $68;
 }
 $69 = (4 + ($70))|0;
 $71 = (_malloc($69)|0);
 $wt = $71;
 $72 = $47;
 $10 = $72;
 $73 = $10;
 $9 = $73;
 $74 = $9;
 $8 = $74;
 $75 = $8;
 $7 = $75;
 $76 = $7;
 $6 = $76;
 $77 = $6;
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 & 1;
 $81 = ($80|0)!=(0);
 if ($81) {
  $2 = $74;
  $82 = $2;
  $1 = $82;
  $83 = $1;
  $0 = $83;
  $84 = $0;
  $85 = ((($84)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $94 = $86;
 } else {
  $5 = $74;
  $87 = $5;
  $4 = $87;
  $88 = $4;
  $3 = $88;
  $89 = $3;
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91 >> 1;
  $94 = $92;
 }
 $93 = $wt;
 HEAP32[$93>>2] = $94;
 $95 = $wt;
 $96 = ((($95)) + 4|0);
 $97 = $47;
 $24 = $97;
 $98 = $24;
 $23 = $98;
 $99 = $23;
 $22 = $99;
 $100 = $22;
 $21 = $100;
 $101 = $21;
 $20 = $101;
 $102 = $20;
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = $104 & 1;
 $106 = ($105|0)!=(0);
 if ($106) {
  $14 = $99;
  $107 = $14;
  $13 = $107;
  $108 = $13;
  $12 = $108;
  $109 = $12;
  $110 = ((($109)) + 8|0);
  $111 = HEAP32[$110>>2]|0;
  $118 = $111;
 } else {
  $19 = $99;
  $112 = $19;
  $18 = $112;
  $113 = $18;
  $17 = $113;
  $114 = $17;
  $115 = ((($114)) + 1|0);
  $16 = $115;
  $116 = $16;
  $15 = $116;
  $117 = $15;
  $118 = $117;
 }
 $11 = $118;
 $119 = $11;
 $120 = $47;
 $35 = $120;
 $121 = $35;
 $34 = $121;
 $122 = $34;
 $33 = $122;
 $123 = $33;
 $32 = $123;
 $124 = $32;
 $31 = $124;
 $125 = $31;
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = $127 & 1;
 $129 = ($128|0)!=(0);
 if ($129) {
  $27 = $122;
  $130 = $27;
  $26 = $130;
  $131 = $26;
  $25 = $131;
  $132 = $25;
  $133 = ((($132)) + 4|0);
  $134 = HEAP32[$133>>2]|0;
  $141 = $134;
  _memcpy(($96|0),($119|0),($141|0))|0;
  $142 = $wt;
  STACKTOP = sp;return ($142|0);
 } else {
  $30 = $122;
  $135 = $30;
  $29 = $135;
  $136 = $29;
  $28 = $136;
  $137 = $28;
  $138 = HEAP8[$137>>0]|0;
  $139 = $138&255;
  $140 = $139 >> 1;
  $141 = $140;
  _memcpy(($96|0),($119|0),($141|0))|0;
  $142 = $wt;
  STACKTOP = sp;return ($142|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EEEvRPNS0_15GenericWireTypeEPT_($cursor,$wt) {
 $cursor = $cursor|0;
 $wt = $wt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cursor;
 $1 = $wt;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal6TypeIDIRNS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRNS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIRNS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8|0);
}
function __ZN10emscripten8internal12MethodCallerIvJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE4callEPNS0_7_EM_VALEPKcSA_($handle,$methodName,$args) {
 $handle = $handle|0;
 $methodName = $methodName|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argv = 0, $caller = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp;
 $1 = $handle;
 $2 = $methodName;
 $3 = $args;
 $4 = (__ZN10emscripten8internal9SignatureIvJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE17get_method_callerEv()|0);
 $caller = $4;
 $5 = $3;
 $0 = $5;
 $6 = $0;
 __ZN10emscripten8internal12WireTypePackIJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ESA_($argv,$6);
 $7 = $caller;
 $8 = $1;
 $9 = $2;
 $10 = (__ZNK10emscripten8internal12WireTypePackIJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($argv)|0);
 __emval_call_void_method(($7|0),($8|0),($9|0),($10|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal9SignatureIvJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[96>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((96|0))|0);
   $5 = ($4|0)!=(0);
   if ($5) {
    __THREW__ = 0;
    $6 = (invoke_i(433)|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $10 = ___cxa_find_matching_catch()|0;
     $11 = tempRet0;
     $0 = $10;
     $1 = $11;
     ___cxa_guard_abort((96|0));
     $12 = $0;
     $13 = $1;
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6108>>2] = $6;
     ___cxa_guard_release((96|0));
     break;
    }
   }
  }
 } while(0);
 $9 = HEAP32[6108>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function __ZN10emscripten8internal12WireTypePackIJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ESA_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cursor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cursor = sp;
 $5 = $this;
 $6 = $args;
 $7 = $5;
 $4 = $7;
 $8 = $4;
 HEAP32[$cursor>>2] = $8;
 $9 = $6;
 $0 = $9;
 $10 = $0;
 $2 = $cursor;
 $3 = $10;
 $11 = $2;
 $12 = $3;
 $1 = $12;
 $13 = $1;
 $14 = (__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($13)|0);
 __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EEEvRPNS0_15GenericWireTypeEPT_($11,$14);
 $15 = $2;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($15);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WireTypePackIJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal9SignatureIvJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($args)|0);
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($args)|0);
 $2 = (__emval_get_method_caller(($0|0),($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6112|0);
}
function __ZN10emscripten8internal12MethodCallerIvJEE4callEPNS0_7_EM_VALEPKc($handle,$methodName) {
 $handle = $handle|0;
 $methodName = $methodName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $argv = 0, $caller = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp;
 $0 = $handle;
 $1 = $methodName;
 $2 = (__ZN10emscripten8internal9SignatureIvJEE17get_method_callerEv()|0);
 $caller = $2;
 __ZN10emscripten8internal12WireTypePackIJEEC2Ev($argv);
 $3 = $caller;
 $4 = $0;
 $5 = $1;
 $6 = (__ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($argv)|0);
 __emval_call_void_method(($3|0),($4|0),($5|0),($6|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal9SignatureIvJEE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[104>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((104|0))|0);
   $5 = ($4|0)!=(0);
   if ($5) {
    __THREW__ = 0;
    $6 = (invoke_i(434)|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $10 = ___cxa_find_matching_catch()|0;
     $11 = tempRet0;
     $0 = $10;
     $1 = $11;
     ___cxa_guard_abort((104|0));
     $12 = $0;
     $13 = $1;
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6120>>2] = $6;
     ___cxa_guard_release((104|0));
     break;
    }
   }
  }
 } while(0);
 $9 = HEAP32[6120>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function __ZN10emscripten8internal12WireTypePackIJEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cursor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cursor = sp;
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 HEAP32[$cursor>>2] = $3;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($cursor);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal9SignatureIvJEE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv($args)|0);
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv($args)|0);
 $2 = (__emval_get_method_caller(($0|0),($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6124|0);
}
function __ZN10emscripten8internal12MethodCallerIvJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE4callEPNS0_7_EM_VALEPKcS9_($handle,$methodName,$args) {
 $handle = $handle|0;
 $methodName = $methodName|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argv = 0, $caller = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp;
 $1 = $handle;
 $2 = $methodName;
 $3 = $args;
 $4 = (__ZN10emscripten8internal9SignatureIvJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE17get_method_callerEv()|0);
 $caller = $4;
 $5 = $3;
 $0 = $5;
 $6 = $0;
 __ZN10emscripten8internal12WireTypePackIJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ES9_($argv,$6);
 $7 = $caller;
 $8 = $1;
 $9 = $2;
 $10 = (__ZNK10emscripten8internal12WireTypePackIJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($argv)|0);
 __emval_call_void_method(($7|0),($8|0),($9|0),($10|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal9SignatureIvJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[112>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((112|0))|0);
   $5 = ($4|0)!=(0);
   if ($5) {
    __THREW__ = 0;
    $6 = (invoke_i(435)|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $10 = ___cxa_find_matching_catch()|0;
     $11 = tempRet0;
     $0 = $10;
     $1 = $11;
     ___cxa_guard_abort((112|0));
     $12 = $0;
     $13 = $1;
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6128>>2] = $6;
     ___cxa_guard_release((112|0));
     break;
    }
   }
  }
 } while(0);
 $9 = HEAP32[6128>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function __ZN10emscripten8internal12WireTypePackIJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ES9_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cursor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cursor = sp;
 $5 = $this;
 $6 = $args;
 $7 = $5;
 $4 = $7;
 $8 = $4;
 HEAP32[$cursor>>2] = $8;
 $9 = $6;
 $0 = $9;
 $10 = $0;
 $2 = $cursor;
 $3 = $10;
 $11 = $2;
 $12 = $3;
 $1 = $12;
 $13 = $1;
 $14 = (__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($13)|0);
 __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EEEvRPNS0_15GenericWireTypeEPT_($11,$14);
 $15 = $2;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($15);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WireTypePackIJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal9SignatureIvJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($args)|0);
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($args)|0);
 $2 = (__emval_get_method_caller(($0|0),($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6132|0);
}
function __ZN12MemoryStreamixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $u8s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $i;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $12 = $17;
 $18 = $12;
 $11 = $18;
 $19 = $11;
 $10 = $19;
 $20 = $10;
 $9 = $20;
 $21 = $9;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 & 1;
 $25 = ($24|0)!=(0);
 if ($25) {
  $3 = $18;
  $26 = $3;
  $2 = $26;
  $27 = $2;
  $1 = $27;
  $28 = $1;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $37 = $30;
 } else {
  $8 = $18;
  $31 = $8;
  $7 = $31;
  $32 = $7;
  $6 = $32;
  $33 = $6;
  $34 = ((($33)) + 1|0);
  $5 = $34;
  $35 = $5;
  $4 = $35;
  $36 = $4;
  $37 = $36;
 }
 $0 = $37;
 $38 = $0;
 $39 = ((($16)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + ($40)|0);
 $u8s = $41;
 $42 = $15;
 $43 = $u8s;
 $44 = (($43) + ($42)|0);
 STACKTOP = sp;return ($44|0);
}
function __ZNK9NetStream7getTimeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = _emscripten_asm_const_1(2, 0)|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN12VideoDecoder12decodeHeaderER12MemoryStreami($this,$data,$codec_id) {
 $this = $this|0;
 $data = $data|0;
 $codec_id = $codec_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $index = 0, $lengthSizeMinusOne = 0, $lengthSizeMinusOne1 = 0, $pps = 0, $ppsLen = 0, $sps = 0, $spsLen = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vps = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $spsLen = sp + 36|0;
 $ppsLen = sp + 32|0;
 $3 = sp + 28|0;
 $vps = sp + 24|0;
 $sps = sp + 20|0;
 $pps = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $0 = $this;
 $1 = $data;
 $2 = $codec_id;
 $6 = $0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $index = $9;
 $10 = $2;
 HEAP32[$vararg_buffer>>2] = 66950;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 _emscripten_log(0,($vararg_buffer|0));
 $11 = $2;
 $12 = ($11|0)==(7);
 if (!($12)) {
  $41 = $2;
  $42 = ($41|0)==(12);
  if (!($42)) {
   STACKTOP = sp;return;
  }
  $43 = $1;
  $44 = (__ZN12MemoryStreamixEi($43,27)|0);
  $45 = HEAP8[$44>>0]|0;
  $lengthSizeMinusOne1 = $45;
  $46 = $lengthSizeMinusOne1;
  $47 = $46&255;
  $48 = $47 & 3;
  $49 = $48&255;
  $lengthSizeMinusOne1 = $49;
  $50 = $lengthSizeMinusOne1;
  $51 = $50&255;
  $52 = ((($6)) + 124|0);
  HEAP32[$52>>2] = $51;
  $53 = $index;
  $54 = (31 + ($53))|0;
  $55 = $1;
  $56 = ((($55)) + 12|0);
  HEAP32[$56>>2] = $54;
  HEAP32[$vps>>2] = 0;
  HEAP32[$sps>>2] = 0;
  HEAP32[$pps>>2] = 0;
  $57 = $1;
  (__ZN12MemoryStream5readBILi2EiEERS_RT0_($57,$vps)|0);
  $58 = $1;
  $59 = (__ZN12MemoryStreamcvPKcEv($58)|0);
  $60 = HEAP32[$vps>>2]|0;
  __ZN12VideoDecoder7_decodeEPKci($6,$59,$60);
  $61 = $1;
  (__ZN12MemoryStreamrSERKi($61,$vps)|0);
  $62 = $1;
  HEAP32[$4>>2] = 3;
  (__ZN12MemoryStreamrSERKi($62,$4)|0);
  $63 = $1;
  (__ZN12MemoryStream5readBILi2EiEERS_RT0_($63,$sps)|0);
  $64 = $1;
  $65 = (__ZN12MemoryStreamcvPKcEv($64)|0);
  $66 = HEAP32[$sps>>2]|0;
  __ZN12VideoDecoder7_decodeEPKci($6,$65,$66);
  $67 = $1;
  (__ZN12MemoryStreamrSERKi($67,$sps)|0);
  $68 = $1;
  HEAP32[$5>>2] = 3;
  (__ZN12MemoryStreamrSERKi($68,$5)|0);
  $69 = $1;
  (__ZN12MemoryStream5readBILi2EiEERS_RT0_($69,$pps)|0);
  $70 = $1;
  $71 = (__ZN12MemoryStreamcvPKcEv($70)|0);
  $72 = HEAP32[$pps>>2]|0;
  __ZN12VideoDecoder7_decodeEPKci($6,$71,$72);
  STACKTOP = sp;return;
 }
 $13 = $1;
 $14 = (__ZN12MemoryStreamixEi($13,9)|0);
 $15 = HEAP8[$14>>0]|0;
 $lengthSizeMinusOne = $15;
 $16 = $lengthSizeMinusOne;
 $17 = $16&255;
 $18 = $17 & 3;
 $19 = $18&255;
 $lengthSizeMinusOne = $19;
 $20 = $lengthSizeMinusOne;
 $21 = $20&255;
 $22 = ((($6)) + 124|0);
 HEAP32[$22>>2] = $21;
 $23 = $index;
 $24 = (11 + ($23))|0;
 $25 = $1;
 $26 = ((($25)) + 12|0);
 HEAP32[$26>>2] = $24;
 HEAP32[$spsLen>>2] = 0;
 HEAP32[$ppsLen>>2] = 0;
 $27 = $1;
 (__ZN12MemoryStream5readBILi2EiEERS_RT0_($27,$spsLen)|0);
 $28 = HEAP32[$spsLen>>2]|0;
 $29 = ($28|0)>(0);
 if ($29) {
  $30 = $1;
  $31 = (__ZN12MemoryStreamcvPKcEv($30)|0);
  $32 = HEAP32[$spsLen>>2]|0;
  __ZN12VideoDecoder7_decodeEPKci($6,$31,$32);
  $33 = $1;
  (__ZN12MemoryStreamrSERKi($33,$spsLen)|0);
 }
 $34 = $1;
 HEAP32[$3>>2] = 1;
 (__ZN12MemoryStreamrSERKi($34,$3)|0);
 $35 = $1;
 (__ZN12MemoryStream5readBILi2EiEERS_RT0_($35,$ppsLen)|0);
 $36 = HEAP32[$ppsLen>>2]|0;
 $37 = ($36|0)>(0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $1;
 $39 = (__ZN12MemoryStreamcvPKcEv($38)|0);
 $40 = HEAP32[$ppsLen>>2]|0;
 __ZN12VideoDecoder7_decodeEPKci($6,$39,$40);
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeI11VideoPacketNS_9allocatorIS1_EEE12emplace_backIJRl12MemoryStreamEEEvDpOT_($this,$__args,$__args1) {
 $this = $this|0;
 $__args = $__args|0;
 $__args1 = $__args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $24 = sp;
 $30 = sp + 172|0;
 $40 = sp + 8|0;
 $37 = $this;
 $38 = $__args;
 $39 = $__args1;
 $41 = $37;
 $36 = $41;
 $42 = $36;
 $43 = ((($42)) + 20|0);
 $35 = $43;
 $44 = $35;
 $34 = $44;
 $45 = $34;
 $__a = $45;
 $10 = $41;
 $46 = $10;
 $9 = $46;
 $47 = $9;
 $8 = $47;
 $48 = $8;
 $49 = ((($48)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($48)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $50;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 4)&-1;
 $57 = ($56|0)==(0);
 if ($57) {
  $78 = 0;
 } else {
  $7 = $47;
  $58 = $7;
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($58)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $60;
  $64 = $62;
  $65 = (($63) - ($64))|0;
  $66 = (($65|0) / 4)&-1;
  $67 = ($66*204)|0;
  $68 = (($67) - 1)|0;
  $78 = $68;
 }
 $69 = ((($46)) + 16|0);
 $70 = HEAP32[$69>>2]|0;
 $6 = $46;
 $71 = $6;
 $72 = ((($71)) + 20|0);
 $5 = $72;
 $73 = $5;
 $4 = $73;
 $74 = $4;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($70) + ($75))|0;
 $77 = (($78) - ($76))|0;
 $79 = ($77|0)==(0);
 if ($79) {
  __ZNSt3__15dequeI11VideoPacketNS_9allocatorIS1_EEE19__add_back_capacityEv($41);
 }
 $80 = $__a;
 __ZNSt3__112__deque_baseI11VideoPacketNS_9allocatorIS1_EEE3endEv($40,$41);
 $0 = $40;
 $81 = $0;
 $82 = ((($81)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $1 = $83;
 $84 = $1;
 $85 = $38;
 $2 = $85;
 $86 = $2;
 $87 = $39;
 $3 = $87;
 $88 = $3;
 $26 = $80;
 $27 = $84;
 $28 = $86;
 $29 = $88;
 $89 = $26;
 $90 = $27;
 $91 = $28;
 $25 = $91;
 $92 = $25;
 $93 = $29;
 $11 = $93;
 $94 = $11;
 ;HEAP8[$24>>0]=HEAP8[$30>>0]|0;
 $20 = $89;
 $21 = $90;
 $22 = $92;
 $23 = $94;
 $95 = $20;
 $96 = $21;
 $97 = $22;
 $19 = $97;
 $98 = $19;
 $99 = $23;
 $12 = $99;
 $100 = $12;
 $15 = $95;
 $16 = $96;
 $17 = $98;
 $18 = $100;
 $101 = $16;
 $102 = $17;
 $14 = $102;
 $103 = $14;
 $104 = HEAP32[$103>>2]|0;
 $105 = $18;
 $13 = $105;
 $106 = $13;
 __ZN11VideoPacketC2ElO12MemoryStream($101,$104,$106);
 $33 = $41;
 $107 = $33;
 $108 = ((($107)) + 20|0);
 $32 = $108;
 $109 = $32;
 $31 = $109;
 $110 = $31;
 $111 = HEAP32[$110>>2]|0;
 $112 = (($111) + 1)|0;
 HEAP32[$110>>2] = $112;
 STACKTOP = sp;return;
}
function __ZN10emscripten3val6objectEv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (__emval_new_object()|0);
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$1);
 $2 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten3val3setIA5_cA21_cEEvRKT_RKT0_($this,$key,$value) {
 $this = $this|0;
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $0 = $this;
 $1 = $key;
 $2 = $value;
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 __ZN10emscripten3valC2EPKc($3,$9);
 $10 = HEAP32[$3>>2]|0;
 $11 = $2;
 __THREW__ = 0;
 invoke_vii(423,($4|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $5 = $17;
  $6 = $18;
  __ZN10emscripten3valD2Ev($3);
  $21 = $5;
  $22 = $6;
  ___resumeException($21|0);
  // unreachable;
 }
 $14 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_viii(424,($8|0),($10|0),($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  __ZN10emscripten3valD2Ev($4);
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $5 = $19;
 $6 = $20;
 __ZN10emscripten3valD2Ev($4);
 __ZN10emscripten3valD2Ev($3);
 $21 = $5;
 $22 = $6;
 ___resumeException($21|0);
 // unreachable;
}
function __ZNK10emscripten3val4callIvJRS0_EEET_PKcDpOT0_($this,$name,$args) {
 $this = $this|0;
 $name = $name|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $args;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = $3;
 $0 = $7;
 $8 = $0;
 __ZN10emscripten8internal12MethodCallerIvJRNS_3valEEE4callEPNS0_7_EM_VALEPKcS3_($5,$6,$8);
 STACKTOP = sp;return;
}
function __ZNK10emscripten3val4callIiJlEEET_PKcDpOT0_($this,$name,$args) {
 $this = $this|0;
 $name = $name|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $args;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = $3;
 $0 = $7;
 $8 = $0;
 $9 = (__ZN10emscripten8internal12MethodCallerIiJlEE4callEPNS0_7_EM_VALEPKcOl($5,$6,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN12VideoDecoder6decodeER12MemoryStream($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NALUnitLength = 0, $naluType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $NALUnitLength = sp + 4|0;
 $2 = sp;
 $0 = $this;
 $1 = $data;
 $3 = $0;
 HEAP32[$NALUnitLength>>2] = 0;
 $4 = $1;
 HEAP32[$2>>2] = 5;
 (__ZN12MemoryStreamrSERKi($4,$2)|0);
 while(1) {
  $5 = $1;
  $6 = (__ZNK12MemoryStream6lengthEv($5)|0);
  $7 = ($6|0)>(4);
  if (!($7)) {
   break;
  }
  $8 = ((($3)) + 124|0);
  $9 = HEAP32[$8>>2]|0;
  switch ($9|0) {
  case 3:  {
   $10 = $1;
   (__ZN12MemoryStream5readBILi4EiEERS_RT0_($10,$NALUnitLength)|0);
   break;
  }
  case 2:  {
   $11 = $1;
   (__ZN12MemoryStream5readBILi3EiEERS_RT0_($11,$NALUnitLength)|0);
   break;
  }
  case 1:  {
   $12 = $1;
   (__ZN12MemoryStream5readBILi2EiEERS_RT0_($12,$NALUnitLength)|0);
   break;
  }
  default: {
   $13 = $1;
   (__ZN12MemoryStream5readBILi1EiEERS_RT0_($13,$NALUnitLength)|0);
  }
  }
  $14 = $1;
  $15 = (__ZN12MemoryStreamixEi($14,0)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 & 31;
  $19 = $18&255;
  $naluType = $19;
  $20 = $naluType;
  $21 = $20&255;
  switch ($21|0) {
  case 1: case 5:  {
   $22 = $1;
   $23 = (__ZN12MemoryStreamcvPKcEv($22)|0);
   $24 = HEAP32[$NALUnitLength>>2]|0;
   __ZN12VideoDecoder7_decodeEPKci($3,$23,$24);
   break;
  }
  default: {
  }
  }
  $25 = $1;
  (__ZN12MemoryStreamrSERKi($25,$NALUnitLength)|0);
 }
 STACKTOP = sp;return;
}
function __ZN12MemoryStreamrSERKi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return ($2|0);
}
function __ZNK12MemoryStream6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = $this;
 $12 = $11;
 $10 = $12;
 $13 = $10;
 $9 = $13;
 $14 = $9;
 $8 = $14;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 & 1;
 $21 = ($20|0)!=(0);
 if ($21) {
  $2 = $14;
  $22 = $2;
  $1 = $22;
  $23 = $1;
  $0 = $23;
  $24 = $0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $36 = $26;
  $33 = ((($12)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($36) - ($34))|0;
  STACKTOP = sp;return ($35|0);
 } else {
  $5 = $14;
  $27 = $5;
  $4 = $27;
  $28 = $4;
  $3 = $28;
  $29 = $3;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 >> 1;
  $36 = $32;
  $33 = ((($12)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($36) - ($34))|0;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZN12MemoryStream5readBILi4EiEERS_RT0_($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $out;
 $16 = $14;
 $17 = $15;
 $13 = $16;
 $18 = $13;
 $12 = $18;
 $19 = $12;
 $11 = $19;
 $20 = $11;
 $10 = $20;
 $21 = $10;
 $9 = $21;
 $22 = $9;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 & 1;
 $26 = ($25|0)!=(0);
 if ($26) {
  $3 = $19;
  $27 = $3;
  $2 = $27;
  $28 = $2;
  $1 = $28;
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $38 = $31;
 } else {
  $8 = $19;
  $32 = $8;
  $7 = $32;
  $33 = $7;
  $6 = $33;
  $34 = $6;
  $35 = ((($34)) + 1|0);
  $5 = $35;
  $36 = $5;
  $4 = $36;
  $37 = $4;
  $38 = $37;
 }
 $0 = $38;
 $39 = $0;
 $40 = ((($16)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + ($41)|0);
 $43 = ((($42)) + 4|0);
 $44 = ((($43)) + -1|0);
 __Z7reverseILi4EEvPhS0_($17,$44);
 $45 = ((($16)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 4)|0;
 HEAP32[$45>>2] = $47;
 STACKTOP = sp;return ($16|0);
}
function __ZN12MemoryStream5readBILi3EiEERS_RT0_($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $out;
 $16 = $14;
 $17 = $15;
 $13 = $16;
 $18 = $13;
 $12 = $18;
 $19 = $12;
 $11 = $19;
 $20 = $11;
 $10 = $20;
 $21 = $10;
 $9 = $21;
 $22 = $9;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 & 1;
 $26 = ($25|0)!=(0);
 if ($26) {
  $3 = $19;
  $27 = $3;
  $2 = $27;
  $28 = $2;
  $1 = $28;
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $38 = $31;
 } else {
  $8 = $19;
  $32 = $8;
  $7 = $32;
  $33 = $7;
  $6 = $33;
  $34 = $6;
  $35 = ((($34)) + 1|0);
  $5 = $35;
  $36 = $5;
  $4 = $36;
  $37 = $4;
  $38 = $37;
 }
 $0 = $38;
 $39 = $0;
 $40 = ((($16)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + ($41)|0);
 $43 = ((($42)) + 3|0);
 $44 = ((($43)) + -1|0);
 __Z7reverseILi3EEvPhS0_($17,$44);
 $45 = ((($16)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 3)|0;
 HEAP32[$45>>2] = $47;
 STACKTOP = sp;return ($16|0);
}
function __ZN12MemoryStream5readBILi2EiEERS_RT0_($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $out;
 $16 = $14;
 $17 = $15;
 $13 = $16;
 $18 = $13;
 $12 = $18;
 $19 = $12;
 $11 = $19;
 $20 = $11;
 $10 = $20;
 $21 = $10;
 $9 = $21;
 $22 = $9;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 & 1;
 $26 = ($25|0)!=(0);
 if ($26) {
  $3 = $19;
  $27 = $3;
  $2 = $27;
  $28 = $2;
  $1 = $28;
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $38 = $31;
 } else {
  $8 = $19;
  $32 = $8;
  $7 = $32;
  $33 = $7;
  $6 = $33;
  $34 = $6;
  $35 = ((($34)) + 1|0);
  $5 = $35;
  $36 = $5;
  $4 = $36;
  $37 = $4;
  $38 = $37;
 }
 $0 = $38;
 $39 = $0;
 $40 = ((($16)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + ($41)|0);
 $43 = ((($42)) + 2|0);
 $44 = ((($43)) + -1|0);
 __Z7reverseILi2EEvPhS0_($17,$44);
 $45 = ((($16)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 2)|0;
 HEAP32[$45>>2] = $47;
 STACKTOP = sp;return ($16|0);
}
function __ZN12MemoryStream5readBILi1EiEERS_RT0_($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $out;
 $16 = $14;
 $17 = $15;
 $13 = $16;
 $18 = $13;
 $12 = $18;
 $19 = $12;
 $11 = $19;
 $20 = $11;
 $10 = $20;
 $21 = $10;
 $9 = $21;
 $22 = $9;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 & 1;
 $26 = ($25|0)!=(0);
 if ($26) {
  $3 = $19;
  $27 = $3;
  $2 = $27;
  $28 = $2;
  $1 = $28;
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $38 = $31;
 } else {
  $8 = $19;
  $32 = $8;
  $7 = $32;
  $33 = $7;
  $6 = $33;
  $34 = $6;
  $35 = ((($34)) + 1|0);
  $5 = $35;
  $36 = $5;
  $4 = $36;
  $37 = $4;
  $38 = $37;
 }
 $0 = $38;
 $39 = $0;
 $40 = ((($16)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + ($41)|0);
 $43 = ((($42)) + 1|0);
 $44 = ((($43)) + -1|0);
 __Z7reverseILi1EEvPhS0_($17,$44);
 $45 = ((($16)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 1)|0;
 HEAP32[$45>>2] = $47;
 STACKTOP = sp;return ($16|0);
}
function __ZN12MemoryStreamcvPKcEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $14;
 $13 = $15;
 $16 = $13;
 $12 = $16;
 $17 = $12;
 $11 = $17;
 $18 = $11;
 $10 = $18;
 $19 = $10;
 $9 = $19;
 $20 = $9;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 & 1;
 $24 = ($23|0)!=(0);
 if ($24) {
  $3 = $17;
  $25 = $3;
  $2 = $25;
  $26 = $2;
  $1 = $26;
  $27 = $1;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $36 = $29;
 } else {
  $8 = $17;
  $30 = $8;
  $7 = $30;
  $31 = $7;
  $6 = $31;
  $32 = $6;
  $33 = ((($32)) + 1|0);
  $5 = $33;
  $34 = $5;
  $4 = $34;
  $35 = $4;
  $36 = $35;
 }
 $0 = $36;
 $37 = $0;
 $38 = ((($15)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + ($39)|0);
 STACKTOP = sp;return ($40|0);
}
function __ZN12VideoDecoder7_decodeEPKci($this,$data,$len) {
 $this = $this|0;
 $data = $data|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $ret = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ((($3)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = ((($3)) + 8|0);
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $i = 0;
 while(1) {
  $12 = ((($3)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $start = $13;
  $14 = (__ZN12VideoDecoder14broadwayDecodeEv($3)|0);
  $ret = $14;
  $15 = ((($3)) + 8|0);
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17>>>0)>(0);
  if (!($18)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN12VideoDecoder14broadwayDecodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 8|0);
 $6 = ((($2)) + 24|0);
 $7 = (_H264SwDecDecode($4,$5,$6)|0);
 $ret = $7;
 $8 = $ret;
 L1: do {
  switch ($8|0) {
  case 4:  {
   $9 = ((($2)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($2)) + 44|0);
   $12 = (_H264SwDecGetInfo($10,$11)|0);
   $ret = $12;
   $13 = $ret;
   $14 = ($13|0)!=(0);
   if (!($14)) {
    $15 = ((($2)) + 44|0);
    $16 = ((($15)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($2)) + 44|0);
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    __ZN12VideoDecoder15decodeVideoSizeEjj($2,$17,$20);
    $21 = ((($2)) + 24|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($2)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $22;
    $26 = $24;
    $27 = (($25) - ($26))|0;
    $28 = ((($2)) + 8|0);
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) - ($27))|0;
    HEAP32[$29>>2] = $31;
    $32 = ((($2)) + 24|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($2)) + 8|0);
    HEAP32[$34>>2] = $33;
    break L1;
   }
   $0 = -1;
   $101 = $0;
   STACKTOP = sp;return ($101|0);
   break;
  }
  case 3:  {
   $35 = ((($2)) + 24|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($2)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $36;
   $40 = $38;
   $41 = (($39) - ($40))|0;
   $42 = ((($2)) + 8|0);
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) - ($41))|0;
   HEAP32[$43>>2] = $45;
   $46 = ((($2)) + 24|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($2)) + 8|0);
   HEAP32[$48>>2] = $47;
   label = 6;
   break;
  }
  case 2:  {
   label = 6;
   break;
  }
  case -2: case 1:  {
   $94 = ((($2)) + 8|0);
   $95 = ((($94)) + 4|0);
   HEAP32[$95>>2] = 0;
   break;
  }
  default: {
   $96 = $ret;
   $97 = (0 - ($96))|0;
   HEAP32[$vararg_buffer>>2] = 66916;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $97;
   _emscripten_log(0,($vararg_buffer|0));
   $98 = ((($2)) + 8|0);
   $99 = ((($98)) + 4|0);
   HEAP32[$99>>2] = 0;
  }
  }
 } while(0);
 L10: do {
  if ((label|0) == 6) {
   $49 = $ret;
   $50 = ($49|0)==(2);
   if ($50) {
    $51 = ((($2)) + 8|0);
    $52 = ((($51)) + 4|0);
    HEAP32[$52>>2] = 0;
   }
   $53 = ((($2)) + 92|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + 1)|0;
   HEAP32[$53>>2] = $55;
   while(1) {
    $56 = ((($2)) + 4|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ((($2)) + 28|0);
    $59 = (_H264SwDecNextPicture($57,$58,0)|0);
    $60 = ($59|0)==(2);
    if (!($60)) {
     break L10;
    }
    $61 = ((($2)) + 96|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + 1)|0;
    HEAP32[$61>>2] = $63;
    $64 = ((($2)) + 28|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $65;
    $67 = ((($2)) + 112|0);
    HEAP32[$67>>2] = $66;
    $68 = ((($2)) + 112|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($2)) + 44|0);
    $71 = ((($70)) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($2)) + 44|0);
    $74 = ((($73)) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = Math_imul($72, $75)|0;
    $77 = (($69) + ($76))|0;
    $78 = ((($2)) + 112|0);
    $79 = ((($78)) + 4|0);
    HEAP32[$79>>2] = $77;
    $80 = ((($2)) + 112|0);
    $81 = ((($80)) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($2)) + 44|0);
    $84 = ((($83)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ((($2)) + 44|0);
    $87 = ((($86)) + 8|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = Math_imul($85, $88)|0;
    $90 = $89 >>> 2;
    $91 = (($82) + ($90))|0;
    $92 = ((($2)) + 112|0);
    $93 = ((($92)) + 8|0);
    HEAP32[$93>>2] = $91;
    __ZN12VideoDecoder12decodeYUV420Ev($2);
   }
  }
 } while(0);
 $100 = $ret;
 $0 = $100;
 $101 = $0;
 STACKTOP = sp;return ($101|0);
}
function __ZN12VideoDecoder15decodeVideoSizeEjj($this,$width,$height) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cacheSize = 0, $chunkSize = 0, $heapSize = 0, $outSize = 0, $size = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $3 = sp + 36|0;
 $4 = sp + 12|0;
 $0 = $this;
 $1 = $width;
 $2 = $height;
 $5 = $0;
 $6 = $1;
 $7 = ((($5)) + 104|0);
 HEAP32[$7>>2] = $6;
 $8 = $2;
 $9 = ((($5)) + 108|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($5)) + 104|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($5)) + 108|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$vararg_buffer>>2] = 66924;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $11;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $13;
 _emscripten_log(0,($vararg_buffer|0));
 $14 = ((($5)) + 128|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&1;
 if ($16) {
  $17 = ((($5)) + 112|0);
  $18 = ((($5)) + 100|0);
  HEAP32[$18>>2] = $17;
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($5)) + 104|0);
  $21 = ((($5)) + 108|0);
  $22 = ((($5)) + 100|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
  $25 = $24 >> 2;
  HEAP32[$3>>2] = $25;
  __ZNK10emscripten3val4callIvJRjS2_iEEET_PKcDpOT0_($19,66937,$20,$21,$3);
  STACKTOP = sp;return;
 }
 $26 = ((($5)) + 108|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($5)) + 108|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($27, $29)|0;
 $31 = $30 << 2;
 $outSize = $31;
 $cacheSize = 33554432;
 $32 = $outSize;
 $33 = $cacheSize;
 $34 = (($32) + ($33))|0;
 $size = $34;
 $chunkSize = 16777216;
 $35 = $chunkSize;
 $heapSize = $35;
 while(1) {
  $36 = $heapSize;
  $37 = $size;
  $38 = ($36>>>0)<($37>>>0);
  if (!($38)) {
   break;
  }
  $39 = $chunkSize;
  $40 = $heapSize;
  $41 = (($40) + ($39))|0;
  $heapSize = $41;
 }
 $42 = $heapSize;
 $43 = (_malloc($42)|0);
 $44 = ((($5)) + 100|0);
 HEAP32[$44>>2] = $43;
 $45 = HEAP32[$5>>2]|0;
 $46 = ((($5)) + 104|0);
 $47 = ((($5)) + 108|0);
 $48 = ((($5)) + 100|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49;
 HEAP32[$4>>2] = $50;
 __ZNK10emscripten3val4callIvJRjS2_iEEET_PKcDpOT0_($45,66937,$46,$47,$4);
 STACKTOP = sp;return;
}
function __ZN12VideoDecoder12decodeYUV420Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 128|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  $22 = HEAP32[$1>>2]|0;
  __ZNK10emscripten3val4callIvJEEET_PKcDpOT0_($22,66919);
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 112|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = ((($1)) + 112|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $12 = ((($1)) + 112|0);
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14;
 $16 = ((($1)) + 100|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 104|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 108|0);
 $21 = HEAP32[$20>>2]|0;
 __Z11yuv420toRGBPhS_S_S_jj($7,$11,$15,$17,$19,$21);
 $22 = HEAP32[$1>>2]|0;
 __ZNK10emscripten3val4callIvJEEET_PKcDpOT0_($22,66919);
 STACKTOP = sp;return;
}
function __Z11yuv420toRGBPhS_S_S_jj($Y,$U,$V,$heap,$width,$height) {
 $Y = $Y|0;
 $U = $U|0;
 $V = $V|0;
 $heap = $heap|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cacheAdr = 0, $cacheStart = 0, $col = 0, $line = 0, $o = 0;
 var $ostart = 0, $u = 0, $usave = 0, $ustart = 0, $v = 0, $vsave = 0, $vstart = 0, $y = 0, $yn = 0, $ystart = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $Y;
 $1 = $U;
 $2 = $V;
 $3 = $heap;
 $4 = $width;
 $5 = $height;
 $ystart = 0;
 $ustart = 0;
 $vstart = 0;
 $y = 0;
 $yn = 0;
 $u = 0;
 $v = 0;
 $o = 0;
 $line = 0;
 $col = 0;
 $usave = 0;
 $vsave = 0;
 $ostart = 0;
 $cacheAdr = 0;
 $ustart = 0;
 $vstart = 0;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = Math_imul($7, $8)|0;
 $10 = $9 << 2;
 $11 = (($6) + ($10)|0);
 $cacheStart = $11;
 $line = 0;
 while(1) {
  $12 = $line;
  $13 = $5;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $ustart;
  $usave = $15;
  $16 = $vstart;
  $vsave = $16;
  $col = 0;
  while(1) {
   $17 = $col;
   $18 = $4;
   $19 = ($17>>>0)<($18>>>0);
   if (!($19)) {
    break;
   }
   $20 = $ystart;
   $21 = $0;
   $22 = (($21) + ($20)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $y = $24;
   $25 = $ystart;
   $26 = $4;
   $27 = (($25) + ($26))|0;
   $28 = $0;
   $29 = (($28) + ($27)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $yn = $31;
   $32 = $ustart;
   $33 = $1;
   $34 = (($33) + ($32)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $u = $36;
   $37 = $vstart;
   $38 = $2;
   $39 = (($38) + ($37)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $v = $41;
   $42 = $y;
   $43 = $42 << 16;
   $44 = $u;
   $45 = $44 << 8;
   $46 = (($43) + ($45))|0;
   $47 = $v;
   $48 = (($46) + ($47))|0;
   $cacheAdr = $48;
   $49 = $cacheStart;
   $50 = $cacheAdr;
   $51 = (($49) + ($50)|0);
   $o = $51;
   $52 = $o;
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)!=(0);
   if (!($54)) {
    $55 = $y;
    $56 = $u;
    $57 = $v;
    $58 = (__Z11yuv2rgbcalciii($55,$56,$57)|0);
    $59 = $o;
    HEAP32[$59>>2] = $58;
   }
   $60 = $o;
   $61 = HEAP32[$60>>2]|0;
   $62 = $3;
   $63 = $ostart;
   $64 = (($62) + ($63)|0);
   HEAP32[$64>>2] = $61;
   $65 = $yn;
   $66 = $65 << 16;
   $67 = $u;
   $68 = $67 << 8;
   $69 = (($66) + ($68))|0;
   $70 = $v;
   $71 = (($69) + ($70))|0;
   $cacheAdr = $71;
   $72 = $cacheStart;
   $73 = $cacheAdr;
   $74 = (($72) + ($73)|0);
   $o = $74;
   $75 = $o;
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)!=(0);
   if (!($77)) {
    $78 = $yn;
    $79 = $u;
    $80 = $v;
    $81 = (__Z11yuv2rgbcalciii($78,$79,$80)|0);
    $82 = $o;
    HEAP32[$82>>2] = $81;
   }
   $83 = $o;
   $84 = HEAP32[$83>>2]|0;
   $85 = $3;
   $86 = $ostart;
   $87 = $4;
   $88 = $87 << 2;
   $89 = (($86) + ($88))|0;
   $90 = (($85) + ($89)|0);
   HEAP32[$90>>2] = $84;
   $91 = $ostart;
   $92 = (($91) + 4)|0;
   $ostart = $92;
   $93 = $ystart;
   $94 = (($93) + 1)|0;
   $ystart = $94;
   $95 = $ystart;
   $96 = $0;
   $97 = (($96) + ($95)|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = $98&255;
   $y = $99;
   $100 = $ystart;
   $101 = $4;
   $102 = (($100) + ($101))|0;
   $103 = $0;
   $104 = (($103) + ($102)|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = $105&255;
   $yn = $106;
   $107 = $y;
   $108 = $107 << 16;
   $109 = $u;
   $110 = $109 << 8;
   $111 = (($108) + ($110))|0;
   $112 = $v;
   $113 = (($111) + ($112))|0;
   $cacheAdr = $113;
   $114 = $cacheStart;
   $115 = $cacheAdr;
   $116 = (($114) + ($115)|0);
   $o = $116;
   $117 = $o;
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)!=(0);
   if (!($119)) {
    $120 = $y;
    $121 = $u;
    $122 = $v;
    $123 = (__Z11yuv2rgbcalciii($120,$121,$122)|0);
    $124 = $o;
    HEAP32[$124>>2] = $123;
   }
   $125 = $o;
   $126 = HEAP32[$125>>2]|0;
   $127 = $3;
   $128 = $ostart;
   $129 = (($127) + ($128)|0);
   HEAP32[$129>>2] = $126;
   $130 = $yn;
   $131 = $130 << 16;
   $132 = $u;
   $133 = $132 << 8;
   $134 = (($131) + ($133))|0;
   $135 = $v;
   $136 = (($134) + ($135))|0;
   $cacheAdr = $136;
   $137 = $cacheStart;
   $138 = $cacheAdr;
   $139 = (($137) + ($138)|0);
   $o = $139;
   $140 = $o;
   $141 = HEAP32[$140>>2]|0;
   $142 = ($141|0)!=(0);
   if (!($142)) {
    $143 = $yn;
    $144 = $u;
    $145 = $v;
    $146 = (__Z11yuv2rgbcalciii($143,$144,$145)|0);
    $147 = $o;
    HEAP32[$147>>2] = $146;
   }
   $148 = $o;
   $149 = HEAP32[$148>>2]|0;
   $150 = $3;
   $151 = $ostart;
   $152 = $4;
   $153 = $152 << 2;
   $154 = (($151) + ($153))|0;
   $155 = (($150) + ($154)|0);
   HEAP32[$155>>2] = $149;
   $156 = $ostart;
   $157 = (($156) + 4)|0;
   $ostart = $157;
   $158 = $ystart;
   $159 = (($158) + 1)|0;
   $ystart = $159;
   $160 = $ustart;
   $161 = (($160) + 1)|0;
   $ustart = $161;
   $162 = $vstart;
   $163 = (($162) + 1)|0;
   $vstart = $163;
   $164 = $col;
   $165 = (($164) + 2)|0;
   $col = $165;
  }
  $166 = $4;
  $167 = $166 << 2;
  $168 = $ostart;
  $169 = (($168) + ($167))|0;
  $ostart = $169;
  $170 = $4;
  $171 = $ystart;
  $172 = (($171) + ($170))|0;
  $ystart = $172;
  $173 = $line;
  $174 = (($173) + 2)|0;
  $line = $174;
 }
 STACKTOP = sp;return;
}
function __Z11yuv2rgbcalciii($y,$u,$v) {
 $y = $y|0;
 $u = $u|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a0 = 0, $a1 = 0, $a2 = 0, $a3 = 0, $a4 = 0, $b = 0, $g = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 40|0;
 $8 = sp + 285|0;
 $14 = sp + 32|0;
 $17 = sp + 284|0;
 $23 = sp + 24|0;
 $26 = sp + 283|0;
 $32 = sp + 16|0;
 $35 = sp + 282|0;
 $41 = sp + 8|0;
 $44 = sp + 281|0;
 $50 = sp;
 $53 = sp + 280|0;
 $r = sp + 76|0;
 $g = sp + 72|0;
 $b = sp + 68|0;
 $57 = sp + 64|0;
 $58 = sp + 60|0;
 $59 = sp + 56|0;
 $60 = sp + 52|0;
 $61 = sp + 48|0;
 $62 = sp + 44|0;
 $54 = $y;
 $55 = $u;
 $56 = $v;
 $63 = $54;
 $64 = (($63) - 16)|0;
 $65 = ($64*1192)|0;
 $a0 = $65;
 $66 = $56;
 $67 = (($66) - 128)|0;
 $68 = ($67*1634)|0;
 $a1 = $68;
 $69 = $56;
 $70 = (($69) - 128)|0;
 $71 = ($70*832)|0;
 $a2 = $71;
 $72 = $55;
 $73 = (($72) - 128)|0;
 $74 = ($73*400)|0;
 $a3 = $74;
 $75 = $55;
 $76 = (($75) - 128)|0;
 $77 = ($76*2066)|0;
 $a4 = $77;
 $78 = $a0;
 $79 = $a1;
 $80 = (($78) + ($79))|0;
 $81 = $80 >> 10;
 HEAP32[$r>>2] = $81;
 $82 = $a0;
 $83 = $a2;
 $84 = (($82) - ($83))|0;
 $85 = $a3;
 $86 = (($84) - ($85))|0;
 $87 = $86 >> 10;
 HEAP32[$g>>2] = $87;
 $88 = $a0;
 $89 = $a4;
 $90 = (($88) + ($89))|0;
 $91 = $90 >> 10;
 HEAP32[$b>>2] = $91;
 $92 = HEAP32[$r>>2]|0;
 $93 = $92 & 255;
 $94 = HEAP32[$r>>2]|0;
 $95 = ($93|0)!=($94|0);
 if ($95) {
  HEAP32[$57>>2] = 255;
  HEAP32[$58>>2] = 0;
  $51 = $58;
  $52 = $r;
  $96 = $51;
  $97 = $52;
  ;HEAP8[$50>>0]=HEAP8[$53>>0]|0;
  $48 = $96;
  $49 = $97;
  $98 = $48;
  $99 = $49;
  $45 = $50;
  $46 = $98;
  $47 = $99;
  $100 = $46;
  $101 = HEAP32[$100>>2]|0;
  $102 = $47;
  $103 = HEAP32[$102>>2]|0;
  $104 = ($101|0)<($103|0);
  $105 = $49;
  $106 = $48;
  $107 = $104 ? $105 : $106;
  $6 = $57;
  $7 = $107;
  $108 = $6;
  $109 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $108;
  $4 = $109;
  $110 = $4;
  $111 = $3;
  $0 = $5;
  $1 = $110;
  $2 = $111;
  $112 = $1;
  $113 = HEAP32[$112>>2]|0;
  $114 = $2;
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)<($115|0);
  $117 = $4;
  $118 = $3;
  $119 = $116 ? $117 : $118;
  $120 = HEAP32[$119>>2]|0;
  HEAP32[$r>>2] = $120;
 }
 $121 = HEAP32[$g>>2]|0;
 $122 = $121 & 255;
 $123 = HEAP32[$g>>2]|0;
 $124 = ($122|0)!=($123|0);
 if ($124) {
  HEAP32[$59>>2] = 255;
  HEAP32[$60>>2] = 0;
  $15 = $60;
  $16 = $g;
  $125 = $15;
  $126 = $16;
  ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
  $12 = $125;
  $13 = $126;
  $127 = $12;
  $128 = $13;
  $9 = $14;
  $10 = $127;
  $11 = $128;
  $129 = $10;
  $130 = HEAP32[$129>>2]|0;
  $131 = $11;
  $132 = HEAP32[$131>>2]|0;
  $133 = ($130|0)<($132|0);
  $134 = $13;
  $135 = $12;
  $136 = $133 ? $134 : $135;
  $24 = $59;
  $25 = $136;
  $137 = $24;
  $138 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $137;
  $22 = $138;
  $139 = $22;
  $140 = $21;
  $18 = $23;
  $19 = $139;
  $20 = $140;
  $141 = $19;
  $142 = HEAP32[$141>>2]|0;
  $143 = $20;
  $144 = HEAP32[$143>>2]|0;
  $145 = ($142|0)<($144|0);
  $146 = $22;
  $147 = $21;
  $148 = $145 ? $146 : $147;
  $149 = HEAP32[$148>>2]|0;
  HEAP32[$g>>2] = $149;
 }
 $150 = HEAP32[$b>>2]|0;
 $151 = $150 & 255;
 $152 = HEAP32[$b>>2]|0;
 $153 = ($151|0)!=($152|0);
 if (!($153)) {
  $179 = HEAP32[$b>>2]|0;
  $180 = (65280 + ($179))|0;
  $181 = $180 << 8;
  $182 = HEAP32[$g>>2]|0;
  $183 = (($181) + ($182))|0;
  $184 = $183 << 8;
  $185 = HEAP32[$r>>2]|0;
  $186 = (($184) + ($185))|0;
  STACKTOP = sp;return ($186|0);
 }
 HEAP32[$61>>2] = 255;
 HEAP32[$62>>2] = 0;
 $33 = $62;
 $34 = $b;
 $154 = $33;
 $155 = $34;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $30 = $154;
 $31 = $155;
 $156 = $30;
 $157 = $31;
 $27 = $32;
 $28 = $156;
 $29 = $157;
 $158 = $28;
 $159 = HEAP32[$158>>2]|0;
 $160 = $29;
 $161 = HEAP32[$160>>2]|0;
 $162 = ($159|0)<($161|0);
 $163 = $31;
 $164 = $30;
 $165 = $162 ? $163 : $164;
 $42 = $61;
 $43 = $165;
 $166 = $42;
 $167 = $43;
 ;HEAP8[$41>>0]=HEAP8[$44>>0]|0;
 $39 = $166;
 $40 = $167;
 $168 = $40;
 $169 = $39;
 $36 = $41;
 $37 = $168;
 $38 = $169;
 $170 = $37;
 $171 = HEAP32[$170>>2]|0;
 $172 = $38;
 $173 = HEAP32[$172>>2]|0;
 $174 = ($171|0)<($173|0);
 $175 = $40;
 $176 = $39;
 $177 = $174 ? $175 : $176;
 $178 = HEAP32[$177>>2]|0;
 HEAP32[$b>>2] = $178;
 $179 = HEAP32[$b>>2]|0;
 $180 = (65280 + ($179))|0;
 $181 = $180 << 8;
 $182 = HEAP32[$g>>2]|0;
 $183 = (($181) + ($182))|0;
 $184 = $183 << 8;
 $185 = HEAP32[$r>>2]|0;
 $186 = (($184) + ($185))|0;
 STACKTOP = sp;return ($186|0);
}
function __ZNK10emscripten3val4callIvJRjS2_iEEET_PKcDpOT0_($this,$name,$args,$args1,$args2) {
 $this = $this|0;
 $name = $name|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $name;
 $5 = $args;
 $6 = $args1;
 $7 = $args2;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $10 = $4;
 $11 = $5;
 $2 = $11;
 $12 = $2;
 $13 = $6;
 $1 = $13;
 $14 = $1;
 $15 = $7;
 $0 = $15;
 $16 = $0;
 __ZN10emscripten8internal12MethodCallerIvJRjS2_iEE4callEPNS0_7_EM_VALEPKcS2_S2_Oi($9,$10,$12,$14,$16);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12MethodCallerIvJRjS2_iEE4callEPNS0_7_EM_VALEPKcS2_S2_Oi($handle,$methodName,$args,$args1,$args2) {
 $handle = $handle|0;
 $methodName = $methodName|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argv = 0;
 var $caller = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp;
 $3 = $handle;
 $4 = $methodName;
 $5 = $args;
 $6 = $args1;
 $7 = $args2;
 $8 = (__ZN10emscripten8internal9SignatureIvJRjS2_iEE17get_method_callerEv()|0);
 $caller = $8;
 $9 = $5;
 $2 = $9;
 $10 = $2;
 $11 = $6;
 $1 = $11;
 $12 = $1;
 $13 = $7;
 $0 = $13;
 $14 = $0;
 __ZN10emscripten8internal12WireTypePackIJRjS2_iEEC2ES2_S2_Oi($argv,$10,$12,$14);
 $15 = $caller;
 $16 = $3;
 $17 = $4;
 $18 = (__ZNK10emscripten8internal12WireTypePackIJRjS2_iEEcvPKvEv($argv)|0);
 __emval_call_void_method(($15|0),($16|0),($17|0),($18|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal9SignatureIvJRjS2_iEE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[120>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((120|0))|0);
   $5 = ($4|0)!=(0);
   if ($5) {
    __THREW__ = 0;
    $6 = (invoke_i(436)|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $10 = ___cxa_find_matching_catch()|0;
     $11 = tempRet0;
     $0 = $10;
     $1 = $11;
     ___cxa_guard_abort((120|0));
     $12 = $0;
     $13 = $1;
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6140>>2] = $6;
     ___cxa_guard_release((120|0));
     break;
    }
   }
  }
 } while(0);
 $9 = HEAP32[6140>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function __ZN10emscripten8internal12WireTypePackIJRjS2_iEEC2ES2_S2_Oi($this,$args,$args1,$args2) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cursor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cursor = sp;
 $19 = $this;
 $20 = $args;
 $21 = $args1;
 $22 = $args2;
 $23 = $19;
 $18 = $23;
 $24 = $18;
 HEAP32[$cursor>>2] = $24;
 $25 = $20;
 $2 = $25;
 $26 = $2;
 $27 = $21;
 $1 = $27;
 $28 = $1;
 $29 = $22;
 $0 = $29;
 $30 = $0;
 $14 = $cursor;
 $15 = $26;
 $16 = $28;
 $17 = $30;
 $31 = $14;
 $32 = $15;
 $13 = $32;
 $33 = $13;
 $34 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($33)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIjEEvRPNS0_15GenericWireTypeET_($31,$34);
 $35 = $14;
 $36 = $16;
 $4 = $36;
 $37 = $4;
 $38 = $17;
 $3 = $38;
 $39 = $3;
 $10 = $35;
 $11 = $37;
 $12 = $39;
 $40 = $10;
 $41 = $11;
 $9 = $41;
 $42 = $9;
 $43 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($42)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIjEEvRPNS0_15GenericWireTypeET_($40,$43);
 $44 = $10;
 $45 = $12;
 $5 = $45;
 $46 = $5;
 $7 = $44;
 $8 = $46;
 $47 = $7;
 $48 = $8;
 $6 = $48;
 $49 = $6;
 $50 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($49)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($47,$50);
 $51 = $7;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($51);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WireTypePackIJRjS2_iEEcvPKvEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeIjEEvRPNS0_15GenericWireTypeET_($cursor,$wt) {
 $cursor = $cursor|0;
 $wt = $wt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cursor;
 $1 = $wt;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($cursor,$wt) {
 $cursor = $cursor|0;
 $wt = $wt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cursor;
 $1 = $wt;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal9SignatureIvJRjS2_iEE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRjS4_iEE8getCountEv($args)|0);
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRjS4_iEE8getTypesEv($args)|0);
 $2 = (__emval_get_method_caller(($0|0),($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRjS4_iEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRjS4_iEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRjS3_iEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRjS3_iEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6144|0);
}
function __Z7reverseILi1EEvPhS0_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __Z7reverseILi2EEvPhS0_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $7 = $1;
 $8 = ((($7)) + -1|0);
 __Z7reverseILi1EEvPhS0_($6,$8);
 STACKTOP = sp;return;
}
function __Z7reverseILi3EEvPhS0_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $7 = $1;
 $8 = ((($7)) + -1|0);
 __Z7reverseILi2EEvPhS0_($6,$8);
 STACKTOP = sp;return;
}
function __Z7reverseILi4EEvPhS0_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $7 = $1;
 $8 = ((($7)) + -1|0);
 __Z7reverseILi3EEvPhS0_($6,$8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12MethodCallerIiJlEE4callEPNS0_7_EM_VALEPKcOl($handle,$methodName,$args) {
 $handle = $handle|0;
 $methodName = $methodName|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argv = 0, $caller = 0, $destructors = 0, $rd = 0, $result = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp + 8|0;
 $destructors = sp + 32|0;
 $rd = sp + 28|0;
 $1 = $handle;
 $2 = $methodName;
 $3 = $args;
 $7 = (__ZN10emscripten8internal9SignatureIiJlEE17get_method_callerEv()|0);
 $caller = $7;
 $8 = $3;
 $0 = $8;
 $9 = $0;
 __ZN10emscripten8internal12WireTypePackIJlEEC2EOl($argv,$9);
 $10 = $caller;
 $11 = $1;
 $12 = $2;
 $13 = (__ZNK10emscripten8internal12WireTypePackIJlEEcvPKvEv($argv)|0);
 $14 = (+__emval_call_method(($10|0),($11|0),($12|0),($destructors|0),($13|0)));
 $result = $14;
 $15 = HEAP32[$destructors>>2]|0;
 __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE($rd,$15);
 $16 = $result;
 __THREW__ = 0;
 $17 = (invoke_id(437,(+$16))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $4 = $20;
  $5 = $21;
  __ZN10emscripten8internal17DestructorsRunnerD2Ev($rd);
  $22 = $4;
  $23 = $5;
  ___resumeException($22|0);
  // unreachable;
 } else {
  $6 = 1;
  __ZN10emscripten8internal17DestructorsRunnerD2Ev($rd);
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal9SignatureIiJlEE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[128>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((128|0))|0);
   $5 = ($4|0)!=(0);
   if ($5) {
    __THREW__ = 0;
    $6 = (invoke_i(438)|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $10 = ___cxa_find_matching_catch()|0;
     $11 = tempRet0;
     $0 = $10;
     $1 = $11;
     ___cxa_guard_abort((128|0));
     $12 = $0;
     $13 = $1;
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6160>>2] = $6;
     ___cxa_guard_release((128|0));
     break;
    }
   }
  }
 } while(0);
 $9 = HEAP32[6160>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function __ZN10emscripten8internal12WireTypePackIJlEEC2EOl($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cursor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cursor = sp;
 $5 = $this;
 $6 = $args;
 $7 = $5;
 $4 = $7;
 $8 = $4;
 HEAP32[$cursor>>2] = $8;
 $9 = $6;
 $0 = $9;
 $10 = $0;
 $2 = $cursor;
 $3 = $10;
 $11 = $2;
 $12 = $3;
 $1 = $12;
 $13 = $1;
 $14 = (__ZN10emscripten8internal11BindingTypeIlE10toWireTypeERKl($13)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIlEEvRPNS0_15GenericWireTypeET_($11,$14);
 $15 = $2;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($15);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WireTypePackIJlEEcvPKvEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal19fromGenericWireTypeIiEET_d($g) {
 $g = +$g;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $wt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $g;
 $1 = $0;
 $2 = (__ZN10emscripten8internal24GenericWireTypeConverterIiE4fromEd($1)|0);
 $wt = $2;
 $3 = $wt;
 $4 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten8internal24GenericWireTypeConverterIiE4fromEd($wt) {
 $wt = +$wt;
 var $0 = 0.0, $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 $2 = (~~(($1)));
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIlE10toWireTypeERKl($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeIlEEvRPNS0_15GenericWireTypeET_($cursor,$wt) {
 $cursor = $cursor|0;
 $wt = $wt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cursor;
 $1 = $wt;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $2;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal9SignatureIiJlEE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJilEE8getCountEv($args)|0);
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJilEE8getTypesEv($args)|0);
 $2 = (__emval_get_method_caller(($0|0),($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJilEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJilEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJilEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJilEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6164|0);
}
function __ZN10emscripten8internal12MethodCallerIvJRNS_3valEEE4callEPNS0_7_EM_VALEPKcS3_($handle,$methodName,$args) {
 $handle = $handle|0;
 $methodName = $methodName|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argv = 0, $caller = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp;
 $1 = $handle;
 $2 = $methodName;
 $3 = $args;
 $4 = (__ZN10emscripten8internal9SignatureIvJRNS_3valEEE17get_method_callerEv()|0);
 $caller = $4;
 $5 = $3;
 $0 = $5;
 $6 = $0;
 __ZN10emscripten8internal12WireTypePackIJRNS_3valEEEC2ES3_($argv,$6);
 $7 = $caller;
 $8 = $1;
 $9 = $2;
 $10 = (__ZNK10emscripten8internal12WireTypePackIJRNS_3valEEEcvPKvEv($argv)|0);
 __emval_call_void_method(($7|0),($8|0),($9|0),($10|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal9SignatureIvJRNS_3valEEE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[136>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((136|0))|0);
   $5 = ($4|0)!=(0);
   if ($5) {
    __THREW__ = 0;
    $6 = (invoke_i(439)|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $10 = ___cxa_find_matching_catch()|0;
     $11 = tempRet0;
     $0 = $10;
     $1 = $11;
     ___cxa_guard_abort((136|0));
     $12 = $0;
     $13 = $1;
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6172>>2] = $6;
     ___cxa_guard_release((136|0));
     break;
    }
   }
  }
 } while(0);
 $9 = HEAP32[6172>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function __ZN10emscripten8internal9SignatureIvJRNS_3valEEE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNS_3valEEE8getCountEv($args)|0);
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNS_3valEEE8getTypesEv($args)|0);
 $2 = (__emval_get_method_caller(($0|0),($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNS_3valEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNS_3valEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNS_3valEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNS_3valEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6176|0);
}
function __ZNSt3__15dequeI11VideoPacketNS_9allocatorIS1_EEE19__add_back_capacityEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__buf = 0, $__c$i = 0, $__c$i12 = 0, $__d$i = 0;
 var $__d$i11 = 0, $__i = 0, $__n$i$i$i = 0, $__n$i$i$i10 = 0, $__pt = 0, $__pt1 = 0, $__t$i = 0, $__t$i$i = 0, $__t$i$i9 = 0, $__t$i1$i = 0, $__t$i1$i8 = 0, $__t$i13 = 0, $__t$i2 = 0, $__t$i2$i = 0, $__t$i2$i7 = 0, $__t$i3 = 0, $__t$i3$i = 0, $__t$i3$i6 = 0, $__t$i4 = 0, $__t$i5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 1252|0;
 $$byval_copy2 = sp + 1248|0;
 $$byval_copy1 = sp + 1244|0;
 $$byval_copy = sp + 1240|0;
 $15 = sp + 48|0;
 $18 = sp + 1262|0;
 $35 = sp + 40|0;
 $38 = sp + 1261|0;
 $__t$i3$i6 = sp + 1076|0;
 $__t$i2$i7 = sp + 1052|0;
 $__t$i1$i8 = sp + 1028|0;
 $__t$i$i9 = sp + 980|0;
 $89 = sp + 32|0;
 $94 = sp + 1260|0;
 $100 = sp + 832|0;
 $101 = sp + 828|0;
 $__t$i13 = sp + 808|0;
 $102 = sp + 804|0;
 $105 = sp + 792|0;
 $109 = sp + 24|0;
 $112 = sp + 1259|0;
 $157 = sp + 16|0;
 $160 = sp + 1258|0;
 $__t$i3$i = sp + 564|0;
 $__t$i2$i = sp + 540|0;
 $__t$i1$i = sp + 516|0;
 $__t$i$i = sp + 468|0;
 $211 = sp + 8|0;
 $216 = sp + 1257|0;
 $222 = sp + 320|0;
 $223 = sp + 316|0;
 $__t$i5 = sp + 296|0;
 $224 = sp + 292|0;
 $227 = sp + 280|0;
 $__t$i4 = sp + 256|0;
 $__t$i3 = sp + 232|0;
 $__t$i2 = sp + 208|0;
 $__t$i = sp + 160|0;
 $256 = sp;
 $259 = sp + 1256|0;
 $__pt = sp + 108|0;
 $267 = sp + 104|0;
 $268 = sp + 100|0;
 $__pt1 = sp + 96|0;
 $__buf = sp + 76|0;
 $269 = sp + 72|0;
 $270 = sp + 68|0;
 $271 = sp + 64|0;
 $266 = $this;
 $274 = $266;
 $265 = $274;
 $275 = $265;
 $276 = ((($275)) + 20|0);
 $264 = $276;
 $277 = $264;
 $263 = $277;
 $278 = $263;
 $__a = $278;
 $262 = $274;
 $279 = $262;
 $280 = ((($279)) + 16|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = ($281>>>0)>=(204);
 if ($282) {
  $283 = ((($274)) + 16|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = (($284) - 204)|0;
  HEAP32[$283>>2] = $285;
  $261 = $274;
  $286 = $261;
  $287 = ((($286)) + 4|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = HEAP32[$288>>2]|0;
  HEAP32[$__pt>>2] = $289;
  $260 = $274;
  $290 = $260;
  $291 = ((($290)) + 4|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = ((($292)) + 4|0);
  $257 = $290;
  $258 = $293;
  $294 = $257;
  $295 = $258;
  ;HEAP8[$256>>0]=HEAP8[$259>>0]|0;
  $254 = $294;
  $255 = $295;
  $296 = $254;
  $297 = $255;
  $298 = ((($296)) + 4|0);
  HEAP32[$298>>2] = $297;
  $220 = $274;
  $221 = $__pt;
  $299 = $220;
  $300 = ((($299)) + 8|0);
  $301 = HEAP32[$300>>2]|0;
  $219 = $299;
  $302 = $219;
  $303 = ((($302)) + 12|0);
  $218 = $303;
  $304 = $218;
  $217 = $304;
  $305 = $217;
  $306 = HEAP32[$305>>2]|0;
  $307 = ($301|0)==($306|0);
  do {
   if ($307) {
    $308 = ((($299)) + 4|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = HEAP32[$299>>2]|0;
    $311 = ($309>>>0)>($310>>>0);
    if ($311) {
     $312 = ((($299)) + 4|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = HEAP32[$299>>2]|0;
     $315 = $313;
     $316 = $314;
     $317 = (($315) - ($316))|0;
     $318 = (($317|0) / 4)&-1;
     $__d$i = $318;
     $319 = $__d$i;
     $320 = (($319) + 1)|0;
     $321 = (($320|0) / 2)&-1;
     $__d$i = $321;
     $322 = ((($299)) + 4|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = ((($299)) + 8|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = ((($299)) + 4|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = $__d$i;
     $329 = (0 - ($328))|0;
     $330 = (($327) + ($329<<2)|0);
     $196 = $323;
     $197 = $325;
     $198 = $330;
     $331 = $196;
     $195 = $331;
     $332 = $195;
     $333 = $197;
     $190 = $333;
     $334 = $190;
     $335 = $198;
     $191 = $335;
     $336 = $191;
     $192 = $332;
     $193 = $334;
     $194 = $336;
     $337 = $193;
     $338 = $192;
     $339 = $337;
     $340 = $338;
     $341 = (($339) - ($340))|0;
     $342 = (($341|0) / 4)&-1;
     $__n$i$i$i = $342;
     $343 = $194;
     $344 = $192;
     $345 = $__n$i$i$i;
     $346 = $345<<2;
     _memmove(($343|0),($344|0),($346|0))|0;
     $347 = $194;
     $348 = $__n$i$i$i;
     $349 = (($347) + ($348<<2)|0);
     $350 = ((($299)) + 8|0);
     HEAP32[$350>>2] = $349;
     $351 = $__d$i;
     $352 = ((($299)) + 4|0);
     $353 = HEAP32[$352>>2]|0;
     $354 = (0 - ($351))|0;
     $355 = (($353) + ($354<<2)|0);
     HEAP32[$352>>2] = $355;
     break;
    }
    $189 = $299;
    $356 = $189;
    $357 = ((($356)) + 12|0);
    $188 = $357;
    $358 = $188;
    $187 = $358;
    $359 = $187;
    $360 = HEAP32[$359>>2]|0;
    $361 = HEAP32[$299>>2]|0;
    $362 = $360;
    $363 = $361;
    $364 = (($362) - ($363))|0;
    $365 = (($364|0) / 4)&-1;
    $366 = $365<<1;
    HEAP32[$222>>2] = $366;
    HEAP32[$223>>2] = 1;
    $158 = $222;
    $159 = $223;
    $367 = $158;
    $368 = $159;
    ;HEAP8[$157>>0]=HEAP8[$160>>0]|0;
    $155 = $367;
    $156 = $368;
    $369 = $155;
    $370 = $156;
    $152 = $157;
    $153 = $369;
    $154 = $370;
    $371 = $153;
    $372 = HEAP32[$371>>2]|0;
    $373 = $154;
    $374 = HEAP32[$373>>2]|0;
    $375 = ($372>>>0)<($374>>>0);
    $376 = $156;
    $377 = $155;
    $378 = $375 ? $376 : $377;
    $379 = HEAP32[$378>>2]|0;
    $__c$i = $379;
    $380 = $__c$i;
    $381 = $__c$i;
    $382 = (($381>>>0) / 4)&-1;
    $147 = $299;
    $383 = $147;
    $384 = ((($383)) + 12|0);
    $146 = $384;
    $385 = $146;
    $145 = $385;
    $386 = $145;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEEC2EjjS5_($__t$i5,$380,$382,$386);
    $387 = ((($299)) + 4|0);
    $388 = HEAP32[$387>>2]|0;
    $148 = $224;
    $149 = $388;
    $389 = $148;
    $390 = $149;
    HEAP32[$389>>2] = $390;
    $391 = ((($299)) + 8|0);
    $392 = HEAP32[$391>>2]|0;
    $150 = $227;
    $151 = $392;
    $393 = $150;
    $394 = $151;
    HEAP32[$393>>2] = $394;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$224>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$227>>2]|0;
    invoke_viii(440,($__t$i5|0),($$byval_copy|0),($$byval_copy1|0));
    $395 = __THREW__; __THREW__ = 0;
    $396 = $395&1;
    if ($396) {
     $449 = ___cxa_find_matching_catch()|0;
     $450 = tempRet0;
     $225 = $449;
     $226 = $450;
     __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t$i5);
     $451 = $225;
     $452 = $226;
     ___resumeException($451|0);
     // unreachable;
    } else {
     $164 = $299;
     $165 = $__t$i5;
     $397 = $164;
     $163 = $397;
     $398 = $163;
     $399 = HEAP32[$398>>2]|0;
     HEAP32[$__t$i3$i>>2] = $399;
     $400 = $165;
     $161 = $400;
     $401 = $161;
     $402 = HEAP32[$401>>2]|0;
     $403 = $164;
     HEAP32[$403>>2] = $402;
     $162 = $__t$i3$i;
     $404 = $162;
     $405 = HEAP32[$404>>2]|0;
     $406 = $165;
     HEAP32[$406>>2] = $405;
     $407 = ((($299)) + 4|0);
     $408 = ((($__t$i5)) + 4|0);
     $169 = $407;
     $170 = $408;
     $409 = $169;
     $168 = $409;
     $410 = $168;
     $411 = HEAP32[$410>>2]|0;
     HEAP32[$__t$i2$i>>2] = $411;
     $412 = $170;
     $166 = $412;
     $413 = $166;
     $414 = HEAP32[$413>>2]|0;
     $415 = $169;
     HEAP32[$415>>2] = $414;
     $167 = $__t$i2$i;
     $416 = $167;
     $417 = HEAP32[$416>>2]|0;
     $418 = $170;
     HEAP32[$418>>2] = $417;
     $419 = ((($299)) + 8|0);
     $420 = ((($__t$i5)) + 8|0);
     $174 = $419;
     $175 = $420;
     $421 = $174;
     $173 = $421;
     $422 = $173;
     $423 = HEAP32[$422>>2]|0;
     HEAP32[$__t$i1$i>>2] = $423;
     $424 = $175;
     $171 = $424;
     $425 = $171;
     $426 = HEAP32[$425>>2]|0;
     $427 = $174;
     HEAP32[$427>>2] = $426;
     $172 = $__t$i1$i;
     $428 = $172;
     $429 = HEAP32[$428>>2]|0;
     $430 = $175;
     HEAP32[$430>>2] = $429;
     $178 = $299;
     $431 = $178;
     $432 = ((($431)) + 12|0);
     $177 = $432;
     $433 = $177;
     $176 = $433;
     $434 = $176;
     $181 = $__t$i5;
     $435 = $181;
     $436 = ((($435)) + 12|0);
     $180 = $436;
     $437 = $180;
     $179 = $437;
     $438 = $179;
     $185 = $434;
     $186 = $438;
     $439 = $185;
     $184 = $439;
     $440 = $184;
     $441 = HEAP32[$440>>2]|0;
     HEAP32[$__t$i$i>>2] = $441;
     $442 = $186;
     $182 = $442;
     $443 = $182;
     $444 = HEAP32[$443>>2]|0;
     $445 = $185;
     HEAP32[$445>>2] = $444;
     $183 = $__t$i$i;
     $446 = $183;
     $447 = HEAP32[$446>>2]|0;
     $448 = $186;
     HEAP32[$448>>2] = $447;
     __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t$i5);
     break;
    }
   }
  } while(0);
  $201 = $299;
  $453 = $201;
  $454 = ((($453)) + 12|0);
  $200 = $454;
  $455 = $200;
  $199 = $455;
  $456 = $199;
  $457 = ((($299)) + 8|0);
  $458 = HEAP32[$457>>2]|0;
  $202 = $458;
  $459 = $202;
  $460 = $221;
  $213 = $456;
  $214 = $459;
  $215 = $460;
  $461 = $213;
  $462 = $214;
  $463 = $215;
  $212 = $463;
  $464 = $212;
  ;HEAP8[$211>>0]=HEAP8[$216>>0]|0;
  $208 = $461;
  $209 = $462;
  $210 = $464;
  $465 = $208;
  $466 = $209;
  $467 = $210;
  $207 = $467;
  $468 = $207;
  $204 = $465;
  $205 = $466;
  $206 = $468;
  $469 = $205;
  $470 = $206;
  $203 = $470;
  $471 = $203;
  $472 = HEAP32[$471>>2]|0;
  HEAP32[$469>>2] = $472;
  $473 = ((($299)) + 8|0);
  $474 = HEAP32[$473>>2]|0;
  $475 = ((($474)) + 4|0);
  HEAP32[$473>>2] = $475;
  STACKTOP = sp;return;
 }
 $144 = $274;
 $476 = $144;
 $477 = ((($476)) + 8|0);
 $478 = HEAP32[$477>>2]|0;
 $479 = ((($476)) + 4|0);
 $480 = HEAP32[$479>>2]|0;
 $481 = $478;
 $482 = $480;
 $483 = (($481) - ($482))|0;
 $484 = (($483|0) / 4)&-1;
 $143 = $274;
 $485 = $143;
 $142 = $485;
 $486 = $142;
 $487 = ((($486)) + 12|0);
 $141 = $487;
 $488 = $141;
 $140 = $488;
 $489 = $140;
 $490 = HEAP32[$489>>2]|0;
 $491 = HEAP32[$485>>2]|0;
 $492 = $490;
 $493 = $491;
 $494 = (($492) - ($493))|0;
 $495 = (($494|0) / 4)&-1;
 $496 = ($484>>>0)<($495>>>0);
 if ($496) {
  $139 = $274;
  $497 = $139;
  $138 = $497;
  $498 = $138;
  $499 = ((($498)) + 12|0);
  $137 = $499;
  $500 = $137;
  $136 = $500;
  $501 = $136;
  $502 = HEAP32[$501>>2]|0;
  $503 = ((($497)) + 8|0);
  $504 = HEAP32[$503>>2]|0;
  $505 = $502;
  $506 = $504;
  $507 = (($505) - ($506))|0;
  $508 = (($507|0) / 4)&-1;
  $509 = ($508|0)!=(0);
  $510 = $__a;
  if ($509) {
   $134 = $510;
   $135 = 204;
   $511 = $134;
   $512 = $135;
   $131 = $511;
   $132 = $512;
   $133 = 0;
   $513 = $132;
   $514 = ($513*20)|0;
   $130 = $514;
   $515 = $130;
   $516 = (__Znwj($515)|0);
   HEAP32[$267>>2] = $516;
   __ZNSt3__114__split_bufferIP11VideoPacketNS_9allocatorIS2_EEE9push_backEOS2_($274,$267);
   STACKTOP = sp;return;
  }
  $128 = $510;
  $129 = 204;
  $517 = $128;
  $518 = $129;
  $125 = $517;
  $126 = $518;
  $127 = 0;
  $519 = $126;
  $520 = ($519*20)|0;
  $124 = $520;
  $521 = $124;
  $522 = (__Znwj($521)|0);
  HEAP32[$268>>2] = $522;
  __ZNSt3__114__split_bufferIP11VideoPacketNS_9allocatorIS2_EEE10push_frontEOS2_($274,$268);
  $123 = $274;
  $523 = $123;
  $524 = ((($523)) + 4|0);
  $525 = HEAP32[$524>>2]|0;
  $526 = HEAP32[$525>>2]|0;
  HEAP32[$__pt1>>2] = $526;
  $113 = $274;
  $527 = $113;
  $528 = ((($527)) + 4|0);
  $529 = HEAP32[$528>>2]|0;
  $530 = ((($529)) + 4|0);
  $110 = $527;
  $111 = $530;
  $531 = $110;
  $532 = $111;
  ;HEAP8[$109>>0]=HEAP8[$112>>0]|0;
  $107 = $531;
  $108 = $532;
  $533 = $107;
  $534 = $108;
  $535 = ((($533)) + 4|0);
  HEAP32[$535>>2] = $534;
  $98 = $274;
  $99 = $__pt1;
  $536 = $98;
  $537 = ((($536)) + 8|0);
  $538 = HEAP32[$537>>2]|0;
  $97 = $536;
  $539 = $97;
  $540 = ((($539)) + 12|0);
  $96 = $540;
  $541 = $96;
  $95 = $541;
  $542 = $95;
  $543 = HEAP32[$542>>2]|0;
  $544 = ($538|0)==($543|0);
  do {
   if ($544) {
    $545 = ((($536)) + 4|0);
    $546 = HEAP32[$545>>2]|0;
    $547 = HEAP32[$536>>2]|0;
    $548 = ($546>>>0)>($547>>>0);
    if ($548) {
     $549 = ((($536)) + 4|0);
     $550 = HEAP32[$549>>2]|0;
     $551 = HEAP32[$536>>2]|0;
     $552 = $550;
     $553 = $551;
     $554 = (($552) - ($553))|0;
     $555 = (($554|0) / 4)&-1;
     $__d$i11 = $555;
     $556 = $__d$i11;
     $557 = (($556) + 1)|0;
     $558 = (($557|0) / 2)&-1;
     $__d$i11 = $558;
     $559 = ((($536)) + 4|0);
     $560 = HEAP32[$559>>2]|0;
     $561 = ((($536)) + 8|0);
     $562 = HEAP32[$561>>2]|0;
     $563 = ((($536)) + 4|0);
     $564 = HEAP32[$563>>2]|0;
     $565 = $__d$i11;
     $566 = (0 - ($565))|0;
     $567 = (($564) + ($566<<2)|0);
     $74 = $560;
     $75 = $562;
     $76 = $567;
     $568 = $74;
     $73 = $568;
     $569 = $73;
     $570 = $75;
     $68 = $570;
     $571 = $68;
     $572 = $76;
     $69 = $572;
     $573 = $69;
     $70 = $569;
     $71 = $571;
     $72 = $573;
     $574 = $71;
     $575 = $70;
     $576 = $574;
     $577 = $575;
     $578 = (($576) - ($577))|0;
     $579 = (($578|0) / 4)&-1;
     $__n$i$i$i10 = $579;
     $580 = $72;
     $581 = $70;
     $582 = $__n$i$i$i10;
     $583 = $582<<2;
     _memmove(($580|0),($581|0),($583|0))|0;
     $584 = $72;
     $585 = $__n$i$i$i10;
     $586 = (($584) + ($585<<2)|0);
     $587 = ((($536)) + 8|0);
     HEAP32[$587>>2] = $586;
     $588 = $__d$i11;
     $589 = ((($536)) + 4|0);
     $590 = HEAP32[$589>>2]|0;
     $591 = (0 - ($588))|0;
     $592 = (($590) + ($591<<2)|0);
     HEAP32[$589>>2] = $592;
     break;
    }
    $67 = $536;
    $593 = $67;
    $594 = ((($593)) + 12|0);
    $66 = $594;
    $595 = $66;
    $65 = $595;
    $596 = $65;
    $597 = HEAP32[$596>>2]|0;
    $598 = HEAP32[$536>>2]|0;
    $599 = $597;
    $600 = $598;
    $601 = (($599) - ($600))|0;
    $602 = (($601|0) / 4)&-1;
    $603 = $602<<1;
    HEAP32[$100>>2] = $603;
    HEAP32[$101>>2] = 1;
    $36 = $100;
    $37 = $101;
    $604 = $36;
    $605 = $37;
    ;HEAP8[$35>>0]=HEAP8[$38>>0]|0;
    $33 = $604;
    $34 = $605;
    $606 = $33;
    $607 = $34;
    $30 = $35;
    $31 = $606;
    $32 = $607;
    $608 = $31;
    $609 = HEAP32[$608>>2]|0;
    $610 = $32;
    $611 = HEAP32[$610>>2]|0;
    $612 = ($609>>>0)<($611>>>0);
    $613 = $34;
    $614 = $33;
    $615 = $612 ? $613 : $614;
    $616 = HEAP32[$615>>2]|0;
    $__c$i12 = $616;
    $617 = $__c$i12;
    $618 = $__c$i12;
    $619 = (($618>>>0) / 4)&-1;
    $25 = $536;
    $620 = $25;
    $621 = ((($620)) + 12|0);
    $24 = $621;
    $622 = $24;
    $23 = $622;
    $623 = $23;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEEC2EjjS5_($__t$i13,$617,$619,$623);
    $624 = ((($536)) + 4|0);
    $625 = HEAP32[$624>>2]|0;
    $26 = $102;
    $27 = $625;
    $626 = $26;
    $627 = $27;
    HEAP32[$626>>2] = $627;
    $628 = ((($536)) + 8|0);
    $629 = HEAP32[$628>>2]|0;
    $28 = $105;
    $29 = $629;
    $630 = $28;
    $631 = $29;
    HEAP32[$630>>2] = $631;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$102>>2]|0;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$105>>2]|0;
    invoke_viii(440,($__t$i13|0),($$byval_copy2|0),($$byval_copy3|0));
    $632 = __THREW__; __THREW__ = 0;
    $633 = $632&1;
    if ($633) {
     $686 = ___cxa_find_matching_catch()|0;
     $687 = tempRet0;
     $103 = $686;
     $104 = $687;
     __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t$i13);
     $688 = $103;
     $689 = $104;
     ___resumeException($688|0);
     // unreachable;
    } else {
     $42 = $536;
     $43 = $__t$i13;
     $634 = $42;
     $41 = $634;
     $635 = $41;
     $636 = HEAP32[$635>>2]|0;
     HEAP32[$__t$i3$i6>>2] = $636;
     $637 = $43;
     $39 = $637;
     $638 = $39;
     $639 = HEAP32[$638>>2]|0;
     $640 = $42;
     HEAP32[$640>>2] = $639;
     $40 = $__t$i3$i6;
     $641 = $40;
     $642 = HEAP32[$641>>2]|0;
     $643 = $43;
     HEAP32[$643>>2] = $642;
     $644 = ((($536)) + 4|0);
     $645 = ((($__t$i13)) + 4|0);
     $47 = $644;
     $48 = $645;
     $646 = $47;
     $46 = $646;
     $647 = $46;
     $648 = HEAP32[$647>>2]|0;
     HEAP32[$__t$i2$i7>>2] = $648;
     $649 = $48;
     $44 = $649;
     $650 = $44;
     $651 = HEAP32[$650>>2]|0;
     $652 = $47;
     HEAP32[$652>>2] = $651;
     $45 = $__t$i2$i7;
     $653 = $45;
     $654 = HEAP32[$653>>2]|0;
     $655 = $48;
     HEAP32[$655>>2] = $654;
     $656 = ((($536)) + 8|0);
     $657 = ((($__t$i13)) + 8|0);
     $52 = $656;
     $53 = $657;
     $658 = $52;
     $51 = $658;
     $659 = $51;
     $660 = HEAP32[$659>>2]|0;
     HEAP32[$__t$i1$i8>>2] = $660;
     $661 = $53;
     $49 = $661;
     $662 = $49;
     $663 = HEAP32[$662>>2]|0;
     $664 = $52;
     HEAP32[$664>>2] = $663;
     $50 = $__t$i1$i8;
     $665 = $50;
     $666 = HEAP32[$665>>2]|0;
     $667 = $53;
     HEAP32[$667>>2] = $666;
     $56 = $536;
     $668 = $56;
     $669 = ((($668)) + 12|0);
     $55 = $669;
     $670 = $55;
     $54 = $670;
     $671 = $54;
     $59 = $__t$i13;
     $672 = $59;
     $673 = ((($672)) + 12|0);
     $58 = $673;
     $674 = $58;
     $57 = $674;
     $675 = $57;
     $63 = $671;
     $64 = $675;
     $676 = $63;
     $62 = $676;
     $677 = $62;
     $678 = HEAP32[$677>>2]|0;
     HEAP32[$__t$i$i9>>2] = $678;
     $679 = $64;
     $60 = $679;
     $680 = $60;
     $681 = HEAP32[$680>>2]|0;
     $682 = $63;
     HEAP32[$682>>2] = $681;
     $61 = $__t$i$i9;
     $683 = $61;
     $684 = HEAP32[$683>>2]|0;
     $685 = $64;
     HEAP32[$685>>2] = $684;
     __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t$i13);
     break;
    }
   }
  } while(0);
  $79 = $536;
  $690 = $79;
  $691 = ((($690)) + 12|0);
  $78 = $691;
  $692 = $78;
  $77 = $692;
  $693 = $77;
  $694 = ((($536)) + 8|0);
  $695 = HEAP32[$694>>2]|0;
  $80 = $695;
  $696 = $80;
  $697 = $99;
  $91 = $693;
  $92 = $696;
  $93 = $697;
  $698 = $91;
  $699 = $92;
  $700 = $93;
  $90 = $700;
  $701 = $90;
  ;HEAP8[$89>>0]=HEAP8[$94>>0]|0;
  $86 = $698;
  $87 = $699;
  $88 = $701;
  $702 = $86;
  $703 = $87;
  $704 = $88;
  $85 = $704;
  $705 = $85;
  $82 = $702;
  $83 = $703;
  $84 = $705;
  $706 = $83;
  $707 = $84;
  $81 = $707;
  $708 = $81;
  $709 = HEAP32[$708>>2]|0;
  HEAP32[$706>>2] = $709;
  $710 = ((($536)) + 8|0);
  $711 = HEAP32[$710>>2]|0;
  $712 = ((($711)) + 4|0);
  HEAP32[$710>>2] = $712;
  STACKTOP = sp;return;
 }
 $22 = $274;
 $713 = $22;
 $21 = $713;
 $714 = $21;
 $715 = ((($714)) + 12|0);
 $20 = $715;
 $716 = $20;
 $19 = $716;
 $717 = $19;
 $718 = HEAP32[$717>>2]|0;
 $719 = HEAP32[$713>>2]|0;
 $720 = $718;
 $721 = $719;
 $722 = (($720) - ($721))|0;
 $723 = (($722|0) / 4)&-1;
 $724 = $723<<1;
 HEAP32[$269>>2] = $724;
 HEAP32[$270>>2] = 1;
 $16 = $269;
 $17 = $270;
 $725 = $16;
 $726 = $17;
 ;HEAP8[$15>>0]=HEAP8[$18>>0]|0;
 $13 = $725;
 $14 = $726;
 $727 = $13;
 $728 = $14;
 $10 = $15;
 $11 = $727;
 $12 = $728;
 $729 = $11;
 $730 = HEAP32[$729>>2]|0;
 $731 = $12;
 $732 = HEAP32[$731>>2]|0;
 $733 = ($730>>>0)<($732>>>0);
 $734 = $14;
 $735 = $13;
 $736 = $733 ? $734 : $735;
 $737 = HEAP32[$736>>2]|0;
 $9 = $274;
 $738 = $9;
 $739 = ((($738)) + 8|0);
 $740 = HEAP32[$739>>2]|0;
 $741 = ((($738)) + 4|0);
 $742 = HEAP32[$741>>2]|0;
 $743 = $740;
 $744 = $742;
 $745 = (($743) - ($744))|0;
 $746 = (($745|0) / 4)&-1;
 $8 = $274;
 $747 = $8;
 $748 = ((($747)) + 12|0);
 $7 = $748;
 $749 = $7;
 $6 = $749;
 $750 = $6;
 __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEEC2EjjS5_($__buf,$737,$746,$750);
 $751 = $__a;
 $4 = $751;
 $5 = 204;
 $752 = $4;
 $753 = $5;
 $1 = $752;
 $2 = $753;
 $3 = 0;
 $754 = $2;
 $755 = ($754*20)|0;
 $0 = $755;
 $756 = $0;
 __THREW__ = 0;
 $757 = (invoke_ii(376,($756|0))|0);
 $758 = __THREW__; __THREW__ = 0;
 $759 = $758&1;
 if (!($759)) {
  HEAP32[$271>>2] = $757;
  __THREW__ = 0;
  invoke_vii(441,($__buf|0),($271|0));
  $760 = __THREW__; __THREW__ = 0;
  $761 = $760&1;
  if (!($761)) {
   $121 = $274;
   $781 = $121;
   $782 = ((($781)) + 8|0);
   $783 = HEAP32[$782>>2]|0;
   $__i = $783;
   while(1) {
    $784 = $__i;
    $122 = $274;
    $785 = $122;
    $786 = ((($785)) + 4|0);
    $787 = HEAP32[$786>>2]|0;
    $788 = ($784|0)!=($787|0);
    if (!($788)) {
     label = 26;
     break;
    }
    $789 = $__i;
    $790 = ((($789)) + -4|0);
    $__i = $790;
    __THREW__ = 0;
    invoke_vii(444,($__buf|0),($790|0));
    $791 = __THREW__; __THREW__ = 0;
    $792 = $791&1;
    if ($792) {
     label = 25;
     break;
    }
   }
   if ((label|0) == 25) {
    $793 = ___cxa_find_matching_catch()|0;
    $794 = tempRet0;
    $272 = $793;
    $273 = $794;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__buf);
    $847 = $272;
    $848 = $273;
    ___resumeException($847|0);
    // unreachable;
   }
   else if ((label|0) == 26) {
    $231 = $274;
    $232 = $__buf;
    $795 = $231;
    $230 = $795;
    $796 = $230;
    $797 = HEAP32[$796>>2]|0;
    HEAP32[$__t$i4>>2] = $797;
    $798 = $232;
    $228 = $798;
    $799 = $228;
    $800 = HEAP32[$799>>2]|0;
    $801 = $231;
    HEAP32[$801>>2] = $800;
    $229 = $__t$i4;
    $802 = $229;
    $803 = HEAP32[$802>>2]|0;
    $804 = $232;
    HEAP32[$804>>2] = $803;
    $805 = ((($274)) + 4|0);
    $806 = ((($__buf)) + 4|0);
    $236 = $805;
    $237 = $806;
    $807 = $236;
    $235 = $807;
    $808 = $235;
    $809 = HEAP32[$808>>2]|0;
    HEAP32[$__t$i3>>2] = $809;
    $810 = $237;
    $233 = $810;
    $811 = $233;
    $812 = HEAP32[$811>>2]|0;
    $813 = $236;
    HEAP32[$813>>2] = $812;
    $234 = $__t$i3;
    $814 = $234;
    $815 = HEAP32[$814>>2]|0;
    $816 = $237;
    HEAP32[$816>>2] = $815;
    $817 = ((($274)) + 8|0);
    $818 = ((($__buf)) + 8|0);
    $241 = $817;
    $242 = $818;
    $819 = $241;
    $240 = $819;
    $820 = $240;
    $821 = HEAP32[$820>>2]|0;
    HEAP32[$__t$i2>>2] = $821;
    $822 = $242;
    $238 = $822;
    $823 = $238;
    $824 = HEAP32[$823>>2]|0;
    $825 = $241;
    HEAP32[$825>>2] = $824;
    $239 = $__t$i2;
    $826 = $239;
    $827 = HEAP32[$826>>2]|0;
    $828 = $242;
    HEAP32[$828>>2] = $827;
    $245 = $274;
    $829 = $245;
    $830 = ((($829)) + 12|0);
    $244 = $830;
    $831 = $244;
    $243 = $831;
    $832 = $243;
    $248 = $__buf;
    $833 = $248;
    $834 = ((($833)) + 12|0);
    $247 = $834;
    $835 = $247;
    $246 = $835;
    $836 = $246;
    $252 = $832;
    $253 = $836;
    $837 = $252;
    $251 = $837;
    $838 = $251;
    $839 = HEAP32[$838>>2]|0;
    HEAP32[$__t$i>>2] = $839;
    $840 = $253;
    $249 = $840;
    $841 = $249;
    $842 = HEAP32[$841>>2]|0;
    $843 = $252;
    HEAP32[$843>>2] = $842;
    $250 = $__t$i;
    $844 = $250;
    $845 = HEAP32[$844>>2]|0;
    $846 = $253;
    HEAP32[$846>>2] = $845;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__buf);
    STACKTOP = sp;return;
   }
  }
 }
 $762 = ___cxa_find_matching_catch(0|0)|0;
 $763 = tempRet0;
 $272 = $762;
 $273 = $763;
 $764 = $272;
 (___cxa_begin_catch(($764|0))|0);
 $765 = $__a;
 $106 = $__buf;
 $766 = $106;
 $767 = ((($766)) + 8|0);
 $768 = HEAP32[$767>>2]|0;
 $769 = ((($768)) + -4|0);
 $770 = HEAP32[$769>>2]|0;
 $118 = $765;
 $119 = $770;
 $120 = 204;
 $771 = $118;
 $772 = $119;
 $773 = $120;
 $115 = $771;
 $116 = $772;
 $117 = $773;
 $774 = $116;
 $114 = $774;
 $775 = $114;
 __ZdlPv($775);
 __THREW__ = 0;
 invoke_v(442);
 $776 = __THREW__; __THREW__ = 0;
 $777 = ___cxa_find_matching_catch()|0;
 $778 = tempRet0;
 $272 = $777;
 $273 = $778;
 __THREW__ = 0;
 invoke_v(443);
 $779 = __THREW__; __THREW__ = 0;
 $780 = $779&1;
 if ($780) {
  $849 = ___cxa_find_matching_catch(0|0)|0;
  $850 = tempRet0;
  ___clang_call_terminate($849);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__buf);
  $847 = $272;
  $848 = $273;
  ___resumeException($847|0);
  // unreachable;
 }
}
function __ZN11VideoPacketC2ElO12MemoryStream($this,$t,$data) {
 $this = $this|0;
 $t = $t|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $data;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 __ZN12MemoryStreamC2ERKS_($5,$6);
 STACKTOP = sp;return;
}
function __ZN12MemoryStreamC2ERKS_($this,$right) {
 $this = $this|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $33 = $this;
 $34 = $right;
 $37 = $33;
 $32 = $37;
 $38 = $32;
 $31 = $38;
 $39 = $31;
 $30 = $39;
 $40 = $30;
 $29 = $40;
 $28 = $38;
 $41 = $28;
 $27 = $41;
 $42 = $27;
 $26 = $42;
 $43 = $26;
 $__a$i$i = $43;
 $__i$i$i = 0;
 while(1) {
  $44 = $__i$i$i;
  $45 = ($44>>>0)<(3);
  if (!($45)) {
   break;
  }
  $46 = $__i$i$i;
  $47 = $__a$i$i;
  $48 = (($47) + ($46<<2)|0);
  HEAP32[$48>>2] = 0;
  $49 = $__i$i$i;
  $50 = (($49) + 1)|0;
  $__i$i$i = $50;
 }
 $51 = ((($37)) + 12|0);
 $52 = $34;
 $53 = ((($52)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 HEAP32[$51>>2] = $54;
 $55 = $34;
 $24 = $37;
 $25 = $55;
 $56 = $24;
 $57 = $25;
 $23 = $57;
 $58 = $23;
 $22 = $58;
 $59 = $22;
 $21 = $59;
 $60 = $21;
 $20 = $60;
 $61 = $20;
 $19 = $61;
 $62 = $19;
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $64 & 1;
 $66 = ($65|0)!=(0);
 if ($66) {
  $13 = $59;
  $67 = $13;
  $12 = $67;
  $68 = $12;
  $11 = $68;
  $69 = $11;
  $70 = ((($69)) + 8|0);
  $71 = HEAP32[$70>>2]|0;
  $78 = $71;
 } else {
  $18 = $59;
  $72 = $18;
  $17 = $72;
  $73 = $17;
  $16 = $73;
  $74 = $16;
  $75 = ((($74)) + 1|0);
  $15 = $75;
  $76 = $15;
  $14 = $76;
  $77 = $14;
  $78 = $77;
 }
 $10 = $78;
 $79 = $10;
 $80 = $25;
 $9 = $80;
 $81 = $9;
 $8 = $81;
 $82 = $8;
 $7 = $82;
 $83 = $7;
 $6 = $83;
 $84 = $6;
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = $86 & 1;
 $88 = ($87|0)!=(0);
 if ($88) {
  $2 = $81;
  $89 = $2;
  $1 = $89;
  $90 = $1;
  $0 = $90;
  $91 = $0;
  $92 = ((($91)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $100 = $93;
 } else {
  $5 = $81;
  $94 = $5;
  $4 = $94;
  $95 = $4;
  $3 = $95;
  $96 = $3;
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 >> 1;
  $100 = $99;
 }
 __THREW__ = 0;
 (invoke_iiii(379,($56|0),($79|0),($100|0))|0);
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if ($102) {
  $103 = ___cxa_find_matching_catch()|0;
  $104 = tempRet0;
  $35 = $103;
  $36 = $104;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($37);
  $105 = $35;
  $106 = $36;
  ___resumeException($105|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEE18__construct_at_endINS_13move_iteratorIPS2_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp;
 $19 = sp + 100|0;
 $24 = $this;
 $25 = $24;
 $23 = $25;
 $26 = $23;
 $27 = ((($26)) + 12|0);
 $22 = $27;
 $28 = $22;
 $21 = $28;
 $29 = $21;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $__a = $31;
 while(1) {
  $2 = $__first;
  $3 = $__last;
  $32 = $2;
  $1 = $32;
  $33 = $1;
  $34 = HEAP32[$33>>2]|0;
  $35 = $3;
  $0 = $35;
  $36 = $0;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)!=($37|0);
  if (!($38)) {
   break;
  }
  $39 = $__a;
  $40 = ((($25)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $4 = $41;
  $42 = $4;
  $5 = $__first;
  $43 = $5;
  $44 = HEAP32[$43>>2]|0;
  $16 = $39;
  $17 = $42;
  $18 = $44;
  $45 = $16;
  $46 = $17;
  $47 = $18;
  $15 = $47;
  $48 = $15;
  ;HEAP8[$14>>0]=HEAP8[$19>>0]|0;
  $11 = $45;
  $12 = $46;
  $13 = $48;
  $49 = $11;
  $50 = $12;
  $51 = $13;
  $10 = $51;
  $52 = $10;
  $7 = $49;
  $8 = $50;
  $9 = $52;
  $53 = $8;
  $54 = $9;
  $6 = $54;
  $55 = $6;
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$53>>2] = $56;
  $57 = ((($25)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 4|0);
  HEAP32[$57>>2] = $59;
  $20 = $__first;
  $60 = $20;
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 4|0);
  HEAP32[$60>>2] = $62;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP11VideoPacketNS_9allocatorIS2_EEE9push_backEOS2_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 384|0;
 $$byval_copy = sp + 380|0;
 $12 = sp + 8|0;
 $15 = sp + 389|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $67 = sp;
 $72 = sp + 388|0;
 $78 = sp + 52|0;
 $79 = sp + 48|0;
 $__t = sp + 28|0;
 $80 = sp + 24|0;
 $83 = sp + 12|0;
 $76 = $this;
 $77 = $__x;
 $84 = $76;
 $85 = ((($84)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $75 = $84;
 $87 = $75;
 $88 = ((($87)) + 12|0);
 $74 = $88;
 $89 = $74;
 $73 = $89;
 $90 = $73;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($86|0)==($91|0);
 do {
  if ($92) {
   $93 = ((($84)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = HEAP32[$84>>2]|0;
   $96 = ($94>>>0)>($95>>>0);
   if ($96) {
    $97 = ((($84)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$84>>2]|0;
    $100 = $98;
    $101 = $99;
    $102 = (($100) - ($101))|0;
    $103 = (($102|0) / 4)&-1;
    $__d = $103;
    $104 = $__d;
    $105 = (($104) + 1)|0;
    $106 = (($105|0) / 2)&-1;
    $__d = $106;
    $107 = ((($84)) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($84)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ((($84)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $__d;
    $114 = (0 - ($113))|0;
    $115 = (($112) + ($114<<2)|0);
    $51 = $108;
    $52 = $110;
    $53 = $115;
    $116 = $51;
    $50 = $116;
    $117 = $50;
    $118 = $52;
    $45 = $118;
    $119 = $45;
    $120 = $53;
    $46 = $120;
    $121 = $46;
    $47 = $117;
    $48 = $119;
    $49 = $121;
    $122 = $48;
    $123 = $47;
    $124 = $122;
    $125 = $123;
    $126 = (($124) - ($125))|0;
    $127 = (($126|0) / 4)&-1;
    $__n$i$i = $127;
    $128 = $49;
    $129 = $47;
    $130 = $__n$i$i;
    $131 = $130<<2;
    _memmove(($128|0),($129|0),($131|0))|0;
    $132 = $49;
    $133 = $__n$i$i;
    $134 = (($132) + ($133<<2)|0);
    $135 = ((($84)) + 8|0);
    HEAP32[$135>>2] = $134;
    $136 = $__d;
    $137 = ((($84)) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (0 - ($136))|0;
    $140 = (($138) + ($139<<2)|0);
    HEAP32[$137>>2] = $140;
    break;
   }
   $44 = $84;
   $141 = $44;
   $142 = ((($141)) + 12|0);
   $43 = $142;
   $143 = $43;
   $42 = $143;
   $144 = $42;
   $145 = HEAP32[$144>>2]|0;
   $146 = HEAP32[$84>>2]|0;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 4)&-1;
   $151 = $150<<1;
   HEAP32[$78>>2] = $151;
   HEAP32[$79>>2] = 1;
   $13 = $78;
   $14 = $79;
   $152 = $13;
   $153 = $14;
   ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
   $10 = $152;
   $11 = $153;
   $154 = $10;
   $155 = $11;
   $7 = $12;
   $8 = $154;
   $9 = $155;
   $156 = $8;
   $157 = HEAP32[$156>>2]|0;
   $158 = $9;
   $159 = HEAP32[$158>>2]|0;
   $160 = ($157>>>0)<($159>>>0);
   $161 = $11;
   $162 = $10;
   $163 = $160 ? $161 : $162;
   $164 = HEAP32[$163>>2]|0;
   $__c = $164;
   $165 = $__c;
   $166 = $__c;
   $167 = (($166>>>0) / 4)&-1;
   $2 = $84;
   $168 = $2;
   $169 = ((($168)) + 12|0);
   $1 = $169;
   $170 = $1;
   $0 = $170;
   $171 = $0;
   __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEEC2EjjS5_($__t,$165,$167,$171);
   $172 = ((($84)) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   $3 = $80;
   $4 = $173;
   $174 = $3;
   $175 = $4;
   HEAP32[$174>>2] = $175;
   $176 = ((($84)) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $5 = $83;
   $6 = $177;
   $178 = $5;
   $179 = $6;
   HEAP32[$178>>2] = $179;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$80>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$83>>2]|0;
   invoke_viii(440,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $180 = __THREW__; __THREW__ = 0;
   $181 = $180&1;
   if ($181) {
    $234 = ___cxa_find_matching_catch()|0;
    $235 = tempRet0;
    $81 = $234;
    $82 = $235;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t);
    $236 = $81;
    $237 = $82;
    ___resumeException($236|0);
    // unreachable;
   } else {
    $19 = $84;
    $20 = $__t;
    $182 = $19;
    $18 = $182;
    $183 = $18;
    $184 = HEAP32[$183>>2]|0;
    HEAP32[$__t$i3>>2] = $184;
    $185 = $20;
    $16 = $185;
    $186 = $16;
    $187 = HEAP32[$186>>2]|0;
    $188 = $19;
    HEAP32[$188>>2] = $187;
    $17 = $__t$i3;
    $189 = $17;
    $190 = HEAP32[$189>>2]|0;
    $191 = $20;
    HEAP32[$191>>2] = $190;
    $192 = ((($84)) + 4|0);
    $193 = ((($__t)) + 4|0);
    $24 = $192;
    $25 = $193;
    $194 = $24;
    $23 = $194;
    $195 = $23;
    $196 = HEAP32[$195>>2]|0;
    HEAP32[$__t$i2>>2] = $196;
    $197 = $25;
    $21 = $197;
    $198 = $21;
    $199 = HEAP32[$198>>2]|0;
    $200 = $24;
    HEAP32[$200>>2] = $199;
    $22 = $__t$i2;
    $201 = $22;
    $202 = HEAP32[$201>>2]|0;
    $203 = $25;
    HEAP32[$203>>2] = $202;
    $204 = ((($84)) + 8|0);
    $205 = ((($__t)) + 8|0);
    $29 = $204;
    $30 = $205;
    $206 = $29;
    $28 = $206;
    $207 = $28;
    $208 = HEAP32[$207>>2]|0;
    HEAP32[$__t$i1>>2] = $208;
    $209 = $30;
    $26 = $209;
    $210 = $26;
    $211 = HEAP32[$210>>2]|0;
    $212 = $29;
    HEAP32[$212>>2] = $211;
    $27 = $__t$i1;
    $213 = $27;
    $214 = HEAP32[$213>>2]|0;
    $215 = $30;
    HEAP32[$215>>2] = $214;
    $33 = $84;
    $216 = $33;
    $217 = ((($216)) + 12|0);
    $32 = $217;
    $218 = $32;
    $31 = $218;
    $219 = $31;
    $36 = $__t;
    $220 = $36;
    $221 = ((($220)) + 12|0);
    $35 = $221;
    $222 = $35;
    $34 = $222;
    $223 = $34;
    $40 = $219;
    $41 = $223;
    $224 = $40;
    $39 = $224;
    $225 = $39;
    $226 = HEAP32[$225>>2]|0;
    HEAP32[$__t$i>>2] = $226;
    $227 = $41;
    $37 = $227;
    $228 = $37;
    $229 = HEAP32[$228>>2]|0;
    $230 = $40;
    HEAP32[$230>>2] = $229;
    $38 = $__t$i;
    $231 = $38;
    $232 = HEAP32[$231>>2]|0;
    $233 = $41;
    HEAP32[$233>>2] = $232;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $56 = $84;
 $238 = $56;
 $239 = ((($238)) + 12|0);
 $55 = $239;
 $240 = $55;
 $54 = $240;
 $241 = $54;
 $242 = ((($84)) + 8|0);
 $243 = HEAP32[$242>>2]|0;
 $57 = $243;
 $244 = $57;
 $245 = $77;
 $58 = $245;
 $246 = $58;
 $69 = $241;
 $70 = $244;
 $71 = $246;
 $247 = $69;
 $248 = $70;
 $249 = $71;
 $68 = $249;
 $250 = $68;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $64 = $247;
 $65 = $248;
 $66 = $250;
 $251 = $64;
 $252 = $65;
 $253 = $66;
 $63 = $253;
 $254 = $63;
 $60 = $251;
 $61 = $252;
 $62 = $254;
 $255 = $61;
 $256 = $62;
 $59 = $256;
 $257 = $59;
 $258 = HEAP32[$257>>2]|0;
 HEAP32[$255>>2] = $258;
 $259 = ((($84)) + 8|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = ((($260)) + 4|0);
 HEAP32[$259>>2] = $261;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP11VideoPacketNS_9allocatorIS2_EEE10push_frontEOS2_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0;
 var $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 396|0;
 $$byval_copy = sp + 392|0;
 $8 = sp + 8|0;
 $11 = sp + 401|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $70 = sp;
 $75 = sp + 400|0;
 $81 = sp + 52|0;
 $82 = sp + 48|0;
 $__t = sp + 28|0;
 $83 = sp + 24|0;
 $86 = sp + 12|0;
 $79 = $this;
 $80 = $__x;
 $87 = $79;
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = HEAP32[$87>>2]|0;
 $91 = ($89|0)==($90|0);
 do {
  if ($91) {
   $92 = ((($87)) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $78 = $87;
   $94 = $78;
   $95 = ((($94)) + 12|0);
   $77 = $95;
   $96 = $77;
   $76 = $96;
   $97 = $76;
   $98 = HEAP32[$97>>2]|0;
   $99 = ($93>>>0)<($98>>>0);
   if ($99) {
    $56 = $87;
    $100 = $56;
    $101 = ((($100)) + 12|0);
    $55 = $101;
    $102 = $55;
    $54 = $102;
    $103 = $54;
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($87)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $104;
    $108 = $106;
    $109 = (($107) - ($108))|0;
    $110 = (($109|0) / 4)&-1;
    $__d = $110;
    $111 = $__d;
    $112 = (($111) + 1)|0;
    $113 = (($112|0) / 2)&-1;
    $__d = $113;
    $114 = ((($87)) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($87)) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($87)) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $__d;
    $121 = (($119) + ($120<<2)|0);
    $51 = $115;
    $52 = $117;
    $53 = $121;
    $122 = $51;
    $50 = $122;
    $123 = $50;
    $124 = $52;
    $45 = $124;
    $125 = $45;
    $126 = $53;
    $46 = $126;
    $127 = $46;
    $47 = $123;
    $48 = $125;
    $49 = $127;
    $128 = $48;
    $129 = $47;
    $130 = $128;
    $131 = $129;
    $132 = (($130) - ($131))|0;
    $133 = (($132|0) / 4)&-1;
    $__n$i$i = $133;
    $134 = $__n$i$i;
    $135 = $49;
    $136 = (0 - ($134))|0;
    $137 = (($135) + ($136<<2)|0);
    $49 = $137;
    $138 = $49;
    $139 = $47;
    $140 = $__n$i$i;
    $141 = $140<<2;
    _memmove(($138|0),($139|0),($141|0))|0;
    $142 = $49;
    $143 = ((($87)) + 4|0);
    HEAP32[$143>>2] = $142;
    $144 = $__d;
    $145 = ((($87)) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (($146) + ($144<<2)|0);
    HEAP32[$145>>2] = $147;
    break;
   }
   $18 = $87;
   $148 = $18;
   $149 = ((($148)) + 12|0);
   $17 = $149;
   $150 = $17;
   $16 = $150;
   $151 = $16;
   $152 = HEAP32[$151>>2]|0;
   $153 = HEAP32[$87>>2]|0;
   $154 = $152;
   $155 = $153;
   $156 = (($154) - ($155))|0;
   $157 = (($156|0) / 4)&-1;
   $158 = $157<<1;
   HEAP32[$81>>2] = $158;
   HEAP32[$82>>2] = 1;
   $9 = $81;
   $10 = $82;
   $159 = $9;
   $160 = $10;
   ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
   $6 = $159;
   $7 = $160;
   $161 = $6;
   $162 = $7;
   $3 = $8;
   $4 = $161;
   $5 = $162;
   $163 = $4;
   $164 = HEAP32[$163>>2]|0;
   $165 = $5;
   $166 = HEAP32[$165>>2]|0;
   $167 = ($164>>>0)<($166>>>0);
   $168 = $7;
   $169 = $6;
   $170 = $167 ? $168 : $169;
   $171 = HEAP32[$170>>2]|0;
   $__c = $171;
   $172 = $__c;
   $173 = $__c;
   $174 = (($173) + 3)|0;
   $175 = (($174>>>0) / 4)&-1;
   $2 = $87;
   $176 = $2;
   $177 = ((($176)) + 12|0);
   $1 = $177;
   $178 = $1;
   $0 = $178;
   $179 = $0;
   __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEEC2EjjS5_($__t,$172,$175,$179);
   $180 = ((($87)) + 4|0);
   $181 = HEAP32[$180>>2]|0;
   $12 = $83;
   $13 = $181;
   $182 = $12;
   $183 = $13;
   HEAP32[$182>>2] = $183;
   $184 = ((($87)) + 8|0);
   $185 = HEAP32[$184>>2]|0;
   $14 = $86;
   $15 = $185;
   $186 = $14;
   $187 = $15;
   HEAP32[$186>>2] = $187;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$83>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$86>>2]|0;
   invoke_viii(440,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $188 = __THREW__; __THREW__ = 0;
   $189 = $188&1;
   if ($189) {
    $242 = ___cxa_find_matching_catch()|0;
    $243 = tempRet0;
    $84 = $242;
    $85 = $243;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t);
    $244 = $84;
    $245 = $85;
    ___resumeException($244|0);
    // unreachable;
   } else {
    $22 = $87;
    $23 = $__t;
    $190 = $22;
    $21 = $190;
    $191 = $21;
    $192 = HEAP32[$191>>2]|0;
    HEAP32[$__t$i3>>2] = $192;
    $193 = $23;
    $19 = $193;
    $194 = $19;
    $195 = HEAP32[$194>>2]|0;
    $196 = $22;
    HEAP32[$196>>2] = $195;
    $20 = $__t$i3;
    $197 = $20;
    $198 = HEAP32[$197>>2]|0;
    $199 = $23;
    HEAP32[$199>>2] = $198;
    $200 = ((($87)) + 4|0);
    $201 = ((($__t)) + 4|0);
    $27 = $200;
    $28 = $201;
    $202 = $27;
    $26 = $202;
    $203 = $26;
    $204 = HEAP32[$203>>2]|0;
    HEAP32[$__t$i2>>2] = $204;
    $205 = $28;
    $24 = $205;
    $206 = $24;
    $207 = HEAP32[$206>>2]|0;
    $208 = $27;
    HEAP32[$208>>2] = $207;
    $25 = $__t$i2;
    $209 = $25;
    $210 = HEAP32[$209>>2]|0;
    $211 = $28;
    HEAP32[$211>>2] = $210;
    $212 = ((($87)) + 8|0);
    $213 = ((($__t)) + 8|0);
    $32 = $212;
    $33 = $213;
    $214 = $32;
    $31 = $214;
    $215 = $31;
    $216 = HEAP32[$215>>2]|0;
    HEAP32[$__t$i1>>2] = $216;
    $217 = $33;
    $29 = $217;
    $218 = $29;
    $219 = HEAP32[$218>>2]|0;
    $220 = $32;
    HEAP32[$220>>2] = $219;
    $30 = $__t$i1;
    $221 = $30;
    $222 = HEAP32[$221>>2]|0;
    $223 = $33;
    HEAP32[$223>>2] = $222;
    $36 = $87;
    $224 = $36;
    $225 = ((($224)) + 12|0);
    $35 = $225;
    $226 = $35;
    $34 = $226;
    $227 = $34;
    $39 = $__t;
    $228 = $39;
    $229 = ((($228)) + 12|0);
    $38 = $229;
    $230 = $38;
    $37 = $230;
    $231 = $37;
    $43 = $227;
    $44 = $231;
    $232 = $43;
    $42 = $232;
    $233 = $42;
    $234 = HEAP32[$233>>2]|0;
    HEAP32[$__t$i>>2] = $234;
    $235 = $44;
    $40 = $235;
    $236 = $40;
    $237 = HEAP32[$236>>2]|0;
    $238 = $43;
    HEAP32[$238>>2] = $237;
    $41 = $__t$i;
    $239 = $41;
    $240 = HEAP32[$239>>2]|0;
    $241 = $44;
    HEAP32[$241>>2] = $240;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $59 = $87;
 $246 = $59;
 $247 = ((($246)) + 12|0);
 $58 = $247;
 $248 = $58;
 $57 = $248;
 $249 = $57;
 $250 = ((($87)) + 4|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = ((($251)) + -4|0);
 $60 = $252;
 $253 = $60;
 $254 = $80;
 $61 = $254;
 $255 = $61;
 $72 = $249;
 $73 = $253;
 $74 = $255;
 $256 = $72;
 $257 = $73;
 $258 = $74;
 $71 = $258;
 $259 = $71;
 ;HEAP8[$70>>0]=HEAP8[$75>>0]|0;
 $67 = $256;
 $68 = $257;
 $69 = $259;
 $260 = $67;
 $261 = $68;
 $262 = $69;
 $66 = $262;
 $263 = $66;
 $63 = $260;
 $64 = $261;
 $65 = $263;
 $264 = $64;
 $265 = $65;
 $62 = $265;
 $266 = $62;
 $267 = HEAP32[$266>>2]|0;
 HEAP32[$264>>2] = $267;
 $268 = ((($87)) + 4|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = ((($269)) + -4|0);
 HEAP32[$268>>2] = $270;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEE9push_backEOS2_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 384|0;
 $$byval_copy = sp + 380|0;
 $12 = sp + 8|0;
 $15 = sp + 389|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $67 = sp;
 $72 = sp + 388|0;
 $78 = sp + 52|0;
 $79 = sp + 48|0;
 $__t = sp + 28|0;
 $80 = sp + 24|0;
 $83 = sp + 12|0;
 $76 = $this;
 $77 = $__x;
 $84 = $76;
 $85 = ((($84)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $75 = $84;
 $87 = $75;
 $88 = ((($87)) + 12|0);
 $74 = $88;
 $89 = $74;
 $73 = $89;
 $90 = $73;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($86|0)==($91|0);
 do {
  if ($92) {
   $93 = ((($84)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = HEAP32[$84>>2]|0;
   $96 = ($94>>>0)>($95>>>0);
   if ($96) {
    $97 = ((($84)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$84>>2]|0;
    $100 = $98;
    $101 = $99;
    $102 = (($100) - ($101))|0;
    $103 = (($102|0) / 4)&-1;
    $__d = $103;
    $104 = $__d;
    $105 = (($104) + 1)|0;
    $106 = (($105|0) / 2)&-1;
    $__d = $106;
    $107 = ((($84)) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($84)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ((($84)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $__d;
    $114 = (0 - ($113))|0;
    $115 = (($112) + ($114<<2)|0);
    $51 = $108;
    $52 = $110;
    $53 = $115;
    $116 = $51;
    $50 = $116;
    $117 = $50;
    $118 = $52;
    $45 = $118;
    $119 = $45;
    $120 = $53;
    $46 = $120;
    $121 = $46;
    $47 = $117;
    $48 = $119;
    $49 = $121;
    $122 = $48;
    $123 = $47;
    $124 = $122;
    $125 = $123;
    $126 = (($124) - ($125))|0;
    $127 = (($126|0) / 4)&-1;
    $__n$i$i = $127;
    $128 = $49;
    $129 = $47;
    $130 = $__n$i$i;
    $131 = $130<<2;
    _memmove(($128|0),($129|0),($131|0))|0;
    $132 = $49;
    $133 = $__n$i$i;
    $134 = (($132) + ($133<<2)|0);
    $135 = ((($84)) + 8|0);
    HEAP32[$135>>2] = $134;
    $136 = $__d;
    $137 = ((($84)) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (0 - ($136))|0;
    $140 = (($138) + ($139<<2)|0);
    HEAP32[$137>>2] = $140;
    break;
   }
   $44 = $84;
   $141 = $44;
   $142 = ((($141)) + 12|0);
   $43 = $142;
   $143 = $43;
   $42 = $143;
   $144 = $42;
   $145 = HEAP32[$144>>2]|0;
   $146 = HEAP32[$84>>2]|0;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 4)&-1;
   $151 = $150<<1;
   HEAP32[$78>>2] = $151;
   HEAP32[$79>>2] = 1;
   $13 = $78;
   $14 = $79;
   $152 = $13;
   $153 = $14;
   ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
   $10 = $152;
   $11 = $153;
   $154 = $10;
   $155 = $11;
   $7 = $12;
   $8 = $154;
   $9 = $155;
   $156 = $8;
   $157 = HEAP32[$156>>2]|0;
   $158 = $9;
   $159 = HEAP32[$158>>2]|0;
   $160 = ($157>>>0)<($159>>>0);
   $161 = $11;
   $162 = $10;
   $163 = $160 ? $161 : $162;
   $164 = HEAP32[$163>>2]|0;
   $__c = $164;
   $165 = $__c;
   $166 = $__c;
   $167 = (($166>>>0) / 4)&-1;
   $2 = $84;
   $168 = $2;
   $169 = ((($168)) + 12|0);
   $1 = $169;
   $170 = $1;
   $0 = $170;
   $171 = $0;
   $172 = ((($171)) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEEC2EjjS5_($__t,$165,$167,$173);
   $174 = ((($84)) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $3 = $80;
   $4 = $175;
   $176 = $3;
   $177 = $4;
   HEAP32[$176>>2] = $177;
   $178 = ((($84)) + 8|0);
   $179 = HEAP32[$178>>2]|0;
   $5 = $83;
   $6 = $179;
   $180 = $5;
   $181 = $6;
   HEAP32[$180>>2] = $181;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$80>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$83>>2]|0;
   invoke_viii(440,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $182 = __THREW__; __THREW__ = 0;
   $183 = $182&1;
   if ($183) {
    $236 = ___cxa_find_matching_catch()|0;
    $237 = tempRet0;
    $81 = $236;
    $82 = $237;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t);
    $238 = $81;
    $239 = $82;
    ___resumeException($238|0);
    // unreachable;
   } else {
    $19 = $84;
    $20 = $__t;
    $184 = $19;
    $18 = $184;
    $185 = $18;
    $186 = HEAP32[$185>>2]|0;
    HEAP32[$__t$i3>>2] = $186;
    $187 = $20;
    $16 = $187;
    $188 = $16;
    $189 = HEAP32[$188>>2]|0;
    $190 = $19;
    HEAP32[$190>>2] = $189;
    $17 = $__t$i3;
    $191 = $17;
    $192 = HEAP32[$191>>2]|0;
    $193 = $20;
    HEAP32[$193>>2] = $192;
    $194 = ((($84)) + 4|0);
    $195 = ((($__t)) + 4|0);
    $24 = $194;
    $25 = $195;
    $196 = $24;
    $23 = $196;
    $197 = $23;
    $198 = HEAP32[$197>>2]|0;
    HEAP32[$__t$i2>>2] = $198;
    $199 = $25;
    $21 = $199;
    $200 = $21;
    $201 = HEAP32[$200>>2]|0;
    $202 = $24;
    HEAP32[$202>>2] = $201;
    $22 = $__t$i2;
    $203 = $22;
    $204 = HEAP32[$203>>2]|0;
    $205 = $25;
    HEAP32[$205>>2] = $204;
    $206 = ((($84)) + 8|0);
    $207 = ((($__t)) + 8|0);
    $29 = $206;
    $30 = $207;
    $208 = $29;
    $28 = $208;
    $209 = $28;
    $210 = HEAP32[$209>>2]|0;
    HEAP32[$__t$i1>>2] = $210;
    $211 = $30;
    $26 = $211;
    $212 = $26;
    $213 = HEAP32[$212>>2]|0;
    $214 = $29;
    HEAP32[$214>>2] = $213;
    $27 = $__t$i1;
    $215 = $27;
    $216 = HEAP32[$215>>2]|0;
    $217 = $30;
    HEAP32[$217>>2] = $216;
    $33 = $84;
    $218 = $33;
    $219 = ((($218)) + 12|0);
    $32 = $219;
    $220 = $32;
    $31 = $220;
    $221 = $31;
    $36 = $__t;
    $222 = $36;
    $223 = ((($222)) + 12|0);
    $35 = $223;
    $224 = $35;
    $34 = $224;
    $225 = $34;
    $40 = $221;
    $41 = $225;
    $226 = $40;
    $39 = $226;
    $227 = $39;
    $228 = HEAP32[$227>>2]|0;
    HEAP32[$__t$i>>2] = $228;
    $229 = $41;
    $37 = $229;
    $230 = $37;
    $231 = HEAP32[$230>>2]|0;
    $232 = $40;
    HEAP32[$232>>2] = $231;
    $38 = $__t$i;
    $233 = $38;
    $234 = HEAP32[$233>>2]|0;
    $235 = $41;
    HEAP32[$235>>2] = $234;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $56 = $84;
 $240 = $56;
 $241 = ((($240)) + 12|0);
 $55 = $241;
 $242 = $55;
 $54 = $242;
 $243 = $54;
 $244 = ((($243)) + 4|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = ((($84)) + 8|0);
 $247 = HEAP32[$246>>2]|0;
 $57 = $247;
 $248 = $57;
 $249 = $77;
 $58 = $249;
 $250 = $58;
 $69 = $245;
 $70 = $248;
 $71 = $250;
 $251 = $69;
 $252 = $70;
 $253 = $71;
 $68 = $253;
 $254 = $68;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $64 = $251;
 $65 = $252;
 $66 = $254;
 $255 = $64;
 $256 = $65;
 $257 = $66;
 $63 = $257;
 $258 = $63;
 $60 = $255;
 $61 = $256;
 $62 = $258;
 $259 = $61;
 $260 = $62;
 $59 = $260;
 $261 = $59;
 $262 = HEAP32[$261>>2]|0;
 HEAP32[$259>>2] = $262;
 $263 = ((($84)) + 8|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = ((($264)) + 4|0);
 HEAP32[$263>>2] = $265;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEE10push_frontERKS2_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0;
 var $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 392|0;
 $$byval_copy = sp + 388|0;
 $8 = sp + 8|0;
 $11 = sp + 397|0;
 $__t$i3 = sp + 296|0;
 $__t$i2 = sp + 272|0;
 $__t$i1 = sp + 248|0;
 $__t$i = sp + 200|0;
 $69 = sp;
 $74 = sp + 396|0;
 $80 = sp + 52|0;
 $81 = sp + 48|0;
 $__t = sp + 28|0;
 $82 = sp + 24|0;
 $85 = sp + 12|0;
 $78 = $this;
 $79 = $__x;
 $86 = $78;
 $87 = ((($86)) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$86>>2]|0;
 $90 = ($88|0)==($89|0);
 do {
  if ($90) {
   $91 = ((($86)) + 8|0);
   $92 = HEAP32[$91>>2]|0;
   $77 = $86;
   $93 = $77;
   $94 = ((($93)) + 12|0);
   $76 = $94;
   $95 = $76;
   $75 = $95;
   $96 = $75;
   $97 = HEAP32[$96>>2]|0;
   $98 = ($92>>>0)<($97>>>0);
   if ($98) {
    $56 = $86;
    $99 = $56;
    $100 = ((($99)) + 12|0);
    $55 = $100;
    $101 = $55;
    $54 = $101;
    $102 = $54;
    $103 = HEAP32[$102>>2]|0;
    $104 = ((($86)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $103;
    $107 = $105;
    $108 = (($106) - ($107))|0;
    $109 = (($108|0) / 4)&-1;
    $__d = $109;
    $110 = $__d;
    $111 = (($110) + 1)|0;
    $112 = (($111|0) / 2)&-1;
    $__d = $112;
    $113 = ((($86)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($86)) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($86)) + 8|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $__d;
    $120 = (($118) + ($119<<2)|0);
    $51 = $114;
    $52 = $116;
    $53 = $120;
    $121 = $51;
    $50 = $121;
    $122 = $50;
    $123 = $52;
    $45 = $123;
    $124 = $45;
    $125 = $53;
    $46 = $125;
    $126 = $46;
    $47 = $122;
    $48 = $124;
    $49 = $126;
    $127 = $48;
    $128 = $47;
    $129 = $127;
    $130 = $128;
    $131 = (($129) - ($130))|0;
    $132 = (($131|0) / 4)&-1;
    $__n$i$i = $132;
    $133 = $__n$i$i;
    $134 = $49;
    $135 = (0 - ($133))|0;
    $136 = (($134) + ($135<<2)|0);
    $49 = $136;
    $137 = $49;
    $138 = $47;
    $139 = $__n$i$i;
    $140 = $139<<2;
    _memmove(($137|0),($138|0),($140|0))|0;
    $141 = $49;
    $142 = ((($86)) + 4|0);
    HEAP32[$142>>2] = $141;
    $143 = $__d;
    $144 = ((($86)) + 8|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + ($143<<2)|0);
    HEAP32[$144>>2] = $146;
    break;
   }
   $18 = $86;
   $147 = $18;
   $148 = ((($147)) + 12|0);
   $17 = $148;
   $149 = $17;
   $16 = $149;
   $150 = $16;
   $151 = HEAP32[$150>>2]|0;
   $152 = HEAP32[$86>>2]|0;
   $153 = $151;
   $154 = $152;
   $155 = (($153) - ($154))|0;
   $156 = (($155|0) / 4)&-1;
   $157 = $156<<1;
   HEAP32[$80>>2] = $157;
   HEAP32[$81>>2] = 1;
   $9 = $80;
   $10 = $81;
   $158 = $9;
   $159 = $10;
   ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
   $6 = $158;
   $7 = $159;
   $160 = $6;
   $161 = $7;
   $3 = $8;
   $4 = $160;
   $5 = $161;
   $162 = $4;
   $163 = HEAP32[$162>>2]|0;
   $164 = $5;
   $165 = HEAP32[$164>>2]|0;
   $166 = ($163>>>0)<($165>>>0);
   $167 = $7;
   $168 = $6;
   $169 = $166 ? $167 : $168;
   $170 = HEAP32[$169>>2]|0;
   $__c = $170;
   $171 = $__c;
   $172 = $__c;
   $173 = (($172) + 3)|0;
   $174 = (($173>>>0) / 4)&-1;
   $2 = $86;
   $175 = $2;
   $176 = ((($175)) + 12|0);
   $1 = $176;
   $177 = $1;
   $0 = $177;
   $178 = $0;
   $179 = ((($178)) + 4|0);
   $180 = HEAP32[$179>>2]|0;
   __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEEC2EjjS5_($__t,$171,$174,$180);
   $181 = ((($86)) + 4|0);
   $182 = HEAP32[$181>>2]|0;
   $12 = $82;
   $13 = $182;
   $183 = $12;
   $184 = $13;
   HEAP32[$183>>2] = $184;
   $185 = ((($86)) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $14 = $85;
   $15 = $186;
   $187 = $14;
   $188 = $15;
   HEAP32[$187>>2] = $188;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$82>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$85>>2]|0;
   invoke_viii(440,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $189 = __THREW__; __THREW__ = 0;
   $190 = $189&1;
   if ($190) {
    $243 = ___cxa_find_matching_catch()|0;
    $244 = tempRet0;
    $83 = $243;
    $84 = $244;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t);
    $245 = $83;
    $246 = $84;
    ___resumeException($245|0);
    // unreachable;
   } else {
    $22 = $86;
    $23 = $__t;
    $191 = $22;
    $21 = $191;
    $192 = $21;
    $193 = HEAP32[$192>>2]|0;
    HEAP32[$__t$i3>>2] = $193;
    $194 = $23;
    $19 = $194;
    $195 = $19;
    $196 = HEAP32[$195>>2]|0;
    $197 = $22;
    HEAP32[$197>>2] = $196;
    $20 = $__t$i3;
    $198 = $20;
    $199 = HEAP32[$198>>2]|0;
    $200 = $23;
    HEAP32[$200>>2] = $199;
    $201 = ((($86)) + 4|0);
    $202 = ((($__t)) + 4|0);
    $27 = $201;
    $28 = $202;
    $203 = $27;
    $26 = $203;
    $204 = $26;
    $205 = HEAP32[$204>>2]|0;
    HEAP32[$__t$i2>>2] = $205;
    $206 = $28;
    $24 = $206;
    $207 = $24;
    $208 = HEAP32[$207>>2]|0;
    $209 = $27;
    HEAP32[$209>>2] = $208;
    $25 = $__t$i2;
    $210 = $25;
    $211 = HEAP32[$210>>2]|0;
    $212 = $28;
    HEAP32[$212>>2] = $211;
    $213 = ((($86)) + 8|0);
    $214 = ((($__t)) + 8|0);
    $32 = $213;
    $33 = $214;
    $215 = $32;
    $31 = $215;
    $216 = $31;
    $217 = HEAP32[$216>>2]|0;
    HEAP32[$__t$i1>>2] = $217;
    $218 = $33;
    $29 = $218;
    $219 = $29;
    $220 = HEAP32[$219>>2]|0;
    $221 = $32;
    HEAP32[$221>>2] = $220;
    $30 = $__t$i1;
    $222 = $30;
    $223 = HEAP32[$222>>2]|0;
    $224 = $33;
    HEAP32[$224>>2] = $223;
    $36 = $86;
    $225 = $36;
    $226 = ((($225)) + 12|0);
    $35 = $226;
    $227 = $35;
    $34 = $227;
    $228 = $34;
    $39 = $__t;
    $229 = $39;
    $230 = ((($229)) + 12|0);
    $38 = $230;
    $231 = $38;
    $37 = $231;
    $232 = $37;
    $43 = $228;
    $44 = $232;
    $233 = $43;
    $42 = $233;
    $234 = $42;
    $235 = HEAP32[$234>>2]|0;
    HEAP32[$__t$i>>2] = $235;
    $236 = $44;
    $40 = $236;
    $237 = $40;
    $238 = HEAP32[$237>>2]|0;
    $239 = $43;
    HEAP32[$239>>2] = $238;
    $41 = $__t$i;
    $240 = $41;
    $241 = HEAP32[$240>>2]|0;
    $242 = $44;
    HEAP32[$242>>2] = $241;
    __ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $59 = $86;
 $247 = $59;
 $248 = ((($247)) + 12|0);
 $58 = $248;
 $249 = $58;
 $57 = $249;
 $250 = $57;
 $251 = ((($250)) + 4|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = ((($86)) + 4|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ((($254)) + -4|0);
 $60 = $255;
 $256 = $60;
 $257 = $79;
 $71 = $252;
 $72 = $256;
 $73 = $257;
 $258 = $71;
 $259 = $72;
 $260 = $73;
 $70 = $260;
 $261 = $70;
 ;HEAP8[$69>>0]=HEAP8[$74>>0]|0;
 $66 = $258;
 $67 = $259;
 $68 = $261;
 $262 = $66;
 $263 = $67;
 $264 = $68;
 $65 = $264;
 $265 = $65;
 $62 = $262;
 $63 = $263;
 $64 = $265;
 $266 = $63;
 $267 = $64;
 $61 = $267;
 $268 = $61;
 $269 = HEAP32[$268>>2]|0;
 HEAP32[$266>>2] = $269;
 $270 = ((($86)) + 4|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = ((($271)) + -4|0);
 HEAP32[$270>>2] = $272;
 STACKTOP = sp;return;
}
function __ZN12MemoryStream5readBILi1EhEERS_RT0_($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $out;
 $16 = $14;
 $17 = $15;
 $13 = $16;
 $18 = $13;
 $12 = $18;
 $19 = $12;
 $11 = $19;
 $20 = $11;
 $10 = $20;
 $21 = $10;
 $9 = $21;
 $22 = $9;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 & 1;
 $26 = ($25|0)!=(0);
 if ($26) {
  $3 = $19;
  $27 = $3;
  $2 = $27;
  $28 = $2;
  $1 = $28;
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $38 = $31;
 } else {
  $8 = $19;
  $32 = $8;
  $7 = $32;
  $33 = $7;
  $6 = $33;
  $34 = $6;
  $35 = ((($34)) + 1|0);
  $5 = $35;
  $36 = $5;
  $4 = $36;
  $37 = $4;
  $38 = $37;
 }
 $0 = $38;
 $39 = $0;
 $40 = ((($16)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + ($41)|0);
 $43 = ((($42)) + 1|0);
 $44 = ((($43)) + -1|0);
 __Z7reverseILi1EEvPhS0_($17,$44);
 $45 = ((($16)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 1)|0;
 HEAP32[$45>>2] = $47;
 STACKTOP = sp;return ($16|0);
}
function __ZN12AudioDecoder6decodeEiR12MemoryStream($this,$audioType,$data) {
 $this = $this|0;
 $audioType = $audioType|0;
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $samplesBytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = $this;
 $2 = $audioType;
 $3 = $data;
 $4 = $1;
 $samplesBytes = 0;
 $5 = $2;
 switch ($5|0) {
 case 10:  {
  $6 = $3;
  $7 = ((($4)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($4)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + ($10)|0);
  $12 = (__ZN12AudioDecoder9decodeAACER12MemoryStreamPh($4,$6,$11)|0);
  $samplesBytes = $12;
  break;
 }
 case 2:  {
  $13 = $3;
  $14 = ((($4)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($4)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + ($17)|0);
  $19 = ((($4)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($20) + ($21)|0);
  $23 = (__ZN12AudioDecoder9decodeMP3ER12MemoryStreamPhS2_($4,$13,$18,$22)|0);
  $samplesBytes = $23;
  break;
 }
 case 11:  {
  $24 = $3;
  $25 = ((($4)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($4)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + ($28)|0);
  $30 = (__ZN12AudioDecoder11decodeSpeexER12MemoryStreamPh($4,$24,$29)|0);
  $samplesBytes = $30;
  break;
 }
 default: {
 }
 }
 $31 = $samplesBytes;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $samplesBytes;
  $34 = ((($4)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($33))|0;
  HEAP32[$34>>2] = $36;
  $37 = ((($4)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$4>>2]|0;
  $40 = ($38|0)==($39|0);
  if ($40) {
   $41 = ((($4)) + 4|0);
   HEAP32[$41>>2] = 0;
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $42 = $$pre_trunc&1;
   STACKTOP = sp;return ($42|0);
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $42 = $$pre_trunc&1;
 STACKTOP = sp;return ($42|0);
}
function __ZN12AudioDecoder9decodeAACER12MemoryStreamPh($this,$input,$output) {
 $this = $this|0;
 $input = $input|0;
 $output = $output|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $input;
 $2 = $output;
 STACKTOP = sp;return 0;
}
function __ZN12AudioDecoder9decodeMP3ER12MemoryStreamPhS2_($this,$input,$output,$end) {
 $this = $this|0;
 $input = $input|0;
 $output = $output|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $left_ch = 0, $nchannels = 0, $nsamples = 0;
 var $pcm = 0, $ret = 0, $right_ch = 0, $sample = 0, $samplesBytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $input;
 $3 = $output;
 $4 = $end;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = $2;
 $8 = (__ZN10MP3Decoder6decodeER12MemoryStream($6,$7)|0);
 $ret = $8;
 $samplesBytes = 0;
 while(1) {
  $9 = $ret;
  $10 = ($9|0)!=(-1);
  if (!($10)) {
   label = 10;
   break;
  }
  $11 = ((($5)) + 12|0);
  $12 = (__ZN10MP3Decoder6getPCMEv($11)|0);
  $pcm = $12;
  $13 = $pcm;
  $14 = ((($13)) + 4|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $nchannels = $16;
  $17 = $pcm;
  $18 = ((($17)) + 6|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $nsamples = $20;
  $21 = $pcm;
  $22 = ((($21)) + 8|0);
  $left_ch = $22;
  $23 = $pcm;
  $24 = ((($23)) + 8|0);
  $25 = ((($24)) + 4608|0);
  $right_ch = $25;
  $26 = $nsamples;
  $27 = $26<<1;
  $28 = $nchannels;
  $29 = Math_imul($27, $28)|0;
  $30 = $samplesBytes;
  $31 = (($30) + ($29))|0;
  $samplesBytes = $31;
  while(1) {
   $32 = $nsamples;
   $33 = (($32) + -1)|0;
   $nsamples = $33;
   $34 = ($32|0)!=(0);
   if (!($34)) {
    break;
   }
   $35 = $left_ch;
   $36 = ((($35)) + 4|0);
   $left_ch = $36;
   $37 = HEAP32[$35>>2]|0;
   $38 = (__ZN12AudioDecoder5scaleEi($5,$37)|0);
   $sample = $38;
   $39 = $sample;
   $40 = $39 >> 0;
   $41 = $40 & 255;
   $42 = $41&255;
   $43 = $3;
   $44 = ((($43)) + 1|0);
   $3 = $44;
   HEAP8[$43>>0] = $42;
   $45 = $sample;
   $46 = $45 >> 8;
   $47 = $46 & 255;
   $48 = $47&255;
   $49 = $3;
   $50 = ((($49)) + 1|0);
   $3 = $50;
   HEAP8[$49>>0] = $48;
   $51 = $nchannels;
   $52 = ($51|0)==(2);
   if (!($52)) {
    continue;
   }
   $53 = $right_ch;
   $54 = ((($53)) + 4|0);
   $right_ch = $54;
   $55 = HEAP32[$53>>2]|0;
   $56 = (__ZN12AudioDecoder5scaleEi($5,$55)|0);
   $sample = $56;
   $57 = $sample;
   $58 = $57 >> 0;
   $59 = $58 & 255;
   $60 = $59&255;
   $61 = $3;
   $62 = ((($61)) + 1|0);
   $3 = $62;
   HEAP8[$61>>0] = $60;
   $63 = $sample;
   $64 = $63 >> 8;
   $65 = $64 & 255;
   $66 = $65&255;
   $67 = $3;
   $68 = ((($67)) + 1|0);
   $3 = $68;
   HEAP8[$67>>0] = $66;
  }
  $69 = $3;
  $70 = $4;
  $71 = ($69>>>0)>=($70>>>0);
  if ($71) {
   label = 8;
   break;
  }
  $73 = ((($5)) + 12|0);
  $74 = (__ZN10MP3Decoder6decodeEv($73)|0);
  $ret = $74;
 }
 if ((label|0) == 8) {
  $72 = $samplesBytes;
  $0 = $72;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 else if ((label|0) == 10) {
  $75 = $samplesBytes;
  $0 = $75;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function __ZN12AudioDecoder11decodeSpeexER12MemoryStreamPh($this,$input,$output) {
 $this = $this|0;
 $input = $input|0;
 $output = $output|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $input;
 $2 = $output;
 STACKTOP = sp;return 0;
}
function __ZN10MP3Decoder6decodeER12MemoryStream($this,$input) {
 $this = $this|0;
 $input = $input|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldSize = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = $this;
 $17 = $input;
 $18 = $16;
 $19 = ((($18)) + 22656|0);
 $20 = (__ZNK12MemoryStream4sizeEv($19)|0);
 $oldSize = $20;
 $21 = ((($18)) + 22656|0);
 $22 = ((($18)) + 22656|0);
 $23 = (__ZNK12MemoryStream4sizeEv($22)|0);
 $24 = $17;
 $25 = (__ZNK12MemoryStream6lengthEv($24)|0);
 $26 = (($23) + ($25))|0;
 $14 = $21;
 $15 = $26;
 $27 = $14;
 $28 = $15;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($27,$28,0);
 $29 = ((($18)) + 22656|0);
 $13 = $29;
 $30 = $13;
 $12 = $30;
 $31 = $12;
 $11 = $31;
 $32 = $11;
 $10 = $32;
 $33 = $10;
 $9 = $33;
 $34 = $9;
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 & 1;
 $38 = ($37|0)!=(0);
 if ($38) {
  $3 = $31;
  $39 = $3;
  $2 = $39;
  $40 = $2;
  $1 = $40;
  $41 = $1;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $50 = $43;
 } else {
  $8 = $31;
  $44 = $8;
  $7 = $44;
  $45 = $7;
  $6 = $45;
  $46 = $6;
  $47 = ((($46)) + 1|0);
  $5 = $47;
  $48 = $5;
  $4 = $48;
  $49 = $4;
  $50 = $49;
 }
 $0 = $50;
 $51 = $0;
 $52 = $oldSize;
 $53 = (($51) + ($52)|0);
 $54 = $17;
 $55 = (__ZN12MemoryStream5pointEv($54)|0);
 $56 = $17;
 $57 = (__ZNK12MemoryStream6lengthEv($56)|0);
 _memcpy(($53|0),($55|0),($57|0))|0;
 $58 = (__ZN10MP3Decoder6decodeEv($18)|0);
 STACKTOP = sp;return ($58|0);
}
function __ZN10MP3Decoder6getPCMEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 9332|0);
 $3 = ((($2)) + 4100|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN12AudioDecoder5scaleEi($this,$sample) {
 $this = $this|0;
 $sample = $sample|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sample;
 $2 = $1;
 $3 = (($2) + 4096)|0;
 $1 = $3;
 $4 = $1;
 $5 = ($4|0)>=(268435456);
 if ($5) {
  $1 = 268435455;
 } else {
  $6 = $1;
  $7 = ($6|0)<(-268435456);
  if ($7) {
   $1 = -268435456;
  }
 }
 $8 = $1;
 $9 = $8 >> 13;
 STACKTOP = sp;return ($9|0);
}
function __ZN10MP3Decoder6decodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $dataSize = 0, $data_bitlen = 0, $error = 0, $headerSize = 0, $mainSize = 0;
 var $mainStreamBitPtr = 0, $main_begin = 0, $nch = 0, $newSize = 0, $next_md_begin = 0, $oldSize = 0, $priv_bitlen = 0, $si = 0, $si_len = 0, $size = 0, $startPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp + 324|0;
 $si = sp + 76|0;
 $priv_bitlen = sp + 72|0;
 $data_bitlen = sp + 68|0;
 $2 = sp + 24|0;
 $dataSize = sp + 8|0;
 $mainStreamBitPtr = sp;
 $1 = $this;
 $5 = $1;
 $6 = ((($5)) + 22656|0);
 $7 = (__ZN12MemoryStream5pointEv($6)|0);
 $startPtr = $7;
 $8 = $startPtr;
 $9 = (__ZN10MP3Decoder12decodeHeaderEPKh($5,$8)|0);
 HEAP32[$size>>2] = $9;
 $10 = HEAP32[$size>>2]|0;
 $11 = ($10|0)==(-1);
 if ($11) {
  $0 = -1;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $12 = ((($5)) + 22656|0);
 (__ZN12MemoryStreamrSERKi($12,$size)|0);
 $13 = ((($5)) + 22656|0);
 $14 = (__ZNK12MemoryStream6lengthEv($13)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = ((($5)) + 22656|0);
  (__ZN12MemoryStreamlSERKi($16,$size)|0);
  $0 = -1;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $17 = (__ZN10MP3Decoder8checkCRCEv($5)|0);
 $si_len = $17;
 $next_md_begin = 0;
 $18 = ((($5)) + 64|0);
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 $22 = $21 ? 2 : 1;
 $nch = $22;
 $23 = ((($5)) + 28|0);
 $24 = $nch;
 $25 = ((($5)) + 64|0);
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 & 4096;
 $29 = (_III_sideinfo($23,$24,$28,$si,$data_bitlen,$priv_bitlen)|0);
 $error = $29;
 $30 = HEAP32[$priv_bitlen>>2]|0;
 $31 = ((($5)) + 64|0);
 $32 = ((($31)) + 28|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 | $30;
 HEAP32[$32>>2] = $34;
 $35 = ((($si)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($5)) + 64|0);
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 | $36;
 HEAP32[$38>>2] = $40;
 $41 = ((($5)) + 28|0);
 $42 = (_mad_bit_nextbyte($41)|0);
 $main_begin = $42;
 $43 = $main_begin;
 $44 = $startPtr;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $headerSize = $47;
 $48 = HEAP32[$size>>2]|0;
 $49 = $headerSize;
 $50 = (($48) - ($49))|0;
 $mainSize = $50;
 $51 = ((($5)) + 22656|0);
 $52 = (__ZN12MemoryStream5pointEv($51)|0);
 $53 = (__ZN10MP3Decoder19get_main_data_beginEPKh($5,$52)|0);
 $next_md_begin = $53;
 $54 = ((($5)) + 22672|0);
 $55 = (__ZNK12MemoryStream6lengthEv($54)|0);
 $oldSize = $55;
 $56 = ((($5)) + 22672|0);
 $57 = $main_begin;
 $58 = $mainSize;
 __ZN12MemoryStreamC2EPhj($2,$57,$58);
 __THREW__ = 0;
 (invoke_iii(445,($56|0),($2|0))|0);
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if ($60) {
  $70 = ___cxa_find_matching_catch()|0;
  $71 = tempRet0;
  $3 = $70;
  $4 = $71;
  __ZN12MemoryStreamD2Ev($2);
  $72 = $3;
  $73 = $4;
  ___resumeException($72|0);
  // unreachable;
 }
 __ZN12MemoryStreamD2Ev($2);
 $61 = ((($5)) + 22656|0);
 __ZN12MemoryStream13removeConsumeEv($61);
 $62 = ((($5)) + 22672|0);
 $63 = (__ZNK12MemoryStream6lengthEv($62)|0);
 $newSize = $63;
 $64 = $oldSize;
 $65 = HEAP32[$si>>2]|0;
 $66 = ($64>>>0)<($65>>>0);
 if (!($66)) {
  $67 = $newSize;
  $68 = $next_md_begin;
  $69 = ($67>>>0)<($68>>>0);
  if (!($69)) {
   $74 = $oldSize;
   $75 = HEAP32[$si>>2]|0;
   $76 = (($74) - ($75))|0;
   $77 = ((($5)) + 22672|0);
   $78 = ((($77)) + 12|0);
   HEAP32[$78>>2] = $76;
   $79 = $newSize;
   $80 = $next_md_begin;
   $81 = (($79) - ($80))|0;
   $82 = ((($5)) + 22672|0);
   $83 = ((($82)) + 12|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($81) - ($84))|0;
   HEAP32[$dataSize>>2] = $85;
   $86 = ((($5)) + 22672|0);
   $87 = (__ZN12MemoryStream5pointEv($86)|0);
   _mad_bit_init($mainStreamBitPtr,$87);
   $88 = ((($5)) + 64|0);
   $89 = $nch;
   (_III_decode($mainStreamBitPtr,$88,$si,$89)|0);
   $90 = ((($5)) + 9332|0);
   $91 = ((($5)) + 64|0);
   _mad_synth_frame($90,$91);
   $92 = ((($5)) + 22672|0);
   (__ZN12MemoryStreamrSERKi($92,$dataSize)|0);
   $93 = ((($5)) + 22672|0);
   __ZN12MemoryStream13removeConsumeEv($93);
   $0 = 0;
   $94 = $0;
   STACKTOP = sp;return ($94|0);
  }
 }
 $0 = -1;
 $94 = $0;
 STACKTOP = sp;return ($94|0);
}
function __ZN12MemoryStream5pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $14;
 $13 = $15;
 $16 = $13;
 $12 = $16;
 $17 = $12;
 $11 = $17;
 $18 = $11;
 $10 = $18;
 $19 = $10;
 $9 = $19;
 $20 = $9;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 & 1;
 $24 = ($23|0)!=(0);
 if ($24) {
  $3 = $17;
  $25 = $3;
  $2 = $25;
  $26 = $2;
  $1 = $26;
  $27 = $1;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $36 = $29;
 } else {
  $8 = $17;
  $30 = $8;
  $7 = $30;
  $31 = $7;
  $6 = $31;
  $32 = $6;
  $33 = ((($32)) + 1|0);
  $5 = $33;
  $34 = $5;
  $4 = $34;
  $35 = $4;
  $36 = $35;
 }
 $0 = $36;
 $37 = $0;
 $38 = ((($15)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + ($39)|0);
 STACKTOP = sp;return ($40|0);
}
function __ZN10MP3Decoder12decodeHeaderEPKh($this,$headerPtr) {
 $this = $this|0;
 $headerPtr = $headerPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $N = 0, $header = 0, $pad_slot = 0, $slots_per_frame = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $headerPtr;
 $3 = $1;
 $4 = ((($3)) + 64|0);
 $header = $4;
 $5 = ((($3)) + 28|0);
 $6 = $2;
 _mad_bit_init($5,$6);
 $7 = $2;
 $8 = ((($3)) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = $header;
 (_decode_header($9,$3)|0);
 $10 = $header;
 $11 = ((($10)) + 36|0);
 $12 = $header;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(1);
 if ($14) {
  $26 = 12;
 } else {
  $15 = $header;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(3);
  if ($17) {
   $18 = $header;
   $19 = ((($18)) + 28|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 & 4096;
   $22 = ($21|0)!=(0);
   $23 = $22;
  } else {
   $23 = 0;
  }
  $24 = $23 ? 18 : 36;
  $26 = $24;
 }
 $25 = $26<<5;
 $27 = $header;
 $28 = ((($27)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 _mad_timer_set($11,0,$25,$29);
 $30 = $header;
 $31 = ((($30)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = ((($3)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0);
  if ($36) {
   label = 9;
  } else {
   $37 = $header;
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(3);
   if ($39) {
    $40 = ((($3)) + 16|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41>>>0)>(640000);
    if ($42) {
     label = 9;
    }
   }
  }
  if ((label|0) == 9) {
   $43 = $header;
   $44 = (_free_bitrate($3,$43)|0);
   $45 = ($44|0)==(-1);
   if ($45) {
    $0 = -1;
    $95 = $0;
    STACKTOP = sp;return ($95|0);
   }
  }
  $46 = ((($3)) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $header;
  $49 = ((($48)) + 16|0);
  HEAP32[$49>>2] = $47;
  $50 = $header;
  $51 = ((($50)) + 28|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $52 | 1024;
  HEAP32[$51>>2] = $53;
 }
 $54 = $header;
 $55 = ((($54)) + 28|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 & 128;
 $58 = ($57|0)!=(0);
 $59 = $58 ? 1 : 0;
 $pad_slot = $59;
 $60 = $header;
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(1);
 $63 = $header;
 if ($62) {
  $64 = ((($63)) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65*12)|0;
  $67 = $header;
  $68 = ((($67)) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($66>>>0) / ($69>>>0))&-1;
  $71 = $pad_slot;
  $72 = (($70) + ($71))|0;
  $73 = $72<<2;
  $N = $73;
 } else {
  $74 = HEAP32[$63>>2]|0;
  $75 = ($74|0)==(3);
  if ($75) {
   $76 = $header;
   $77 = ((($76)) + 28|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 & 4096;
   $80 = ($79|0)!=(0);
   $81 = $80;
  } else {
   $81 = 0;
  }
  $82 = $81 ? 72 : 144;
  $slots_per_frame = $82;
  $83 = $slots_per_frame;
  $84 = $header;
  $85 = ((($84)) + 16|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = Math_imul($83, $86)|0;
  $88 = $header;
  $89 = ((($88)) + 20|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87>>>0) / ($90>>>0))&-1;
  $92 = $pad_slot;
  $93 = (($91) + ($92))|0;
  $N = $93;
 }
 $94 = $N;
 $0 = $94;
 $95 = $0;
 STACKTOP = sp;return ($95|0);
}
function __ZN12MemoryStreamlSERKi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($4))|0;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return ($2|0);
}
function __ZN10MP3Decoder8checkCRCEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $nch = 0, $si_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $2 = sp;
 $1 = $this;
 $3 = $1;
 $4 = ((($3)) + 64|0);
 $header = $4;
 $5 = ((($3)) + 64|0);
 $6 = ((($5)) + 9264|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (_calloc(1152,4)|0);
  $10 = ((($3)) + 64|0);
  $11 = ((($10)) + 9264|0);
  HEAP32[$11>>2] = $9;
  $12 = ((($3)) + 64|0);
  $13 = ((($12)) + 9264|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $16 = ((($3)) + 60|0);
   HEAP32[$16>>2] = 49;
   $0 = -1;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
 }
 $17 = $header;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 $21 = $20 ? 2 : 1;
 $nch = $21;
 $22 = $header;
 $23 = ((($22)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & 4096;
 $26 = ($25|0)!=(0);
 $27 = $nch;
 $28 = ($27|0)==(1);
 $29 = $28 ? 9 : 17;
 $30 = $28 ? 17 : 32;
 $31 = $26 ? $29 : $30;
 $si_len = $31;
 $32 = $header;
 $33 = ((($32)) + 28|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 16;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = ((($3)) + 28|0);
  ;HEAP32[$2>>2]=HEAP32[$37>>2]|0;HEAP32[$2+4>>2]=HEAP32[$37+4>>2]|0;
  $38 = $si_len;
  $39 = $38<<3;
  $40 = $header;
  $41 = ((($40)) + 24|0);
  $42 = HEAP16[$41>>1]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
  $43 = (_mad_bit_crc($$byval_copy,$39,$42)|0);
  $44 = $header;
  $45 = ((($44)) + 24|0);
  HEAP16[$45>>1] = $43;
  $46 = $header;
  $47 = ((($46)) + 24|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48&65535;
  $50 = $header;
  $51 = ((($50)) + 26|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52&65535;
  $54 = ($49|0)!=($53|0);
  if ($54) {
   $55 = ((($3)) + 64|0);
   $56 = ((($55)) + 44|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & 1;
   $59 = ($58|0)!=(0);
   if (!($59)) {
    $60 = ((($3)) + 60|0);
    HEAP32[$60>>2] = 513;
    $0 = -1;
    $62 = $0;
    STACKTOP = sp;return ($62|0);
   }
  }
 }
 $61 = $si_len;
 $0 = $61;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function __ZN10MP3Decoder19get_main_data_beginEPKh($this,$ptr) {
 $this = $this|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $md_begin = 0, $peek = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $peek = sp + 8|0;
 $0 = $this;
 $1 = $ptr;
 $md_begin = 0;
 $2 = $1;
 _mad_bit_init($peek,$2);
 $3 = (_mad_bit_read($peek,32)|0);
 $header = $3;
 $4 = $header;
 $5 = $4 & -1703936;
 $6 = ($5|0)==(-1966080);
 if (!($6)) {
  $15 = $md_begin;
  STACKTOP = sp;return ($15|0);
 }
 $7 = $header;
 $8 = $7 & 65536;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  _mad_bit_skip($peek,16);
 }
 $10 = $header;
 $11 = $10 & 524288;
 $12 = ($11|0)!=(0);
 $13 = $12 ? 9 : 8;
 $14 = (_mad_bit_read($peek,$13)|0);
 $md_begin = $14;
 $15 = $md_begin;
 STACKTOP = sp;return ($15|0);
}
function __ZN12MemoryStreamC2EPhj($this,$bytes,$size) {
 $this = $this|0;
 $bytes = $bytes|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $bytes;
 $11 = $size;
 $14 = $9;
 $8 = $14;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $5 = $17;
 $4 = $15;
 $18 = $4;
 $3 = $18;
 $19 = $3;
 $2 = $19;
 $20 = $2;
 $__a$i$i = $20;
 $__i$i$i = 0;
 while(1) {
  $21 = $__i$i$i;
  $22 = ($21>>>0)<(3);
  if (!($22)) {
   break;
  }
  $23 = $__i$i$i;
  $24 = $__a$i$i;
  $25 = (($24) + ($23<<2)|0);
  HEAP32[$25>>2] = 0;
  $26 = $__i$i$i;
  $27 = (($26) + 1)|0;
  $__i$i$i = $27;
 }
 $28 = ((($14)) + 12|0);
 HEAP32[$28>>2] = 0;
 $29 = $11;
 $0 = $14;
 $1 = $29;
 $30 = $0;
 $31 = $1;
 __THREW__ = 0;
 invoke_viii(446,($30|0),($31|0),0);
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if (!($33)) {
  __THREW__ = 0;
  $34 = (invoke_ii(447,($14|0))|0);
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if (!($36)) {
   $37 = $10;
   $38 = $11;
   _memcpy(($34|0),($37|0),($38|0))|0;
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch()|0;
 $40 = tempRet0;
 $12 = $39;
 $13 = $40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 $41 = $12;
 $42 = $13;
 ___resumeException($41|0);
 // unreachable;
}
function __ZN12MemoryStreamlsERKS_($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = $this;
 $27 = $i;
 $28 = $26;
 $29 = $27;
 $24 = $28;
 $25 = $29;
 $30 = $24;
 $31 = $25;
 $23 = $31;
 $32 = $23;
 $22 = $32;
 $33 = $22;
 $21 = $33;
 $34 = $21;
 $20 = $34;
 $35 = $20;
 $19 = $35;
 $36 = $19;
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38 & 1;
 $40 = ($39|0)!=(0);
 if ($40) {
  $13 = $33;
  $41 = $13;
  $12 = $41;
  $42 = $12;
  $11 = $42;
  $43 = $11;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $52 = $45;
 } else {
  $18 = $33;
  $46 = $18;
  $17 = $46;
  $47 = $17;
  $16 = $47;
  $48 = $16;
  $49 = ((($48)) + 1|0);
  $15 = $49;
  $50 = $15;
  $14 = $50;
  $51 = $14;
  $52 = $51;
 }
 $10 = $52;
 $53 = $10;
 $54 = $25;
 $9 = $54;
 $55 = $9;
 $8 = $55;
 $56 = $8;
 $7 = $56;
 $57 = $7;
 $6 = $57;
 $58 = $6;
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $60 & 1;
 $62 = ($61|0)!=(0);
 if ($62) {
  $2 = $55;
  $63 = $2;
  $1 = $63;
  $64 = $1;
  $0 = $64;
  $65 = $0;
  $66 = ((($65)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $74 = $67;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($30,$53,$74)|0);
  STACKTOP = sp;return ($28|0);
 } else {
  $5 = $55;
  $68 = $5;
  $4 = $68;
  $69 = $4;
  $3 = $69;
  $70 = $3;
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $72 >> 1;
  $74 = $73;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($30,$53,$74)|0);
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZN12MemoryStream13removeConsumeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = $this;
 $17 = $16;
 $18 = (__ZNK12MemoryStream6lengthEv($17)|0);
 $l = $18;
 $15 = $17;
 $19 = $15;
 $14 = $19;
 $20 = $14;
 $13 = $20;
 $21 = $13;
 $12 = $21;
 $22 = $12;
 $11 = $22;
 $23 = $11;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if ($27) {
  $5 = $20;
  $28 = $5;
  $4 = $28;
  $29 = $4;
  $3 = $29;
  $30 = $3;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $39 = $32;
 } else {
  $10 = $20;
  $33 = $10;
  $9 = $33;
  $34 = $9;
  $8 = $34;
  $35 = $8;
  $36 = ((($35)) + 1|0);
  $7 = $36;
  $37 = $7;
  $6 = $37;
  $38 = $6;
  $39 = $38;
 }
 $2 = $39;
 $40 = $2;
 $41 = (__ZN12MemoryStream5pointEv($17)|0);
 $42 = $l;
 _memmove(($40|0),($41|0),($42|0))|0;
 $43 = $l;
 $0 = $17;
 $1 = $43;
 $44 = $0;
 $45 = $1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($44,$45,0);
 $46 = ((($17)) + 12|0);
 HEAP32[$46>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNK12MemoryStream4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = $this;
 $12 = $11;
 $10 = $12;
 $13 = $10;
 $9 = $13;
 $14 = $9;
 $8 = $14;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 & 1;
 $21 = ($20|0)!=(0);
 if ($21) {
  $2 = $14;
  $22 = $2;
  $1 = $22;
  $23 = $1;
  $0 = $23;
  $24 = $0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $33 = $26;
  STACKTOP = sp;return ($33|0);
 } else {
  $5 = $14;
  $27 = $5;
  $4 = $27;
  $28 = $4;
  $3 = $28;
  $29 = $3;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 >> 1;
  $33 = $32;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERS7_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = $this;
 $27 = $__parent;
 $28 = $__k;
 $29 = $26;
 $24 = $29;
 $30 = $24;
 $23 = $30;
 $31 = $23;
 $32 = ((($31)) + 4|0);
 $22 = $32;
 $33 = $22;
 $21 = $33;
 $34 = $21;
 $20 = $34;
 $35 = $20;
 $19 = $35;
 $36 = $19;
 $37 = HEAP32[$36>>2]|0;
 $__nd = $37;
 $38 = $__nd;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  $18 = $29;
  $87 = $18;
  $88 = ((($87)) + 4|0);
  $17 = $88;
  $89 = $17;
  $16 = $89;
  $90 = $16;
  $15 = $90;
  $91 = $15;
  $14 = $91;
  $92 = $14;
  $93 = $27;
  HEAP32[$93>>2] = $92;
  $94 = $27;
  $95 = HEAP32[$94>>2]|0;
  $25 = $95;
  $96 = $25;
  STACKTOP = sp;return ($96|0);
 }
 while(1) {
  $2 = $29;
  $40 = $2;
  $41 = ((($40)) + 8|0);
  $1 = $41;
  $42 = $1;
  $0 = $42;
  $43 = $0;
  $3 = $43;
  $44 = $3;
  $45 = $28;
  $46 = $__nd;
  $47 = ((($46)) + 16|0);
  $4 = $44;
  $5 = $45;
  $6 = $47;
  $48 = $5;
  $49 = HEAP32[$48>>2]|0;
  $50 = $6;
  $51 = HEAP32[$50>>2]|0;
  $52 = ($49|0)<($51|0);
  if ($52) {
   $53 = $__nd;
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)!=(0|0);
   $56 = $__nd;
   if (!($55)) {
    label = 5;
    break;
   }
   $57 = HEAP32[$56>>2]|0;
   $__nd = $57;
   continue;
  }
  $9 = $29;
  $61 = $9;
  $62 = ((($61)) + 8|0);
  $8 = $62;
  $63 = $8;
  $7 = $63;
  $64 = $7;
  $10 = $64;
  $65 = $10;
  $66 = $__nd;
  $67 = ((($66)) + 16|0);
  $68 = $28;
  $11 = $65;
  $12 = $67;
  $13 = $68;
  $69 = $12;
  $70 = HEAP32[$69>>2]|0;
  $71 = $13;
  $72 = HEAP32[$71>>2]|0;
  $73 = ($70|0)<($72|0);
  $74 = $__nd;
  if (!($73)) {
   label = 10;
   break;
  }
  $75 = ((($74)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76|0)!=(0|0);
  $78 = $__nd;
  if (!($77)) {
   label = 9;
   break;
  }
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $__nd = $80;
 }
 if ((label|0) == 5) {
  $58 = $27;
  HEAP32[$58>>2] = $56;
  $59 = $27;
  $60 = HEAP32[$59>>2]|0;
  $25 = $60;
  $96 = $25;
  STACKTOP = sp;return ($96|0);
 }
 else if ((label|0) == 9) {
  $81 = $27;
  HEAP32[$81>>2] = $78;
  $82 = $27;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + 4|0);
  $25 = $84;
  $96 = $25;
  STACKTOP = sp;return ($96|0);
 }
 else if ((label|0) == 10) {
  $85 = $27;
  HEAP32[$85>>2] = $74;
  $86 = $27;
  $25 = $86;
  $96 = $25;
  STACKTOP = sp;return ($96|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyEOi($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__na = 0, $__tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp + 40|0;
 $18 = sp + 432|0;
 $30 = sp + 32|0;
 $33 = sp + 431|0;
 $41 = sp + 276|0;
 $42 = sp + 24|0;
 $45 = sp + 264|0;
 $46 = sp + 256|0;
 $47 = sp + 16|0;
 $52 = sp + 232|0;
 $67 = sp + 8|0;
 $70 = sp + 430|0;
 $81 = sp;
 $84 = sp + 429|0;
 $98 = sp + 428|0;
 $99 = sp + 48|0;
 $96 = $this;
 $97 = $__k;
 $101 = $96;
 $95 = $101;
 $102 = $95;
 $103 = ((($102)) + 4|0);
 $94 = $103;
 $104 = $94;
 $93 = $104;
 $105 = $93;
 $__na = $105;
 $$expand_i1_val = 0;
 HEAP8[$98>>0] = $$expand_i1_val;
 $106 = $__na;
 $59 = $106;
 $60 = 1;
 $107 = $59;
 $108 = $60;
 $56 = $107;
 $57 = $108;
 $58 = 0;
 $109 = $57;
 $110 = ($109*24)|0;
 $55 = $110;
 $111 = $55;
 $112 = (__Znwj($111)|0);
 $113 = $__na;
 $53 = $99;
 $54 = $113;
 $114 = $53;
 $115 = $54;
 HEAP32[$114>>2] = $115;
 $116 = ((($114)) + 4|0);
 HEAP8[$116>>0] = 0;
 $117 = ((($114)) + 5|0);
 HEAP8[$117>>0] = 0;
 $49 = $agg$result;
 $50 = $112;
 $51 = $99;
 $118 = $49;
 $119 = $50;
 $120 = $51;
 $48 = $120;
 $121 = $48;
 ;HEAP32[$52>>2]=HEAP32[$121>>2]|0;HEAP32[$52+4>>2]=HEAP32[$121+4>>2]|0;
 ;HEAP8[$47>>0]=HEAP8[$52>>0]|0;HEAP8[$47+1>>0]=HEAP8[$52+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$52+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$52+3>>0]|0;HEAP8[$47+4>>0]=HEAP8[$52+4>>0]|0;HEAP8[$47+5>>0]=HEAP8[$52+5>>0]|0;HEAP8[$47+6>>0]=HEAP8[$52+6>>0]|0;HEAP8[$47+7>>0]=HEAP8[$52+7>>0]|0;
 $44 = $118;
 HEAP32[$45>>2] = $119;
 $122 = $44;
 $43 = $45;
 $123 = $43;
 $124 = HEAP32[$123>>2]|0;
 $37 = $47;
 $125 = $37;
 ;HEAP32[$46>>2]=HEAP32[$125>>2]|0;HEAP32[$46+4>>2]=HEAP32[$125+4>>2]|0;
 ;HEAP8[$42>>0]=HEAP8[$46>>0]|0;HEAP8[$42+1>>0]=HEAP8[$46+1>>0]|0;HEAP8[$42+2>>0]=HEAP8[$46+2>>0]|0;HEAP8[$42+3>>0]=HEAP8[$46+3>>0]|0;HEAP8[$42+4>>0]=HEAP8[$46+4>>0]|0;HEAP8[$42+5>>0]=HEAP8[$46+5>>0]|0;HEAP8[$42+6>>0]=HEAP8[$46+6>>0]|0;HEAP8[$42+7>>0]=HEAP8[$46+7>>0]|0;
 $40 = $122;
 HEAP32[$41>>2] = $124;
 $126 = $40;
 $39 = $41;
 $127 = $39;
 $128 = HEAP32[$127>>2]|0;
 HEAP32[$126>>2] = $128;
 $129 = ((($126)) + 4|0);
 $38 = $42;
 $130 = $38;
 ;HEAP32[$129>>2]=HEAP32[$130>>2]|0;HEAP32[$129+4>>2]=HEAP32[$130+4>>2]|0;
 $131 = $__na;
 $2 = $agg$result;
 $132 = $2;
 $1 = $132;
 $133 = $1;
 $0 = $133;
 $134 = $0;
 $135 = HEAP32[$134>>2]|0;
 $136 = ((($135)) + 16|0);
 $3 = $136;
 $137 = $3;
 $138 = $97;
 $4 = $138;
 $139 = $4;
 $15 = $131;
 $16 = $137;
 $17 = $139;
 $140 = $15;
 $141 = $16;
 $142 = $17;
 $14 = $142;
 $143 = $14;
 ;HEAP8[$13>>0]=HEAP8[$18>>0]|0;
 $10 = $140;
 $11 = $141;
 $12 = $143;
 $144 = $10;
 $145 = $11;
 $146 = $12;
 $9 = $146;
 $147 = $9;
 $6 = $144;
 $7 = $145;
 $8 = $147;
 $148 = $7;
 $149 = $8;
 $5 = $149;
 $150 = $5;
 $151 = HEAP32[$150>>2]|0;
 HEAP32[$148>>2] = $151;
 $21 = $agg$result;
 $152 = $21;
 $20 = $152;
 $153 = $20;
 $19 = $153;
 $154 = $19;
 $155 = ((($154)) + 4|0);
 $156 = ((($155)) + 4|0);
 HEAP8[$156>>0] = 1;
 $157 = $__na;
 $24 = $agg$result;
 $158 = $24;
 $23 = $158;
 $159 = $23;
 $22 = $159;
 $160 = $22;
 $161 = HEAP32[$160>>2]|0;
 $162 = ((($161)) + 16|0);
 $163 = ((($162)) + 4|0);
 $25 = $163;
 $164 = $25;
 $31 = $157;
 $32 = $164;
 $165 = $31;
 $166 = $32;
 ;HEAP8[$30>>0]=HEAP8[$33>>0]|0;
 $28 = $165;
 $29 = $166;
 $167 = $28;
 $168 = $29;
 $26 = $167;
 $27 = $168;
 $169 = $27;
 HEAP32[$169>>2] = 0;
 $36 = $agg$result;
 $170 = $36;
 $35 = $170;
 $171 = $35;
 $34 = $171;
 $172 = $34;
 $173 = ((($172)) + 4|0);
 $174 = ((($173)) + 5|0);
 HEAP8[$174>>0] = 1;
 $$expand_i1_val2 = 1;
 HEAP8[$98>>0] = $$expand_i1_val2;
 $100 = 1;
 $$pre_trunc = HEAP8[$98>>0]|0;
 $175 = $$pre_trunc&1;
 if ($175) {
  STACKTOP = sp;return;
 }
 $92 = $agg$result;
 $176 = $92;
 $90 = $176;
 $91 = 0;
 $177 = $90;
 $89 = $177;
 $178 = $89;
 $88 = $178;
 $179 = $88;
 $180 = HEAP32[$179>>2]|0;
 $__tmp$i$i = $180;
 $181 = $91;
 $64 = $177;
 $182 = $64;
 $63 = $182;
 $183 = $63;
 HEAP32[$183>>2] = $181;
 $184 = $__tmp$i$i;
 $185 = ($184|0)!=(0|0);
 if (!($185)) {
  STACKTOP = sp;return;
 }
 $62 = $177;
 $186 = $62;
 $61 = $186;
 $187 = $61;
 $188 = ((($187)) + 4|0);
 $189 = $__tmp$i$i;
 $86 = $188;
 $87 = $189;
 $190 = $86;
 $191 = ((($190)) + 5|0);
 $192 = HEAP8[$191>>0]|0;
 $193 = $192&1;
 if ($193) {
  $194 = HEAP32[$190>>2]|0;
  $195 = $87;
  $196 = ((($195)) + 16|0);
  $197 = ((($196)) + 4|0);
  $85 = $197;
  $198 = $85;
  $82 = $194;
  $83 = $198;
  $199 = $82;
  $200 = $83;
  ;HEAP8[$81>>0]=HEAP8[$84>>0]|0;
  $79 = $199;
  $80 = $200;
 }
 $201 = ((($190)) + 4|0);
 $202 = HEAP8[$201>>0]|0;
 $203 = $202&1;
 if ($203) {
  $204 = HEAP32[$190>>2]|0;
  $205 = $87;
  $206 = ((($205)) + 16|0);
  $71 = $206;
  $207 = $71;
  $68 = $204;
  $69 = $207;
  $208 = $68;
  $209 = $69;
  ;HEAP8[$67>>0]=HEAP8[$70>>0]|0;
  $65 = $208;
  $66 = $209;
 }
 $210 = $87;
 $211 = ($210|0)!=(0|0);
 if (!($211)) {
  STACKTOP = sp;return;
 }
 $212 = HEAP32[$190>>2]|0;
 $213 = $87;
 $76 = $212;
 $77 = $213;
 $78 = 1;
 $214 = $76;
 $215 = $77;
 $216 = $78;
 $73 = $214;
 $74 = $215;
 $75 = $216;
 $217 = $74;
 $72 = $217;
 $218 = $72;
 __ZdlPv($218);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSF_SF_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = $this;
 $12 = $__parent;
 $13 = $__child;
 $14 = $__new_node;
 $15 = $11;
 $16 = $14;
 HEAP32[$16>>2] = 0;
 $17 = $14;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = $12;
 $20 = $14;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $14;
 $23 = $13;
 HEAP32[$23>>2] = $22;
 $10 = $15;
 $24 = $10;
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $6 = $15;
  $28 = $6;
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $0 = $15;
  $31 = $0;
  HEAP32[$31>>2] = $30;
 }
 $5 = $15;
 $32 = $5;
 $33 = ((($32)) + 4|0);
 $4 = $33;
 $34 = $4;
 $3 = $34;
 $35 = $3;
 $2 = $35;
 $36 = $2;
 $1 = $36;
 $37 = $1;
 $38 = HEAP32[$37>>2]|0;
 $39 = $13;
 $40 = HEAP32[$39>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($38,$40);
 $9 = $15;
 $41 = $9;
 $42 = ((($41)) + 8|0);
 $8 = $42;
 $43 = $8;
 $7 = $43;
 $44 = $7;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__y = 0, $__y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__root;
 $4 = $__x;
 $5 = $4;
 $6 = $3;
 $7 = ($5|0)==($6|0);
 $8 = $4;
 $9 = ((($8)) + 12|0);
 $10 = $7&1;
 HEAP8[$9>>0] = $10;
 while(1) {
  $11 = $4;
  $12 = $3;
  $13 = ($11|0)!=($12|0);
  if (!($13)) {
   label = 17;
   break;
  }
  $14 = $4;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&1;
  $20 = $19 ^ 1;
  if (!($20)) {
   label = 17;
   break;
  }
  $21 = $4;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $2 = $23;
  $24 = $2;
  $25 = $2;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($24|0)==($28|0);
  $30 = $4;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  if ($29) {
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $__y = $36;
   $37 = $__y;
   $38 = ($37|0)!=(0|0);
   if (!($38)) {
    label = 8;
    break;
   }
   $39 = $__y;
   $40 = ((($39)) + 12|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&1;
   if ($42) {
    label = 8;
    break;
   }
   $43 = $4;
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $4 = $45;
   $46 = $4;
   $47 = ((($46)) + 12|0);
   HEAP8[$47>>0] = 1;
   $48 = $4;
   $49 = ((($48)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $4 = $50;
   $51 = $4;
   $52 = $3;
   $53 = ($51|0)==($52|0);
   $54 = $4;
   $55 = ((($54)) + 12|0);
   $56 = $53&1;
   HEAP8[$55>>0] = $56;
   $57 = $__y;
   $58 = ((($57)) + 12|0);
   HEAP8[$58>>0] = 1;
   continue;
  } else {
   $81 = HEAP32[$34>>2]|0;
   $__y1 = $81;
   $82 = $__y1;
   $83 = ($82|0)!=(0|0);
   if (!($83)) {
    label = 14;
    break;
   }
   $84 = $__y1;
   $85 = ((($84)) + 12|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&1;
   if ($87) {
    label = 14;
    break;
   }
   $88 = $4;
   $89 = ((($88)) + 8|0);
   $90 = HEAP32[$89>>2]|0;
   $4 = $90;
   $91 = $4;
   $92 = ((($91)) + 12|0);
   HEAP8[$92>>0] = 1;
   $93 = $4;
   $94 = ((($93)) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $4 = $95;
   $96 = $4;
   $97 = $3;
   $98 = ($96|0)==($97|0);
   $99 = $4;
   $100 = ((($99)) + 12|0);
   $101 = $98&1;
   HEAP8[$100>>0] = $101;
   $102 = $__y1;
   $103 = ((($102)) + 12|0);
   HEAP8[$103>>0] = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $59 = $4;
  $1 = $59;
  $60 = $1;
  $61 = $1;
  $62 = ((($61)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$63>>2]|0;
  $65 = ($60|0)==($64|0);
  if (!($65)) {
   $66 = $4;
   $67 = ((($66)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $4 = $68;
   $69 = $4;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($69);
  }
  $70 = $4;
  $71 = ((($70)) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $4 = $72;
  $73 = $4;
  $74 = ((($73)) + 12|0);
  HEAP8[$74>>0] = 1;
  $75 = $4;
  $76 = ((($75)) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $4 = $77;
  $78 = $4;
  $79 = ((($78)) + 12|0);
  HEAP8[$79>>0] = 0;
  $80 = $4;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($80);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $104 = $4;
  $0 = $104;
  $105 = $0;
  $106 = $0;
  $107 = ((($106)) + 8|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = HEAP32[$108>>2]|0;
  $110 = ($105|0)==($109|0);
  if ($110) {
   $111 = $4;
   $112 = ((($111)) + 8|0);
   $113 = HEAP32[$112>>2]|0;
   $4 = $113;
   $114 = $4;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($114);
  }
  $115 = $4;
  $116 = ((($115)) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  $4 = $117;
  $118 = $4;
  $119 = ((($118)) + 12|0);
  HEAP8[$119>>0] = 1;
  $120 = $4;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $4 = $122;
  $123 = $4;
  $124 = ((($123)) + 12|0);
  HEAP8[$124>>0] = 0;
  $125 = $4;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($125);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $__x;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $__y = $4;
 $5 = $__y;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = $1;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 8|0);
  HEAP32[$17>>2] = $13;
 }
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__y;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $0 = $23;
 $24 = $0;
 $25 = $0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($24|0)==($28|0);
 $30 = $__y;
 $31 = $1;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 if ($29) {
  HEAP32[$33>>2] = $30;
  $35 = $1;
  $36 = $__y;
  HEAP32[$36>>2] = $35;
  $37 = $__y;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  HEAP32[$39>>2] = $37;
  STACKTOP = sp;return;
 } else {
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $30;
  $35 = $1;
  $36 = $__y;
  HEAP32[$36>>2] = $35;
  $37 = $__y;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  HEAP32[$39>>2] = $37;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $__x;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $__y = $3;
 $4 = $__y;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = $1;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 8|0);
  HEAP32[$14>>2] = $11;
 }
 $15 = $1;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $__y;
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $0 = $20;
 $21 = $0;
 $22 = $0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($21|0)==($25|0);
 $27 = $__y;
 $28 = $1;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 if ($26) {
  HEAP32[$30>>2] = $27;
  $32 = $1;
  $33 = $__y;
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $32;
  $35 = $__y;
  $36 = $1;
  $37 = ((($36)) + 8|0);
  HEAP32[$37>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $31 = ((($30)) + 4|0);
  HEAP32[$31>>2] = $27;
  $32 = $1;
  $33 = $__y;
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $32;
  $35 = $__y;
  $36 = $1;
  $37 = ((($36)) + 8|0);
  HEAP32[$37>>2] = $35;
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal19fromGenericWireTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_d($agg$result,$g) {
 $agg$result = $agg$result|0;
 $g = +$g;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $wt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $g;
 $1 = $0;
 $2 = (__ZN10emscripten8internal24GenericWireTypeConverterIPNS0_11BindingTypeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EE4fromEd($1)|0);
 $wt = $2;
 $3 = $wt;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg$result,$3);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal24GenericWireTypeConverterIPNS0_11BindingTypeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EE4fromEd($wt) {
 $wt = +$wt;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 $2 = (~~(($1))>>>0);
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32|0);
}
function __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal10getContextIM9NetStreamFvNS_3valEEEEPT_RKS6_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal10getContextIM9NetStreamKFNS_3valEvEEEPT_RKS6_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8|0);
}
function __ZNK10emscripten3val2asIiEET_v($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $destructors = 0, $dr = 0, $result = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $destructors = sp + 24|0;
 $dr = sp + 20|0;
 $0 = $this;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $7 = (+__emval_as(($5|0),($6|0),($destructors|0)));
 $result = $7;
 $8 = HEAP32[$destructors>>2]|0;
 __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE($dr,$8);
 $9 = $result;
 __THREW__ = 0;
 $10 = (invoke_id(437,(+$9))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $1 = $13;
  $2 = $14;
  __ZN10emscripten8internal17DestructorsRunnerD2Ev($dr);
  $15 = $1;
  $16 = $2;
  ___resumeException($15|0);
  // unreachable;
 } else {
  $3 = 1;
  __ZN10emscripten8internal17DestructorsRunnerD2Ev($dr);
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (536|0);
}
function __ZN10emscripten3valC2IRKiEEOT_($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $argv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp;
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = $2;
 $0 = $4;
 $5 = $0;
 __ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_($argv,$5);
 $6 = (__ZN10emscripten8internal6TypeIDIRKiE3getEv()|0);
 $7 = (__ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv($argv)|0);
 $8 = (__emval_take_value(($6|0),($7|0))|0);
 HEAP32[$3>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cursor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cursor = sp;
 $5 = $this;
 $6 = $args;
 $7 = $5;
 $4 = $7;
 $8 = $4;
 HEAP32[$cursor>>2] = $8;
 $9 = $6;
 $0 = $9;
 $10 = $0;
 $2 = $cursor;
 $3 = $10;
 $11 = $2;
 $12 = $3;
 $1 = $12;
 $13 = $1;
 $14 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($13)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($11,$14);
 $15 = $2;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($15);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKiE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (536|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9NetStreamEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6184|0);
}
function __ZN10emscripten8internal11BindingTypeIP9NetStreamE12fromWireTypeES3_($wt) {
 $wt = $wt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__15dequeI11VideoPacketNS_9allocatorIS1_EEE9pop_frontEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 129|0;
 $23 = sp;
 $26 = sp + 128|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 20|0);
 $29 = $34;
 $35 = $29;
 $28 = $35;
 $36 = $28;
 $__a = $36;
 $37 = $__a;
 $13 = $32;
 $38 = $13;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($32)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42>>>0) / 204)&-1;
 $44 = (($40) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($32)) + 16|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47>>>0) % 204)&-1;
 $49 = (($45) + (($48*20)|0)|0);
 $0 = $49;
 $50 = $0;
 $6 = $37;
 $7 = $50;
 $51 = $6;
 $52 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $51;
 $4 = $52;
 $53 = $3;
 $54 = $4;
 $1 = $53;
 $2 = $54;
 $55 = $2;
 __ZN11VideoPacketD2Ev($55);
 $11 = $32;
 $56 = $11;
 $57 = ((($56)) + 20|0);
 $10 = $57;
 $58 = $10;
 $9 = $58;
 $59 = $9;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + -1)|0;
 HEAP32[$59>>2] = $61;
 $62 = ((($32)) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[$62>>2] = $64;
 $65 = ($64>>>0)>=(408);
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = $__a;
 $12 = $32;
 $67 = $12;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$69>>2]|0;
 $18 = $66;
 $19 = $70;
 $20 = 204;
 $71 = $18;
 $72 = $19;
 $73 = $20;
 $15 = $71;
 $16 = $72;
 $17 = $73;
 $74 = $16;
 $14 = $74;
 $75 = $14;
 __ZdlPv($75);
 $27 = $32;
 $76 = $27;
 $77 = ((($76)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($78)) + 4|0);
 $24 = $76;
 $25 = $79;
 $80 = $24;
 $81 = $25;
 ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
 $21 = $80;
 $22 = $81;
 $82 = $21;
 $83 = $22;
 $84 = ((($82)) + 4|0);
 HEAP32[$84>>2] = $83;
 $85 = ((($32)) + 16|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) - 204)|0;
 HEAP32[$85>>2] = $87;
 STACKTOP = sp;return;
}
function __ZN10emscripten3val3setIA5_cA23_cEEvRKT_RKT0_($this,$key,$value) {
 $this = $this|0;
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $0 = $this;
 $1 = $key;
 $2 = $value;
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 __ZN10emscripten3valC2EPKc($3,$9);
 $10 = HEAP32[$3>>2]|0;
 $11 = $2;
 __THREW__ = 0;
 invoke_vii(423,($4|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $5 = $17;
  $6 = $18;
  __ZN10emscripten3valD2Ev($3);
  $21 = $5;
  $22 = $6;
  ___resumeException($21|0);
  // unreachable;
 }
 $14 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_viii(424,($8|0),($10|0),($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  __ZN10emscripten3valD2Ev($4);
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $5 = $19;
 $6 = $20;
 __ZN10emscripten3valD2Ev($4);
 __ZN10emscripten3valD2Ev($3);
 $21 = $5;
 $22 = $6;
 ___resumeException($21|0);
 // unreachable;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9NetStreamEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6192|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerI9NetStreamEENS_3valEiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6204|0);
}
function __ZN12AudioDecoderC2Ei($this,$bl) {
 $this = $this|0;
 $bl = $bl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $bl;
 $4 = $0;
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($4)) + 12|0);
 __ZN10MP3DecoderC2Ev($7);
 $8 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 $9 = (invoke_ii(448,($8|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $12 = ((($4)) + 8|0);
  HEAP32[$12>>2] = $9;
  __THREW__ = 0;
  HEAP32[$vararg_buffer>>2] = 67083;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  invoke_vii(372,0,($vararg_buffer|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   STACKTOP = sp;return;
  }
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 $2 = $15;
 $3 = $16;
 __ZN10MP3DecoderD2Ev($7);
 $17 = $2;
 $18 = $3;
 ___resumeException($17|0);
 // unreachable;
}
function __ZN10MP3DecoderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 22656|0);
 __ZN12MemoryStreamC2Ev($4);
 $5 = ((($3)) + 22672|0);
 __THREW__ = 0;
 invoke_vi(449,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $1 = $18;
  $2 = $19;
  __ZN12MemoryStreamD2Ev($4);
  $22 = $1;
  $23 = $2;
  ___resumeException($22|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(450,($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = ((($3)) + 64|0);
  __THREW__ = 0;
  invoke_vi(451,($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   $13 = ((($3)) + 9332|0);
   __THREW__ = 0;
   invoke_vi(452,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = 67098;
    invoke_vii(372,0,($vararg_buffer|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $1 = $20;
 $2 = $21;
 __ZN12MemoryStreamD2Ev($5);
 __ZN12MemoryStreamD2Ev($4);
 $22 = $1;
 $23 = $2;
 ___resumeException($22|0);
 // unreachable;
}
function __ZN12MemoryStreamC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = $this;
 $8 = $7;
 $6 = $8;
 $9 = $6;
 $5 = $9;
 $10 = $5;
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $2 = $9;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $__a$i$i = $14;
 $__i$i$i = 0;
 while(1) {
  $15 = $__i$i$i;
  $16 = ($15>>>0)<(3);
  if (!($16)) {
   break;
  }
  $17 = $__i$i$i;
  $18 = $__a$i$i;
  $19 = (($18) + ($17<<2)|0);
  HEAP32[$19>>2] = 0;
  $20 = $__i$i$i;
  $21 = (($20) + 1)|0;
  $__i$i$i = $21;
 }
 $22 = ((($8)) + 12|0);
 HEAP32[$22>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9NetStreamEENS_3valEbEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6224|0);
}
function __ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($wt) {
 $wt = $wt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $wt&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function __ZN12VideoDecoderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $disableOutputReordering = 0, $ret = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 100|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 104|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 108|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 124|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 128|0);
 HEAP8[$6>>0] = 0;
 $disableOutputReordering = 0;
 $7 = ((($1)) + 4|0);
 $8 = $disableOutputReordering;
 $9 = (_H264SwDecInit($7,$8)|0);
 $ret = $9;
 $10 = $ret;
 $11 = ($10|0)!=(0);
 if ($11) {
  HEAP32[$vararg_buffer>>2] = 67123;
  _emscripten_log(0,($vararg_buffer|0));
  STACKTOP = sp;return;
 } else {
  $12 = ((($1)) + 96|0);
  HEAP32[$12>>2] = 1;
  $13 = ((($1)) + 92|0);
  HEAP32[$13>>2] = 1;
  HEAP32[$vararg_buffer1>>2] = 67154;
  _emscripten_log(0,($vararg_buffer1|0));
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI9NetStreamEEOP10MonaClientEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6240|0);
}
function __ZN10emscripten8internal11BindingTypeIOP10MonaClientE12fromWireTypeES3_($wt) {
 $wt = $wt|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 $2 = (__ZN10emscripten8internal11BindingTypeIP10MonaClientE12fromWireTypeES3_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeIP9NetStreamE10toWireTypeES3_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN9NetStreamC2EP10MonaClient($this,$mc) {
 $this = $this|0;
 $mc = $mc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 76|0;
 $6 = sp + 64|0;
 $10 = sp + 48|0;
 $13 = sp + 36|0;
 $20 = sp + 8|0;
 $18 = $this;
 $19 = $mc;
 $23 = $18;
 HEAP32[$23>>2] = 0;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($23)) + 8|0);
 $26 = $19;
 HEAP32[$25>>2] = $26;
 $27 = ((($23)) + 12|0);
 HEAP8[$27>>0] = 1;
 $28 = ((($23)) + 14|0);
 HEAP8[$28>>0] = 0;
 $29 = ((($23)) + 16|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($23)) + 28|0);
 $17 = $30;
 $31 = $17;
 $16 = $31;
 $32 = $16;
 $15 = $32;
 $33 = $15;
 $14 = $33;
 $34 = $14;
 HEAP32[$34>>2] = 0;
 $35 = ((($34)) + 4|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($34)) + 8|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($34)) + 12|0);
 $12 = $37;
 HEAP32[$13>>2] = 0;
 $38 = $12;
 $11 = $13;
 $39 = $11;
 $40 = HEAP32[$39>>2]|0;
 $9 = $38;
 HEAP32[$10>>2] = $40;
 $41 = $9;
 $8 = $41;
 $7 = $10;
 $42 = $7;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = ((($33)) + 16|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($33)) + 20|0);
 $5 = $45;
 HEAP32[$6>>2] = 0;
 $46 = $5;
 $4 = $6;
 $47 = $4;
 $48 = HEAP32[$47>>2]|0;
 $2 = $46;
 HEAP32[$3>>2] = $48;
 $49 = $2;
 $1 = $49;
 $0 = $3;
 $50 = $0;
 $51 = HEAP32[$50>>2]|0;
 HEAP32[$49>>2] = $51;
 $52 = ((($23)) + 52|0);
 HEAP8[$52>>0] = 0;
 $53 = ((($23)) + 60|0);
 HEAP32[$53>>2] = 0;
 __THREW__ = 0;
 $54 = (invoke_i(453)|0);
 $55 = __THREW__; __THREW__ = 0;
 $56 = $55&1;
 if ($56) {
  $59 = ___cxa_find_matching_catch()|0;
  $60 = tempRet0;
  $21 = $59;
  $22 = $60;
  __ZNSt3__15queueI11VideoPacketNS_5dequeIS1_NS_9allocatorIS1_EEEEED2Ev($30);
  $63 = $21;
  $64 = $22;
  ___resumeException($63|0);
  // unreachable;
 }
 HEAP32[$20>>2] = $54;
 __THREW__ = 0;
 invoke_vii(454,($23|0),($20|0));
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if (!($58)) {
  __ZN10emscripten3valD2Ev($20);
  STACKTOP = sp;return;
 }
 $61 = ___cxa_find_matching_catch()|0;
 $62 = tempRet0;
 $21 = $61;
 $22 = $62;
 __ZN10emscripten3valD2Ev($20);
 __ZNSt3__15queueI11VideoPacketNS_5dequeIS1_NS_9allocatorIS1_EEEEED2Ev($30);
 $63 = $21;
 $64 = $22;
 ___resumeException($63|0);
 // unreachable;
}
function __ZN10emscripten3val4nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,(2));
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN9NetStream9onConnectEON10emscripten3valE($this,$result) {
 $this = $this|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $result;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK10emscripten3val6isNullEv($3)|0);
 if ($4) {
  $8 = 0;
 } else {
  $5 = $1;
  $6 = (__ZNK10emscripten3val2asIiEET_v($5)|0);
  $8 = $6;
 }
 $7 = ((($2)) + 20|0);
 HEAP32[$7>>2] = $8;
 $9 = ((($2)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 52|0);
 $12 = ((($2)) + 20|0);
 $13 = (__ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_($11,$12)|0);
 HEAP32[$13>>2] = $2;
 $14 = ((($2)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$vararg_buffer>>2] = 67168;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 _emscripten_log(0,($vararg_buffer|0));
 STACKTOP = sp;return;
}
function __ZNK10emscripten3val6isNullEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==((2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 24|0;
 $9 = sp + 339|0;
 $20 = sp + 16|0;
 $23 = sp + 338|0;
 $43 = sp + 8|0;
 $46 = sp + 337|0;
 $57 = sp;
 $60 = sp + 336|0;
 $__parent = sp + 56|0;
 $__h = sp + 36|0;
 $72 = $this;
 $73 = $__k;
 $76 = $72;
 $77 = $73;
 $78 = (__ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERS7_($76,$__parent,$77)|0);
 $__child = $78;
 $79 = $__child;
 $80 = HEAP32[$79>>2]|0;
 $__r = $80;
 $81 = $__child;
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(0|0);
 if (!($83)) {
  $188 = $__r;
  $189 = ((($188)) + 16|0);
  $190 = ((($189)) + 4|0);
  STACKTOP = sp;return ($190|0);
 }
 $84 = $73;
 __ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_($__h,$76,$84);
 $85 = HEAP32[$__parent>>2]|0;
 $86 = $__child;
 $71 = $__h;
 $87 = $71;
 $70 = $87;
 $88 = $70;
 $69 = $88;
 $89 = $69;
 $90 = HEAP32[$89>>2]|0;
 __THREW__ = 0;
 invoke_viiii(417,($76|0),($85|0),($86|0),($90|0));
 $91 = __THREW__; __THREW__ = 0;
 $92 = $91&1;
 if ($92) {
  $143 = ___cxa_find_matching_catch()|0;
  $144 = tempRet0;
  $74 = $143;
  $75 = $144;
  $68 = $__h;
  $145 = $68;
  $66 = $145;
  $67 = 0;
  $146 = $66;
  $65 = $146;
  $147 = $65;
  $64 = $147;
  $148 = $64;
  $149 = HEAP32[$148>>2]|0;
  $__tmp$i$i = $149;
  $150 = $67;
  $40 = $146;
  $151 = $40;
  $39 = $151;
  $152 = $39;
  HEAP32[$152>>2] = $150;
  $153 = $__tmp$i$i;
  $154 = ($153|0)!=(0|0);
  if (!($154)) {
   $191 = $74;
   $192 = $75;
   ___resumeException($191|0);
   // unreachable;
  }
  $38 = $146;
  $155 = $38;
  $37 = $155;
  $156 = $37;
  $157 = ((($156)) + 4|0);
  $158 = $__tmp$i$i;
  $62 = $157;
  $63 = $158;
  $159 = $62;
  $160 = ((($159)) + 5|0);
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&1;
  if ($162) {
   $163 = HEAP32[$159>>2]|0;
   $164 = $63;
   $165 = ((($164)) + 16|0);
   $166 = ((($165)) + 4|0);
   $61 = $166;
   $167 = $61;
   $58 = $163;
   $59 = $167;
   $168 = $58;
   $169 = $59;
   ;HEAP8[$57>>0]=HEAP8[$60>>0]|0;
   $55 = $168;
   $56 = $169;
  }
  $170 = ((($159)) + 4|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = $171&1;
  if ($172) {
   $173 = HEAP32[$159>>2]|0;
   $174 = $63;
   $175 = ((($174)) + 16|0);
   $47 = $175;
   $176 = $47;
   $44 = $173;
   $45 = $176;
   $177 = $44;
   $178 = $45;
   ;HEAP8[$43>>0]=HEAP8[$46>>0]|0;
   $41 = $177;
   $42 = $178;
  }
  $179 = $63;
  $180 = ($179|0)!=(0|0);
  if (!($180)) {
   $191 = $74;
   $192 = $75;
   ___resumeException($191|0);
   // unreachable;
  }
  $181 = HEAP32[$159>>2]|0;
  $182 = $63;
  $52 = $181;
  $53 = $182;
  $54 = 1;
  $183 = $52;
  $184 = $53;
  $185 = $54;
  $49 = $183;
  $50 = $184;
  $51 = $185;
  $186 = $50;
  $48 = $186;
  $187 = $48;
  __ZdlPv($187);
  $191 = $74;
  $192 = $75;
  ___resumeException($191|0);
  // unreachable;
 } else {
  $36 = $__h;
  $93 = $36;
  $35 = $93;
  $94 = $35;
  $34 = $94;
  $95 = $34;
  $96 = HEAP32[$95>>2]|0;
  $__t$i = $96;
  $33 = $93;
  $97 = $33;
  $32 = $97;
  $98 = $32;
  HEAP32[$98>>2] = 0;
  $99 = $__t$i;
  $__r = $99;
  $31 = $__h;
  $100 = $31;
  $29 = $100;
  $30 = 0;
  $101 = $29;
  $28 = $101;
  $102 = $28;
  $27 = $102;
  $103 = $27;
  $104 = HEAP32[$103>>2]|0;
  $__tmp$i$i1 = $104;
  $105 = $30;
  $3 = $101;
  $106 = $3;
  $2 = $106;
  $107 = $2;
  HEAP32[$107>>2] = $105;
  $108 = $__tmp$i$i1;
  $109 = ($108|0)!=(0|0);
  if (!($109)) {
   $188 = $__r;
   $189 = ((($188)) + 16|0);
   $190 = ((($189)) + 4|0);
   STACKTOP = sp;return ($190|0);
  }
  $1 = $101;
  $110 = $1;
  $0 = $110;
  $111 = $0;
  $112 = ((($111)) + 4|0);
  $113 = $__tmp$i$i1;
  $25 = $112;
  $26 = $113;
  $114 = $25;
  $115 = ((($114)) + 5|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&1;
  if ($117) {
   $118 = HEAP32[$114>>2]|0;
   $119 = $26;
   $120 = ((($119)) + 16|0);
   $121 = ((($120)) + 4|0);
   $24 = $121;
   $122 = $24;
   $21 = $118;
   $22 = $122;
   $123 = $21;
   $124 = $22;
   ;HEAP8[$20>>0]=HEAP8[$23>>0]|0;
   $18 = $123;
   $19 = $124;
  }
  $125 = ((($114)) + 4|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&1;
  if ($127) {
   $128 = HEAP32[$114>>2]|0;
   $129 = $26;
   $130 = ((($129)) + 16|0);
   $10 = $130;
   $131 = $10;
   $7 = $128;
   $8 = $131;
   $132 = $7;
   $133 = $8;
   ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
   $4 = $132;
   $5 = $133;
  }
  $134 = $26;
  $135 = ($134|0)!=(0|0);
  if (!($135)) {
   $188 = $__r;
   $189 = ((($188)) + 16|0);
   $190 = ((($189)) + 4|0);
   STACKTOP = sp;return ($190|0);
  }
  $136 = HEAP32[$114>>2]|0;
  $137 = $26;
  $15 = $136;
  $16 = $137;
  $17 = 1;
  $138 = $15;
  $139 = $16;
  $140 = $17;
  $12 = $138;
  $13 = $139;
  $14 = $140;
  $141 = $13;
  $11 = $141;
  $142 = $11;
  __ZdlPv($142);
  $188 = $__r;
  $189 = ((($188)) + 16|0);
  $190 = ((($189)) + 4|0);
  STACKTOP = sp;return ($190|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEE25__construct_node_with_keyERS7_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp + 56|0;
 $17 = sp + 555|0;
 $29 = sp + 48|0;
 $32 = sp + 554|0;
 $42 = sp + 396|0;
 $43 = sp + 40|0;
 $46 = sp + 384|0;
 $47 = sp + 376|0;
 $48 = sp + 32|0;
 $59 = sp + 320|0;
 $64 = sp + 300|0;
 $65 = sp + 24|0;
 $68 = sp + 288|0;
 $69 = sp + 280|0;
 $70 = sp + 16|0;
 $75 = sp + 256|0;
 $82 = sp + 8|0;
 $85 = sp + 553|0;
 $96 = sp;
 $99 = sp + 552|0;
 $__h = sp + 72|0;
 $121 = sp + 64|0;
 $119 = $this;
 $120 = $__k;
 $123 = $119;
 $118 = $123;
 $124 = $118;
 $125 = ((($124)) + 4|0);
 $117 = $125;
 $126 = $117;
 $116 = $126;
 $127 = $116;
 $__na = $127;
 $128 = $__na;
 $114 = $128;
 $115 = 1;
 $129 = $114;
 $130 = $115;
 $111 = $129;
 $112 = $130;
 $113 = 0;
 $131 = $112;
 $132 = ($131*24)|0;
 $110 = $132;
 $133 = $110;
 $134 = (__Znwj($133)|0);
 $135 = $__na;
 $108 = $121;
 $109 = $135;
 $136 = $108;
 $137 = $109;
 HEAP32[$136>>2] = $137;
 $138 = ((($136)) + 4|0);
 HEAP8[$138>>0] = 0;
 $139 = ((($136)) + 5|0);
 HEAP8[$139>>0] = 0;
 $72 = $__h;
 $73 = $134;
 $74 = $121;
 $140 = $72;
 $141 = $73;
 $142 = $74;
 $71 = $142;
 $143 = $71;
 ;HEAP32[$75>>2]=HEAP32[$143>>2]|0;HEAP32[$75+4>>2]=HEAP32[$143+4>>2]|0;
 ;HEAP8[$70>>0]=HEAP8[$75>>0]|0;HEAP8[$70+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$70+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$70+3>>0]=HEAP8[$75+3>>0]|0;HEAP8[$70+4>>0]=HEAP8[$75+4>>0]|0;HEAP8[$70+5>>0]=HEAP8[$75+5>>0]|0;HEAP8[$70+6>>0]=HEAP8[$75+6>>0]|0;HEAP8[$70+7>>0]=HEAP8[$75+7>>0]|0;
 $67 = $140;
 HEAP32[$68>>2] = $141;
 $144 = $67;
 $66 = $68;
 $145 = $66;
 $146 = HEAP32[$145>>2]|0;
 $60 = $70;
 $147 = $60;
 ;HEAP32[$69>>2]=HEAP32[$147>>2]|0;HEAP32[$69+4>>2]=HEAP32[$147+4>>2]|0;
 ;HEAP8[$65>>0]=HEAP8[$69>>0]|0;HEAP8[$65+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$69+3>>0]|0;HEAP8[$65+4>>0]=HEAP8[$69+4>>0]|0;HEAP8[$65+5>>0]=HEAP8[$69+5>>0]|0;HEAP8[$65+6>>0]=HEAP8[$69+6>>0]|0;HEAP8[$65+7>>0]=HEAP8[$69+7>>0]|0;
 $63 = $144;
 HEAP32[$64>>2] = $146;
 $148 = $63;
 $62 = $64;
 $149 = $62;
 $150 = HEAP32[$149>>2]|0;
 HEAP32[$148>>2] = $150;
 $151 = ((($148)) + 4|0);
 $61 = $65;
 $152 = $61;
 ;HEAP32[$151>>2]=HEAP32[$152>>2]|0;HEAP32[$151+4>>2]=HEAP32[$152+4>>2]|0;
 $153 = $__na;
 $2 = $__h;
 $154 = $2;
 $1 = $154;
 $155 = $1;
 $0 = $155;
 $156 = $0;
 $157 = HEAP32[$156>>2]|0;
 $158 = ((($157)) + 16|0);
 $3 = $158;
 $159 = $3;
 $160 = $120;
 $14 = $153;
 $15 = $159;
 $16 = $160;
 $161 = $14;
 $162 = $15;
 $163 = $16;
 $13 = $163;
 $164 = $13;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 $9 = $161;
 $10 = $162;
 $11 = $164;
 $165 = $9;
 $166 = $10;
 $167 = $11;
 $8 = $167;
 $168 = $8;
 $5 = $165;
 $6 = $166;
 $7 = $168;
 $169 = $6;
 $170 = $7;
 $4 = $170;
 $171 = $4;
 $172 = HEAP32[$171>>2]|0;
 HEAP32[$169>>2] = $172;
 $20 = $__h;
 $173 = $20;
 $19 = $173;
 $174 = $19;
 $18 = $174;
 $175 = $18;
 $176 = ((($175)) + 4|0);
 $177 = ((($176)) + 4|0);
 HEAP8[$177>>0] = 1;
 $178 = $__na;
 $23 = $__h;
 $179 = $23;
 $22 = $179;
 $180 = $22;
 $21 = $180;
 $181 = $21;
 $182 = HEAP32[$181>>2]|0;
 $183 = ((($182)) + 16|0);
 $184 = ((($183)) + 4|0);
 $24 = $184;
 $185 = $24;
 $30 = $178;
 $31 = $185;
 $186 = $30;
 $187 = $31;
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
 $27 = $186;
 $28 = $187;
 $188 = $27;
 $189 = $28;
 $25 = $188;
 $26 = $189;
 $190 = $26;
 HEAP32[$190>>2] = 0;
 $35 = $__h;
 $191 = $35;
 $34 = $191;
 $192 = $34;
 $33 = $192;
 $193 = $33;
 $194 = ((($193)) + 4|0);
 $195 = ((($194)) + 5|0);
 HEAP8[$195>>0] = 1;
 $36 = $__h;
 $196 = $36;
 $57 = $agg$result;
 $58 = $196;
 $197 = $57;
 $198 = $58;
 $56 = $198;
 $199 = $56;
 $55 = $199;
 $200 = $55;
 $54 = $200;
 $201 = $54;
 $202 = HEAP32[$201>>2]|0;
 $__t$i$i = $202;
 $53 = $199;
 $203 = $53;
 $52 = $203;
 $204 = $52;
 HEAP32[$204>>2] = 0;
 $205 = $__t$i$i;
 $206 = $58;
 $51 = $206;
 $207 = $51;
 $50 = $207;
 $208 = $50;
 $49 = $208;
 $209 = $49;
 $210 = ((($209)) + 4|0);
 $37 = $210;
 $211 = $37;
 ;HEAP32[$59>>2]=HEAP32[$211>>2]|0;HEAP32[$59+4>>2]=HEAP32[$211+4>>2]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;HEAP8[$48+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$59+3>>0]|0;HEAP8[$48+4>>0]=HEAP8[$59+4>>0]|0;HEAP8[$48+5>>0]=HEAP8[$59+5>>0]|0;HEAP8[$48+6>>0]=HEAP8[$59+6>>0]|0;HEAP8[$48+7>>0]=HEAP8[$59+7>>0]|0;
 $45 = $197;
 HEAP32[$46>>2] = $205;
 $212 = $45;
 $44 = $46;
 $213 = $44;
 $214 = HEAP32[$213>>2]|0;
 $38 = $48;
 $215 = $38;
 ;HEAP32[$47>>2]=HEAP32[$215>>2]|0;HEAP32[$47+4>>2]=HEAP32[$215+4>>2]|0;
 ;HEAP8[$43>>0]=HEAP8[$47>>0]|0;HEAP8[$43+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$43+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$43+3>>0]=HEAP8[$47+3>>0]|0;HEAP8[$43+4>>0]=HEAP8[$47+4>>0]|0;HEAP8[$43+5>>0]=HEAP8[$47+5>>0]|0;HEAP8[$43+6>>0]=HEAP8[$47+6>>0]|0;HEAP8[$43+7>>0]=HEAP8[$47+7>>0]|0;
 $41 = $212;
 HEAP32[$42>>2] = $214;
 $216 = $41;
 $40 = $42;
 $217 = $40;
 $218 = HEAP32[$217>>2]|0;
 HEAP32[$216>>2] = $218;
 $219 = ((($216)) + 4|0);
 $39 = $43;
 $220 = $39;
 ;HEAP32[$219>>2]=HEAP32[$220>>2]|0;HEAP32[$219+4>>2]=HEAP32[$220+4>>2]|0;
 $122 = 1;
 $107 = $__h;
 $221 = $107;
 $105 = $221;
 $106 = 0;
 $222 = $105;
 $104 = $222;
 $223 = $104;
 $103 = $223;
 $224 = $103;
 $225 = HEAP32[$224>>2]|0;
 $__tmp$i$i1 = $225;
 $226 = $106;
 $79 = $222;
 $227 = $79;
 $78 = $227;
 $228 = $78;
 HEAP32[$228>>2] = $226;
 $229 = $__tmp$i$i1;
 $230 = ($229|0)!=(0|0);
 if (!($230)) {
  STACKTOP = sp;return;
 }
 $77 = $222;
 $231 = $77;
 $76 = $231;
 $232 = $76;
 $233 = ((($232)) + 4|0);
 $234 = $__tmp$i$i1;
 $101 = $233;
 $102 = $234;
 $235 = $101;
 $236 = ((($235)) + 5|0);
 $237 = HEAP8[$236>>0]|0;
 $238 = $237&1;
 if ($238) {
  $239 = HEAP32[$235>>2]|0;
  $240 = $102;
  $241 = ((($240)) + 16|0);
  $242 = ((($241)) + 4|0);
  $100 = $242;
  $243 = $100;
  $97 = $239;
  $98 = $243;
  $244 = $97;
  $245 = $98;
  ;HEAP8[$96>>0]=HEAP8[$99>>0]|0;
  $94 = $244;
  $95 = $245;
 }
 $246 = ((($235)) + 4|0);
 $247 = HEAP8[$246>>0]|0;
 $248 = $247&1;
 if ($248) {
  $249 = HEAP32[$235>>2]|0;
  $250 = $102;
  $251 = ((($250)) + 16|0);
  $86 = $251;
  $252 = $86;
  $83 = $249;
  $84 = $252;
  $253 = $83;
  $254 = $84;
  ;HEAP8[$82>>0]=HEAP8[$85>>0]|0;
  $80 = $253;
  $81 = $254;
 }
 $255 = $102;
 $256 = ($255|0)!=(0|0);
 if (!($256)) {
  STACKTOP = sp;return;
 }
 $257 = HEAP32[$235>>2]|0;
 $258 = $102;
 $91 = $257;
 $92 = $258;
 $93 = 1;
 $259 = $91;
 $260 = $92;
 $261 = $93;
 $88 = $259;
 $89 = $260;
 $90 = $261;
 $262 = $89;
 $87 = $262;
 $263 = $87;
 __ZdlPv($263);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11LightTypeIDIPK9NetStreamE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (168|0);
}
function __ZN10emscripten8internal11LightTypeIDIP9NetStreamE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (144|0);
}
function __ZN10emscripten8internal11LightTypeIDI9NetStreamE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (160|0);
}
function __ZN10emscripten8internal14getLightTypeIDI9NetStreamEEPKvRKT_($value) {
 $value = $value|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 STACKTOP = sp;return (160|0);
}
function _mad_bit_init($bitptr,$byte) {
 $bitptr = $bitptr|0;
 $byte = $byte|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$bitptr>>2] = $byte;
 $0 = ((($bitptr)) + 4|0);
 HEAP16[$0>>1] = 0;
 $1 = ((($bitptr)) + 6|0);
 HEAP16[$1>>1] = 8;
 return;
}
function _mad_bit_length($begin,$end) {
 $begin = $begin|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($begin)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = HEAP32[$end>>2]|0;
 $4 = HEAP32[$begin>>2]|0;
 $5 = ((($4)) + 1|0);
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 << 3;
 $10 = ((($end)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($2) + 8)|0;
 $14 = (($13) - ($12))|0;
 $15 = (($14) + ($9))|0;
 return ($15|0);
}
function _mad_bit_nextbyte($bitptr) {
 $bitptr = $bitptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bitptr)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(8);
 $3 = HEAP32[$bitptr>>2]|0;
 $4 = ((($3)) + 1|0);
 $5 = $2 ? $3 : $4;
 return ($5|0);
}
function _mad_bit_skip($bitptr,$len) {
 $bitptr = $bitptr|0;
 $len = $len|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $len >>> 3;
 $1 = HEAP32[$bitptr>>2]|0;
 $2 = (($1) + ($0)|0);
 HEAP32[$bitptr>>2] = $2;
 $3 = $len & 7;
 $4 = ((($bitptr)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($6) - ($3))|0;
 $8 = $7&65535;
 HEAP16[$4>>1] = $8;
 $9 = $7 & 65535;
 $10 = ($9>>>0)>(8);
 if ($10) {
  $$sum = (($0) + 1)|0;
  $11 = (($1) + ($$sum)|0);
  HEAP32[$bitptr>>2] = $11;
  $12 = (($7) + 8)|0;
  $13 = $12&65535;
  HEAP16[$4>>1] = $13;
  $14 = $13;$17 = $11;
 } else {
  $14 = $8;$17 = $2;
 }
 $15 = ($14&65535)<(8);
 if (!($15)) {
  return;
 }
 $16 = HEAP8[$17>>0]|0;
 $18 = $16&255;
 $19 = ((($bitptr)) + 4|0);
 HEAP16[$19>>1] = $18;
 return;
}
function _mad_bit_read($bitptr,$len) {
 $bitptr = $bitptr|0;
 $len = $len|0;
 var $$0$lcssa = 0, $$01 = 0, $$02 = 0, $$lcssa = 0, $$lcssa10 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value$0$lcssa = 0, $value$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bitptr)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(8);
 if ($2) {
  $3 = HEAP32[$bitptr>>2]|0;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ((($bitptr)) + 4|0);
  HEAP16[$6>>1] = $5;
  $$pre$phiZ2D = $6;$10 = $5;
 } else {
  $$phi$trans$insert = ((($bitptr)) + 4|0);
  $$pre = HEAP16[$$phi$trans$insert>>1]|0;
  $$pre$phiZ2D = $$phi$trans$insert;$10 = $$pre;
 }
 $7 = $1&65535;
 $8 = ($7>>>0)>($len>>>0);
 $9 = $10&65535;
 $11 = 1 << $7;
 $12 = (($11) + 65535)|0;
 $13 = $12 & $9;
 if ($8) {
  $14 = (($7) - ($len))|0;
  $15 = $13 >>> $14;
  $16 = $14&65535;
  HEAP16[$0>>1] = $16;
  $$01 = $15;
  return ($$01|0);
 }
 $17 = (($len) - ($7))|0;
 $18 = HEAP32[$bitptr>>2]|0;
 $19 = ((($18)) + 1|0);
 HEAP32[$bitptr>>2] = $19;
 HEAP16[$0>>1] = 8;
 $20 = ($17>>>0)>(7);
 if ($20) {
  $21 = (($len) - ($7))|0;
  $$02 = $17;$24 = $19;$value$03 = $13;
  while(1) {
   $22 = $value$03 << 8;
   $23 = ((($24)) + 1|0);
   HEAP32[$bitptr>>2] = $23;
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = $26 | $22;
   $28 = (($$02) + -8)|0;
   $29 = ($28>>>0)>(7);
   if ($29) {
    $$02 = $28;$24 = $23;$value$03 = $27;
   } else {
    $$lcssa = $23;$$lcssa10 = $27;
    break;
   }
  }
  $30 = $21 & 7;
  $$0$lcssa = $30;$33 = $$lcssa;$value$0$lcssa = $$lcssa10;
 } else {
  $$0$lcssa = $17;$33 = $19;$value$0$lcssa = $13;
 }
 $31 = ($$0$lcssa|0)==(0);
 if ($31) {
  $$01 = $value$0$lcssa;
  return ($$01|0);
 }
 $32 = HEAP8[$33>>0]|0;
 $34 = $32&255;
 HEAP16[$$pre$phiZ2D>>1] = $34;
 $35 = $value$0$lcssa << $$0$lcssa;
 $36 = $32&255;
 $37 = (8 - ($$0$lcssa))|0;
 $38 = $36 >>> $37;
 $39 = $38 | $35;
 $40 = $37&65535;
 HEAP16[$0>>1] = $40;
 $$01 = $39;
 return ($$01|0);
}
function _mad_bit_crc($bitptr,$len,$init) {
 $bitptr = $bitptr|0;
 $len = $len|0;
 $init = $init|0;
 var $$ = 0, $$0$lcssa = 0, $$0$lcssa$i = 0, $$0$lcssa$i10 = 0, $$0$lcssa$i22 = 0, $$0$lcssa$i34 = 0, $$0$lcssa$i46 = 0, $$01$i = 0, $$01$i11 = 0, $$01$i23 = 0, $$01$i35 = 0, $$01$i47 = 0, $$02$i = 0, $$02$i19 = 0, $$02$i31 = 0, $$02$i43 = 0, $$02$i7 = 0, $$060 = 0, $$1$ph = 0, $$in = 0;
 var $$lcssa = 0, $$lcssa112 = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$masked = 0, $$phi$trans$insert = 0, $$phi$trans$insert$i13 = 0, $$phi$trans$insert$i25 = 0, $$phi$trans$insert$i37 = 0, $$phi$trans$insert86 = 0, $$pre = 0, $$pre$i = 0, $$pre$i14 = 0, $$pre$i2 = 0, $$pre$i26 = 0, $$pre$i38 = 0, $$pre$phi$i1695Z2D = 0, $$pre$phi$i2893Z2D = 0;
 var $$pre$phi$i4091Z2D = 0, $$pre$phi89Z2D = 0, $$pre$phiZ2D = 0, $$pre84 = 0, $$pre87 = 0, $$pre88 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $crc$0$lcssa = 0, $crc$059 = 0, $crc$1 = 0, $crc$2 = 0, $crc$3$lcssa = 0, $crc$3$ph = 0, $crc$358 = 0, $scevgep$sum = 0, $scevgep77 = 0, $scevgep78 = 0, $scevgep79 = 0, $scevgep80 = 0, $scevgep81$sum = 0, $scevgep82 = 0, $value$0$lcssa$i = 0;
 var $value$0$lcssa$i21 = 0, $value$0$lcssa$i33 = 0, $value$0$lcssa$i45 = 0, $value$0$lcssa$i9 = 0, $value$03$i = 0, $value$03$i18 = 0, $value$03$i30 = 0, $value$03$i42 = 0, $value$03$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $init&65535;
 $1 = ($len>>>0)>(31);
 if ($1) {
  $2 = ((($bitptr)) + 6|0);
  $3 = ((($bitptr)) + 4|0);
  $$pre = HEAP16[$2>>1]|0;
  $$060 = $len;$4 = $$pre;$crc$059 = $0;
  while(1) {
   $5 = ($4<<16>>16)==(8);
   if ($5) {
    $6 = HEAP32[$bitptr>>2]|0;
    $7 = HEAP8[$6>>0]|0;
    $8 = $7&255;
    HEAP16[$3>>1] = $8;
    $9 = $4&65535;
    $10 = $7&255;
    $11 = 1 << $9;
    $12 = (($11) + 65535)|0;
    $13 = $10 & $12;
    $24 = 8;$311 = $13;
    label = 7;
   } else {
    $$pre$i = HEAP16[$3>>1]|0;
    $14 = $4&65535;
    $15 = ($4&65535)>(32);
    $16 = $$pre$i&65535;
    $17 = 1 << $14;
    $18 = (($17) + 65535)|0;
    $19 = $16 & $18;
    if ($15) {
     $20 = (($14) + -32)|0;
     $21 = $19 >>> $20;
     $22 = $20&65535;
     HEAP16[$2>>1] = $22;
     $$01$i = $21;$312 = $22;
    } else {
     $24 = $14;$311 = $19;
     label = 7;
    }
   }
   if ((label|0) == 7) {
    label = 0;
    $23 = (32 - ($24))|0;
    $25 = HEAP32[$bitptr>>2]|0;
    $26 = ((($25)) + 1|0);
    HEAP32[$bitptr>>2] = $26;
    HEAP16[$2>>1] = 8;
    $27 = ($23>>>0)>(7);
    if ($27) {
     $28 = (24 - ($24))|0;
     $29 = $28 >>> 3;
     $$02$i = $23;$32 = $26;$value$03$i = $311;
     while(1) {
      $30 = $value$03$i << 8;
      $31 = ((($32)) + 1|0);
      HEAP32[$bitptr>>2] = $31;
      $33 = HEAP8[$32>>0]|0;
      $34 = $33&255;
      $35 = $34 | $30;
      $36 = (($$02$i) + -8)|0;
      $37 = ($36>>>0)>(7);
      if ($37) {
       $$02$i = $36;$32 = $31;$value$03$i = $35;
      } else {
       $$lcssa115 = $35;
       break;
      }
     }
     $scevgep81$sum = (($29) + 2)|0;
     $scevgep82 = (($25) + ($scevgep81$sum)|0);
     $38 = $23 & 7;
     $$0$lcssa$i = $38;$41 = $scevgep82;$value$0$lcssa$i = $$lcssa115;
    } else {
     $$0$lcssa$i = $23;$41 = $26;$value$0$lcssa$i = $311;
    }
    $39 = ($$0$lcssa$i|0)==(0);
    if ($39) {
     $$01$i = $value$0$lcssa$i;$312 = 8;
    } else {
     $40 = HEAP8[$41>>0]|0;
     $42 = $40&255;
     HEAP16[$3>>1] = $42;
     $43 = $value$0$lcssa$i << $$0$lcssa$i;
     $44 = $40&255;
     $45 = (8 - ($$0$lcssa$i))|0;
     $46 = $44 >>> $45;
     $47 = $46 | $43;
     $48 = $45&65535;
     HEAP16[$2>>1] = $48;
     $$01$i = $47;$312 = $48;
    }
   }
   $49 = $crc$059 << 8;
   $50 = $crc$059 >>> 8;
   $51 = $$01$i >>> 24;
   $$masked = $50 & 255;
   $52 = $51 ^ $$masked;
   $53 = (54780 + ($52<<1)|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $56 = $55 ^ $49;
   $57 = $56 << 8;
   $58 = $56 >>> 8;
   $59 = $$01$i >>> 16;
   $60 = $58 ^ $59;
   $61 = $60 & 255;
   $62 = (54780 + ($61<<1)|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = $63&65535;
   $65 = $57 ^ $64;
   $66 = $65 << 8;
   $67 = $65 ^ $$01$i;
   $68 = $67 >>> 8;
   $69 = $68 & 255;
   $70 = (54780 + ($69<<1)|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71&65535;
   $73 = $66 ^ $72;
   $74 = $73 << 8;
   $75 = $73 >>> 8;
   $76 = $75 ^ $$01$i;
   $77 = $76 & 255;
   $78 = (54780 + ($77<<1)|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79&65535;
   $81 = $74 ^ $80;
   $82 = (($$060) + -32)|0;
   $83 = ($82>>>0)>(31);
   if ($83) {
    $$060 = $82;$4 = $312;$crc$059 = $81;
   } else {
    $$lcssa116 = $81;
    break;
   }
  }
  $84 = $len & 31;
  $$0$lcssa = $84;$crc$0$lcssa = $$lcssa116;
 } else {
  $$0$lcssa = $len;$crc$0$lcssa = $0;
 }
 $85 = $$0$lcssa >>> 3;
 switch ($85|0) {
 case 3:  {
  $86 = $crc$0$lcssa << 8;
  $87 = $crc$0$lcssa >>> 8;
  $88 = ((($bitptr)) + 6|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = ($89<<16>>16)==(8);
  if ($90) {
   $91 = HEAP32[$bitptr>>2]|0;
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = ((($bitptr)) + 4|0);
   HEAP16[$94>>1] = $93;
   $95 = $89&65535;
   $96 = $92&255;
   $97 = 1 << $95;
   $98 = (($97) + 65535)|0;
   $99 = $96 & $98;
   $$pre$phi$i4091Z2D = $94;$110 = 8;$313 = $99;
   label = 22;
  } else {
   $$phi$trans$insert$i37 = ((($bitptr)) + 4|0);
   $$pre$i38 = HEAP16[$$phi$trans$insert$i37>>1]|0;
   $100 = $89&65535;
   $101 = ($89&65535)>(8);
   $102 = $$pre$i38&65535;
   $103 = 1 << $100;
   $104 = (($103) + 65535)|0;
   $105 = $102 & $104;
   if ($101) {
    $106 = (($100) + -8)|0;
    $107 = $105 >>> $106;
    $108 = $106&65535;
    HEAP16[$88>>1] = $108;
    $$01$i47 = $107;$314 = $108;
   } else {
    $$pre$phi$i4091Z2D = $$phi$trans$insert$i37;$110 = $100;$313 = $105;
    label = 22;
   }
  }
  if ((label|0) == 22) {
   $109 = (8 - ($110))|0;
   $111 = HEAP32[$bitptr>>2]|0;
   $112 = ((($111)) + 1|0);
   HEAP32[$bitptr>>2] = $112;
   HEAP16[$88>>1] = 8;
   $113 = ($109>>>0)>(7);
   if ($113) {
    $114 = (0 - ($110))|0;
    $115 = $114 >>> 3;
    $116 = (($115) + 2)|0;
    $$02$i43 = $109;$119 = $112;$value$03$i42 = $313;
    while(1) {
     $117 = $value$03$i42 << 8;
     $118 = ((($119)) + 1|0);
     HEAP32[$bitptr>>2] = $118;
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = $121 | $117;
     $123 = (($$02$i43) + -8)|0;
     $124 = ($123>>>0)>(7);
     if ($124) {
      $$02$i43 = $123;$119 = $118;$value$03$i42 = $122;
     } else {
      $$lcssa114 = $122;
      break;
     }
    }
    $scevgep80 = (($111) + ($116)|0);
    $125 = $109 & 7;
    $$0$lcssa$i46 = $125;$128 = $scevgep80;$value$0$lcssa$i45 = $$lcssa114;
   } else {
    $$0$lcssa$i46 = $109;$128 = $112;$value$0$lcssa$i45 = $313;
   }
   $126 = ($$0$lcssa$i46|0)==(0);
   if ($126) {
    $$01$i47 = $value$0$lcssa$i45;$314 = 8;
   } else {
    $127 = HEAP8[$128>>0]|0;
    $129 = $127&255;
    HEAP16[$$pre$phi$i4091Z2D>>1] = $129;
    $130 = $value$0$lcssa$i45 << $$0$lcssa$i46;
    $131 = $127&255;
    $132 = (8 - ($$0$lcssa$i46))|0;
    $133 = $131 >>> $132;
    $134 = $133 | $130;
    $135 = $132&65535;
    HEAP16[$88>>1] = $135;
    $$01$i47 = $134;$314 = $135;
   }
  }
  $136 = $$01$i47 ^ $87;
  $137 = $136 & 255;
  $138 = (54780 + ($137<<1)|0);
  $139 = HEAP16[$138>>1]|0;
  $140 = $139&65535;
  $141 = $140 ^ $86;
  $$pre$phiZ2D = $88;$144 = $314;$crc$1 = $141;
  label = 29;
  break;
 }
 case 2:  {
  $$phi$trans$insert = ((($bitptr)) + 6|0);
  $$pre84 = HEAP16[$$phi$trans$insert>>1]|0;
  $$pre$phiZ2D = $$phi$trans$insert;$144 = $$pre84;$crc$1 = $crc$0$lcssa;
  label = 29;
  break;
 }
 case 1:  {
  $$phi$trans$insert86 = ((($bitptr)) + 6|0);
  $$pre87 = HEAP16[$$phi$trans$insert86>>1]|0;
  $$pre$phi89Z2D = $$phi$trans$insert86;$199 = $$pre87;$crc$2 = $crc$0$lcssa;
  label = 40;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$crc$3$ph = $crc$0$lcssa;
 }
 }
 if ((label|0) == 29) {
  $142 = $crc$1 << 8;
  $143 = $crc$1 >>> 8;
  $145 = ($144<<16>>16)==(8);
  if ($145) {
   $146 = HEAP32[$bitptr>>2]|0;
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = ((($bitptr)) + 4|0);
   HEAP16[$149>>1] = $148;
   $150 = $144&65535;
   $151 = $147&255;
   $152 = 1 << $150;
   $153 = (($152) + 65535)|0;
   $154 = $151 & $153;
   $$pre$phi$i2893Z2D = $149;$165 = 8;$315 = $154;
   label = 33;
  } else {
   $$phi$trans$insert$i25 = ((($bitptr)) + 4|0);
   $$pre$i26 = HEAP16[$$phi$trans$insert$i25>>1]|0;
   $155 = $144&65535;
   $156 = ($144&65535)>(8);
   $157 = $$pre$i26&65535;
   $158 = 1 << $155;
   $159 = (($158) + 65535)|0;
   $160 = $157 & $159;
   if ($156) {
    $161 = (($155) + -8)|0;
    $162 = $160 >>> $161;
    $163 = $161&65535;
    HEAP16[$$pre$phiZ2D>>1] = $163;
    $$01$i35 = $162;$316 = $163;
   } else {
    $$pre$phi$i2893Z2D = $$phi$trans$insert$i25;$165 = $155;$315 = $160;
    label = 33;
   }
  }
  if ((label|0) == 33) {
   $164 = (8 - ($165))|0;
   $166 = HEAP32[$bitptr>>2]|0;
   $167 = ((($166)) + 1|0);
   HEAP32[$bitptr>>2] = $167;
   HEAP16[$$pre$phiZ2D>>1] = 8;
   $168 = ($164>>>0)>(7);
   if ($168) {
    $169 = (0 - ($165))|0;
    $170 = $169 >>> 3;
    $171 = (($170) + 2)|0;
    $$02$i31 = $164;$174 = $167;$value$03$i30 = $315;
    while(1) {
     $172 = $value$03$i30 << 8;
     $173 = ((($174)) + 1|0);
     HEAP32[$bitptr>>2] = $173;
     $175 = HEAP8[$174>>0]|0;
     $176 = $175&255;
     $177 = $176 | $172;
     $178 = (($$02$i31) + -8)|0;
     $179 = ($178>>>0)>(7);
     if ($179) {
      $$02$i31 = $178;$174 = $173;$value$03$i30 = $177;
     } else {
      $$lcssa113 = $177;
      break;
     }
    }
    $scevgep79 = (($166) + ($171)|0);
    $180 = $164 & 7;
    $$0$lcssa$i34 = $180;$183 = $scevgep79;$value$0$lcssa$i33 = $$lcssa113;
   } else {
    $$0$lcssa$i34 = $164;$183 = $167;$value$0$lcssa$i33 = $315;
   }
   $181 = ($$0$lcssa$i34|0)==(0);
   if ($181) {
    $$01$i35 = $value$0$lcssa$i33;$316 = 8;
   } else {
    $182 = HEAP8[$183>>0]|0;
    $184 = $182&255;
    HEAP16[$$pre$phi$i2893Z2D>>1] = $184;
    $185 = $value$0$lcssa$i33 << $$0$lcssa$i34;
    $186 = $182&255;
    $187 = (8 - ($$0$lcssa$i34))|0;
    $188 = $186 >>> $187;
    $189 = $188 | $185;
    $190 = $187&65535;
    HEAP16[$$pre$phiZ2D>>1] = $190;
    $$01$i35 = $189;$316 = $190;
   }
  }
  $191 = $$01$i35 ^ $143;
  $192 = $191 & 255;
  $193 = (54780 + ($192<<1)|0);
  $194 = HEAP16[$193>>1]|0;
  $195 = $194&65535;
  $196 = $195 ^ $142;
  $$pre$phi89Z2D = $$pre$phiZ2D;$199 = $316;$crc$2 = $196;
  label = 40;
 }
 if ((label|0) == 40) {
  $197 = $crc$2 << 8;
  $198 = $crc$2 >>> 8;
  $200 = ($199<<16>>16)==(8);
  if ($200) {
   $201 = HEAP32[$bitptr>>2]|0;
   $202 = HEAP8[$201>>0]|0;
   $203 = $202&255;
   $204 = ((($bitptr)) + 4|0);
   HEAP16[$204>>1] = $203;
   $205 = $199&65535;
   $206 = $202&255;
   $207 = 1 << $205;
   $208 = (($207) + 65535)|0;
   $209 = $206 & $208;
   $$pre$phi$i1695Z2D = $204;$220 = 8;$317 = $209;
   label = 44;
  } else {
   $$phi$trans$insert$i13 = ((($bitptr)) + 4|0);
   $$pre$i14 = HEAP16[$$phi$trans$insert$i13>>1]|0;
   $210 = $199&65535;
   $211 = ($199&65535)>(8);
   $212 = $$pre$i14&65535;
   $213 = 1 << $210;
   $214 = (($213) + 65535)|0;
   $215 = $212 & $214;
   if ($211) {
    $216 = (($210) + -8)|0;
    $217 = $215 >>> $216;
    $218 = $216&65535;
    HEAP16[$$pre$phi89Z2D>>1] = $218;
    $$01$i23 = $217;
   } else {
    $$pre$phi$i1695Z2D = $$phi$trans$insert$i13;$220 = $210;$317 = $215;
    label = 44;
   }
  }
  if ((label|0) == 44) {
   $219 = (8 - ($220))|0;
   $221 = HEAP32[$bitptr>>2]|0;
   $222 = ((($221)) + 1|0);
   HEAP32[$bitptr>>2] = $222;
   HEAP16[$$pre$phi89Z2D>>1] = 8;
   $223 = ($219>>>0)>(7);
   if ($223) {
    $224 = (0 - ($220))|0;
    $225 = $224 >>> 3;
    $226 = (($225) + 2)|0;
    $$02$i19 = $219;$229 = $222;$value$03$i18 = $317;
    while(1) {
     $227 = $value$03$i18 << 8;
     $228 = ((($229)) + 1|0);
     HEAP32[$bitptr>>2] = $228;
     $230 = HEAP8[$229>>0]|0;
     $231 = $230&255;
     $232 = $231 | $227;
     $233 = (($$02$i19) + -8)|0;
     $234 = ($233>>>0)>(7);
     if ($234) {
      $$02$i19 = $233;$229 = $228;$value$03$i18 = $232;
     } else {
      $$lcssa112 = $232;
      break;
     }
    }
    $scevgep78 = (($221) + ($226)|0);
    $235 = $219 & 7;
    $$0$lcssa$i22 = $235;$238 = $scevgep78;$value$0$lcssa$i21 = $$lcssa112;
   } else {
    $$0$lcssa$i22 = $219;$238 = $222;$value$0$lcssa$i21 = $317;
   }
   $236 = ($$0$lcssa$i22|0)==(0);
   if ($236) {
    $$01$i23 = $value$0$lcssa$i21;
   } else {
    $237 = HEAP8[$238>>0]|0;
    $239 = $237&255;
    HEAP16[$$pre$phi$i1695Z2D>>1] = $239;
    $240 = $value$0$lcssa$i21 << $$0$lcssa$i22;
    $241 = $237&255;
    $242 = (8 - ($$0$lcssa$i22))|0;
    $243 = $241 >>> $242;
    $244 = $243 | $240;
    $245 = $242&65535;
    HEAP16[$$pre$phi89Z2D>>1] = $245;
    $$01$i23 = $244;
   }
  }
  $246 = $$01$i23 ^ $198;
  $247 = $246 & 255;
  $248 = (54780 + ($247<<1)|0);
  $249 = HEAP16[$248>>1]|0;
  $250 = $249&65535;
  $251 = $250 ^ $197;
  $252 = $$0$lcssa & 7;
  $$1$ph = $252;$crc$3$ph = $251;
 }
 $253 = ($$1$ph|0)==(0);
 if ($253) {
  $crc$3$lcssa = $crc$3$ph;
  $310 = $crc$3$lcssa&65535;
  return ($310|0);
 }
 $254 = ((($bitptr)) + 6|0);
 $255 = ((($bitptr)) + 4|0);
 $$pre88 = HEAP16[$254>>1]|0;
 $$in = $$1$ph;$257 = $$pre88;$crc$358 = $crc$3$ph;
 while(1) {
  $256 = (($$in) + -1)|0;
  $258 = ($257<<16>>16)==(8);
  if ($258) {
   $259 = HEAP32[$bitptr>>2]|0;
   $260 = HEAP8[$259>>0]|0;
   $261 = $260&255;
   HEAP16[$255>>1] = $261;
   $262 = $257&65535;
   $263 = $260&255;
   $264 = 1 << $262;
   $265 = (($264) + 65535)|0;
   $266 = $263 & $265;
   $274 = 8;$276 = $266;
   label = 56;
  } else {
   $$pre$i2 = HEAP16[$255>>1]|0;
   $267 = $257&65535;
   $268 = ($257&65535)>(1);
   $269 = $$pre$i2&65535;
   $270 = 1 << $267;
   $271 = (($270) + 65535)|0;
   $272 = $269 & $271;
   if ($268) {
    $274 = $267;$276 = $272;
    label = 56;
   } else {
    $278 = (1 - ($267))|0;
    $279 = HEAP32[$bitptr>>2]|0;
    $280 = ((($279)) + 1|0);
    HEAP32[$bitptr>>2] = $280;
    HEAP16[$254>>1] = 8;
    $281 = ($278>>>0)>(7);
    if ($281) {
     $282 = (-7 - ($267))|0;
     $283 = $282 >>> 3;
     $$02$i7 = $278;$286 = $280;$value$03$i6 = $272;
     while(1) {
      $284 = $value$03$i6 << 8;
      $285 = ((($286)) + 1|0);
      HEAP32[$bitptr>>2] = $285;
      $287 = HEAP8[$286>>0]|0;
      $288 = $287&255;
      $289 = $288 | $284;
      $290 = (($$02$i7) + -8)|0;
      $291 = ($290>>>0)>(7);
      if ($291) {
       $$02$i7 = $290;$286 = $285;$value$03$i6 = $289;
      } else {
       $$lcssa = $289;
       break;
      }
     }
     $scevgep$sum = (($283) + 2)|0;
     $scevgep77 = (($279) + ($scevgep$sum)|0);
     $292 = $278 & 7;
     $$0$lcssa$i10 = $292;$295 = $scevgep77;$value$0$lcssa$i9 = $$lcssa;
    } else {
     $$0$lcssa$i10 = $278;$295 = $280;$value$0$lcssa$i9 = $272;
    }
    $293 = ($$0$lcssa$i10|0)==(0);
    if ($293) {
     $$01$i11 = $value$0$lcssa$i9;$318 = 8;
    } else {
     $294 = HEAP8[$295>>0]|0;
     $296 = $294&255;
     HEAP16[$255>>1] = $296;
     $297 = $value$0$lcssa$i9 << $$0$lcssa$i10;
     $298 = $294&255;
     $299 = (8 - ($$0$lcssa$i10))|0;
     $300 = $298 >>> $299;
     $301 = $300 | $297;
     $302 = $299&65535;
     HEAP16[$254>>1] = $302;
     $$01$i11 = $301;$318 = $302;
    }
   }
  }
  if ((label|0) == 56) {
   label = 0;
   $273 = (($274) + -1)|0;
   $275 = $276 >>> $273;
   $277 = $273&65535;
   HEAP16[$254>>1] = $277;
   $$01$i11 = $275;$318 = $277;
  }
  $303 = $crc$358 >>> 15;
  $304 = $$01$i11 ^ $303;
  $305 = $crc$358 << 1;
  $306 = $304 & 1;
  $307 = ($306|0)==(0);
  $308 = $305 ^ 32773;
  $$ = $307 ? $305 : $308;
  $309 = ($256|0)==(0);
  if ($309) {
   $crc$3$lcssa = $$;
   break;
  } else {
   $$in = $256;$257 = $318;$crc$358 = $$;
  }
 }
 $310 = $crc$3$lcssa&65535;
 return ($310|0);
}
function _mad_frame_init($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond11$i = 0, $exitcond7$i = 0, $exitcond8$i = 0, $s$06$i = 0, $s$14$i = 0, $sb$05$i = 0, $sb$13$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($frame)) + 36|0);
 dest=$frame; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = 6512;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = ((($frame)) + 44|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($frame)) + 9264|0);
 HEAP32[$12>>2] = 0;
 $s$06$i = 0;
 while(1) {
  $sb$05$i = 0;
  while(1) {
   $13 = ((((($frame)) + 4656|0) + ($s$06$i<<7)|0) + ($sb$05$i<<2)|0);
   HEAP32[$13>>2] = 0;
   $14 = ((((($frame)) + 48|0) + ($s$06$i<<7)|0) + ($sb$05$i<<2)|0);
   HEAP32[$14>>2] = 0;
   $15 = (($sb$05$i) + 1)|0;
   $exitcond8$i = ($15|0)==(32);
   if ($exitcond8$i) {
    break;
   } else {
    $sb$05$i = $15;
   }
  }
  $16 = (($s$06$i) + 1)|0;
  $exitcond11$i = ($16|0)==(36);
  if ($exitcond11$i) {
   break;
  } else {
   $s$06$i = $16;
  }
 }
 $17 = HEAP32[$12>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  return;
 } else {
  $s$14$i = 0;
 }
 while(1) {
  $sb$13$i = 0;
  while(1) {
   $19 = ((((($17)) + 2304|0) + (($sb$13$i*72)|0)|0) + ($s$14$i<<2)|0);
   HEAP32[$19>>2] = 0;
   $20 = ((($17) + (($sb$13$i*72)|0)|0) + ($s$14$i<<2)|0);
   HEAP32[$20>>2] = 0;
   $21 = (($sb$13$i) + 1)|0;
   $exitcond$i = ($21|0)==(32);
   if ($exitcond$i) {
    break;
   } else {
    $sb$13$i = $21;
   }
  }
  $22 = (($s$14$i) + 1)|0;
  $exitcond7$i = ($22|0)==(18);
  if ($exitcond7$i) {
   break;
  } else {
   $s$14$i = $22;
  }
 }
 return;
}
function _mad_frame_finish($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($frame)) + 9264|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 _free($1);
 HEAP32[$0>>2] = 0;
 return;
}
function _decode_header($header,$stream) {
 $header = $header|0;
 $stream = $stream|0;
 var $$0 = 0, $$byval_copy = 0, $$pn = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp;
 $0 = ((($header)) + 28|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($header)) + 32|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($stream)) + 28|0);
 _mad_bit_skip($2,11);
 $3 = (_mad_bit_read($2,1)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 | 16384;
  HEAP32[$0>>2] = $6;
 }
 $7 = (_mad_bit_read($2,1)|0);
 $8 = ($7|0)==(0);
 $9 = HEAP32[$0>>2]|0;
 if ($8) {
  $10 = $9 | 4096;
  HEAP32[$0>>2] = $10;
 } else {
  $11 = $9 & 16384;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($stream)) + 60|0);
   HEAP32[$13>>2] = 257;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $14 = (_mad_bit_read($2,2)|0);
 $15 = (4 - ($14))|0;
 HEAP32[$header>>2] = $15;
 $16 = ($14|0)==(0);
 if ($16) {
  $17 = ((($stream)) + 60|0);
  HEAP32[$17>>2] = 258;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (_mad_bit_read($2,1)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = HEAP32[$0>>2]|0;
  $21 = $20 | 16;
  HEAP32[$0>>2] = $21;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
  $22 = (_mad_bit_crc($$byval_copy,16,-1)|0);
  $23 = ((($header)) + 24|0);
  HEAP16[$23>>1] = $22;
 }
 $24 = (_mad_bit_read($2,4)|0);
 $25 = ($24|0)==(15);
 if ($25) {
  $26 = ((($stream)) + 60|0);
  HEAP32[$26>>2] = 259;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = $27 & 4096;
 $29 = ($28|0)==(0);
 $30 = HEAP32[$header>>2]|0;
 $31 = (($30) + -1)|0;
 $32 = $30 >>> 1;
 $33 = (($32) + 3)|0;
 $$pn = $29 ? $31 : $33;
 $$sink$in = ((6520 + (($$pn*60)|0)|0) + ($24<<2)|0);
 $$sink = HEAP32[$$sink$in>>2]|0;
 $34 = ((($header)) + 16|0);
 HEAP32[$34>>2] = $$sink;
 $35 = (_mad_bit_read($2,2)|0);
 $36 = ($35|0)==(3);
 if ($36) {
  $37 = ((($stream)) + 60|0);
  HEAP32[$37>>2] = 260;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = (6820 + ($35<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($header)) + 20|0);
 HEAP32[$40>>2] = $39;
 $41 = HEAP32[$0>>2]|0;
 $42 = $41 & 4096;
 $43 = ($42|0)==(0);
 if (!($43)) {
  $44 = $39 >>> 1;
  HEAP32[$40>>2] = $44;
  $45 = $41 & 16384;
  $46 = ($45|0)==(0);
  if (!($46)) {
   $47 = $39 >>> 2;
   HEAP32[$40>>2] = $47;
  }
 }
 $48 = (_mad_bit_read($2,1)|0);
 $49 = ($48|0)==(0);
 if (!($49)) {
  $50 = HEAP32[$0>>2]|0;
  $51 = $50 | 128;
  HEAP32[$0>>2] = $51;
 }
 $52 = (_mad_bit_read($2,1)|0);
 $53 = ($52|0)==(0);
 if (!($53)) {
  $54 = HEAP32[$1>>2]|0;
  $55 = $54 | 256;
  HEAP32[$1>>2] = $55;
 }
 $56 = (_mad_bit_read($2,2)|0);
 $57 = (3 - ($56))|0;
 $58 = ((($header)) + 4|0);
 HEAP32[$58>>2] = $57;
 $59 = (_mad_bit_read($2,2)|0);
 $60 = ((($header)) + 8|0);
 HEAP32[$60>>2] = $59;
 $61 = (_mad_bit_read($2,1)|0);
 $62 = ($61|0)==(0);
 if (!($62)) {
  $63 = HEAP32[$0>>2]|0;
  $64 = $63 | 32;
  HEAP32[$0>>2] = $64;
 }
 $65 = (_mad_bit_read($2,1)|0);
 $66 = ($65|0)==(0);
 if (!($66)) {
  $67 = HEAP32[$0>>2]|0;
  $68 = $67 | 64;
  HEAP32[$0>>2] = $68;
 }
 $69 = (_mad_bit_read($2,2)|0);
 $70 = ((($header)) + 12|0);
 HEAP32[$70>>2] = $69;
 $71 = HEAP32[$0>>2]|0;
 $72 = $71 & 16;
 $73 = ($72|0)==(0);
 if ($73) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $74 = (_mad_bit_read($2,16)|0);
 $75 = $74&65535;
 $76 = ((($header)) + 26|0);
 HEAP16[$76>>1] = $75;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free_bitrate($stream,$header) {
 $stream = $stream|0;
 $header = $header|0;
 var $$02 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $peek_header = 0, $peek_stream = 0, $phitmp = 0, $rate$05 = 0, $rate$1 = 0, $rate$1$in = 0, $rate$1$lcssa = 0, $rate$2 = 0, $rate$4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $peek_stream = sp + 48|0;
 $peek_header = sp;
 $0 = ((($stream)) + 28|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($header)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 7;
 $$lobit = $9 & 1;
 $10 = HEAP32[$header>>2]|0;
 $11 = ($10|0)==(3);
 if ($11) {
  $12 = $8 & 4096;
  $13 = ($12|0)!=(0);
  $phitmp = $13 ? 72 : 144;
  $48 = $phitmp;
 } else {
  $48 = 144;
 }
 $14 = (_mad_stream_sync($stream)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $20 = ((($peek_header)) + 20|0);
  $21 = ((($header)) + 20|0);
  $22 = ((($stream)) + 20|0);
  $23 = $$lobit << 2;
  $24 = (4 - ($23))|0;
  $25 = $$lobit ^ 1;
  $rate$05 = 0;
  while(1) {
   dest=$peek_stream; src=$stream; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   dest=$peek_header; src=$header; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $26 = (_decode_header($peek_header,$peek_stream)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = HEAP32[$peek_header>>2]|0;
    $29 = HEAP32[$header>>2]|0;
    $30 = ($28|0)==($29|0);
    if ($30) {
     $31 = HEAP32[$20>>2]|0;
     $32 = HEAP32[$21>>2]|0;
     $33 = ($31|0)==($32|0);
     if ($33) {
      $34 = (_mad_bit_nextbyte($0)|0);
      $35 = HEAP32[$22>>2]|0;
      $36 = $34;
      $37 = $35;
      $38 = (($36) - ($37))|0;
      $39 = HEAP32[$header>>2]|0;
      $40 = ($39|0)==(1);
      $41 = HEAP32[$21>>2]|0;
      if ($40) {
       $42 = (($24) + ($38))|0;
       $43 = Math_imul($42, $41)|0;
       $44 = (($43>>>0) / 48)&-1;
       $rate$1$in = $44;
      } else {
       $45 = (($25) + ($38))|0;
       $46 = Math_imul($45, $41)|0;
       $47 = (($46>>>0) / ($48>>>0))&-1;
       $rate$1$in = $47;
      }
      $rate$1 = (($rate$1$in>>>0) / 1000)&-1;
      $49 = ($rate$1$in>>>0)>(7999);
      if ($49) {
       $rate$1$lcssa = $rate$1;
       label = 14;
       break;
      } else {
       $rate$2 = $rate$1;
      }
     } else {
      $rate$2 = $rate$05;
     }
    } else {
     $rate$2 = $rate$05;
    }
   } else {
    $rate$2 = $rate$05;
   }
   _mad_bit_skip($0,8);
   $50 = (_mad_stream_sync($stream)|0);
   $51 = ($50|0)==(0);
   if ($51) {
    $rate$05 = $rate$2;
   } else {
    $rate$4 = $rate$2;
    break;
   }
  }
  if ((label|0) == 14) {
   $rate$4 = $rate$1$lcssa;
  }
  $52 = $0;
  $53 = $52;
  HEAP32[$53>>2] = $3;
  $54 = (($52) + 4)|0;
  $55 = $54;
  HEAP32[$55>>2] = $6;
  $56 = ($rate$4>>>0)<(8);
  if (!($56)) {
   $57 = HEAP32[$header>>2]|0;
   $58 = ($57|0)==(3);
   $59 = ($rate$4>>>0)>(640);
   $or$cond = $59 & $58;
   if (!($or$cond)) {
    $61 = ($rate$4*1000)|0;
    $62 = ((($stream)) + 16|0);
    HEAP32[$62>>2] = $61;
    $$02 = 0;
    STACKTOP = sp;return ($$02|0);
   }
  }
 } else {
  $16 = $0;
  $17 = $16;
  HEAP32[$17>>2] = $3;
  $18 = (($16) + 4)|0;
  $19 = $18;
  HEAP32[$19>>2] = $6;
 }
 $60 = ((($stream)) + 60|0);
 HEAP32[$60>>2] = 257;
 $$02 = -1;
 STACKTOP = sp;return ($$02|0);
}
function _III_sideinfo($ptr,$nch,$lsf,$si,$data_bitlen,$priv_bitlen) {
 $ptr = $ptr|0;
 $nch = $nch|0;
 $lsf = $lsf|0;
 $si = $si|0;
 $data_bitlen = $data_bitlen|0;
 $priv_bitlen = $priv_bitlen|0;
 var $$$$result$1$us = 0, $$$result$1 = 0, $$$result$1$us = 0, $$result$1 = 0, $$result$1$us = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ch$020 = 0, $ch$113 = 0, $ch$113$us = 0, $exitcond = 0, $exitcond27 = 0, $exitcond28 = 0, $gr$017 = 0, $ngr$0 = 0, $or$cond = 0, $or$cond$us = 0, $or$cond5$us = 0, $result$016 = 0, $result$1$lcssa = 0, $result$1$lcssa$lcssa = 0, $result$115 = 0, $result$115$us = 0, $result$4$us = 0, $result$5 = 0;
 var $result$5$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$data_bitlen>>2] = 0;
 $0 = ($lsf|0)!=(0);
 $1 = ($nch|0)==(1);
 $2 = $1 ? 1 : 2;
 $3 = $1 ? 5 : 3;
 $4 = $0 ? $2 : $3;
 HEAP32[$priv_bitlen>>2] = $4;
 $5 = $0 ? 8 : 9;
 $6 = (_mad_bit_read($ptr,$5)|0);
 HEAP32[$si>>2] = $6;
 $7 = HEAP32[$priv_bitlen>>2]|0;
 $8 = (_mad_bit_read($ptr,$7)|0);
 $9 = ((($si)) + 4|0);
 HEAP32[$9>>2] = $8;
 if ($0) {
  $ngr$0 = 1;
 } else {
  $10 = ($nch|0)==(0);
  if ($10) {
   $ngr$0 = 2;
  } else {
   $ch$020 = 0;
   while(1) {
    $11 = (_mad_bit_read($ptr,4)|0);
    $12 = $11&255;
    $13 = (((($si)) + 8|0) + ($ch$020)|0);
    HEAP8[$13>>0] = $12;
    $14 = (($ch$020) + 1)|0;
    $exitcond28 = ($14|0)==($nch|0);
    if ($exitcond28) {
     $ngr$0 = 2;
     break;
    } else {
     $ch$020 = $14;
    }
   }
  }
 }
 $15 = ($nch|0)==(0);
 $16 = $0 ? 9 : 4;
 $17 = $0 ? 2 : 3;
 $gr$017 = 0;$result$016 = 0;
 while(1) {
  L8: do {
   if ($15) {
    $result$1$lcssa = $result$016;
   } else {
    if ($0) {
     $ch$113 = 0;$result$115 = $result$016;
     while(1) {
      $99 = (_mad_bit_read($ptr,12)|0);
      $100 = $99&65535;
      $101 = ((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0);
      HEAP16[$101>>1] = $100;
      $102 = (_mad_bit_read($ptr,9)|0);
      $103 = $102&65535;
      $104 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 2|0);
      HEAP16[$104>>1] = $103;
      $105 = (_mad_bit_read($ptr,8)|0);
      $106 = $105&65535;
      $107 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 4|0);
      HEAP16[$107>>1] = $106;
      $108 = (_mad_bit_read($ptr,$16)|0);
      $109 = $108&65535;
      $110 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 6|0);
      HEAP16[$110>>1] = $109;
      $111 = HEAP16[$101>>1]|0;
      $112 = $111&65535;
      $113 = HEAP32[$data_bitlen>>2]|0;
      $114 = (($113) + ($112))|0;
      HEAP32[$data_bitlen>>2] = $114;
      $115 = HEAP16[$104>>1]|0;
      $116 = ($115&65535)>(288);
      $117 = ($result$115|0)==(0);
      $or$cond = $117 & $116;
      $$result$1 = $or$cond ? 562 : $result$115;
      $118 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 8|0);
      HEAP8[$118>>0] = 0;
      $119 = (_mad_bit_read($ptr,1)|0);
      $120 = ($119|0)==(0);
      if ($120) {
       $153 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 9|0);
       HEAP8[$153>>0] = 0;
       $154 = (_mad_bit_read($ptr,5)|0);
       $155 = $154&255;
       $156 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 10|0);
       HEAP8[$156>>0] = $155;
       $157 = (_mad_bit_read($ptr,5)|0);
       $158 = $157&255;
       $159 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 11|0);
       HEAP8[$159>>0] = $158;
       $160 = (_mad_bit_read($ptr,5)|0);
       $161 = $160&255;
       $162 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 12|0);
       HEAP8[$162>>0] = $161;
       $163 = (_mad_bit_read($ptr,4)|0);
       $164 = $163&255;
       $165 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 16|0);
       HEAP8[$165>>0] = $164;
       $166 = (_mad_bit_read($ptr,3)|0);
       $167 = $166&255;
       $168 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 17|0);
       HEAP8[$168>>0] = $167;
       $result$5 = $$result$1;
      } else {
       $121 = (_mad_bit_read($ptr,2)|0);
       $122 = $121&255;
       $123 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 9|0);
       HEAP8[$123>>0] = $122;
       $124 = $121 & 255;
       $125 = $124 | $$result$1;
       $126 = ($125|0)==(0);
       $$$result$1 = $126 ? 563 : $$result$1;
       $127 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 16|0);
       HEAP8[$127>>0] = 7;
       $128 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 17|0);
       HEAP8[$128>>0] = 36;
       $129 = (_mad_bit_read($ptr,1)|0);
       $130 = ($129|0)==(0);
       if ($130) {
        $135 = HEAP8[$123>>0]|0;
        $136 = ($135<<24>>24)==(2);
        if ($136) {
         HEAP8[$127>>0] = 8;
        }
       } else {
        $131 = HEAP8[$118>>0]|0;
        $132 = $131&255;
        $133 = $132 | 8;
        $134 = $133&255;
        HEAP8[$118>>0] = $134;
       }
       $137 = (_mad_bit_read($ptr,5)|0);
       $138 = $137&255;
       $139 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 10|0);
       HEAP8[$139>>0] = $138;
       $140 = (_mad_bit_read($ptr,5)|0);
       $141 = $140&255;
       $142 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 11|0);
       HEAP8[$142>>0] = $141;
       $143 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 12|0);
       HEAP8[$143>>0] = 4;
       $144 = (_mad_bit_read($ptr,3)|0);
       $145 = $144&255;
       $146 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 13|0);
       HEAP8[$146>>0] = $145;
       $147 = (_mad_bit_read($ptr,3)|0);
       $148 = $147&255;
       $149 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 14|0);
       HEAP8[$149>>0] = $148;
       $150 = (_mad_bit_read($ptr,3)|0);
       $151 = $150&255;
       $152 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113*58)|0)|0)) + 15|0);
       HEAP8[$152>>0] = $151;
       $result$5 = $$$result$1;
      }
      $169 = (_mad_bit_read($ptr,$17)|0);
      $170 = HEAP8[$118>>0]|0;
      $171 = $170&255;
      $172 = $171 | $169;
      $173 = $172&255;
      HEAP8[$118>>0] = $173;
      $174 = (($ch$113) + 1)|0;
      $exitcond = ($174|0)==($nch|0);
      if ($exitcond) {
       $result$1$lcssa = $result$5;
       break L8;
      } else {
       $ch$113 = $174;$result$115 = $result$5;
      }
     }
    } else {
     $ch$113$us = 0;$result$115$us = $result$016;
    }
    while(1) {
     $18 = (_mad_bit_read($ptr,12)|0);
     $19 = $18&65535;
     $20 = ((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0);
     HEAP16[$20>>1] = $19;
     $21 = (_mad_bit_read($ptr,9)|0);
     $22 = $21&65535;
     $23 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 2|0);
     HEAP16[$23>>1] = $22;
     $24 = (_mad_bit_read($ptr,8)|0);
     $25 = $24&65535;
     $26 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 4|0);
     HEAP16[$26>>1] = $25;
     $27 = (_mad_bit_read($ptr,$16)|0);
     $28 = $27&65535;
     $29 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 6|0);
     HEAP16[$29>>1] = $28;
     $30 = HEAP16[$20>>1]|0;
     $31 = $30&65535;
     $32 = HEAP32[$data_bitlen>>2]|0;
     $33 = (($32) + ($31))|0;
     HEAP32[$data_bitlen>>2] = $33;
     $34 = HEAP16[$23>>1]|0;
     $35 = ($34&65535)>(288);
     $36 = ($result$115$us|0)==(0);
     $or$cond$us = $36 & $35;
     $$result$1$us = $or$cond$us ? 562 : $result$115$us;
     $37 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 8|0);
     HEAP8[$37>>0] = 0;
     $38 = (_mad_bit_read($ptr,1)|0);
     $39 = ($38|0)==(0);
     if ($39) {
      $61 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 9|0);
      HEAP8[$61>>0] = 0;
      $62 = (_mad_bit_read($ptr,5)|0);
      $63 = $62&255;
      $64 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 10|0);
      HEAP8[$64>>0] = $63;
      $65 = (_mad_bit_read($ptr,5)|0);
      $66 = $65&255;
      $67 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 11|0);
      HEAP8[$67>>0] = $66;
      $68 = (_mad_bit_read($ptr,5)|0);
      $69 = $68&255;
      $70 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 12|0);
      HEAP8[$70>>0] = $69;
      $71 = (_mad_bit_read($ptr,4)|0);
      $72 = $71&255;
      $73 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 16|0);
      HEAP8[$73>>0] = $72;
      $74 = (_mad_bit_read($ptr,3)|0);
      $75 = $74&255;
      $76 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 17|0);
      HEAP8[$76>>0] = $75;
      $result$5$us = $$result$1$us;
     } else {
      $40 = (_mad_bit_read($ptr,2)|0);
      $41 = $40&255;
      $42 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 9|0);
      HEAP8[$42>>0] = $41;
      $43 = $40 & 255;
      $44 = $43 | $$result$1$us;
      $45 = ($44|0)==(0);
      $$$result$1$us = $45 ? 563 : $$result$1$us;
      $46 = ($41<<24>>24)==(2);
      if ($46) {
       $47 = (((($si)) + 8|0) + ($ch$113$us)|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = ($48<<24>>24)!=(0);
       $50 = ($$$result$1$us|0)==(0);
       $or$cond5$us = $50 & $49;
       $$$$result$1$us = $or$cond5$us ? 564 : $$$result$1$us;
       $result$4$us = $$$$result$1$us;
      } else {
       $result$4$us = $$$result$1$us;
      }
      $51 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 16|0);
      HEAP8[$51>>0] = 7;
      $52 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 17|0);
      HEAP8[$52>>0] = 36;
      $53 = (_mad_bit_read($ptr,1)|0);
      $54 = ($53|0)==(0);
      if ($54) {
       $59 = HEAP8[$42>>0]|0;
       $60 = ($59<<24>>24)==(2);
       if ($60) {
        HEAP8[$51>>0] = 8;
       }
      } else {
       $55 = HEAP8[$37>>0]|0;
       $56 = $55&255;
       $57 = $56 | 8;
       $58 = $57&255;
       HEAP8[$37>>0] = $58;
      }
      $83 = (_mad_bit_read($ptr,5)|0);
      $84 = $83&255;
      $85 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 10|0);
      HEAP8[$85>>0] = $84;
      $86 = (_mad_bit_read($ptr,5)|0);
      $87 = $86&255;
      $88 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 11|0);
      HEAP8[$88>>0] = $87;
      $89 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 12|0);
      HEAP8[$89>>0] = 4;
      $90 = (_mad_bit_read($ptr,3)|0);
      $91 = $90&255;
      $92 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 13|0);
      HEAP8[$92>>0] = $91;
      $93 = (_mad_bit_read($ptr,3)|0);
      $94 = $93&255;
      $95 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 14|0);
      HEAP8[$95>>0] = $94;
      $96 = (_mad_bit_read($ptr,3)|0);
      $97 = $96&255;
      $98 = ((((((($si)) + 10|0) + (($gr$017*116)|0)|0) + (($ch$113$us*58)|0)|0)) + 15|0);
      HEAP8[$98>>0] = $97;
      $result$5$us = $result$4$us;
     }
     $77 = (_mad_bit_read($ptr,$17)|0);
     $78 = HEAP8[$37>>0]|0;
     $79 = $78&255;
     $80 = $79 | $77;
     $81 = $80&255;
     HEAP8[$37>>0] = $81;
     $82 = (($ch$113$us) + 1)|0;
     $exitcond27 = ($82|0)==($nch|0);
     if ($exitcond27) {
      $result$1$lcssa = $result$5$us;
      break;
     } else {
      $ch$113$us = $82;$result$115$us = $result$5$us;
     }
    }
   }
  } while(0);
  $175 = (($gr$017) + 1)|0;
  $176 = ($175>>>0)<($ngr$0>>>0);
  if ($176) {
   $gr$017 = $175;$result$016 = $result$1$lcssa;
  } else {
   $result$1$lcssa$lcssa = $result$1$lcssa;
   break;
  }
 }
 return ($result$1$lcssa$lcssa|0);
}
function _III_decode($ptr,$frame,$si,$nch) {
 $ptr = $ptr|0;
 $frame = $frame|0;
 $si = $si|0;
 $nch = $nch|0;
 var $$ = 0, $$0$i31 = 0, $$0$sum$i = 0, $$0$sum$i37 = 0, $$0$sum1$i = 0, $$0$sum1$i38 = 0, $$01$lcssa$i = 0, $$0175$i = 0, $$03$i30 = 0, $$05$i33 = 0, $$06$i = 0, $$1$i$ph = 0, $$1$i21 = 0, $$1$ph = 0, $$12$i = 0, $$2 = 0, $$21$i = 0, $$3 = 0, $$3$i = 0, $$348$i = 0;
 var $$4$i = 0, $$5$i = 0, $$idx = 0, $$idx$val = 0, $$in = 0, $$in$i = 0, $$in242 = 0, $$lcssa$i = 0, $$lcssa336 = 0, $$lcssa337 = 0, $$lcssa338 = 0, $$lobit = 0, $$pre$i = 0, $$pre241 = 0, $$pre94$i = 0, $$sink = 0, $$sink237 = 0, $$sink238 = 0, $$sink239 = 0, $$sum = 0;
 var $$sum105 = 0, $$sum116 = 0, $$sum116$1 = 0, $$sum117 = 0, $$sum117$1 = 0, $$sum118 = 0, $$sum68 = 0, $$sum69 = 0, $$sum70 = 0, $$sum71 = 0, $$sum72 = 0, $$sum73 = 0, $$sum74 = 0, $$sum75 = 0, $$sum78 = 0, $$sum80 = 0, $$sum82 = 0, $$sum84 = 0, $$sum86 = 0, $$sum88 = 0;
 var $$sum90 = 0, $$sum92 = 0, $$sum94 = 0, $$xrptr$2$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0;
 var $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0;
 var $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0;
 var $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0;
 var $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0;
 var $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0;
 var $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0;
 var $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0;
 var $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0;
 var $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0;
 var $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0;
 var $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0;
 var $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0;
 var $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0;
 var $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0;
 var $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0;
 var $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0;
 var $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0;
 var $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0;
 var $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0;
 var $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0;
 var $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0;
 var $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0;
 var $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0;
 var $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0;
 var $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0;
 var $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0;
 var $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0;
 var $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0;
 var $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0;
 var $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0;
 var $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0;
 var $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0;
 var $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0;
 var $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0;
 var $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0;
 var $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0;
 var $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0;
 var $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0;
 var $1697 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0.0, $755 = 0.0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0.0, $788 = 0.0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0.0, $841 = 0.0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0.0, $874 = 0.0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0.0, $917 = 0.0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0.0, $964 = 0.0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $bitcache$0$lcssa$i = 0, $bitcache$068$i = 0, $bitcache$1$i = 0, $bitcache$10$i = 0, $bitcache$2$i = 0, $bitcache$3$i = 0, $bitcache$4$i = 0, $bitcache$5$i = 0, $bitcache$6$i = 0, $bitcache$7$i = 0, $bitcache$947$i = 0, $bits_left$0$lcssa$i = 0, $bits_left$063$i = 0, $bits_left$1$i = 0, $bits_left$10$i = 0, $bits_left$2$i = 0, $bits_left$3$i = 0, $bits_left$4$i = 0;
 var $bits_left$5$i = 0, $bits_left$6$i = 0, $bits_left$7$i = 0, $bits_left$9$lcssa$i = 0, $bits_left$943$i = 0, $bound$i = 0, $bound1$062$i = 0, $bound1$1$i = 0, $bound1$1$i$lcssa = 0, $cachesz$0$lcssa$i = 0, $cachesz$064$i = 0, $cachesz$1$i = 0, $cachesz$1144$i = 0, $cachesz$12$i = 0, $cachesz$13$i = 0, $cachesz$14$i = 0, $cachesz$15$i = 0, $cachesz$16$i = 0, $cachesz$17$i = 0, $cachesz$2$lcssa$i = 0;
 var $cachesz$254$i = 0, $cachesz$3$i = 0, $cachesz$4$i = 0, $cachesz$5$i = 0, $cachesz$6$i = 0, $cachesz$7$i = 0, $cachesz$8$i = 0, $cachesz$9$i = 0, $ch$0174 = 0, $ch$1193 = 0, $clumpsz$055$i = 0, $div$i = 0, $div2$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i18 = 0, $exitcond$i23 = 0, $exitcond$i28 = 0, $exitcond$i39 = 0;
 var $exitcond$i42 = 0, $exitcond$i42$1 = 0, $exitcond$i44 = 0, $exitcond$i44$1 = 0, $exitcond$i47 = 0, $exitcond$i54 = 0, $exitcond17$i$i = 0, $exitcond235 = 0, $exitcond236 = 0, $exitcond69$i = 0, $exitcond70$i = 0, $exitcond71$i = 0, $exitcond72$i = 0, $exitcond73$i = 0, $exp$0$lcssa$i = 0, $exp$061$i = 0, $exp$2$i = 0, $exp$441$i = 0, $exp$5$i = 0, $exp$6$i = 0;
 var $exp$7$i = 0, $exp$8$i = 0, $exponents$i = 0, $expptr$0$lcssa$i = 0, $expptr$062$i = 0, $expptr$1$i = 0, $expptr$342$i = 0, $expptr$4$i = 0, $expptr$5$i = 0, $f$03$i = 0, $f$1$i = 0, $f$1$in$i = 0, $gr$0202 = 0, $i$0 = 0, $i$0$lcssa = 0, $i$01$i = 0, $i$01$i$1 = 0, $i$01$i43 = 0, $i$01$i43$1 = 0, $i$01$i46 = 0;
 var $i$01$i53 = 0, $i$015$1$i = 0, $i$015$2$i = 0, $i$015$3$i = 0, $i$015$i = 0, $i$02$i = 0, $i$02$i36 = 0, $i$142$i = 0, $i$18$1$i = 0, $i$18$2$i = 0, $i$18$3$i = 0, $i$18$i = 0, $i$234$i = 0, $i$332$i = 0, $i$430$i = 0, $i$555$i = 0, $i$653$i = 0, $i$725$i = 0, $i$821$i = 0, $i$918$i = 0;
 var $l$012$i$i = 0, $l$051$i = 0, $l$07$i = 0, $l$1$i$i = 0, $l$12$i = 0, $l$180$i = 0, $l$210$i$i = 0, $l$239$i = 0, $l$3185 = 0, $l$364$i = 0, $l$4188 = 0, $l$427$i = 0, $l$523$i = 0, $l$619$i = 0, $linbits$072$i = 0, $linbits$1$i = 0, $linbits$2$i = 0, $lower$049$i = 0, $lower$1$i = 0, $lower$1$i$lcssa = 0;
 var $lower$2$start$0$i = 0, $lower$275$i = 0, $lower$276$i = 0, $max$0$lcssa$i = 0, $max$036$i = 0, $max$1$i = 0, $modes$i = 0, $n$1$lcssa$1$i = 0, $n$1$lcssa$2$i = 0, $n$1$lcssa$3$i = 0, $n$1$lcssa$i = 0, $n$114$1$i = 0, $n$114$2$i = 0, $n$114$3$i = 0, $n$4$lcssa$1$i = 0, $n$4$lcssa$2$i = 0, $n$4$lcssa$3$i = 0, $n$4$lcssa$i = 0, $n$47$1$i = 0, $n$47$2$i = 0;
 var $n$47$3$i = 0, $n$56$i = 0, $nsfb$0$i = 0, $nsfb$023$i = 0, $nsfb$1$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond$i9 = 0, $or$cond60$i = 0, $output = 0, $pair$0$i = 0, $pair$053$i = 0, $part2_length$0 = 0, $peek$i = 0, $quad$0$i = 0, $rcount$070$i = 0, $rcount$1$i = 0, $rcount$2$i = 0, $rcount$3$i = 0;
 var $region$069$i = 0, $region$1$i = 0, $region$2$i = 0, $reqcache$i = 0, $reqhits$0$$i = 0, $reqhits$074$i = 0, $reqhits$2$i = 0, $reqhits$3$i = 0, $reqhits$4$i = 0, $reqhits$5$i = 0, $reqhits$6$i = 0, $reqhits$7$i = 0, $reqhits$8$i = 0, $reqhits$9$i = 0, $requantized$0$i = 0, $requantized$0$i$i = 0, $requantized$0$i10$i = 0, $requantized$0$i12$i = 0, $requantized$0$i14$i = 0, $requantized$0$i16$i = 0;
 var $requantized$0$i18$i = 0, $requantized$0$i20$i = 0, $requantized$0$i6$i = 0, $requantized$0$i8$i = 0, $requantized$1$i = 0, $requantized$2$i = 0, $requantized$3$i = 0, $requantized2$0$ph$i = 0, $requantized2$049$i = 0, $requantized2$1$i = 0, $requantized2$2$i = 0, $requantized2$3$i = 0, $requantized2$4$i = 0, $right_xr$050$i = 0, $right_xr$179$i = 0, $right_xr$238$i = 0, $right_xr$363$i = 0, $sb$0$i = 0, $sb$2184 = 0, $sb$3187 = 0;
 var $sb$4190 = 0, $sext$i$i = 0, $sfbi$013$i$i = 0, $sfbi$022$i = 0, $sfbi$052$i = 0, $sfbi$1$i$i = 0, $sfbi$211$i$i = 0, $sfbi$240$i = 0, $sfbi$315$i$i = 0, $sfbi$365$i = 0, $sfbi$414$i$i = 0, $sfbi$428$i = 0, $sfbi$524$i = 0, $sfbi$620$i = 0, $sfbound$0$lcssa$i = 0, $sfbound$067$i = 0, $sfbound$1$i = 0, $sfbound$346$i = 0, $sfbound$4$i = 0, $sfbound$5$i = 0;
 var $sfbwidth = 0, $sfreqi$0 = 0, $sfreqi$0$v = 0, $start$077$i = 0, $start$078$i = 0, $start$i = 0, $start$i4 = 0, $startbits$073$i = 0, $startbits$1$i = 0, $startbits$2$i = 0, $storemerge$i = 0, $storemerge4$i = 0, $sw$i = 0, $table$071$i = 0, $table$1$i = 0, $table$2$i = 0, $tmp$i = 0, $tmp2$0$1$i = 0, $tmp2$0$1$i51 = 0, $tmp2$0$1$i58 = 0;
 var $tmp2$0$1$i62 = 0, $tmp2$0$2$i = 0, $tmp2$0$2$i52 = 0, $tmp2$0$2$i59 = 0, $tmp2$0$2$i63 = 0, $tmp2$0$i = 0, $tmp2$0$i50 = 0, $tmp2$0$i57 = 0, $tmp2$0$i61 = 0, $tmp2$01$i = 0, $tmp2$01$i49 = 0, $tmp2$01$i56 = 0, $tmp2$01$i60 = 0, $uglygep$i = 0, $uglygep$i6 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0;
 var $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $w$037$i = 0, $w$129$i = 0, $w$14$i = 0, $w$2$i = 0, $xr = 0, $xr$pn4$i34 = 0, $xr$pn4$i34$phi = 0;
 var $xrptr$0$lcssa$i = 0, $xrptr$065$i = 0, $xrptr$2$lcssa$i = 0, $xrptr$245$i = 0, $xrptr$440$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 7568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer30 = sp + 152|0;
 $vararg_buffer26 = sp + 136|0;
 $vararg_buffer22 = sp + 120|0;
 $vararg_buffer18 = sp + 104|0;
 $vararg_buffer14 = sp + 88|0;
 $vararg_buffer10 = sp + 72|0;
 $vararg_buffer6 = sp + 56|0;
 $vararg_buffer2 = sp + 40|0;
 $vararg_buffer = sp + 24|0;
 $tmp$i = sp + 5176|0;
 $sw$i = sp + 5160|0;
 $modes$i = sp + 7480|0;
 $bound$i = sp + 5148|0;
 $exponents$i = sp + 4992|0;
 $peek$i = sp + 16|0;
 $reqcache$i = sp + 4928|0;
 $start$i4 = sp + 8|0;
 $start$i = sp;
 $sfbwidth = sp + 4920|0;
 $xr = sp + 312|0;
 $output = sp + 168|0;
 $0 = ((($frame)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($frame)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 16384;
 $5 = ($4|0)==(0);
 $$lobit = $4 >>> 14;
 $$3 = $1 << $$lobit;
 $6 = $$3 >>> 7;
 $7 = $6 & 15;
 $8 = $$3 >>> 15;
 $9 = $8 & 1;
 $sfreqi$0$v = $5 ? -8 : -5;
 $10 = (($9) + ($sfreqi$0$v))|0;
 $sfreqi$0 = (($10) + ($7))|0;
 $11 = $3 >>> 12;
 $12 = $11 & 1;
 $13 = (2 - ($12))|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $15 = ($nch|0)==(0);
 $16 = ((($frame)) + 4|0);
 $17 = ((($frame)) + 8|0);
 $18 = ((($xr)) + 2304|0);
 $19 = ((($bound$i)) + 8|0);
 $20 = ((($bound$i)) + 4|0);
 $21 = ((($frame)) + 9264|0);
 $22 = (6832 + (($sfreqi$0*12)|0)|0);
 $23 = (((6832 + (($sfreqi$0*12)|0)|0)) + 8|0);
 $24 = (((6832 + (($sfreqi$0*12)|0)|0)) + 4|0);
 $25 = ((($exponents$i)) + 4|0);
 $26 = HEAP32[43092>>2]|0;
 $27 = ((($si)) + 184|0);
 $28 = ((($modes$i)) + 2|0);
 $29 = ((($modes$i)) + 4|0);
 $30 = ((($modes$i)) + 6|0);
 $31 = ((($modes$i)) + 8|0);
 $32 = ((($modes$i)) + 10|0);
 $33 = ((($modes$i)) + 12|0);
 $34 = ((($modes$i)) + 14|0);
 $35 = ((($modes$i)) + 16|0);
 $36 = ((($modes$i)) + 18|0);
 $37 = ((($modes$i)) + 20|0);
 $38 = ((($modes$i)) + 22|0);
 $39 = ((($modes$i)) + 24|0);
 $40 = ((($modes$i)) + 26|0);
 $41 = ((($modes$i)) + 28|0);
 $42 = ((($modes$i)) + 30|0);
 $43 = ((($modes$i)) + 32|0);
 $44 = ((($modes$i)) + 34|0);
 $45 = ((($modes$i)) + 36|0);
 $46 = ((($modes$i)) + 38|0);
 $47 = ((($modes$i)) + 40|0);
 $48 = ((($modes$i)) + 42|0);
 $49 = ((($modes$i)) + 44|0);
 $50 = ((($modes$i)) + 46|0);
 $51 = ((($modes$i)) + 48|0);
 $52 = ((($modes$i)) + 50|0);
 $53 = ((($modes$i)) + 52|0);
 $54 = ((($modes$i)) + 54|0);
 $55 = ((($modes$i)) + 56|0);
 $56 = ((($modes$i)) + 58|0);
 $57 = ((($modes$i)) + 60|0);
 $58 = ((($modes$i)) + 62|0);
 $59 = ((($modes$i)) + 64|0);
 $60 = ((($modes$i)) + 66|0);
 $61 = ((($modes$i)) + 68|0);
 $62 = ((($modes$i)) + 70|0);
 $63 = ((($modes$i)) + 72|0);
 $64 = ((($modes$i)) + 74|0);
 $65 = ((($modes$i)) + 76|0);
 $gr$0202 = 0;
 L4: while(1) {
  if (!($15)) {
   $66 = HEAP32[$22>>2]|0;
   $67 = ($gr$0202|0)==(0);
   $ch$0174 = 0;
   while(1) {
    $68 = ((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0);
    $69 = (($sfbwidth) + ($ch$0174<<2)|0);
    HEAP32[$69>>2] = $66;
    $70 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 9|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = ($71<<24>>24)==(2);
    if ($72) {
     $73 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 8|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 & 8;
     $76 = ($75<<24>>24)==(0);
     $$in = $76 ? $24 : $23;
     $77 = HEAP32[$$in>>2]|0;
     HEAP32[$69>>2] = $77;
     $$in242 = $77;
    } else {
     $$in242 = $66;
    }
    $78 = $$in242;
    $79 = HEAP32[$2>>2]|0;
    $80 = $79 & 4096;
    $81 = ($80|0)==(0);
    if ($81) {
     if ($67) {
      $377 = 0;
     } else {
      $270 = (((($si)) + 8|0) + ($ch$0174)|0);
      $271 = HEAP8[$270>>0]|0;
      $272 = $271&255;
      $377 = $272;
     }
     $273 = $ptr;
     $274 = $273;
     $275 = HEAP32[$274>>2]|0;
     $276 = (($273) + 4)|0;
     $277 = $276;
     $278 = HEAP32[$277>>2]|0;
     $279 = $start$i4;
     $280 = $279;
     HEAP32[$280>>2] = $275;
     $281 = (($279) + 4)|0;
     $282 = $281;
     HEAP32[$282>>2] = $278;
     $283 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 6|0);
     $284 = HEAP16[$283>>1]|0;
     $285 = $284&65535;
     $286 = (67283 + ($285<<1)|0);
     $287 = HEAP8[$286>>0]|0;
     $288 = $287&255;
     $289 = (((67283 + ($285<<1)|0)) + 1|0);
     $290 = HEAP8[$289>>0]|0;
     $291 = $290&255;
     if ($72) {
      $292 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 8|0);
      $293 = HEAP8[$292>>0]|0;
      $294 = $293 & 8;
      $295 = $294&255;
      $296 = $295 >>> 3;
      $297 = (18 - ($296))|0;
      $nsfb$023$i = $297;$sfbi$022$i = 0;
      while(1) {
       $370 = (($nsfb$023$i) + -1)|0;
       $371 = (_mad_bit_read($ptr,$288)|0);
       $372 = $371&255;
       $373 = (($sfbi$022$i) + 1)|0;
       $374 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($sfbi$022$i)|0);
       HEAP8[$374>>0] = $372;
       $375 = ($370|0)==(0);
       if ($375) {
        break;
       } else {
        $nsfb$023$i = $370;$sfbi$022$i = $373;
       }
      }
      $298 = (_mad_bit_read($ptr,$291)|0);
      $299 = $298&255;
      $300 = (($297) + 1)|0;
      $301 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($297)|0);
      HEAP8[$301>>0] = $299;
      $302 = (_mad_bit_read($ptr,$291)|0);
      $303 = $302&255;
      $304 = (($297) + 2)|0;
      $305 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($300)|0);
      HEAP8[$305>>0] = $303;
      $306 = (_mad_bit_read($ptr,$291)|0);
      $307 = $306&255;
      $308 = (($297) + 3)|0;
      $309 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($304)|0);
      HEAP8[$309>>0] = $307;
      $310 = (_mad_bit_read($ptr,$291)|0);
      $311 = $310&255;
      $312 = $297 | 4;
      $313 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($308)|0);
      HEAP8[$313>>0] = $311;
      $314 = (_mad_bit_read($ptr,$291)|0);
      $315 = $314&255;
      $316 = (($312) + 1)|0;
      $317 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($312)|0);
      HEAP8[$317>>0] = $315;
      $318 = (_mad_bit_read($ptr,$291)|0);
      $319 = $318&255;
      $320 = (($312) + 2)|0;
      $321 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($316)|0);
      HEAP8[$321>>0] = $319;
      $322 = (_mad_bit_read($ptr,$291)|0);
      $323 = $322&255;
      $324 = (($312) + 3)|0;
      $325 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($320)|0);
      HEAP8[$325>>0] = $323;
      $326 = (_mad_bit_read($ptr,$291)|0);
      $327 = $326&255;
      $328 = (($312) + 4)|0;
      $329 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($324)|0);
      HEAP8[$329>>0] = $327;
      $330 = (_mad_bit_read($ptr,$291)|0);
      $331 = $330&255;
      $332 = (($312) + 5)|0;
      $333 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($328)|0);
      HEAP8[$333>>0] = $331;
      $334 = (_mad_bit_read($ptr,$291)|0);
      $335 = $334&255;
      $336 = (($312) + 6)|0;
      $337 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($332)|0);
      HEAP8[$337>>0] = $335;
      $338 = (_mad_bit_read($ptr,$291)|0);
      $339 = $338&255;
      $340 = (($312) + 7)|0;
      $341 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($336)|0);
      HEAP8[$341>>0] = $339;
      $342 = (_mad_bit_read($ptr,$291)|0);
      $343 = $342&255;
      $344 = $297 | 12;
      $345 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($340)|0);
      HEAP8[$345>>0] = $343;
      $346 = (_mad_bit_read($ptr,$291)|0);
      $347 = $346&255;
      $348 = (($344) + 1)|0;
      $349 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($344)|0);
      HEAP8[$349>>0] = $347;
      $350 = (_mad_bit_read($ptr,$291)|0);
      $351 = $350&255;
      $352 = (($344) + 2)|0;
      $353 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($348)|0);
      HEAP8[$353>>0] = $351;
      $354 = (_mad_bit_read($ptr,$291)|0);
      $355 = $354&255;
      $356 = (($344) + 3)|0;
      $357 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($352)|0);
      HEAP8[$357>>0] = $355;
      $358 = (_mad_bit_read($ptr,$291)|0);
      $359 = $358&255;
      $360 = (($344) + 4)|0;
      $361 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($356)|0);
      HEAP8[$361>>0] = $359;
      $362 = (_mad_bit_read($ptr,$291)|0);
      $363 = $362&255;
      $364 = (($344) + 5)|0;
      $365 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($360)|0);
      HEAP8[$365>>0] = $363;
      $366 = (_mad_bit_read($ptr,$291)|0);
      $367 = $366&255;
      $368 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($364)|0);
      HEAP8[$368>>0] = $367;
      $369 = $297 | 36;
      $uglygep$i6 = (($68) + ($369)|0);
      ;HEAP8[$uglygep$i6>>0]=0|0;HEAP8[$uglygep$i6+1>>0]=0|0;HEAP8[$uglygep$i6+2>>0]=0|0;
     } else {
      $376 = $377 & 8;
      $378 = ($376|0)==(0);
      if ($378) {
       $396 = (_mad_bit_read($ptr,$288)|0);
       $397 = $396&255;
       $398 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0);
       HEAP8[$398>>0] = $397;
       $399 = (_mad_bit_read($ptr,$288)|0);
       $400 = $399&255;
       $401 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 19|0);
       HEAP8[$401>>0] = $400;
       $402 = (_mad_bit_read($ptr,$288)|0);
       $403 = $402&255;
       $404 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 20|0);
       HEAP8[$404>>0] = $403;
       $405 = (_mad_bit_read($ptr,$288)|0);
       $406 = $405&255;
       $407 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 21|0);
       HEAP8[$407>>0] = $406;
       $408 = (_mad_bit_read($ptr,$288)|0);
       $409 = $408&255;
       $410 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 22|0);
       HEAP8[$410>>0] = $409;
       $411 = (_mad_bit_read($ptr,$288)|0);
       $412 = $411&255;
       $$sink = $412;
      } else {
       $379 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 18|0);
       $380 = HEAP8[$379>>0]|0;
       $381 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0);
       HEAP8[$381>>0] = $380;
       $382 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 19|0);
       $383 = HEAP8[$382>>0]|0;
       $384 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 19|0);
       HEAP8[$384>>0] = $383;
       $385 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 20|0);
       $386 = HEAP8[$385>>0]|0;
       $387 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 20|0);
       HEAP8[$387>>0] = $386;
       $388 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 21|0);
       $389 = HEAP8[$388>>0]|0;
       $390 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 21|0);
       HEAP8[$390>>0] = $389;
       $391 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 22|0);
       $392 = HEAP8[$391>>0]|0;
       $393 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 22|0);
       HEAP8[$393>>0] = $392;
       $394 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 23|0);
       $395 = HEAP8[$394>>0]|0;
       $$sink = $395;
      }
      $413 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 23|0);
      HEAP8[$413>>0] = $$sink;
      $414 = $377 & 4;
      $415 = ($414|0)==(0);
      if ($415) {
       $430 = (_mad_bit_read($ptr,$288)|0);
       $431 = $430&255;
       $432 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 24|0);
       HEAP8[$432>>0] = $431;
       $433 = (_mad_bit_read($ptr,$288)|0);
       $434 = $433&255;
       $435 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 25|0);
       HEAP8[$435>>0] = $434;
       $436 = (_mad_bit_read($ptr,$288)|0);
       $437 = $436&255;
       $438 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 26|0);
       HEAP8[$438>>0] = $437;
       $439 = (_mad_bit_read($ptr,$288)|0);
       $440 = $439&255;
       $441 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 27|0);
       HEAP8[$441>>0] = $440;
       $442 = (_mad_bit_read($ptr,$288)|0);
       $443 = $442&255;
       $$sink237 = $443;
      } else {
       $416 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 24|0);
       $417 = HEAP8[$416>>0]|0;
       $418 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 24|0);
       HEAP8[$418>>0] = $417;
       $419 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 25|0);
       $420 = HEAP8[$419>>0]|0;
       $421 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 25|0);
       HEAP8[$421>>0] = $420;
       $422 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 26|0);
       $423 = HEAP8[$422>>0]|0;
       $424 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 26|0);
       HEAP8[$424>>0] = $423;
       $425 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 27|0);
       $426 = HEAP8[$425>>0]|0;
       $427 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 27|0);
       HEAP8[$427>>0] = $426;
       $428 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 28|0);
       $429 = HEAP8[$428>>0]|0;
       $$sink237 = $429;
      }
      $444 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 28|0);
      HEAP8[$444>>0] = $$sink237;
      $445 = $377 & 2;
      $446 = ($445|0)==(0);
      if ($446) {
       $461 = (_mad_bit_read($ptr,$291)|0);
       $462 = $461&255;
       $463 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 29|0);
       HEAP8[$463>>0] = $462;
       $464 = (_mad_bit_read($ptr,$291)|0);
       $465 = $464&255;
       $466 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 30|0);
       HEAP8[$466>>0] = $465;
       $467 = (_mad_bit_read($ptr,$291)|0);
       $468 = $467&255;
       $469 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 31|0);
       HEAP8[$469>>0] = $468;
       $470 = (_mad_bit_read($ptr,$291)|0);
       $471 = $470&255;
       $472 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 32|0);
       HEAP8[$472>>0] = $471;
       $473 = (_mad_bit_read($ptr,$291)|0);
       $474 = $473&255;
       $$sink238 = $474;
      } else {
       $447 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 29|0);
       $448 = HEAP8[$447>>0]|0;
       $449 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 29|0);
       HEAP8[$449>>0] = $448;
       $450 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 30|0);
       $451 = HEAP8[$450>>0]|0;
       $452 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 30|0);
       HEAP8[$452>>0] = $451;
       $453 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 31|0);
       $454 = HEAP8[$453>>0]|0;
       $455 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 31|0);
       HEAP8[$455>>0] = $454;
       $456 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 32|0);
       $457 = HEAP8[$456>>0]|0;
       $458 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 32|0);
       HEAP8[$458>>0] = $457;
       $459 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 33|0);
       $460 = HEAP8[$459>>0]|0;
       $$sink238 = $460;
      }
      $475 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 33|0);
      HEAP8[$475>>0] = $$sink238;
      $476 = $377 & 1;
      $477 = ($476|0)==(0);
      if ($477) {
       $492 = (_mad_bit_read($ptr,$291)|0);
       $493 = $492&255;
       $494 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 34|0);
       HEAP8[$494>>0] = $493;
       $495 = (_mad_bit_read($ptr,$291)|0);
       $496 = $495&255;
       $497 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 35|0);
       HEAP8[$497>>0] = $496;
       $498 = (_mad_bit_read($ptr,$291)|0);
       $499 = $498&255;
       $500 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 36|0);
       HEAP8[$500>>0] = $499;
       $501 = (_mad_bit_read($ptr,$291)|0);
       $502 = $501&255;
       $503 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 37|0);
       HEAP8[$503>>0] = $502;
       $504 = (_mad_bit_read($ptr,$291)|0);
       $505 = $504&255;
       $$sink239 = $505;
      } else {
       $478 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 34|0);
       $479 = HEAP8[$478>>0]|0;
       $480 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 34|0);
       HEAP8[$480>>0] = $479;
       $481 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 35|0);
       $482 = HEAP8[$481>>0]|0;
       $483 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 35|0);
       HEAP8[$483>>0] = $482;
       $484 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 36|0);
       $485 = HEAP8[$484>>0]|0;
       $486 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 36|0);
       HEAP8[$486>>0] = $485;
       $487 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 37|0);
       $488 = HEAP8[$487>>0]|0;
       $489 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 37|0);
       HEAP8[$489>>0] = $488;
       $490 = (((((($si)) + 10|0) + (($ch$0174*58)|0)|0)) + 38|0);
       $491 = HEAP8[$490>>0]|0;
       $$sink239 = $491;
      }
      $506 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 38|0);
      HEAP8[$506>>0] = $$sink239;
      $507 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 39|0);
      HEAP8[$507>>0] = 0;
     }
     $508 = (_mad_bit_length($start$i4,$ptr)|0);
     $part2_length$0 = $508;
    } else {
     $82 = ($ch$0174|0)==(0);
     $83 = $82 ? 0 : $27;
     $84 = HEAP32[$17>>2]|0;
     $85 = $ptr;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $88 = (($85) + 4)|0;
     $89 = $88;
     $90 = HEAP32[$89>>2]|0;
     $91 = $start$i;
     $92 = $91;
     HEAP32[$92>>2] = $87;
     $93 = (($91) + 4)|0;
     $94 = $93;
     HEAP32[$94>>2] = $90;
     $95 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 6|0);
     $96 = HEAP16[$95>>1]|0;
     $97 = $96&65535;
     if ($72) {
      $98 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 8|0);
      $99 = HEAP8[$98>>0]|0;
      $100 = $99 & 8;
      $101 = $100&255;
      $102 = $101 >>> 3;
      $103 = (($102) + 1)|0;
      $117 = $103;
     } else {
      $117 = 0;
     }
     $104 = $84 & 1;
     $105 = ($104|0)!=(0);
     $106 = ($83|0)!=(0|0);
     $or$cond$i = $106 & $105;
     if ($or$cond$i) {
      $149 = $97 >>> 1;
      $150 = ($96&65535)<(360);
      do {
       if ($150) {
        $div2$i = (($96&65535) / 72)&-1;
        $151 = $div2$i&65535;
        $152 = (($149>>>0) % 36)&-1;
        $153 = (($152>>>0) / 6)&-1;
        $154 = (($152>>>0) % 6)&-1;
        $155 = (67247 + ($117<<2)|0);
        $169 = $151;$184 = $153;$204 = $154;$nsfb$1$i = $155;
       } else {
        $156 = ($96&65535)<(488);
        if ($156) {
         $157 = (($149) + -180)|0;
         $158 = $157 >>> 4;
         $159 = $158 & 3;
         $160 = $157 >>> 2;
         $161 = $160 & 3;
         $162 = $157 & 3;
         $163 = (67259 + ($117<<2)|0);
         $169 = $159;$184 = $161;$204 = $162;$nsfb$1$i = $163;
         break;
        } else {
         $164 = (($149) + -244)|0;
         $165 = (($164>>>0) / 3)&-1;
         $166 = (($164>>>0) % 3)&-1;
         $167 = (67271 + ($117<<2)|0);
         $169 = $165;$184 = $166;$204 = 0;$nsfb$1$i = $167;
         break;
        }
       }
      } while(0);
      $168 = 1 << $169;
      $170 = (($168) + -1)|0;
      $171 = HEAP8[$nsfb$1$i>>0]|0;
      $172 = ($171<<24>>24)==(0);
      if ($172) {
       $n$4$lcssa$i = 0;
      } else {
       $i$18$i = 0;
       while(1) {
        $173 = (_mad_bit_read($ptr,$169)|0);
        $174 = $173&255;
        $175 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($i$18$i)|0);
        HEAP8[$175>>0] = $174;
        $176 = ($173|0)==($170|0);
        $177 = $176&1;
        $178 = (($i$18$i) + 1)|0;
        $179 = (((($83)) + 18|0) + ($i$18$i)|0);
        HEAP8[$179>>0] = $177;
        $180 = HEAP8[$nsfb$1$i>>0]|0;
        $181 = $180&255;
        $182 = ($178>>>0)<($181>>>0);
        if ($182) {
         $i$18$i = $178;
        } else {
         $n$4$lcssa$i = $178;
         break;
        }
       }
      }
      $183 = 1 << $184;
      $185 = (($183) + -1)|0;
      $186 = ((($nsfb$1$i)) + 1|0);
      $187 = HEAP8[$186>>0]|0;
      $188 = ($187<<24>>24)==(0);
      if ($188) {
       $n$4$lcssa$1$i = $n$4$lcssa$i;
      } else {
       $i$18$1$i = 0;$n$47$1$i = $n$4$lcssa$i;
       while(1) {
        $192 = (_mad_bit_read($ptr,$184)|0);
        $193 = $192&255;
        $194 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$47$1$i)|0);
        HEAP8[$194>>0] = $193;
        $195 = ($192|0)==($185|0);
        $196 = $195&1;
        $197 = (($n$47$1$i) + 1)|0;
        $198 = (((($83)) + 18|0) + ($n$47$1$i)|0);
        HEAP8[$198>>0] = $196;
        $199 = (($i$18$1$i) + 1)|0;
        $200 = HEAP8[$186>>0]|0;
        $201 = $200&255;
        $202 = ($199>>>0)<($201>>>0);
        if ($202) {
         $i$18$1$i = $199;$n$47$1$i = $197;
        } else {
         $n$4$lcssa$1$i = $197;
         break;
        }
       }
      }
      $203 = 1 << $204;
      $205 = (($203) + -1)|0;
      $206 = ((($nsfb$1$i)) + 2|0);
      $207 = HEAP8[$206>>0]|0;
      $208 = ($207<<24>>24)==(0);
      if ($208) {
       $n$4$lcssa$2$i = $n$4$lcssa$1$i;
      } else {
       $i$18$2$i = 0;$n$47$2$i = $n$4$lcssa$1$i;
       while(1) {
        $209 = (_mad_bit_read($ptr,$204)|0);
        $210 = $209&255;
        $211 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$47$2$i)|0);
        HEAP8[$211>>0] = $210;
        $212 = ($209|0)==($205|0);
        $213 = $212&1;
        $214 = (($n$47$2$i) + 1)|0;
        $215 = (((($83)) + 18|0) + ($n$47$2$i)|0);
        HEAP8[$215>>0] = $213;
        $216 = (($i$18$2$i) + 1)|0;
        $217 = HEAP8[$206>>0]|0;
        $218 = $217&255;
        $219 = ($216>>>0)<($218>>>0);
        if ($219) {
         $i$18$2$i = $216;$n$47$2$i = $214;
        } else {
         $n$4$lcssa$2$i = $214;
         break;
        }
       }
      }
      $220 = ((($nsfb$1$i)) + 3|0);
      $221 = HEAP8[$220>>0]|0;
      $222 = ($221<<24>>24)==(0);
      if ($222) {
       $n$4$lcssa$3$i = $n$4$lcssa$2$i;
      } else {
       $i$18$3$i = 0;$n$47$3$i = $n$4$lcssa$2$i;
       while(1) {
        $223 = (_mad_bit_read($ptr,0)|0);
        $224 = $223&255;
        $225 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$47$3$i)|0);
        HEAP8[$225>>0] = $224;
        $226 = ($223|0)==(0);
        $227 = $226&1;
        $228 = (($n$47$3$i) + 1)|0;
        $229 = (((($83)) + 18|0) + ($n$47$3$i)|0);
        HEAP8[$229>>0] = $227;
        $230 = (($i$18$3$i) + 1)|0;
        $231 = HEAP8[$220>>0]|0;
        $232 = $231&255;
        $233 = ($230>>>0)<($232>>>0);
        if ($233) {
         $i$18$3$i = $230;$n$47$3$i = $228;
        } else {
         $n$4$lcssa$3$i = $228;
         break;
        }
       }
      }
      $234 = ($n$4$lcssa$3$i>>>0)<(39);
      if ($234) {
       $n$56$i = $n$4$lcssa$3$i;
       while(1) {
        $189 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$56$i)|0);
        HEAP8[$189>>0] = 0;
        $190 = (($n$56$i) + 1)|0;
        $191 = (((($83)) + 18|0) + ($n$56$i)|0);
        HEAP8[$191>>0] = 0;
        $exitcond$i = ($190|0)==(39);
        if ($exitcond$i) {
         break;
        } else {
         $n$56$i = $190;
        }
       }
      }
     } else {
      $107 = ($96&65535)<(400);
      do {
       if ($107) {
        $108 = $97 >>> 4;
        $div$i = (($96&65535) / 80)&-1;
        $109 = $div$i&65535;
        $110 = (($108>>>0) % 5)&-1;
        $111 = $96 & 12;
        $112 = $111&65535;
        $113 = $112 >>> 2;
        $114 = $96 & 3;
        $115 = $114&65535;
        $116 = (67211 + ($117<<2)|0);
        $138 = $109;$235 = $110;$247 = $113;$259 = $115;$nsfb$0$i = $116;
       } else {
        $118 = ($96&65535)<(500);
        if ($118) {
         $119 = (($97) + -400)|0;
         $120 = $119 >>> 2;
         $121 = (($119>>>0) / 20)&-1;
         $122 = (($120>>>0) % 5)&-1;
         $123 = $119 & 3;
         $124 = (67223 + ($117<<2)|0);
         $138 = $121;$235 = $122;$247 = $123;$259 = 0;$nsfb$0$i = $124;
         break;
        } else {
         $125 = (($97) + -500)|0;
         $126 = (($125>>>0) / 3)&-1;
         $127 = (($125>>>0) % 3)&-1;
         $128 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 8|0);
         $129 = HEAP8[$128>>0]|0;
         $130 = $129&255;
         $131 = $130 | 4;
         $132 = $131&255;
         HEAP8[$128>>0] = $132;
         $133 = (67235 + ($117<<2)|0);
         $138 = $126;$235 = $127;$247 = 0;$259 = 0;$nsfb$0$i = $133;
         break;
        }
       }
      } while(0);
      $134 = HEAP8[$nsfb$0$i>>0]|0;
      $135 = ($134<<24>>24)==(0);
      if ($135) {
       $n$1$lcssa$i = 0;
      } else {
       $i$015$i = 0;
       while(1) {
        $139 = (_mad_bit_read($ptr,$138)|0);
        $140 = $139&255;
        $141 = (($i$015$i) + 1)|0;
        $142 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($i$015$i)|0);
        HEAP8[$142>>0] = $140;
        $143 = HEAP8[$nsfb$0$i>>0]|0;
        $144 = $143&255;
        $145 = ($141>>>0)<($144>>>0);
        if ($145) {
         $i$015$i = $141;
        } else {
         $n$1$lcssa$i = $141;
         break;
        }
       }
      }
      $146 = ((($nsfb$0$i)) + 1|0);
      $147 = HEAP8[$146>>0]|0;
      $148 = ($147<<24>>24)==(0);
      if ($148) {
       $n$1$lcssa$1$i = $n$1$lcssa$i;
      } else {
       $i$015$1$i = 0;$n$114$1$i = $n$1$lcssa$i;
       while(1) {
        $236 = (_mad_bit_read($ptr,$235)|0);
        $237 = $236&255;
        $238 = (($n$114$1$i) + 1)|0;
        $239 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$114$1$i)|0);
        HEAP8[$239>>0] = $237;
        $240 = (($i$015$1$i) + 1)|0;
        $241 = HEAP8[$146>>0]|0;
        $242 = $241&255;
        $243 = ($240>>>0)<($242>>>0);
        if ($243) {
         $i$015$1$i = $240;$n$114$1$i = $238;
        } else {
         $n$1$lcssa$1$i = $238;
         break;
        }
       }
      }
      $244 = ((($nsfb$0$i)) + 2|0);
      $245 = HEAP8[$244>>0]|0;
      $246 = ($245<<24>>24)==(0);
      if ($246) {
       $n$1$lcssa$2$i = $n$1$lcssa$1$i;
      } else {
       $i$015$2$i = 0;$n$114$2$i = $n$1$lcssa$1$i;
       while(1) {
        $248 = (_mad_bit_read($ptr,$247)|0);
        $249 = $248&255;
        $250 = (($n$114$2$i) + 1)|0;
        $251 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$114$2$i)|0);
        HEAP8[$251>>0] = $249;
        $252 = (($i$015$2$i) + 1)|0;
        $253 = HEAP8[$244>>0]|0;
        $254 = $253&255;
        $255 = ($252>>>0)<($254>>>0);
        if ($255) {
         $i$015$2$i = $252;$n$114$2$i = $250;
        } else {
         $n$1$lcssa$2$i = $250;
         break;
        }
       }
      }
      $256 = ((($nsfb$0$i)) + 3|0);
      $257 = HEAP8[$256>>0]|0;
      $258 = ($257<<24>>24)==(0);
      if ($258) {
       $n$1$lcssa$3$i = $n$1$lcssa$2$i;
      } else {
       $i$015$3$i = 0;$n$114$3$i = $n$1$lcssa$2$i;
       while(1) {
        $260 = (_mad_bit_read($ptr,$259)|0);
        $261 = $260&255;
        $262 = (($n$114$3$i) + 1)|0;
        $263 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($n$114$3$i)|0);
        HEAP8[$263>>0] = $261;
        $264 = (($i$015$3$i) + 1)|0;
        $265 = HEAP8[$256>>0]|0;
        $266 = $265&255;
        $267 = ($264>>>0)<($266>>>0);
        if ($267) {
         $i$015$3$i = $264;$n$114$3$i = $262;
        } else {
         $n$1$lcssa$3$i = $262;
         break;
        }
       }
      }
      $268 = ($n$1$lcssa$3$i>>>0)<(39);
      if ($268) {
       $136 = (($n$1$lcssa$3$i) + 18)|0;
       $uglygep$i = (($68) + ($136)|0);
       $137 = (39 - ($n$1$lcssa$3$i))|0;
       _memset(($uglygep$i|0),0,($137|0))|0;
      }
     }
     $269 = (_mad_bit_length($start$i,$ptr)|0);
     $part2_length$0 = $269;
    }
    $509 = (($xr) + (($ch$0174*2304)|0)|0);
    $510 = HEAP16[$68>>1]|0;
    $511 = $510&65535;
    $512 = (($511) - ($part2_length$0))|0;
    $513 = ($512|0)<(0);
    if ($513) {
     $$1$i$ph = 566;
     label = 211;
     break L4;
    }
    $514 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 4|0);
    $515 = HEAP16[$514>>1]|0;
    $516 = $515&65535;
    $517 = (($516) + -210)|0;
    $518 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 8|0);
    $519 = HEAP8[$518>>0]|0;
    $520 = $519&255;
    $521 = $520 >>> 1;
    $522 = $521 & 1;
    $523 = (($522) + 1)|0;
    $524 = HEAP8[$70>>0]|0;
    $525 = ($524<<24>>24)==(2);
    if ($525) {
     $526 = $520 & 8;
     $527 = ($526|0)==(0);
     if ($527) {
      $l$1$i$i = 0;$sfbi$1$i$i = 0;
     } else {
      $528 = $520 << 29;
      $sext$i$i = $528 >> 31;
      $l$012$i$i = 0;$sfbi$013$i$i = 0;
      while(1) {
       $529 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($sfbi$013$i$i)|0);
       $530 = HEAP8[$529>>0]|0;
       $531 = $530&255;
       $532 = (67315 + ($sfbi$013$i$i)|0);
       $533 = HEAP8[$532>>0]|0;
       $534 = $533&255;
       $535 = $534 & $sext$i$i;
       $536 = (($535) + ($531))|0;
       $537 = $536 << $523;
       $538 = (($517) - ($537))|0;
       $539 = (($exponents$i) + ($sfbi$013$i$i<<2)|0);
       HEAP32[$539>>2] = $538;
       $540 = (($sfbi$013$i$i) + 1)|0;
       $541 = (($78) + ($sfbi$013$i$i)|0);
       $542 = HEAP8[$541>>0]|0;
       $543 = $542&255;
       $544 = (($543) + ($l$012$i$i))|0;
       $545 = ($544>>>0)<(36);
       if ($545) {
        $l$012$i$i = $544;$sfbi$013$i$i = $540;
       } else {
        $l$1$i$i = $544;$sfbi$1$i$i = $540;
        break;
       }
      }
     }
     $546 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 13|0);
     $547 = HEAP8[$546>>0]|0;
     $548 = $547&255;
     $549 = $548 << 3;
     $550 = (($517) - ($549))|0;
     $551 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 14|0);
     $552 = HEAP8[$551>>0]|0;
     $553 = $552&255;
     $554 = $553 << 3;
     $555 = (($517) - ($554))|0;
     $556 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 15|0);
     $557 = HEAP8[$556>>0]|0;
     $558 = $557&255;
     $559 = $558 << 3;
     $560 = (($517) - ($559))|0;
     $561 = ($l$1$i$i>>>0)<(576);
     if ($561) {
      $l$210$i$i = $l$1$i$i;$sfbi$211$i$i = $sfbi$1$i$i;
      while(1) {
       $562 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($sfbi$211$i$i)|0);
       $563 = HEAP8[$562>>0]|0;
       $564 = $563&255;
       $565 = $564 << $523;
       $566 = (($550) - ($565))|0;
       $567 = (($exponents$i) + ($sfbi$211$i$i<<2)|0);
       HEAP32[$567>>2] = $566;
       $568 = (($sfbi$211$i$i) + 1)|0;
       $569 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($568)|0);
       $570 = HEAP8[$569>>0]|0;
       $571 = $570&255;
       $572 = $571 << $523;
       $573 = (($555) - ($572))|0;
       $574 = (($exponents$i) + ($568<<2)|0);
       HEAP32[$574>>2] = $573;
       $575 = (($sfbi$211$i$i) + 2)|0;
       $576 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($575)|0);
       $577 = HEAP8[$576>>0]|0;
       $578 = $577&255;
       $579 = $578 << $523;
       $580 = (($560) - ($579))|0;
       $581 = (($exponents$i) + ($575<<2)|0);
       HEAP32[$581>>2] = $580;
       $582 = (($78) + ($sfbi$211$i$i)|0);
       $583 = HEAP8[$582>>0]|0;
       $584 = $583&255;
       $585 = ($584*3)|0;
       $586 = (($585) + ($l$210$i$i))|0;
       $587 = (($sfbi$211$i$i) + 3)|0;
       $588 = ($586>>>0)<(576);
       if ($588) {
        $l$210$i$i = $586;$sfbi$211$i$i = $587;
       } else {
        break;
       }
      }
     }
    } else {
     $589 = $520 & 4;
     $590 = ($589|0)==(0);
     if ($590) {
      $sfbi$414$i$i = 0;
      while(1) {
       $602 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($sfbi$414$i$i)|0);
       $603 = HEAP8[$602>>0]|0;
       $604 = $603&255;
       $605 = $604 << $523;
       $606 = (($517) - ($605))|0;
       $607 = (($exponents$i) + ($sfbi$414$i$i<<2)|0);
       HEAP32[$607>>2] = $606;
       $608 = (($sfbi$414$i$i) + 1)|0;
       $exitcond$i$i = ($608|0)==(22);
       if ($exitcond$i$i) {
        break;
       } else {
        $sfbi$414$i$i = $608;
       }
      }
     } else {
      $sfbi$315$i$i = 0;
      while(1) {
       $591 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 18|0) + ($sfbi$315$i$i)|0);
       $592 = HEAP8[$591>>0]|0;
       $593 = $592&255;
       $594 = (67315 + ($sfbi$315$i$i)|0);
       $595 = HEAP8[$594>>0]|0;
       $596 = $595&255;
       $597 = (($596) + ($593))|0;
       $598 = $597 << $523;
       $599 = (($517) - ($598))|0;
       $600 = (($exponents$i) + ($sfbi$315$i$i<<2)|0);
       HEAP32[$600>>2] = $599;
       $601 = (($sfbi$315$i$i) + 1)|0;
       $exitcond17$i$i = ($601|0)==(22);
       if ($exitcond17$i$i) {
        break;
       } else {
        $sfbi$315$i$i = $601;
       }
      }
     }
    }
    $609 = $ptr;
    $610 = $609;
    $611 = HEAP32[$610>>2]|0;
    $612 = (($609) + 4)|0;
    $613 = $612;
    $614 = HEAP32[$613>>2]|0;
    $615 = $peek$i;
    $616 = $615;
    HEAP32[$616>>2] = $611;
    $617 = (($615) + 4)|0;
    $618 = $617;
    HEAP32[$618>>2] = $614;
    _mad_bit_skip($ptr,$512);
    $619 = (_bitshift64Lshr(($611|0),($614|0),48)|0);
    $620 = tempRet0;
    $621 = (31 - ($619))|0;
    $622 = $621 & -8;
    $623 = (($622) + ($619))|0;
    $624 = (_mad_bit_read($peek$i,$623)|0);
    $625 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 10|0);
    $626 = HEAP8[$625>>0]|0;
    $627 = $626&255;
    $628 = (6256 + ($627<<3)|0);
    $629 = HEAP32[$628>>2]|0;
    $630 = ($629|0)==(0|0);
    if ($630) {
     label = 161;
     break L4;
    }
    $631 = HEAP8[$78>>0]|0;
    $632 = $631&255;
    $633 = ((($xr) + (($ch$0174*2304)|0)|0) + ($632<<2)|0);
    $634 = ((($78)) + 1|0);
    $635 = (($512) - ($623))|0;
    $636 = HEAP32[$exponents$i>>2]|0;
    $637 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 2|0);
    $638 = HEAP16[$637>>1]|0;
    $639 = ($638<<16>>16)!=(0);
    $640 = ($512|0)>(0);
    $or$cond60$i = $640 & $639;
    if ($or$cond60$i) {
     $641 = $638&65535;
     $642 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 16|0);
     $643 = HEAP8[$642>>0]|0;
     $644 = $643&255;
     $645 = (($644) + 1)|0;
     $646 = (((6256 + ($627<<3)|0)) + 4|0);
     $647 = HEAP16[$646>>1]|0;
     $648 = $647&65535;
     $649 = (((6256 + ($627<<3)|0)) + 6|0);
     $650 = HEAP16[$649>>1]|0;
     $651 = $650&65535;
     $652 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 17|0);
     $$0175$i = $634;$$in$i = $641;$bitcache$068$i = $624;$bits_left$063$i = $635;$cachesz$064$i = $623;$exp$061$i = $636;$expptr$062$i = $25;$linbits$072$i = $648;$rcount$070$i = $645;$region$069$i = 0;$reqhits$074$i = 0;$sfbound$067$i = $633;$startbits$073$i = $651;$table$071$i = $629;$xrptr$065$i = $509;
     while(1) {
      $653 = (($$in$i) + -1)|0;
      $654 = ($xrptr$065$i|0)==($sfbound$067$i|0);
      if ($654) {
       $655 = ((($$0175$i)) + 1|0);
       $656 = HEAP8[$$0175$i>>0]|0;
       $657 = $656&255;
       $658 = (($sfbound$067$i) + ($657<<2)|0);
       $659 = (($rcount$070$i) + -1)|0;
       $660 = ($659|0)==(0);
       if ($660) {
        $661 = ($region$069$i|0)==(0);
        if ($661) {
         $662 = HEAP8[$652>>0]|0;
         $663 = $662&255;
         $664 = (($663) + 1)|0;
         $rcount$1$i = $664;
        } else {
         $rcount$1$i = 0;
        }
        $665 = (($region$069$i) + 1)|0;
        $666 = (((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$0174*58)|0)|0)) + 10|0) + ($665)|0);
        $667 = HEAP8[$666>>0]|0;
        $668 = $667&255;
        $669 = (6256 + ($668<<3)|0);
        $670 = HEAP32[$669>>2]|0;
        $671 = (((6256 + ($668<<3)|0)) + 4|0);
        $672 = HEAP16[$671>>1]|0;
        $673 = $672&65535;
        $674 = (((6256 + ($668<<3)|0)) + 6|0);
        $675 = HEAP16[$674>>1]|0;
        $676 = $675&65535;
        $677 = ($670|0)==(0|0);
        if ($677) {
         label = 161;
         break L4;
        } else {
         $linbits$1$i = $673;$rcount$2$i = $rcount$1$i;$region$1$i = $665;$startbits$1$i = $676;$table$1$i = $670;
        }
       } else {
        $linbits$1$i = $linbits$072$i;$rcount$2$i = $659;$region$1$i = $region$069$i;$startbits$1$i = $startbits$073$i;$table$1$i = $table$071$i;
       }
       $678 = HEAP32[$expptr$062$i>>2]|0;
       $679 = ($exp$061$i|0)==($678|0);
       $reqhits$0$$i = $679 ? $reqhits$074$i : 0;
       $680 = ((($expptr$062$i)) + 4|0);
       $$12$i = $655;$exp$2$i = $678;$expptr$1$i = $680;$linbits$2$i = $linbits$1$i;$rcount$3$i = $rcount$2$i;$region$2$i = $region$1$i;$reqhits$2$i = $reqhits$0$$i;$sfbound$1$i = $658;$startbits$2$i = $startbits$1$i;$table$2$i = $table$1$i;
      } else {
       $$12$i = $$0175$i;$exp$2$i = $exp$061$i;$expptr$1$i = $expptr$062$i;$linbits$2$i = $linbits$072$i;$rcount$3$i = $rcount$070$i;$region$2$i = $region$069$i;$reqhits$2$i = $reqhits$074$i;$sfbound$1$i = $sfbound$067$i;$startbits$2$i = $startbits$073$i;$table$2$i = $table$071$i;
      }
      $681 = ($cachesz$064$i|0)<(21);
      if ($681) {
       $682 = (31 - ($cachesz$064$i))|0;
       $683 = $682 & -8;
       $684 = $bitcache$068$i << $683;
       $685 = (_mad_bit_read($peek$i,$683)|0);
       $686 = $685 | $684;
       $687 = (($683) + ($cachesz$064$i))|0;
       $688 = (($bits_left$063$i) - ($683))|0;
       $bitcache$1$i = $686;$bits_left$1$i = $688;$cachesz$1$i = $687;
      } else {
       $bitcache$1$i = $bitcache$068$i;$bits_left$1$i = $bits_left$063$i;$cachesz$1$i = $cachesz$064$i;
      }
      $689 = (($cachesz$1$i) - ($startbits$2$i))|0;
      $690 = $bitcache$1$i >>> $689;
      $691 = 1 << $startbits$2$i;
      $692 = (($691) + -1)|0;
      $693 = $690 & $692;
      $pair$053$i = (($table$2$i) + ($693<<1)|0);
      $694 = HEAP8[$pair$053$i>>0]|0;
      $695 = $694 & 1;
      $696 = ($695<<24>>24)==(0);
      if ($696) {
       $699 = $693;$cachesz$254$i = $cachesz$1$i;$clumpsz$055$i = $startbits$2$i;
       while(1) {
        $697 = (($cachesz$254$i) - ($clumpsz$055$i))|0;
        $698 = (($table$2$i) + ($699<<1)|0);
        $700 = HEAP16[$698>>1]|0;
        $701 = ($700&65535) >>> 1;
        $702 = $701 & 7;
        $703 = $702&65535;
        $704 = ($700&65535) >>> 4;
        $705 = $704&65535;
        $706 = (($697) - ($703))|0;
        $707 = $bitcache$1$i >>> $706;
        $708 = 1 << $703;
        $709 = (($708) + -1)|0;
        $710 = $707 & $709;
        $711 = (($710) + ($705))|0;
        $pair$0$i = (($table$2$i) + ($711<<1)|0);
        $712 = HEAP8[$pair$0$i>>0]|0;
        $713 = $712 & 1;
        $714 = ($713<<24>>24)==(0);
        if ($714) {
         $699 = $711;$cachesz$254$i = $697;$clumpsz$055$i = $703;
        } else {
         $716 = $711;$cachesz$2$lcssa$i = $697;
         break;
        }
       }
      } else {
       $716 = $693;$cachesz$2$lcssa$i = $cachesz$1$i;
      }
      $715 = (($table$2$i) + ($716<<1)|0);
      $717 = HEAP16[$715>>1]|0;
      $718 = ($717&65535) >>> 1;
      $719 = $718 & 7;
      $720 = $719&65535;
      $721 = (($cachesz$2$lcssa$i) - ($720))|0;
      $722 = ($linbits$2$i|0)==(0);
      $723 = ($717&65535) >>> 4;
      $724 = $723 & 15;
      $725 = $724&65535;
      L137: do {
       if ($722) {
        $894 = ($724<<16>>16)==(0);
        if ($894) {
         $cachesz$8$i = $721;$reqhits$7$i = $reqhits$2$i;$storemerge$i = 0;
        } else {
         $895 = 1 << $725;
         $896 = $895 & $reqhits$2$i;
         $897 = ($896|0)==(0);
         if ($897) {
          $900 = $895 | $reqhits$2$i;
          $901 = (($exp$2$i|0) % 4)&-1;
          $902 = (($exp$2$i|0) / 4)&-1;
          $903 = (6940 + ($725<<2)|0);
          $904 = HEAP32[$903>>2]|0;
          $905 = $904 & 134217727;
          $906 = $904 >>> 27;
          $907 = (($906) + ($902))|0;
          $908 = ($907|0)<(0);
          do {
           if ($908) {
            $909 = (0 - ($907))|0;
            $910 = ($909>>>0)>(31);
            if ($910) {
             $requantized$0$i14$i = 0;
             break;
            }
            $911 = $907 ^ -1;
            $912 = 1 << $911;
            $913 = (($912) + ($905))|0;
            $914 = $913 >> $909;
            $requantized$0$i14$i = $914;
           } else {
            $915 = ($907|0)>(4);
            if ($915) {
             $916 = (+($905|0));
             $917 = $916 * 3.7252902984619141E-9;
             HEAPF64[$vararg_buffer14>>3] = $917;
             $vararg_ptr17 = ((($vararg_buffer14)) + 8|0);
             HEAP32[$vararg_ptr17>>2] = $907;
             (_fprintf($26,67337,$vararg_buffer14)|0);
             $requantized$0$i14$i = 2147483647;
             break;
            } else {
             $918 = $905 << $907;
             $requantized$0$i14$i = $918;
             break;
            }
           }
          } while(0);
          $919 = ($901|0)==(0);
          if ($919) {
           $929 = $requantized$0$i14$i;
          } else {
           $920 = (($requantized$0$i14$i) + 2048)|0;
           $921 = $920 >> 12;
           $922 = (($901) + 3)|0;
           $923 = (39768 + ($922<<2)|0);
           $924 = HEAP32[$923>>2]|0;
           $925 = (($924) + 32768)|0;
           $926 = $925 >> 16;
           $927 = Math_imul($926, $921)|0;
           $929 = $927;
          }
          $928 = (($reqcache$i) + ($725<<2)|0);
          HEAP32[$928>>2] = $929;
          $reqhits$6$i = $900;$requantized$2$i = $929;
         } else {
          $898 = (($reqcache$i) + ($725<<2)|0);
          $899 = HEAP32[$898>>2]|0;
          $reqhits$6$i = $reqhits$2$i;$requantized$2$i = $899;
         }
         $930 = (($721) + -1)|0;
         $931 = 1 << $930;
         $932 = $931 & $bitcache$1$i;
         $933 = ($932|0)!=(0);
         $934 = (0 - ($requantized$2$i))|0;
         $935 = $933 ? $934 : $requantized$2$i;
         $cachesz$8$i = $930;$reqhits$7$i = $reqhits$6$i;$storemerge$i = $935;
        }
        HEAP32[$xrptr$065$i>>2] = $storemerge$i;
        $936 = HEAP16[$715>>1]|0;
        $937 = ($936&65535) >>> 8;
        $938 = $937 & 15;
        $939 = $938&65535;
        $940 = ($938<<16>>16)==(0);
        if ($940) {
         $941 = ((($xrptr$065$i)) + 4|0);
         HEAP32[$941>>2] = 0;
         $bitcache$7$i = $bitcache$1$i;$bits_left$7$i = $bits_left$1$i;$cachesz$9$i = $cachesz$8$i;$reqhits$9$i = $reqhits$7$i;
         break;
        }
        $942 = 1 << $939;
        $943 = $942 & $reqhits$7$i;
        $944 = ($943|0)==(0);
        if ($944) {
         $947 = $942 | $reqhits$7$i;
         $948 = (($exp$2$i|0) % 4)&-1;
         $949 = (($exp$2$i|0) / 4)&-1;
         $950 = (6940 + ($939<<2)|0);
         $951 = HEAP32[$950>>2]|0;
         $952 = $951 & 134217727;
         $953 = $951 >>> 27;
         $954 = (($953) + ($949))|0;
         $955 = ($954|0)<(0);
         do {
          if ($955) {
           $956 = (0 - ($954))|0;
           $957 = ($956>>>0)>(31);
           if ($957) {
            $requantized$0$i16$i = 0;
            break;
           }
           $958 = $954 ^ -1;
           $959 = 1 << $958;
           $960 = (($959) + ($952))|0;
           $961 = $960 >> $956;
           $requantized$0$i16$i = $961;
          } else {
           $962 = ($954|0)>(4);
           if ($962) {
            $963 = (+($952|0));
            $964 = $963 * 3.7252902984619141E-9;
            HEAPF64[$vararg_buffer18>>3] = $964;
            $vararg_ptr21 = ((($vararg_buffer18)) + 8|0);
            HEAP32[$vararg_ptr21>>2] = $954;
            (_fprintf($26,67337,$vararg_buffer18)|0);
            $requantized$0$i16$i = 2147483647;
            break;
           } else {
            $965 = $952 << $954;
            $requantized$0$i16$i = $965;
            break;
           }
          }
         } while(0);
         $966 = ($948|0)==(0);
         if ($966) {
          $976 = $requantized$0$i16$i;
         } else {
          $967 = (($requantized$0$i16$i) + 2048)|0;
          $968 = $967 >> 12;
          $969 = (($948) + 3)|0;
          $970 = (39768 + ($969<<2)|0);
          $971 = HEAP32[$970>>2]|0;
          $972 = (($971) + 32768)|0;
          $973 = $972 >> 16;
          $974 = Math_imul($973, $968)|0;
          $976 = $974;
         }
         $975 = (($reqcache$i) + ($939<<2)|0);
         HEAP32[$975>>2] = $976;
         $reqhits$8$i = $947;$requantized$3$i = $976;
        } else {
         $945 = (($reqcache$i) + ($939<<2)|0);
         $946 = HEAP32[$945>>2]|0;
         $reqhits$8$i = $reqhits$7$i;$requantized$3$i = $946;
        }
        $977 = (($cachesz$8$i) + -1)|0;
        $978 = 1 << $977;
        $979 = $978 & $bitcache$1$i;
        $980 = ($979|0)!=(0);
        $981 = (0 - ($requantized$3$i))|0;
        $982 = $980 ? $981 : $requantized$3$i;
        $983 = ((($xrptr$065$i)) + 4|0);
        HEAP32[$983>>2] = $982;
        $bitcache$7$i = $bitcache$1$i;$bits_left$7$i = $bits_left$1$i;$cachesz$9$i = $977;$reqhits$9$i = $reqhits$8$i;
       } else {
        L176: do {
         switch ($725|0) {
         case 0:  {
          $bitcache$4$i = $bitcache$1$i;$bits_left$4$i = $bits_left$1$i;$cachesz$5$i = $721;$reqhits$4$i = $reqhits$2$i;$storemerge4$i = 0;
          break;
         }
         case 15:  {
          $726 = (($linbits$2$i) + 2)|0;
          $727 = ($721>>>0)<($726>>>0);
          if ($727) {
           $728 = $bitcache$1$i << 16;
           $729 = (_mad_bit_read($peek$i,16)|0);
           $730 = $729 | $728;
           $731 = (($721) + 16)|0;
           $732 = (($bits_left$1$i) + -16)|0;
           $bitcache$2$i = $730;$bits_left$2$i = $732;$cachesz$3$i = $731;
          } else {
           $bitcache$2$i = $bitcache$1$i;$bits_left$2$i = $bits_left$1$i;$cachesz$3$i = $721;
          }
          $733 = (($cachesz$3$i) - ($linbits$2$i))|0;
          $734 = $bitcache$2$i >>> $733;
          $735 = 1 << $linbits$2$i;
          $736 = (($735) + -1)|0;
          $737 = $734 & $736;
          $738 = (($737) + 15)|0;
          $739 = (($exp$2$i|0) % 4)&-1;
          $740 = (($exp$2$i|0) / 4)&-1;
          $741 = (6940 + ($738<<2)|0);
          $742 = HEAP32[$741>>2]|0;
          $743 = $742 & 134217727;
          $744 = $742 >>> 27;
          $745 = (($744) + ($740))|0;
          $746 = ($745|0)<(0);
          do {
           if ($746) {
            $747 = (0 - ($745))|0;
            $748 = ($747>>>0)>(31);
            if ($748) {
             $requantized$0$i6$i = 0;
             break;
            }
            $749 = $745 ^ -1;
            $750 = 1 << $749;
            $751 = (($750) + ($743))|0;
            $752 = $751 >> $747;
            $requantized$0$i6$i = $752;
           } else {
            $753 = ($745|0)>(4);
            if ($753) {
             $754 = (+($743|0));
             $755 = $754 * 3.7252902984619141E-9;
             HEAPF64[$vararg_buffer>>3] = $755;
             $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
             HEAP32[$vararg_ptr1>>2] = $745;
             (_fprintf($26,67337,$vararg_buffer)|0);
             $requantized$0$i6$i = 2147483647;
             break;
            } else {
             $756 = $743 << $745;
             $requantized$0$i6$i = $756;
             break;
            }
           }
          } while(0);
          $757 = ($739|0)==(0);
          if ($757) {
           $bitcache$3$i = $bitcache$2$i;$bits_left$3$i = $bits_left$2$i;$cachesz$4$i = $733;$reqhits$3$i = $reqhits$2$i;$requantized$0$i = $requantized$0$i6$i;
           label = 108;
           break L176;
          }
          $758 = (($requantized$0$i6$i) + 2048)|0;
          $759 = $758 >> 12;
          $760 = (($739) + 3)|0;
          $761 = (39768 + ($760<<2)|0);
          $762 = HEAP32[$761>>2]|0;
          $763 = (($762) + 32768)|0;
          $764 = $763 >> 16;
          $765 = Math_imul($764, $759)|0;
          $bitcache$3$i = $bitcache$2$i;$bits_left$3$i = $bits_left$2$i;$cachesz$4$i = $733;$reqhits$3$i = $reqhits$2$i;$requantized$0$i = $765;
          label = 108;
          break;
         }
         default: {
          $766 = 1 << $725;
          $767 = $766 & $reqhits$2$i;
          $768 = ($767|0)==(0);
          if (!($768)) {
           $769 = (($reqcache$i) + ($725<<2)|0);
           $770 = HEAP32[$769>>2]|0;
           $bitcache$3$i = $bitcache$1$i;$bits_left$3$i = $bits_left$1$i;$cachesz$4$i = $721;$reqhits$3$i = $reqhits$2$i;$requantized$0$i = $770;
           label = 108;
           break L176;
          }
          $771 = $766 | $reqhits$2$i;
          $772 = (($exp$2$i|0) % 4)&-1;
          $773 = (($exp$2$i|0) / 4)&-1;
          $774 = (6940 + ($725<<2)|0);
          $775 = HEAP32[$774>>2]|0;
          $776 = $775 & 134217727;
          $777 = $775 >>> 27;
          $778 = (($777) + ($773))|0;
          $779 = ($778|0)<(0);
          do {
           if ($779) {
            $780 = (0 - ($778))|0;
            $781 = ($780>>>0)>(31);
            if ($781) {
             $requantized$0$i8$i = 0;
             break;
            }
            $782 = $778 ^ -1;
            $783 = 1 << $782;
            $784 = (($783) + ($776))|0;
            $785 = $784 >> $780;
            $requantized$0$i8$i = $785;
           } else {
            $786 = ($778|0)>(4);
            if ($786) {
             $787 = (+($776|0));
             $788 = $787 * 3.7252902984619141E-9;
             HEAPF64[$vararg_buffer2>>3] = $788;
             $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
             HEAP32[$vararg_ptr5>>2] = $778;
             (_fprintf($26,67337,$vararg_buffer2)|0);
             $requantized$0$i8$i = 2147483647;
             break;
            } else {
             $789 = $776 << $778;
             $requantized$0$i8$i = $789;
             break;
            }
           }
          } while(0);
          $790 = ($772|0)==(0);
          if ($790) {
           $800 = $requantized$0$i8$i;
          } else {
           $791 = (($requantized$0$i8$i) + 2048)|0;
           $792 = $791 >> 12;
           $793 = (($772) + 3)|0;
           $794 = (39768 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = (($795) + 32768)|0;
           $797 = $796 >> 16;
           $798 = Math_imul($797, $792)|0;
           $800 = $798;
          }
          $799 = (($reqcache$i) + ($725<<2)|0);
          HEAP32[$799>>2] = $800;
          $bitcache$3$i = $bitcache$1$i;$bits_left$3$i = $bits_left$1$i;$cachesz$4$i = $721;$reqhits$3$i = $771;$requantized$0$i = $800;
          label = 108;
         }
         }
        } while(0);
        if ((label|0) == 108) {
         label = 0;
         $801 = (($cachesz$4$i) + -1)|0;
         $802 = 1 << $801;
         $803 = $802 & $bitcache$3$i;
         $804 = ($803|0)!=(0);
         $805 = (0 - ($requantized$0$i))|0;
         $806 = $804 ? $805 : $requantized$0$i;
         $bitcache$4$i = $bitcache$3$i;$bits_left$4$i = $bits_left$3$i;$cachesz$5$i = $801;$reqhits$4$i = $reqhits$3$i;$storemerge4$i = $806;
        }
        HEAP32[$xrptr$065$i>>2] = $storemerge4$i;
        $807 = HEAP16[$715>>1]|0;
        $808 = ($807&65535) >>> 8;
        $809 = $808 & 15;
        $810 = $809&65535;
        L208: do {
         switch ($810|0) {
         case 0:  {
          $811 = ((($xrptr$065$i)) + 4|0);
          HEAP32[$811>>2] = 0;
          $bitcache$7$i = $bitcache$4$i;$bits_left$7$i = $bits_left$4$i;$cachesz$9$i = $cachesz$5$i;$reqhits$9$i = $reqhits$4$i;
          break L137;
          break;
         }
         case 15:  {
          $812 = (($linbits$2$i) + 1)|0;
          $813 = ($cachesz$5$i>>>0)<($812>>>0);
          if ($813) {
           $814 = $bitcache$4$i << 16;
           $815 = (_mad_bit_read($peek$i,16)|0);
           $816 = $815 | $814;
           $817 = (($cachesz$5$i) + 16)|0;
           $818 = (($bits_left$4$i) + -16)|0;
           $bitcache$5$i = $816;$bits_left$5$i = $818;$cachesz$6$i = $817;
          } else {
           $bitcache$5$i = $bitcache$4$i;$bits_left$5$i = $bits_left$4$i;$cachesz$6$i = $cachesz$5$i;
          }
          $819 = (($cachesz$6$i) - ($linbits$2$i))|0;
          $820 = $bitcache$5$i >>> $819;
          $821 = 1 << $linbits$2$i;
          $822 = (($821) + -1)|0;
          $823 = $820 & $822;
          $824 = (($823) + 15)|0;
          $825 = (($exp$2$i|0) % 4)&-1;
          $826 = (($exp$2$i|0) / 4)&-1;
          $827 = (6940 + ($824<<2)|0);
          $828 = HEAP32[$827>>2]|0;
          $829 = $828 & 134217727;
          $830 = $828 >>> 27;
          $831 = (($830) + ($826))|0;
          $832 = ($831|0)<(0);
          do {
           if ($832) {
            $833 = (0 - ($831))|0;
            $834 = ($833>>>0)>(31);
            if ($834) {
             $requantized$0$i10$i = 0;
             break;
            }
            $835 = $831 ^ -1;
            $836 = 1 << $835;
            $837 = (($836) + ($829))|0;
            $838 = $837 >> $833;
            $requantized$0$i10$i = $838;
           } else {
            $839 = ($831|0)>(4);
            if ($839) {
             $840 = (+($829|0));
             $841 = $840 * 3.7252902984619141E-9;
             HEAPF64[$vararg_buffer6>>3] = $841;
             $vararg_ptr9 = ((($vararg_buffer6)) + 8|0);
             HEAP32[$vararg_ptr9>>2] = $831;
             (_fprintf($26,67337,$vararg_buffer6)|0);
             $requantized$0$i10$i = 2147483647;
             break;
            } else {
             $842 = $829 << $831;
             $requantized$0$i10$i = $842;
             break;
            }
           }
          } while(0);
          $843 = ($825|0)==(0);
          if ($843) {
           $bitcache$6$i = $bitcache$5$i;$bits_left$6$i = $bits_left$5$i;$cachesz$7$i = $819;$reqhits$5$i = $reqhits$4$i;$requantized$1$i = $requantized$0$i10$i;
           break L208;
          }
          $844 = (($requantized$0$i10$i) + 2048)|0;
          $845 = $844 >> 12;
          $846 = (($825) + 3)|0;
          $847 = (39768 + ($846<<2)|0);
          $848 = HEAP32[$847>>2]|0;
          $849 = (($848) + 32768)|0;
          $850 = $849 >> 16;
          $851 = Math_imul($850, $845)|0;
          $bitcache$6$i = $bitcache$5$i;$bits_left$6$i = $bits_left$5$i;$cachesz$7$i = $819;$reqhits$5$i = $reqhits$4$i;$requantized$1$i = $851;
          break;
         }
         default: {
          $852 = 1 << $810;
          $853 = $852 & $reqhits$4$i;
          $854 = ($853|0)==(0);
          if (!($854)) {
           $855 = (($reqcache$i) + ($810<<2)|0);
           $856 = HEAP32[$855>>2]|0;
           $bitcache$6$i = $bitcache$4$i;$bits_left$6$i = $bits_left$4$i;$cachesz$7$i = $cachesz$5$i;$reqhits$5$i = $reqhits$4$i;$requantized$1$i = $856;
           break L208;
          }
          $857 = $852 | $reqhits$4$i;
          $858 = (($exp$2$i|0) % 4)&-1;
          $859 = (($exp$2$i|0) / 4)&-1;
          $860 = (6940 + ($810<<2)|0);
          $861 = HEAP32[$860>>2]|0;
          $862 = $861 & 134217727;
          $863 = $861 >>> 27;
          $864 = (($863) + ($859))|0;
          $865 = ($864|0)<(0);
          do {
           if ($865) {
            $866 = (0 - ($864))|0;
            $867 = ($866>>>0)>(31);
            if ($867) {
             $requantized$0$i12$i = 0;
             break;
            }
            $868 = $864 ^ -1;
            $869 = 1 << $868;
            $870 = (($869) + ($862))|0;
            $871 = $870 >> $866;
            $requantized$0$i12$i = $871;
           } else {
            $872 = ($864|0)>(4);
            if ($872) {
             $873 = (+($862|0));
             $874 = $873 * 3.7252902984619141E-9;
             HEAPF64[$vararg_buffer10>>3] = $874;
             $vararg_ptr13 = ((($vararg_buffer10)) + 8|0);
             HEAP32[$vararg_ptr13>>2] = $864;
             (_fprintf($26,67337,$vararg_buffer10)|0);
             $requantized$0$i12$i = 2147483647;
             break;
            } else {
             $875 = $862 << $864;
             $requantized$0$i12$i = $875;
             break;
            }
           }
          } while(0);
          $876 = ($858|0)==(0);
          if ($876) {
           $886 = $requantized$0$i12$i;
          } else {
           $877 = (($requantized$0$i12$i) + 2048)|0;
           $878 = $877 >> 12;
           $879 = (($858) + 3)|0;
           $880 = (39768 + ($879<<2)|0);
           $881 = HEAP32[$880>>2]|0;
           $882 = (($881) + 32768)|0;
           $883 = $882 >> 16;
           $884 = Math_imul($883, $878)|0;
           $886 = $884;
          }
          $885 = (($reqcache$i) + ($810<<2)|0);
          HEAP32[$885>>2] = $886;
          $bitcache$6$i = $bitcache$4$i;$bits_left$6$i = $bits_left$4$i;$cachesz$7$i = $cachesz$5$i;$reqhits$5$i = $857;$requantized$1$i = $886;
         }
         }
        } while(0);
        $887 = (($cachesz$7$i) + -1)|0;
        $888 = 1 << $887;
        $889 = $888 & $bitcache$6$i;
        $890 = ($889|0)!=(0);
        $891 = (0 - ($requantized$1$i))|0;
        $892 = $890 ? $891 : $requantized$1$i;
        $893 = ((($xrptr$065$i)) + 4|0);
        HEAP32[$893>>2] = $892;
        $bitcache$7$i = $bitcache$6$i;$bits_left$7$i = $bits_left$6$i;$cachesz$9$i = $887;$reqhits$9$i = $reqhits$5$i;
       }
      } while(0);
      $984 = ((($xrptr$065$i)) + 8|0);
      $985 = ($653|0)!=(0);
      $986 = (($cachesz$9$i) + ($bits_left$7$i))|0;
      $987 = ($986|0)>(0);
      $or$cond$i9 = $985 & $987;
      if ($or$cond$i9) {
       $$0175$i = $$12$i;$$in$i = $653;$bitcache$068$i = $bitcache$7$i;$bits_left$063$i = $bits_left$7$i;$cachesz$064$i = $cachesz$9$i;$exp$061$i = $exp$2$i;$expptr$062$i = $expptr$1$i;$linbits$072$i = $linbits$2$i;$rcount$070$i = $rcount$3$i;$region$069$i = $region$2$i;$reqhits$074$i = $reqhits$9$i;$sfbound$067$i = $sfbound$1$i;$startbits$073$i = $startbits$2$i;$table$071$i = $table$2$i;$xrptr$065$i = $984;
      } else {
       $$01$lcssa$i = $$12$i;$bitcache$0$lcssa$i = $bitcache$7$i;$bits_left$0$lcssa$i = $bits_left$7$i;$cachesz$0$lcssa$i = $cachesz$9$i;$exp$0$lcssa$i = $exp$2$i;$expptr$0$lcssa$i = $expptr$1$i;$sfbound$0$lcssa$i = $sfbound$1$i;$xrptr$0$lcssa$i = $984;
       break;
      }
     }
    } else {
     $$01$lcssa$i = $634;$bitcache$0$lcssa$i = $624;$bits_left$0$lcssa$i = $635;$cachesz$0$lcssa$i = $623;$exp$0$lcssa$i = $636;$expptr$0$lcssa$i = $25;$sfbound$0$lcssa$i = $633;$xrptr$0$lcssa$i = $509;
    }
    $988 = (($bits_left$0$lcssa$i) + ($cachesz$0$lcssa$i))|0;
    $989 = ($988|0)<(0);
    if ($989) {
     $$1$i$ph = 568;
     label = 211;
     break L4;
    }
    $990 = HEAP8[$518>>0]|0;
    $991 = $990&255;
    $992 = $991 & 1;
    $993 = (6248 + ($992<<2)|0);
    $994 = HEAP32[$993>>2]|0;
    $995 = (($exp$0$lcssa$i|0) % 4)&-1;
    $996 = (($exp$0$lcssa$i|0) / 4)&-1;
    $997 = (($996) + 2)|0;
    $998 = ($exp$0$lcssa$i|0)<(-11);
    do {
     if ($998) {
      $999 = (-2 - ($996))|0;
      $1000 = ($999>>>0)>(31);
      if ($1000) {
       $requantized$0$i18$i = 0;
      } else {
       $1001 = (-3 - ($996))|0;
       $1002 = 1 << $1001;
       $1003 = (($1002) + 67108864)|0;
       $1004 = $1003 >> $999;
       $requantized$0$i18$i = $1004;
      }
     } else {
      $1005 = ($997|0)>(4);
      if ($1005) {
       HEAPF64[$vararg_buffer22>>3] = 0.25;
       $vararg_ptr25 = ((($vararg_buffer22)) + 8|0);
       HEAP32[$vararg_ptr25>>2] = $997;
       (_fprintf($26,67337,$vararg_buffer22)|0);
       $requantized$0$i18$i = 2147483647;
       break;
      } else {
       $1006 = 67108864 << $997;
       $requantized$0$i18$i = $1006;
       break;
      }
     }
    } while(0);
    $1007 = ($995|0)==(0);
    if ($1007) {
     $requantized2$0$ph$i = $requantized$0$i18$i;
    } else {
     $1008 = (($requantized$0$i18$i) + 2048)|0;
     $1009 = $1008 >> 12;
     $1010 = (($995) + 3)|0;
     $1011 = (39768 + ($1010<<2)|0);
     $1012 = HEAP32[$1011>>2]|0;
     $1013 = (($1012) + 32768)|0;
     $1014 = $1013 >> 16;
     $1015 = Math_imul($1014, $1009)|0;
     $requantized2$0$ph$i = $1015;
    }
    $1016 = ($988|0)>(0);
    $1017 = (((($xr) + (($ch$0174*2304)|0)|0)) + 2288|0);
    $1018 = ($xrptr$0$lcssa$i>>>0)<=($1017>>>0);
    $1019 = $1018 & $1016;
    if ($1019) {
     $$348$i = $$01$lcssa$i;$bitcache$947$i = $bitcache$0$lcssa$i;$bits_left$943$i = $bits_left$0$lcssa$i;$cachesz$1144$i = $cachesz$0$lcssa$i;$exp$441$i = $exp$0$lcssa$i;$expptr$342$i = $expptr$0$lcssa$i;$requantized2$049$i = $requantized2$0$ph$i;$sfbound$346$i = $sfbound$0$lcssa$i;$xrptr$245$i = $xrptr$0$lcssa$i;
     while(1) {
      $1020 = ($cachesz$1144$i|0)<(10);
      if ($1020) {
       $1021 = $bitcache$947$i << 16;
       $1022 = (_mad_bit_read($peek$i,16)|0);
       $1023 = $1022 | $1021;
       $1024 = (($cachesz$1144$i) + 16)|0;
       $1025 = (($bits_left$943$i) + -16)|0;
       $bitcache$10$i = $1023;$bits_left$10$i = $1025;$cachesz$12$i = $1024;
      } else {
       $bitcache$10$i = $bitcache$947$i;$bits_left$10$i = $bits_left$943$i;$cachesz$12$i = $cachesz$1144$i;
      }
      $1026 = (($cachesz$12$i) + -4)|0;
      $1027 = $bitcache$10$i >>> $1026;
      $1028 = $1027 & 15;
      $1029 = (($994) + ($1028<<1)|0);
      $1030 = HEAP8[$1029>>0]|0;
      $1031 = $1030 & 1;
      $1032 = ($1031<<24>>24)==(0);
      if ($1032) {
       $1033 = HEAP16[$1029>>1]|0;
       $1034 = ($1033&65535) >>> 4;
       $1035 = $1034&65535;
       $1036 = ($1033&65535) >>> 1;
       $1037 = $1036 & 7;
       $1038 = $1037&65535;
       $1039 = (($1026) - ($1038))|0;
       $1040 = $bitcache$10$i >>> $1039;
       $1041 = 1 << $1038;
       $1042 = (($1041) + -1)|0;
       $1043 = $1040 & $1042;
       $1044 = (($1043) + ($1035))|0;
       $1045 = (($994) + ($1044<<1)|0);
       $$pre$i = HEAP8[$1045>>0]|0;
       $1047 = $$pre$i;$cachesz$13$i = $1026;$quad$0$i = $1045;
      } else {
       $1047 = $1030;$cachesz$13$i = $cachesz$12$i;$quad$0$i = $1029;
      }
      $1046 = ($1047&255) >>> 1;
      $1048 = $1046 & 7;
      $1049 = $1048&255;
      $1050 = (($cachesz$13$i) - ($1049))|0;
      $1051 = ($xrptr$245$i|0)==($sfbound$346$i|0);
      if ($1051) {
       $1052 = ((($$348$i)) + 1|0);
       $1053 = HEAP8[$$348$i>>0]|0;
       $1054 = $1053&255;
       $1055 = (($sfbound$346$i) + ($1054<<2)|0);
       $1056 = HEAP32[$expptr$342$i>>2]|0;
       $1057 = ($exp$441$i|0)==($1056|0);
       do {
        if ($1057) {
         $exp$5$i = $exp$441$i;$requantized2$1$i = $requantized2$049$i;
        } else {
         $1058 = (($1056|0) % 4)&-1;
         $1059 = (($1056|0) / 4)&-1;
         $1060 = (($1059) + 2)|0;
         $1061 = ($1056|0)<(-11);
         do {
          if ($1061) {
           $1062 = (-2 - ($1059))|0;
           $1063 = ($1062>>>0)>(31);
           if ($1063) {
            $requantized$0$i20$i = 0;
            break;
           }
           $1064 = (-3 - ($1059))|0;
           $1065 = 1 << $1064;
           $1066 = (($1065) + 67108864)|0;
           $1067 = $1066 >> $1062;
           $requantized$0$i20$i = $1067;
          } else {
           $1068 = ($1060|0)>(4);
           if ($1068) {
            HEAPF64[$vararg_buffer26>>3] = 0.25;
            $vararg_ptr29 = ((($vararg_buffer26)) + 8|0);
            HEAP32[$vararg_ptr29>>2] = $1060;
            (_fprintf($26,67337,$vararg_buffer26)|0);
            $requantized$0$i20$i = 2147483647;
            break;
           } else {
            $1069 = 67108864 << $1060;
            $requantized$0$i20$i = $1069;
            break;
           }
          }
         } while(0);
         $1070 = ($1058|0)==(0);
         if ($1070) {
          $exp$5$i = $1056;$requantized2$1$i = $requantized$0$i20$i;
          break;
         }
         $1071 = (($requantized$0$i20$i) + 2048)|0;
         $1072 = $1071 >> 12;
         $1073 = (($1058) + 3)|0;
         $1074 = (39768 + ($1073<<2)|0);
         $1075 = HEAP32[$1074>>2]|0;
         $1076 = (($1075) + 32768)|0;
         $1077 = $1076 >> 16;
         $1078 = Math_imul($1077, $1072)|0;
         $exp$5$i = $1056;$requantized2$1$i = $1078;
        }
       } while(0);
       $1079 = ((($expptr$342$i)) + 4|0);
       $$pre94$i = HEAP8[$quad$0$i>>0]|0;
       $$4$i = $1052;$1081 = $$pre94$i;$exp$6$i = $exp$5$i;$expptr$4$i = $1079;$requantized2$2$i = $requantized2$1$i;$sfbound$4$i = $1055;
      } else {
       $$4$i = $$348$i;$1081 = $1047;$exp$6$i = $exp$441$i;$expptr$4$i = $expptr$342$i;$requantized2$2$i = $requantized2$049$i;$sfbound$4$i = $sfbound$346$i;
      }
      $1080 = $1081 & 16;
      $1082 = ($1080<<24>>24)==(0);
      if ($1082) {
       $1089 = 0;$cachesz$14$i = $1050;
      } else {
       $1083 = (($1050) + -1)|0;
       $1084 = 1 << $1083;
       $1085 = $1084 & $bitcache$10$i;
       $1086 = ($1085|0)!=(0);
       $1087 = (0 - ($requantized2$2$i))|0;
       $1088 = $1086 ? $1087 : $requantized2$2$i;
       $1089 = $1088;$cachesz$14$i = $1083;
      }
      HEAP32[$xrptr$245$i>>2] = $1089;
      $1090 = HEAP8[$quad$0$i>>0]|0;
      $1091 = $1090 & 32;
      $1092 = ($1091<<24>>24)==(0);
      if ($1092) {
       $1100 = 0;$cachesz$15$i = $cachesz$14$i;
      } else {
       $1093 = (($cachesz$14$i) + -1)|0;
       $1094 = 1 << $1093;
       $1095 = $1094 & $bitcache$10$i;
       $1096 = ($1095|0)!=(0);
       $1097 = (0 - ($requantized2$2$i))|0;
       $1098 = $1096 ? $1097 : $requantized2$2$i;
       $1100 = $1098;$cachesz$15$i = $1093;
      }
      $1099 = ((($xrptr$245$i)) + 4|0);
      HEAP32[$1099>>2] = $1100;
      $1101 = ((($xrptr$245$i)) + 8|0);
      $1102 = ($1101|0)==($sfbound$4$i|0);
      if ($1102) {
       $1103 = ((($$4$i)) + 1|0);
       $1104 = HEAP8[$$4$i>>0]|0;
       $1105 = $1104&255;
       $1106 = (($sfbound$4$i) + ($1105<<2)|0);
       $1107 = HEAP32[$expptr$4$i>>2]|0;
       $1108 = ($exp$6$i|0)==($1107|0);
       do {
        if ($1108) {
         $exp$7$i = $exp$6$i;$requantized2$3$i = $requantized2$2$i;
        } else {
         $1109 = (($1107|0) % 4)&-1;
         $1110 = (($1107|0) / 4)&-1;
         $1111 = (($1110) + 2)|0;
         $1112 = ($1107|0)<(-11);
         do {
          if ($1112) {
           $1113 = (-2 - ($1110))|0;
           $1114 = ($1113>>>0)>(31);
           if ($1114) {
            $requantized$0$i$i = 0;
            break;
           }
           $1115 = (-3 - ($1110))|0;
           $1116 = 1 << $1115;
           $1117 = (($1116) + 67108864)|0;
           $1118 = $1117 >> $1113;
           $requantized$0$i$i = $1118;
          } else {
           $1119 = ($1111|0)>(4);
           if ($1119) {
            HEAPF64[$vararg_buffer30>>3] = 0.25;
            $vararg_ptr33 = ((($vararg_buffer30)) + 8|0);
            HEAP32[$vararg_ptr33>>2] = $1111;
            (_fprintf($26,67337,$vararg_buffer30)|0);
            $requantized$0$i$i = 2147483647;
            break;
           } else {
            $1120 = 67108864 << $1111;
            $requantized$0$i$i = $1120;
            break;
           }
          }
         } while(0);
         $1121 = ($1109|0)==(0);
         if ($1121) {
          $exp$7$i = $1107;$requantized2$3$i = $requantized$0$i$i;
          break;
         }
         $1122 = (($requantized$0$i$i) + 2048)|0;
         $1123 = $1122 >> 12;
         $1124 = (($1109) + 3)|0;
         $1125 = (39768 + ($1124<<2)|0);
         $1126 = HEAP32[$1125>>2]|0;
         $1127 = (($1126) + 32768)|0;
         $1128 = $1127 >> 16;
         $1129 = Math_imul($1128, $1123)|0;
         $exp$7$i = $1107;$requantized2$3$i = $1129;
        }
       } while(0);
       $1130 = ((($expptr$4$i)) + 4|0);
       $$5$i = $1103;$exp$8$i = $exp$7$i;$expptr$5$i = $1130;$requantized2$4$i = $requantized2$3$i;$sfbound$5$i = $1106;
      } else {
       $$5$i = $$4$i;$exp$8$i = $exp$6$i;$expptr$5$i = $expptr$4$i;$requantized2$4$i = $requantized2$2$i;$sfbound$5$i = $sfbound$4$i;
      }
      $1131 = HEAP8[$quad$0$i>>0]|0;
      $1132 = $1131 & 64;
      $1133 = ($1132<<24>>24)==(0);
      if ($1133) {
       $1140 = 0;$cachesz$16$i = $cachesz$15$i;
      } else {
       $1134 = (($cachesz$15$i) + -1)|0;
       $1135 = 1 << $1134;
       $1136 = $1135 & $bitcache$10$i;
       $1137 = ($1136|0)!=(0);
       $1138 = (0 - ($requantized2$4$i))|0;
       $1139 = $1137 ? $1138 : $requantized2$4$i;
       $1140 = $1139;$cachesz$16$i = $1134;
      }
      HEAP32[$1101>>2] = $1140;
      $1141 = HEAP8[$quad$0$i>>0]|0;
      $1142 = ($1141<<24>>24)<(0);
      if ($1142) {
       $1143 = (($cachesz$16$i) + -1)|0;
       $1144 = 1 << $1143;
       $1145 = $1144 & $bitcache$10$i;
       $1146 = ($1145|0)!=(0);
       $1147 = (0 - ($requantized2$4$i))|0;
       $1148 = $1146 ? $1147 : $requantized2$4$i;
       $1150 = $1148;$cachesz$17$i = $1143;
      } else {
       $1150 = 0;$cachesz$17$i = $cachesz$16$i;
      }
      $1149 = ((($xrptr$245$i)) + 12|0);
      HEAP32[$1149>>2] = $1150;
      $1151 = ((($xrptr$245$i)) + 16|0);
      $1152 = (($cachesz$17$i) + ($bits_left$10$i))|0;
      $1153 = ($1152|0)>(0);
      $1154 = ($1151>>>0)<=($1017>>>0);
      $1155 = $1154 & $1153;
      if ($1155) {
       $$348$i = $$5$i;$bitcache$947$i = $bitcache$10$i;$bits_left$943$i = $bits_left$10$i;$cachesz$1144$i = $cachesz$17$i;$exp$441$i = $exp$8$i;$expptr$342$i = $expptr$5$i;$requantized2$049$i = $requantized2$4$i;$sfbound$346$i = $sfbound$5$i;$xrptr$245$i = $1151;
      } else {
       $$lcssa$i = $1152;$bits_left$9$lcssa$i = $bits_left$10$i;$xrptr$2$lcssa$i = $1151;
       break;
      }
     }
    } else {
     $$lcssa$i = $988;$bits_left$9$lcssa$i = $bits_left$0$lcssa$i;$xrptr$2$lcssa$i = $xrptr$0$lcssa$i;
    }
    $1156 = ($$lcssa$i|0)<(0);
    $1157 = ((($xrptr$2$lcssa$i)) + -16|0);
    $$xrptr$2$i = $1156 ? $1157 : $xrptr$2$lcssa$i;
    $1158 = ($bits_left$9$lcssa$i|0)>(-65);
    if (!($1158)) {
     label = 209;
     break L4;
    }
    $1159 = (((($xr) + (($ch$0174*2304)|0)|0)) + 2304|0);
    $1160 = ($$xrptr$2$i>>>0)<($1159>>>0);
    if ($1160) {
     $xrptr$440$i = $$xrptr$2$i;
     while(1) {
      HEAP32[$xrptr$440$i>>2] = 0;
      $1161 = ((($xrptr$440$i)) + 4|0);
      HEAP32[$1161>>2] = 0;
      $1162 = ((($xrptr$440$i)) + 8|0);
      $1163 = ($1162>>>0)<($1159>>>0);
      if ($1163) {
       $xrptr$440$i = $1162;
      } else {
       break;
      }
     }
    }
    $1164 = (($ch$0174) + 1)|0;
    $1165 = ($1164>>>0)<($nch>>>0);
    if ($1165) {
     $ch$0174 = $1164;
    } else {
     break;
    }
   }
  }
  $1166 = HEAP32[$16>>2]|0;
  $1167 = ($1166|0)==(2);
  if ($1167) {
   $1168 = HEAP32[$17>>2]|0;
   $1169 = ($1168|0)==(0);
   if (!($1169)) {
    $1170 = HEAP32[$sfbwidth>>2]|0;
    $1171 = (((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 9|0);
    $1172 = HEAP8[$1171>>0]|0;
    $1173 = (((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 67|0);
    $1174 = HEAP8[$1173>>0]|0;
    $1175 = ($1172<<24>>24)==($1174<<24>>24);
    if (!($1175)) {
     label = 275;
     break;
    }
    $1176 = (((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 8|0);
    $1177 = HEAP8[$1176>>0]|0;
    $1178 = (((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 66|0);
    $1179 = HEAP8[$1178>>0]|0;
    $1180 = $1179 ^ $1177;
    $1181 = $1180 & 8;
    $1182 = ($1181<<24>>24)==(0);
    if (!($1182)) {
     label = 275;
     break;
    }
    $1183 = $1168&65535;
    HEAP16[$modes$i>>1] = $1183;
    HEAP16[$28>>1] = $1183;
    HEAP16[$29>>1] = $1183;
    HEAP16[$30>>1] = $1183;
    HEAP16[$31>>1] = $1183;
    HEAP16[$32>>1] = $1183;
    HEAP16[$33>>1] = $1183;
    HEAP16[$34>>1] = $1183;
    HEAP16[$35>>1] = $1183;
    HEAP16[$36>>1] = $1183;
    HEAP16[$37>>1] = $1183;
    HEAP16[$38>>1] = $1183;
    HEAP16[$39>>1] = $1183;
    HEAP16[$40>>1] = $1183;
    HEAP16[$41>>1] = $1183;
    HEAP16[$42>>1] = $1183;
    HEAP16[$43>>1] = $1183;
    HEAP16[$44>>1] = $1183;
    HEAP16[$45>>1] = $1183;
    HEAP16[$46>>1] = $1183;
    HEAP16[$47>>1] = $1183;
    HEAP16[$48>>1] = $1183;
    HEAP16[$49>>1] = $1183;
    HEAP16[$50>>1] = $1183;
    HEAP16[$51>>1] = $1183;
    HEAP16[$52>>1] = $1183;
    HEAP16[$53>>1] = $1183;
    HEAP16[$54>>1] = $1183;
    HEAP16[$55>>1] = $1183;
    HEAP16[$56>>1] = $1183;
    HEAP16[$57>>1] = $1183;
    HEAP16[$58>>1] = $1183;
    HEAP16[$59>>1] = $1183;
    HEAP16[$60>>1] = $1183;
    HEAP16[$61>>1] = $1183;
    HEAP16[$62>>1] = $1183;
    HEAP16[$63>>1] = $1183;
    HEAP16[$64>>1] = $1183;
    HEAP16[$65>>1] = $1183;
    $1184 = $1168 & 1;
    $1185 = ($1184|0)==(0);
    L316: do {
     if (!($1185)) {
      $1186 = HEAP32[$2>>2]|0;
      $1187 = $1186 | 256;
      HEAP32[$2>>2] = $1187;
      $1188 = ($1172<<24>>24)==(2);
      if ($1188) {
       HEAP32[$19>>2] = 0;
       HEAP32[$20>>2] = 0;
       HEAP32[$bound$i>>2] = 0;
       $1189 = $1179 & 8;
       $1190 = ($1189<<24>>24)==(0);
       if ($1190) {
        $l$180$i = 0;$lower$276$i = 0;$right_xr$179$i = $18;$start$078$i = 0;
        label = 225;
       } else {
        $l$051$i = 0;$lower$049$i = 0;$right_xr$050$i = $18;$sfbi$052$i = 0;
        while(1) {
         $1191 = (($sfbi$052$i) + 1)|0;
         $1192 = (($1170) + ($sfbi$052$i)|0);
         $1193 = HEAP8[$1192>>0]|0;
         $1194 = $1193&255;
         $1195 = ($1193<<24>>24)==(0);
         L323: do {
          if ($1195) {
           $lower$1$i = $lower$049$i;
          } else {
           $i$142$i = 0;
           while(1) {
            $1198 = (($right_xr$050$i) + ($i$142$i<<2)|0);
            $1199 = HEAP32[$1198>>2]|0;
            $1200 = ($1199|0)==(0);
            $1196 = (($i$142$i) + 1)|0;
            if (!($1200)) {
             $lower$1$i = $1191;
             break L323;
            }
            $1197 = ($1196>>>0)<($1194>>>0);
            if ($1197) {
             $i$142$i = $1196;
            } else {
             $lower$1$i = $lower$049$i;
             break;
            }
           }
          }
         } while(0);
         $1201 = (($right_xr$050$i) + ($1194<<2)|0);
         $1202 = (($1194) + ($l$051$i))|0;
         $1203 = ($1202>>>0)<(36);
         if ($1203) {
          $l$051$i = $1202;$lower$049$i = $lower$1$i;$right_xr$050$i = $1201;$sfbi$052$i = $1191;
         } else {
          $$lcssa336 = $1191;$$lcssa337 = $1201;$$lcssa338 = $1202;$lower$1$i$lcssa = $lower$1$i;
          break;
         }
        }
        $1204 = ($$lcssa338>>>0)<(576);
        if ($1204) {
         $l$180$i = $$lcssa338;$lower$276$i = $lower$1$i$lcssa;$right_xr$179$i = $$lcssa337;$start$078$i = $$lcssa336;
         label = 225;
        } else {
         $lower$275$i = $lower$1$i$lcssa;$max$0$lcssa$i = 0;$start$077$i = $$lcssa336;
        }
       }
       if ((label|0) == 225) {
        label = 0;
        $l$239$i = $l$180$i;$max$036$i = 0;$right_xr$238$i = $right_xr$179$i;$sfbi$240$i = $start$078$i;$w$037$i = 0;
        while(1) {
         $1205 = (($sfbi$240$i) + 1)|0;
         $1206 = (($1170) + ($sfbi$240$i)|0);
         $1207 = HEAP8[$1206>>0]|0;
         $1208 = $1207&255;
         $1209 = ($1207<<24>>24)==(0);
         L333: do {
          if ($1209) {
           $max$1$i = $max$036$i;
          } else {
           $i$234$i = 0;
           while(1) {
            $1212 = (($right_xr$238$i) + ($i$234$i<<2)|0);
            $1213 = HEAP32[$1212>>2]|0;
            $1214 = ($1213|0)==(0);
            $1210 = (($i$234$i) + 1)|0;
            if (!($1214)) {
             break;
            }
            $1211 = ($1210>>>0)<($1208>>>0);
            if ($1211) {
             $i$234$i = $1210;
            } else {
             $max$1$i = $max$036$i;
             break L333;
            }
           }
           $1215 = (($bound$i) + ($w$037$i<<2)|0);
           HEAP32[$1215>>2] = $1205;
           $max$1$i = $1205;
          }
         } while(0);
         $1216 = (($right_xr$238$i) + ($1208<<2)|0);
         $1217 = (($1208) + ($l$239$i))|0;
         $1218 = (($w$037$i) + 1)|0;
         $1219 = (($1218>>>0) % 3)&-1;
         $1220 = ($1217>>>0)<(576);
         if ($1220) {
          $l$239$i = $1217;$max$036$i = $max$1$i;$right_xr$238$i = $1216;$sfbi$240$i = $1205;$w$037$i = $1219;
         } else {
          $lower$275$i = $lower$276$i;$max$0$lcssa$i = $max$1$i;$start$077$i = $start$078$i;
          break;
         }
        }
       }
       $1221 = ($max$0$lcssa$i|0)==(0);
       $lower$2$start$0$i = $1221 ? $lower$275$i : $start$077$i;
       $1222 = ($lower$2$start$0$i|0)==(0);
       if (!($1222)) {
        $1223 = $1168 & 65534;
        $1224 = $1223&65535;
        $i$332$i = 0;
        while(1) {
         $1228 = (($modes$i) + ($i$332$i<<1)|0);
         HEAP16[$1228>>1] = $1224;
         $1229 = (($i$332$i) + 1)|0;
         $exitcond72$i = ($1229|0)==($lower$2$start$0$i|0);
         if ($exitcond72$i) {
          break;
         } else {
          $i$332$i = $1229;
         }
        }
       }
       $1225 = ($start$077$i>>>0)<($max$0$lcssa$i>>>0);
       if ($1225) {
        $1226 = $1168 & 65534;
        $1227 = $1226&65535;
        $i$430$i = $start$077$i;$w$129$i = 0;
        while(1) {
         $1230 = (($bound$i) + ($w$129$i<<2)|0);
         $1231 = HEAP32[$1230>>2]|0;
         $1232 = ($i$430$i>>>0)<($1231>>>0);
         if ($1232) {
          $1233 = (($modes$i) + ($i$430$i<<1)|0);
          HEAP16[$1233>>1] = $1227;
         }
         $1234 = (($w$129$i) + 1)|0;
         $1235 = (($1234>>>0) % 3)&-1;
         $1236 = (($i$430$i) + 1)|0;
         $exitcond71$i = ($1236|0)==($max$0$lcssa$i|0);
         if ($exitcond71$i) {
          break;
         } else {
          $i$430$i = $1236;$w$129$i = $1235;
         }
        }
       }
      } else {
       $bound1$062$i = 0;$l$364$i = 0;$right_xr$363$i = $18;$sfbi$365$i = 0;
       while(1) {
        $1240 = (($sfbi$365$i) + 1)|0;
        $1241 = (($1170) + ($sfbi$365$i)|0);
        $1242 = HEAP8[$1241>>0]|0;
        $1243 = $1242&255;
        $1244 = ($1242<<24>>24)==(0);
        L353: do {
         if ($1244) {
          $bound1$1$i = $bound1$062$i;
         } else {
          $i$555$i = 0;
          while(1) {
           $1247 = (($right_xr$363$i) + ($i$555$i<<2)|0);
           $1248 = HEAP32[$1247>>2]|0;
           $1249 = ($1248|0)==(0);
           $1245 = (($i$555$i) + 1)|0;
           if (!($1249)) {
            $bound1$1$i = $1240;
            break L353;
           }
           $1246 = ($1245>>>0)<($1243>>>0);
           if ($1246) {
            $i$555$i = $1245;
           } else {
            $bound1$1$i = $bound1$062$i;
            break;
           }
          }
         }
        } while(0);
        $1250 = (($right_xr$363$i) + ($1243<<2)|0);
        $1251 = (($1243) + ($l$364$i))|0;
        $1252 = ($1251>>>0)<(576);
        if ($1252) {
         $bound1$062$i = $bound1$1$i;$l$364$i = $1251;$right_xr$363$i = $1250;$sfbi$365$i = $1240;
        } else {
         $bound1$1$i$lcssa = $bound1$1$i;
         break;
        }
       }
       $1237 = ($bound1$1$i$lcssa|0)==(0);
       if (!($1237)) {
        $1238 = $1168 & 65534;
        $1239 = $1238&65535;
        $i$653$i = 0;
        while(1) {
         $1253 = (($modes$i) + ($i$653$i<<1)|0);
         HEAP16[$1253>>1] = $1239;
         $1254 = (($i$653$i) + 1)|0;
         $exitcond73$i = ($1254|0)==($bound1$1$i$lcssa|0);
         if ($exitcond73$i) {
          break;
         } else {
          $i$653$i = $1254;
         }
        }
       }
      }
      $1255 = $1186 & 4096;
      $1256 = ($1255|0)==(0);
      if ($1256) {
       $l$523$i = 0;$sfbi$524$i = 0;
       while(1) {
        $1300 = (($1170) + ($sfbi$524$i)|0);
        $1301 = HEAP8[$1300>>0]|0;
        $1302 = $1301&255;
        $1303 = (($modes$i) + ($sfbi$524$i<<1)|0);
        $1304 = HEAP16[$1303>>1]|0;
        $1305 = $1304 << 16 >> 16;
        $1306 = $1305 & 1;
        $1307 = ($1306|0)==(0);
        do {
         if (!($1307)) {
          $1308 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 76|0) + ($sfbi$524$i)|0);
          $1309 = HEAP8[$1308>>0]|0;
          $1310 = $1309&255;
          $1311 = ($1309&255)>(6);
          if ($1311) {
           $1322 = $1305 & 65534;
           $1323 = $1322&65535;
           HEAP16[$1303>>1] = $1323;
           break;
          }
          $1312 = ($1301<<24>>24)==(0);
          if (!($1312)) {
           $1313 = (39916 + ($1310<<2)|0);
           $1314 = HEAP32[$1313>>2]|0;
           $1315 = (($1314) + 32768)|0;
           $1316 = $1315 >> 16;
           $1317 = (6 - ($1310))|0;
           $1318 = (39916 + ($1317<<2)|0);
           $1319 = HEAP32[$1318>>2]|0;
           $1320 = (($1319) + 32768)|0;
           $1321 = $1320 >> 16;
           $i$821$i = 0;
           while(1) {
            $1324 = (($i$821$i) + ($l$523$i))|0;
            $1325 = (($xr) + ($1324<<2)|0);
            $1326 = HEAP32[$1325>>2]|0;
            $1327 = (($1326) + 2048)|0;
            $1328 = $1327 >> 12;
            $1329 = Math_imul($1328, $1316)|0;
            HEAP32[$1325>>2] = $1329;
            $1330 = Math_imul($1328, $1321)|0;
            $1331 = (((($xr)) + 2304|0) + ($1324<<2)|0);
            HEAP32[$1331>>2] = $1330;
            $1332 = (($i$821$i) + 1)|0;
            $exitcond69$i = ($1332|0)==($1302|0);
            if ($exitcond69$i) {
             break;
            } else {
             $i$821$i = $1332;
            }
           }
          }
         }
        } while(0);
        $1333 = (($sfbi$524$i) + 1)|0;
        $1334 = (($1302) + ($l$523$i))|0;
        $1335 = ($1334>>>0)<(576);
        if ($1335) {
         $l$523$i = $1334;$sfbi$524$i = $1333;
        } else {
         break L316;
        }
       }
      }
      $1257 = (((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 64|0);
      $1258 = HEAP16[$1257>>1]|0;
      $1259 = $1258&65535;
      $1260 = $1259 & 1;
      $$sum118 = (($gr$0202) + 1)|0;
      $l$427$i = 0;$sfbi$428$i = 0;
      while(1) {
       $1261 = (($1170) + ($sfbi$428$i)|0);
       $1262 = HEAP8[$1261>>0]|0;
       $1263 = $1262&255;
       $1264 = (($modes$i) + ($sfbi$428$i<<1)|0);
       $1265 = HEAP16[$1264>>1]|0;
       $1266 = $1265 << 16 >> 16;
       $1267 = $1266 & 1;
       $1268 = ($1267|0)==(0);
       do {
        if (!($1268)) {
         $1269 = ((((((($si)) + 10|0) + (($$sum118*116)|0)|0)) + 76|0) + ($sfbi$428$i)|0);
         $1270 = HEAP8[$1269>>0]|0;
         $1271 = ($1270<<24>>24)==(0);
         if (!($1271)) {
          $1272 = $1266 & 65534;
          $1273 = $1272&65535;
          HEAP16[$1264>>1] = $1273;
          break;
         }
         $1274 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0)) + 76|0) + ($sfbi$428$i)|0);
         $1275 = HEAP8[$1274>>0]|0;
         $1276 = $1275&255;
         $1277 = ($1262<<24>>24)==(0);
         if (!($1277)) {
          $1278 = ($1275<<24>>24)==(0);
          $1279 = (($1276) + -1)|0;
          $1280 = $1279 >>> 1;
          $1281 = ((39796 + (($1260*60)|0)|0) + ($1280<<2)|0);
          $1282 = $1276 & 1;
          $1283 = ($1282|0)==(0);
          $i$725$i = 0;
          while(1) {
           $1284 = (($i$725$i) + ($l$427$i))|0;
           $1285 = (($xr) + ($1284<<2)|0);
           $1286 = HEAP32[$1285>>2]|0;
           do {
            if ($1278) {
             $1287 = (((($xr)) + 2304|0) + ($1284<<2)|0);
             HEAP32[$1287>>2] = $1286;
            } else {
             $1288 = (($1286) + 2048)|0;
             $1289 = $1288 >> 12;
             $1290 = HEAP32[$1281>>2]|0;
             $1291 = (($1290) + 32768)|0;
             $1292 = $1291 >> 16;
             $1293 = Math_imul($1292, $1289)|0;
             if ($1283) {
              $1295 = (((($xr)) + 2304|0) + ($1284<<2)|0);
              HEAP32[$1295>>2] = $1293;
              break;
             } else {
              HEAP32[$1285>>2] = $1293;
              $1294 = (((($xr)) + 2304|0) + ($1284<<2)|0);
              HEAP32[$1294>>2] = $1286;
              break;
             }
            }
           } while(0);
           $1296 = (($i$725$i) + 1)|0;
           $exitcond70$i = ($1296|0)==($1263|0);
           if ($exitcond70$i) {
            break;
           } else {
            $i$725$i = $1296;
           }
          }
         }
        }
       } while(0);
       $1297 = (($sfbi$428$i) + 1)|0;
       $1298 = (($1263) + ($l$427$i))|0;
       $1299 = ($1298>>>0)<(576);
       if ($1299) {
        $l$427$i = $1298;$sfbi$428$i = $1297;
       } else {
        break;
       }
      }
     }
    } while(0);
    $1336 = $1168 & 2;
    $1337 = ($1336|0)==(0);
    if (!($1337)) {
     $1338 = HEAP32[$2>>2]|0;
     $1339 = $1338 | 512;
     HEAP32[$2>>2] = $1339;
     $l$619$i = 0;$sfbi$620$i = 0;
     while(1) {
      $1340 = (($1170) + ($sfbi$620$i)|0);
      $1341 = HEAP8[$1340>>0]|0;
      $1342 = $1341&255;
      $1343 = (($modes$i) + ($sfbi$620$i<<1)|0);
      $1344 = HEAP16[$1343>>1]|0;
      $1345 = ($1344<<16>>16)!=(2);
      $1346 = ($1341<<24>>24)==(0);
      $or$cond$i17 = $1346 | $1345;
      if (!($or$cond$i17)) {
       $i$918$i = 0;
       while(1) {
        $1347 = (($i$918$i) + ($l$619$i))|0;
        $1348 = (($xr) + ($1347<<2)|0);
        $1349 = HEAP32[$1348>>2]|0;
        $1350 = (((($xr)) + 2304|0) + ($1347<<2)|0);
        $1351 = HEAP32[$1350>>2]|0;
        $1352 = (($1349) + 2048)|0;
        $1353 = (($1352) + ($1351))|0;
        $1354 = $1353 >> 12;
        $1355 = ($1354*2896)|0;
        HEAP32[$1348>>2] = $1355;
        $1356 = (($1352) - ($1351))|0;
        $1357 = $1356 >> 12;
        $1358 = ($1357*2896)|0;
        HEAP32[$1350>>2] = $1358;
        $1359 = (($i$918$i) + 1)|0;
        $exitcond$i18 = ($1359|0)==($1342|0);
        if ($exitcond$i18) {
         break;
        } else {
         $i$918$i = $1359;
        }
       }
      }
      $1360 = (($sfbi$620$i) + 1)|0;
      $1361 = (($1342) + ($l$619$i))|0;
      $1362 = ($1361>>>0)<(576);
      if ($1362) {
       $l$619$i = $1361;$sfbi$620$i = $1360;
      } else {
       break;
      }
     }
    }
   }
  }
  if (!($15)) {
   $1363 = ($gr$0202*18)|0;
   $$sum68 = $1363 | 1;
   $$sum = (($1363) + 3)|0;
   $$sum69 = (($1363) + 5)|0;
   $$sum70 = (($1363) + 7)|0;
   $$sum71 = (($1363) + 9)|0;
   $$sum72 = (($1363) + 11)|0;
   $$sum73 = (($1363) + 13)|0;
   $$sum74 = (($1363) + 15)|0;
   $$sum75 = (($1363) + 17)|0;
   $$sum78 = (($1363) + 2)|0;
   $$sum80 = (($1363) + 4)|0;
   $$sum82 = (($1363) + 6)|0;
   $$sum84 = (($1363) + 8)|0;
   $$sum86 = (($1363) + 10)|0;
   $$sum88 = (($1363) + 12)|0;
   $$sum90 = (($1363) + 14)|0;
   $$sum92 = (($1363) + 16)|0;
   $ch$1193 = 0;
   while(1) {
    $1364 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$1193*58)|0)|0)) + 9|0);
    $1365 = HEAP8[$1364>>0]|0;
    $1366 = ($1365<<24>>24)==(2);
    $1367 = (($xr) + (($ch$1193*2304)|0)|0);
    if ($1366) {
     $1368 = (($sfbwidth) + ($ch$1193<<2)|0);
     $1369 = HEAP32[$1368>>2]|0;
     $$idx = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$1193*58)|0)|0)) + 8|0);
     $$idx$val = HEAP8[$$idx>>0]|0;
     $1370 = $$idx$val & 8;
     $1371 = ($1370<<24>>24)==(0);
     if ($1371) {
      $$1$i21 = $1369;$sb$0$i = 0;
     } else {
      $$06$i = $1369;$l$07$i = 0;
      while(1) {
       $1372 = ((($$06$i)) + 1|0);
       $1373 = HEAP8[$$06$i>>0]|0;
       $1374 = $1373&255;
       $1375 = (($1374) + ($l$07$i))|0;
       $1376 = ($1375>>>0)<(36);
       if ($1376) {
        $$06$i = $1372;$l$07$i = $1375;
       } else {
        $$1$i21 = $1372;$sb$0$i = 2;
        break;
       }
      }
     }
     ;HEAP32[$sw$i>>2]=0|0;HEAP32[$sw$i+4>>2]=0|0;HEAP32[$sw$i+8>>2]=0|0;
     HEAP32[$bound$i>>2] = $sb$0$i;
     HEAP32[$20>>2] = $sb$0$i;
     HEAP32[$19>>2] = $sb$0$i;
     $1377 = ($sb$0$i*18)|0;
     $1378 = HEAP8[$$1$i21>>0]|0;
     $1379 = $1378&255;
     $1380 = ((($$1$i21)) + 1|0);
     $$21$i = $1380;$f$03$i = $1379;$l$12$i = $1377;$w$14$i = 0;
     while(1) {
      $1381 = ($f$03$i|0)==(0);
      if ($1381) {
       $1382 = ((($$21$i)) + 1|0);
       $1383 = HEAP8[$$21$i>>0]|0;
       $1384 = $1383&255;
       $1385 = (($w$14$i) + 1)|0;
       $1386 = (($1385>>>0) % 3)&-1;
       $$3$i = $1382;$f$1$in$i = $1384;$w$2$i = $1386;
      } else {
       $$3$i = $$21$i;$f$1$in$i = $f$03$i;$w$2$i = $w$14$i;
      }
      $f$1$i = (($f$1$in$i) + -1)|0;
      $1387 = ((($xr) + (($ch$1193*2304)|0)|0) + ($l$12$i<<2)|0);
      $1388 = HEAP32[$1387>>2]|0;
      $1389 = (($sw$i) + ($w$2$i<<2)|0);
      $1390 = HEAP32[$1389>>2]|0;
      $1391 = (($1390) + 1)|0;
      HEAP32[$1389>>2] = $1391;
      $1392 = (($bound$i) + ($w$2$i<<2)|0);
      $1393 = HEAP32[$1392>>2]|0;
      $1394 = (((($tmp$i) + (($1393*72)|0)|0) + (($w$2$i*24)|0)|0) + ($1390<<2)|0);
      HEAP32[$1394>>2] = $1388;
      $1395 = ($1391|0)==(6);
      if ($1395) {
       HEAP32[$1389>>2] = 0;
       $1396 = (($1393) + 1)|0;
       HEAP32[$1392>>2] = $1396;
      }
      $1397 = (($l$12$i) + 1)|0;
      $exitcond$i23 = ($1397|0)==(576);
      if ($exitcond$i23) {
       break;
      } else {
       $$21$i = $$3$i;$f$03$i = $f$1$i;$l$12$i = $1397;$w$14$i = $w$2$i;
      }
     }
     $1398 = ((($xr) + (($ch$1193*2304)|0)|0) + ($1377<<2)|0);
     $1399 = (($tmp$i) + (($sb$0$i*72)|0)|0);
     $1400 = (576 - ($1377))|0;
     $1401 = $1400 << 2;
     _memcpy(($1398|0),($1399|0),($1401|0))|0;
     if (!($1371)) {
      $i$02$i = 0;
      while(1) {
       $$0$sum$i = (17 - ($i$02$i))|0;
       $1402 = ((($xr) + (($ch$1193*2304)|0)|0) + ($$0$sum$i<<2)|0);
       $1403 = HEAP32[$1402>>2]|0;
       $$0$sum1$i = (($i$02$i) + 18)|0;
       $1404 = ((($xr) + (($ch$1193*2304)|0)|0) + ($$0$sum1$i<<2)|0);
       $1405 = HEAP32[$1404>>2]|0;
       $1406 = (($1403) + 2048)|0;
       $1407 = $1406 >> 12;
       $1408 = (39944 + ($i$02$i<<2)|0);
       $1409 = HEAP32[$1408>>2]|0;
       $1410 = (($1409) + 32768)|0;
       $1411 = $1410 >> 16;
       $1412 = Math_imul($1411, $1407)|0;
       $1413 = (2048 - ($1405))|0;
       $1414 = $1413 >> 12;
       $1415 = (39976 + ($i$02$i<<2)|0);
       $1416 = HEAP32[$1415>>2]|0;
       $1417 = (($1416) + 32768)|0;
       $1418 = $1417 >> 16;
       $1419 = Math_imul($1418, $1414)|0;
       $1420 = (($1419) + ($1412))|0;
       HEAP32[$1402>>2] = $1420;
       $1421 = (($1405) + 2048)|0;
       $1422 = $1421 >> 12;
       $1423 = Math_imul($1411, $1422)|0;
       $1424 = Math_imul($1418, $1407)|0;
       $1425 = (($1424) + ($1423))|0;
       HEAP32[$1404>>2] = $1425;
       $1426 = (($i$02$i) + 1)|0;
       $exitcond$i28 = ($1426|0)==(8);
       if ($exitcond$i28) {
        break;
       } else {
        $i$02$i = $1426;
       }
      }
     }
    } else {
     $1427 = (((($xr) + (($ch$1193*2304)|0)|0)) + 2304|0);
     $$03$i30 = (((($xr) + (($ch$1193*2304)|0)|0)) + 72|0);
     $$05$i33 = $$03$i30;$xr$pn4$i34 = $1367;
     while(1) {
      $i$02$i36 = 0;
      while(1) {
       $$0$sum$i37 = (17 - ($i$02$i36))|0;
       $1429 = (($xr$pn4$i34) + ($$0$sum$i37<<2)|0);
       $1430 = HEAP32[$1429>>2]|0;
       $$0$sum1$i38 = (($i$02$i36) + 18)|0;
       $1431 = (($xr$pn4$i34) + ($$0$sum1$i38<<2)|0);
       $1432 = HEAP32[$1431>>2]|0;
       $1433 = (($1430) + 2048)|0;
       $1434 = $1433 >> 12;
       $1435 = (39944 + ($i$02$i36<<2)|0);
       $1436 = HEAP32[$1435>>2]|0;
       $1437 = (($1436) + 32768)|0;
       $1438 = $1437 >> 16;
       $1439 = Math_imul($1438, $1434)|0;
       $1440 = (2048 - ($1432))|0;
       $1441 = $1440 >> 12;
       $1442 = (39976 + ($i$02$i36<<2)|0);
       $1443 = HEAP32[$1442>>2]|0;
       $1444 = (($1443) + 32768)|0;
       $1445 = $1444 >> 16;
       $1446 = Math_imul($1445, $1441)|0;
       $1447 = (($1446) + ($1439))|0;
       HEAP32[$1429>>2] = $1447;
       $1448 = (($1432) + 2048)|0;
       $1449 = $1448 >> 12;
       $1450 = Math_imul($1438, $1449)|0;
       $1451 = Math_imul($1445, $1434)|0;
       $1452 = (($1451) + ($1450))|0;
       HEAP32[$1431>>2] = $1452;
       $1453 = (($i$02$i36) + 1)|0;
       $exitcond$i39 = ($1453|0)==(8);
       if ($exitcond$i39) {
        break;
       } else {
        $i$02$i36 = $1453;
       }
      }
      $$0$i31 = ((($$05$i33)) + 72|0);
      $1428 = ($$0$i31>>>0)<($1427>>>0);
      if ($1428) {
       $xr$pn4$i34$phi = $$05$i33;$$05$i33 = $$0$i31;$xr$pn4$i34 = $xr$pn4$i34$phi;
      } else {
       break;
      }
     }
    }
    $1454 = ((((((($si)) + 10|0) + (($gr$0202*116)|0)|0) + (($ch$1193*58)|0)|0)) + 8|0);
    $1455 = HEAP8[$1454>>0]|0;
    $1456 = $1455 & 8;
    $1457 = ($1456<<24>>24)==(0);
    $or$cond = $1366 & $1457;
    if ($or$cond) {
     _III_imdct_s($1367,$output);
     $1458 = HEAP32[$21>>2]|0;
     $i$01$i43 = 0;
     while(1) {
      $1475 = (($output) + ($i$01$i43<<2)|0);
      $1476 = HEAP32[$1475>>2]|0;
      $1477 = ((($1458) + (($ch$1193*2304)|0)|0) + ($i$01$i43<<2)|0);
      $1478 = HEAP32[$1477>>2]|0;
      $1479 = (($1478) + ($1476))|0;
      $$sum117 = (($i$01$i43) + ($1363))|0;
      $1480 = ((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum117<<7)|0);
      HEAP32[$1480>>2] = $1479;
      $1481 = (($i$01$i43) + 18)|0;
      $1482 = (($output) + ($1481<<2)|0);
      $1483 = HEAP32[$1482>>2]|0;
      HEAP32[$1477>>2] = $1483;
      $1484 = (($i$01$i43) + 1)|0;
      $exitcond$i44 = ($1484|0)==(18);
      if ($exitcond$i44) {
       break;
      } else {
       $i$01$i43 = $1484;
      }
     }
     $1485 = (((($xr) + (($ch$1193*2304)|0)|0)) + 72|0);
     _III_imdct_s($1485,$output);
     $1486 = HEAP32[$21>>2]|0;
     $i$01$i43$1 = 0;
     while(1) {
      $1688 = (($output) + ($i$01$i43$1<<2)|0);
      $1689 = HEAP32[$1688>>2]|0;
      $1690 = ((((($1486) + (($ch$1193*2304)|0)|0)) + 72|0) + ($i$01$i43$1<<2)|0);
      $1691 = HEAP32[$1690>>2]|0;
      $1692 = (($1691) + ($1689))|0;
      $$sum117$1 = (($i$01$i43$1) + ($1363))|0;
      $1693 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum117$1<<7)|0)) + 4|0);
      HEAP32[$1693>>2] = $1692;
      $1694 = (($i$01$i43$1) + 18)|0;
      $1695 = (($output) + ($1694<<2)|0);
      $1696 = HEAP32[$1695>>2]|0;
      HEAP32[$1690>>2] = $1696;
      $1697 = (($i$01$i43$1) + 1)|0;
      $exitcond$i44$1 = ($1697|0)==(18);
      if ($exitcond$i44$1) {
       break;
      } else {
       $i$01$i43$1 = $1697;
      }
     }
    } else {
     $1459 = $1365&255;
     $1460 = $1455 & 8;
     $1461 = ($1460<<24>>24)!=(0);
     $$ = $1461 ? 0 : $1459;
     _III_imdct_l($1367,$output,$$);
     $1462 = HEAP32[$21>>2]|0;
     $i$01$i = 0;
     while(1) {
      $1463 = (($output) + ($i$01$i<<2)|0);
      $1464 = HEAP32[$1463>>2]|0;
      $1465 = ((($1462) + (($ch$1193*2304)|0)|0) + ($i$01$i<<2)|0);
      $1466 = HEAP32[$1465>>2]|0;
      $1467 = (($1466) + ($1464))|0;
      $$sum116 = (($i$01$i) + ($1363))|0;
      $1468 = ((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum116<<7)|0);
      HEAP32[$1468>>2] = $1467;
      $1469 = (($i$01$i) + 18)|0;
      $1470 = (($output) + ($1469<<2)|0);
      $1471 = HEAP32[$1470>>2]|0;
      HEAP32[$1465>>2] = $1471;
      $1472 = (($i$01$i) + 1)|0;
      $exitcond$i42 = ($1472|0)==(18);
      if ($exitcond$i42) {
       break;
      } else {
       $i$01$i = $1472;
      }
     }
     $1473 = (((($xr) + (($ch$1193*2304)|0)|0)) + 72|0);
     _III_imdct_l($1473,$output,$$);
     $1474 = HEAP32[$21>>2]|0;
     $i$01$i$1 = 0;
     while(1) {
      $1678 = (($output) + ($i$01$i$1<<2)|0);
      $1679 = HEAP32[$1678>>2]|0;
      $1680 = ((((($1474) + (($ch$1193*2304)|0)|0)) + 72|0) + ($i$01$i$1<<2)|0);
      $1681 = HEAP32[$1680>>2]|0;
      $1682 = (($1681) + ($1679))|0;
      $$sum116$1 = (($i$01$i$1) + ($1363))|0;
      $1683 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum116$1<<7)|0)) + 4|0);
      HEAP32[$1683>>2] = $1682;
      $1684 = (($i$01$i$1) + 18)|0;
      $1685 = (($output) + ($1684<<2)|0);
      $1686 = HEAP32[$1685>>2]|0;
      HEAP32[$1680>>2] = $1686;
      $1687 = (($i$01$i$1) + 1)|0;
      $exitcond$i42$1 = ($1687|0)==(18);
      if ($exitcond$i42$1) {
       break;
      } else {
       $i$01$i$1 = $1687;
      }
     }
    }
    $1487 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum68<<7)|0)) + 4|0);
    $1488 = HEAP32[$1487>>2]|0;
    $1489 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum<<7)|0)) + 4|0);
    $tmp2$01$i = HEAP32[$1489>>2]|0;
    $1490 = (0 - ($1488))|0;
    HEAP32[$1487>>2] = $1490;
    $1491 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum69<<7)|0)) + 4|0);
    $1492 = HEAP32[$1491>>2]|0;
    $1493 = (0 - ($tmp2$01$i))|0;
    HEAP32[$1489>>2] = $1493;
    $1494 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum70<<7)|0)) + 4|0);
    $tmp2$0$i = HEAP32[$1494>>2]|0;
    $1495 = (0 - ($1492))|0;
    HEAP32[$1491>>2] = $1495;
    $1496 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum71<<7)|0)) + 4|0);
    $1497 = HEAP32[$1496>>2]|0;
    $1498 = (0 - ($tmp2$0$i))|0;
    HEAP32[$1494>>2] = $1498;
    $1499 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum72<<7)|0)) + 4|0);
    $tmp2$0$1$i = HEAP32[$1499>>2]|0;
    $1500 = (0 - ($1497))|0;
    HEAP32[$1496>>2] = $1500;
    $1501 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum73<<7)|0)) + 4|0);
    $1502 = HEAP32[$1501>>2]|0;
    $1503 = (0 - ($tmp2$0$1$i))|0;
    HEAP32[$1499>>2] = $1503;
    $1504 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum74<<7)|0)) + 4|0);
    $tmp2$0$2$i = HEAP32[$1504>>2]|0;
    $1505 = (0 - ($1502))|0;
    HEAP32[$1501>>2] = $1505;
    $1506 = ((((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum75<<7)|0)) + 4|0);
    $1507 = HEAP32[$1506>>2]|0;
    $1508 = (0 - ($tmp2$0$2$i))|0;
    HEAP32[$1504>>2] = $1508;
    $1509 = (0 - ($1507))|0;
    HEAP32[$1506>>2] = $1509;
    $i$0 = 576;
    while(1) {
     $1510 = ($i$0>>>0)>(36);
     if (!($1510)) {
      $i$0$lcssa = $i$0;
      break;
     }
     $1511 = (($i$0) + -1)|0;
     $1512 = ((($xr) + (($ch$1193*2304)|0)|0) + ($1511<<2)|0);
     $1513 = HEAP32[$1512>>2]|0;
     $1514 = ($1513|0)==(0);
     if ($1514) {
      $i$0 = $1511;
     } else {
      $i$0$lcssa = $i$0;
      break;
     }
    }
    $1515 = (576 - ($i$0$lcssa))|0;
    $1516 = (($1515>>>0) / 18)&-1;
    $1517 = (32 - ($1516))|0;
    $1518 = HEAP8[$1364>>0]|0;
    $1519 = ($1518<<24>>24)==(2);
    $1520 = ($1517>>>0)>(2);
    L451: do {
     if ($1519) {
      if ($1520) {
       $l$4188 = 36;$sb$3187 = 2;
       while(1) {
        $1563 = ((($xr) + (($ch$1193*2304)|0)|0) + ($l$4188<<2)|0);
        _III_imdct_s($1563,$output);
        $1564 = HEAP32[$21>>2]|0;
        $i$01$i53 = 0;
        while(1) {
         $1565 = (($output) + ($i$01$i53<<2)|0);
         $1566 = HEAP32[$1565>>2]|0;
         $1567 = (((($1564) + (($ch$1193*2304)|0)|0) + (($sb$3187*72)|0)|0) + ($i$01$i53<<2)|0);
         $1568 = HEAP32[$1567>>2]|0;
         $1569 = (($1568) + ($1566))|0;
         $$sum105 = (($i$01$i53) + ($1363))|0;
         $1570 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum105<<7)|0) + ($sb$3187<<2)|0);
         HEAP32[$1570>>2] = $1569;
         $1571 = (($i$01$i53) + 18)|0;
         $1572 = (($output) + ($1571<<2)|0);
         $1573 = HEAP32[$1572>>2]|0;
         HEAP32[$1567>>2] = $1573;
         $1574 = (($i$01$i53) + 1)|0;
         $exitcond$i54 = ($1574|0)==(18);
         if ($exitcond$i54) {
          break;
         } else {
          $i$01$i53 = $1574;
         }
        }
        $1575 = $sb$3187 & 1;
        $1576 = ($1575|0)==(0);
        if (!($1576)) {
         $1577 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum68<<7)|0) + ($sb$3187<<2)|0);
         $1578 = HEAP32[$1577>>2]|0;
         $1579 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum<<7)|0) + ($sb$3187<<2)|0);
         $tmp2$01$i56 = HEAP32[$1579>>2]|0;
         $1580 = (0 - ($1578))|0;
         HEAP32[$1577>>2] = $1580;
         $1581 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum69<<7)|0) + ($sb$3187<<2)|0);
         $1582 = HEAP32[$1581>>2]|0;
         $1583 = (0 - ($tmp2$01$i56))|0;
         HEAP32[$1579>>2] = $1583;
         $1584 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum70<<7)|0) + ($sb$3187<<2)|0);
         $tmp2$0$i57 = HEAP32[$1584>>2]|0;
         $1585 = (0 - ($1582))|0;
         HEAP32[$1581>>2] = $1585;
         $1586 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum71<<7)|0) + ($sb$3187<<2)|0);
         $1587 = HEAP32[$1586>>2]|0;
         $1588 = (0 - ($tmp2$0$i57))|0;
         HEAP32[$1584>>2] = $1588;
         $1589 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum72<<7)|0) + ($sb$3187<<2)|0);
         $tmp2$0$1$i58 = HEAP32[$1589>>2]|0;
         $1590 = (0 - ($1587))|0;
         HEAP32[$1586>>2] = $1590;
         $1591 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum73<<7)|0) + ($sb$3187<<2)|0);
         $1592 = HEAP32[$1591>>2]|0;
         $1593 = (0 - ($tmp2$0$1$i58))|0;
         HEAP32[$1589>>2] = $1593;
         $1594 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum74<<7)|0) + ($sb$3187<<2)|0);
         $tmp2$0$2$i59 = HEAP32[$1594>>2]|0;
         $1595 = (0 - ($1592))|0;
         HEAP32[$1591>>2] = $1595;
         $1596 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum75<<7)|0) + ($sb$3187<<2)|0);
         $1597 = HEAP32[$1596>>2]|0;
         $1598 = (0 - ($tmp2$0$2$i59))|0;
         HEAP32[$1594>>2] = $1598;
         $1599 = (0 - ($1597))|0;
         HEAP32[$1596>>2] = $1599;
        }
        $1600 = (($sb$3187) + 1)|0;
        $1601 = (($l$4188) + 18)|0;
        $exitcond235 = ($1600|0)==($1517|0);
        if ($exitcond235) {
         label = 304;
         break;
        } else {
         $l$4188 = $1601;$sb$3187 = $1600;
        }
       }
      } else {
       $sb$4190 = $1517;
       label = 316;
      }
     } else {
      if ($1520) {
       $1524 = $1518;$l$3185 = 36;$sb$2184 = 2;
       while(1) {
        $1522 = ((($xr) + (($ch$1193*2304)|0)|0) + ($l$3185<<2)|0);
        $1523 = $1524&255;
        _III_imdct_l($1522,$output,$1523);
        $1525 = HEAP32[$21>>2]|0;
        $i$01$i46 = 0;
        while(1) {
         $1526 = (($output) + ($i$01$i46<<2)|0);
         $1527 = HEAP32[$1526>>2]|0;
         $1528 = (((($1525) + (($ch$1193*2304)|0)|0) + (($sb$2184*72)|0)|0) + ($i$01$i46<<2)|0);
         $1529 = HEAP32[$1528>>2]|0;
         $1530 = (($1529) + ($1527))|0;
         $$sum94 = (($i$01$i46) + ($1363))|0;
         $1531 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum94<<7)|0) + ($sb$2184<<2)|0);
         HEAP32[$1531>>2] = $1530;
         $1532 = (($i$01$i46) + 18)|0;
         $1533 = (($output) + ($1532<<2)|0);
         $1534 = HEAP32[$1533>>2]|0;
         HEAP32[$1528>>2] = $1534;
         $1535 = (($i$01$i46) + 1)|0;
         $exitcond$i47 = ($1535|0)==(18);
         if ($exitcond$i47) {
          break;
         } else {
          $i$01$i46 = $1535;
         }
        }
        $1536 = $sb$2184 & 1;
        $1537 = ($1536|0)==(0);
        if (!($1537)) {
         $1538 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum68<<7)|0) + ($sb$2184<<2)|0);
         $1539 = HEAP32[$1538>>2]|0;
         $1540 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum<<7)|0) + ($sb$2184<<2)|0);
         $tmp2$01$i49 = HEAP32[$1540>>2]|0;
         $1541 = (0 - ($1539))|0;
         HEAP32[$1538>>2] = $1541;
         $1542 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum69<<7)|0) + ($sb$2184<<2)|0);
         $1543 = HEAP32[$1542>>2]|0;
         $1544 = (0 - ($tmp2$01$i49))|0;
         HEAP32[$1540>>2] = $1544;
         $1545 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum70<<7)|0) + ($sb$2184<<2)|0);
         $tmp2$0$i50 = HEAP32[$1545>>2]|0;
         $1546 = (0 - ($1543))|0;
         HEAP32[$1542>>2] = $1546;
         $1547 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum71<<7)|0) + ($sb$2184<<2)|0);
         $1548 = HEAP32[$1547>>2]|0;
         $1549 = (0 - ($tmp2$0$i50))|0;
         HEAP32[$1545>>2] = $1549;
         $1550 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum72<<7)|0) + ($sb$2184<<2)|0);
         $tmp2$0$1$i51 = HEAP32[$1550>>2]|0;
         $1551 = (0 - ($1548))|0;
         HEAP32[$1547>>2] = $1551;
         $1552 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum73<<7)|0) + ($sb$2184<<2)|0);
         $1553 = HEAP32[$1552>>2]|0;
         $1554 = (0 - ($tmp2$0$1$i51))|0;
         HEAP32[$1550>>2] = $1554;
         $1555 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum74<<7)|0) + ($sb$2184<<2)|0);
         $tmp2$0$2$i52 = HEAP32[$1555>>2]|0;
         $1556 = (0 - ($1553))|0;
         HEAP32[$1552>>2] = $1556;
         $1557 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum75<<7)|0) + ($sb$2184<<2)|0);
         $1558 = HEAP32[$1557>>2]|0;
         $1559 = (0 - ($tmp2$0$2$i52))|0;
         HEAP32[$1555>>2] = $1559;
         $1560 = (0 - ($1558))|0;
         HEAP32[$1557>>2] = $1560;
        }
        $1561 = (($sb$2184) + 1)|0;
        $exitcond = ($1561|0)==($1517|0);
        if ($exitcond) {
         label = 304;
         break L451;
        }
        $1562 = (($l$3185) + 18)|0;
        $$pre241 = HEAP8[$1364>>0]|0;
        $1524 = $$pre241;$l$3185 = $1562;$sb$2184 = $1561;
       }
      } else {
       $sb$4190 = $1517;
       label = 316;
      }
     }
    } while(0);
    if ((label|0) == 304) {
     label = 0;
     $1521 = ($1517>>>0)<(32);
     if ($1521) {
      $sb$4190 = $1517;
      label = 316;
     }
    }
    if ((label|0) == 316) {
     while(1) {
      label = 0;
      $1602 = HEAP32[$21>>2]|0;
      $1603 = ((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0);
      $1604 = HEAP32[$1603>>2]|0;
      $1605 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($1363<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1605>>2] = $1604;
      HEAP32[$1603>>2] = 0;
      $1606 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 4|0);
      $1607 = HEAP32[$1606>>2]|0;
      $1608 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum68<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1608>>2] = $1607;
      HEAP32[$1606>>2] = 0;
      $1609 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 8|0);
      $1610 = HEAP32[$1609>>2]|0;
      $1611 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum78<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1611>>2] = $1610;
      HEAP32[$1609>>2] = 0;
      $1612 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 12|0);
      $1613 = HEAP32[$1612>>2]|0;
      $1614 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1614>>2] = $1613;
      HEAP32[$1612>>2] = 0;
      $1615 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 16|0);
      $1616 = HEAP32[$1615>>2]|0;
      $1617 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum80<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1617>>2] = $1616;
      HEAP32[$1615>>2] = 0;
      $1618 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 20|0);
      $1619 = HEAP32[$1618>>2]|0;
      $1620 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum69<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1620>>2] = $1619;
      HEAP32[$1618>>2] = 0;
      $1621 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 24|0);
      $1622 = HEAP32[$1621>>2]|0;
      $1623 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum82<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1623>>2] = $1622;
      HEAP32[$1621>>2] = 0;
      $1624 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 28|0);
      $1625 = HEAP32[$1624>>2]|0;
      $1626 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum70<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1626>>2] = $1625;
      HEAP32[$1624>>2] = 0;
      $1627 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 32|0);
      $1628 = HEAP32[$1627>>2]|0;
      $1629 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum84<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1629>>2] = $1628;
      HEAP32[$1627>>2] = 0;
      $1630 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 36|0);
      $1631 = HEAP32[$1630>>2]|0;
      $1632 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum71<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1632>>2] = $1631;
      HEAP32[$1630>>2] = 0;
      $1633 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 40|0);
      $1634 = HEAP32[$1633>>2]|0;
      $1635 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum86<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1635>>2] = $1634;
      HEAP32[$1633>>2] = 0;
      $1636 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 44|0);
      $1637 = HEAP32[$1636>>2]|0;
      $1638 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum72<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1638>>2] = $1637;
      HEAP32[$1636>>2] = 0;
      $1639 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 48|0);
      $1640 = HEAP32[$1639>>2]|0;
      $1641 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum88<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1641>>2] = $1640;
      HEAP32[$1639>>2] = 0;
      $1642 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 52|0);
      $1643 = HEAP32[$1642>>2]|0;
      $1644 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum73<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1644>>2] = $1643;
      HEAP32[$1642>>2] = 0;
      $1645 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 56|0);
      $1646 = HEAP32[$1645>>2]|0;
      $1647 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum90<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1647>>2] = $1646;
      HEAP32[$1645>>2] = 0;
      $1648 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 60|0);
      $1649 = HEAP32[$1648>>2]|0;
      $1650 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum74<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1650>>2] = $1649;
      HEAP32[$1648>>2] = 0;
      $1651 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 64|0);
      $1652 = HEAP32[$1651>>2]|0;
      $1653 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum92<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1653>>2] = $1652;
      HEAP32[$1651>>2] = 0;
      $1654 = ((((($1602) + (($ch$1193*2304)|0)|0) + (($sb$4190*72)|0)|0)) + 68|0);
      $1655 = HEAP32[$1654>>2]|0;
      $1656 = (((((($frame)) + 48|0) + (($ch$1193*4608)|0)|0) + ($$sum75<<7)|0) + ($sb$4190<<2)|0);
      HEAP32[$1656>>2] = $1655;
      HEAP32[$1654>>2] = 0;
      $1657 = $sb$4190 & 1;
      $1658 = ($1657|0)==(0);
      if (!($1658)) {
       $1659 = HEAP32[$1608>>2]|0;
       $tmp2$01$i60 = HEAP32[$1614>>2]|0;
       $1660 = (0 - ($1659))|0;
       HEAP32[$1608>>2] = $1660;
       $1661 = HEAP32[$1620>>2]|0;
       $1662 = (0 - ($tmp2$01$i60))|0;
       HEAP32[$1614>>2] = $1662;
       $tmp2$0$i61 = HEAP32[$1626>>2]|0;
       $1663 = (0 - ($1661))|0;
       HEAP32[$1620>>2] = $1663;
       $1664 = HEAP32[$1632>>2]|0;
       $1665 = (0 - ($tmp2$0$i61))|0;
       HEAP32[$1626>>2] = $1665;
       $tmp2$0$1$i62 = HEAP32[$1638>>2]|0;
       $1666 = (0 - ($1664))|0;
       HEAP32[$1632>>2] = $1666;
       $1667 = HEAP32[$1644>>2]|0;
       $1668 = (0 - ($tmp2$0$1$i62))|0;
       HEAP32[$1638>>2] = $1668;
       $tmp2$0$2$i63 = HEAP32[$1650>>2]|0;
       $1669 = (0 - ($1667))|0;
       HEAP32[$1644>>2] = $1669;
       $1670 = HEAP32[$1656>>2]|0;
       $1671 = (0 - ($tmp2$0$2$i63))|0;
       HEAP32[$1650>>2] = $1671;
       $1672 = (0 - ($1670))|0;
       HEAP32[$1656>>2] = $1672;
      }
      $1673 = (($sb$4190) + 1)|0;
      $1674 = ($1673>>>0)<(32);
      if ($1674) {
       $sb$4190 = $1673;
       label = 316;
      } else {
       break;
      }
     }
    }
    $1675 = (($ch$1193) + 1)|0;
    $exitcond236 = ($1675|0)==($nch|0);
    if ($exitcond236) {
     break;
    } else {
     $ch$1193 = $1675;
    }
   }
  }
  $1676 = (($gr$0202) + 1)|0;
  $1677 = ($1676>>>0)<($13>>>0);
  if ($1677) {
   $gr$0202 = $1676;
  } else {
   $$2 = 0;
   label = 322;
   break;
  }
 }
 if ((label|0) == 161) {
  $$1$i$ph = 567;
  label = 211;
 }
 else if ((label|0) == 209) {
  ___assert_fail((67370|0),(67412|0),1253,(67421|0));
  // unreachable;
 }
 else if ((label|0) == 275) {
  $$1$ph = 569;
 }
 else if ((label|0) == 322) {
  STACKTOP = sp;return ($$2|0);
 }
 if ((label|0) == 211) {
  $$1$ph = $$1$i$ph;
 }
 $$2 = $$1$ph;
 STACKTOP = sp;return ($$2|0);
}
function _mad_stream_init($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 28|0);
 ;HEAP32[$stream>>2]=0|0;HEAP32[$stream+4>>2]=0|0;HEAP32[$stream+8>>2]=0|0;HEAP32[$stream+12>>2]=0|0;HEAP32[$stream+16>>2]=0|0;HEAP32[$stream+20>>2]=0|0;HEAP32[$stream+24>>2]=0|0;
 _mad_bit_init($0,0);
 $1 = ((($stream)) + 36|0);
 _mad_bit_init($1,0);
 $2 = ((($stream)) + 44|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;
 return;
}
function _mad_stream_sync($stream) {
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr$0$lcssa = 0, $ptr$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 28|0);
 $1 = (_mad_bit_nextbyte($0)|0);
 $2 = ((($stream)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -1|0);
 $5 = ($1>>>0)<($4>>>0);
 L1: do {
  if ($5) {
   $ptr$02 = $1;
   while(1) {
    $6 = HEAP8[$ptr$02>>0]|0;
    $7 = ($6<<24>>24)==(-1);
    $8 = ((($ptr$02)) + 1|0);
    if ($7) {
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9&255)>(223);
     if ($10) {
      $ptr$0$lcssa = $ptr$02;
      break L1;
     }
    }
    $11 = ($8>>>0)<($4>>>0);
    if ($11) {
     $ptr$02 = $8;
    } else {
     $ptr$0$lcssa = $8;
     break;
    }
   }
  } else {
   $ptr$0$lcssa = $1;
  }
 } while(0);
 $12 = $3;
 $13 = $ptr$0$lcssa;
 $14 = (($12) - ($13))|0;
 $15 = ($14|0)<(8);
 if ($15) {
  $$0 = -1;
  return ($$0|0);
 }
 _mad_bit_init($0,$ptr$0$lcssa);
 $$0 = 0;
 return ($$0|0);
}
function _mad_synth_init($synth) {
 $synth = $synth|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _mad_synth_mute($synth);
 $0 = ((($synth)) + 4096|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 return;
}
function _mad_synth_mute($synth) {
 $synth = $synth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond$1 = 0, $s$03 = 0, $s$03$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$03 = 0;
 while(1) {
  $0 = (((($synth)) + 1536|0) + ($s$03<<5)|0);
  HEAP32[$0>>2] = 0;
  $1 = (((($synth)) + 1024|0) + ($s$03<<5)|0);
  HEAP32[$1>>2] = 0;
  $2 = (((($synth)) + 512|0) + ($s$03<<5)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($synth) + ($s$03<<5)|0);
  HEAP32[$3>>2] = 0;
  $4 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 4|0);
  HEAP32[$4>>2] = 0;
  $5 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 4|0);
  HEAP32[$5>>2] = 0;
  $6 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 4|0);
  HEAP32[$6>>2] = 0;
  $7 = (((($synth) + ($s$03<<5)|0)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 8|0);
  HEAP32[$8>>2] = 0;
  $9 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 8|0);
  HEAP32[$9>>2] = 0;
  $10 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (((($synth) + ($s$03<<5)|0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 12|0);
  HEAP32[$12>>2] = 0;
  $13 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 12|0);
  HEAP32[$13>>2] = 0;
  $14 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 12|0);
  HEAP32[$14>>2] = 0;
  $15 = (((($synth) + ($s$03<<5)|0)) + 12|0);
  HEAP32[$15>>2] = 0;
  $16 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 16|0);
  HEAP32[$16>>2] = 0;
  $17 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 16|0);
  HEAP32[$17>>2] = 0;
  $18 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 16|0);
  HEAP32[$18>>2] = 0;
  $19 = (((($synth) + ($s$03<<5)|0)) + 16|0);
  HEAP32[$19>>2] = 0;
  $20 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 20|0);
  HEAP32[$20>>2] = 0;
  $21 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 20|0);
  HEAP32[$21>>2] = 0;
  $22 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 20|0);
  HEAP32[$22>>2] = 0;
  $23 = (((($synth) + ($s$03<<5)|0)) + 20|0);
  HEAP32[$23>>2] = 0;
  $24 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 24|0);
  HEAP32[$24>>2] = 0;
  $25 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 24|0);
  HEAP32[$25>>2] = 0;
  $26 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 24|0);
  HEAP32[$26>>2] = 0;
  $27 = (((($synth) + ($s$03<<5)|0)) + 24|0);
  HEAP32[$27>>2] = 0;
  $28 = (((((($synth)) + 1536|0) + ($s$03<<5)|0)) + 28|0);
  HEAP32[$28>>2] = 0;
  $29 = (((((($synth)) + 1024|0) + ($s$03<<5)|0)) + 28|0);
  HEAP32[$29>>2] = 0;
  $30 = (((((($synth)) + 512|0) + ($s$03<<5)|0)) + 28|0);
  HEAP32[$30>>2] = 0;
  $31 = (((($synth) + ($s$03<<5)|0)) + 28|0);
  HEAP32[$31>>2] = 0;
  $32 = (($s$03) + 1)|0;
  $exitcond = ($32|0)==(16);
  if ($exitcond) {
   $s$03$1 = 0;
   break;
  } else {
   $s$03 = $32;
  }
 }
 while(1) {
  $33 = (((($synth)) + 3584|0) + ($s$03$1<<5)|0);
  HEAP32[$33>>2] = 0;
  $34 = (((($synth)) + 3072|0) + ($s$03$1<<5)|0);
  HEAP32[$34>>2] = 0;
  $35 = (((($synth)) + 2560|0) + ($s$03$1<<5)|0);
  HEAP32[$35>>2] = 0;
  $36 = (((($synth)) + 2048|0) + ($s$03$1<<5)|0);
  HEAP32[$36>>2] = 0;
  $37 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 4|0);
  HEAP32[$37>>2] = 0;
  $38 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 4|0);
  HEAP32[$38>>2] = 0;
  $39 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 4|0);
  HEAP32[$39>>2] = 0;
  $40 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 4|0);
  HEAP32[$40>>2] = 0;
  $41 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 8|0);
  HEAP32[$41>>2] = 0;
  $42 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 8|0);
  HEAP32[$42>>2] = 0;
  $43 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 8|0);
  HEAP32[$43>>2] = 0;
  $44 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 8|0);
  HEAP32[$44>>2] = 0;
  $45 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 12|0);
  HEAP32[$45>>2] = 0;
  $46 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 12|0);
  HEAP32[$46>>2] = 0;
  $47 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 12|0);
  HEAP32[$47>>2] = 0;
  $48 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 12|0);
  HEAP32[$48>>2] = 0;
  $49 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 16|0);
  HEAP32[$49>>2] = 0;
  $50 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 16|0);
  HEAP32[$50>>2] = 0;
  $51 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 16|0);
  HEAP32[$51>>2] = 0;
  $52 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 16|0);
  HEAP32[$52>>2] = 0;
  $53 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 20|0);
  HEAP32[$53>>2] = 0;
  $54 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 20|0);
  HEAP32[$54>>2] = 0;
  $55 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 20|0);
  HEAP32[$55>>2] = 0;
  $56 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 20|0);
  HEAP32[$56>>2] = 0;
  $57 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 24|0);
  HEAP32[$57>>2] = 0;
  $58 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 24|0);
  HEAP32[$58>>2] = 0;
  $59 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 24|0);
  HEAP32[$59>>2] = 0;
  $60 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 24|0);
  HEAP32[$60>>2] = 0;
  $61 = (((((($synth)) + 3584|0) + ($s$03$1<<5)|0)) + 28|0);
  HEAP32[$61>>2] = 0;
  $62 = (((((($synth)) + 3072|0) + ($s$03$1<<5)|0)) + 28|0);
  HEAP32[$62>>2] = 0;
  $63 = (((((($synth)) + 2560|0) + ($s$03$1<<5)|0)) + 28|0);
  HEAP32[$63>>2] = 0;
  $64 = (((((($synth)) + 2048|0) + ($s$03$1<<5)|0)) + 28|0);
  HEAP32[$64>>2] = 0;
  $65 = (($s$03$1) + 1)|0;
  $exitcond$1 = ($65|0)==(16);
  if ($exitcond$1) {
   break;
  } else {
   $s$03$1 = $65;
  }
 }
 return;
}
function _mad_synth_frame($synth,$frame) {
 $synth = $synth|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $phitmp = 0, $synth_frame$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($frame)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0);
 $3 = $2 ? 2 : 1;
 $4 = HEAP32[$frame>>2]|0;
 switch ($4|0) {
 case 1:  {
  $15 = 12;
  break;
 }
 case 3:  {
  $5 = ((($frame)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 4096;
  $8 = ($7|0)!=(0);
  $phitmp = $8 ? 18 : 36;
  $29 = $phitmp;
  label = 3;
  break;
 }
 default: {
  $29 = 36;
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $15 = $29;
 }
 $9 = ((($frame)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($synth)) + 4100|0);
 HEAP32[$11>>2] = $10;
 $12 = $3&65535;
 $13 = ((($synth)) + 4104|0);
 HEAP16[$13>>1] = $12;
 $14 = $15 << 5;
 $16 = $14&65535;
 $17 = ((($synth)) + 4106|0);
 HEAP16[$17>>1] = $16;
 $18 = ((($frame)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 2;
 $21 = ($20|0)==(0);
 if ($21) {
  $synth_frame$0 = 455;
 } else {
  $22 = $10 >>> 1;
  HEAP32[$11>>2] = $22;
  $23 = $15 << 4;
  $24 = $23 & 32752;
  $div = $24&65535;
  HEAP16[$17>>1] = $div;
  $synth_frame$0 = 456;
 }
 FUNCTION_TABLE_viiii[$synth_frame$0 & 511]($synth,$frame,$3,$15);
 $25 = ((($synth)) + 4096|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($15))|0;
 $28 = $27 & 15;
 HEAP32[$25>>2] = $28;
 return;
}
function _mad_timer_set($timer,$seconds,$numer,$denom) {
 $timer = $timer|0;
 $seconds = $seconds|0;
 $numer = $numer|0;
 $denom = $denom|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i1$i = 0, $$012$i$i = 0, $$012$i$i3 = 0, $$012$i$i3$lcssa = 0, $$03$i$i = 0, $$03$i$i$phi = 0, $$03$i$i2 = 0, $$03$i$i2$phi = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split2D = 0, $switch$split42D = 0, $switch$split72D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$timer>>2] = $seconds;
 $0 = ($numer>>>0)>=($denom>>>0);
 $1 = ($denom|0)!=(0);
 $or$cond = $0 & $1;
 if ($or$cond) {
  $2 = (($numer>>>0) / ($denom>>>0))&-1;
  $3 = (($2) + ($seconds))|0;
  HEAP32[$timer>>2] = $3;
  $4 = (($numer>>>0) % ($denom>>>0))&-1;
  $$0 = $4;$58 = $3;
 } else {
  $$0 = $numer;$58 = $seconds;
 }
 $switch$split2D = ($denom|0)<(16000);
 L4: do {
  if ($switch$split2D) {
   $switch$split12D = ($denom|0)<(8000);
   if ($switch$split12D) {
    switch ($denom|0) {
    case 1: case 0:  {
     break;
    }
    case 1000:  {
     $7 = ($$0*352800)|0;
     $8 = ((($timer)) + 4|0);
     HEAP32[$8>>2] = $7;
     $$pre$phiZ2D = $8;$54 = $7;
     break L4;
     break;
    }
    default: {
     $$012$i$i3 = $denom;$$03$i$i2 = $$0;
     label = 16;
     break L4;
    }
    }
    $5 = ((($timer)) + 4|0);
    HEAP32[$5>>2] = 0;
    return;
   }
   $switch$split72D = ($denom|0)<(11025);
   if ($switch$split72D) {
    switch ($denom|0) {
    case 8000:  {
     break;
    }
    default: {
     $$012$i$i3 = $denom;$$03$i$i2 = $$0;
     label = 16;
     break L4;
    }
    }
    $9 = ($$0*44100)|0;
    $10 = ((($timer)) + 4|0);
    HEAP32[$10>>2] = $9;
    $$pre$phiZ2D = $10;$54 = $9;
    break;
   }
   switch ($denom|0) {
   case 11025:  {
    $11 = ($$0*32000)|0;
    $12 = ((($timer)) + 4|0);
    HEAP32[$12>>2] = $11;
    $$pre$phiZ2D = $12;$54 = $11;
    break L4;
    break;
   }
   case 12000:  {
    $13 = ($$0*29400)|0;
    $14 = ((($timer)) + 4|0);
    HEAP32[$14>>2] = $13;
    $$pre$phiZ2D = $14;$54 = $13;
    break L4;
    break;
   }
   default: {
    $$012$i$i3 = $denom;$$03$i$i2 = $$0;
    label = 16;
    break L4;
   }
   }
  } else {
   $switch$split42D = ($denom|0)<(32000);
   if ($switch$split42D) {
    $switch$split102D = ($denom|0)<(22050);
    if ($switch$split102D) {
     switch ($denom|0) {
     case 16000:  {
      break;
     }
     default: {
      $$012$i$i3 = $denom;$$03$i$i2 = $$0;
      label = 16;
      break L4;
     }
     }
     $15 = ($$0*22050)|0;
     $16 = ((($timer)) + 4|0);
     HEAP32[$16>>2] = $15;
     $$pre$phiZ2D = $16;$54 = $15;
     break;
    }
    switch ($denom|0) {
    case 22050:  {
     $17 = ($$0*16000)|0;
     $18 = ((($timer)) + 4|0);
     HEAP32[$18>>2] = $17;
     $$pre$phiZ2D = $18;$54 = $17;
     break L4;
     break;
    }
    case 24000:  {
     $19 = ($$0*14700)|0;
     $20 = ((($timer)) + 4|0);
     HEAP32[$20>>2] = $19;
     $$pre$phiZ2D = $20;$54 = $19;
     break L4;
     break;
    }
    default: {
     $$012$i$i3 = $denom;$$03$i$i2 = $$0;
     label = 16;
     break L4;
    }
    }
   }
   $switch$split132D = ($denom|0)<(48000);
   if ($switch$split132D) {
    $switch$split162D = ($denom|0)<(44100);
    if ($switch$split162D) {
     switch ($denom|0) {
     case 32000:  {
      break;
     }
     default: {
      $$012$i$i3 = $denom;$$03$i$i2 = $$0;
      label = 16;
      break L4;
     }
     }
     $21 = ($$0*11025)|0;
     $22 = ((($timer)) + 4|0);
     HEAP32[$22>>2] = $21;
     $$pre$phiZ2D = $22;$54 = $21;
     break;
    } else {
     switch ($denom|0) {
     case 44100:  {
      break;
     }
     default: {
      $$012$i$i3 = $denom;$$03$i$i2 = $$0;
      label = 16;
      break L4;
     }
     }
     $23 = ($$0*8000)|0;
     $24 = ((($timer)) + 4|0);
     HEAP32[$24>>2] = $23;
     $$pre$phiZ2D = $24;$54 = $23;
     break;
    }
   } else {
    $switch$split192D = ($denom|0)<(352800000);
    if ($switch$split192D) {
     switch ($denom|0) {
     case 48000:  {
      break;
     }
     default: {
      $$012$i$i3 = $denom;$$03$i$i2 = $$0;
      label = 16;
      break L4;
     }
     }
     $25 = ($$0*7350)|0;
     $26 = ((($timer)) + 4|0);
     HEAP32[$26>>2] = $25;
     $$pre$phiZ2D = $26;$54 = $25;
     break;
    } else {
     switch ($denom|0) {
     case 352800000:  {
      break;
     }
     default: {
      $$012$i$i3 = $denom;$$03$i$i2 = $$0;
      label = 16;
      break L4;
     }
     }
     $6 = ((($timer)) + 4|0);
     HEAP32[$6>>2] = $$0;
     $$pre$phiZ2D = $6;$54 = $$0;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  while(1) {
   label = 0;
   $27 = (($$03$i$i2>>>0) % ($$012$i$i3>>>0))&-1;
   $28 = ($27|0)==(0);
   if ($28) {
    $$012$i$i3$lcssa = $$012$i$i3;
    break;
   } else {
    $$03$i$i2$phi = $$012$i$i3;$$012$i$i3 = $27;$$03$i$i2 = $$03$i$i2$phi;
    label = 16;
   }
  }
  $29 = (($$0>>>0) / ($$012$i$i3$lcssa>>>0))&-1;
  $30 = (($denom>>>0) / ($$012$i$i3$lcssa>>>0))&-1;
  $31 = ($30|0)==(0);
  if ($31) {
   $$0$lcssa$i1$i = 352800000;
  } else {
   $$012$i$i = $30;$$03$i$i = 352800000;
   while(1) {
    $32 = (($$03$i$i>>>0) % ($$012$i$i>>>0))&-1;
    $33 = ($32|0)==(0);
    if ($33) {
     $$0$lcssa$i1$i = $$012$i$i;
     break;
    } else {
     $$03$i$i$phi = $$012$i$i;$$012$i$i = $32;$$03$i$i = $$03$i$i$phi;
    }
   }
  }
  $34 = (352800000 / ($$0$lcssa$i1$i>>>0))&-1;
  $35 = (($30>>>0) / ($$0$lcssa$i1$i>>>0))&-1;
  $36 = ($35|0)==(0);
  if ($36) {
   ___assert_fail((67436|0),(67447|0),144,(67455|0));
   // unreachable;
  }
  $37 = ($35>>>0)<($34>>>0);
  do {
   if ($37) {
    $38 = (($34>>>0) / ($35>>>0))&-1;
    $39 = Math_imul($38, $29)|0;
    $40 = (($34>>>0) % ($35>>>0))&-1;
    $41 = Math_imul($40, $29)|0;
    $42 = (($41>>>0) / ($35>>>0))&-1;
    $43 = (($42) + ($39))|0;
    $$0$i = $43;
   } else {
    $44 = ($35>>>0)<($29>>>0);
    if ($44) {
     $45 = (($29>>>0) / ($35>>>0))&-1;
     $46 = Math_imul($45, $34)|0;
     $47 = (($29>>>0) % ($35>>>0))&-1;
     $48 = Math_imul($47, $34)|0;
     $49 = (($48>>>0) / ($35>>>0))&-1;
     $50 = (($49) + ($46))|0;
     $$0$i = $50;
     break;
    } else {
     $51 = Math_imul($34, $29)|0;
     $52 = (($51>>>0) / ($35>>>0))&-1;
     $$0$i = $52;
     break;
    }
   }
  } while(0);
  $53 = ((($timer)) + 4|0);
  HEAP32[$53>>2] = $$0$i;
  $$pre$phiZ2D = $53;$54 = $$0$i;
 }
 $55 = ($54>>>0)>(352799999);
 if (!($55)) {
  return;
 }
 $56 = (($54>>>0) / 352800000)&-1;
 $57 = (($58) + ($56))|0;
 HEAP32[$timer>>2] = $57;
 $59 = (($54>>>0) % 352800000)&-1;
 HEAP32[$$pre$phiZ2D>>2] = $59;
 return;
}
function _III_imdct_s($X,$z) {
 $X = $X|0;
 $z = $z|0;
 var $$07 = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond12 = 0, $exitcond13 = 0, $i$05 = 0, $i$14 = 0, $s$06 = 0, $w$09 = 0, $wptr$03 = 0, $y = 0, $yptr$08 = 0;
 var $yptr$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y = sp;
 $$07 = $X;$w$09 = 0;$yptr$08 = $y;
 while(1) {
  $0 = ((($$07)) + 4|0);
  $1 = ((($$07)) + 8|0);
  $2 = ((($$07)) + 12|0);
  $3 = ((($$07)) + 16|0);
  $4 = ((($$07)) + 20|0);
  $$pre = HEAP32[$$07>>2]|0;
  $$pre14 = HEAP32[$0>>2]|0;
  $$pre15 = HEAP32[$1>>2]|0;
  $$pre16 = HEAP32[$2>>2]|0;
  $$pre17 = HEAP32[$3>>2]|0;
  $$pre18 = HEAP32[$4>>2]|0;
  $5 = (($$pre) + 2048)|0;
  $6 = $5 >> 12;
  $7 = (($$pre14) + 2048)|0;
  $8 = $7 >> 12;
  $9 = (($$pre15) + 2048)|0;
  $10 = $9 >> 12;
  $11 = (($$pre16) + 2048)|0;
  $12 = $11 >> 12;
  $13 = (($$pre17) + 2048)|0;
  $14 = $13 >> 12;
  $15 = (($$pre18) + 2048)|0;
  $16 = $15 >> 12;
  $i$05 = 0;$s$06 = 42400;
  while(1) {
   $17 = HEAP32[$s$06>>2]|0;
   $18 = (($17) + 32768)|0;
   $19 = $18 >> 16;
   $20 = Math_imul($19, $6)|0;
   $21 = ((($s$06)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 32768)|0;
   $24 = $23 >> 16;
   $25 = Math_imul($24, $8)|0;
   $26 = (($25) + ($20))|0;
   $27 = ((($s$06)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 32768)|0;
   $30 = $29 >> 16;
   $31 = Math_imul($30, $10)|0;
   $32 = (($26) + ($31))|0;
   $33 = ((($s$06)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 32768)|0;
   $36 = $35 >> 16;
   $37 = Math_imul($36, $12)|0;
   $38 = (($32) + ($37))|0;
   $39 = ((($s$06)) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 32768)|0;
   $42 = $41 >> 16;
   $43 = Math_imul($42, $14)|0;
   $44 = (($38) + ($43))|0;
   $45 = ((($s$06)) + 20|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 32768)|0;
   $48 = $47 >> 16;
   $49 = Math_imul($48, $16)|0;
   $50 = (($44) + ($49))|0;
   $51 = (($yptr$08) + ($i$05<<2)|0);
   HEAP32[$51>>2] = $50;
   $52 = (0 - ($50))|0;
   $53 = (5 - ($i$05))|0;
   $54 = (($yptr$08) + ($53<<2)|0);
   HEAP32[$54>>2] = $52;
   $55 = ((($s$06)) + 24|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + 32768)|0;
   $58 = $57 >> 16;
   $59 = Math_imul($58, $6)|0;
   $60 = ((($s$06)) + 28|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 32768)|0;
   $63 = $62 >> 16;
   $64 = Math_imul($63, $8)|0;
   $65 = (($64) + ($59))|0;
   $66 = ((($s$06)) + 32|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + 32768)|0;
   $69 = $68 >> 16;
   $70 = Math_imul($69, $10)|0;
   $71 = (($65) + ($70))|0;
   $72 = ((($s$06)) + 36|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + 32768)|0;
   $75 = $74 >> 16;
   $76 = Math_imul($75, $12)|0;
   $77 = (($71) + ($76))|0;
   $78 = ((($s$06)) + 40|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + 32768)|0;
   $81 = $80 >> 16;
   $82 = Math_imul($81, $14)|0;
   $83 = (($77) + ($82))|0;
   $84 = ((($s$06)) + 44|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($85) + 32768)|0;
   $87 = $86 >> 16;
   $88 = Math_imul($87, $16)|0;
   $89 = (($83) + ($88))|0;
   $90 = (($i$05) + 6)|0;
   $91 = (($yptr$08) + ($90<<2)|0);
   HEAP32[$91>>2] = $89;
   $92 = (11 - ($i$05))|0;
   $93 = (($yptr$08) + ($92<<2)|0);
   HEAP32[$93>>2] = $89;
   $94 = ((($s$06)) + 48|0);
   $95 = (($i$05) + 1)|0;
   $exitcond12 = ($95|0)==(3);
   if ($exitcond12) {
    break;
   } else {
    $i$05 = $95;$s$06 = $94;
   }
  }
  $96 = ((($yptr$08)) + 48|0);
  $97 = ((($$07)) + 24|0);
  $98 = (($w$09) + 1)|0;
  $exitcond13 = ($98|0)==(3);
  if ($exitcond13) {
   $i$14 = 0;$wptr$03 = 42544;$yptr$12 = $y;
   break;
  } else {
   $$07 = $97;$w$09 = $98;$yptr$08 = $96;
  }
 }
 while(1) {
  $99 = (($z) + ($i$14<<2)|0);
  HEAP32[$99>>2] = 0;
  $100 = HEAP32[$yptr$12>>2]|0;
  $101 = (($100) + 2048)|0;
  $102 = $101 >> 12;
  $103 = HEAP32[$wptr$03>>2]|0;
  $104 = (($103) + 32768)|0;
  $105 = $104 >> 16;
  $106 = Math_imul($105, $102)|0;
  $107 = (($i$14) + 6)|0;
  $108 = (($z) + ($107<<2)|0);
  HEAP32[$108>>2] = $106;
  $109 = ((($yptr$12)) + 24|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($110) + 2048)|0;
  $112 = $111 >> 12;
  $113 = ((($wptr$03)) + 24|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + 32768)|0;
  $116 = $115 >> 16;
  $117 = Math_imul($116, $112)|0;
  $118 = ((($yptr$12)) + 48|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + 2048)|0;
  $121 = $120 >> 12;
  $122 = HEAP32[$wptr$03>>2]|0;
  $123 = (($122) + 32768)|0;
  $124 = $123 >> 16;
  $125 = Math_imul($124, $121)|0;
  $126 = (($125) + ($117))|0;
  $127 = (($i$14) + 12)|0;
  $128 = (($z) + ($127<<2)|0);
  HEAP32[$128>>2] = $126;
  $129 = ((($yptr$12)) + 72|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + 2048)|0;
  $132 = $131 >> 12;
  $133 = HEAP32[$113>>2]|0;
  $134 = (($133) + 32768)|0;
  $135 = $134 >> 16;
  $136 = Math_imul($135, $132)|0;
  $137 = ((($yptr$12)) + 96|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + 2048)|0;
  $140 = $139 >> 12;
  $141 = HEAP32[$wptr$03>>2]|0;
  $142 = (($141) + 32768)|0;
  $143 = $142 >> 16;
  $144 = Math_imul($143, $140)|0;
  $145 = (($144) + ($136))|0;
  $146 = (($i$14) + 18)|0;
  $147 = (($z) + ($146<<2)|0);
  HEAP32[$147>>2] = $145;
  $148 = ((($yptr$12)) + 120|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + 2048)|0;
  $151 = $150 >> 12;
  $152 = HEAP32[$113>>2]|0;
  $153 = (($152) + 32768)|0;
  $154 = $153 >> 16;
  $155 = Math_imul($154, $151)|0;
  $156 = (($i$14) + 24)|0;
  $157 = (($z) + ($156<<2)|0);
  HEAP32[$157>>2] = $155;
  $158 = (($i$14) + 30)|0;
  $159 = (($z) + ($158<<2)|0);
  HEAP32[$159>>2] = 0;
  $160 = ((($yptr$12)) + 4|0);
  $161 = ((($wptr$03)) + 4|0);
  $162 = (($i$14) + 1)|0;
  $exitcond = ($162|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $i$14 = $162;$wptr$03 = $161;$yptr$12 = $160;
  }
 }
 STACKTOP = sp;return;
}
function _III_imdct_l($X,$z,$block_type) {
 $X = $X|0;
 $z = $z|0;
 $block_type = $block_type|0;
 var $$neg11$i$i$i$i = 0, $$neg11$i2$i$i$i = 0, $$neg9$i$i$i$i = 0, $$neg9$i1$i$i$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert50 = 0, $$phi$trans$insert53 = 0, $$pre = 0, $$pre51 = 0, $$pre54 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$031$i$i = 0, $i$038 = 0, $i$141 = 0, $i$642 = 0, $tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i$i = sp;
 $i$031$i$i = 0;
 while(1) {
  $0 = (($X) + ($i$031$i$i<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (($1) + 2048)|0;
  $3 = $2 >> 12;
  $4 = (42184 + ($i$031$i$i<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 32768)|0;
  $7 = $6 >> 16;
  $8 = Math_imul($7, $3)|0;
  $9 = (($tmp$i$i) + ($i$031$i$i<<2)|0);
  HEAP32[$9>>2] = $8;
  $10 = (($i$031$i$i) + 1)|0;
  $11 = (($X) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 2048)|0;
  $14 = $13 >> 12;
  $15 = (42184 + ($10<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 32768)|0;
  $18 = $17 >> 16;
  $19 = Math_imul($18, $14)|0;
  $20 = (($tmp$i$i) + ($10<<2)|0);
  HEAP32[$20>>2] = $19;
  $21 = (($i$031$i$i) + 2)|0;
  $22 = (($X) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 2048)|0;
  $25 = $24 >> 12;
  $26 = (42184 + ($21<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 32768)|0;
  $29 = $28 >> 16;
  $30 = Math_imul($29, $25)|0;
  $31 = (($tmp$i$i) + ($21<<2)|0);
  HEAP32[$31>>2] = $30;
  $32 = (($i$031$i$i) + 3)|0;
  $33 = ($32|0)<(18);
  if ($33) {
   $i$031$i$i = $32;
  } else {
   break;
  }
 }
 $34 = HEAP32[$tmp$i$i>>2]|0;
 $35 = ((($tmp$i$i)) + 68|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($34))|0;
 $38 = ((($tmp$i$i)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($tmp$i$i)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($39))|0;
 $43 = ((($tmp$i$i)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($tmp$i$i)) + 60|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($44))|0;
 $48 = ((($tmp$i$i)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($tmp$i$i)) + 56|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($49))|0;
 $53 = ((($tmp$i$i)) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($tmp$i$i)) + 52|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($54))|0;
 $58 = ((($tmp$i$i)) + 20|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($tmp$i$i)) + 48|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + ($59))|0;
 $63 = ((($tmp$i$i)) + 24|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($tmp$i$i)) + 44|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + ($64))|0;
 $68 = ((($tmp$i$i)) + 28|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($tmp$i$i)) + 40|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + ($69))|0;
 $73 = ((($tmp$i$i)) + 32|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($tmp$i$i)) + 36|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) + ($74))|0;
 $78 = (($62) + ($52))|0;
 $79 = (($52) - ($62))|0;
 $80 = (($67) + ($47))|0;
 $81 = (($67) - ($47))|0;
 $82 = (($72) + ($42))|0;
 $83 = (($77) + ($37))|0;
 $84 = (($77) - ($37))|0;
 $85 = (($80) + ($78))|0;
 $86 = (($85) + ($83))|0;
 $87 = (($79) + 2048)|0;
 $88 = (($81) + ($87))|0;
 $89 = $88 >> 12;
 $90 = Math_imul($89, -5266)|0;
 $91 = (($87) - ($84))|0;
 $92 = $91 >> 12;
 $93 = ($92*8068)|0;
 $94 = (($81) + 2048)|0;
 $95 = (($94) + ($84))|0;
 $96 = $95 >> 12;
 $97 = Math_imul($96, -2802)|0;
 $98 = (($87) - ($81))|0;
 $99 = (($98) + ($84))|0;
 $100 = $99 >> 12;
 $101 = (($42) + 2048)|0;
 $102 = (($101) - ($72))|0;
 $103 = $102 >> 12;
 $104 = Math_imul($103, -7094)|0;
 $105 = (($80) + 2048)|0;
 $106 = (($105) - ($83))|0;
 $107 = $106 >> 12;
 $108 = Math_imul($107, -7698)|0;
 $109 = (($78) + 2048)|0;
 $110 = (($109) - ($83))|0;
 $111 = $110 >> 12;
 $112 = Math_imul($111, -1423)|0;
 $113 = (($109) - ($80))|0;
 $114 = $113 >> 12;
 $115 = Math_imul($114, -6275)|0;
 $116 = (($82) + ($57))|0;
 $117 = $57 << 1;
 $118 = (($117) - ($82))|0;
 $119 = (($108) + ($118))|0;
 $120 = (($104) - ($97))|0;
 $121 = (($86) + ($116))|0;
 $$neg9$i$i$i$i = (($90) - ($104))|0;
 $122 = (($$neg9$i$i$i$i) + ($93))|0;
 $$neg11$i$i$i$i = (($115) - ($118))|0;
 $123 = (($$neg11$i$i$i$i) + ($108))|0;
 $124 = (($119) - ($112))|0;
 $125 = (($120) + ($93))|0;
 $126 = $116 << 1;
 $127 = (($86) - ($126))|0;
 $128 = (($104) + ($90))|0;
 $129 = (($128) + ($97))|0;
 $130 = (($118) + ($115))|0;
 $131 = (($130) + ($112))|0;
 $132 = (($34) + 2048)|0;
 $133 = (($132) - ($36))|0;
 $134 = $133 >> 12;
 $135 = ($134*8161)|0;
 $136 = (($39) + 2048)|0;
 $137 = (($136) - ($41))|0;
 $138 = $137 >> 12;
 $139 = ($138*7913)|0;
 $140 = (($44) + 2048)|0;
 $141 = (($140) - ($46))|0;
 $142 = $141 >> 12;
 $143 = ($142*7424)|0;
 $144 = (($49) + 2048)|0;
 $145 = (($144) - ($51))|0;
 $146 = $145 >> 12;
 $147 = ($146*6710)|0;
 $148 = (($54) + 2048)|0;
 $149 = (($148) - ($56))|0;
 $150 = $149 >> 12;
 $151 = ($150*5793)|0;
 $152 = (($59) + 2048)|0;
 $153 = (($152) - ($61))|0;
 $154 = $153 >> 12;
 $155 = ($154*4699)|0;
 $156 = (($64) + 2048)|0;
 $157 = (($156) - ($66))|0;
 $158 = $157 >> 12;
 $159 = ($158*3462)|0;
 $160 = (($69) + 2048)|0;
 $161 = (($160) - ($71))|0;
 $162 = $161 >> 12;
 $163 = ($162*2120)|0;
 $164 = (($74) + 2048)|0;
 $165 = (($164) - ($76))|0;
 $166 = $165 >> 12;
 $167 = ($166*714)|0;
 $168 = (($155) + ($147))|0;
 $169 = (($147) - ($155))|0;
 $170 = (($159) + ($143))|0;
 $171 = (($159) - ($143))|0;
 $172 = (($163) + ($139))|0;
 $173 = (($167) + ($135))|0;
 $174 = (($167) - ($135))|0;
 $175 = (($170) + ($168))|0;
 $176 = (($175) + ($173))|0;
 $177 = (($169) + 2048)|0;
 $178 = (($171) + ($177))|0;
 $179 = $178 >> 12;
 $180 = Math_imul($179, -5266)|0;
 $181 = (($177) - ($174))|0;
 $182 = $181 >> 12;
 $183 = ($182*8068)|0;
 $184 = (($171) + 2048)|0;
 $185 = (($184) + ($174))|0;
 $186 = $185 >> 12;
 $187 = Math_imul($186, -2802)|0;
 $188 = (($177) - ($171))|0;
 $189 = (($188) + ($174))|0;
 $190 = $189 >> 12;
 $191 = Math_imul($190, -7094)|0;
 $192 = (($139) + 2048)|0;
 $193 = (($192) - ($163))|0;
 $194 = $193 >> 12;
 $195 = Math_imul($194, -7094)|0;
 $196 = (($170) + 2048)|0;
 $197 = (($196) - ($173))|0;
 $198 = $197 >> 12;
 $199 = Math_imul($198, -7698)|0;
 $200 = (($168) + 2048)|0;
 $201 = (($200) - ($173))|0;
 $202 = $201 >> 12;
 $203 = Math_imul($202, -1423)|0;
 $204 = (($200) - ($170))|0;
 $205 = $204 >> 12;
 $206 = Math_imul($205, -6275)|0;
 $207 = (($172) + ($151))|0;
 $208 = ($150*11586)|0;
 $209 = (($208) - ($172))|0;
 $210 = (($199) + ($209))|0;
 $211 = (($195) - ($187))|0;
 $212 = (($176) + ($207))|0;
 $$neg9$i1$i$i$i = (($180) - ($195))|0;
 $$neg11$i2$i$i$i = (($206) - ($209))|0;
 $213 = (($$neg11$i2$i$i$i) + ($199))|0;
 $214 = (($210) - ($203))|0;
 $215 = (($211) + ($183))|0;
 $216 = $207 << 1;
 $217 = (($176) - ($216))|0;
 $218 = (($195) + ($180))|0;
 $219 = (($218) + ($187))|0;
 $220 = (($209) + ($206))|0;
 $221 = (($220) + ($203))|0;
 $222 = (($$neg9$i1$i$i$i) - ($212))|0;
 $223 = (($222) + ($183))|0;
 $224 = (($213) - ($223))|0;
 $225 = (($191) - ($224))|0;
 $226 = (($214) - ($225))|0;
 $227 = (($215) - ($226))|0;
 $228 = (($217) - ($227))|0;
 $229 = (($219) - ($228))|0;
 $230 = (($221) - ($229))|0;
 $231 = (($121|0) / 2)&-1;
 $232 = (($212|0) / 2)&-1;
 $233 = (($232) - ($231))|0;
 $234 = (($122|0) / 2)&-1;
 $235 = (($234) - ($233))|0;
 $236 = (($223|0) / 2)&-1;
 $237 = (($236) - ($235))|0;
 $238 = (($123|0) / 2)&-1;
 $239 = (($238) - ($237))|0;
 $240 = (($224|0) / 2)&-1;
 $241 = (($240) - ($239))|0;
 $242 = Math_imul($100, -3547)|0;
 $243 = (($242) - ($241))|0;
 $244 = (($225|0) / 2)&-1;
 $245 = (($244) - ($243))|0;
 $246 = (($124|0) / 2)&-1;
 $247 = (($246) - ($245))|0;
 $248 = (($226|0) / 2)&-1;
 $249 = (($248) - ($247))|0;
 $250 = (($125|0) / 2)&-1;
 $251 = (($250) - ($249))|0;
 $252 = (($227|0) / 2)&-1;
 $253 = (($252) - ($251))|0;
 $254 = (($127|0) / 2)&-1;
 $255 = (($254) - ($253))|0;
 $256 = (($228|0) / 2)&-1;
 $257 = (($256) - ($255))|0;
 $258 = (($129|0) / 2)&-1;
 $259 = (($258) - ($257))|0;
 $260 = (($229|0) / 2)&-1;
 $261 = (($260) - ($259))|0;
 $262 = (($131|0) / 2)&-1;
 $263 = (($262) - ($261))|0;
 $264 = (($230|0) / 2)&-1;
 $265 = (($264) - ($263))|0;
 HEAP32[$z>>2] = $249;
 $266 = ((($z)) + 4|0);
 HEAP32[$266>>2] = $251;
 $267 = ((($z)) + 8|0);
 HEAP32[$267>>2] = $253;
 $268 = ((($z)) + 12|0);
 HEAP32[$268>>2] = $255;
 $269 = ((($z)) + 16|0);
 HEAP32[$269>>2] = $257;
 $270 = ((($z)) + 20|0);
 HEAP32[$270>>2] = $259;
 $271 = ((($z)) + 24|0);
 HEAP32[$271>>2] = $261;
 $272 = ((($z)) + 28|0);
 HEAP32[$272>>2] = $263;
 $273 = ((($z)) + 32|0);
 HEAP32[$273>>2] = $265;
 $274 = (0 - ($265))|0;
 $275 = ((($z)) + 36|0);
 HEAP32[$275>>2] = $274;
 $276 = (0 - ($263))|0;
 $277 = ((($z)) + 40|0);
 HEAP32[$277>>2] = $276;
 $278 = (0 - ($261))|0;
 $279 = ((($z)) + 44|0);
 HEAP32[$279>>2] = $278;
 $280 = (0 - ($259))|0;
 $281 = ((($z)) + 48|0);
 HEAP32[$281>>2] = $280;
 $282 = (0 - ($257))|0;
 $283 = ((($z)) + 52|0);
 HEAP32[$283>>2] = $282;
 $284 = (0 - ($255))|0;
 $285 = ((($z)) + 56|0);
 HEAP32[$285>>2] = $284;
 $286 = (0 - ($253))|0;
 $287 = ((($z)) + 60|0);
 HEAP32[$287>>2] = $286;
 $288 = (0 - ($251))|0;
 $289 = ((($z)) + 64|0);
 HEAP32[$289>>2] = $288;
 $290 = (0 - ($249))|0;
 $291 = ((($z)) + 68|0);
 HEAP32[$291>>2] = $290;
 $292 = (0 - ($247))|0;
 $293 = ((($z)) + 72|0);
 HEAP32[$293>>2] = $292;
 $294 = (0 - ($245))|0;
 $295 = ((($z)) + 76|0);
 HEAP32[$295>>2] = $294;
 $296 = (0 - ($243))|0;
 $297 = ((($z)) + 80|0);
 HEAP32[$297>>2] = $296;
 $298 = (0 - ($241))|0;
 $299 = ((($z)) + 84|0);
 HEAP32[$299>>2] = $298;
 $300 = (0 - ($239))|0;
 $301 = ((($z)) + 88|0);
 HEAP32[$301>>2] = $300;
 $302 = (0 - ($237))|0;
 $303 = ((($z)) + 92|0);
 HEAP32[$303>>2] = $302;
 $304 = (0 - ($235))|0;
 $305 = ((($z)) + 96|0);
 HEAP32[$305>>2] = $304;
 $306 = (0 - ($233))|0;
 $307 = ((($z)) + 100|0);
 HEAP32[$307>>2] = $306;
 $308 = (0 - ($231))|0;
 $309 = ((($z)) + 104|0);
 HEAP32[$309>>2] = $308;
 $310 = ((($z)) + 108|0);
 HEAP32[$310>>2] = $308;
 $311 = ((($z)) + 112|0);
 HEAP32[$311>>2] = $306;
 $312 = ((($z)) + 116|0);
 HEAP32[$312>>2] = $304;
 $313 = ((($z)) + 120|0);
 HEAP32[$313>>2] = $302;
 $314 = ((($z)) + 124|0);
 HEAP32[$314>>2] = $300;
 $315 = ((($z)) + 128|0);
 HEAP32[$315>>2] = $298;
 $316 = ((($z)) + 132|0);
 HEAP32[$316>>2] = $296;
 $317 = ((($z)) + 136|0);
 HEAP32[$317>>2] = $294;
 $318 = ((($z)) + 140|0);
 HEAP32[$318>>2] = $292;
 switch ($block_type|0) {
 case 0:  {
  $339 = $249;$i$038 = 0;
  while(1) {
   $337 = (($z) + ($i$038<<2)|0);
   $338 = (($339) + 2048)|0;
   $340 = $338 >> 12;
   $341 = (42256 + ($i$038<<2)|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = (($342) + 32768)|0;
   $344 = $343 >> 16;
   $345 = Math_imul($344, $340)|0;
   HEAP32[$337>>2] = $345;
   $346 = $i$038 | 1;
   $347 = (($z) + ($346<<2)|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = (($348) + 2048)|0;
   $350 = $349 >> 12;
   $351 = (42256 + ($346<<2)|0);
   $352 = HEAP32[$351>>2]|0;
   $353 = (($352) + 32768)|0;
   $354 = $353 >> 16;
   $355 = Math_imul($354, $350)|0;
   HEAP32[$347>>2] = $355;
   $356 = $i$038 | 2;
   $357 = (($z) + ($356<<2)|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = (($358) + 2048)|0;
   $360 = $359 >> 12;
   $361 = (42256 + ($356<<2)|0);
   $362 = HEAP32[$361>>2]|0;
   $363 = (($362) + 32768)|0;
   $364 = $363 >> 16;
   $365 = Math_imul($364, $360)|0;
   HEAP32[$357>>2] = $365;
   $366 = $i$038 | 3;
   $367 = (($z) + ($366<<2)|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = (($368) + 2048)|0;
   $370 = $369 >> 12;
   $371 = (42256 + ($366<<2)|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = (($372) + 32768)|0;
   $374 = $373 >> 16;
   $375 = Math_imul($374, $370)|0;
   HEAP32[$367>>2] = $375;
   $376 = (($i$038) + 4)|0;
   $377 = ($376>>>0)<(36);
   if (!($377)) {
    break;
   }
   $$phi$trans$insert53 = (($z) + ($376<<2)|0);
   $$pre54 = HEAP32[$$phi$trans$insert53>>2]|0;
   $339 = $$pre54;$i$038 = $376;
  }
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $404 = $249;$i$141 = 0;
  while(1) {
   $402 = (($z) + ($i$141<<2)|0);
   $403 = (($404) + 2048)|0;
   $405 = $403 >> 12;
   $406 = (42256 + ($i$141<<2)|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = (($407) + 32768)|0;
   $409 = $408 >> 16;
   $410 = Math_imul($409, $405)|0;
   HEAP32[$402>>2] = $410;
   $411 = (($i$141) + 1)|0;
   $412 = (($z) + ($411<<2)|0);
   $413 = HEAP32[$412>>2]|0;
   $414 = (($413) + 2048)|0;
   $415 = $414 >> 12;
   $416 = (42256 + ($411<<2)|0);
   $417 = HEAP32[$416>>2]|0;
   $418 = (($417) + 32768)|0;
   $419 = $418 >> 16;
   $420 = Math_imul($419, $415)|0;
   HEAP32[$412>>2] = $420;
   $421 = (($i$141) + 2)|0;
   $422 = (($z) + ($421<<2)|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = (($423) + 2048)|0;
   $425 = $424 >> 12;
   $426 = (42256 + ($421<<2)|0);
   $427 = HEAP32[$426>>2]|0;
   $428 = (($427) + 32768)|0;
   $429 = $428 >> 16;
   $430 = Math_imul($429, $425)|0;
   HEAP32[$422>>2] = $430;
   $431 = (($i$141) + 3)|0;
   $432 = ($431>>>0)<(18);
   if (!($432)) {
    break;
   }
   $$phi$trans$insert50 = (($z) + ($431<<2)|0);
   $$pre51 = HEAP32[$$phi$trans$insert50>>2]|0;
   $404 = $$pre51;$i$141 = $431;
  }
  $378 = HEAP32[$305>>2]|0;
  $379 = (($378) + 2048)|0;
  $380 = $379 >> 12;
  $381 = ($380*4061)|0;
  HEAP32[$305>>2] = $381;
  $382 = HEAP32[$307>>2]|0;
  $383 = (($382) + 2048)|0;
  $384 = $383 >> 12;
  $385 = ($384*3784)|0;
  HEAP32[$307>>2] = $385;
  $386 = HEAP32[$309>>2]|0;
  $387 = (($386) + 2048)|0;
  $388 = $387 >> 12;
  $389 = ($388*3250)|0;
  HEAP32[$309>>2] = $389;
  $390 = HEAP32[$310>>2]|0;
  $391 = (($390) + 2048)|0;
  $392 = $391 >> 12;
  $393 = ($392*2493)|0;
  HEAP32[$310>>2] = $393;
  $394 = HEAP32[$311>>2]|0;
  $395 = (($394) + 2048)|0;
  $396 = $395 >> 12;
  $397 = ($396*1567)|0;
  HEAP32[$311>>2] = $397;
  $398 = HEAP32[$312>>2]|0;
  $399 = (($398) + 2048)|0;
  $400 = $399 >> 12;
  $401 = ($400*535)|0;
  HEAP32[$312>>2] = $401;
  ;HEAP32[$313>>2]=0|0;HEAP32[$313+4>>2]=0|0;HEAP32[$313+8>>2]=0|0;HEAP32[$313+12>>2]=0|0;HEAP32[$313+16>>2]=0|0;HEAP32[$313+20>>2]=0|0;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  ;HEAP32[$z>>2]=0|0;HEAP32[$z+4>>2]=0|0;HEAP32[$z+8>>2]=0|0;HEAP32[$z+12>>2]=0|0;HEAP32[$z+16>>2]=0|0;HEAP32[$z+20>>2]=0|0;
  $319 = (($261) + 2048)|0;
  $320 = $319 >> 12;
  $321 = ($320*535)|0;
  HEAP32[$271>>2] = $321;
  $322 = (($263) + 2048)|0;
  $323 = $322 >> 12;
  $324 = ($323*1567)|0;
  HEAP32[$272>>2] = $324;
  $325 = (($265) + 2048)|0;
  $326 = $325 >> 12;
  $327 = ($326*2493)|0;
  HEAP32[$273>>2] = $327;
  $328 = (2048 - ($265))|0;
  $329 = $328 >> 12;
  $330 = ($329*3250)|0;
  HEAP32[$275>>2] = $330;
  $331 = (2048 - ($263))|0;
  $332 = $331 >> 12;
  $333 = ($332*3784)|0;
  HEAP32[$277>>2] = $333;
  $334 = (2048 - ($261))|0;
  $335 = $334 >> 12;
  $336 = ($335*4061)|0;
  HEAP32[$279>>2] = $336;
  $435 = $292;$i$642 = 18;
  while(1) {
   $433 = (($z) + ($i$642<<2)|0);
   $434 = (($435) + 2048)|0;
   $436 = $434 >> 12;
   $437 = (42256 + ($i$642<<2)|0);
   $438 = HEAP32[$437>>2]|0;
   $439 = (($438) + 32768)|0;
   $440 = $439 >> 16;
   $441 = Math_imul($440, $436)|0;
   HEAP32[$433>>2] = $441;
   $442 = (($i$642) + 1)|0;
   $443 = (($z) + ($442<<2)|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = (($444) + 2048)|0;
   $446 = $445 >> 12;
   $447 = (42256 + ($442<<2)|0);
   $448 = HEAP32[$447>>2]|0;
   $449 = (($448) + 32768)|0;
   $450 = $449 >> 16;
   $451 = Math_imul($450, $446)|0;
   HEAP32[$443>>2] = $451;
   $452 = (($i$642) + 2)|0;
   $453 = (($z) + ($452<<2)|0);
   $454 = HEAP32[$453>>2]|0;
   $455 = (($454) + 2048)|0;
   $456 = $455 >> 12;
   $457 = (42256 + ($452<<2)|0);
   $458 = HEAP32[$457>>2]|0;
   $459 = (($458) + 32768)|0;
   $460 = $459 >> 16;
   $461 = Math_imul($460, $456)|0;
   HEAP32[$453>>2] = $461;
   $462 = (($i$642) + 3)|0;
   $463 = ($462>>>0)<(36);
   if (!($463)) {
    break;
   }
   $$phi$trans$insert = (($z) + ($462<<2)|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $435 = $$pre;$i$642 = $462;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _synth_half($synth,$frame,$nch,$ns) {
 $synth = $synth|0;
 $frame = $frame|0;
 $nch = $nch|0;
 $ns = $ns|0;
 var $$sum$us = 0, $$sum1$us = 0, $$sum10$us = 0, $$sum11$us = 0, $$sum12$us = 0, $$sum13$us = 0, $$sum2$us = 0, $$sum3$us = 0, $$sum35$us = 0, $$sum36$us = 0, $$sum37$us = 0, $$sum38$us = 0, $$sum39$us = 0, $$sum4$us = 0, $$sum40$us = 0, $$sum41$us = 0, $$sum43$us = 0, $$sum44$us = 0, $$sum45$us = 0, $$sum46$us = 0;
 var $$sum47$us = 0, $$sum48$us = 0, $$sum49$us = 0, $$sum5$us = 0, $$sum50$us = 0, $$sum6$us = 0, $$sum7$us = 0, $$sum8$us = 0, $$sum9$us = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Dptr$085$us = 0, $ch$089$us = 0, $exitcond = 0, $exitcond117 = 0, $exitcond118 = 0, $fe$083$us = 0, $fo$084$us = 0, $indvars$iv$in = 0, $indvars$iv113$in = 0, $pcm1$086$us = 0, $pcm1$181$us = 0, $pcm1$2$us = 0;
 var $pcm1$2$us$lcssa = 0, $pcm2$082$us = 0, $pcm2$1$us = 0, $phase$088$us = 0, $s$087$us = 0, $sb$080$us = 0, $scevgep = 0, $scevgep109 = 0, $scevgep111 = 0, $sum = 0, $sum100 = 0, $sum101 = 0, $sum102 = 0, $sum103 = 0, $sum104 = 0, $sum105 = 0, $sum106 = 0, $sum94 = 0, $sum95 = 0, $sum96 = 0;
 var $sum97 = 0, $sum98 = 0, $sum99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nch|0)==(0);
 if ($0) {
  return;
 }
 $1 = ((($synth)) + 4096|0);
 $2 = ($ns|0)==(0);
 if ($2) {
  return;
 }
 $scevgep = ((($synth)) + 1504|0);
 $scevgep111 = ((($synth)) + 1472|0);
 $ch$089$us = 0;$indvars$iv$in = $scevgep;$indvars$iv113$in = $scevgep111;
 while(1) {
  $337 = (((($synth)) + 4108|0) + (($ch$089$us*4608)|0)|0);
  $338 = HEAP32[$1>>2]|0;
  $pcm1$086$us = $337;$phase$088$us = $338;$s$087$us = 0;
  while(1) {
   $6 = ((((($frame)) + 48|0) + (($ch$089$us*4608)|0)|0) + ($s$087$us<<7)|0);
   $7 = $phase$088$us >>> 1;
   $8 = $phase$088$us & 1;
   $9 = ((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0);
   $10 = ((((($synth) + ($ch$089$us<<11)|0)) + 1024|0) + ($8<<9)|0);
   _dct32($6,$7,$9,$10);
   $11 = $phase$088$us & -2;
   $12 = (($phase$088$us) + 15)|0;
   $13 = $12 & 14;
   $14 = $13 | 1;
   $15 = $8 ^ 1;
   $16 = ((((($synth) + ($ch$089$us<<11)|0)) + 1024|0) + ($15<<9)|0);
   $17 = (40008 + ($14<<2)|0);
   $18 = ((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$17>>2]|0;
   $21 = Math_imul($20, $19)|0;
   $22 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $$sum$us = (($14) + 14)|0;
   $24 = (40008 + ($$sum$us<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = Math_imul($25, $23)|0;
   $27 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $$sum1$us = (($14) + 12)|0;
   $29 = (40008 + ($$sum1$us<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = Math_imul($30, $28)|0;
   $32 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $$sum2$us = (($14) + 10)|0;
   $34 = (40008 + ($$sum2$us<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = Math_imul($35, $33)|0;
   $37 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $$sum3$us = (($14) + 8)|0;
   $39 = (40008 + ($$sum3$us<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = Math_imul($40, $38)|0;
   $42 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 20|0);
   $43 = HEAP32[$42>>2]|0;
   $$sum4$us = (($14) + 6)|0;
   $44 = (40008 + ($$sum4$us<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = Math_imul($45, $43)|0;
   $47 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $$sum5$us = (($14) + 4)|0;
   $49 = (40008 + ($$sum5$us<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = Math_imul($50, $48)|0;
   $52 = ((((($synth) + ($ch$089$us<<11)|0) + ($15<<9)|0)) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $$sum6$us = (($14) + 2)|0;
   $54 = (40008 + ($$sum6$us<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = Math_imul($55, $53)|0;
   $57 = (40008 + ($11<<2)|0);
   $58 = HEAP32[$9>>2]|0;
   $59 = HEAP32[$57>>2]|0;
   $60 = Math_imul($59, $58)|0;
   $sum = (($26) + ($21))|0;
   $sum94 = (($sum) + ($31))|0;
   $sum95 = (($sum94) + ($36))|0;
   $sum96 = (($sum95) + ($41))|0;
   $sum97 = (($sum96) + ($46))|0;
   $sum98 = (($sum97) + ($51))|0;
   $sum99 = (($sum98) + ($56))|0;
   $61 = (($60) - ($sum99))|0;
   $62 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $$sum7$us = (($11) + 14)|0;
   $64 = (40008 + ($$sum7$us<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = Math_imul($65, $63)|0;
   $67 = (($61) + ($66))|0;
   $68 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $$sum8$us = (($11) + 12)|0;
   $70 = (40008 + ($$sum8$us<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = Math_imul($71, $69)|0;
   $73 = (($67) + ($72))|0;
   $74 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $$sum9$us = (($11) + 10)|0;
   $76 = (40008 + ($$sum9$us<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = Math_imul($77, $75)|0;
   $79 = (($73) + ($78))|0;
   $80 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 16|0);
   $81 = HEAP32[$80>>2]|0;
   $$sum10$us = (($11) + 8)|0;
   $82 = (40008 + ($$sum10$us<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = Math_imul($83, $81)|0;
   $85 = (($79) + ($84))|0;
   $86 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 20|0);
   $87 = HEAP32[$86>>2]|0;
   $$sum11$us = (($11) + 6)|0;
   $88 = (40008 + ($$sum11$us<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = Math_imul($89, $87)|0;
   $91 = (($85) + ($90))|0;
   $92 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 24|0);
   $93 = HEAP32[$92>>2]|0;
   $$sum12$us = (($11) + 4)|0;
   $94 = (40008 + ($$sum12$us<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = Math_imul($95, $93)|0;
   $97 = (($91) + ($96))|0;
   $98 = ((((($synth) + ($ch$089$us<<11)|0) + ($8<<9)|0)) + 28|0);
   $99 = HEAP32[$98>>2]|0;
   $$sum13$us = (($11) + 2)|0;
   $100 = (40008 + ($$sum13$us<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = Math_imul($101, $99)|0;
   $103 = (($97) + ($102))|0;
   $104 = $103 >> 2;
   $105 = ((($pcm1$086$us)) + 4|0);
   HEAP32[$pcm1$086$us>>2] = $104;
   $106 = ((($pcm1$086$us)) + 60|0);
   $$sum35$us = (29 - ($14))|0;
   $$sum36$us = (27 - ($14))|0;
   $$sum37$us = (25 - ($14))|0;
   $$sum38$us = (23 - ($14))|0;
   $$sum39$us = (21 - ($14))|0;
   $$sum40$us = (19 - ($14))|0;
   $$sum41$us = (17 - ($14))|0;
   $107 = $13 ^ 14;
   $$sum43$us = (15 - ($11))|0;
   $$sum44$us = (17 - ($11))|0;
   $$sum45$us = (19 - ($11))|0;
   $$sum46$us = (21 - ($11))|0;
   $$sum47$us = (23 - ($11))|0;
   $$sum48$us = (25 - ($11))|0;
   $$sum49$us = (27 - ($11))|0;
   $$sum50$us = (29 - ($11))|0;
   $108 = $phase$088$us & 1;
   $109 = $108 ^ 1;
   $scevgep109 = (($indvars$iv$in) + ($109<<9)|0);
   $Dptr$085$us = 40008;$fe$083$us = $9;$fo$084$us = $16;$pcm1$181$us = $105;$pcm2$082$us = $106;$sb$080$us = 1;
   while(1) {
    $162 = ((($fe$083$us)) + 32|0);
    $163 = ((($Dptr$085$us)) + 128|0);
    $164 = $sb$080$us & 1;
    $165 = ($164|0)==(0);
    if ($165) {
     $166 = (((($Dptr$085$us)) + 128|0) + ($14<<2)|0);
     $167 = HEAP32[$fo$084$us>>2]|0;
     $168 = HEAP32[$166>>2]|0;
     $169 = Math_imul($168, $167)|0;
     $170 = ((($fo$084$us)) + 4|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = (((($Dptr$085$us)) + 128|0) + ($$sum$us<<2)|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = Math_imul($173, $171)|0;
     $175 = ((($fo$084$us)) + 8|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (((($Dptr$085$us)) + 128|0) + ($$sum1$us<<2)|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = Math_imul($178, $176)|0;
     $180 = ((($fo$084$us)) + 12|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = (((($Dptr$085$us)) + 128|0) + ($$sum2$us<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = Math_imul($183, $181)|0;
     $185 = ((($fo$084$us)) + 16|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = (((($Dptr$085$us)) + 128|0) + ($$sum3$us<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = Math_imul($188, $186)|0;
     $190 = ((($fo$084$us)) + 20|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (((($Dptr$085$us)) + 128|0) + ($$sum4$us<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = Math_imul($193, $191)|0;
     $195 = ((($fo$084$us)) + 24|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = (((($Dptr$085$us)) + 128|0) + ($$sum5$us<<2)|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = Math_imul($198, $196)|0;
     $200 = ((($fo$084$us)) + 28|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (((($Dptr$085$us)) + 128|0) + ($$sum6$us<<2)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = Math_imul($203, $201)|0;
     $205 = (((($Dptr$085$us)) + 128|0) + ($11<<2)|0);
     $206 = ((($fe$083$us)) + 60|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (((($Dptr$085$us)) + 128|0) + ($$sum13$us<<2)|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = Math_imul($209, $207)|0;
     $sum100 = (($174) + ($169))|0;
     $sum101 = (($sum100) + ($179))|0;
     $sum102 = (($sum101) + ($184))|0;
     $sum103 = (($sum102) + ($189))|0;
     $sum104 = (($sum103) + ($194))|0;
     $sum105 = (($sum104) + ($199))|0;
     $sum106 = (($sum105) + ($204))|0;
     $211 = (($210) - ($sum106))|0;
     $212 = ((($fe$083$us)) + 56|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = (((($Dptr$085$us)) + 128|0) + ($$sum12$us<<2)|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = Math_imul($215, $213)|0;
     $217 = (($211) + ($216))|0;
     $218 = ((($fe$083$us)) + 52|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = (((($Dptr$085$us)) + 128|0) + ($$sum11$us<<2)|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = Math_imul($221, $219)|0;
     $223 = (($217) + ($222))|0;
     $224 = ((($fe$083$us)) + 48|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = (((($Dptr$085$us)) + 128|0) + ($$sum10$us<<2)|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = Math_imul($227, $225)|0;
     $229 = (($223) + ($228))|0;
     $230 = ((($fe$083$us)) + 44|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = (((($Dptr$085$us)) + 128|0) + ($$sum9$us<<2)|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = Math_imul($233, $231)|0;
     $235 = (($229) + ($234))|0;
     $236 = ((($fe$083$us)) + 40|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = (((($Dptr$085$us)) + 128|0) + ($$sum8$us<<2)|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = Math_imul($239, $237)|0;
     $241 = (($235) + ($240))|0;
     $242 = ((($fe$083$us)) + 36|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = (((($Dptr$085$us)) + 128|0) + ($$sum7$us<<2)|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = Math_imul($245, $243)|0;
     $247 = (($241) + ($246))|0;
     $248 = HEAP32[$162>>2]|0;
     $249 = HEAP32[$205>>2]|0;
     $250 = Math_imul($249, $248)|0;
     $251 = (($247) + ($250))|0;
     $252 = $251 >> 2;
     $253 = ((($pcm1$181$us)) + 4|0);
     HEAP32[$pcm1$181$us>>2] = $252;
     $254 = HEAP32[$200>>2]|0;
     $255 = (((($Dptr$085$us)) + 128|0) + ($$sum35$us<<2)|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = Math_imul($256, $254)|0;
     $258 = HEAP32[$195>>2]|0;
     $259 = (((($Dptr$085$us)) + 128|0) + ($$sum36$us<<2)|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = Math_imul($260, $258)|0;
     $262 = (($261) + ($257))|0;
     $263 = HEAP32[$190>>2]|0;
     $264 = (((($Dptr$085$us)) + 128|0) + ($$sum37$us<<2)|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = Math_imul($265, $263)|0;
     $267 = (($262) + ($266))|0;
     $268 = HEAP32[$185>>2]|0;
     $269 = (((($Dptr$085$us)) + 128|0) + ($$sum38$us<<2)|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = Math_imul($270, $268)|0;
     $272 = (($267) + ($271))|0;
     $273 = HEAP32[$180>>2]|0;
     $274 = (((($Dptr$085$us)) + 128|0) + ($$sum39$us<<2)|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = Math_imul($275, $273)|0;
     $277 = (($272) + ($276))|0;
     $278 = HEAP32[$175>>2]|0;
     $279 = (((($Dptr$085$us)) + 128|0) + ($$sum40$us<<2)|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = Math_imul($280, $278)|0;
     $282 = (($277) + ($281))|0;
     $283 = HEAP32[$170>>2]|0;
     $284 = (((($Dptr$085$us)) + 128|0) + ($$sum41$us<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = Math_imul($285, $283)|0;
     $287 = (($282) + ($286))|0;
     $288 = HEAP32[$fo$084$us>>2]|0;
     $289 = (((($Dptr$085$us)) + 128|0) + ($107<<2)|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = Math_imul($290, $288)|0;
     $292 = (($287) + ($291))|0;
     $293 = HEAP32[$162>>2]|0;
     $294 = (((($Dptr$085$us)) + 128|0) + ($$sum43$us<<2)|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = Math_imul($295, $293)|0;
     $297 = (($292) + ($296))|0;
     $298 = HEAP32[$242>>2]|0;
     $299 = (((($Dptr$085$us)) + 128|0) + ($$sum44$us<<2)|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = Math_imul($300, $298)|0;
     $302 = (($297) + ($301))|0;
     $303 = HEAP32[$236>>2]|0;
     $304 = (((($Dptr$085$us)) + 128|0) + ($$sum45$us<<2)|0);
     $305 = HEAP32[$304>>2]|0;
     $306 = Math_imul($305, $303)|0;
     $307 = (($302) + ($306))|0;
     $308 = HEAP32[$230>>2]|0;
     $309 = (((($Dptr$085$us)) + 128|0) + ($$sum46$us<<2)|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = Math_imul($310, $308)|0;
     $312 = (($307) + ($311))|0;
     $313 = HEAP32[$224>>2]|0;
     $314 = (((($Dptr$085$us)) + 128|0) + ($$sum47$us<<2)|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = Math_imul($315, $313)|0;
     $317 = (($312) + ($316))|0;
     $318 = HEAP32[$218>>2]|0;
     $319 = (((($Dptr$085$us)) + 128|0) + ($$sum48$us<<2)|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = Math_imul($320, $318)|0;
     $322 = (($317) + ($321))|0;
     $323 = HEAP32[$212>>2]|0;
     $324 = (((($Dptr$085$us)) + 128|0) + ($$sum49$us<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = Math_imul($325, $323)|0;
     $327 = (($322) + ($326))|0;
     $328 = HEAP32[$206>>2]|0;
     $329 = (((($Dptr$085$us)) + 128|0) + ($$sum50$us<<2)|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = Math_imul($330, $328)|0;
     $332 = (($327) + ($331))|0;
     $333 = $332 >> 2;
     $334 = ((($pcm2$082$us)) + -4|0);
     HEAP32[$pcm2$082$us>>2] = $333;
     $pcm1$2$us = $253;$pcm2$1$us = $334;
    } else {
     $pcm1$2$us = $pcm1$181$us;$pcm2$1$us = $pcm2$082$us;
    }
    $335 = ((($fo$084$us)) + 32|0);
    $336 = (($sb$080$us) + 1)|0;
    $exitcond = ($336|0)==(16);
    if ($exitcond) {
     $pcm1$2$us$lcssa = $pcm1$2$us;
     break;
    } else {
     $Dptr$085$us = $163;$fe$083$us = $162;$fo$084$us = $335;$pcm1$181$us = $pcm1$2$us;$pcm2$082$us = $pcm2$1$us;$sb$080$us = $336;
    }
   }
   $110 = ((((41800)) + 256|0) + ($14<<2)|0);
   $111 = HEAP32[$scevgep109>>2]|0;
   $112 = HEAP32[$110>>2]|0;
   $113 = Math_imul($112, $111)|0;
   $114 = (((($indvars$iv113$in) + ($109<<9)|0)) + 36|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((((41800)) + 256|0) + ($$sum$us<<2)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = Math_imul($117, $115)|0;
   $119 = (($113) + ($118))|0;
   $120 = (((($indvars$iv113$in) + ($109<<9)|0)) + 40|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ((((41800)) + 256|0) + ($$sum1$us<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = Math_imul($123, $121)|0;
   $125 = (($119) + ($124))|0;
   $126 = (((($indvars$iv113$in) + ($109<<9)|0)) + 44|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ((((41800)) + 256|0) + ($$sum2$us<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = Math_imul($129, $127)|0;
   $131 = (($125) + ($130))|0;
   $132 = (((($indvars$iv113$in) + ($109<<9)|0)) + 48|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ((((41800)) + 256|0) + ($$sum3$us<<2)|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = Math_imul($135, $133)|0;
   $137 = (($131) + ($136))|0;
   $138 = (((($indvars$iv113$in) + ($109<<9)|0)) + 52|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((((41800)) + 256|0) + ($$sum4$us<<2)|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = Math_imul($141, $139)|0;
   $143 = (($137) + ($142))|0;
   $144 = (((($indvars$iv113$in) + ($109<<9)|0)) + 56|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ((((41800)) + 256|0) + ($$sum5$us<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = Math_imul($147, $145)|0;
   $149 = (($143) + ($148))|0;
   $150 = (((($indvars$iv113$in) + ($109<<9)|0)) + 60|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ((((41800)) + 256|0) + ($$sum6$us<<2)|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = Math_imul($153, $151)|0;
   $155 = (($149) + ($154))|0;
   $156 = (0 - ($155))|0;
   $157 = $156 >> 2;
   HEAP32[$pcm1$2$us$lcssa>>2] = $157;
   $158 = ((($pcm1$2$us$lcssa)) + 32|0);
   $159 = (($phase$088$us) + 1)|0;
   $160 = $159 & 15;
   $161 = (($s$087$us) + 1)|0;
   $exitcond117 = ($161|0)==($ns|0);
   if ($exitcond117) {
    break;
   } else {
    $pcm1$086$us = $158;$phase$088$us = $160;$s$087$us = $161;
   }
  }
  $3 = (($ch$089$us) + 1)|0;
  $4 = ((($indvars$iv$in)) + 2048|0);
  $5 = ((($indvars$iv113$in)) + 2048|0);
  $exitcond118 = ($3|0)==($nch|0);
  if ($exitcond118) {
   break;
  } else {
   $ch$089$us = $3;$indvars$iv$in = $4;$indvars$iv113$in = $5;
  }
 }
 return;
}
function _synth_full($synth,$frame,$nch,$ns) {
 $synth = $synth|0;
 $frame = $frame|0;
 $nch = $nch|0;
 $ns = $ns|0;
 var $$sum$us = 0, $$sum1$us = 0, $$sum10$us = 0, $$sum11$us = 0, $$sum12$us = 0, $$sum13$us = 0, $$sum2$us = 0, $$sum3$us = 0, $$sum35$us = 0, $$sum36$us = 0, $$sum37$us = 0, $$sum38$us = 0, $$sum39$us = 0, $$sum4$us = 0, $$sum40$us = 0, $$sum41$us = 0, $$sum42$us = 0, $$sum43$us = 0, $$sum44$us = 0, $$sum45$us = 0;
 var $$sum46$us = 0, $$sum47$us = 0, $$sum48$us = 0, $$sum49$us = 0, $$sum5$us = 0, $$sum6$us = 0, $$sum7$us = 0, $$sum8$us = 0, $$sum9$us = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Dptr$085$us = 0, $ch$090$us = 0, $exitcond = 0, $exitcond121 = 0, $exitcond122 = 0, $fe$083$us = 0, $fo$084$us = 0, $indvars$iv$in = 0, $indvars$iv116$in = 0, $pcm1$087$us = 0, $pcm1$087$us$pn = 0, $pcm1$186$us = 0, $pcm2$082$us = 0, $phase$089$us = 0, $s$088$us = 0, $sb$081$us = 0;
 var $scevgep = 0, $scevgep109 = 0, $scevgep112 = 0, $scevgep114 = 0, $sum = 0, $sum100 = 0, $sum101 = 0, $sum102 = 0, $sum103 = 0, $sum104 = 0, $sum105 = 0, $sum106 = 0, $sum107 = 0, $sum95 = 0, $sum96 = 0, $sum97 = 0, $sum98 = 0, $sum99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nch|0)==(0);
 if ($0) {
  return;
 }
 $1 = ((($synth)) + 4096|0);
 $2 = ($ns|0)==(0);
 if ($2) {
  return;
 }
 $scevgep109 = ((($synth)) + 1504|0);
 $scevgep114 = ((($synth)) + 1472|0);
 $ch$090$us = 0;$indvars$iv$in = $scevgep109;$indvars$iv116$in = $scevgep114;
 while(1) {
  $333 = (((($synth)) + 4108|0) + (($ch$090$us*4608)|0)|0);
  $334 = HEAP32[$1>>2]|0;
  $pcm1$087$us = $333;$phase$089$us = $334;$s$088$us = 0;
  while(1) {
   $6 = ((((($frame)) + 48|0) + (($ch$090$us*4608)|0)|0) + ($s$088$us<<7)|0);
   $7 = $phase$089$us >>> 1;
   $8 = $phase$089$us & 1;
   $9 = ((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0);
   $10 = ((((($synth) + ($ch$090$us<<11)|0)) + 1024|0) + ($8<<9)|0);
   _dct32($6,$7,$9,$10);
   $11 = $phase$089$us & -2;
   $12 = (($phase$089$us) + 15)|0;
   $13 = $12 & 14;
   $14 = $13 | 1;
   $15 = $8 ^ 1;
   $16 = ((((($synth) + ($ch$090$us<<11)|0)) + 1024|0) + ($15<<9)|0);
   $17 = (40008 + ($14<<2)|0);
   $18 = ((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$17>>2]|0;
   $21 = Math_imul($20, $19)|0;
   $22 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $$sum$us = (($14) + 14)|0;
   $24 = (40008 + ($$sum$us<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = Math_imul($25, $23)|0;
   $27 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $$sum1$us = (($14) + 12)|0;
   $29 = (40008 + ($$sum1$us<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = Math_imul($30, $28)|0;
   $32 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $$sum2$us = (($14) + 10)|0;
   $34 = (40008 + ($$sum2$us<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = Math_imul($35, $33)|0;
   $37 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $$sum3$us = (($14) + 8)|0;
   $39 = (40008 + ($$sum3$us<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = Math_imul($40, $38)|0;
   $42 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 20|0);
   $43 = HEAP32[$42>>2]|0;
   $$sum4$us = (($14) + 6)|0;
   $44 = (40008 + ($$sum4$us<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = Math_imul($45, $43)|0;
   $47 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $$sum5$us = (($14) + 4)|0;
   $49 = (40008 + ($$sum5$us<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = Math_imul($50, $48)|0;
   $52 = ((((($synth) + ($ch$090$us<<11)|0) + ($15<<9)|0)) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $$sum6$us = (($14) + 2)|0;
   $54 = (40008 + ($$sum6$us<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = Math_imul($55, $53)|0;
   $57 = (40008 + ($11<<2)|0);
   $58 = HEAP32[$9>>2]|0;
   $59 = HEAP32[$57>>2]|0;
   $60 = Math_imul($59, $58)|0;
   $sum = (($26) + ($21))|0;
   $sum95 = (($sum) + ($31))|0;
   $sum96 = (($sum95) + ($36))|0;
   $sum97 = (($sum96) + ($41))|0;
   $sum98 = (($sum97) + ($46))|0;
   $sum99 = (($sum98) + ($51))|0;
   $sum100 = (($sum99) + ($56))|0;
   $61 = (($60) - ($sum100))|0;
   $62 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $$sum7$us = (($11) + 14)|0;
   $64 = (40008 + ($$sum7$us<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = Math_imul($65, $63)|0;
   $67 = (($61) + ($66))|0;
   $68 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $$sum8$us = (($11) + 12)|0;
   $70 = (40008 + ($$sum8$us<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = Math_imul($71, $69)|0;
   $73 = (($67) + ($72))|0;
   $74 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $$sum9$us = (($11) + 10)|0;
   $76 = (40008 + ($$sum9$us<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = Math_imul($77, $75)|0;
   $79 = (($73) + ($78))|0;
   $80 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 16|0);
   $81 = HEAP32[$80>>2]|0;
   $$sum10$us = (($11) + 8)|0;
   $82 = (40008 + ($$sum10$us<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = Math_imul($83, $81)|0;
   $85 = (($79) + ($84))|0;
   $86 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 20|0);
   $87 = HEAP32[$86>>2]|0;
   $$sum11$us = (($11) + 6)|0;
   $88 = (40008 + ($$sum11$us<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = Math_imul($89, $87)|0;
   $91 = (($85) + ($90))|0;
   $92 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 24|0);
   $93 = HEAP32[$92>>2]|0;
   $$sum12$us = (($11) + 4)|0;
   $94 = (40008 + ($$sum12$us<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = Math_imul($95, $93)|0;
   $97 = (($91) + ($96))|0;
   $98 = ((((($synth) + ($ch$090$us<<11)|0) + ($8<<9)|0)) + 28|0);
   $99 = HEAP32[$98>>2]|0;
   $$sum13$us = (($11) + 2)|0;
   $100 = (40008 + ($$sum13$us<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = Math_imul($101, $99)|0;
   $103 = (($97) + ($102))|0;
   $104 = $103 >> 2;
   HEAP32[$pcm1$087$us>>2] = $104;
   $105 = ((($pcm1$087$us)) + 124|0);
   $$sum35$us = (15 - ($11))|0;
   $$sum36$us = (17 - ($11))|0;
   $$sum37$us = (19 - ($11))|0;
   $$sum38$us = (21 - ($11))|0;
   $$sum39$us = (23 - ($11))|0;
   $$sum40$us = (25 - ($11))|0;
   $$sum41$us = (27 - ($11))|0;
   $$sum42$us = (29 - ($11))|0;
   $$sum43$us = (29 - ($14))|0;
   $$sum44$us = (27 - ($14))|0;
   $$sum45$us = (25 - ($14))|0;
   $$sum46$us = (23 - ($14))|0;
   $$sum47$us = (21 - ($14))|0;
   $$sum48$us = (19 - ($14))|0;
   $$sum49$us = (17 - ($14))|0;
   $106 = $13 ^ 14;
   $107 = $phase$089$us & 1;
   $108 = $107 ^ 1;
   $scevgep112 = (($indvars$iv$in) + ($108<<9)|0);
   $Dptr$085$us = 40008;$fe$083$us = $9;$fo$084$us = $16;$pcm1$087$us$pn = $pcm1$087$us;$pcm2$082$us = $105;$sb$081$us = 1;
   while(1) {
    $pcm1$186$us = ((($pcm1$087$us$pn)) + 4|0);
    $161 = ((($fe$083$us)) + 32|0);
    $162 = ((($Dptr$085$us)) + 128|0);
    $163 = (((($Dptr$085$us)) + 128|0) + ($14<<2)|0);
    $164 = HEAP32[$fo$084$us>>2]|0;
    $165 = HEAP32[$163>>2]|0;
    $166 = Math_imul($165, $164)|0;
    $167 = ((($fo$084$us)) + 4|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (((($Dptr$085$us)) + 128|0) + ($$sum$us<<2)|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = Math_imul($170, $168)|0;
    $172 = ((($fo$084$us)) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = (((($Dptr$085$us)) + 128|0) + ($$sum1$us<<2)|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = Math_imul($175, $173)|0;
    $177 = ((($fo$084$us)) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (((($Dptr$085$us)) + 128|0) + ($$sum2$us<<2)|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = Math_imul($180, $178)|0;
    $182 = ((($fo$084$us)) + 16|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (((($Dptr$085$us)) + 128|0) + ($$sum3$us<<2)|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = Math_imul($185, $183)|0;
    $187 = ((($fo$084$us)) + 20|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = (((($Dptr$085$us)) + 128|0) + ($$sum4$us<<2)|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = Math_imul($190, $188)|0;
    $192 = ((($fo$084$us)) + 24|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (((($Dptr$085$us)) + 128|0) + ($$sum5$us<<2)|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = Math_imul($195, $193)|0;
    $197 = ((($fo$084$us)) + 28|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = (((($Dptr$085$us)) + 128|0) + ($$sum6$us<<2)|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = Math_imul($200, $198)|0;
    $202 = (((($Dptr$085$us)) + 128|0) + ($11<<2)|0);
    $203 = ((($fe$083$us)) + 60|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = (((($Dptr$085$us)) + 128|0) + ($$sum13$us<<2)|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = Math_imul($206, $204)|0;
    $sum101 = (($171) + ($166))|0;
    $sum102 = (($sum101) + ($176))|0;
    $sum103 = (($sum102) + ($181))|0;
    $sum104 = (($sum103) + ($186))|0;
    $sum105 = (($sum104) + ($191))|0;
    $sum106 = (($sum105) + ($196))|0;
    $sum107 = (($sum106) + ($201))|0;
    $208 = (($207) - ($sum107))|0;
    $209 = ((($fe$083$us)) + 56|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = (((($Dptr$085$us)) + 128|0) + ($$sum12$us<<2)|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = Math_imul($212, $210)|0;
    $214 = (($208) + ($213))|0;
    $215 = ((($fe$083$us)) + 52|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = (((($Dptr$085$us)) + 128|0) + ($$sum11$us<<2)|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = Math_imul($218, $216)|0;
    $220 = (($214) + ($219))|0;
    $221 = ((($fe$083$us)) + 48|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = (((($Dptr$085$us)) + 128|0) + ($$sum10$us<<2)|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = Math_imul($224, $222)|0;
    $226 = (($220) + ($225))|0;
    $227 = ((($fe$083$us)) + 44|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = (((($Dptr$085$us)) + 128|0) + ($$sum9$us<<2)|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = Math_imul($230, $228)|0;
    $232 = (($226) + ($231))|0;
    $233 = ((($fe$083$us)) + 40|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (((($Dptr$085$us)) + 128|0) + ($$sum8$us<<2)|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = Math_imul($236, $234)|0;
    $238 = (($232) + ($237))|0;
    $239 = ((($fe$083$us)) + 36|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = (((($Dptr$085$us)) + 128|0) + ($$sum7$us<<2)|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = Math_imul($242, $240)|0;
    $244 = (($238) + ($243))|0;
    $245 = HEAP32[$161>>2]|0;
    $246 = HEAP32[$202>>2]|0;
    $247 = Math_imul($246, $245)|0;
    $248 = (($244) + ($247))|0;
    $249 = $248 >> 2;
    HEAP32[$pcm1$186$us>>2] = $249;
    $250 = HEAP32[$161>>2]|0;
    $251 = (((($Dptr$085$us)) + 128|0) + ($$sum35$us<<2)|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = Math_imul($252, $250)|0;
    $254 = HEAP32[$239>>2]|0;
    $255 = (((($Dptr$085$us)) + 128|0) + ($$sum36$us<<2)|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = Math_imul($256, $254)|0;
    $258 = (($257) + ($253))|0;
    $259 = HEAP32[$233>>2]|0;
    $260 = (((($Dptr$085$us)) + 128|0) + ($$sum37$us<<2)|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = Math_imul($261, $259)|0;
    $263 = (($258) + ($262))|0;
    $264 = HEAP32[$227>>2]|0;
    $265 = (((($Dptr$085$us)) + 128|0) + ($$sum38$us<<2)|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = Math_imul($266, $264)|0;
    $268 = (($263) + ($267))|0;
    $269 = HEAP32[$221>>2]|0;
    $270 = (((($Dptr$085$us)) + 128|0) + ($$sum39$us<<2)|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = Math_imul($271, $269)|0;
    $273 = (($268) + ($272))|0;
    $274 = HEAP32[$215>>2]|0;
    $275 = (((($Dptr$085$us)) + 128|0) + ($$sum40$us<<2)|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = Math_imul($276, $274)|0;
    $278 = (($273) + ($277))|0;
    $279 = HEAP32[$209>>2]|0;
    $280 = (((($Dptr$085$us)) + 128|0) + ($$sum41$us<<2)|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = Math_imul($281, $279)|0;
    $283 = (($278) + ($282))|0;
    $284 = HEAP32[$203>>2]|0;
    $285 = (((($Dptr$085$us)) + 128|0) + ($$sum42$us<<2)|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = Math_imul($286, $284)|0;
    $288 = (($283) + ($287))|0;
    $289 = HEAP32[$197>>2]|0;
    $290 = (((($Dptr$085$us)) + 128|0) + ($$sum43$us<<2)|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = Math_imul($291, $289)|0;
    $293 = (($288) + ($292))|0;
    $294 = HEAP32[$192>>2]|0;
    $295 = (((($Dptr$085$us)) + 128|0) + ($$sum44$us<<2)|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = Math_imul($296, $294)|0;
    $298 = (($293) + ($297))|0;
    $299 = HEAP32[$187>>2]|0;
    $300 = (((($Dptr$085$us)) + 128|0) + ($$sum45$us<<2)|0);
    $301 = HEAP32[$300>>2]|0;
    $302 = Math_imul($301, $299)|0;
    $303 = (($298) + ($302))|0;
    $304 = HEAP32[$182>>2]|0;
    $305 = (((($Dptr$085$us)) + 128|0) + ($$sum46$us<<2)|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = Math_imul($306, $304)|0;
    $308 = (($303) + ($307))|0;
    $309 = HEAP32[$177>>2]|0;
    $310 = (((($Dptr$085$us)) + 128|0) + ($$sum47$us<<2)|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = Math_imul($311, $309)|0;
    $313 = (($308) + ($312))|0;
    $314 = HEAP32[$172>>2]|0;
    $315 = (((($Dptr$085$us)) + 128|0) + ($$sum48$us<<2)|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = Math_imul($316, $314)|0;
    $318 = (($313) + ($317))|0;
    $319 = HEAP32[$167>>2]|0;
    $320 = (((($Dptr$085$us)) + 128|0) + ($$sum49$us<<2)|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = Math_imul($321, $319)|0;
    $323 = (($318) + ($322))|0;
    $324 = HEAP32[$fo$084$us>>2]|0;
    $325 = (((($Dptr$085$us)) + 128|0) + ($106<<2)|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = Math_imul($326, $324)|0;
    $328 = (($323) + ($327))|0;
    $329 = $328 >> 2;
    $330 = ((($pcm2$082$us)) + -4|0);
    HEAP32[$pcm2$082$us>>2] = $329;
    $331 = ((($fo$084$us)) + 32|0);
    $332 = (($sb$081$us) + 1)|0;
    $exitcond = ($332|0)==(16);
    if ($exitcond) {
     break;
    } else {
     $Dptr$085$us = $162;$fe$083$us = $161;$fo$084$us = $331;$pcm1$087$us$pn = $pcm1$186$us;$pcm2$082$us = $330;$sb$081$us = $332;
    }
   }
   $scevgep = ((($pcm1$087$us)) + 64|0);
   $109 = ((((41800)) + 256|0) + ($14<<2)|0);
   $110 = HEAP32[$scevgep112>>2]|0;
   $111 = HEAP32[$109>>2]|0;
   $112 = Math_imul($111, $110)|0;
   $113 = (((($indvars$iv116$in) + ($108<<9)|0)) + 36|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ((((41800)) + 256|0) + ($$sum$us<<2)|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = Math_imul($116, $114)|0;
   $118 = (($112) + ($117))|0;
   $119 = (((($indvars$iv116$in) + ($108<<9)|0)) + 40|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ((((41800)) + 256|0) + ($$sum1$us<<2)|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = Math_imul($122, $120)|0;
   $124 = (($118) + ($123))|0;
   $125 = (((($indvars$iv116$in) + ($108<<9)|0)) + 44|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ((((41800)) + 256|0) + ($$sum2$us<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = Math_imul($128, $126)|0;
   $130 = (($124) + ($129))|0;
   $131 = (((($indvars$iv116$in) + ($108<<9)|0)) + 48|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((((41800)) + 256|0) + ($$sum3$us<<2)|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = Math_imul($134, $132)|0;
   $136 = (($130) + ($135))|0;
   $137 = (((($indvars$iv116$in) + ($108<<9)|0)) + 52|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ((((41800)) + 256|0) + ($$sum4$us<<2)|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = Math_imul($140, $138)|0;
   $142 = (($136) + ($141))|0;
   $143 = (((($indvars$iv116$in) + ($108<<9)|0)) + 56|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ((((41800)) + 256|0) + ($$sum5$us<<2)|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = Math_imul($146, $144)|0;
   $148 = (($142) + ($147))|0;
   $149 = (((($indvars$iv116$in) + ($108<<9)|0)) + 60|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = ((((41800)) + 256|0) + ($$sum6$us<<2)|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = Math_imul($152, $150)|0;
   $154 = (($148) + ($153))|0;
   $155 = (0 - ($154))|0;
   $156 = $155 >> 2;
   HEAP32[$scevgep>>2] = $156;
   $157 = ((($pcm1$087$us)) + 128|0);
   $158 = (($phase$089$us) + 1)|0;
   $159 = $158 & 15;
   $160 = (($s$088$us) + 1)|0;
   $exitcond121 = ($160|0)==($ns|0);
   if ($exitcond121) {
    break;
   } else {
    $pcm1$087$us = $157;$phase$089$us = $159;$s$088$us = $160;
   }
  }
  $3 = (($ch$090$us) + 1)|0;
  $4 = ((($indvars$iv$in)) + 2048|0);
  $5 = ((($indvars$iv116$in)) + 2048|0);
  $exitcond122 = ($3|0)==($nch|0);
  if ($exitcond122) {
   break;
  } else {
   $ch$090$us = $3;$indvars$iv$in = $4;$indvars$iv116$in = $5;
  }
 }
 return;
}
function _dct32($in,$slot,$lo,$hi) {
 $in = $in|0;
 $slot = $slot|0;
 $lo = $lo|0;
 $hi = $hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in>>2]|0;
 $1 = ((($in)) + 124|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0))|0;
 $4 = (($0) + 2048)|0;
 $5 = (($4) - ($2))|0;
 $6 = $5 >> 12;
 $7 = ($6*4091)|0;
 $8 = ((($in)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($in)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9))|0;
 $13 = (($9) + 2048)|0;
 $14 = (($13) - ($11))|0;
 $15 = $14 >> 12;
 $16 = ($15*201)|0;
 $17 = (($16) + ($7))|0;
 $18 = (($7) + 2048)|0;
 $19 = (($18) - ($16))|0;
 $20 = $19 >> 12;
 $21 = ($20*4076)|0;
 $22 = (($12) + ($3))|0;
 $23 = (($3) + 2048)|0;
 $24 = (($23) - ($12))|0;
 $25 = $24 >> 12;
 $26 = ($25*4076)|0;
 $27 = ((($in)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($in)) + 96|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($28))|0;
 $32 = (($28) + 2048)|0;
 $33 = (($32) - ($30))|0;
 $34 = $33 >> 12;
 $35 = ($34*3035)|0;
 $36 = ((($in)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($in)) + 92|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($37))|0;
 $41 = (($37) + 2048)|0;
 $42 = (($41) - ($39))|0;
 $43 = $42 >> 12;
 $44 = ($43*2751)|0;
 $45 = (($44) + ($35))|0;
 $46 = (($35) + 2048)|0;
 $47 = (($46) - ($44))|0;
 $48 = $47 >> 12;
 $49 = ($48*401)|0;
 $50 = (($40) + ($31))|0;
 $51 = (($31) + 2048)|0;
 $52 = (($51) - ($40))|0;
 $53 = $52 >> 12;
 $54 = ($53*401)|0;
 $55 = ((($in)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($in)) + 112|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + ($56))|0;
 $60 = (($56) + 2048)|0;
 $61 = (($60) - ($58))|0;
 $62 = $61 >> 12;
 $63 = ($62*3857)|0;
 $64 = ((($in)) + 48|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($in)) + 76|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + ($65))|0;
 $69 = (($65) + 2048)|0;
 $70 = (($69) - ($67))|0;
 $71 = $70 >> 12;
 $72 = ($71*1380)|0;
 $73 = (($72) + ($63))|0;
 $74 = (($63) + 2048)|0;
 $75 = (($74) - ($72))|0;
 $76 = $75 >> 12;
 $77 = ($76*3166)|0;
 $78 = (($68) + ($59))|0;
 $79 = (($59) + 2048)|0;
 $80 = (($79) - ($68))|0;
 $81 = $80 >> 12;
 $82 = ($81*3166)|0;
 $83 = ((($in)) + 16|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($in)) + 108|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + ($84))|0;
 $88 = (($84) + 2048)|0;
 $89 = (($88) - ($86))|0;
 $90 = $89 >> 12;
 $91 = ($90*3703)|0;
 $92 = ((($in)) + 44|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($in)) + 80|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + ($93))|0;
 $97 = (($93) + 2048)|0;
 $98 = (($97) - ($95))|0;
 $99 = $98 >> 12;
 $100 = ($99*1751)|0;
 $101 = (($100) + ($91))|0;
 $102 = (($91) + 2048)|0;
 $103 = (($102) - ($100))|0;
 $104 = $103 >> 12;
 $105 = ($104*2598)|0;
 $106 = (($96) + ($87))|0;
 $107 = (($87) + 2048)|0;
 $108 = (($107) - ($96))|0;
 $109 = $108 >> 12;
 $110 = ($109*2598)|0;
 $111 = ((($in)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ((($in)) + 120|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (($114) + ($112))|0;
 $116 = (($112) + 2048)|0;
 $117 = (($116) - ($114))|0;
 $118 = $117 >> 12;
 $119 = ($118*4052)|0;
 $120 = ((($in)) + 56|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ((($in)) + 68|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (($123) + ($121))|0;
 $125 = (($121) + 2048)|0;
 $126 = (($125) - ($123))|0;
 $127 = $126 >> 12;
 $128 = ($127*601)|0;
 $129 = (($128) + ($119))|0;
 $130 = (($119) + 2048)|0;
 $131 = (($130) - ($128))|0;
 $132 = $131 >> 12;
 $133 = ($132*3920)|0;
 $134 = (($124) + ($115))|0;
 $135 = (($115) + 2048)|0;
 $136 = (($135) - ($124))|0;
 $137 = $136 >> 12;
 $138 = ($137*3920)|0;
 $139 = ((($in)) + 24|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ((($in)) + 100|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (($142) + ($140))|0;
 $144 = (($140) + 2048)|0;
 $145 = (($144) - ($142))|0;
 $146 = $145 >> 12;
 $147 = ($146*3290)|0;
 $148 = ((($in)) + 36|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ((($in)) + 88|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($151) + ($149))|0;
 $153 = (($149) + 2048)|0;
 $154 = (($153) - ($151))|0;
 $155 = $154 >> 12;
 $156 = ($155*2440)|0;
 $157 = (($156) + ($147))|0;
 $158 = (($147) + 2048)|0;
 $159 = (($158) - ($156))|0;
 $160 = $159 >> 12;
 $161 = ($160*1189)|0;
 $162 = (($152) + ($143))|0;
 $163 = (($143) + 2048)|0;
 $164 = (($163) - ($152))|0;
 $165 = $164 >> 12;
 $166 = ($165*1189)|0;
 $167 = ((($in)) + 8|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ((($in)) + 116|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = (($170) + ($168))|0;
 $172 = (($168) + 2048)|0;
 $173 = (($172) - ($170))|0;
 $174 = $173 >> 12;
 $175 = ($174*3973)|0;
 $176 = ((($in)) + 52|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ((($in)) + 72|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = (($179) + ($177))|0;
 $181 = (($177) + 2048)|0;
 $182 = (($181) - ($179))|0;
 $183 = $182 >> 12;
 $184 = ($183*995)|0;
 $185 = (($184) + ($175))|0;
 $186 = (($175) + 2048)|0;
 $187 = (($186) - ($184))|0;
 $188 = $187 >> 12;
 $189 = ($188*3612)|0;
 $190 = (($180) + ($171))|0;
 $191 = (($171) + 2048)|0;
 $192 = (($191) - ($180))|0;
 $193 = $192 >> 12;
 $194 = ($193*3612)|0;
 $195 = ((($in)) + 20|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = ((($in)) + 104|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = (($198) + ($196))|0;
 $200 = (($196) + 2048)|0;
 $201 = (($200) - ($198))|0;
 $202 = $201 >> 12;
 $203 = ($202*3513)|0;
 $204 = ((($in)) + 40|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ((($in)) + 84|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = (($207) + ($205))|0;
 $209 = (($205) + 2048)|0;
 $210 = (($209) - ($207))|0;
 $211 = $210 >> 12;
 $212 = ($211*2106)|0;
 $213 = (($212) + ($203))|0;
 $214 = (($203) + 2048)|0;
 $215 = (($214) - ($212))|0;
 $216 = $215 >> 12;
 $217 = ($216*1931)|0;
 $218 = (($208) + ($199))|0;
 $219 = (($199) + 2048)|0;
 $220 = (($219) - ($208))|0;
 $221 = $220 >> 12;
 $222 = ($221*1931)|0;
 $223 = (($50) + ($22))|0;
 $224 = (($22) + 2048)|0;
 $225 = (($224) - ($50))|0;
 $226 = $225 >> 12;
 $227 = ($226*4017)|0;
 $228 = (($106) + ($78))|0;
 $229 = (($78) + 2048)|0;
 $230 = (($229) - ($106))|0;
 $231 = $230 >> 12;
 $232 = ($231*799)|0;
 $233 = (($162) + ($134))|0;
 $234 = (($134) + 2048)|0;
 $235 = (($234) - ($162))|0;
 $236 = $235 >> 12;
 $237 = ($236*3406)|0;
 $238 = (($218) + ($190))|0;
 $239 = (($190) + 2048)|0;
 $240 = (($239) - ($218))|0;
 $241 = $240 >> 12;
 $242 = ($241*2276)|0;
 $243 = (($45) + ($17))|0;
 $244 = (($17) + 2048)|0;
 $245 = (($244) - ($45))|0;
 $246 = $245 >> 12;
 $247 = ($246*4017)|0;
 $248 = (($101) + ($73))|0;
 $249 = (($73) + 2048)|0;
 $250 = (($249) - ($101))|0;
 $251 = $250 >> 12;
 $252 = ($251*799)|0;
 $253 = (($157) + ($129))|0;
 $254 = (($129) + 2048)|0;
 $255 = (($254) - ($157))|0;
 $256 = $255 >> 12;
 $257 = ($256*3406)|0;
 $258 = (($213) + ($185))|0;
 $259 = (($185) + 2048)|0;
 $260 = (($259) - ($213))|0;
 $261 = $260 >> 12;
 $262 = ($261*2276)|0;
 $263 = (($54) + ($26))|0;
 $264 = (($26) + 2048)|0;
 $265 = (($264) - ($54))|0;
 $266 = $265 >> 12;
 $267 = ($266*4017)|0;
 $268 = (($110) + ($82))|0;
 $269 = (($82) + 2048)|0;
 $270 = (($269) - ($110))|0;
 $271 = $270 >> 12;
 $272 = ($271*799)|0;
 $273 = (($166) + ($138))|0;
 $274 = (($138) + 2048)|0;
 $275 = (($274) - ($166))|0;
 $276 = $275 >> 12;
 $277 = ($276*3406)|0;
 $278 = (($222) + ($194))|0;
 $279 = (($194) + 2048)|0;
 $280 = (($279) - ($222))|0;
 $281 = $280 >> 12;
 $282 = ($281*2276)|0;
 $283 = (($49) + ($21))|0;
 $284 = (($21) + 2048)|0;
 $285 = (($284) - ($49))|0;
 $286 = $285 >> 12;
 $287 = ($286*4017)|0;
 $288 = (($105) + ($77))|0;
 $289 = (($77) + 2048)|0;
 $290 = (($289) - ($105))|0;
 $291 = $290 >> 12;
 $292 = ($291*799)|0;
 $293 = (($161) + ($133))|0;
 $294 = (($133) + 2048)|0;
 $295 = (($294) - ($161))|0;
 $296 = $295 >> 12;
 $297 = ($296*3406)|0;
 $298 = (($217) + ($189))|0;
 $299 = (($189) + 2048)|0;
 $300 = (($299) - ($217))|0;
 $301 = $300 >> 12;
 $302 = ($301*2276)|0;
 $303 = (($228) + ($223))|0;
 $304 = (($238) + ($233))|0;
 $305 = (($303) + 2048)|0;
 $306 = (($305) + ($304))|0;
 $307 = $306 >> 12;
 $308 = (((($hi)) + 480|0) + ($slot<<2)|0);
 HEAP32[$308>>2] = $307;
 $309 = (($305) - ($304))|0;
 $310 = $309 >> 12;
 $311 = ($310*2896)|0;
 $312 = (($311) + 2048)|0;
 $313 = $312 >> 12;
 $314 = (($lo) + ($slot<<2)|0);
 HEAP32[$314>>2] = $313;
 $315 = (($248) + ($243))|0;
 $316 = (($258) + ($253))|0;
 $317 = (($316) + ($315))|0;
 $318 = (($317) + 2048)|0;
 $319 = $318 >> 12;
 $320 = (((($hi)) + 448|0) + ($slot<<2)|0);
 HEAP32[$320>>2] = $319;
 $321 = (($268) + ($263))|0;
 $322 = (($278) + ($273))|0;
 $323 = (($322) + ($321))|0;
 $324 = (($323) + 2048)|0;
 $325 = $324 >> 12;
 $326 = (((($hi)) + 416|0) + ($slot<<2)|0);
 HEAP32[$326>>2] = $325;
 $327 = (($288) + ($283))|0;
 $328 = (($298) + ($293))|0;
 $329 = (($328) + ($327))|0;
 $330 = $329 << 1;
 $331 = (($330) - ($317))|0;
 $332 = (($331) + 2048)|0;
 $333 = $332 >> 12;
 $334 = (((($hi)) + 384|0) + ($slot<<2)|0);
 HEAP32[$334>>2] = $333;
 $335 = (($232) + ($227))|0;
 $336 = (($242) + ($237))|0;
 $337 = (($336) + ($335))|0;
 $338 = (($337) + 2048)|0;
 $339 = $338 >> 12;
 $340 = (((($hi)) + 352|0) + ($slot<<2)|0);
 HEAP32[$340>>2] = $339;
 $341 = (($252) + ($247))|0;
 $342 = (($262) + ($257))|0;
 $343 = (($342) + ($341))|0;
 $344 = $343 << 1;
 $345 = (($344) - ($331))|0;
 $346 = (($345) + 2048)|0;
 $347 = $346 >> 12;
 $348 = (((($hi)) + 320|0) + ($slot<<2)|0);
 HEAP32[$348>>2] = $347;
 $349 = (($272) + ($267))|0;
 $350 = (($282) + ($277))|0;
 $351 = (($350) + ($349))|0;
 $352 = $351 << 1;
 $353 = (($352) - ($323))|0;
 $354 = (($353) + 2048)|0;
 $355 = $354 >> 12;
 $356 = (((($hi)) + 288|0) + ($slot<<2)|0);
 HEAP32[$356>>2] = $355;
 $357 = (($292) + ($287))|0;
 $358 = (($302) + ($297))|0;
 $359 = (($358) + ($357))|0;
 $360 = $359 << 1;
 $361 = (($360) - ($329))|0;
 $362 = $361 << 1;
 $363 = (($362) - ($345))|0;
 $364 = (($363) + 2048)|0;
 $365 = $364 >> 12;
 $366 = (((($hi)) + 256|0) + ($slot<<2)|0);
 HEAP32[$366>>2] = $365;
 $367 = (($223) + 2048)|0;
 $368 = (($367) - ($228))|0;
 $369 = $368 >> 12;
 $370 = ($369*3784)|0;
 $371 = (($233) + 2048)|0;
 $372 = (($371) - ($238))|0;
 $373 = $372 >> 12;
 $374 = ($373*1567)|0;
 $375 = (($374) + ($370))|0;
 $376 = (($375) + 2048)|0;
 $377 = $376 >> 12;
 $378 = (((($hi)) + 224|0) + ($slot<<2)|0);
 HEAP32[$378>>2] = $377;
 $379 = (($370) + 2048)|0;
 $380 = (($379) - ($374))|0;
 $381 = $380 >> 12;
 $382 = ($381*5792)|0;
 $383 = (2048 - ($375))|0;
 $384 = (($383) + ($382))|0;
 $385 = $384 >> 12;
 $386 = (((($lo)) + 256|0) + ($slot<<2)|0);
 HEAP32[$386>>2] = $385;
 $387 = (($243) + 2048)|0;
 $388 = (($387) - ($248))|0;
 $389 = $388 >> 12;
 $390 = ($389*3784)|0;
 $391 = (($253) + 2048)|0;
 $392 = (($391) - ($258))|0;
 $393 = $392 >> 12;
 $394 = ($393*1567)|0;
 $395 = (($394) + ($390))|0;
 $396 = $395 << 1;
 $397 = (($396) - ($363))|0;
 $398 = (($397) + 2048)|0;
 $399 = $398 >> 12;
 $400 = (((($hi)) + 192|0) + ($slot<<2)|0);
 HEAP32[$400>>2] = $399;
 $401 = (($263) + 2048)|0;
 $402 = (($401) - ($268))|0;
 $403 = $402 >> 12;
 $404 = ($403*3784)|0;
 $405 = (($273) + 2048)|0;
 $406 = (($405) - ($278))|0;
 $407 = $406 >> 12;
 $408 = ($407*1567)|0;
 $409 = (($408) + ($404))|0;
 $410 = $409 << 1;
 $411 = (($410) - ($353))|0;
 $412 = (($411) + 2048)|0;
 $413 = $412 >> 12;
 $414 = (((($hi)) + 160|0) + ($slot<<2)|0);
 HEAP32[$414>>2] = $413;
 $415 = (($283) + 2048)|0;
 $416 = (($415) - ($288))|0;
 $417 = $416 >> 12;
 $418 = ($417*3784)|0;
 $419 = (($293) + 2048)|0;
 $420 = (($419) - ($298))|0;
 $421 = $420 >> 12;
 $422 = ($421*1567)|0;
 $423 = (($422) + ($418))|0;
 $424 = $423 << 1;
 $425 = (($424) - ($361))|0;
 $426 = $425 << 1;
 $427 = (($426) - ($397))|0;
 $428 = (($427) + 2048)|0;
 $429 = $428 >> 12;
 $430 = (((($hi)) + 128|0) + ($slot<<2)|0);
 HEAP32[$430>>2] = $429;
 $431 = (($227) + 2048)|0;
 $432 = (($431) - ($232))|0;
 $433 = $432 >> 12;
 $434 = ($433*3784)|0;
 $435 = (($237) + 2048)|0;
 $436 = (($435) - ($242))|0;
 $437 = $436 >> 12;
 $438 = ($437*1567)|0;
 $439 = (($438) + ($434))|0;
 $440 = $439 << 1;
 $441 = (($440) - ($337))|0;
 $442 = (($441) + 2048)|0;
 $443 = $442 >> 12;
 $444 = (((($hi)) + 96|0) + ($slot<<2)|0);
 HEAP32[$444>>2] = $443;
 $445 = (($335) + 2048)|0;
 $446 = (($445) - ($336))|0;
 $447 = $446 >> 12;
 $448 = ($447*5792)|0;
 $449 = (($448) - ($441))|0;
 $450 = (($449) + 2048)|0;
 $451 = $450 >> 12;
 $452 = (((($lo)) + 128|0) + ($slot<<2)|0);
 HEAP32[$452>>2] = $451;
 $453 = (($434) + 2048)|0;
 $454 = (($453) - ($438))|0;
 $455 = $454 >> 12;
 $456 = ($455*5792)|0;
 $457 = (($456) - ($439))|0;
 $458 = $457 << 1;
 $459 = (2048 - ($449))|0;
 $460 = (($459) + ($458))|0;
 $461 = $460 >> 12;
 $462 = (((($lo)) + 384|0) + ($slot<<2)|0);
 HEAP32[$462>>2] = $461;
 $463 = (($247) + 2048)|0;
 $464 = (($463) - ($252))|0;
 $465 = $464 >> 12;
 $466 = ($465*3784)|0;
 $467 = (($257) + 2048)|0;
 $468 = (($467) - ($262))|0;
 $469 = $468 >> 12;
 $470 = ($469*1567)|0;
 $471 = (($470) + ($466))|0;
 $472 = $471 << 1;
 $473 = (($472) - ($343))|0;
 $474 = $473 << 1;
 $475 = (($474) - ($427))|0;
 $476 = (($475) + 2048)|0;
 $477 = $476 >> 12;
 $478 = (((($hi)) + 64|0) + ($slot<<2)|0);
 HEAP32[$478>>2] = $477;
 $479 = (($341) + 2048)|0;
 $480 = (($479) - ($342))|0;
 $481 = $480 >> 12;
 $482 = ($481*5792)|0;
 $483 = (($482) - ($473))|0;
 $484 = (($267) + 2048)|0;
 $485 = (($484) - ($272))|0;
 $486 = $485 >> 12;
 $487 = ($486*3784)|0;
 $488 = (($277) + 2048)|0;
 $489 = (($488) - ($282))|0;
 $490 = $489 >> 12;
 $491 = ($490*1567)|0;
 $492 = (($491) + ($487))|0;
 $493 = $492 << 1;
 $494 = (($493) - ($351))|0;
 $495 = $494 << 1;
 $496 = (($495) - ($411))|0;
 $497 = (($496) + 2048)|0;
 $498 = $497 >> 12;
 $499 = (((($hi)) + 32|0) + ($slot<<2)|0);
 HEAP32[$499>>2] = $498;
 $500 = (($321) + 2048)|0;
 $501 = (($500) - ($322))|0;
 $502 = $501 >> 12;
 $503 = ($502*5792)|0;
 $504 = (($503) - ($496))|0;
 $505 = (($504) + 2048)|0;
 $506 = $505 >> 12;
 $507 = (((($lo)) + 64|0) + ($slot<<2)|0);
 HEAP32[$507>>2] = $506;
 $508 = (($349) + 2048)|0;
 $509 = (($508) - ($350))|0;
 $510 = $509 >> 12;
 $511 = ($510*5792)|0;
 $512 = (($511) - ($494))|0;
 $513 = $512 << 1;
 $514 = (($513) - ($504))|0;
 $515 = (($514) + 2048)|0;
 $516 = $515 >> 12;
 $517 = (((($lo)) + 192|0) + ($slot<<2)|0);
 HEAP32[$517>>2] = $516;
 $518 = (($404) + 2048)|0;
 $519 = (($518) - ($408))|0;
 $520 = $519 >> 12;
 $521 = ($520*5792)|0;
 $522 = (($521) - ($409))|0;
 $523 = $522 << 1;
 $524 = (($523) - ($514))|0;
 $525 = (($524) + 2048)|0;
 $526 = $525 >> 12;
 $527 = (((($lo)) + 320|0) + ($slot<<2)|0);
 HEAP32[$527>>2] = $526;
 $528 = (($487) + 2048)|0;
 $529 = (($528) - ($491))|0;
 $530 = $529 >> 12;
 $531 = ($530*5792)|0;
 $532 = (($531) - ($492))|0;
 $533 = $532 << 1;
 $534 = (($533) - ($512))|0;
 $535 = $534 << 1;
 $536 = (2048 - ($524))|0;
 $537 = (($536) + ($535))|0;
 $538 = $537 >> 12;
 $539 = (((($lo)) + 448|0) + ($slot<<2)|0);
 HEAP32[$539>>2] = $538;
 $540 = (($287) + 2048)|0;
 $541 = (($540) - ($292))|0;
 $542 = $541 >> 12;
 $543 = ($542*3784)|0;
 $544 = (($297) + 2048)|0;
 $545 = (($544) - ($302))|0;
 $546 = $545 >> 12;
 $547 = ($546*1567)|0;
 $548 = (($547) + ($543))|0;
 $549 = $548 << 1;
 $550 = (($549) - ($359))|0;
 $551 = $550 << 1;
 $552 = (($551) - ($425))|0;
 $553 = (($327) + 2048)|0;
 $554 = (($553) - ($328))|0;
 $555 = $554 >> 12;
 $556 = ($555*5792)|0;
 $557 = (($556) - ($552))|0;
 $558 = $552 << 1;
 $559 = (($558) - ($475))|0;
 $560 = (($559) + 2048)|0;
 $561 = $560 >> 12;
 $562 = (($hi) + ($slot<<2)|0);
 HEAP32[$562>>2] = $561;
 $563 = (($315) + 2048)|0;
 $564 = (($563) - ($316))|0;
 $565 = $564 >> 12;
 $566 = ($565*5792)|0;
 $567 = (($566) - ($559))|0;
 $568 = (($567) + 2048)|0;
 $569 = $568 >> 12;
 $570 = (((($lo)) + 32|0) + ($slot<<2)|0);
 HEAP32[$570>>2] = $569;
 $571 = $557 << 1;
 $572 = (($571) - ($567))|0;
 $573 = (($572) + 2048)|0;
 $574 = $573 >> 12;
 $575 = (((($lo)) + 96|0) + ($slot<<2)|0);
 HEAP32[$575>>2] = $574;
 $576 = $483 << 1;
 $577 = (($576) - ($572))|0;
 $578 = (($577) + 2048)|0;
 $579 = $578 >> 12;
 $580 = (((($lo)) + 160|0) + ($slot<<2)|0);
 HEAP32[$580>>2] = $579;
 $581 = (($357) + 2048)|0;
 $582 = (($581) - ($358))|0;
 $583 = $582 >> 12;
 $584 = ($583*5792)|0;
 $585 = (($584) - ($550))|0;
 $586 = $585 << 1;
 $587 = (($586) - ($557))|0;
 $588 = $587 << 1;
 $589 = (($588) - ($577))|0;
 $590 = (($589) + 2048)|0;
 $591 = $590 >> 12;
 $592 = (((($lo)) + 224|0) + ($slot<<2)|0);
 HEAP32[$592>>2] = $591;
 $593 = (($390) + 2048)|0;
 $594 = (($593) - ($394))|0;
 $595 = $594 >> 12;
 $596 = ($595*5792)|0;
 $597 = (($596) - ($395))|0;
 $598 = $597 << 1;
 $599 = (($598) - ($589))|0;
 $600 = (($599) + 2048)|0;
 $601 = $600 >> 12;
 $602 = (((($lo)) + 288|0) + ($slot<<2)|0);
 HEAP32[$602>>2] = $601;
 $603 = (($418) + 2048)|0;
 $604 = (($603) - ($422))|0;
 $605 = $604 >> 12;
 $606 = ($605*5792)|0;
 $607 = (($606) - ($423))|0;
 $608 = $607 << 1;
 $609 = (($608) - ($587))|0;
 $610 = $609 << 1;
 $611 = (($610) - ($599))|0;
 $612 = (($611) + 2048)|0;
 $613 = $612 >> 12;
 $614 = (((($lo)) + 352|0) + ($slot<<2)|0);
 HEAP32[$614>>2] = $613;
 $615 = (($466) + 2048)|0;
 $616 = (($615) - ($470))|0;
 $617 = $616 >> 12;
 $618 = ($617*5792)|0;
 $619 = (($618) - ($471))|0;
 $620 = $619 << 1;
 $621 = (($620) - ($483))|0;
 $622 = $621 << 1;
 $623 = (($622) - ($611))|0;
 $624 = (($623) + 2048)|0;
 $625 = $624 >> 12;
 $626 = (((($lo)) + 416|0) + ($slot<<2)|0);
 HEAP32[$626>>2] = $625;
 $627 = (($543) + 2048)|0;
 $628 = (($627) - ($547))|0;
 $629 = $628 >> 12;
 $630 = ($629*5792)|0;
 $631 = (($630) - ($548))|0;
 $632 = $631 << 1;
 $633 = (($632) - ($585))|0;
 $634 = $633 << 1;
 $635 = (($634) - ($609))|0;
 $636 = $635 << 1;
 $637 = (($636) + 2048)|0;
 $638 = (($637) - ($623))|0;
 $639 = $638 >> 12;
 $640 = (((($lo)) + 480|0) + ($slot<<2)|0);
 HEAP32[$640>>2] = $639;
 return;
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ti;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (___strdup($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($1|0),(68136|0));
 $2 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($2|0),(68141|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(68146);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(68151);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(68163);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(68177);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(68183);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(68198);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(68202);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(68215);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(68220);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(68234);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(68240);
 $3 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($3|0),(68247|0));
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(68259|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($5|0),4,(68292|0));
 $6 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($6|0),(68305|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(68321);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(68351);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(68388);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(68427);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(68458);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(68498);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(68527);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(68565);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(68595);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(68634);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(68666);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(68699);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(68732);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(68766);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(68799);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(68833);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(68864);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(68896);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init131();
 return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $2 = $0;
 $3 = -128 << 24 >> 24;
 $4 = 127 << 24 >> 24;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $2 = $0;
 $3 = -128 << 24 >> 24;
 $4 = 127 << 24 >> 24;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $2 = $0;
 $3 = 0;
 $4 = 255;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $2 = $0;
 $3 = -32768 << 16 >> 16;
 $4 = 32767 << 16 >> 16;
 __embind_register_integer(($1|0),($2|0),2,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $2 = $0;
 $3 = 0;
 $4 = 65535;
 __embind_register_integer(($1|0),($2|0),2,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $2 = $0;
 __embind_register_float(($1|0),($2|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $2 = $0;
 __embind_register_float(($1|0),($2|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (184|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (192|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (200|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (208|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (216|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (224|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (232|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (240|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (248|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (256|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (264|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (272|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (280|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (304|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (576|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (568|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (560|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (552|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (544|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (528|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (520|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (504|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (512|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (496|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (488|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (472|0);
}
function ___cxx_global_var_init131() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(69431);
 return;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[43092>>2]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((69780|0),(69809|0),1164,(69884|0));
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((69905|0),(69928|0),303,(69884|0));
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((42840|0),(457|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[42836>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(70003,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 511]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (42604);
   ___cxa_throw(($7|0),(328|0),(2|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (42604);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (70052|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(458,(70067|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(458,(70107|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(443);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(459)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[10648]|0;HEAP32[10648] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[42616>>2]|0;HEAP32[42616>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (42628);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (42648);
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (70157|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,392,408,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$$i = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $info = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$adjustedPtr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$adjustedPtr>>2] = $1;
 $2 = ($this|0)==($thrown_type|0);
 $3 = ($thrown_type|0)==(480|0);
 $$$i = $2 | $3;
 if ($$$i) {
  $$1 = 1;
 } else {
  $4 = ($thrown_type|0)==(0|0);
  if ($4) {
   $$1 = 0;
  } else {
   $5 = (___dynamic_cast($thrown_type,392,440,0)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$1 = 0;
   } else {
    $7 = ((($5)) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($this)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10 ^ -1;
    $12 = $8 & $11;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = ((($this)) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ((($5)) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($15|0)==($17|0);
     $19 = ($15|0)==(472|0);
     $or$cond = $19 | $18;
     if ($or$cond) {
      $$1 = 1;
     } else {
      $20 = ($15|0)==(0|0);
      if ($20) {
       $$1 = 0;
      } else {
       $21 = (___dynamic_cast($15,392,408,0)|0);
       $22 = ($21|0)==(0|0);
       if ($22) {
        $$1 = 0;
       } else {
        $23 = HEAP32[$16>>2]|0;
        $24 = ($23|0)==(0|0);
        if ($24) {
         $$1 = 0;
        } else {
         $25 = (___dynamic_cast($23,392,408,0)|0);
         $26 = ($25|0)==(0|0);
         if ($26) {
          $$1 = 0;
         } else {
          dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
          HEAP32[$info>>2] = $25;
          $27 = ((($info)) + 8|0);
          HEAP32[$27>>2] = $21;
          $28 = ((($info)) + 12|0);
          HEAP32[$28>>2] = -1;
          $29 = ((($info)) + 48|0);
          HEAP32[$29>>2] = 1;
          $30 = HEAP32[$25>>2]|0;
          $31 = ((($30)) + 28|0);
          $32 = HEAP32[$31>>2]|0;
          $33 = HEAP32[$adjustedPtr>>2]|0;
          FUNCTION_TABLE_viiii[$32 & 511]($25,$info,$33,1);
          $34 = ((($info)) + 24|0);
          $35 = HEAP32[$34>>2]|0;
          $36 = ($35|0)==(1);
          if ($36) {
           $37 = ((($info)) + 16|0);
           $38 = HEAP32[$37>>2]|0;
           HEAP32[$adjustedPtr>>2] = $38;
           $$0 = 1;
          } else {
           $$0 = 0;
          }
          $$1 = $$0;
         }
        }
       }
      }
     }
    } else {
     $$1 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 L1: do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 511]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 511]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   switch ($27|0) {
   case 0:  {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($this)) + 16|0) + ($24<<3)|0);
     $26 = ((($info)) + 52|0);
     $27 = ((($info)) + 53|0);
     $28 = ((($info)) + 54|0);
     $29 = ((($this)) + 8|0);
     $30 = ((($info)) + 24|0);
     $31 = ($24|0)>(0);
     L34: do {
      if ($31) {
       $32 = ((($this)) + 16|0);
       $does_dst_type_point_to_our_static_type$0$off023 = 0;$is_dst_type_derived_from_static_type$0$off025 = 0;$p$024 = $32;
       while(1) {
        HEAP8[$26>>0] = 0;
        HEAP8[$27>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$28>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L34;
        }
        $35 = HEAP8[$27>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = HEAP8[$26>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$29>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L34;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$30>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           break L34;
          }
          $41 = HEAP32[$29>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           break L34;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = ((($p$024)) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;$p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;$is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while(0);
     do {
      if ((label|0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14>>2] = $current_ptr;
        $49 = ((($info)) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (($50) + 1)|0;
        HEAP32[$49>>2] = $51;
        $52 = ((($info)) + 36|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(1);
        if ($54) {
         $55 = HEAP32[$30>>2]|0;
         $56 = ($55|0)==(2);
         if ($56) {
          HEAP8[$28>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label|0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($info)) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($this)) + 16|0);
  $8 = ((($this)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($this)) + 16|0) + ($9<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L4: do {
   if ($11) {
    $12 = ((($this)) + 24|0);
    $13 = ((($info)) + 24|0);
    $14 = ((($this)) + 8|0);
    $15 = ((($info)) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L4;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L4;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = ((($p$0)) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,392,440,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(328|0),(2|0));
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    HEAP32[$vararg_buffer7>>2] = 70460;
    _abort_message(70410,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[344>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 1023](344,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 1023]($29)|0);
    HEAP32[$vararg_buffer>>2] = 70460;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $33;
    _abort_message(70324,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 70460;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(70369,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(70448,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((42836|0),(460|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(70171,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[42836>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(70221,$vararg_buffer);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((70274|0),(69809|0),1175,(70303|0));
 // unreachable;
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (43108|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (43112|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (43116|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (70469 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 70557;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 70557;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 70557;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[42844>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 43120;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
 var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
 var $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (72361 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (75238 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$694 = $156;$695 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $170;$697 = $168;$698 = $170;$699 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$09$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$09$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$09$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$09$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$1$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$1$ph$i = $344;
       }
       $345 = ($$1$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$1$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$1$be$i = $356;
         }
         $357 = ($$1$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1102$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
            break L205;
           }
          } else {
           $364 = ($k$0103$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3105$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
           $370 = ($j$0104$i|0)==(0);
           $371 = (($x$i) + ($k$0103$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3105$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0104$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0103$i))|0;
           $$11$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $706;$394 = $708;$396 = $707;$397 = $709;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3101$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $700;$394 = 0;$396 = $701;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond13$i = $401 & $399;
        if (!($or$cond13$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $395;$717 = $398;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $395;$723 = $398;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$0$i27 = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $426 = $716;$428 = $714;$429 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $426 = $722;$428 = $719;$429 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$0$i27 = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$0$i27 = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond15$i = $438 | $440;
         if ($or$cond15$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$0$i27 = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$0$i27 = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$0$i27 = $467;
         break;
        }
        $468 = ($j$067$i|0)==(0);
        if ($468) {
         $k$3$i = $k$063$i;
        } else {
         $469 = ($j$067$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$063$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$394$i = $j$067$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$394$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$394$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$063$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$057$i|0)<(9);
        if ($475) {
         $476 = ($lnz$057$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$0$i27 = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (43124 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$0$i27 = $492;
           break;
          }
          $$neg32$i = (($bits$0$ph) + 27)|0;
          $493 = Math_imul($426, -3)|0;
          $494 = (($$neg32$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond182$i = $495 | $497;
          if ($or$cond182$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i17>>>0));
           $500 = $498 * $499;
           $501 = (($426) + -10)|0;
           $502 = (43124 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$0$i27 = $505;
           break;
          }
         }
        }
        $506 = (($426|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $426;$z$1$ph37$i = $k$3$i;
        } else {
         $508 = ($426|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (43124 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $426;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $426;
          while(1) {
           $516 = (($x$i) + ($k$486$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$087$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$486$i|0)==($a$085$i|0);
           $523 = ($520|0)==(0);
           $or$cond16$i = $522 & $523;
           $524 = (($k$486$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$084$i) + -9)|0;
           $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
           $a$1$i = $or$cond16$i ? $525 : $a$085$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa152$i))|0;
         $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph36$i|0)<(18);
         $534 = ($rp$2$ph36$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph38$i|0);
           $or$cond17$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph36$i) + 9)|0;
         $563 = (($a$2$ph38$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$5$ph$i) + 1)|0;
         $603 = $606 & 127;
         $607 = (($z$5$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
         while(1) {
          $610 = ($rp$3$ph$i|0)==(18);
          $611 = ($rp$3$ph$i|0)>(27);
          $$18$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
          while(1) {
           $576 = $a$3$i & 127;
           $577 = ($576|0)==($z$5$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$3$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$5$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i28 = $693 | $$not$i;
             if (!($brmerge$i28)) {
              $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$18$i))|0;
           $586 = ($a$3$i|0)==($z$5$ph$i|0);
           if ($586) {
            $a$3$i = $z$5$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
            break;
           }
          }
          $587 = 1 << $$18$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$18$i;
          $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$679$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$18$i;
           $594 = (($593) + ($carry3$081$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$679$i|0)==($a$478$i|0);
           $597 = ($594|0)==(0);
           $or$cond19$i = $596 & $597;
           $598 = (($k$679$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$477$i) + -9)|0;
           $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
           $a$5$i = $or$cond19$i ? $599 : $a$478$i;
           $601 = ($599|0)==($z$5$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
            break;
           } else {
            $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
           continue;
          }
          $604 = ($603|0)==($a$5$i$lcssa|0);
          if (!($604)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
         }
         $605 = (($x$i) + ($z$5$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $603;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($603) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $603;
         } else {
          $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$3$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$7$i|0);
        if ($622) {
         $679 = (($a$3$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$7$1$i = $680;
        } else {
         $z$7$1$i = $z$7$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$010$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$010$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$010$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$010$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
        }
        $632 = (($a$3$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$7$1$i|0);
        do {
         if ($634) {
          $frac$2$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$3$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$7$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$3$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$7$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$010$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$2$i = $659;
         }
        } while(0);
        $660 = $y$1$i24 + $frac$2$i;
        $661 = $660 - $bias$0$i25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
          } else {
           $668 = ($$010$i|0)==($669|0);
           $or$cond20$i = $670 & $668;
           $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
          }
          $673 = (($e2$2$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$2$i != 0.0;
           $or$cond8$i = $676 & $675;
           if (!($or$cond8$i)) {
            $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
         } else {
          $e2$3$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$3$i));
        $$0$i27 = $678;
       }
      } while(0);
      $$0 = $$0$i27;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135|0)==(45);
   L11: do {
    switch ($$lcssa135|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa135;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$123 = 8;$c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $46 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $46 = $45;
     }
     $$sum20 = (($46) + 1)|0;
     $47 = (72370 + ($$sum20)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$123 = 16;$c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = (($c$0) + 1)|0;
     $57 = (72370 + ($$sum)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base21>>>0);
     if ($60) {
      $$1 = $$base21;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$082 = 0;
      while(1) {
       $69 = ($x$082*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$082 = $70;
       } else {
        $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$371 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$371;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$371 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$122 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;$c$124 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$123) + -1)|0;
     $117 = $116 & $$123;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$123*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (72627 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = (($c$124) + 1)|0;
      $129 = (72370 + ($$sum1445)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$123>>>0);
      if ($132) {
       $135 = $131;$x$146 = 0;
       while(1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $$sum14 = (($c$4$be) + 1)|0;
        $143 = (72370 + ($$sum14)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$123>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$146 = $134;
        } else {
         $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;$154 = 0;$156 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$124;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$123>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $$sum15 = (($c$5$be) + 1)|0;
       $175 = (72370 + ($$sum15)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$123>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $$sum1865 = (($c$124) + 1)|0;
     $119 = (72370 + ($$sum1865)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$123>>>0);
     if ($122) {
      $186 = $121;$x$266 = 0;
      while(1) {
       $184 = Math_imul($x$266, $$123)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $$sum18 = (($c$6$be) + 1)|0;
       $194 = (72370 + ($$sum18)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$123>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$266 = $185;
       } else {
        $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;$294 = $$lcssa132;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$124;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$123>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$753 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$123|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $$sum19 = (($c$7$be) + 1)|0;
       $231 = (72370 + ($$sum19)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$123>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$753 = $c$7$be;
       } else {
        $$122 = $$123;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $$sum16 = (($c$8) + 1)|0;
    $235 = (72370 + ($$sum16)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$122>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $$sum17 = (($c$9$be) + 1)|0;
      $246 = (72370 + ($$sum17)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$122>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $27 = $41;
   }
   $28 = ($27|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($28)) {
    $29 = $27;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _catclose($catd) {
 $catd = $catd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _catgets($catd,$set_id,$msg_id,$s) {
 $catd = $catd|0;
 $set_id = $set_id|0;
 $msg_id = $msg_id|0;
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($s|0);
}
function _catopen($name,$oflag) {
 $name = $name|0;
 $oflag = $oflag|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _freelocale($l) {
 $l = $l|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($l);
 return;
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 return ($0|0);
}
function _newlocale($mask,$name,$base) {
 $mask = $mask|0;
 $name = $name|0;
 $base = $base|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 4;
 } else {
  $2 = (_strcmp($name,77159)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 4;
  } else {
   $4 = (_strcmp($name,72636)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    label = 4;
   } else {
    $$01 = 0;
   }
  }
 }
 if ((label|0) == 4) {
  $6 = ($base|0)==(0|0);
  if ($6) {
   $7 = (_calloc(1,4)|0);
   $$01 = $7;
  } else {
   $$01 = $base;
  }
 }
 return ($$01|0);
}
function _uselocale($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 176|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($l|0)==(0|0);
 if (!($3)) {
  HEAP32[$1>>2] = $l;
 }
 return ($2|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $95 = ($94|0)==($85|0);
        $97 = ($96|0)==($86|0);
        $98 = $95 & $97;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $94;$101 = $96;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $114 = ($113|0)==($85|0);
     $116 = ($115|0)==($86|0);
     $117 = $114 & $116;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $118 = $156;$120 = $155;
     }
    } else {
     $118 = $115;$120 = $113;
    }
    $119 = ($118>>>0)<(1048576);
    $121 = ($120>>>0)<(0);
    $122 = ($118|0)==(1048576);
    $123 = $122 & $121;
    $124 = $119 | $123;
    if ($124) {
     $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$151 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$151 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $150;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 43156;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 43160 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (42888 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$02$ = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $or$cond = 0, $or$cond17 = 0, $s = 0, $wbuf = 0, $wcs$ = 0;
 var $wn$ = 0, $ws$020 = 0, $ws$020$lcssa56 = 0, $ws$09 = 0, $ws$1 = 0, $ws$215 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($wn$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$021 = $n;$$0218 = $wn$;$37 = $$cast;$cnt$019 = 0;$ws$020 = $wcs$;
   while(1) {
    $4 = $$021 >>> 2;
    $5 = ($4>>>0)>=($$0218>>>0);
    $6 = ($$021>>>0)>(131);
    $7 = $6 | $5;
    if (!($7)) {
     $$1 = $$021;$$24 = $$0218;$18 = $37;$cnt$1 = $cnt$019;$ws$09 = $ws$020;
     break L1;
    }
    $$02$ = $5 ? $$0218 : $4;
    $8 = (($$021) - ($$02$))|0;
    $9 = (_mbsrtowcs($ws$020,$s,$$02$,$st)|0);
    $10 = ($9|0)==(-1);
    if ($10) {
     $$lcssa57 = $8;$ws$020$lcssa56 = $ws$020;
     break;
    }
    $11 = ($ws$020|0)==($wbuf|0);
    $12 = (($ws$020) + ($9<<2)|0);
    $13 = $11 ? 0 : $9;
    $$13 = (($$0218) - ($13))|0;
    $ws$1 = $11 ? $ws$020 : $12;
    $14 = (($9) + ($cnt$019))|0;
    $15 = HEAP32[$s>>2]|0;
    $16 = ($15|0)!=(0|0);
    $17 = ($$0218|0)!=($13|0);
    $or$cond = $17 & $16;
    if ($or$cond) {
     $$021 = $8;$$0218 = $$13;$37 = $15;$cnt$019 = $14;$ws$020 = $ws$1;
    } else {
     $$1 = $8;$$24 = $$13;$18 = $15;$cnt$1 = $14;$ws$09 = $ws$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$18 = $$pr$pre;$cnt$1 = -1;$ws$09 = $ws$020$lcssa56;
  } else {
   $$1 = $n;$$24 = $wn$;$18 = $$cast;$cnt$1 = 0;$ws$09 = $wcs$;
  }
 } while(0);
 $19 = ($18|0)==(0|0);
 L8: do {
  if ($19) {
   $cnt$3 = $cnt$1;
  } else {
   $20 = ($$24|0)!=(0);
   $21 = ($$1|0)!=(0);
   $22 = $20 & $21;
   if ($22) {
    $$216 = $$1;$$313 = $$24;$23 = $18;$cnt$214 = $cnt$1;$ws$215 = $ws$09;
    while(1) {
     $24 = (_mbrtowc($ws$215,$23,$$216,$st)|0);
     $25 = (($24) + 2)|0;
     $26 = ($25>>>0)<(3);
     if ($26) {
      $$lcssa = $24;$cnt$214$lcssa = $cnt$214;
      break;
     }
     $27 = HEAP32[$s>>2]|0;
     $28 = (($27) + ($24)|0);
     HEAP32[$s>>2] = $28;
     $29 = (($$216) - ($24))|0;
     $30 = ((($ws$215)) + 4|0);
     $31 = (($$313) + -1)|0;
     $32 = (($cnt$214) + 1)|0;
     $33 = ($31|0)!=(0);
     $34 = ($$216|0)!=($24|0);
     $35 = $33 & $34;
     if ($35) {
      $$216 = $29;$$313 = $31;$23 = $28;$cnt$214 = $32;$ws$215 = $30;
     } else {
      $cnt$3 = $32;
      break L8;
     }
    }
    switch ($$lcssa|0) {
    case -1:  {
     $cnt$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
     break L8;
     break;
    }
    default: {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
     break L8;
    }
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $36 = HEAP32[$s>>2]|0;
  HEAP32[$src>>2] = $36;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0;
 var $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$in = 0, $$lcssa102 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0;
 var $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0219 = $$02$ph;$$4718 = $$47$ph;$s$520 = $s$5$ph;
   }
   while(1) {
    $63 = HEAP8[$s$520>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    do {
     if ($66) {
      $67 = $s$520;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4718>>>0)>(4);
      $or$cond = $70 & $69;
      if ($or$cond) {
       $$1 = $$0219;$$5 = $$4718;$s$6 = $s$520;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        if (!($75)) {
         $$1$lcssa = $$1;$$5$lcssa = $$5;$$lcssa94 = $71;$s$6$lcssa = $s$6;
         label = 32;
         break;
        }
        $76 = ((($s$6)) + 1|0);
        $77 = $71 & 255;
        $78 = ((($$1)) + 4|0);
        HEAP32[$$1>>2] = $77;
        $79 = ((($s$6)) + 2|0);
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $82 = ((($$1)) + 8|0);
        HEAP32[$78>>2] = $81;
        $83 = ((($s$6)) + 3|0);
        $84 = HEAP8[$79>>0]|0;
        $85 = $84&255;
        $86 = ((($$1)) + 12|0);
        HEAP32[$82>>2] = $85;
        $87 = ((($s$6)) + 4|0);
        $88 = HEAP8[$83>>0]|0;
        $89 = $88&255;
        $90 = ((($$1)) + 16|0);
        HEAP32[$86>>2] = $89;
        $91 = (($$5) + -4)|0;
        $$old1 = ($91>>>0)>(4);
        if ($$old1) {
         $$1 = $90;$$5 = $91;$s$6 = $87;
        } else {
         $$lcssa96 = $87;$$lcssa97 = $90;$$lcssa98 = $91;
         label = 31;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa96>>0]|0;
        $$2 = $$lcssa97;$$6 = $$lcssa98;$94 = $$pre$pre;$s$7 = $$lcssa96;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $92 = $$lcssa94&255;
        $$2 = $$1$lcssa;$$6 = $$5$lcssa;$94 = $92;$s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
      }
     } else {
      $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     $$2$lcssa = $$2;$$6$lcssa = $$6;$$lcssa102 = $93;$s$7$lcssa = $s$7;
     break;
    }
    $97 = ((($s$7)) + 1|0);
    $98 = ((($$2)) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $s$5$lcssa = $97;
     label = 26;
     break L7;
    } else {
     $$0219 = $98;$$4718 = $99;$s$520 = $97;
    }
   }
   $101 = (($$lcssa102) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$434 = $$2$lcssa;$$833 = $$6$lcssa;$s$1035 = $s$7$lcssa;
    label = 48;
    break;
   }
   $103 = ((($s$7$lcssa)) + 1|0);
   $104 = (42888 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2$lcssa;$$7 = $$6$lcssa;$c$4 = $105;$s$8 = $103;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$1415 = $$03;$s$116 = $s$0;
      while(1) {
       $19 = ((($s$116)) + 4|0);
       $20 = (($$1415) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$1415 = $20;$s$116 = $19;
       } else {
        $$14$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = ((($s$2)) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
    label = 7;
    continue;
   } else {
    $$25$lcssa = $$25;$$lcssa90 = $27;$s$2$lcssa = $s$2;
   }
   $33 = (($$lcssa90) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$434 = $ws;$$833 = $$25$lcssa;$s$1035 = $s$2$lcssa;
    label = 48;
    break;
   }
   $35 = ((($s$2$lcssa)) + 1|0);
   $36 = (42888 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25$lcssa;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = ((($s$3)) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 20;
     break;
    }
    $54 = ((($s$3)) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 23;
      break;
     }
     $61 = ((($s$3)) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03 = $62;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 38;
    break;
   }
   $115 = $c$4 << 6;
   $116 = ((($s$8)) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 41;
     break;
    }
    $125 = $118 << 6;
    $126 = ((($s$8)) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 44;
      break;
     }
     $135 = $128 << 6;
     $136 = ((($s$8)) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = ((($$3)) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 47;
 }
 else if ((label|0) == 20) {
  $53 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 47;
 }
 else if ((label|0) == 23) {
  $60 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
 }
 else if ((label|0) == 38) {
  $114 = ((($s$8)) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 47;
 }
 else if ((label|0) == 41) {
  $124 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $124;
  label = 52;
 }
 else if ((label|0) == 44) {
  $134 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $134;
  label = 52;
 }
 if ((label|0) == 47) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$434 = $$4;$$833 = $$8;$s$1035 = $s$10;
   label = 48;
  } else {
   $$48 = $$4;$s$109 = $s$10;
   label = 52;
  }
 }
 if ((label|0) == 48) {
  $142 = HEAP8[$s$1035>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$434|0)==(0|0);
   if (!($144)) {
    HEAP32[$$434>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$833))|0;
   $$0 = $145;
  } else {
   $$48 = $$434;$s$109 = $s$1035;
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $146 = (___errno_location()|0);
  HEAP32[$146>>2] = 84;
  $147 = ($$48|0)==(0|0);
  if ($147) {
   $$0 = -1;
  } else {
   HEAP32[$src>>2] = $s$109;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, $dummy$wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($src|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = ($n|0)==(0);
   do {
    if (!($1)) {
     $2 = ($wc|0)==(0|0);
     $dummy$wc = $2 ? $dummy : $wc;
     $3 = HEAP8[$src>>0]|0;
     $4 = $3&255;
     $5 = ($3<<24>>24)>(-1);
     if ($5) {
      HEAP32[$dummy$wc>>2] = $4;
      $6 = ($3<<24>>24)!=(0);
      $7 = $6&1;
      $$0 = $7;
      break L1;
     }
     $8 = (($4) + -194)|0;
     $9 = ($8>>>0)>(50);
     if (!($9)) {
      $10 = ((($src)) + 1|0);
      $11 = (42888 + ($8<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ($n>>>0)<(4);
      if ($13) {
       $14 = ($n*6)|0;
       $15 = (($14) + -6)|0;
       $16 = -2147483648 >>> $15;
       $17 = $12 & $16;
       $18 = ($17|0)==(0);
       if (!($18)) {
        break;
       }
      }
      $19 = HEAP8[$10>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $12 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if (!($26)) {
       $27 = $12 << 6;
       $28 = (($20) + -128)|0;
       $29 = $28 | $27;
       $30 = ($29|0)<(0);
       if (!($30)) {
        HEAP32[$dummy$wc>>2] = $29;
        $$0 = 2;
        break L1;
       }
       $31 = ((($src)) + 2|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if ($35) {
        $36 = $29 << 6;
        $37 = (($33) + -128)|0;
        $38 = $37 | $36;
        $39 = ($38|0)<(0);
        if (!($39)) {
         HEAP32[$dummy$wc>>2] = $38;
         $$0 = 3;
         break L1;
        }
        $40 = ((($src)) + 3|0);
        $41 = HEAP8[$40>>0]|0;
        $42 = $41&255;
        $43 = $42 & 192;
        $44 = ($43|0)==(128);
        if ($44) {
         $45 = $38 << 6;
         $46 = (($42) + -128)|0;
         $47 = $46 | $45;
         HEAP32[$dummy$wc>>2] = $47;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $48 = (___errno_location()|0);
   HEAP32[$48>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$02$$0 = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0;
 var $or$cond17 = 0, $s$020 = 0, $s$020$lcssa56 = 0, $s$09 = 0, $s$1 = 0, $s$215 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($n$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$021 = $wn;$$0218 = $n$;$38 = $$cast;$cnt$019 = 0;$s$020 = $dst$;
   while(1) {
    $4 = ($$021>>>0)>=($$0218>>>0);
    $5 = ($$021>>>0)>(32);
    $6 = $4 | $5;
    if (!($6)) {
     $$1 = $$021;$$24 = $$0218;$17 = $38;$cnt$1 = $cnt$019;$s$09 = $s$020;
     break L1;
    }
    $$02$$0 = $4 ? $$0218 : $$021;
    $7 = (($$021) - ($$02$$0))|0;
    $8 = (_wcsrtombs($s$020,$ws,$$02$$0,0)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $$lcssa57 = $7;$s$020$lcssa56 = $s$020;
     break;
    }
    $10 = ($s$020|0)==($buf|0);
    $11 = (($s$020) + ($8)|0);
    $12 = $10 ? 0 : $8;
    $$13 = (($$0218) - ($12))|0;
    $s$1 = $10 ? $s$020 : $11;
    $13 = (($8) + ($cnt$019))|0;
    $14 = HEAP32[$ws>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$0218|0)!=($12|0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$021 = $7;$$0218 = $$13;$38 = $14;$cnt$019 = $13;$s$020 = $s$1;
    } else {
     $$1 = $7;$$24 = $$13;$17 = $14;$cnt$1 = $13;$s$09 = $s$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$17 = $$pr$pre;$cnt$1 = -1;$s$09 = $s$020$lcssa56;
  } else {
   $$1 = $wn;$$24 = $n$;$17 = $$cast;$cnt$1 = 0;$s$09 = $dst$;
  }
 } while(0);
 $18 = ($17|0)==(0|0);
 L8: do {
  if ($18) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$24|0)!=(0);
   $20 = ($$1|0)!=(0);
   $21 = $19 & $20;
   if ($21) {
    $$216 = $$1;$$313 = $$24;$23 = $17;$cnt$214 = $cnt$1;$s$215 = $s$09;
    while(1) {
     $22 = HEAP32[$23>>2]|0;
     $24 = (_wcrtomb($s$215,$22,0)|0);
     $25 = (($24) + 1)|0;
     $26 = ($25>>>0)<(2);
     if ($26) {
      $$lcssa = $24;$cnt$214$lcssa = $cnt$214;
      break;
     }
     $28 = HEAP32[$ws>>2]|0;
     $29 = ((($28)) + 4|0);
     HEAP32[$ws>>2] = $29;
     $30 = (($$216) + -1)|0;
     $31 = (($s$215) + ($24)|0);
     $32 = (($$313) - ($24))|0;
     $33 = (($cnt$214) + 1)|0;
     $34 = ($$313|0)!=($24|0);
     $35 = ($30|0)!=(0);
     $36 = $34 & $35;
     if ($36) {
      $$216 = $30;$$313 = $32;$23 = $29;$cnt$214 = $33;$s$215 = $31;
     } else {
      $cnt$3 = $33;
      break L8;
     }
    }
    $27 = ($$lcssa|0)==(0);
    if ($27) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $37 = HEAP32[$ws>>2]|0;
  HEAP32[$wcs>>2] = $37;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa82 = 0, $$5 = 0, $$pn = 0, $$pre = 0;
 var $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 L1: do {
  if ($0) {
   $2 = HEAP32[$ws>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 0;
   } else {
    $$0218 = 0;$5 = $3;$ws2$019 = $2;
    while(1) {
     $6 = ($5>>>0)>(127);
     if ($6) {
      $7 = (_wcrtomb($buf,$5,0)|0);
      $8 = ($7|0)==(-1);
      if ($8) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $7;
      }
     } else {
      $$pn = 1;
     }
     $$13 = (($$pn) + ($$0218))|0;
     $9 = ((($ws2$019)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0);
     if ($11) {
      $$0 = $$13;
      break;
     } else {
      $$0218 = $$13;$5 = $10;$ws2$019 = $9;
     }
    }
   }
  } else {
   $1 = ($n>>>0)>(3);
   L9: do {
    if ($1) {
     $$pre = HEAP32[$ws>>2]|0;
     $$0129 = $s;$$2428 = $n;$14 = $$pre;
     while(1) {
      $13 = HEAP32[$14>>2]|0;
      $15 = (($13) + -1)|0;
      $16 = ($15>>>0)>(126);
      if ($16) {
       $17 = ($13|0)==(0);
       if ($17) {
        $$0129$lcssa = $$0129;$$2428$lcssa = $$2428;
        break;
       }
       $19 = (_wcrtomb($$0129,$13,0)|0);
       $20 = ($19|0)==(-1);
       if ($20) {
        $$0 = -1;
        break L1;
       }
       $21 = (($$0129) + ($19)|0);
       $22 = (($$2428) - ($19))|0;
       $$1 = $21;$$35 = $22;$27 = $14;
      } else {
       $23 = $13&255;
       $24 = ((($$0129)) + 1|0);
       HEAP8[$$0129>>0] = $23;
       $25 = (($$2428) + -1)|0;
       $$pre43 = HEAP32[$ws>>2]|0;
       $$1 = $24;$$35 = $25;$27 = $$pre43;
      }
      $26 = ((($27)) + 4|0);
      HEAP32[$ws>>2] = $26;
      $28 = ($$35>>>0)>(3);
      if ($28) {
       $$0129 = $$1;$$2428 = $$35;$14 = $26;
      } else {
       $$01$lcssa = $$1;$$24$lcssa = $$35;
       break L9;
      }
     }
     HEAP8[$$0129$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $18 = (($n) - ($$2428$lcssa))|0;
     $$0 = $18;
     break L1;
    } else {
     $$01$lcssa = $s;$$24$lcssa = $n;
    }
   } while(0);
   $12 = ($$24$lcssa|0)==(0);
   if ($12) {
    $$0 = $n;
   } else {
    $$pre44 = HEAP32[$ws>>2]|0;
    $$223 = $$01$lcssa;$$422 = $$24$lcssa;$30 = $$pre44;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (($29) + -1)|0;
     $32 = ($31>>>0)>(126);
     if ($32) {
      $33 = ($29|0)==(0);
      if ($33) {
       $$223$lcssa = $$223;$$422$lcssa = $$422;
       label = 19;
       break;
      }
      $35 = (_wcrtomb($buf,$29,0)|0);
      $36 = ($35|0)==(-1);
      if ($36) {
       $$0 = -1;
       break L1;
      }
      $37 = ($$422>>>0)<($35>>>0);
      if ($37) {
       $$422$lcssa82 = $$422;
       label = 22;
       break;
      }
      $39 = HEAP32[$30>>2]|0;
      (_wcrtomb($$223,$39,0)|0);
      $40 = (($$223) + ($35)|0);
      $41 = (($$422) - ($35))|0;
      $$3 = $40;$$5 = $41;$46 = $30;
     } else {
      $42 = $29&255;
      $43 = ((($$223)) + 1|0);
      HEAP8[$$223>>0] = $42;
      $44 = (($$422) + -1)|0;
      $$pre45 = HEAP32[$ws>>2]|0;
      $$3 = $43;$$5 = $44;$46 = $$pre45;
     }
     $45 = ((($46)) + 4|0);
     HEAP32[$ws>>2] = $45;
     $47 = ($$5|0)==(0);
     if ($47) {
      $$0 = $n;
      break L1;
     } else {
      $$223 = $$3;$$422 = $$5;$30 = $45;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$223$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $34 = (($n) - ($$422$lcssa))|0;
     $$0 = $34;
     break;
    }
    else if ((label|0) == 22) {
     $38 = (($n) - ($$422$lcssa82))|0;
     $$0 = $38;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[43104>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[43104>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((42872)|0));
   $$012 = HEAP32[(42868)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((42872)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $7 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $7 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $8 = $7;
   $9 = $6;
   $10 = (($8) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _getc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   ___unlockfile($f);
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _ungetc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(-1);
 do {
  if ($0) {
   $$0 = -1;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if ($3) {
    $4 = (___lockfile($f)|0);
    $16 = $4;
   } else {
    $16 = 0;
   }
   $5 = ((($f)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = (___toread($f)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     label = 6;
    }
   } else {
    label = 6;
   }
   if ((label|0) == 6) {
    $10 = ((($f)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($f)) + 44|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + -8|0);
    $15 = ($11>>>0)>($14>>>0);
    if ($15) {
     $18 = $c&255;
     $19 = ((($11)) + -1|0);
     HEAP32[$10>>2] = $19;
     HEAP8[$19>>0] = $18;
     $20 = HEAP32[$f>>2]|0;
     $21 = $20 & -17;
     HEAP32[$f>>2] = $21;
     $22 = ($16|0)==(0);
     if ($22) {
      $$0 = $c;
      break;
     }
     ___unlockfile($f);
     $$0 = $c;
     break;
    }
   }
   $17 = ($16|0)==(0);
   if ($17) {
    $$0 = -1;
   } else {
    ___unlockfile($f);
    $$0 = -1;
   }
  }
 } while(0);
 return ($$0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 1023]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre168 = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0;
 var $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0;
 var $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0;
 var $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0;
 var $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0;
 var $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $333 = $4;
 } else {
  $333 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0104 = 0;$p$0109 = $fmt;$pos$0108 = 0;$s$0107 = 0;$wcs$0103 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0109>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0109)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0109)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0109)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0109)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp694 = (($93) + -48)|0;
        $isdigit795 = ($isdigittmp694>>>0)<(10);
        if ($isdigit795) {
         $97 = $93;$p$396 = $p$2;$width$097 = 0;
         while(1) {
          $94 = ($width$097*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$396)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp6 = (($100) + -48)|0;
          $isdigit7 = ($isdigittmp6>>>0)<(10);
          if ($isdigit7) {
           $97 = $100;$p$396 = $98;$width$097 = $96;
          } else {
           $$lcssa38 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa38 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa38<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre168 = HEAP8[$104>>0]|0;
         $107 = $$pre168;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa38;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0107;$wcs$1 = $wcs$0103;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$9 = $109 ? $110 : $105;
         $$10 = $109 ? -2 : -1;
         $p$5 = $$9;$size$0 = $$10;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$11 = $112 ? $113 : $105;
         $$12 = $112 ? 3 : 1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
         label = 152;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0108;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0108;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0108|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0108&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0108&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0108;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         $$pre170 = HEAP32[$7>>2]|0;
         if ($140) {
          $144 = $$pre170;
         } else {
          $141 = ((($$pre170)) + -1|0);
          HEAP32[$7>>2] = $141;
          $144 = $141;
         }
         $142 = HEAP32[$9>>2]|0;
         $143 = HEAP32[$10>>2]|0;
         $145 = $144;
         $146 = $143;
         $147 = (($142) + ($pos$0108))|0;
         $148 = (($147) + ($145))|0;
         $149 = (($148) - ($146))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $156 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
         $$pre172 = HEAP32[$8>>2]|0;
         $156 = $$pre172;
        }
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L67: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ & 239;
          $162 = ($161|0)==(99);
          L69: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $168 = $166 ? $164 : $p$5;
            $p$6 = $166 ? $167 : $164;
            $169 = $166&1;
            _memset(($scanset|0),($169|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $170 = HEAP8[$p$6>>0]|0;
            switch ($170<<24>>24) {
            case 45:  {
             $171 = ((($168)) + 2|0);
             $172 = $invert$0 ^ 1;
             $173 = $172&255;
             HEAP8[$14>>0] = $173;
             $$pre$phi182Z2D = $173;$p$7$ph = $171;
             break;
            }
            case 93:  {
             $174 = ((($168)) + 2|0);
             $175 = $invert$0 ^ 1;
             $176 = $175&255;
             HEAP8[$15>>0] = $176;
             $$pre$phi182Z2D = $176;$p$7$ph = $174;
             break;
            }
            default: {
             $$pre180 = $invert$0 ^ 1;
             $$pre181 = $$pre180&255;
             $$pre$phi182Z2D = $$pre181;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $177 = HEAP8[$p$7>>0]|0;
             L80: do {
              switch ($177<<24>>24) {
              case 0:  {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
               label = 152;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L69;
               break;
              }
              case 45:  {
               $178 = ((($p$7)) + 1|0);
               $179 = HEAP8[$178>>0]|0;
               switch ($179<<24>>24) {
               case 93: case 0:  {
                $190 = 45;$p$8 = $p$7;
                break L80;
                break;
               }
               default: {
               }
               }
               $180 = ((($p$7)) + -1|0);
               $181 = HEAP8[$180>>0]|0;
               $182 = ($181&255)<($179&255);
               if ($182) {
                $183 = $181&255;
                $c$0100 = $183;
                while(1) {
                 $184 = (($c$0100) + 1)|0;
                 $185 = (($scanset) + ($184)|0);
                 HEAP8[$185>>0] = $$pre$phi182Z2D;
                 $186 = HEAP8[$178>>0]|0;
                 $187 = $186&255;
                 $188 = ($184|0)<($187|0);
                 if ($188) {
                  $c$0100 = $184;
                 } else {
                  $190 = $186;$p$8 = $178;
                  break;
                 }
                }
               } else {
                $190 = $179;$p$8 = $178;
               }
               break;
              }
              default: {
               $190 = $177;$p$8 = $p$7;
              }
              }
             } while(0);
             $189 = $190&255;
             $191 = (($189) + 1)|0;
             $192 = (($scanset) + ($191)|0);
             HEAP8[$192>>0] = $$pre$phi182Z2D;
             $193 = ((($p$8)) + 1|0);
             $p$7 = $193;
            }
           }
          } while(0);
          $194 = (($width$1) + 1)|0;
          $195 = $160 ? $194 : 31;
          $196 = ($$size$0|0)==(1);
          $197 = ($alloc$0|0)!=(0);
          L88: do {
           if ($196) {
            if ($197) {
             $198 = $195 << 2;
             $199 = (_malloc($198)|0);
             $200 = ($199|0)==(0|0);
             if ($200) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $199;
              label = 152;
              break L6;
             } else {
              $wcs$2 = $199;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $195;$wcs$3$ph = $wcs$2;
            L94: while(1) {
             $201 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph20 = $i$0$ph;
             while(1) {
              L98: while(1) {
               $202 = HEAP32[$7>>2]|0;
               $203 = HEAP32[$8>>2]|0;
               $204 = ($202>>>0)<($203>>>0);
               if ($204) {
                $205 = ((($202)) + 1|0);
                HEAP32[$7>>2] = $205;
                $206 = HEAP8[$202>>0]|0;
                $207 = $206&255;
                $210 = $207;
               } else {
                $208 = (___shgetc($f)|0);
                $210 = $208;
               }
               $209 = (($210) + 1)|0;
               $211 = (($scanset) + ($209)|0);
               $212 = HEAP8[$211>>0]|0;
               $213 = ($212<<24>>24)==(0);
               if ($213) {
                $i$0$ph20$lcssa = $i$0$ph20;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L94;
               }
               $214 = $210&255;
               HEAP8[$0>>0] = $214;
               $215 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($215|0) {
               case -1:  {
                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
                label = 152;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L98;
               }
               }
              }
              if ($201) {
               $i$1 = $i$0$ph20;
              } else {
               $216 = HEAP32[$wc>>2]|0;
               $217 = (($i$0$ph20) + 1)|0;
               $218 = (($wcs$3$ph) + ($i$0$ph20<<2)|0);
               HEAP32[$218>>2] = $216;
               $i$1 = $217;
              }
              $219 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $197 & $219;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph20 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $220 = $factor | 1;
             $221 = $220 << 2;
             $222 = (_realloc($wcs$3$ph,$221)|0);
             $223 = ($222|0)==(0|0);
             if ($223) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
              label = 152;
              break L6;
             }
             $i$0$ph$phi = $k$0$ph;$k$0$ph = $220;$wcs$3$ph = $222;$i$0$ph = $i$0$ph$phi;
            }
            $224 = (_mbsinit($st)|0);
            $225 = ($224|0)==(0);
            if ($225) {
             $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
             label = 152;
             break L6;
            } else {
             $i$4 = $i$0$ph20$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($197) {
             $226 = (_malloc($195)|0);
             $227 = ($226|0)==(0|0);
             if ($227) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = 0;
              label = 152;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $195;$s$2$ph = $226;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $228 = HEAP32[$7>>2]|0;
               $229 = HEAP32[$8>>2]|0;
               $230 = ($228>>>0)<($229>>>0);
               if ($230) {
                $231 = ((($228)) + 1|0);
                HEAP32[$7>>2] = $231;
                $232 = HEAP8[$228>>0]|0;
                $233 = $232&255;
                $236 = $233;
               } else {
                $234 = (___shgetc($f)|0);
                $236 = $234;
               }
               $235 = (($236) + 1)|0;
               $237 = (($scanset) + ($235)|0);
               $238 = HEAP8[$237>>0]|0;
               $239 = ($238<<24>>24)==(0);
               if ($239) {
                $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
                break L88;
               }
               $240 = $236&255;
               $241 = (($i$2) + 1)|0;
               $242 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$242>>0] = $240;
               $243 = ($241|0)==($k$1$ph|0);
               if ($243) {
                break;
               } else {
                $i$2 = $241;
               }
              }
              $factor16 = $k$1$ph << 1;
              $244 = $factor16 | 1;
              $245 = (_realloc($s$2$ph,$244)|0);
              $246 = ($245|0)==(0|0);
              if ($246) {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$2$ph;$wcs$7 = 0;
               label = 152;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $244;$s$2$ph = $245;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $247 = ($dest$0|0)==(0|0);
            if ($247) {
             $265 = $156;
             while(1) {
              $263 = HEAP32[$7>>2]|0;
              $264 = ($263>>>0)<($265>>>0);
              if ($264) {
               $266 = ((($263)) + 1|0);
               HEAP32[$7>>2] = $266;
               $267 = HEAP8[$263>>0]|0;
               $268 = $267&255;
               $271 = $268;
              } else {
               $269 = (___shgetc($f)|0);
               $271 = $269;
              }
              $270 = (($271) + 1)|0;
              $272 = (($scanset) + ($270)|0);
              $273 = HEAP8[$272>>0]|0;
              $274 = ($273<<24>>24)==(0);
              if ($274) {
               $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
               break L88;
              }
              $$pre176 = HEAP32[$8>>2]|0;
              $265 = $$pre176;
             }
            } else {
             $250 = $156;$i$3 = 0;
             while(1) {
              $248 = HEAP32[$7>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$7>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($f)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($scanset) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
               break L88;
              }
              $260 = $256&255;
              $261 = (($i$3) + 1)|0;
              $262 = (($dest$0) + ($i$3)|0);
              HEAP8[$262>>0] = $260;
              $$pre174 = HEAP32[$8>>2]|0;
              $250 = $$pre174;$i$3 = $261;
             }
            }
           }
          } while(0);
          $275 = HEAP32[$8>>2]|0;
          $276 = ($275|0)==(0|0);
          $$pre178 = HEAP32[$7>>2]|0;
          if ($276) {
           $280 = $$pre178;
          } else {
           $277 = ((($$pre178)) + -1|0);
           HEAP32[$7>>2] = $277;
           $280 = $277;
          }
          $278 = HEAP32[$9>>2]|0;
          $279 = HEAP32[$10>>2]|0;
          $281 = $280;
          $282 = $279;
          $283 = (($281) - ($282))|0;
          $284 = (($283) + ($278))|0;
          $285 = ($284|0)==(0);
          if ($285) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          $$not = $160 ^ 1;
          $286 = ($284|0)==($width$1|0);
          $or$cond8 = $286 | $$not;
          if (!($or$cond8)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          do {
           if ($197) {
            if ($196) {
             HEAP32[$dest$0>>2] = $wcs$4;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$3;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          } else {
           $287 = ($wcs$4|0)==(0|0);
           if (!($287)) {
            $288 = (($wcs$4) + ($i$4<<2)|0);
            HEAP32[$288>>2] = 0;
           }
           $289 = ($s$3|0)==(0|0);
           if ($289) {
            $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
            break L67;
           }
           $290 = (($s$3) + ($i$4)|0);
           HEAP8[$290>>0] = 0;
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 134;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 134;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 134;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 134;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $310 = (+___floatscan($f,$$size$0,0));
          $311 = HEAP32[$9>>2]|0;
          $312 = HEAP32[$7>>2]|0;
          $313 = HEAP32[$10>>2]|0;
          $314 = $312;
          $315 = $313;
          $316 = (($315) - ($314))|0;
          $317 = ($311|0)==($316|0);
          if ($317) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $318 = ($dest$0|0)==(0|0);
          if ($318) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $319 = $310;
            HEAPF32[$dest$0>>2] = $319;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         }
         }
        } while(0);
        L168: do {
         if ((label|0) == 134) {
          label = 0;
          $291 = (___intscan($f,$base$0,0,-1,-1)|0);
          $292 = tempRet0;
          $293 = HEAP32[$9>>2]|0;
          $294 = HEAP32[$7>>2]|0;
          $295 = HEAP32[$10>>2]|0;
          $296 = $294;
          $297 = $295;
          $298 = (($297) - ($296))|0;
          $299 = ($293|0)==($298|0);
          if ($299) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $300 = ($$|0)==(112);
          $301 = ($dest$0|0)!=(0|0);
          $or$cond3 = $301 & $300;
          if ($or$cond3) {
           $302 = $291;
           HEAP32[$dest$0>>2] = $302;
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
           break;
          }
          $303 = ($dest$0|0)==(0|0);
          if ($303) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $304 = $291&255;
            HEAP8[$dest$0>>0] = $304;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case -1:  {
            $305 = $291&65535;
            HEAP16[$dest$0>>1] = $305;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 3:  {
            $306 = $dest$0;
            $307 = $306;
            HEAP32[$307>>2] = $291;
            $308 = (($306) + 4)|0;
            $309 = $308;
            HEAP32[$309>>2] = $292;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
           }
           }
          }
         }
        } while(0);
        $320 = HEAP32[$9>>2]|0;
        $321 = HEAP32[$7>>2]|0;
        $322 = HEAP32[$10>>2]|0;
        $323 = $321;
        $324 = $322;
        $325 = (($320) + ($pos$1))|0;
        $326 = (($325) + ($323))|0;
        $327 = (($326) - ($324))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $328 = $not$&1;
        $matches$0$ = (($328) + ($matches$0104))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $327;$s$5 = $s$4;$wcs$6 = $wcs$5;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0109) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $61 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $61 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $62 = ($61|0)==($60|0);
      if (!($62)) {
       $$lcssa384 = $61;$matches$0104$lcssa = $matches$0104;$s$0107$lcssa = $s$0107;$wcs$0103$lcssa = $wcs$0103;
       label = 21;
       break L6;
      }
      $69 = (($pos$0108) + 1)|0;
      $matches$1 = $matches$0104;$p$11 = $51;$pos$2 = $69;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     } else {
      $p$1 = $p$0109;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      $$pre = HEAP32[$7>>2]|0;
      if ($36) {
       $40 = $$pre;
      } else {
       $37 = ((($$pre)) + -1|0);
       HEAP32[$7>>2] = $37;
       $40 = $37;
      }
      $38 = HEAP32[$9>>2]|0;
      $39 = HEAP32[$10>>2]|0;
      $41 = $40;
      $42 = $39;
      $43 = (($38) + ($pos$0108))|0;
      $44 = (($43) + ($41))|0;
      $45 = (($44) - ($42))|0;
      $matches$1 = $matches$0104;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     }
    } while(0);
    $329 = ((($p$11)) + 1|0);
    $330 = HEAP8[$329>>0]|0;
    $331 = ($330<<24>>24)==(0);
    if ($331) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $330;$matches$0104 = $matches$1;$p$0109 = $329;$pos$0108 = $pos$2;$s$0107 = $s$5;$wcs$0103 = $wcs$6;
    }
   }
   if ((label|0) == 21) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa384|0)>(-1);
    $68 = ($matches$0104$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0104$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$7 = $s$0107$lcssa;$wcs$8 = $wcs$0103$lcssa;
     label = 153;
    }
   }
   else if ((label|0) == 152) {
    $$old4 = ($matches$0104376|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0400;$s$7 = $s$6;$wcs$8 = $wcs$7;
     label = 153;
    } else {
     $alloc$2 = $alloc$0400;$matches$2 = $matches$0104376;$s$8 = $s$6;$wcs$9 = $wcs$7;
    }
   }
   if ((label|0) == 153) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
   }
   $332 = ($alloc$2|0)==(0);
   if ($332) {
    $matches$3 = $matches$2;
   } else {
    _free($s$8);
    _free($wcs$9);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $334 = ($333|0)==(0);
 if (!($334)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=43164; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 461;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 1023]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[42844>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((462|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[42844>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((463|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 33;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strtold_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,2));
 return (+$0);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,0,-2147483648)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = ((($$0)) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$014 = $n;$$023 = $s;$$05 = $d;
  while(1) {
   $1 = (($$014) + -1)|0;
   $2 = ((($$023)) + 4|0);
   $3 = HEAP32[$$023>>2]|0;
   $4 = ((($$05)) + 4|0);
   HEAP32[$$05>>2] = $3;
   $5 = ($1|0)==(0);
   if ($5) {
    break;
   } else {
    $$014 = $1;$$023 = $2;$$05 = $4;
   }
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = ((($$025)) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = ((($$07)) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = ((($$03)) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 return ($d|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 1023]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $65 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((74714 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 75194;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 75194;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 75194;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 75194 : (75196);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (75195);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 75194;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 75194;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 75204;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 75211;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (75212) : (75217);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (75214);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (75178 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$480 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$480 = $$pre179$i;
      }
      $481 = ($480|0)<(0);
      $$31$i = $481 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $490 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $491 = ($490|0)>(29);
        $492 = $491 ? 29 : $490;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $490 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(75246,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(75246,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 75230 : 75234;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 75238 : 75242;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 75194;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 75194;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (75178 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 75194;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (75194 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 75194;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $792 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $793 = ($792|0)<(10);
       if ($793) {
        $i$398 = $792;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _cleanup521($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup526($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ($12|0)!=(0);
  $15 = (($s) + ($12)|0);
  $16 = $14 ? $15 : $s;
  HEAP32[$p>>2] = $16;
 }
 STACKTOP = sp;return (+$4);
}
function _strtox555($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) + ($12))|0;
  $18 = (($17) - ($16))|0;
  $19 = (($s) + ($18)|0);
  HEAP32[$p>>2] = $19;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[46684>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (46724 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (46724 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[46684>>2] = $22;
     } else {
      $23 = HEAP32[(46700)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(46692)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (46724 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (46724 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[46684>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(46700)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(46692)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(46704)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (46724 + ($92<<2)|0);
      $94 = HEAP32[46684>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[46684>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (46724 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (46724 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(46700)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(46692)>>2] = $81;
     HEAP32[(46704)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(46688)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (46988 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(46700)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (46988 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(46688)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(46688)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(46700)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(46700)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(46700)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(46692)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(46704)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (46724 + ($229<<2)|0);
       $231 = HEAP32[46684>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[46684>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (46724 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (46724 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(46700)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(46692)>>2] = $rsize$0$i$lcssa;
      HEAP32[(46704)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(46688)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (46988 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (46988 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(46692)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(46700)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (46988 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(46688)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(46688)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(46700)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(46700)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(46700)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (46724 + ($424<<2)|0);
          $426 = HEAP32[46684>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[46684>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (46724 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (46724 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(46700)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (46988 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(46688)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(46688)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(46700)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(46700)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(46692)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(46704)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(46704)>>2] = $514;
   HEAP32[(46692)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(46692)>>2] = 0;
   HEAP32[(46704)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(46696)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(46696)>>2] = $528;
  $529 = HEAP32[(46708)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(46708)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[47156>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(47164)>>2] = $538;
    HEAP32[(47160)>>2] = $538;
    HEAP32[(47168)>>2] = -1;
    HEAP32[(47172)>>2] = -1;
    HEAP32[(47176)>>2] = 0;
    HEAP32[(47128)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[47156>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(47164)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(47124)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(47116)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(47128)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(46708)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (47132);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(46696)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(47160)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(47116)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(47124)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(47164)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(47128)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(47128)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(47116)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(47116)>>2] = $632;
  $633 = HEAP32[(47120)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(47120)>>2] = $632;
  }
  $635 = HEAP32[(46708)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(46700)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(46700)>>2] = $tbase$255$i;
    }
    HEAP32[(47132)>>2] = $tbase$255$i;
    HEAP32[(47136)>>2] = $tsize$254$i;
    HEAP32[(47144)>>2] = 0;
    $640 = HEAP32[47156>>2]|0;
    HEAP32[(46720)>>2] = $640;
    HEAP32[(46716)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (46724 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (46724 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (46724 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(46708)>>2] = $654;
    HEAP32[(46696)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(47172)>>2]|0;
    HEAP32[(46712)>>2] = $659;
   } else {
    $sp$084$i = (47132);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(46696)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(46708)>>2] = $684;
       HEAP32[(46696)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(47172)>>2]|0;
       HEAP32[(46712)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(46700)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(46700)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (47132);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (47132);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(46696)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(46696)>>2] = $730;
        HEAP32[(46708)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(46704)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(46692)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(46692)>>2] = $736;
         HEAP32[(46704)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (46724 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[46684>>2]|0;
            $763 = $762 & $761;
            HEAP32[46684>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (46988 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(46688)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(46688)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(46700)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(46700)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(46700)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (46724 + ($840<<2)|0);
         $842 = HEAP32[46684>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[46684>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (46724 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (46724 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(46700)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (46988 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(46688)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(46688)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(46700)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(46700)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (47132);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(46708)>>2] = $953;
    HEAP32[(46696)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(47172)>>2]|0;
    HEAP32[(46712)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(47132)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(47132)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(47132)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(47132)+12>>2]|0;
    HEAP32[(47132)>>2] = $tbase$255$i;
    HEAP32[(47136)>>2] = $tsize$254$i;
    HEAP32[(47144)>>2] = 0;
    HEAP32[(47140)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (46724 + ($977<<2)|0);
      $979 = HEAP32[46684>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[46684>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (46724 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (46724 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(46700)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (46988 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(46688)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(46688)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(46700)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(46700)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(46696)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(46696)>>2] = $1062;
   $1063 = HEAP32[(46708)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(46708)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(46700)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(46704)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(46692)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (46724 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[46684>>2]|0;
     $36 = $35 & $34;
     HEAP32[46684>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (46988 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(46688)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(46688)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(46700)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(46700)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(46700)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(46708)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(46696)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(46696)>>2] = $120;
   HEAP32[(46708)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(46704)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(46704)>>2] = 0;
   HEAP32[(46692)>>2] = 0;
   return;
  }
  $125 = HEAP32[(46704)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(46692)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(46692)>>2] = $128;
   HEAP32[(46704)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (46724 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(46700)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[46684>>2]|0;
     $152 = $151 & $150;
     HEAP32[46684>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(46700)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(46700)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(46700)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (46988 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(46688)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(46688)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(46700)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(46700)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(46700)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(46704)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(46692)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (46724 + ($233<<2)|0);
  $235 = HEAP32[46684>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[46684>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (46724 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (46724 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(46700)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (46988 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(46688)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(46688)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(46700)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(46700)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(46716)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(46716)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (47140);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(46716)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(46700)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(47164)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(46708)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(46696)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(46708)>>2] = $36;
  HEAP32[(46696)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(46704)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(46692)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(46692)>>2] = $storemerge21;
  HEAP32[(46704)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (46724 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[46684>>2]|0;
    $88 = $87 & $86;
    HEAP32[46684>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (46988 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(46688)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(46688)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(46700)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(46700)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(46700)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(46700)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(46704)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(46692)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (46724 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[46684>>2]|0;
     $32 = $31 & $30;
     HEAP32[46684>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (46988 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(46688)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(46688)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(46700)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(46700)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(46700)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(46700)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(46708)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(46696)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(46696)>>2] = $115;
   HEAP32[(46708)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(46704)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(46704)>>2] = 0;
   HEAP32[(46692)>>2] = 0;
   return;
  }
  $120 = HEAP32[(46704)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(46692)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(46692)>>2] = $123;
   HEAP32[(46704)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (46724 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[46684>>2]|0;
     $146 = $145 & $144;
     HEAP32[46684>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (46988 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(46688)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(46688)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(46700)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(46700)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(46700)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(46704)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(46692)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (46724 + ($224<<2)|0);
  $226 = HEAP32[46684>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[46684>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (46724 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (46724 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(46700)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (46988 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(46688)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(46688)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(46700)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(46700)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum$i = 0, $$sum$i1 = 0, $$sum$i11 = 0, $$sum$i9 = 0, $$sum1$i = 0, $$sum1$i10 = 0, $$sum1$i12 = 0, $$sum1$i2 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[43096>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(47860,$0,47916);
 HEAP32[47180>>2] = (48608);
 HEAP32[(47188)>>2] = (48628);
 HEAP32[(47184)>>2] = 0;
 $1 = HEAP32[48596>>2]|0;
 $2 = (47180 + ($1)|0);
 __THREW__ = 0;
 invoke_vii(464,($2|0),(47860|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((47188));
  ___resumeException($5|0);
  // unreachable;
 }
 $$sum$i = (($1) + 72)|0;
 $7 = (47180 + ($$sum$i)|0);
 HEAP32[$7>>2] = 0;
 $$sum1$i = (($1) + 76)|0;
 $8 = (47180 + ($$sum1$i)|0);
 HEAP32[$8>>2] = -1;
 $9 = HEAP32[43100>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(47964,$9,(47924));
 HEAP32[47268>>2] = (48688);
 HEAP32[(47272)>>2] = (48708);
 $10 = HEAP32[48676>>2]|0;
 $11 = (47268 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(464,($11|0),(47964|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((47272));
  ___resumeException($14|0);
  // unreachable;
 }
 $$sum$i1 = (($10) + 72)|0;
 $16 = (47268 + ($$sum$i1)|0);
 HEAP32[$16>>2] = 0;
 $$sum1$i2 = (($10) + 76)|0;
 $17 = (47268 + ($$sum1$i2)|0);
 HEAP32[$17>>2] = -1;
 $18 = HEAP32[43092>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(48012,$18,(47932));
 HEAP32[47352>>2] = (48688);
 HEAP32[(47356)>>2] = (48708);
 $19 = (47352 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(464,($19|0),(48012|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((47356));
  ___resumeException($22|0);
  // unreachable;
 }
 $24 = (47352 + ($$sum$i1)|0);
 HEAP32[$24>>2] = 0;
 $25 = (47352 + ($$sum1$i2)|0);
 HEAP32[$25>>2] = -1;
 $26 = HEAP32[47352>>2]|0;
 $27 = ((($26)) + -12|0);
 $28 = HEAP32[$27>>2]|0;
 $$sum = (($28) + 24)|0;
 $29 = (47352 + ($$sum)|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[47436>>2] = (48688);
 HEAP32[(47440)>>2] = (48708);
 $31 = (47436 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(464,($31|0),($30|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev((47440));
  ___resumeException($34|0);
  // unreachable;
 }
 $36 = (47436 + ($$sum$i1)|0);
 HEAP32[$36>>2] = 0;
 $37 = (47436 + ($$sum1$i2)|0);
 HEAP32[$37>>2] = -1;
 $38 = HEAP32[47180>>2]|0;
 $39 = ((($38)) + -12|0);
 $40 = HEAP32[$39>>2]|0;
 $$sum19 = (($40) + 72)|0;
 $41 = (47180 + ($$sum19)|0);
 HEAP32[$41>>2] = 47268;
 $42 = HEAP32[47352>>2]|0;
 $43 = ((($42)) + -12|0);
 $44 = HEAP32[$43>>2]|0;
 $$sum20 = (($44) + 4)|0;
 $45 = (47352 + ($$sum20)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 | 8192;
 HEAP32[$45>>2] = $47;
 $48 = HEAP32[47352>>2]|0;
 $49 = ((($48)) + -12|0);
 $50 = HEAP32[$49>>2]|0;
 $$sum21 = (($50) + 72)|0;
 $51 = (47352 + ($$sum21)|0);
 HEAP32[$51>>2] = 47268;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(48060,$0,(47940));
 HEAP32[47520>>2] = (48648);
 HEAP32[(47528)>>2] = (48668);
 HEAP32[(47524)>>2] = 0;
 $52 = HEAP32[48636>>2]|0;
 $53 = (47520 + ($52)|0);
 __THREW__ = 0;
 invoke_vii(464,($53|0),(48060|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((47528));
  ___resumeException($56|0);
  // unreachable;
 }
 $$sum$i9 = (($52) + 72)|0;
 $58 = (47520 + ($$sum$i9)|0);
 HEAP32[$58>>2] = 0;
 $$sum1$i10 = (($52) + 76)|0;
 $59 = (47520 + ($$sum1$i10)|0);
 HEAP32[$59>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(48116,$9,(47948));
 HEAP32[47608>>2] = (48728);
 HEAP32[(47612)>>2] = (48748);
 $60 = HEAP32[48716>>2]|0;
 $61 = (47608 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(464,($61|0),(48116|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch()|0;
  $65 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((47612));
  ___resumeException($64|0);
  // unreachable;
 }
 $$sum$i11 = (($60) + 72)|0;
 $66 = (47608 + ($$sum$i11)|0);
 HEAP32[$66>>2] = 0;
 $$sum1$i12 = (($60) + 76)|0;
 $67 = (47608 + ($$sum1$i12)|0);
 HEAP32[$67>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(48164,$18,(47956));
 HEAP32[47692>>2] = (48728);
 HEAP32[(47696)>>2] = (48748);
 $68 = (47692 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(464,($68|0),(48164|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((47696));
  ___resumeException($71|0);
  // unreachable;
 }
 $73 = (47692 + ($$sum$i11)|0);
 HEAP32[$73>>2] = 0;
 $74 = (47692 + ($$sum1$i12)|0);
 HEAP32[$74>>2] = -1;
 $75 = HEAP32[47692>>2]|0;
 $76 = ((($75)) + -12|0);
 $77 = HEAP32[$76>>2]|0;
 $$sum22 = (($77) + 24)|0;
 $78 = (47692 + ($$sum22)|0);
 $79 = HEAP32[$78>>2]|0;
 HEAP32[47776>>2] = (48728);
 HEAP32[(47780)>>2] = (48748);
 $80 = (47776 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(464,($80|0),($79|0));
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev((47780));
  ___resumeException($83|0);
  // unreachable;
 } else {
  $85 = (47776 + ($$sum$i11)|0);
  HEAP32[$85>>2] = 0;
  $86 = (47776 + ($$sum1$i12)|0);
  HEAP32[$86>>2] = -1;
  $87 = HEAP32[47520>>2]|0;
  $88 = ((($87)) + -12|0);
  $89 = HEAP32[$88>>2]|0;
  $$sum23 = (($89) + 72)|0;
  $90 = (47520 + ($$sum23)|0);
  HEAP32[$90>>2] = 47608;
  $91 = HEAP32[47692>>2]|0;
  $92 = ((($91)) + -12|0);
  $93 = HEAP32[$92>>2]|0;
  $$sum24 = (($93) + 4)|0;
  $94 = (47692 + ($$sum24)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 | 8192;
  HEAP32[$94>>2] = $96;
  $97 = HEAP32[47692>>2]|0;
  $98 = ((($97)) + -12|0);
  $99 = HEAP32[$98>>2]|0;
  $$sum25 = (($99) + 72)|0;
  $100 = (47692 + ($$sum25)|0);
  HEAP32[$100>>2] = 47608;
  return;
 }
}
function __GLOBAL__I_000101() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 return;
}
function __GLOBAL__sub_I_iostream_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = (48412);
 $2 = ((($this)) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = ((($this)) + 40|0);
 HEAP32[$3>>2] = $__st;
 $4 = ((($this)) + 48|0);
 HEAP32[$4>>2] = -1;
 $5 = ((($this)) + 52|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($this)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$6);
 $7 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $7;
 __THREW__ = 0;
 invoke_vii(74,($this|0),($1|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($10|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = (48348);
 $2 = ((($this)) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = ((($this)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$3);
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $4;
 __THREW__ = 0;
 $5 = (invoke_iii(465,($1|0),(49936|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($16|0);
  // unreachable;
 } else {
  $8 = ((($this)) + 36|0);
  __ZNSt3__16localeD2Ev($1);
  HEAP32[$8>>2] = $5;
  $9 = ((($this)) + 40|0);
  HEAP32[$9>>2] = $__st;
  $10 = ((($this)) + 44|0);
  $11 = HEAP32[$5>>2]|0;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_ii[$13 & 1023]($5)|0);
  $15 = $14&1;
  HEAP8[$10>>0] = $15;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = (48284);
 $2 = ((($this)) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = ((($this)) + 40|0);
 HEAP32[$3>>2] = $__st;
 $4 = ((($this)) + 48|0);
 HEAP32[$4>>2] = -1;
 $5 = ((($this)) + 52|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($this)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$6);
 $7 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $7;
 __THREW__ = 0;
 invoke_vii(52,($this|0),($1|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($10|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = (48220);
 $2 = ((($this)) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = ((($this)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$3);
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $4;
 __THREW__ = 0;
 $5 = (invoke_iii(465,($1|0),(49944|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($16|0);
  // unreachable;
 } else {
  $8 = ((($this)) + 36|0);
  __ZNSt3__16localeD2Ev($1);
  HEAP32[$8>>2] = $5;
  $9 = ((($this)) + 40|0);
  HEAP32[$9>>2] = $__st;
  $10 = ((($this)) + 44|0);
  $11 = HEAP32[$5>>2]|0;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_ii[$13 & 1023]($5)|0);
  $15 = $14&1;
  HEAP8[$10>>0] = $15;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49944)|0);
 $4 = ((($this)) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = ((($this)) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 40|0);
 $2 = ((($__extbuf)) + 8|0);
 $3 = $__extbuf;
 $4 = ((($this)) + 32|0);
 L1: while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite($__extbuf,1,$13,$14)|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   break;
  }
  switch ($10|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$0 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush($17)|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $3 = ($__n|0)>(0);
   if ($3) {
    $$012 = $__s;$__i$03 = 0;
    while(1) {
     $7 = HEAP32[$this>>2]|0;
     $8 = ((($7)) + 52|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = HEAP32[$$012>>2]|0;
     $11 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$10)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      $$0 = $__i$03;
      break L1;
     }
     $13 = (($__i$03) + 1)|0;
     $14 = ((($$012)) + 4|0);
     $15 = ($13|0)<($__n|0);
     if ($15) {
      $$012 = $14;$__i$03 = $13;
     } else {
      $$0 = $13;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   $4 = ((($this)) + 32|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (_fwrite($__s,4,$__n,$5)|0);
   $$0 = $6;
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if ($0) {
   label = 11;
  } else {
   HEAP32[$__1buf>>2] = $__c;
   $1 = ((($this)) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = ((($this)) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite($__1buf,4,1,$5)|0);
    $7 = ($6|0)==(1);
    if ($7) {
     label = 11;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = ((($__1buf)) + 4|0);
   $9 = ((($this)) + 36|0);
   $10 = ((($this)) + 40|0);
   $11 = ((($__extbuf)) + 8|0);
   $12 = $__extbuf;
   $13 = ((($this)) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = ((($16)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     break L1;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     $pbase$0$lcssa12 = $pbase$0;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     break L1;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite($__extbuf,1,$30,$31)|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     break L1;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     label = 11;
     break L1;
    }
   }
   $23 = HEAP32[$13>>2]|0;
   $24 = (_fwrite($pbase$0$lcssa12,1,1,$23)|0);
   $25 = ($24|0)==(1);
   if ($25) {
    label = 11;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $$__c$i = $0 ? 0 : $__c;
  $$0 = $$__c$i;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49944)|0);
 $1 = ((($this)) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = ((($this)) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = ((($this)) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(75273);
 }
 return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = ((($this)) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 L1: do {
  if ($0) {
   if ($3) {
    $$01 = -1;
   } else {
    $4 = ((($this)) + 48|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)!=(-1);
    $7 = $6&1;
    HEAP8[$1>>0] = $7;
    $$01 = $5;
   }
  } else {
   $8 = ((($this)) + 48|0);
   L5: do {
    if ($3) {
     $9 = HEAP32[$8>>2]|0;
     HEAP32[$__ci>>2] = $9;
     $10 = ((($this)) + 36|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($this)) + 40|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($__ci)) + 4|0);
     $15 = ((($__extbuf)) + 8|0);
     $16 = HEAP32[$11>>2]|0;
     $17 = ((($16)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
     switch ($19|0) {
     case 1: case 2:  {
      $$01 = -1;
      break L1;
      break;
     }
     case 3:  {
      $20 = HEAP32[$8>>2]|0;
      $21 = $20&255;
      HEAP8[$__extbuf>>0] = $21;
      $22 = ((($__extbuf)) + 1|0);
      HEAP32[$__enxt>>2] = $22;
      break;
     }
     default: {
     }
     }
     $23 = ((($this)) + 32|0);
     while(1) {
      $24 = HEAP32[$__enxt>>2]|0;
      $25 = ($24>>>0)>($__extbuf>>>0);
      if (!($25)) {
       break L5;
      }
      $26 = ((($24)) + -1|0);
      HEAP32[$__enxt>>2] = $26;
      $27 = HEAP8[$26>>0]|0;
      $28 = $27 << 24 >> 24;
      $29 = HEAP32[$23>>2]|0;
      $30 = (_ungetc($28,$29)|0);
      $31 = ($30|0)==(-1);
      if ($31) {
       $$01 = -1;
       break L1;
      }
     }
    }
   } while(0);
   HEAP32[$8>>2] = $__c;
   HEAP8[$1>>0] = 1;
   $$01 = $__c;
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$019 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa24 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = ((($this)) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $5 = ((($this)) + 44|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(1);
   $8 = $7 ? $6 : 1;
   $9 = ((($this)) + 32|0);
   $10 = ($8|0)>(0);
   if ($10) {
    $__i$019 = 0;
    while(1) {
     $11 = HEAP32[$9>>2]|0;
     $12 = (_getc($11)|0);
     $13 = ($12|0)==(-1);
     if ($13) {
      $$0 = -1;
      break L1;
     }
     $14 = $12&255;
     $15 = (($__extbuf) + ($__i$019)|0);
     HEAP8[$15>>0] = $14;
     $16 = (($__i$019) + 1)|0;
     $17 = ($16|0)<($8|0);
     if ($17) {
      $__i$019 = $16;
     } else {
      break;
     }
    }
   }
   $18 = ((($this)) + 53|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(0);
   L8: do {
    if ($20) {
     $21 = ((($this)) + 40|0);
     $22 = ((($this)) + 36|0);
     $23 = ((($__1buf)) + 4|0);
     $__nread$0 = $8;
     L10: while(1) {
      $26 = HEAP32[$21>>2]|0;
      $27 = $26;
      $28 = $27;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($27) + 4)|0;
      $31 = $30;
      $32 = HEAP32[$31>>2]|0;
      $33 = HEAP32[$22>>2]|0;
      $34 = (($__extbuf) + ($__nread$0)|0);
      $35 = HEAP32[$33>>2]|0;
      $36 = ((($35)) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
      switch ($38|0) {
      case 2:  {
       $$0 = -1;
       break L1;
       break;
      }
      case 3:  {
       $__nread$0$lcssa24 = $__nread$0;
       break L10;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       $__nread$2 = $__nread$0;
       break L8;
      }
      }
      $39 = HEAP32[$21>>2]|0;
      $40 = $39;
      $41 = $40;
      HEAP32[$41>>2] = $29;
      $42 = (($40) + 4)|0;
      $43 = $42;
      HEAP32[$43>>2] = $32;
      $44 = ($__nread$0|0)==(8);
      if ($44) {
       $$0 = -1;
       break L1;
      }
      $45 = HEAP32[$9>>2]|0;
      $46 = (_getc($45)|0);
      $47 = ($46|0)==(-1);
      if ($47) {
       $$0 = -1;
       break L1;
      }
      $50 = $46&255;
      HEAP8[$34>>0] = $50;
      $51 = (($__nread$0) + 1)|0;
      $__nread$0 = $51;
     }
     $48 = HEAP8[$__extbuf>>0]|0;
     $49 = $48 << 24 >> 24;
     HEAP32[$__1buf>>2] = $49;
     $__nread$2 = $__nread$0$lcssa24;
    } else {
     $24 = HEAP8[$__extbuf>>0]|0;
     $25 = $24 << 24 >> 24;
     HEAP32[$__1buf>>2] = $25;
     $__nread$2 = $8;
    }
   } while(0);
   if ($__consume) {
    $60 = HEAP32[$__1buf>>2]|0;
    $61 = ((($this)) + 48|0);
    HEAP32[$61>>2] = $60;
    $$0 = $60;
    break;
   } else {
    $__i2$0 = $__nread$2;
   }
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55 << 24 >> 24;
    $57 = HEAP32[$9>>2]|0;
    $58 = (_ungetc($56,$57)|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     break L1;
    } else {
     $__i2$0 = $53;
    }
   }
   $$pre = HEAP32[$__1buf>>2]|0;
   $$0 = $$pre;
  } else {
   $3 = ((($this)) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   if ($__consume) {
    HEAP32[$3>>2] = -1;
    HEAP8[$0>>0] = 0;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49936)|0);
 $4 = ((($this)) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = ((($this)) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 40|0);
 $2 = ((($__extbuf)) + 8|0);
 $3 = $__extbuf;
 $4 = ((($this)) + 32|0);
 L1: while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite($__extbuf,1,$13,$14)|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   break;
  }
  switch ($10|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$0 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush($17)|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $3 = ($__n|0)>(0);
   if ($3) {
    $$012 = $__s;$__i$03 = 0;
    while(1) {
     $7 = HEAP32[$this>>2]|0;
     $8 = ((($7)) + 52|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = HEAP8[$$012>>0]|0;
     $11 = $10&255;
     $12 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$11)|0);
     $13 = ($12|0)==(-1);
     if ($13) {
      $$0 = $__i$03;
      break L1;
     }
     $14 = (($__i$03) + 1)|0;
     $15 = ((($$012)) + 1|0);
     $16 = ($14|0)<($__n|0);
     if ($16) {
      $$012 = $15;$__i$03 = $14;
     } else {
      $$0 = $14;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   $4 = ((($this)) + 32|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (_fwrite($__s,1,$__n,$5)|0);
   $$0 = $6;
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if ($0) {
   label = 11;
  } else {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = ((($this)) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = ((($this)) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite($__1buf,1,1,$6)|0);
    $8 = ($7|0)==(1);
    if ($8) {
     label = 11;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = ((($__1buf)) + 1|0);
   $10 = ((($this)) + 36|0);
   $11 = ((($this)) + 40|0);
   $12 = ((($__extbuf)) + 8|0);
   $13 = $__extbuf;
   $14 = ((($this)) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = ((($17)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     break L1;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     $pbase$0$lcssa12 = $pbase$0;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     break L1;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite($__extbuf,1,$31,$32)|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     break L1;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     label = 11;
     break L1;
    }
   }
   $24 = HEAP32[$14>>2]|0;
   $25 = (_fwrite($pbase$0$lcssa12,1,1,$24)|0);
   $26 = ($25|0)==(1);
   if ($26) {
    label = 11;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $$__c$i = $0 ? 0 : $__c;
  $$0 = $$__c$i;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49936)|0);
 $1 = ((($this)) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = ((($this)) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = ((($this)) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(75273);
 }
 return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = ((($this)) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 L1: do {
  if ($0) {
   if ($3) {
    $$01 = -1;
   } else {
    $4 = ((($this)) + 48|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)!=(-1);
    $7 = $6&1;
    HEAP8[$1>>0] = $7;
    $$01 = $5;
   }
  } else {
   $8 = ((($this)) + 48|0);
   L5: do {
    if ($3) {
     $9 = HEAP32[$8>>2]|0;
     $10 = $9&255;
     HEAP8[$__ci>>0] = $10;
     $11 = ((($this)) + 36|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($this)) + 40|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($__ci)) + 1|0);
     $16 = ((($__extbuf)) + 8|0);
     $17 = HEAP32[$12>>2]|0;
     $18 = ((($17)) + 12|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
     switch ($20|0) {
     case 1: case 2:  {
      $$01 = -1;
      break L1;
      break;
     }
     case 3:  {
      $21 = HEAP32[$8>>2]|0;
      $22 = $21&255;
      HEAP8[$__extbuf>>0] = $22;
      $23 = ((($__extbuf)) + 1|0);
      HEAP32[$__enxt>>2] = $23;
      break;
     }
     default: {
     }
     }
     $24 = ((($this)) + 32|0);
     while(1) {
      $25 = HEAP32[$__enxt>>2]|0;
      $26 = ($25>>>0)>($__extbuf>>>0);
      if (!($26)) {
       break L5;
      }
      $27 = ((($25)) + -1|0);
      HEAP32[$__enxt>>2] = $27;
      $28 = HEAP8[$27>>0]|0;
      $29 = $28 << 24 >> 24;
      $30 = HEAP32[$24>>2]|0;
      $31 = (_ungetc($29,$30)|0);
      $32 = ($31|0)==(-1);
      if ($32) {
       $$01 = -1;
       break L1;
      }
     }
    }
   } while(0);
   HEAP32[$8>>2] = $__c;
   HEAP8[$1>>0] = 1;
   $$01 = $__c;
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$019 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa24 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = ((($this)) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $5 = ((($this)) + 44|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(1);
   $8 = $7 ? $6 : 1;
   $9 = ((($this)) + 32|0);
   $10 = ($8|0)>(0);
   if ($10) {
    $__i$019 = 0;
    while(1) {
     $11 = HEAP32[$9>>2]|0;
     $12 = (_getc($11)|0);
     $13 = ($12|0)==(-1);
     if ($13) {
      $$0 = -1;
      break L1;
     }
     $14 = $12&255;
     $15 = (($__extbuf) + ($__i$019)|0);
     HEAP8[$15>>0] = $14;
     $16 = (($__i$019) + 1)|0;
     $17 = ($16|0)<($8|0);
     if ($17) {
      $__i$019 = $16;
     } else {
      break;
     }
    }
   }
   $18 = ((($this)) + 53|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(0);
   L8: do {
    if ($20) {
     $21 = ((($this)) + 40|0);
     $22 = ((($this)) + 36|0);
     $23 = ((($__1buf)) + 1|0);
     $__nread$0 = $8;
     L10: while(1) {
      $25 = HEAP32[$21>>2]|0;
      $26 = $25;
      $27 = $26;
      $28 = HEAP32[$27>>2]|0;
      $29 = (($26) + 4)|0;
      $30 = $29;
      $31 = HEAP32[$30>>2]|0;
      $32 = HEAP32[$22>>2]|0;
      $33 = (($__extbuf) + ($__nread$0)|0);
      $34 = HEAP32[$32>>2]|0;
      $35 = ((($34)) + 16|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (FUNCTION_TABLE_iiiiiiiii[$36 & 511]($32,$25,$__extbuf,$33,$__enxt,$__1buf,$23,$__inxt)|0);
      switch ($37|0) {
      case 2:  {
       $$0 = -1;
       break L1;
       break;
      }
      case 3:  {
       $__nread$0$lcssa24 = $__nread$0;
       break L10;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       $__nread$2 = $__nread$0;
       break L8;
      }
      }
      $38 = HEAP32[$21>>2]|0;
      $39 = $38;
      $40 = $39;
      HEAP32[$40>>2] = $28;
      $41 = (($39) + 4)|0;
      $42 = $41;
      HEAP32[$42>>2] = $31;
      $43 = ($__nread$0|0)==(8);
      if ($43) {
       $$0 = -1;
       break L1;
      }
      $44 = HEAP32[$9>>2]|0;
      $45 = (_getc($44)|0);
      $46 = ($45|0)==(-1);
      if ($46) {
       $$0 = -1;
       break L1;
      }
      $48 = $45&255;
      HEAP8[$33>>0] = $48;
      $49 = (($__nread$0) + 1)|0;
      $__nread$0 = $49;
     }
     $47 = HEAP8[$__extbuf>>0]|0;
     HEAP8[$__1buf>>0] = $47;
     $__nread$2 = $__nread$0$lcssa24;
    } else {
     $24 = HEAP8[$__extbuf>>0]|0;
     HEAP8[$__1buf>>0] = $24;
     $__nread$2 = $8;
    }
   } while(0);
   if ($__consume) {
    $58 = HEAP8[$__1buf>>0]|0;
    $59 = $58&255;
    $60 = ((($this)) + 48|0);
    HEAP32[$60>>2] = $59;
    $62 = $58;
   } else {
    $__i2$0 = $__nread$2;
    while(1) {
     $50 = ($__i2$0|0)>(0);
     if (!($50)) {
      break;
     }
     $51 = (($__i2$0) + -1)|0;
     $52 = (($__extbuf) + ($51)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53&255;
     $55 = HEAP32[$9>>2]|0;
     $56 = (_ungetc($54,$55)|0);
     $57 = ($56|0)==(-1);
     if ($57) {
      $$0 = -1;
      break L1;
     } else {
      $__i2$0 = $51;
     }
    }
    $$pre = HEAP8[$__1buf>>0]|0;
    $62 = $$pre;
   }
   $61 = $62&255;
   $$0 = $61;
  } else {
   $3 = ((($this)) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   if ($__consume) {
    HEAP32[$3>>2] = -1;
    HEAP8[$0>>0] = 0;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__str)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7>>>0)<($__pos>>>0);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 } else {
  $9 = ((($__str)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($__str)) + 1|0);
  $12 = $2 ? $11 : $10;
  $13 = (($12) + ($__pos)|0);
  $14 = (($7) - ($__pos))|0;
  $15 = ($14>>>0)<($__n>>>0);
  $16 = $15 ? $14 : $__n;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$13,$16);
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if (!($0)) {
  $1 = HEAP8[$__str>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  $4 = ((($__str)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($__str)) + 1|0);
  $7 = $3 ? $6 : $5;
  $8 = ((($__str)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1&255;
  $11 = $10 >>> 1;
  $12 = $3 ? $11 : $9;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$7,$12)|0);
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 1|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__n>>>0);
 do {
  if ($8) {
   $9 = (($__n) - ($7))|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  } else {
   if ($2) {
    $14 = (((($this)) + 1|0) + ($__n)|0);
    HEAP8[$14>>0] = 0;
    $15 = $__n << 1;
    $16 = $15&255;
    HEAP8[$this>>0] = $16;
    break;
   } else {
    $10 = ((($this)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($__n)|0);
    HEAP8[$12>>0] = 0;
    $13 = ((($this)) + 4|0);
    HEAP32[$13>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $15 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $15 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $16 = $13;
  } else {
   $10 = ((($this)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $16 = $11;
  }
  $14 = (($15) - ($16))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($15))|0;
   $19 = (($18) + ($16))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = ((($this)) + 1|0);
   $27 = $25;
  } else {
   $23 = ((($this)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($16)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($16) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = ((($this)) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $20 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(10);
   do {
    if ($23) {
     $24 = ((($this)) + 1|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = (($20) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(376,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = ((($this)) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = ((($this)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = ((($this)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($20) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = ((($this)) + 4|0);
    HEAP32[$50>>2] = $14;
    $51 = ((($this)) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $14 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)>($__n>>>0);
 if (!($8)) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 if ($2) {
  $11 = ((($this)) + 1|0);
  $13 = $11;
 } else {
  $9 = ((($this)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (($13) + ($__n)|0);
 return ($12|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $$pre;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($15)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($15) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1)|0);
  _memcpy(($26|0),($27|0),($25|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = ((($this)) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31)|0);
 HEAP8[$33>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1)|0);
  _memcpy(($24|0),($25|0),($23|0))|0;
 }
 $26 = ($__old_cap|0)==(10);
 if (!($26)) {
  __ZdlPv($20);
 }
 $27 = ((($this)) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj($this,$__s,$__sz,$__reserve) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 $__reserve = $__reserve|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__reserve>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__reserve>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__reserve) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 4|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   (_wmemmove($14,$__s,$__n)|0);
   $15 = (($14) + ($__n<<2)|0);
   HEAP32[$15>>2] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $20 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(1);
   do {
    if ($23) {
     $24 = ((($this)) + 4|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = $20 << 2;
     $29 = (($28) + 4)|0;
     if ($27) {
      $30 = (__Znwj($29)|0);
      $$sink = $30;
     } else {
      __THREW__ = 0;
      $31 = (invoke_ii(376,($29|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $34 = ___cxa_find_matching_catch(0|0)|0;
       $35 = tempRet0;
       (___cxa_begin_catch(($34|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $$sink = $31;
      }
     }
     $36 = $8 & 1;
     $37 = ($36<<24>>24)==(0);
     if ($37) {
      $40 = ((($this)) + 4|0);
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
      break;
     } else {
      $38 = ((($this)) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $41 = $8 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $45 = $8&255;
    $46 = $45 >>> 1;
    $48 = $46;
   } else {
    $43 = ((($this)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $48 = $44;
   }
   $47 = (($48) + 1)|0;
   (_wmemcpy($__new_data$1,$__p$0,$47)|0);
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $49 = (($20) + 1)|0;
    $50 = $49 | 1;
    HEAP32[$this>>2] = $50;
    $51 = ((($this)) + 4|0);
    HEAP32[$51>>2] = $14;
    $52 = ((($this)) + 8|0);
    HEAP32[$52>>2] = $__new_data$1;
    break;
   } else {
    $53 = $14 << 1;
    $54 = $53&255;
    HEAP8[$this>>0] = $54;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $$pre;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0<<2)|0);
 HEAP32[$__p$0>>2] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
 HEAP32[$22>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = ($__n_add|0)==(0);
 if (!($22)) {
  $23 = (($19) + ($__n_copy<<2)|0);
  (_wmemcpy($23,$__p_new_stuff,$__n_add)|0);
 }
 $24 = (($__old_sz) - ($__n_del))|0;
 $25 = ($24|0)==($__n_copy|0);
 if (!($25)) {
  $26 = (($24) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $27 = (($19) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $28 = (($21) + ($$sum1<<2)|0);
  (_wmemcpy($27,$28,$26)|0);
 }
 $29 = ($__old_cap|0)==(1);
 if (!($29)) {
  __ZdlPv($21);
 }
 $30 = ((($this)) + 8|0);
 HEAP32[$30>>2] = $19;
 $31 = $18 | 1;
 HEAP32[$this>>2] = $31;
 $32 = (($24) + ($__n_add))|0;
 $33 = ((($this)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = (($19) + ($32<<2)|0);
 HEAP32[$34>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($19) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($21) + ($$sum1<<2)|0);
  (_wmemcpy($25,$26,$24)|0);
 }
 $27 = ($__old_cap|0)==(1);
 if (!($27)) {
  __ZdlPv($21);
 }
 $28 = ((($this)) + 8|0);
 HEAP32[$28>>2] = $19;
 $29 = $18 | 1;
 HEAP32[$this>>2] = $29;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p$0$ph = 0, $__p$03 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = ((($this)) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = ((($this)) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = ((($this)) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = $__last;
 $15 = (($14) - ($0))|0;
 $16 = ($__first|0)==($__last|0);
 if (!($16)) {
  $$04 = $__first;$__p$03 = $__p$0$ph;
  while(1) {
   $17 = HEAP8[$$04>>0]|0;
   HEAP8[$__p$03>>0] = $17;
   $18 = ((($$04)) + 1|0);
   $19 = ((($__p$03)) + 1|0);
   $20 = ($18|0)==($__last|0);
   if ($20) {
    break;
   } else {
    $$04 = $18;$__p$03 = $19;
   }
  }
 }
 $scevgep2 = (($__p$0$ph) + ($15)|0);
 HEAP8[$scevgep2>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$ph = 0, $__p$03 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = ((($this)) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = ((($this)) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = ((($this)) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = $__last;
 $17 = (($16) - ($0))|0;
 $18 = $17 >>> 2;
 $19 = ($__first|0)==($__last|0);
 if (!($19)) {
  $$04 = $__first;$__p$03 = $__p$0$ph;
  while(1) {
   $20 = HEAP32[$$04>>2]|0;
   HEAP32[$__p$03>>2] = $20;
   $21 = ((($$04)) + 4|0);
   $22 = ((($__p$03)) + 4|0);
   $23 = ($21|0)==($__last|0);
   if ($23) {
    break;
   } else {
    $$04 = $21;$__p$03 = $22;
   }
  }
 }
 $scevgep = (($__p$0$ph) + ($18<<2)|0);
 HEAP32[$scevgep>>2] = 0;
 return;
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (48764);
 __THREW__ = 0;
 invoke_vii(466,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = ((($this)) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = ((($this)) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = ((($this)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = ((($this)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = ((($this)) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  return;
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 32|0);
 $3 = ((($this)) + 36|0);
 $4 = ($1|0)==(0);
 if (!($4)) {
  $i$01 = $1;
  while(1) {
   $5 = (($i$01) + -1)|0;
   $6 = HEAP32[$2>>2]|0;
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$3>>2]|0;
   $10 = (($9) + ($5<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
   $12 = ($5|0)==(0);
   if ($12) {
    break;
   } else {
    $i$01 = $5;
   }
  }
 }
 return;
}
function __ZNKSt3__18ios_base6getlocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 28|0);
 __ZNSt3__16localeC2ERKS0_($0,$1);
 $2 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = ((($this)) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($this)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = ((($this)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = ((($this)) + 32|0);
 $8 = ((($this)) + 28|0);
 dest=$7; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (48476);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (48476);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (48476);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = ((($this)) + 8|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($agg$result)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($agg$result)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = ((($this)) + 16|0);
 $2 = ($__n|0)>(0);
 L1: do {
  if ($2) {
   $$01 = $__s;$__i$02 = 0;
   while(1) {
    $3 = HEAP32[$0>>2]|0;
    $4 = HEAP32[$1>>2]|0;
    $5 = ($3>>>0)<($4>>>0);
    if ($5) {
     $6 = ((($3)) + 1|0);
     HEAP32[$0>>2] = $6;
     $7 = HEAP8[$3>>0]|0;
     $storemerge = $7;
    } else {
     $8 = HEAP32[$this>>2]|0;
     $9 = ((($8)) + 40|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      $__i$0$lcssa = $__i$02;
      break L1;
     }
     $13 = $11&255;
     $storemerge = $13;
    }
    HEAP8[$$01>>0] = $storemerge;
    $14 = (($__i$02) + 1)|0;
    $15 = ((($$01)) + 1|0);
    $16 = ($14|0)<($__n|0);
    if ($16) {
     $$01 = $15;$__i$02 = $14;
    } else {
     $__i$0$lcssa = $14;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while(0);
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = ((($this)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = ((($this)) + 28|0);
 $2 = ($__n|0)>(0);
 L1: do {
  if ($2) {
   $$02 = $__s;$__i$01 = 0;
   while(1) {
    $3 = HEAP32[$0>>2]|0;
    $4 = HEAP32[$1>>2]|0;
    $5 = ($3>>>0)<($4>>>0);
    if ($5) {
     $6 = HEAP8[$$02>>0]|0;
     $7 = ((($3)) + 1|0);
     HEAP32[$0>>2] = $7;
     HEAP8[$3>>0] = $6;
    } else {
     $8 = HEAP32[$this>>2]|0;
     $9 = ((($8)) + 52|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = HEAP8[$$02>>0]|0;
     $12 = $11&255;
     $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
     $14 = ($13|0)==(-1);
     if ($14) {
      $__i$0$lcssa = $__i$01;
      break L1;
     }
    }
    $15 = ((($$02)) + 1|0);
    $16 = (($__i$01) + 1)|0;
    $17 = ($16|0)<($__n|0);
    if ($17) {
     $$02 = $15;$__i$01 = $16;
    } else {
     $__i$0$lcssa = $16;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while(0);
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (48540);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (48540);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (48540);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = ((($this)) + 8|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($agg$result)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($agg$result)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = ((($this)) + 16|0);
 $2 = ($__n|0)>(0);
 L1: do {
  if ($2) {
   $$01 = $__s;$__i$02 = 0;
   while(1) {
    $3 = HEAP32[$0>>2]|0;
    $4 = HEAP32[$1>>2]|0;
    $5 = ($3>>>0)<($4>>>0);
    if ($5) {
     $6 = ((($3)) + 4|0);
     HEAP32[$0>>2] = $6;
     $7 = HEAP32[$3>>2]|0;
     $storemerge = $7;
    } else {
     $8 = HEAP32[$this>>2]|0;
     $9 = ((($8)) + 40|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      $__i$0$lcssa = $__i$02;
      break L1;
     } else {
      $storemerge = $11;
     }
    }
    HEAP32[$$01>>2] = $storemerge;
    $13 = (($__i$02) + 1)|0;
    $14 = ((($$01)) + 4|0);
    $15 = ($13|0)<($__n|0);
    if ($15) {
     $$01 = $14;$__i$02 = $13;
    } else {
     $__i$0$lcssa = $13;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while(0);
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = ((($this)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 4|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP32[$6>>2]|0;
  $$0 = $8;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = ((($this)) + 28|0);
 $2 = ($__n|0)>(0);
 L1: do {
  if ($2) {
   $$02 = $__s;$__i$01 = 0;
   while(1) {
    $3 = HEAP32[$0>>2]|0;
    $4 = HEAP32[$1>>2]|0;
    $5 = ($3>>>0)<($4>>>0);
    if ($5) {
     $6 = HEAP32[$$02>>2]|0;
     $7 = ((($3)) + 4|0);
     HEAP32[$0>>2] = $7;
     HEAP32[$3>>2] = $6;
    } else {
     $8 = HEAP32[$this>>2]|0;
     $9 = ((($8)) + 52|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = HEAP32[$$02>>2]|0;
     $12 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$11)|0);
     $13 = ($12|0)==(-1);
     if ($13) {
      $__i$0$lcssa = $__i$01;
      break L1;
     }
    }
    $14 = ((($$02)) + 4|0);
    $15 = (($__i$01) + 1)|0;
    $16 = ($15|0)<($__n|0);
    if ($16) {
     $$02 = $14;$__i$01 = $15;
    } else {
     $__i$0$lcssa = $15;
     break;
    }
   }
  } else {
   $__i$0$lcssa = 0;
  }
 } while(0);
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($3);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__17collateIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$018 = 0, $$02$lcssa = 0, $$027 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$018 = $__lo2;$$027 = $__lo1;
   while(1) {
    $1 = ($$027|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$027>>0]|0;
    $3 = HEAP8[$$018>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = ((($$027)) + 1|0);
    $7 = ((($$018)) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$018 = $7;$$027 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
  while(1) {
   $1 = $__h$02 << 4;
   $2 = HEAP8[$__p$01>>0]|0;
   $3 = $2 << 24 >> 24;
   $4 = (($3) + ($1))|0;
   $5 = $4 & -268435456;
   $6 = $5 >>> 24;
   $7 = $6 | $5;
   $8 = $7 ^ $4;
   $9 = ((($__p$01)) + 1|0);
   $10 = ($9|0)==($__hi|0);
   if ($10) {
    $__h$0$lcssa = $8;
    break;
   } else {
    $__h$02 = $8;$__p$01 = $9;
   }
  }
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$018 = 0, $$02$lcssa = 0, $$027 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$018 = $__lo2;$$027 = $__lo1;
   while(1) {
    $1 = ($$027|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$027>>2]|0;
    $3 = HEAP32[$$018>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = ((($$027)) + 4|0);
    $7 = ((($$018)) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$018 = $7;$$027 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
  while(1) {
   $1 = $__h$02 << 4;
   $2 = HEAP32[$__p$01>>2]|0;
   $3 = (($2) + ($1))|0;
   $4 = $3 & -268435456;
   $5 = $4 >>> 24;
   $6 = $5 | $4;
   $7 = $6 ^ $3;
   $8 = ((($__p$01)) + 4|0);
   $9 = ($8|0)==($__hi|0);
   if ($9) {
    $__h$0$lcssa = $7;
    break;
   } else {
    $__h$02 = $7;$__p$01 = $8;
   }
  }
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
    $$sroa$01$0 = $14;
    break L1;
   }
   }
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(465,($2|0),(49876|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$0 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(465,($3|0),(50016|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$0 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$02 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$02 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(467,($__b|0),($$byval_copy2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($56);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$0 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($43);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$02|0);
     if ($50) {
      $$0 = $48;$$03 = $49;
     } else {
      $52 = $$02;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$0 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i10 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0;
 var $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 HEAP32[$__grouping>>2] = 0;
 $1 = ((($__grouping)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__grouping)) + 8|0);
 HEAP32[$2>>2] = 0;
 __THREW__ = 0;
 $3 = (invoke_ii(468,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $87 = ___cxa_find_matching_catch()|0;
   $88 = tempRet0;
   $$0 = $87;$$01 = $88;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(465,($0|0),(49876|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(75772|0),((75798)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     HEAP32[$__buf>>2] = 0;
     $14 = ((($__buf)) + 4|0);
     HEAP32[$14>>2] = 0;
     $15 = ((($__buf)) + 8|0);
     HEAP32[$15>>2] = 0;
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L10: do {
      if ($23) {
       label = 30;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i10 = $$pre;$__a$0 = $30;
       L12: while(1) {
        $32 = ($$pre$i$i$i10|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;
        } else {
         $33 = ((($$pre$i$i$i10)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i10)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i10>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i10|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 29;
           break;
          }
          $44 = ($41|0)==(-1);
          if ($44) {
           HEAP32[$__b>>2] = 0;
           $$pre$i$i$i = 0;
          } else {
           $$pre$i$i$i = $$pre$i$i$i10;
          }
         } else {
          $$pre$i$i$i = $$pre$i$i$i10;
         }
        }
        $45 = ($$pre$i$i$i|0)==(0|0);
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 19;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if (!($52)) {
           if ($45) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $46;$__a$2 = $__a$0;
            break L12;
           }
          }
          $53 = HEAP32[$46>>2]|0;
          $54 = ((($53)) + 36|0);
          $55 = HEAP32[$54>>2]|0;
          __THREW__ = 0;
          $56 = (invoke_ii($55|0,($46|0))|0);
          $57 = __THREW__; __THREW__ = 0;
          $58 = $57&1;
          if ($58) {
           label = 29;
           break L12;
          }
          $59 = ($56|0)==(-1);
          if ($59) {
           HEAP32[$__e>>2] = 0;
           label = 19;
           break;
          } else {
           if ($45) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $46;$__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while(0);
        if ((label|0) == 19) {
         label = 0;
         if ($45) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $169 = 0;
         }
        }
        $60 = HEAP32[$__a_end>>2]|0;
        $61 = HEAP8[$__buf>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        $64 = HEAP32[$31>>2]|0;
        $65 = $61&255;
        $66 = $65 >>> 1;
        $67 = $63 ? $66 : $64;
        $68 = (($__a$0) + ($67)|0);
        $69 = ($60|0)==($68|0);
        if ($69) {
         $70 = $67 << 1;
         __THREW__ = 0;
         invoke_viii(446,($__buf|0),($70|0),0);
         $71 = __THREW__; __THREW__ = 0;
         $72 = $71&1;
         if ($72) {
          label = 29;
          break;
         }
         $73 = HEAP8[$__buf>>0]|0;
         $74 = $73 & 1;
         $75 = ($74<<24>>24)==(0);
         if ($75) {
          $78 = 10;
         } else {
          $76 = HEAP32[$__buf>>2]|0;
          $77 = $76 & -2;
          $phitmp$i26 = (($77) + -1)|0;
          $78 = $phitmp$i26;
         }
         __THREW__ = 0;
         invoke_viii(446,($__buf|0),($78|0),0);
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         if ($80) {
          label = 29;
          break;
         }
         $81 = HEAP8[$__buf>>0]|0;
         $82 = $81 & 1;
         $83 = ($82<<24>>24)==(0);
         $84 = HEAP32[$27>>2]|0;
         $85 = $83 ? $29 : $84;
         $86 = (($85) + ($67)|0);
         HEAP32[$__a_end>>2] = $86;
         $__a$1 = $85;
        } else {
         $__a$1 = $__a$0;
        }
        $95 = ((($$pre$i$i$i)) + 12|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ((($$pre$i$i$i)) + 16|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($96|0)==($98|0);
        if ($99) {
         $100 = HEAP32[$$pre$i$i$i>>2]|0;
         $101 = ((($100)) + 36|0);
         $102 = HEAP32[$101>>2]|0;
         __THREW__ = 0;
         $103 = (invoke_ii($102|0,($$pre$i$i$i|0))|0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 29;
          break;
         } else {
          $$0$i$i = $103;
         }
        } else {
         $106 = HEAP8[$96>>0]|0;
         $107 = $106&255;
         $$0$i$i = $107;
        }
        $108 = $$0$i$i&255;
        $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $110 = ($109|0)==(0);
        if (!($110)) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $169;$__a$2 = $__a$1;
         break;
        }
        $111 = HEAP32[$95>>2]|0;
        $112 = HEAP32[$97>>2]|0;
        $113 = ($111|0)==($112|0);
        if ($113) {
         $114 = HEAP32[$$pre$i$i$i>>2]|0;
         $115 = ((($114)) + 40|0);
         $116 = HEAP32[$115>>2]|0;
         __THREW__ = 0;
         (invoke_ii($116|0,($$pre$i$i$i|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 29;
          break;
         } else {
          $$pre$i$i$i10 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $119 = ((($111)) + 1|0);
         HEAP32[$95>>2] = $119;
         $$pre$i$i$i10 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 29) {
        $91 = ___cxa_find_matching_catch()|0;
        $92 = tempRet0;
        $lpad$phi$index = $91;$lpad$phi$index2 = $92;
        break;
       }
       $120 = HEAP32[$__a_end>>2]|0;
       $121 = $120;
       $122 = $__a$2;
       $123 = (($121) - ($122))|0;
       __THREW__ = 0;
       invoke_viii(446,($__buf|0),($123|0),0);
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       if ($125) {
        label = 30;
       } else {
        $126 = HEAP8[$__buf>>0]|0;
        $127 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $128 = (invoke_i(469)|0);
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         label = 30;
        } else {
         $131 = $126 & 1;
         $132 = ($131<<24>>24)==(0);
         $133 = $132 ? $29 : $127;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $134 = (invoke_iiiii(470,($133|0),($128|0),(77156|0),($vararg_buffer|0))|0);
         $135 = __THREW__; __THREW__ = 0;
         $136 = $135&1;
         if ($136) {
          label = 30;
         } else {
          $137 = ($134|0)==(1);
          if (!($137)) {
           HEAP32[$__err>>2] = 4;
          }
          $138 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($138) {
           $151 = 0;
          } else {
           $139 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $140 = HEAP32[$139>>2]|0;
           $141 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $142 = HEAP32[$141>>2]|0;
           $143 = ($140|0)==($142|0);
           if ($143) {
            $144 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $145 = ((($144)) + 36|0);
            $146 = HEAP32[$145>>2]|0;
            __THREW__ = 0;
            $147 = (invoke_ii($146|0,($$pre$i$i$i$lcssa|0))|0);
            $148 = __THREW__; __THREW__ = 0;
            $149 = $148&1;
            if ($149) {
             label = 30;
             break;
            }
            $150 = ($147|0)==(-1);
            if ($150) {
             HEAP32[$__b>>2] = 0;
             $151 = 0;
            } else {
             $151 = $$pre$i$i$i$lcssa;
            }
           } else {
            $151 = $$pre$i$i$i$lcssa;
           }
          }
          $152 = ($151|0)==(0|0);
          $153 = ($$pre$i2$i$i|0)==(0|0);
          do {
           if ($153) {
            label = 55;
           } else {
            $154 = ((($$pre$i2$i$i)) + 12|0);
            $155 = HEAP32[$154>>2]|0;
            $156 = ((($$pre$i2$i$i)) + 16|0);
            $157 = HEAP32[$156>>2]|0;
            $158 = ($155|0)==($157|0);
            if ($158) {
             $159 = HEAP32[$$pre$i2$i$i>>2]|0;
             $160 = ((($159)) + 36|0);
             $161 = HEAP32[$160>>2]|0;
             __THREW__ = 0;
             $162 = (invoke_ii($161|0,($$pre$i2$i$i|0))|0);
             $163 = __THREW__; __THREW__ = 0;
             $164 = $163&1;
             if ($164) {
              label = 30;
              break L10;
             }
             $165 = ($162|0)==(-1);
             if ($165) {
              HEAP32[$__e>>2] = 0;
              label = 55;
              break;
             }
            }
            if (!($152)) {
             label = 56;
            }
           }
          } while(0);
          if ((label|0) == 55) {
           if ($152) {
            label = 56;
           }
          }
          if ((label|0) == 56) {
           $166 = HEAP32[$__err>>2]|0;
           $167 = $166 | 2;
           HEAP32[$__err>>2] = $167;
          }
          $168 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($168|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 30) {
      $93 = ___cxa_find_matching_catch()|0;
      $94 = tempRet0;
      $lpad$phi$index = $93;$lpad$phi$index2 = $94;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $89 = ___cxa_find_matching_catch()|0;
   $90 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $89;$$01 = $90;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i2 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = ((($__atoms)) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = ((($__atoms)) + 26|0);
   $$0$i2 = $__atoms;
   while(1) {
    $28 = HEAP8[$$0$i2>>0]|0;
    $29 = ($28<<24>>24)==($__ct<<24>>24);
    if ($29) {
     $$0$lcssa$i = $$0$i2;
     break;
    }
    $30 = ((($$0$i2)) + 1|0);
    $31 = ($30|0)==($27|0);
    if ($31) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$0$i2 = $30;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = ($34|0)>(23);
   if ($35) {
    $$0 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $36 = ($34|0)<($__base|0);
     if (!($36)) {
      $$0 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $37 = ($34|0)<(22);
     if (!($37)) {
      if ($1) {
       $$0 = -1;
       break L6;
      }
      $38 = $0;
      $39 = $__a;
      $40 = (($38) - ($39))|0;
      $41 = ($40|0)<(3);
      if (!($41)) {
       $$0 = -1;
       break L6;
      }
      $42 = ((($0)) + -1|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($43<<24>>24)==(48);
      if (!($44)) {
       $$0 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $45 = (75772 + ($34)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $47;
      HEAP8[$0>>0] = $46;
      $$0 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $48 = (75772 + ($34)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $50;
    HEAP8[$0>>0] = $49;
    $51 = HEAP32[$__dc>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[$__dc>>2] = $52;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[1744>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((1744|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(471,2147483647,(77159|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((1744|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[50440>>2] = $4;
     ___cxa_guard_release((1744|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[50440>>2]|0;
 return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    $$sroa$01$0 = $14;
    break L1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
    $$sroa$01$0 = $14;
    break L1;
   }
   }
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(465,($2|0),(49868|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$0 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(465,($3|0),(50024|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$0 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$02 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$02 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(472,($__b|0),($$byval_copy2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($56);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$0 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($43);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$02|0);
     if ($50) {
      $$0 = $48;$$03 = $49;
     } else {
      $52 = $$02;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$0 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i9 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i15 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i11 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i30 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 HEAP32[$__grouping>>2] = 0;
 $1 = ((($__grouping)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__grouping)) + 8|0);
 HEAP32[$2>>2] = 0;
 __THREW__ = 0;
 $3 = (invoke_ii(468,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $88 = ___cxa_find_matching_catch()|0;
   $89 = tempRet0;
   $$0 = $88;$$01 = $89;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(465,($0|0),(49868|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(75772|0),((75798)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     HEAP32[$__buf>>2] = 0;
     $14 = ((($__buf)) + 4|0);
     HEAP32[$14>>2] = 0;
     $15 = ((($__buf)) + 8|0);
     HEAP32[$15>>2] = 0;
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L10: do {
      if ($23) {
       label = 31;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i11 = $$pre;$__a$0 = $30;
       L12: while(1) {
        $32 = ($$pre$i$i$i11|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;$168 = 1;
        } else {
         $33 = ((($$pre$i$i$i11)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i11)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i11>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i11|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 30;
           break;
          } else {
           $$0$i$i$i$i9 = $41;
          }
         } else {
          $44 = HEAP32[$34>>2]|0;
          $$0$i$i$i$i9 = $44;
         }
         $45 = ($$0$i$i$i$i9|0)==(-1);
         if ($45) {
          HEAP32[$__b>>2] = 0;
          $$pre$i$i$i = 0;$168 = 1;
         } else {
          $$pre$i$i$i = $$pre$i$i$i11;$168 = 0;
         }
        }
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 20;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if ($52) {
           $53 = HEAP32[$46>>2]|0;
           $54 = ((($53)) + 36|0);
           $55 = HEAP32[$54>>2]|0;
           __THREW__ = 0;
           $56 = (invoke_ii($55|0,($46|0))|0);
           $57 = __THREW__; __THREW__ = 0;
           $58 = $57&1;
           if ($58) {
            label = 30;
            break L12;
           } else {
            $$0$i$i1$i$i15 = $56;
           }
          } else {
           $59 = HEAP32[$49>>2]|0;
           $$0$i$i1$i$i15 = $59;
          }
          $60 = ($$0$i$i1$i$i15|0)==(-1);
          if ($60) {
           HEAP32[$__e>>2] = 0;
           label = 20;
           break;
          } else {
           if ($168) {
            $169 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $46;$__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while(0);
        if ((label|0) == 20) {
         label = 0;
         if ($168) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $169 = 0;
         }
        }
        $61 = HEAP32[$__a_end>>2]|0;
        $62 = HEAP8[$__buf>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        $65 = HEAP32[$31>>2]|0;
        $66 = $62&255;
        $67 = $66 >>> 1;
        $68 = $64 ? $67 : $65;
        $69 = (($__a$0) + ($68)|0);
        $70 = ($61|0)==($69|0);
        if ($70) {
         $71 = $68 << 1;
         __THREW__ = 0;
         invoke_viii(446,($__buf|0),($71|0),0);
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          label = 30;
          break;
         }
         $74 = HEAP8[$__buf>>0]|0;
         $75 = $74 & 1;
         $76 = ($75<<24>>24)==(0);
         if ($76) {
          $79 = 10;
         } else {
          $77 = HEAP32[$__buf>>2]|0;
          $78 = $77 & -2;
          $phitmp$i30 = (($78) + -1)|0;
          $79 = $phitmp$i30;
         }
         __THREW__ = 0;
         invoke_viii(446,($__buf|0),($79|0),0);
         $80 = __THREW__; __THREW__ = 0;
         $81 = $80&1;
         if ($81) {
          label = 30;
          break;
         }
         $82 = HEAP8[$__buf>>0]|0;
         $83 = $82 & 1;
         $84 = ($83<<24>>24)==(0);
         $85 = HEAP32[$27>>2]|0;
         $86 = $84 ? $29 : $85;
         $87 = (($86) + ($68)|0);
         HEAP32[$__a_end>>2] = $87;
         $__a$1 = $86;
        } else {
         $__a$1 = $__a$0;
        }
        $96 = ((($$pre$i$i$i)) + 12|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ((($$pre$i$i$i)) + 16|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ($97|0)==($99|0);
        if ($100) {
         $101 = HEAP32[$$pre$i$i$i>>2]|0;
         $102 = ((($101)) + 36|0);
         $103 = HEAP32[$102>>2]|0;
         __THREW__ = 0;
         $104 = (invoke_ii($103|0,($$pre$i$i$i|0))|0);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 30;
          break;
         } else {
          $$0$i$i = $104;
         }
        } else {
         $107 = HEAP32[$97>>2]|0;
         $$0$i$i = $107;
        }
        $108 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $109 = ($108|0)==(0);
        if (!($109)) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $169;$__a$2 = $__a$1;
         break;
        }
        $110 = HEAP32[$96>>2]|0;
        $111 = HEAP32[$98>>2]|0;
        $112 = ($110|0)==($111|0);
        if ($112) {
         $113 = HEAP32[$$pre$i$i$i>>2]|0;
         $114 = ((($113)) + 40|0);
         $115 = HEAP32[$114>>2]|0;
         __THREW__ = 0;
         (invoke_ii($115|0,($$pre$i$i$i|0))|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 30;
          break;
         } else {
          $$pre$i$i$i11 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $118 = ((($110)) + 4|0);
         HEAP32[$96>>2] = $118;
         $$pre$i$i$i11 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 30) {
        $92 = ___cxa_find_matching_catch()|0;
        $93 = tempRet0;
        $lpad$phi$index = $92;$lpad$phi$index2 = $93;
        break;
       }
       $119 = HEAP32[$__a_end>>2]|0;
       $120 = $119;
       $121 = $__a$2;
       $122 = (($120) - ($121))|0;
       __THREW__ = 0;
       invoke_viii(446,($__buf|0),($122|0),0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 31;
       } else {
        $125 = HEAP8[$__buf>>0]|0;
        $126 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $127 = (invoke_i(469)|0);
        $128 = __THREW__; __THREW__ = 0;
        $129 = $128&1;
        if ($129) {
         label = 31;
        } else {
         $130 = $125 & 1;
         $131 = ($130<<24>>24)==(0);
         $132 = $131 ? $29 : $126;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $133 = (invoke_iiiii(470,($132|0),($127|0),(77156|0),($vararg_buffer|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          label = 31;
         } else {
          $136 = ($133|0)==(1);
          if (!($136)) {
           HEAP32[$__err>>2] = 4;
          }
          $137 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($137) {
           $170 = 1;
          } else {
           $138 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $141 = HEAP32[$140>>2]|0;
           $142 = ($139|0)==($141|0);
           if ($142) {
            $143 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $144 = ((($143)) + 36|0);
            $145 = HEAP32[$144>>2]|0;
            __THREW__ = 0;
            $146 = (invoke_ii($145|0,($$pre$i$i$i$lcssa|0))|0);
            $147 = __THREW__; __THREW__ = 0;
            $148 = $147&1;
            if ($148) {
             label = 31;
             break;
            } else {
             $$0$i$i$i$i = $146;
            }
           } else {
            $149 = HEAP32[$139>>2]|0;
            $$0$i$i$i$i = $149;
           }
           $150 = ($$0$i$i$i$i|0)==(-1);
           if ($150) {
            HEAP32[$__b>>2] = 0;
            $170 = 1;
           } else {
            $170 = 0;
           }
          }
          $151 = ($$pre$i3$i$i|0)==(0|0);
          do {
           if ($151) {
            label = 57;
           } else {
            $152 = ((($$pre$i3$i$i)) + 12|0);
            $153 = HEAP32[$152>>2]|0;
            $154 = ((($$pre$i3$i$i)) + 16|0);
            $155 = HEAP32[$154>>2]|0;
            $156 = ($153|0)==($155|0);
            if ($156) {
             $157 = HEAP32[$$pre$i3$i$i>>2]|0;
             $158 = ((($157)) + 36|0);
             $159 = HEAP32[$158>>2]|0;
             __THREW__ = 0;
             $160 = (invoke_ii($159|0,($$pre$i3$i$i|0))|0);
             $161 = __THREW__; __THREW__ = 0;
             $162 = $161&1;
             if ($162) {
              label = 31;
              break L10;
             } else {
              $$0$i$i1$i$i = $160;
             }
            } else {
             $163 = HEAP32[$153>>2]|0;
             $$0$i$i1$i$i = $163;
            }
            $164 = ($$0$i$i1$i$i|0)==(-1);
            if ($164) {
             HEAP32[$__e>>2] = 0;
             label = 57;
             break;
            } else {
             if ($170) {
              break;
             } else {
              label = 59;
              break;
             }
            }
           }
          } while(0);
          if ((label|0) == 57) {
           if ($170) {
            label = 59;
           }
          }
          if ((label|0) == 59) {
           $165 = HEAP32[$__err>>2]|0;
           $166 = $165 | 2;
           HEAP32[$__err>>2] = $166;
          }
          $167 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($167|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 31) {
      $94 = ___cxa_find_matching_catch()|0;
      $95 = tempRet0;
      $lpad$phi$index = $94;$lpad$phi$index2 = $95;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $90 = ___cxa_find_matching_catch()|0;
   $91 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $90;$$01 = $91;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i2 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = ((($__atoms)) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct|0)==($__thousands_sep|0);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = ((($__atoms)) + 104|0);
   $$0$i2 = $__atoms;
   while(1) {
    $28 = HEAP32[$$0$i2>>2]|0;
    $29 = ($28|0)==($__ct|0);
    if ($29) {
     $$0$lcssa$i = $$0$i2;
     break;
    }
    $30 = ((($$0$i2)) + 4|0);
    $31 = ($30|0)==($27|0);
    if ($31) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$0$i2 = $30;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = $34 >> 2;
   $36 = ($34|0)>(92);
   if ($36) {
    $$0 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $37 = ($35|0)<($__base|0);
     if (!($37)) {
      $$0 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $38 = ($34|0)<(88);
     if (!($38)) {
      if ($1) {
       $$0 = -1;
       break L6;
      }
      $39 = $0;
      $40 = $__a;
      $41 = (($39) - ($40))|0;
      $42 = ($41|0)<(3);
      if (!($42)) {
       $$0 = -1;
       break L6;
      }
      $43 = ((($0)) + -1|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = ($44<<24>>24)==(48);
      if (!($45)) {
       $$0 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $46 = (75772 + ($35)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $48;
      HEAP8[$0>>0] = $47;
      $$0 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $49 = (75772 + ($35)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $51;
    HEAP8[$0>>0] = $50;
    $52 = HEAP32[$__dc>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$__dc>>2] = $53;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(465,($__loc|0),(49876|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(75772|0),((75798)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(465,($__loc|0),(50016|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__thousands_sep>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(465,($__loc|0),(49876|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(75772|0),((75804)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(465,($__loc|0),(50016|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__decimal_point>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP8[$__thousands_sep>>0] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i3 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 32|0);
   $$0$i3 = $__atoms;
   while(1) {
    $41 = HEAP8[$$0$i3>>0]|0;
    $42 = ($41<<24>>24)==($__ct<<24>>24);
    if ($42) {
     $$0$lcssa$i = $$0$i3;
     break;
    }
    $43 = ((($$0$i3)) + 1|0);
    $44 = ($43|0)==($40|0);
    if ($44) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$0$i3 = $43;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = ($47|0)>(31);
   if ($48) {
    $$0 = -1;
   } else {
    $49 = (75772 + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    switch ($47|0) {
    case 24: case 25:  {
     $51 = HEAP32[$__a_end>>2]|0;
     $52 = ($51|0)==($__a|0);
     if (!($52)) {
      $53 = ((($51)) + -1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = $55 & 95;
      $57 = HEAP8[$__exp>>0]|0;
      $58 = $57&255;
      $59 = $58 & 127;
      $60 = ($56|0)==($59|0);
      if (!($60)) {
       $$0 = -1;
       break L1;
      }
     }
     $61 = ((($51)) + 1|0);
     HEAP32[$__a_end>>2] = $61;
     HEAP8[$51>>0] = $50;
     $$0 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     $62 = HEAP32[$__a_end>>2]|0;
     $63 = ((($62)) + 1|0);
     HEAP32[$__a_end>>2] = $63;
     HEAP8[$62>>0] = $50;
     $$0 = 0;
     break L1;
     break;
    }
    default: {
     $64 = $50&255;
     $65 = $64 & 95;
     $66 = HEAP8[$__exp>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = ($65|0)==($67|0);
     if ($68) {
      $69 = $65 | 128;
      $70 = $69&255;
      HEAP8[$__exp>>0] = $70;
      $71 = HEAP8[$__in_units>>0]|0;
      $72 = ($71<<24>>24)==(0);
      if (!($72)) {
       HEAP8[$__in_units>>0] = 0;
       $73 = HEAP8[$__grouping>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       $76 = ((($__grouping)) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $73&255;
       $79 = $78 >>> 1;
       $80 = $75 ? $79 : $77;
       $81 = ($80|0)==(0);
       if (!($81)) {
        $82 = HEAP32[$__g_end>>2]|0;
        $83 = $82;
        $84 = $__g;
        $85 = (($83) - ($84))|0;
        $86 = ($85|0)<(160);
        if ($86) {
         $87 = HEAP32[$__dc>>2]|0;
         $88 = ((($82)) + 4|0);
         HEAP32[$__g_end>>2] = $88;
         HEAP32[$82>>2] = $87;
        }
       }
      }
     }
     $89 = HEAP32[$__a_end>>2]|0;
     $90 = ((($89)) + 1|0);
     HEAP32[$__a_end>>2] = $90;
     HEAP8[$89>>0] = $50;
     $91 = ($47|0)>(21);
     if ($91) {
      $$0 = 0;
      break L1;
     }
     $92 = HEAP32[$__dc>>2]|0;
     $93 = (($92) + 1)|0;
     HEAP32[$__dc>>2] = $93;
     $$0 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(465,($__loc|0),(49868|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(75772|0),((75798)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(465,($__loc|0),(50024|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__thousands_sep>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(465,($__loc|0),(49868|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(75772|0),((75804)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(465,($__loc|0),(50024|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__decimal_point>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP32[$__thousands_sep>>2] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i3 = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct|0)==($__thousands_sep|0);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 128|0);
   $$0$i3 = $__atoms;
   while(1) {
    $41 = HEAP32[$$0$i3>>2]|0;
    $42 = ($41|0)==($__ct|0);
    if ($42) {
     $$0$lcssa$i = $$0$i3;
     break;
    }
    $43 = ((($$0$i3)) + 4|0);
    $44 = ($43|0)==($40|0);
    if ($44) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$0$i3 = $43;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = $47 >> 2;
   $49 = ($47|0)>(124);
   if ($49) {
    $$0 = -1;
   } else {
    $50 = (75772 + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    switch ($48|0) {
    case 24: case 25:  {
     $52 = HEAP32[$__a_end>>2]|0;
     $53 = ($52|0)==($__a|0);
     if (!($53)) {
      $54 = ((($52)) + -1|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = $56 & 95;
      $58 = HEAP8[$__exp>>0]|0;
      $59 = $58&255;
      $60 = $59 & 127;
      $61 = ($57|0)==($60|0);
      if (!($61)) {
       $$0 = -1;
       break L1;
      }
     }
     $62 = ((($52)) + 1|0);
     HEAP32[$__a_end>>2] = $62;
     HEAP8[$52>>0] = $51;
     $$0 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     break;
    }
    default: {
     $63 = $51&255;
     $64 = $63 & 95;
     $65 = HEAP8[$__exp>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($64|0)==($66|0);
     if ($67) {
      $68 = $64 | 128;
      $69 = $68&255;
      HEAP8[$__exp>>0] = $69;
      $70 = HEAP8[$__in_units>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       HEAP8[$__in_units>>0] = 0;
       $72 = HEAP8[$__grouping>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__grouping)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = ($79|0)==(0);
       if (!($80)) {
        $81 = HEAP32[$__g_end>>2]|0;
        $82 = $81;
        $83 = $__g;
        $84 = (($82) - ($83))|0;
        $85 = ($84|0)<(160);
        if ($85) {
         $86 = HEAP32[$__dc>>2]|0;
         $87 = ((($81)) + 4|0);
         HEAP32[$__g_end>>2] = $87;
         HEAP32[$81>>2] = $86;
        }
       }
      }
     }
    }
    }
    $88 = HEAP32[$__a_end>>2]|0;
    $89 = ((($88)) + 1|0);
    HEAP32[$__a_end>>2] = $89;
    HEAP8[$88>>0] = $51;
    $90 = ($47|0)>(84);
    if ($90) {
     $$0 = 0;
    } else {
     $91 = HEAP32[$__dc>>2]|0;
     $92 = (($91) + 1)|0;
     HEAP32[$__dc>>2] = $92;
     $$0 = 0;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre2 = 0, $$pre2$val = 0, $$pre2$val7 = 0, $$pre5 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 1023]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(465,($1|0),(50016|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   L4: do {
    if ($15) {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $66;$$01 = $65;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $$pre5 = ((($__nm)) + 1|0);
     $26 = ((($__nm)) + 1|0);
     $$pre2 = ((($__nm)) + 8|0);
     $$pre$phi6Z2D = $23 ? $26 : $$pre5;
     $$ph = $23 ? $26 : $25;
     $27 = ((($__nm)) + 4|0);
     $28 = $21 & 1;
     $29 = ($28<<24>>24)==(0);
     $$pre2$val7 = HEAP32[$$pre2>>2]|0;
     $30 = HEAP32[$27>>2]|0;
     $31 = $21&255;
     $32 = $31 >>> 1;
     $33 = $29 ? $$pre$phi6Z2D : $$pre2$val7;
     $34 = $29 ? $32 : $30;
     $35 = (($33) + ($34)|0);
     $36 = ($$ph|0)==($35|0);
     L11: do {
      if (!($36)) {
       $38 = $$ph;
       L12: while(1) {
        $37 = HEAP8[$38>>0]|0;
        $39 = HEAP32[$__s>>2]|0;
        $40 = ($39|0)==(0|0);
        do {
         if (!($40)) {
          $41 = ((($39)) + 24|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = ((($39)) + 28|0);
          $44 = HEAP32[$43>>2]|0;
          $45 = ($42|0)==($44|0);
          if (!($45)) {
           $46 = ((($42)) + 1|0);
           HEAP32[$41>>2] = $46;
           HEAP8[$42>>0] = $37;
           break;
          }
          $47 = HEAP32[$39>>2]|0;
          $48 = ((($47)) + 52|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = $37&255;
          __THREW__ = 0;
          $51 = (invoke_iii($49|0,($39|0),($50|0))|0);
          $52 = __THREW__; __THREW__ = 0;
          $53 = $52&1;
          if ($53) {
           break L12;
          }
          $54 = ($51|0)==(-1);
          if ($54) {
           HEAP32[$__s>>2] = 0;
          }
         }
        } while(0);
        $55 = ((($38)) + 1|0);
        $$pre = HEAP8[$__nm>>0]|0;
        $56 = $$pre & 1;
        $57 = ($56<<24>>24)==(0);
        $$pre2$val = HEAP32[$$pre2>>2]|0;
        $58 = HEAP32[$27>>2]|0;
        $59 = $$pre&255;
        $60 = $59 >>> 1;
        $61 = $57 ? $$pre$phi6Z2D : $$pre2$val;
        $62 = $57 ? $60 : $58;
        $63 = (($61) + ($62)|0);
        $64 = ($55|0)==($63|0);
        if ($64) {
         break L11;
        } else {
         $38 = $55;
        }
       }
       $67 = ___cxa_find_matching_catch()|0;
       $68 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
       $$0 = $68;$$01 = $67;
       break L4;
      }
     } while(0);
     $69 = HEAP32[$__s>>2]|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
     $$sroa$0$0 = $69;
     break L1;
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[77161>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[77161+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[77161+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[77161+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[77161+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[77161+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,77167,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(473,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = ((($$012)) + 1|0);
   $9 = ((($$13)) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$1$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
 }
 $13 = $__flags & 74;
 L11: do {
  switch ($13|0) {
  case 64:  {
   HEAP8[$$1$lcssa>>0] = 111;
   break;
  }
  case 8:  {
   $14 = $__flags & 16384;
   $15 = ($14|0)==(0);
   if ($15) {
    HEAP8[$$1$lcssa>>0] = 120;
    break L11;
   } else {
    HEAP8[$$1$lcssa>>0] = 88;
    break L11;
   }
   break;
  }
  default: {
   if ($__signd) {
    HEAP8[$$1$lcssa>>0] = 100;
    break L11;
   } else {
    HEAP8[$$1$lcssa>>0] = 117;
    break L11;
   }
  }
  }
 } while(0);
 return;
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 L1: do {
  switch ($2|0) {
  case 16:  {
   $3 = HEAP8[$__nb>>0]|0;
   switch ($3<<24>>24) {
   case 43: case 45:  {
    $4 = ((($__nb)) + 1|0);
    $$0 = $4;
    break L1;
    break;
   }
   default: {
   }
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = ((($__nb)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    switch ($11<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $12 = ((($__nb)) + 2|0);
    $$0 = $12;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $$0 = $__ne;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i10 = 0, $$01$i$i414 = 0, $$__dg$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$011 = 0;
 var $__dc$1 = 0, $__dg$012 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$013 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49876)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,50016)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$133 = $22;
    label = 29;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = ((($__ne)) + -1|0);
    $65 = ($__nf$1>>>0)<($64>>>0);
    if ($65) {
     $$01$i$i414 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$01$i$i414>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$01$i$i414>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = ((($$01$i$i414)) + 1|0);
      $70 = ((($68)) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$01$i$i414 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = ((($72)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 5;
   } else {
    $78 = ((($__grouping)) + 8|0);
    $79 = ((($__grouping)) + 1|0);
    $80 = ($__nf$1>>>0)<($__ne>>>0);
    L22: do {
     if ($80) {
      $__dc$011 = 0;$__dg$012 = 0;$__p$013 = $__nf$1;
      while(1) {
       $81 = HEAP8[$__grouping>>0]|0;
       $82 = $81 & 1;
       $83 = ($82<<24>>24)==(0);
       $84 = HEAP32[$78>>2]|0;
       $85 = $83 ? $79 : $84;
       $86 = (($85) + ($__dg$012)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)!=(0);
       $89 = $87 << 24 >> 24;
       $90 = ($__dc$011|0)==($89|0);
       $or$cond = $88 & $90;
       if ($or$cond) {
        $91 = HEAP32[$__oe>>2]|0;
        $92 = ((($91)) + 1|0);
        HEAP32[$__oe>>2] = $92;
        HEAP8[$91>>0] = $75;
        $93 = HEAP8[$__grouping>>0]|0;
        $94 = $93 & 1;
        $95 = ($94<<24>>24)==(0);
        $96 = HEAP32[$8>>2]|0;
        $97 = $93&255;
        $98 = $97 >>> 1;
        $99 = $95 ? $98 : $96;
        $100 = (($99) + -1)|0;
        $101 = ($__dg$012>>>0)<($100>>>0);
        $102 = $101&1;
        $$__dg$0 = (($102) + ($__dg$012))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$011;$__dg$1 = $__dg$012;
       }
       $103 = HEAP8[$__p$013>>0]|0;
       $104 = HEAP32[$0>>2]|0;
       $105 = ((($104)) + 28|0);
       $106 = HEAP32[$105>>2]|0;
       __THREW__ = 0;
       $107 = (invoke_iii($106|0,($0|0),($103|0))|0);
       $108 = __THREW__; __THREW__ = 0;
       $109 = $108&1;
       if ($109) {
        break;
       }
       $110 = HEAP32[$__oe>>2]|0;
       $111 = ((($110)) + 1|0);
       HEAP32[$__oe>>2] = $111;
       HEAP8[$110>>0] = $107;
       $112 = (($__dc$1) + 1)|0;
       $113 = ((($__p$013)) + 1|0);
       $114 = ($113>>>0)<($__ne>>>0);
       if ($114) {
        $__dc$011 = $112;$__dg$012 = $__dg$1;$__p$013 = $113;
       } else {
        break L22;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      break L1;
     }
    } while(0);
    $115 = $__nf$1;
    $116 = $__nb;
    $117 = (($115) - ($116))|0;
    $118 = (($__ob) + ($117)|0);
    $119 = HEAP32[$__oe>>2]|0;
    $120 = ($118|0)==($119|0);
    if ($120) {
     $$pre$phiZ2D = $116;$133 = $118;
     label = 29;
    } else {
     $121 = ((($119)) + -1|0);
     $122 = ($118>>>0)<($121>>>0);
     if ($122) {
      $$01$i$i10 = $118;$125 = $121;
      while(1) {
       $123 = HEAP8[$$01$i$i10>>0]|0;
       $124 = HEAP8[$125>>0]|0;
       HEAP8[$$01$i$i10>>0] = $124;
       HEAP8[$125>>0] = $123;
       $126 = ((($$01$i$i10)) + 1|0);
       $127 = ((($125)) + -1|0);
       $128 = ($126>>>0)<($127>>>0);
       if ($128) {
        $$01$i$i10 = $126;$125 = $127;
       } else {
        break;
       }
      }
     }
     $$pre = HEAP32[$__oe>>2]|0;
     $$pre$phiZ2D = $116;$133 = $$pre;
     label = 29;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 29) {
  $129 = ($__np|0)==($__ne|0);
  $130 = $__np;
  $131 = (($130) - ($$pre$phiZ2D))|0;
  $132 = (($__ob) + ($131)|0);
  $storemerge = $129 ? $133 : $132;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 78|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,77169,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(473,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[77161>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[77161+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[77161+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[77161+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[77161+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[77161+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,77167,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(473,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 79|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,77169,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(473,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$112 = 0, $$1311 = 0, $$byval_copy = 0, $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$pre9$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 84|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 146|0;
 $__nb = sp + 80|0;
 $__o = sp + 88|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,77172,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(469)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(474,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     $26 = ((($__iob)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $27;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $28 = (invoke_iiiii(474,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      $__nc$1 = $28;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $31 = HEAP32[$__nb>>2]|0;
     $32 = ($31|0)==(0|0);
     if ($32) {
      __THREW__ = 0;
      invoke_v(475);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $35 = $$pre;
     } else {
      $35 = $31;
     }
     $36 = $35;
     $38 = $35;$64 = $36;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$112 = $24;$$1311 = $25;
  } else {
   $$pre8 = HEAP32[$__nb>>2]|0;
   $38 = $$pre8;$64 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $37 = (($38) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
  $40 = ($38|0)==($__nar|0);
  do {
   if ($40) {
    $52 = $__nar;$61 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $41 = $__nc$2 << 1;
    $42 = (_malloc($41)|0);
    $43 = ($42|0)==(0|0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(475);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $74 = 0;
      label = 20;
      break;
     }
     $$pre9$pre = HEAP32[$__nb>>2]|0;
     $$pre9 = $$pre9$pre;
    } else {
     $$pre9 = $38;
    }
    $48 = $42;
    $52 = $$pre9;$61 = $48;$__ob$0 = $42;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $49 = (invoke_ii(468,($__iob|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $74 = $61;
     label = 20;
    } else {
     HEAP32[$0>>2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(476,($52|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $67 = ___cxa_find_matching_catch()|0;
      $68 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
      $$0 = $67;$$02 = $68;$69 = $61;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $55 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $55;
     $56 = HEAP32[$__op>>2]|0;
     $57 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $58 = (invoke_iiiiiii(477,($$byval_copy|0),($__ob$0|0),($56|0),($57|0),($__iob|0),($__fl|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $74 = $61;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $58;
      $62 = ($61|0)==(0);
      if (!($62)) {
       $63 = $61;
       _free($63);
      }
      $65 = ($64|0)==(0);
      if (!($65)) {
       $66 = $64;
       _free($66);
      }
      STACKTOP = sp;return ($58|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$02 = $47;$69 = $74;
  }
  $70 = ($69|0)==(0);
  if (!($70)) {
   $71 = $69;
   _free($71);
  }
  $72 = ($64|0)==(0);
  if ($72) {
   $$112 = $$0;$$1311 = $$02;
  } else {
   $73 = $64;
   _free($73);
   $$112 = $$0;$$1311 = $$02;
  }
 }
 ___resumeException($$112|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = ((($$1)) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = ((($$012)) + 1|0);
   $14 = ((($$23)) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$2$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
 }
 L14: do {
  switch ($6|0) {
  case 4:  {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break L14;
   }
   break;
  }
  case 256:  {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break L14;
   }
   break;
  }
  default: {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break L14;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break L14;
    }
   }
  }
  }
 } while(0);
 return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i46 = 0, $$01$i$i641 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$043 = 0, $__dc$1 = 0, $__dg$044 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$240 = 0, $__nf$240$lcssa = 0, $__nf$3 = 0, $__ns$052 = 0, $__ns$148 = 0, $__ns$2 = 0, $__p$045 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49876)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,50016)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = ((($__nf$0)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      switch ($33<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       label = 11;
       break L6;
      }
      }
      $34 = HEAP32[$0>>2]|0;
      $35 = ((($34)) + 28|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_iii($36|0,($0|0),48)|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 8;
       break L4;
      }
      $40 = HEAP32[$__oe>>2]|0;
      $41 = ((($40)) + 1|0);
      HEAP32[$__oe>>2] = $41;
      HEAP8[$40>>0] = $37;
      $42 = ((($__nf$0)) + 2|0);
      $43 = HEAP8[$32>>0]|0;
      $44 = HEAP32[$0>>2]|0;
      $45 = ((($44)) + 28|0);
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 8;
       break L4;
      }
      $50 = HEAP32[$__oe>>2]|0;
      $51 = ((($50)) + 1|0);
      HEAP32[$__oe>>2] = $51;
      HEAP8[$50>>0] = $47;
      $52 = ($42>>>0)<($__ne>>>0);
      if ($52) {
       $__ns$052 = $42;
       while(1) {
        $53 = HEAP8[$__ns$052>>0]|0;
        __THREW__ = 0;
        $54 = (invoke_i(469)|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         break;
        }
        $57 = $53 << 24 >> 24;
        __THREW__ = 0;
        $58 = (invoke_iii(478,($57|0),($54|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         break;
        }
        $61 = ($58|0)==(0);
        if ($61) {
         $__nf$1 = $42;$__ns$2 = $__ns$052;
         break L6;
        }
        $62 = ((($__ns$052)) + 1|0);
        $63 = ($62>>>0)<($__ne>>>0);
        if ($63) {
         $__ns$052 = $62;
        } else {
         $__nf$1 = $42;$__ns$2 = $62;
         break L6;
        }
       }
       $21 = ___cxa_find_matching_catch()|0;
       $22 = tempRet0;
       $lpad$phi$index = $21;$lpad$phi$index5 = $22;
       break L4;
      } else {
       $__nf$1 = $42;$__ns$2 = $42;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L18: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$148 = $__nf$0;
      while(1) {
       $64 = HEAP8[$__ns$148>>0]|0;
       __THREW__ = 0;
       $65 = (invoke_i(469)|0);
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        break;
       }
       $68 = $64 << 24 >> 24;
       __THREW__ = 0;
       $69 = (invoke_iii(479,($68|0),($65|0))|0);
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        break;
       }
       $72 = ($69|0)==(0);
       if ($72) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$148;
        break L18;
       }
       $73 = ((($__ns$148)) + 1|0);
       $74 = ($73>>>0)<($__ne>>>0);
       if ($74) {
        $__ns$148 = $73;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $73;
        break L18;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      break L4;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   $78 = ((($__grouping)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $75&255;
   $81 = $80 >>> 1;
   $82 = $77 ? $81 : $79;
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = ((($85)) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92)|0);
    HEAP32[$__oe>>2] = $94;
    $$pre$phiZ2D = $0;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = ((($__ns$2)) + -1|0);
     $97 = ($__nf$1>>>0)<($96>>>0);
     if ($97) {
      $$01$i$i46 = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$01$i$i46>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$01$i$i46>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = ((($$01$i$i46)) + 1|0);
       $102 = ((($100)) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$01$i$i46 = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = ((($104)) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 8;
     break;
    }
    $110 = ((($__grouping)) + 8|0);
    $111 = ((($__grouping)) + 1|0);
    $112 = ($__nf$1>>>0)<($__ns$2>>>0);
    L37: do {
     if ($112) {
      $__dc$043 = 0;$__dg$044 = 0;$__p$045 = $__nf$1;
      while(1) {
       $113 = HEAP8[$__grouping>>0]|0;
       $114 = $113 & 1;
       $115 = ($114<<24>>24)==(0);
       $116 = HEAP32[$110>>2]|0;
       $117 = $115 ? $111 : $116;
       $118 = (($117) + ($__dg$044)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       $121 = $119 << 24 >> 24;
       $122 = ($__dc$043|0)==($121|0);
       $or$cond = $120 & $122;
       if ($or$cond) {
        $123 = HEAP32[$__oe>>2]|0;
        $124 = ((($123)) + 1|0);
        HEAP32[$__oe>>2] = $124;
        HEAP8[$123>>0] = $107;
        $125 = HEAP8[$__grouping>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        $128 = HEAP32[$78>>2]|0;
        $129 = $125&255;
        $130 = $129 >>> 1;
        $131 = $127 ? $130 : $128;
        $132 = (($131) + -1)|0;
        $133 = ($__dg$044>>>0)<($132>>>0);
        $134 = $133&1;
        $$__dg$0 = (($134) + ($__dg$044))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$043;$__dg$1 = $__dg$044;
       }
       $135 = HEAP8[$__p$045>>0]|0;
       $136 = HEAP32[$0>>2]|0;
       $137 = ((($136)) + 28|0);
       $138 = HEAP32[$137>>2]|0;
       __THREW__ = 0;
       $139 = (invoke_iii($138|0,($0|0),($135|0))|0);
       $140 = __THREW__; __THREW__ = 0;
       $141 = $140&1;
       if ($141) {
        break;
       }
       $142 = HEAP32[$__oe>>2]|0;
       $143 = ((($142)) + 1|0);
       HEAP32[$__oe>>2] = $143;
       HEAP8[$142>>0] = $139;
       $144 = (($__dc$1) + 1)|0;
       $145 = ((($__p$045)) + 1|0);
       $146 = ($145>>>0)<($__ns$2>>>0);
       if ($146) {
        $__dc$043 = $144;$__dg$044 = $__dg$1;$__p$045 = $145;
       } else {
        break L37;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
    } while(0);
    $147 = $__nf$1;
    $148 = $__nb;
    $149 = (($147) - ($148))|0;
    $150 = (($__ob) + ($149)|0);
    $151 = HEAP32[$__oe>>2]|0;
    $152 = ($150|0)==($151|0);
    if ($152) {
     $$pre$phiZ2D = $0;
    } else {
     $153 = ((($151)) + -1|0);
     $154 = ($150>>>0)<($153>>>0);
     if ($154) {
      $$01$i$i641 = $150;$158 = $153;
      while(1) {
       $156 = HEAP8[$$01$i$i641>>0]|0;
       $157 = HEAP8[$158>>0]|0;
       HEAP8[$$01$i$i641>>0] = $157;
       HEAP8[$158>>0] = $156;
       $159 = ((($$01$i$i641)) + 1|0);
       $160 = ((($158)) + -1|0);
       $161 = ($159>>>0)<($160>>>0);
       if ($161) {
        $$01$i$i641 = $159;$158 = $160;
       } else {
        $$pre$phiZ2D = $0;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $0;
     }
    }
   }
   $155 = ($__ns$2>>>0)<($__ne>>>0);
   L50: do {
    if ($155) {
     $__nf$240 = $__ns$2;
     while(1) {
      $162 = HEAP8[$__nf$240>>0]|0;
      $163 = ($162<<24>>24)==(46);
      if ($163) {
       $__nf$240$lcssa = $__nf$240;
       break;
      }
      $173 = HEAP32[$$pre$phiZ2D>>2]|0;
      $174 = ((($173)) + 28|0);
      $175 = HEAP32[$174>>2]|0;
      __THREW__ = 0;
      $176 = (invoke_iii($175|0,($0|0),($162|0))|0);
      $177 = __THREW__; __THREW__ = 0;
      $178 = $177&1;
      if ($178) {
       label = 4;
       break;
      }
      $179 = HEAP32[$__oe>>2]|0;
      $180 = ((($179)) + 1|0);
      HEAP32[$__oe>>2] = $180;
      HEAP8[$179>>0] = $176;
      $181 = ((($__nf$240)) + 1|0);
      $182 = ($181>>>0)<($__ne>>>0);
      if ($182) {
       $__nf$240 = $181;
      } else {
       $__nf$3 = $181;
       break L50;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      break L4;
     }
     $164 = HEAP32[$1>>2]|0;
     $165 = ((($164)) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = (invoke_ii($166|0,($1|0))|0);
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     if ($169) {
      label = 8;
      break L4;
     }
     $170 = HEAP32[$__oe>>2]|0;
     $171 = ((($170)) + 1|0);
     HEAP32[$__oe>>2] = $171;
     HEAP8[$170>>0] = $167;
     $172 = ((($__nf$240$lcssa)) + 1|0);
     $__nf$3 = $172;
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $183 = HEAP32[$__oe>>2]|0;
   $184 = HEAP32[$0>>2]|0;
   $185 = ((($184)) + 32|0);
   $186 = HEAP32[$185>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($186|0,($0|0),($__nf$3|0),($__ne|0),($183|0))|0);
   $187 = __THREW__; __THREW__ = 0;
   $188 = $187&1;
   if ($188) {
    label = 8;
   } else {
    $189 = $__nf$3;
    $190 = (($25) - ($189))|0;
    $191 = HEAP32[$__oe>>2]|0;
    $192 = (($191) + ($190)|0);
    HEAP32[$__oe>>2] = $192;
    $193 = ($__np|0)==($__ne|0);
    $194 = $__np;
    $195 = $__nb;
    $196 = (($194) - ($195))|0;
    $197 = (($__ob) + ($196)|0);
    $storemerge = $193 ? $192 : $197;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$112 = 0, $$1311 = 0, $$byval_copy = 0, $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$pre9$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 138|0;
 $__nb = sp + 72|0;
 $__o = sp + 80|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,77173,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(469)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(474,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $26 = (invoke_iiiii(474,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      $__nc$1 = $26;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $29 = HEAP32[$__nb>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(475);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $33 = $$pre;
     } else {
      $33 = $29;
     }
     $34 = $33;
     $36 = $33;$62 = $34;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$112 = $24;$$1311 = $25;
  } else {
   $$pre8 = HEAP32[$__nb>>2]|0;
   $36 = $$pre8;$62 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $35 = (($36) + ($__nc$2)|0);
  $37 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($36,$35,$__iob)|0);
  $38 = ($36|0)==($__nar|0);
  do {
   if ($38) {
    $50 = $__nar;$59 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $39 = $__nc$2 << 1;
    $40 = (_malloc($39)|0);
    $41 = ($40|0)==(0|0);
    if ($41) {
     __THREW__ = 0;
     invoke_v(475);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $72 = 0;
      label = 20;
      break;
     }
     $$pre9$pre = HEAP32[$__nb>>2]|0;
     $$pre9 = $$pre9$pre;
    } else {
     $$pre9 = $36;
    }
    $46 = $40;
    $50 = $$pre9;$59 = $46;$__ob$0 = $40;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $47 = (invoke_ii(468,($__iob|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $72 = $59;
     label = 20;
    } else {
     HEAP32[$0>>2] = $47;
     __THREW__ = 0;
     invoke_viiiiiii(476,($50|0),($37|0),($35|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
      $$0 = $65;$$02 = $66;$67 = $59;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
     $53 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $53;
     $54 = HEAP32[$__op>>2]|0;
     $55 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $56 = (invoke_iiiiiii(477,($$byval_copy|0),($__ob$0|0),($54|0),($55|0),($__iob|0),($__fl|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $72 = $59;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $56;
      $60 = ($59|0)==(0);
      if (!($60)) {
       $61 = $59;
       _free($61);
      }
      $63 = ($62|0)==(0);
      if (!($63)) {
       $64 = $62;
       _free($64);
      }
      STACKTOP = sp;return ($56|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $44 = ___cxa_find_matching_catch()|0;
   $45 = tempRet0;
   $$0 = $44;$$02 = $45;$67 = $72;
  }
  $68 = ($67|0)==(0);
  if (!($68)) {
   $69 = $67;
   _free($69);
  }
  $70 = ($62|0)==(0);
  if ($70) {
   $$112 = $$0;$$1311 = $$02;
  } else {
   $71 = $62;
   _free($71);
   $$112 = $$0;$$1311 = $$02;
  }
 }
 ___resumeException($$112|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 76|0;
 $__nar = sp + 56|0;
 $__o = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[77175>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[77175+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[77175+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[77175+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[77175+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[77175+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(465,($0|0),(49876|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre2 = 0, $$pre2$val = 0, $$pre2$val5 = 0, $$pre3 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 1023]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(465,($1|0),(50024|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   L4: do {
    if ($15) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $64;$$01 = $63;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $$pre3 = ((($__nm)) + 4|0);
     $26 = ((($__nm)) + 4|0);
     $$pre2 = ((($__nm)) + 8|0);
     $$pre$phi4Z2D = $23 ? $26 : $$pre3;
     $$ph = $23 ? $26 : $25;
     $27 = $21 & 1;
     $28 = ($27<<24>>24)==(0);
     $$pre2$val5 = HEAP32[$$pre2>>2]|0;
     $29 = HEAP32[$$pre$phi4Z2D>>2]|0;
     $30 = $21&255;
     $31 = $30 >>> 1;
     $32 = $28 ? $$pre$phi4Z2D : $$pre2$val5;
     $33 = $28 ? $31 : $29;
     $34 = (($32) + ($33<<2)|0);
     $35 = ($$ph|0)==($34|0);
     L11: do {
      if (!($35)) {
       $37 = $$ph;
       while(1) {
        $36 = HEAP32[$37>>2]|0;
        $38 = HEAP32[$__s>>2]|0;
        $39 = ($38|0)==(0|0);
        if (!($39)) {
         $40 = ((($38)) + 24|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = ((($38)) + 28|0);
         $43 = HEAP32[$42>>2]|0;
         $44 = ($41|0)==($43|0);
         if ($44) {
          $45 = HEAP32[$38>>2]|0;
          $46 = ((($45)) + 52|0);
          $47 = HEAP32[$46>>2]|0;
          __THREW__ = 0;
          $48 = (invoke_iii($47|0,($38|0),($36|0))|0);
          $49 = __THREW__; __THREW__ = 0;
          $50 = $49&1;
          if ($50) {
           break;
          } else {
           $$0$i$i = $48;
          }
         } else {
          $51 = ((($41)) + 4|0);
          HEAP32[$40>>2] = $51;
          HEAP32[$41>>2] = $36;
          $$0$i$i = $36;
         }
         $52 = ($$0$i$i|0)==(-1);
         if ($52) {
          HEAP32[$__s>>2] = 0;
         }
        }
        $53 = ((($37)) + 4|0);
        $$pre = HEAP8[$__nm>>0]|0;
        $54 = $$pre & 1;
        $55 = ($54<<24>>24)==(0);
        $$pre2$val = HEAP32[$$pre2>>2]|0;
        $56 = HEAP32[$$pre$phi4Z2D>>2]|0;
        $57 = $$pre&255;
        $58 = $57 >>> 1;
        $59 = $55 ? $$pre$phi4Z2D : $$pre2$val;
        $60 = $55 ? $58 : $56;
        $61 = (($59) + ($60<<2)|0);
        $62 = ($53|0)==($61|0);
        if ($62) {
         break L11;
        } else {
         $37 = $53;
        }
       }
       $65 = ___cxa_find_matching_catch()|0;
       $66 = tempRet0;
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
       $$0 = $66;$$01 = $65;
       break L4;
      }
     } while(0);
     $67 = HEAP32[$__s>>2]|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
     $$sroa$0$0 = $67;
     break L1;
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[77161>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[77161+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[77161+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[77161+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[77161+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[77161+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,77167,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(480,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i413 = 0, $$01$i$i9 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$010 = 0, $__dc$1 = 0;
 var $__dg$011 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$012 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49868)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,50024)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$133 = $22;
    label = 28;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = ((($__ne)) + -1|0);
    $65 = ($__nf$1>>>0)<($64>>>0);
    if ($65) {
     $$01$i$i413 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$01$i$i413>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$01$i$i413>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = ((($$01$i$i413)) + 1|0);
      $70 = ((($68)) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$01$i$i413 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = ((($72)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 5;
   } else {
    $78 = ((($__grouping)) + 8|0);
    $79 = ((($__grouping)) + 1|0);
    $80 = ($__nf$1>>>0)<($__ne>>>0);
    L22: do {
     if ($80) {
      $__dc$010 = 0;$__dg$011 = 0;$__p$012 = $__nf$1;
      while(1) {
       $81 = HEAP8[$__grouping>>0]|0;
       $82 = $81 & 1;
       $83 = ($82<<24>>24)==(0);
       $84 = HEAP32[$78>>2]|0;
       $85 = $83 ? $79 : $84;
       $86 = (($85) + ($__dg$011)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)!=(0);
       $89 = $87 << 24 >> 24;
       $90 = ($__dc$010|0)==($89|0);
       $or$cond = $88 & $90;
       if ($or$cond) {
        $91 = HEAP32[$__oe>>2]|0;
        $92 = ((($91)) + 4|0);
        HEAP32[$__oe>>2] = $92;
        HEAP32[$91>>2] = $75;
        $93 = HEAP8[$__grouping>>0]|0;
        $94 = $93 & 1;
        $95 = ($94<<24>>24)==(0);
        $96 = HEAP32[$8>>2]|0;
        $97 = $93&255;
        $98 = $97 >>> 1;
        $99 = $95 ? $98 : $96;
        $100 = (($99) + -1)|0;
        $101 = ($__dg$011>>>0)<($100>>>0);
        $102 = $101&1;
        $$__dg$0 = (($102) + ($__dg$011))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$010;$__dg$1 = $__dg$011;
       }
       $103 = HEAP8[$__p$012>>0]|0;
       $104 = HEAP32[$0>>2]|0;
       $105 = ((($104)) + 44|0);
       $106 = HEAP32[$105>>2]|0;
       __THREW__ = 0;
       $107 = (invoke_iii($106|0,($0|0),($103|0))|0);
       $108 = __THREW__; __THREW__ = 0;
       $109 = $108&1;
       if ($109) {
        break;
       }
       $110 = HEAP32[$__oe>>2]|0;
       $111 = ((($110)) + 4|0);
       HEAP32[$__oe>>2] = $111;
       HEAP32[$110>>2] = $107;
       $112 = (($__dc$1) + 1)|0;
       $113 = ((($__p$012)) + 1|0);
       $114 = ($113>>>0)<($__ne>>>0);
       if ($114) {
        $__dc$010 = $112;$__dg$011 = $__dg$1;$__p$012 = $113;
       } else {
        break L22;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      break L1;
     }
    } while(0);
    $115 = $__nf$1;
    $116 = $__nb;
    $117 = (($115) - ($116))|0;
    $118 = (($__ob) + ($117<<2)|0);
    $119 = HEAP32[$__oe>>2]|0;
    $120 = ($118|0)==($119|0);
    if ($120) {
     $$pre$phiZ2D = $116;$133 = $118;
     label = 28;
    } else {
     $121 = ((($119)) + -4|0);
     $122 = ($118>>>0)<($121>>>0);
     if ($122) {
      $$01$i$i9 = $118;$125 = $121;
      while(1) {
       $123 = HEAP32[$$01$i$i9>>2]|0;
       $124 = HEAP32[$125>>2]|0;
       HEAP32[$$01$i$i9>>2] = $124;
       HEAP32[$125>>2] = $123;
       $126 = ((($$01$i$i9)) + 4|0);
       $127 = ((($125)) + -4|0);
       $128 = ($126>>>0)<($127>>>0);
       if ($128) {
        $$01$i$i9 = $126;$125 = $127;
       } else {
        $$pre$phiZ2D = $116;$133 = $119;
        label = 28;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $116;$133 = $119;
      label = 28;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 28) {
  $129 = ($__np|0)==($__ne|0);
  $130 = $__np;
  $131 = (($130) - ($$pre$phiZ2D))|0;
  $132 = (($__ob) + ($131<<2)|0);
  $storemerge = $129 ? $133 : $132;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 196|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 200|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,77169,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(480,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[77161>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[77161+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[77161+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[77161+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[77161+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[77161+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,77167,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(480,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 208|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,77169,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(480,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$110 = 0, $$139 = 0, $$byval_copy = 0, $$pre = 0, $$pre6 = 0, $$pre7 = 0, $$pre7$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 312|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 308|0;
 $__o = sp + 80|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,77172,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(469)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(474,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     $26 = ((($__iob)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $27;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $28 = (invoke_iiiii(474,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      $__nc$1 = $28;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $31 = HEAP32[$__nb>>2]|0;
     $32 = ($31|0)==(0|0);
     if ($32) {
      __THREW__ = 0;
      invoke_v(475);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $35 = $$pre;
     } else {
      $35 = $31;
     }
     $36 = $35;
     $38 = $35;$64 = $36;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$110 = $24;$$139 = $25;
  } else {
   $$pre6 = HEAP32[$__nb>>2]|0;
   $38 = $$pre6;$64 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $37 = (($38) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
  $40 = ($38|0)==($__nar|0);
  do {
   if ($40) {
    $52 = $__nar;$61 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $41 = $__nc$2 << 3;
    $42 = (_malloc($41)|0);
    $43 = ($42|0)==(0|0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(475);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $74 = 0;
      label = 20;
      break;
     }
     $$pre7$pre = HEAP32[$__nb>>2]|0;
     $$pre7 = $$pre7$pre;
    } else {
     $$pre7 = $38;
    }
    $48 = $42;
    $52 = $$pre7;$61 = $48;$__ob$0 = $42;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $49 = (invoke_ii(468,($__iob|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $74 = $61;
     label = 20;
    } else {
     HEAP32[$0>>2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(481,($52|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $67 = ___cxa_find_matching_catch()|0;
      $68 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
      $$0 = $67;$$02 = $68;$69 = $61;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $55 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $55;
     $56 = HEAP32[$__op>>2]|0;
     $57 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $58 = (invoke_iiiiiii(482,($$byval_copy|0),($__ob$0|0),($56|0),($57|0),($__iob|0),($__fl|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $74 = $61;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $58;
      $62 = ($61|0)==(0);
      if (!($62)) {
       $63 = $61;
       _free($63);
      }
      $65 = ($64|0)==(0);
      if (!($65)) {
       $66 = $64;
       _free($66);
      }
      STACKTOP = sp;return ($58|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$02 = $47;$69 = $74;
  }
  $70 = ($69|0)==(0);
  if (!($70)) {
   $71 = $69;
   _free($71);
  }
  $72 = ($64|0)==(0);
  if ($72) {
   $$110 = $$0;$$139 = $$02;
  } else {
   $73 = $64;
   _free($73);
   $$110 = $$0;$$139 = $$02;
  }
 }
 ___resumeException($$110|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$01$i$i50 = 0, $$01$i$i645 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dc$047 = 0, $__dc$1 = 0, $__dg$048 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$243 = 0, $__nf$243$lcssa = 0, $__nf$3 = 0, $__ns$056 = 0, $__ns$152 = 0, $__ns$2 = 0, $__p$049 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49868)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,50024)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = ((($__nf$0)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      switch ($33<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       label = 11;
       break L6;
      }
      }
      $34 = HEAP32[$0>>2]|0;
      $35 = ((($34)) + 44|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_iii($36|0,($0|0),48)|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 8;
       break L4;
      }
      $40 = HEAP32[$__oe>>2]|0;
      $41 = ((($40)) + 4|0);
      HEAP32[$__oe>>2] = $41;
      HEAP32[$40>>2] = $37;
      $42 = ((($__nf$0)) + 2|0);
      $43 = HEAP8[$32>>0]|0;
      $44 = HEAP32[$0>>2]|0;
      $45 = ((($44)) + 44|0);
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 8;
       break L4;
      }
      $50 = HEAP32[$__oe>>2]|0;
      $51 = ((($50)) + 4|0);
      HEAP32[$__oe>>2] = $51;
      HEAP32[$50>>2] = $47;
      $52 = ($42>>>0)<($__ne>>>0);
      if ($52) {
       $__ns$056 = $42;
       while(1) {
        $53 = HEAP8[$__ns$056>>0]|0;
        __THREW__ = 0;
        $54 = (invoke_i(469)|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         break;
        }
        $57 = $53 << 24 >> 24;
        __THREW__ = 0;
        $58 = (invoke_iii(478,($57|0),($54|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         break;
        }
        $61 = ($58|0)==(0);
        if ($61) {
         $__nf$1 = $42;$__ns$2 = $__ns$056;
         break L6;
        }
        $62 = ((($__ns$056)) + 1|0);
        $63 = ($62>>>0)<($__ne>>>0);
        if ($63) {
         $__ns$056 = $62;
        } else {
         $__nf$1 = $42;$__ns$2 = $62;
         break L6;
        }
       }
       $21 = ___cxa_find_matching_catch()|0;
       $22 = tempRet0;
       $lpad$phi$index = $21;$lpad$phi$index5 = $22;
       break L4;
      } else {
       $__nf$1 = $42;$__ns$2 = $42;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L18: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$152 = $__nf$0;
      while(1) {
       $64 = HEAP8[$__ns$152>>0]|0;
       __THREW__ = 0;
       $65 = (invoke_i(469)|0);
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        break;
       }
       $68 = $64 << 24 >> 24;
       __THREW__ = 0;
       $69 = (invoke_iii(479,($68|0),($65|0))|0);
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        break;
       }
       $72 = ($69|0)==(0);
       if ($72) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$152;
        break L18;
       }
       $73 = ((($__ns$152)) + 1|0);
       $74 = ($73>>>0)<($__ne>>>0);
       if ($74) {
        $__ns$152 = $73;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $73;
        break L18;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      break L4;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   $78 = ((($__grouping)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $75&255;
   $81 = $80 >>> 1;
   $82 = $77 ? $81 : $79;
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = ((($85)) + 48|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$__oe>>2] = $94;
    $$pre$phiZ2D = $0;$198 = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = ((($__ns$2)) + -1|0);
     $97 = ($__nf$1>>>0)<($96>>>0);
     if ($97) {
      $$01$i$i50 = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$01$i$i50>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$01$i$i50>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = ((($$01$i$i50)) + 1|0);
       $102 = ((($100)) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$01$i$i50 = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = ((($104)) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 8;
     break;
    }
    $110 = ((($__grouping)) + 8|0);
    $111 = ((($__grouping)) + 1|0);
    $112 = ($__nf$1>>>0)<($__ns$2>>>0);
    L37: do {
     if ($112) {
      $__dc$047 = 0;$__dg$048 = 0;$__p$049 = $__nf$1;
      while(1) {
       $113 = HEAP8[$__grouping>>0]|0;
       $114 = $113 & 1;
       $115 = ($114<<24>>24)==(0);
       $116 = HEAP32[$110>>2]|0;
       $117 = $115 ? $111 : $116;
       $118 = (($117) + ($__dg$048)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       $121 = $119 << 24 >> 24;
       $122 = ($__dc$047|0)==($121|0);
       $or$cond = $120 & $122;
       if ($or$cond) {
        $123 = HEAP32[$__oe>>2]|0;
        $124 = ((($123)) + 4|0);
        HEAP32[$__oe>>2] = $124;
        HEAP32[$123>>2] = $107;
        $125 = HEAP8[$__grouping>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        $128 = HEAP32[$78>>2]|0;
        $129 = $125&255;
        $130 = $129 >>> 1;
        $131 = $127 ? $130 : $128;
        $132 = (($131) + -1)|0;
        $133 = ($__dg$048>>>0)<($132>>>0);
        $134 = $133&1;
        $$__dg$0 = (($134) + ($__dg$048))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$047;$__dg$1 = $__dg$048;
       }
       $135 = HEAP8[$__p$049>>0]|0;
       $136 = HEAP32[$0>>2]|0;
       $137 = ((($136)) + 44|0);
       $138 = HEAP32[$137>>2]|0;
       __THREW__ = 0;
       $139 = (invoke_iii($138|0,($0|0),($135|0))|0);
       $140 = __THREW__; __THREW__ = 0;
       $141 = $140&1;
       if ($141) {
        break;
       }
       $142 = HEAP32[$__oe>>2]|0;
       $143 = ((($142)) + 4|0);
       HEAP32[$__oe>>2] = $143;
       HEAP32[$142>>2] = $139;
       $144 = (($__dc$1) + 1)|0;
       $145 = ((($__p$049)) + 1|0);
       $146 = ($145>>>0)<($__ns$2>>>0);
       if ($146) {
        $__dc$047 = $144;$__dg$048 = $__dg$1;$__p$049 = $145;
       } else {
        break L37;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
    } while(0);
    $147 = $__nf$1;
    $148 = $__nb;
    $149 = (($147) - ($148))|0;
    $150 = (($__ob) + ($149<<2)|0);
    $151 = HEAP32[$__oe>>2]|0;
    $152 = ($150|0)==($151|0);
    if ($152) {
     $$pre$phiZ2D = $0;$198 = $150;
    } else {
     $153 = ((($151)) + -4|0);
     $154 = ($150>>>0)<($153>>>0);
     if ($154) {
      $$01$i$i645 = $150;$158 = $153;
      while(1) {
       $156 = HEAP32[$$01$i$i645>>2]|0;
       $157 = HEAP32[$158>>2]|0;
       HEAP32[$$01$i$i645>>2] = $157;
       HEAP32[$158>>2] = $156;
       $159 = ((($$01$i$i645)) + 4|0);
       $160 = ((($158)) + -4|0);
       $161 = ($159>>>0)<($160>>>0);
       if ($161) {
        $$01$i$i645 = $159;$158 = $160;
       } else {
        $$pre$phiZ2D = $0;$198 = $151;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $0;$198 = $151;
     }
    }
   }
   $155 = ($__ns$2>>>0)<($__ne>>>0);
   L50: do {
    if ($155) {
     $__nf$243 = $__ns$2;
     while(1) {
      $162 = HEAP8[$__nf$243>>0]|0;
      $163 = ($162<<24>>24)==(46);
      if ($163) {
       $__nf$243$lcssa = $__nf$243;
       break;
      }
      $173 = HEAP32[$$pre$phiZ2D>>2]|0;
      $174 = ((($173)) + 44|0);
      $175 = HEAP32[$174>>2]|0;
      __THREW__ = 0;
      $176 = (invoke_iii($175|0,($0|0),($162|0))|0);
      $177 = __THREW__; __THREW__ = 0;
      $178 = $177&1;
      if ($178) {
       label = 4;
       break;
      }
      $179 = HEAP32[$__oe>>2]|0;
      $180 = ((($179)) + 4|0);
      HEAP32[$__oe>>2] = $180;
      HEAP32[$179>>2] = $176;
      $181 = ((($__nf$243)) + 1|0);
      $182 = ($181>>>0)<($__ne>>>0);
      if ($182) {
       $__nf$243 = $181;
      } else {
       $186 = $180;$__nf$3 = $181;
       break L50;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      break L4;
     }
     $164 = HEAP32[$1>>2]|0;
     $165 = ((($164)) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     __THREW__ = 0;
     $167 = (invoke_ii($166|0,($1|0))|0);
     $168 = __THREW__; __THREW__ = 0;
     $169 = $168&1;
     if ($169) {
      label = 8;
      break L4;
     }
     $170 = HEAP32[$__oe>>2]|0;
     $171 = ((($170)) + 4|0);
     HEAP32[$__oe>>2] = $171;
     HEAP32[$170>>2] = $167;
     $172 = ((($__nf$243$lcssa)) + 1|0);
     $186 = $171;$__nf$3 = $172;
    } else {
     $186 = $198;$__nf$3 = $__ns$2;
    }
   } while(0);
   $183 = HEAP32[$0>>2]|0;
   $184 = ((($183)) + 48|0);
   $185 = HEAP32[$184>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($185|0,($0|0),($__nf$3|0),($__ne|0),($186|0))|0);
   $187 = __THREW__; __THREW__ = 0;
   $188 = $187&1;
   if ($188) {
    label = 8;
   } else {
    $189 = $__nf$3;
    $190 = (($25) - ($189))|0;
    $191 = HEAP32[$__oe>>2]|0;
    $192 = (($191) + ($190<<2)|0);
    HEAP32[$__oe>>2] = $192;
    $193 = ($__np|0)==($__ne|0);
    $194 = $__np;
    $195 = $__nb;
    $196 = (($194) - ($195))|0;
    $197 = (($__ob) + ($196<<2)|0);
    $storemerge = $193 ? $192 : $197;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$110 = 0, $$139 = 0, $$byval_copy = 0, $$pre = 0, $$pre6 = 0, $$pre7 = 0, $$pre7$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 300|0;
 $__o = sp + 72|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,77173,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 L5: do {
  if ($15) {
   __THREW__ = 0;
   $16 = (invoke_i(469)|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($9) {
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(474,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    if (!($18)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $26 = (invoke_iiiii(474,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      $__nc$1 = $26;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $29 = HEAP32[$__nb>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(475);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break;
      }
      $$pre = HEAP32[$__nb>>2]|0;
      $33 = $$pre;
     } else {
      $33 = $29;
     }
     $34 = $33;
     $36 = $33;$62 = $34;$__nc$2 = $__nc$1;
     label = 16;
     break L5;
    }
   } while(0);
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$110 = $24;$$139 = $25;
  } else {
   $$pre6 = HEAP32[$__nb>>2]|0;
   $36 = $$pre6;$62 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $35 = (($36) + ($__nc$2)|0);
  $37 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($36,$35,$__iob)|0);
  $38 = ($36|0)==($__nar|0);
  do {
   if ($38) {
    $50 = $__nar;$59 = 0;$__ob$0 = $__o;
    label = 22;
   } else {
    $39 = $__nc$2 << 3;
    $40 = (_malloc($39)|0);
    $41 = ($40|0)==(0|0);
    if ($41) {
     __THREW__ = 0;
     invoke_v(475);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $72 = 0;
      label = 20;
      break;
     }
     $$pre7$pre = HEAP32[$__nb>>2]|0;
     $$pre7 = $$pre7$pre;
    } else {
     $$pre7 = $36;
    }
    $46 = $40;
    $50 = $$pre7;$59 = $46;$__ob$0 = $40;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $47 = (invoke_ii(468,($__iob|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $72 = $59;
     label = 20;
    } else {
     HEAP32[$0>>2] = $47;
     __THREW__ = 0;
     invoke_viiiiiii(481,($50|0),($37|0),($35|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
      $$0 = $65;$$02 = $66;$67 = $59;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
     $53 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $53;
     $54 = HEAP32[$__op>>2]|0;
     $55 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $56 = (invoke_iiiiiii(482,($$byval_copy|0),($__ob$0|0),($54|0),($55|0),($__iob|0),($__fl|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $72 = $59;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $56;
      $60 = ($59|0)==(0);
      if (!($60)) {
       $61 = $59;
       _free($61);
      }
      $63 = ($62|0)==(0);
      if (!($63)) {
       $64 = $62;
       _free($64);
      }
      STACKTOP = sp;return ($56|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $44 = ___cxa_find_matching_catch()|0;
   $45 = tempRet0;
   $$0 = $44;$$02 = $45;$67 = $72;
  }
  $68 = ($67|0)==(0);
  if (!($68)) {
   $69 = $67;
   _free($69);
  }
  $70 = ($62|0)==(0);
  if ($70) {
   $$110 = $$0;$$139 = $$02;
  } else {
   $71 = $62;
   _free($71);
   $$110 = $$0;$$139 = $$02;
  }
 }
 ___resumeException($$110|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 184|0;
 $__nar = sp + 164|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[77175>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[77175+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[77175+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[77175+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[77175+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[77175+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(465,($0|0),(49868|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3<<2)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17<<2)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i26 = 0, $$0$ph$be = 0, $$0$ph86 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$lcssa94 = 0, $$lcssa95 = 0, $$pre$i$i$i17 = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i21 = 0, $$pre$i2$i$i2139 = 0, $$pre$i2$i$i2140 = 0, $$pre$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i24 = 0, $isascii1$i5 = 0;
 var $or$cond84 = 0, $sext = 0, $tmp$i$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(465,($0|0),(49876|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $7 = ((($4)) + 8|0);
 $8 = ($__fmtb|0)==($__fmte|0);
 $9 = HEAP32[$__b>>2]|0;
 L4: do {
  if ($8) {
   $$pre$i$i$i8 = $9;
  } else {
   $$0$ph86 = $__fmtb;$10 = $9;
   L5: while(1) {
    $11 = ($10|0)==(0|0);
    $12 = $10;
    if ($11) {
     $23 = 0;$63 = $12;
    } else {
     $13 = ((($10)) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($10)) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$10>>2]|0;
      $19 = ((($18)) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (FUNCTION_TABLE_ii[$20 & 1023]($10)|0);
      $22 = ($21|0)==(-1);
      if ($22) {
       HEAP32[$__b>>2] = 0;
       $23 = 0;$63 = 0;
      } else {
       $23 = $10;$63 = $12;
      }
     } else {
      $23 = $10;$63 = $12;
     }
    }
    $24 = ($23|0)==(0|0);
    $25 = HEAP32[$__e>>2]|0;
    $26 = ($25|0)==(0|0);
    $27 = $25;
    do {
     if ($26) {
      $194 = $27;
      label = 12;
     } else {
      $28 = ((($25)) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ((($25)) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$25>>2]|0;
       $34 = ((($33)) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (FUNCTION_TABLE_ii[$35 & 1023]($25)|0);
       $37 = ($36|0)==(-1);
       if ($37) {
        HEAP32[$__e>>2] = 0;
        $194 = 0;
        label = 12;
        break;
       }
      }
      if ($24) {
       $195 = $25;$64 = $27;
      } else {
       $$lcssa = $23;
       label = 13;
       break L5;
      }
     }
    } while(0);
    if ((label|0) == 12) {
     label = 0;
     if ($24) {
      $$lcssa = $23;
      label = 13;
      break;
     } else {
      $195 = 0;$64 = $194;
     }
    }
    $40 = HEAP8[$$0$ph86>>0]|0;
    $41 = HEAP32[$4>>2]|0;
    $42 = ((($41)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($4,$40,0)|0);
    $45 = ($44<<24>>24)==(37);
    L21: do {
     if ($45) {
      $46 = ((($$0$ph86)) + 1|0);
      $47 = ($46|0)==($__fmte|0);
      if ($47) {
       $$lcssa94 = $23;
       label = 17;
       break L5;
      }
      $48 = HEAP8[$46>>0]|0;
      $49 = HEAP32[$4>>2]|0;
      $50 = ((($49)) + 36|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($4,$48,0)|0);
      switch ($52<<24>>24) {
      case 48: case 69:  {
       $53 = ((($$0$ph86)) + 2|0);
       $54 = ($53|0)==($__fmte|0);
       if ($54) {
        $$lcssa95 = $23;
        label = 20;
        break L5;
       }
       $55 = HEAP8[$53>>0]|0;
       $56 = HEAP32[$4>>2]|0;
       $57 = ((($56)) + 36|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = (FUNCTION_TABLE_iiii[$58 & 1023]($4,$55,0)|0);
       $67 = $46;$__cmd$0 = $59;$__opt$0 = $52;
       break;
      }
      default: {
       $67 = $$0$ph86;$__cmd$0 = $52;$__opt$0 = 0;
      }
      }
      $60 = HEAP32[$this>>2]|0;
      $61 = ((($60)) + 36|0);
      $62 = HEAP32[$61>>2]|0;
      HEAP32[$1>>2] = $63;
      HEAP32[$2>>2] = $64;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
      $65 = (FUNCTION_TABLE_iiiiiiiii[$62 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
      HEAP32[$__b>>2] = $65;
      $66 = ((($67)) + 2|0);
      $$0$ph$be = $66;
     } else {
      $71 = HEAP8[$$0$ph86>>0]|0;
      $isascii1$i = ($71<<24>>24)>(-1);
      if ($isascii1$i) {
       $72 = $71 << 24 >> 24;
       $73 = HEAP32[$7>>2]|0;
       $74 = (($73) + ($72<<1)|0);
       $75 = HEAP16[$74>>1]|0;
       $76 = $75 & 8192;
       $77 = ($76<<16>>16)==(0);
       if (!($77)) {
        $$0$pn = $$0$ph86;
        while(1) {
         $$2 = ((($$0$pn)) + 1|0);
         $78 = ($$2|0)==($__fmte|0);
         if ($78) {
          $$2$lcssa = $__fmte;
          break;
         }
         $79 = HEAP8[$$2>>0]|0;
         $isascii1$i5 = ($79<<24>>24)>(-1);
         if (!($isascii1$i5)) {
          $$2$lcssa = $$2;
          break;
         }
         $80 = $79 << 24 >> 24;
         $81 = (($73) + ($80<<1)|0);
         $82 = HEAP16[$81>>1]|0;
         $83 = $82 & 8192;
         $84 = ($83<<16>>16)==(0);
         if ($84) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn = $$2;
         }
        }
        $$pre$i$i$i17 = $23;$$pre$i2$i$i21 = $195;$98 = $195;
        while(1) {
         $85 = ($$pre$i$i$i17|0)==(0|0);
         if ($85) {
          $96 = 0;
         } else {
          $86 = ((($$pre$i$i$i17)) + 12|0);
          $87 = HEAP32[$86>>2]|0;
          $88 = ((($$pre$i$i$i17)) + 16|0);
          $89 = HEAP32[$88>>2]|0;
          $90 = ($87|0)==($89|0);
          if ($90) {
           $91 = HEAP32[$$pre$i$i$i17>>2]|0;
           $92 = ((($91)) + 36|0);
           $93 = HEAP32[$92>>2]|0;
           $94 = (FUNCTION_TABLE_ii[$93 & 1023]($$pre$i$i$i17)|0);
           $95 = ($94|0)==(-1);
           if ($95) {
            HEAP32[$__b>>2] = 0;
            $96 = 0;
           } else {
            $96 = $$pre$i$i$i17;
           }
          } else {
           $96 = $$pre$i$i$i17;
          }
         }
         $97 = ($96|0)==(0|0);
         $99 = ($98|0)==(0|0);
         do {
          if ($99) {
           $$pre$i2$i$i2140 = $$pre$i2$i$i21;
           label = 39;
          } else {
           $100 = ((($98)) + 12|0);
           $101 = HEAP32[$100>>2]|0;
           $102 = ((($98)) + 16|0);
           $103 = HEAP32[$102>>2]|0;
           $104 = ($101|0)==($103|0);
           if (!($104)) {
            if ($97) {
             $$pre$i2$i$i2139 = $$pre$i2$i$i21;$196 = $98;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L21;
            }
           }
           $105 = HEAP32[$98>>2]|0;
           $106 = ((($105)) + 36|0);
           $107 = HEAP32[$106>>2]|0;
           $108 = (FUNCTION_TABLE_ii[$107 & 1023]($98)|0);
           $109 = ($108|0)==(-1);
           if ($109) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i2140 = 0;
            label = 39;
            break;
           } else {
            $110 = ($$pre$i2$i$i21|0)==(0|0);
            $tmp$i$i23 = $97 ^ $110;
            if ($tmp$i$i23) {
             $$pre$i2$i$i2139 = $$pre$i2$i$i21;$196 = $$pre$i2$i$i21;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L21;
            }
           }
          }
         } while(0);
         if ((label|0) == 39) {
          label = 0;
          if ($97) {
           $$0$ph$be = $$2$lcssa;
           break L21;
          } else {
           $$pre$i2$i$i2139 = $$pre$i2$i$i2140;$196 = 0;
          }
         }
         $111 = ((($96)) + 12|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = ((($96)) + 16|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = ($112|0)==($114|0);
         if ($115) {
          $116 = HEAP32[$96>>2]|0;
          $117 = ((($116)) + 36|0);
          $118 = HEAP32[$117>>2]|0;
          $119 = (FUNCTION_TABLE_ii[$118 & 1023]($96)|0);
          $$0$i$i = $119;
         } else {
          $120 = HEAP8[$112>>0]|0;
          $121 = $120&255;
          $$0$i$i = $121;
         }
         $122 = $$0$i$i&255;
         $isascii1$i24 = ($122<<24>>24)>(-1);
         if (!($isascii1$i24)) {
          $$0$ph$be = $$2$lcssa;
          break L21;
         }
         $sext = $$0$i$i << 24;
         $123 = $sext >> 24;
         $124 = HEAP32[$7>>2]|0;
         $125 = (($124) + ($123<<1)|0);
         $126 = HEAP16[$125>>1]|0;
         $127 = $126 & 8192;
         $128 = ($127<<16>>16)==(0);
         if ($128) {
          $$0$ph$be = $$2$lcssa;
          break L21;
         }
         $129 = HEAP32[$111>>2]|0;
         $130 = HEAP32[$113>>2]|0;
         $131 = ($129|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$96>>2]|0;
          $133 = ((($132)) + 40|0);
          $134 = HEAP32[$133>>2]|0;
          (FUNCTION_TABLE_ii[$134 & 1023]($96)|0);
          $$pre$i$i$i17 = $96;$$pre$i2$i$i21 = $$pre$i2$i$i2139;$98 = $196;
          continue;
         } else {
          $135 = ((($129)) + 1|0);
          HEAP32[$111>>2] = $135;
          $$pre$i$i$i17 = $96;$$pre$i2$i$i21 = $$pre$i2$i$i2139;$98 = $196;
          continue;
         }
        }
       }
      }
      $136 = ((($23)) + 12|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($23)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($137|0)==($139|0);
      if ($140) {
       $141 = HEAP32[$23>>2]|0;
       $142 = ((($141)) + 36|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (FUNCTION_TABLE_ii[$143 & 1023]($23)|0);
       $$0$i$i26 = $144;
      } else {
       $145 = HEAP8[$137>>0]|0;
       $146 = $145&255;
       $$0$i$i26 = $146;
      }
      $147 = $$0$i$i26&255;
      $148 = HEAP32[$4>>2]|0;
      $149 = ((($148)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = (FUNCTION_TABLE_iii[$150 & 1023]($4,$147)|0);
      $152 = HEAP8[$$0$ph86>>0]|0;
      $153 = HEAP32[$4>>2]|0;
      $154 = ((($153)) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (FUNCTION_TABLE_iii[$155 & 1023]($4,$152)|0);
      $157 = ($151<<24>>24)==($156<<24>>24);
      if (!($157)) {
       label = 57;
       break L5;
      }
      $158 = HEAP32[$136>>2]|0;
      $159 = HEAP32[$138>>2]|0;
      $160 = ($158|0)==($159|0);
      if ($160) {
       $161 = HEAP32[$23>>2]|0;
       $162 = ((($161)) + 40|0);
       $163 = HEAP32[$162>>2]|0;
       (FUNCTION_TABLE_ii[$163 & 1023]($23)|0);
      } else {
       $164 = ((($158)) + 1|0);
       HEAP32[$136>>2] = $164;
      }
      $165 = ((($$0$ph86)) + 1|0);
      $$0$ph$be = $165;
     }
    } while(0);
    $$pre$pre = HEAP32[$__err>>2]|0;
    $68 = ($$0$ph$be|0)!=($__fmte|0);
    $69 = ($$pre$pre|0)==(0);
    $or$cond84 = $68 & $69;
    $70 = HEAP32[$__b>>2]|0;
    if ($or$cond84) {
     $$0$ph86 = $$0$ph$be;$10 = $70;
    } else {
     $$pre$i$i$i8 = $70;
     break L4;
    }
   }
   if ((label|0) == 13) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i8 = $$lcssa;
    break;
   }
   else if ((label|0) == 17) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i8 = $$lcssa94;
    break;
   }
   else if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i8 = $$lcssa95;
    break;
   }
   else if ((label|0) == 57) {
    HEAP32[$__err>>2] = 4;
    $166 = HEAP32[$__b>>2]|0;
    $$pre$i$i$i8 = $166;
    break;
   }
  }
 } while(0);
 $167 = ($$pre$i$i$i8|0)==(0|0);
 if ($167) {
  $178 = 0;
 } else {
  $168 = ((($$pre$i$i$i8)) + 12|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ((($$pre$i$i$i8)) + 16|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ($169|0)==($171|0);
  if ($172) {
   $173 = HEAP32[$$pre$i$i$i8>>2]|0;
   $174 = ((($173)) + 36|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (FUNCTION_TABLE_ii[$175 & 1023]($$pre$i$i$i8)|0);
   $177 = ($176|0)==(-1);
   if ($177) {
    HEAP32[$__b>>2] = 0;
    $178 = 0;
   } else {
    $178 = $$pre$i$i$i8;
   }
  } else {
   $178 = $$pre$i$i$i8;
  }
 }
 $179 = ($178|0)==(0|0);
 $180 = HEAP32[$__e>>2]|0;
 $181 = ($180|0)==(0|0);
 do {
  if ($181) {
   label = 67;
  } else {
   $182 = ((($180)) + 12|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = ((($180)) + 16|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = ($183|0)==($185|0);
   if ($186) {
    $187 = HEAP32[$180>>2]|0;
    $188 = ((($187)) + 36|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (FUNCTION_TABLE_ii[$189 & 1023]($180)|0);
    $191 = ($190|0)==(-1);
    if ($191) {
     HEAP32[$__e>>2] = 0;
     label = 67;
     break;
    }
   }
   if (!($179)) {
    label = 68;
   }
  }
 } while(0);
 if ((label|0) == 67) {
  if ($179) {
   label = 68;
  }
 }
 if ((label|0) == 68) {
  $192 = HEAP32[$__err>>2]|0;
  $193 = $192 | 2;
  HEAP32[$__err>>2] = $193;
 }
 STACKTOP = sp;return ($178|0);
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,77181,(77189))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 1|0);
 $15 = $11 ? $14 : $13;
 $16 = ((($6)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $9&255;
 $19 = $18 >>> 1;
 $20 = $11 ? $19 : $17;
 $21 = (($15) + ($20)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $22 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$15,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(465,($0|0),(49876|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(465,($0|0),(49876|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(465,($0|0),(49876|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(465,($1|0),(49876|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$42,$__b,$$byval_copy1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 1|0);
   $57 = $53 ? $56 : $55;
   $58 = ((($48)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $51&255;
   $61 = $60 >>> 1;
   $62 = $53 ? $61 : $59;
   $63 = (($57) + ($62)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
   $64 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$57,$63)|0);
   HEAP32[$__b>>2] = $64;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $65 = ((($__tm)) + 12|0);
   $66 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $66;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$65,$__b,$$byval_copy4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $67 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $67;
   $68 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $68;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;
   $69 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,77189,(77197))|0);
   HEAP32[$__b>>2] = $69;
   label = 28;
   break;
  }
  case 70:  {
   $70 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $70;
   $71 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $71;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$10>>2]|0;
   $72 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,77197,(77205))|0);
   HEAP32[$__b>>2] = $72;
   label = 28;
   break;
  }
  case 72:  {
   $73 = ((($__tm)) + 8|0);
   $74 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $74;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$73,$__b,$$byval_copy9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $75 = ((($__tm)) + 8|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $76;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$75,$__b,$$byval_copy10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $77 = ((($__tm)) + 28|0);
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $78;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$77,$__b,$$byval_copy11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $79 = ((($__tm)) + 16|0);
   $80 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $80;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$79,$__b,$$byval_copy12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $81 = ((($__tm)) + 4|0);
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $82;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$81,$__b,$$byval_copy13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $83 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $83;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $84 = ((($__tm)) + 8|0);
   $85 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $85;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$84,$__b,$$byval_copy15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $86 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $86;
   $87 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $87;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$19>>2]|0;
   $88 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,77205,(77216))|0);
   HEAP32[$__b>>2] = $88;
   label = 28;
   break;
  }
  case 82:  {
   $89 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $89;
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $90;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$21>>2]|0;
   $91 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,77216,(77221))|0);
   HEAP32[$__b>>2] = $91;
   label = 28;
   break;
  }
  case 83:  {
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $92;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $93 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $93;
   $94 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $94;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$24>>2]|0;
   $95 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,77221,(77229))|0);
   HEAP32[$__b>>2] = $95;
   label = 28;
   break;
  }
  case 119:  {
   $96 = ((($__tm)) + 24|0);
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $97;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$96,$__b,$$byval_copy23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $98 = HEAP32[$this>>2]|0;
   $99 = ((($98)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $101;
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$27>>2]|0;
   $103 = (FUNCTION_TABLE_iiiiiii[$100 & 511]($this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $103;
   break;
  }
  case 88:  {
   $104 = ((($this)) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 24|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_ii[$107 & 1023]($104)|0);
   $109 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $109;
   $110 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $110;
   $111 = HEAP8[$108>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   $114 = ((($108)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((($108)) + 1|0);
   $117 = $113 ? $116 : $115;
   $118 = ((($108)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $111&255;
   $121 = $120 >>> 1;
   $122 = $113 ? $121 : $119;
   $123 = (($117) + ($122)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$29>>2]|0;
   $124 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$117,$123)|0);
   HEAP32[$__b>>2] = $124;
   label = 28;
   break;
  }
  case 121:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $126;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$125,$__b,$$byval_copy28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $127 = ((($__tm)) + 20|0);
   $128 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $128;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$127,$__b,$$byval_copy29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $129 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $129;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $130 = HEAP32[$__err>>2]|0;
   $131 = $130 | 4;
   HEAP32[$__err>>2] = $131;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $132 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $132;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__ct)) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $13 = 0;
   } else {
    $3 = ((($1)) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ((($1)) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = ((($8)) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $13 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $13 = $$pre$i$i$i;
      break;
     }
    } else {
     $13 = $1;
    }
   }
  } while(0);
  $14 = ($13|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = ((($15)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($15)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = ((($22)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($14) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($27)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($46)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = ((($52)) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = ((($48)) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $68 = 0;
  } else {
   $58 = ((($56)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($56)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = ((($63)) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $68 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $68 = $$pre$i$i$i2;
     break;
    }
   } else {
    $68 = $56;
   }
  }
 } while(0);
 $69 = ($68|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = ((($$pre$i2$i$i6)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($$pre$i2$i$i6)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = ((($76)) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if (!($69)) {
    label = 33;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($69) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $81 = HEAP32[$__err>>2]|0;
  $82 = $81 | 2;
  HEAP32[$__err>>2] = $82;
 }
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $$pre$i2$i$i611 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $41 = HEAP32[$__ct>>2]|0;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if (!($45)) {
    $46 = HEAP32[$__err>>2]|0;
    $47 = $46 | 4;
    HEAP32[$__err>>2] = $47;
    break;
   }
   $48 = HEAP32[$__b>>2]|0;
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($48)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $55 = HEAP32[$48>>2]|0;
    $56 = ((($55)) + 40|0);
    $57 = HEAP32[$56>>2]|0;
    (FUNCTION_TABLE_ii[$57 & 1023]($48)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $58 = ($$pre|0)==(0|0);
    if ($58) {
     $70 = 0;
    } else {
     $60 = $$pre;
     label = 21;
    }
   } else {
    $54 = ((($50)) + 1|0);
    HEAP32[$49>>2] = $54;
    $60 = $48;
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     $59 = ((($60)) + 12|0);
     $61 = HEAP32[$59>>2]|0;
     $62 = ((($60)) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($61|0)==($63|0);
     if ($64) {
      $65 = HEAP32[$60>>2]|0;
      $66 = ((($65)) + 36|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_ii[$67 & 1023]($60)|0);
      $69 = ($68|0)==(-1);
      if ($69) {
       HEAP32[$__b>>2] = 0;
       $70 = 0;
       break;
      } else {
       $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
       $70 = $$pre$i$i$i2;
       break;
      }
     } else {
      $70 = $60;
     }
    }
   } while(0);
   $71 = ($70|0)==(0|0);
   $72 = ($$pre$i2$i$i611|0)==(0|0);
   do {
    if ($72) {
     label = 30;
    } else {
     $73 = ((($$pre$i2$i$i611)) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ((($$pre$i2$i$i611)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
      $79 = ((($78)) + 36|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
      $82 = ($81|0)==(-1);
      if ($82) {
       HEAP32[$__e>>2] = 0;
       label = 30;
       break;
      }
     }
     if ($71) {
      break L16;
     }
    }
   } while(0);
   if ((label|0) == 30) {
    if (!($71)) {
     break;
    }
   }
   $83 = HEAP32[$__err>>2]|0;
   $84 = $83 | 2;
   HEAP32[$__err>>2] = $84;
  }
 } while(0);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i20 = 0, $$0$i$i$i$i5 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i11 = 0, $$0$i$i1$i$i26 = 0, $$0$i$i17 = 0, $$0$ph$be = 0, $$0$ph89 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$ph = 0, $$pre$i$i$i22 = 0;
 var $$pre$i$i$i7 = 0, $$pre$i3$i$i13 = 0, $$pre$i3$i$i1344 = 0, $$pre$i3$i$i1345 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $or$cond87 = 0, $phitmp$i4$i$i14 = 0;
 var $tmp$i$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(465,($0|0),(49868|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($37|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $7 = ($__fmtb|0)==($__fmte|0);
 $8 = HEAP32[$__b>>2]|0;
 L4: do {
  if ($7) {
   $$pre$i$i$i22 = $8;
  } else {
   $$0$ph89 = $__fmtb;$9 = $8;
   L5: while(1) {
    $10 = ($9|0)==(0|0);
    $11 = $9;
    if ($10) {
     $130 = 0;$187 = 1;$62 = $11;
    } else {
     $12 = ((($9)) + 12|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($9)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($13|0)==($15|0);
     if ($16) {
      $17 = HEAP32[$9>>2]|0;
      $18 = ((($17)) + 36|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (FUNCTION_TABLE_ii[$19 & 1023]($9)|0);
      $$0$i$i$i$i = $20;
     } else {
      $21 = HEAP32[$13>>2]|0;
      $$0$i$i$i$i = $21;
     }
     $22 = ($$0$i$i$i$i|0)==(-1);
     if ($22) {
      HEAP32[$__b>>2] = 0;
      $130 = 0;$187 = 1;$62 = 0;
     } else {
      $130 = $9;$187 = 0;$62 = $11;
     }
    }
    $23 = HEAP32[$__e>>2]|0;
    $24 = ($23|0)==(0|0);
    $25 = $23;
    do {
     if ($24) {
      $$ph = $25;
      label = 15;
     } else {
      $26 = ((($23)) + 12|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ((($23)) + 16|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($27|0)==($29|0);
      if ($30) {
       $31 = HEAP32[$23>>2]|0;
       $32 = ((($31)) + 36|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = (FUNCTION_TABLE_ii[$33 & 1023]($23)|0);
       $$0$i$i1$i$i = $34;
      } else {
       $35 = HEAP32[$27>>2]|0;
       $$0$i$i1$i$i = $35;
      }
      $36 = ($$0$i$i1$i$i|0)==(-1);
      if ($36) {
       HEAP32[$__e>>2] = 0;
       $$ph = 0;
       label = 15;
       break;
      } else {
       if ($187) {
        $188 = $23;$63 = $25;
        break;
       } else {
        $$lcssa = $130;
        label = 17;
        break L5;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($187) {
      $$lcssa = $130;
      label = 17;
      break;
     } else {
      $188 = 0;$63 = $$ph;
     }
    }
    $39 = HEAP32[$$0$ph89>>2]|0;
    $40 = HEAP32[$4>>2]|0;
    $41 = ((($40)) + 52|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_iiii[$42 & 1023]($4,$39,0)|0);
    $44 = ($43<<24>>24)==(37);
    L27: do {
     if ($44) {
      $45 = ((($$0$ph89)) + 4|0);
      $46 = ($45|0)==($__fmte|0);
      if ($46) {
       $$lcssa97 = $130;
       label = 21;
       break L5;
      }
      $47 = HEAP32[$45>>2]|0;
      $48 = HEAP32[$4>>2]|0;
      $49 = ((($48)) + 52|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (FUNCTION_TABLE_iiii[$50 & 1023]($4,$47,0)|0);
      switch ($51<<24>>24) {
      case 48: case 69:  {
       $52 = ((($$0$ph89)) + 8|0);
       $53 = ($52|0)==($__fmte|0);
       if ($53) {
        $$lcssa98 = $130;
        label = 24;
        break L5;
       }
       $54 = HEAP32[$52>>2]|0;
       $55 = HEAP32[$4>>2]|0;
       $56 = ((($55)) + 52|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (FUNCTION_TABLE_iiii[$57 & 1023]($4,$54,0)|0);
       $66 = $45;$__cmd$0 = $58;$__opt$0 = $51;
       break;
      }
      default: {
       $66 = $$0$ph89;$__cmd$0 = $51;$__opt$0 = 0;
      }
      }
      $59 = HEAP32[$this>>2]|0;
      $60 = ((($59)) + 36|0);
      $61 = HEAP32[$60>>2]|0;
      HEAP32[$1>>2] = $62;
      HEAP32[$2>>2] = $63;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
      $64 = (FUNCTION_TABLE_iiiiiiiii[$61 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
      HEAP32[$__b>>2] = $64;
      $65 = ((($66)) + 8|0);
      $$0$ph$be = $65;
     } else {
      $70 = HEAP32[$$0$ph89>>2]|0;
      $71 = HEAP32[$4>>2]|0;
      $72 = ((($71)) + 12|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (FUNCTION_TABLE_iiii[$73 & 1023]($4,8192,$70)|0);
      if ($74) {
       $$0$pn = $$0$ph89;
      } else {
       $129 = ((($130)) + 12|0);
       $131 = HEAP32[$129>>2]|0;
       $132 = ((($130)) + 16|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($131|0)==($133|0);
       if ($134) {
        $135 = HEAP32[$130>>2]|0;
        $136 = ((($135)) + 36|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = (FUNCTION_TABLE_ii[$137 & 1023]($130)|0);
        $$0$i$i17 = $138;
       } else {
        $139 = HEAP32[$131>>2]|0;
        $$0$i$i17 = $139;
       }
       $140 = HEAP32[$4>>2]|0;
       $141 = ((($140)) + 28|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = (FUNCTION_TABLE_iii[$142 & 1023]($4,$$0$i$i17)|0);
       $144 = HEAP32[$$0$ph89>>2]|0;
       $145 = HEAP32[$4>>2]|0;
       $146 = ((($145)) + 28|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = (FUNCTION_TABLE_iii[$147 & 1023]($4,$144)|0);
       $149 = ($143|0)==($148|0);
       if (!($149)) {
        label = 61;
        break L5;
       }
       $150 = HEAP32[$129>>2]|0;
       $151 = HEAP32[$132>>2]|0;
       $152 = ($150|0)==($151|0);
       if ($152) {
        $153 = HEAP32[$130>>2]|0;
        $154 = ((($153)) + 40|0);
        $155 = HEAP32[$154>>2]|0;
        (FUNCTION_TABLE_ii[$155 & 1023]($130)|0);
       } else {
        $156 = ((($150)) + 4|0);
        HEAP32[$129>>2] = $156;
       }
       $157 = ((($$0$ph89)) + 4|0);
       $$0$ph$be = $157;
       break;
      }
      while(1) {
       $$2 = ((($$0$pn)) + 4|0);
       $75 = ($$2|0)==($__fmte|0);
       if ($75) {
        $$2$lcssa = $__fmte;
        break;
       }
       $76 = HEAP32[$$2>>2]|0;
       $77 = HEAP32[$4>>2]|0;
       $78 = ((($77)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = (FUNCTION_TABLE_iiii[$79 & 1023]($4,8192,$76)|0);
       if ($80) {
        $$0$pn = $$2;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i7 = $130;$$pre$i3$i$i13 = $188;$93 = $188;
      while(1) {
       $81 = ($$pre$i$i$i7|0)==(0|0);
       if ($81) {
        $106 = 1;$108 = 0;
       } else {
        $82 = ((($$pre$i$i$i7)) + 12|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ((($$pre$i$i$i7)) + 16|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ($83|0)==($85|0);
        if ($86) {
         $87 = HEAP32[$$pre$i$i$i7>>2]|0;
         $88 = ((($87)) + 36|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = (FUNCTION_TABLE_ii[$89 & 1023]($$pre$i$i$i7)|0);
         $$0$i$i$i$i5 = $90;
        } else {
         $91 = HEAP32[$83>>2]|0;
         $$0$i$i$i$i5 = $91;
        }
        $92 = ($$0$i$i$i$i5|0)==(-1);
        if ($92) {
         HEAP32[$__b>>2] = 0;
         $106 = 1;$108 = 0;
        } else {
         $106 = 0;$108 = $$pre$i$i$i7;
        }
       }
       $94 = ($93|0)==(0|0);
       do {
        if ($94) {
         $$pre$i3$i$i1345 = $$pre$i3$i$i13;
         label = 44;
        } else {
         $95 = ((($93)) + 12|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ((($93)) + 16|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = ($96|0)==($98|0);
         if ($99) {
          $100 = HEAP32[$93>>2]|0;
          $101 = ((($100)) + 36|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = (FUNCTION_TABLE_ii[$102 & 1023]($93)|0);
          $$0$i$i1$i$i11 = $103;
         } else {
          $104 = HEAP32[$96>>2]|0;
          $$0$i$i1$i$i11 = $104;
         }
         $105 = ($$0$i$i1$i$i11|0)==(-1);
         if ($105) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i1345 = 0;
          label = 44;
          break;
         } else {
          $phitmp$i4$i$i14 = ($$pre$i3$i$i13|0)==(0|0);
          $tmp$i$i16 = $106 ^ $phitmp$i4$i$i14;
          if ($tmp$i$i16) {
           $$pre$i3$i$i1344 = $$pre$i3$i$i13;$189 = $$pre$i3$i$i13;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L27;
          }
         }
        }
       } while(0);
       if ((label|0) == 44) {
        label = 0;
        if ($106) {
         $$0$ph$be = $$2$lcssa;
         break L27;
        } else {
         $$pre$i3$i$i1344 = $$pre$i3$i$i1345;$189 = 0;
        }
       }
       $107 = ((($108)) + 12|0);
       $109 = HEAP32[$107>>2]|0;
       $110 = ((($108)) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($109|0)==($111|0);
       if ($112) {
        $113 = HEAP32[$108>>2]|0;
        $114 = ((($113)) + 36|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (FUNCTION_TABLE_ii[$115 & 1023]($108)|0);
        $$0$i$i = $116;
       } else {
        $117 = HEAP32[$109>>2]|0;
        $$0$i$i = $117;
       }
       $118 = HEAP32[$4>>2]|0;
       $119 = ((($118)) + 12|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = (FUNCTION_TABLE_iiii[$120 & 1023]($4,8192,$$0$i$i)|0);
       if (!($121)) {
        $$0$ph$be = $$2$lcssa;
        break L27;
       }
       $122 = HEAP32[$107>>2]|0;
       $123 = HEAP32[$110>>2]|0;
       $124 = ($122|0)==($123|0);
       if ($124) {
        $125 = HEAP32[$108>>2]|0;
        $126 = ((($125)) + 40|0);
        $127 = HEAP32[$126>>2]|0;
        (FUNCTION_TABLE_ii[$127 & 1023]($108)|0);
        $$pre$i$i$i7 = $108;$$pre$i3$i$i13 = $$pre$i3$i$i1344;$93 = $189;
        continue;
       } else {
        $128 = ((($122)) + 4|0);
        HEAP32[$107>>2] = $128;
        $$pre$i$i$i7 = $108;$$pre$i3$i$i13 = $$pre$i3$i$i1344;$93 = $189;
        continue;
       }
      }
     }
    } while(0);
    $$pre$pre = HEAP32[$__err>>2]|0;
    $67 = ($$0$ph$be|0)!=($__fmte|0);
    $68 = ($$pre$pre|0)==(0);
    $or$cond87 = $67 & $68;
    $69 = HEAP32[$__b>>2]|0;
    if ($or$cond87) {
     $$0$ph89 = $$0$ph$be;$9 = $69;
    } else {
     $$pre$i$i$i22 = $69;
     break L4;
    }
   }
   if ((label|0) == 17) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i22 = $$lcssa;
    break;
   }
   else if ((label|0) == 21) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i22 = $$lcssa97;
    break;
   }
   else if ((label|0) == 24) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i22 = $$lcssa98;
    break;
   }
   else if ((label|0) == 61) {
    HEAP32[$__err>>2] = 4;
    $158 = HEAP32[$__b>>2]|0;
    $$pre$i$i$i22 = $158;
    break;
   }
  }
 } while(0);
 $159 = ($$pre$i$i$i22|0)==(0|0);
 if ($159) {
  $186 = 0;$190 = 1;
 } else {
  $160 = ((($$pre$i$i$i22)) + 12|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ((($$pre$i$i$i22)) + 16|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ($161|0)==($163|0);
  if ($164) {
   $165 = HEAP32[$$pre$i$i$i22>>2]|0;
   $166 = ((($165)) + 36|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (FUNCTION_TABLE_ii[$167 & 1023]($$pre$i$i$i22)|0);
   $$0$i$i$i$i20 = $168;
  } else {
   $169 = HEAP32[$161>>2]|0;
   $$0$i$i$i$i20 = $169;
  }
  $170 = ($$0$i$i$i$i20|0)==(-1);
  if ($170) {
   HEAP32[$__b>>2] = 0;
   $186 = 0;$190 = 1;
  } else {
   $186 = $$pre$i$i$i22;$190 = 0;
  }
 }
 $171 = HEAP32[$__e>>2]|0;
 $172 = ($171|0)==(0|0);
 do {
  if ($172) {
   label = 74;
  } else {
   $173 = ((($171)) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ((($171)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($174|0)==($176|0);
   if ($177) {
    $178 = HEAP32[$171>>2]|0;
    $179 = ((($178)) + 36|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (FUNCTION_TABLE_ii[$180 & 1023]($171)|0);
    $$0$i$i1$i$i26 = $181;
   } else {
    $182 = HEAP32[$174>>2]|0;
    $$0$i$i1$i$i26 = $182;
   }
   $183 = ($$0$i$i1$i$i26|0)==(-1);
   if ($183) {
    HEAP32[$__e>>2] = 0;
    label = 74;
    break;
   } else {
    if ($190) {
     break;
    } else {
     label = 76;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 74) {
  if ($190) {
   label = 76;
  }
 }
 if ((label|0) == 76) {
  $184 = HEAP32[$__err>>2]|0;
  $185 = $184 | 2;
  HEAP32[$__err>>2] = $185;
 }
 STACKTOP = sp;return ($186|0);
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,50444,(50476))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 4|0);
 $15 = $11 ? $14 : $13;
 $16 = HEAP32[$14>>2]|0;
 $17 = $9&255;
 $18 = $17 >>> 1;
 $19 = $11 ? $18 : $16;
 $20 = (($15) + ($19<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $21 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$15,$20)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(465,($0|0),(49868|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(465,($0|0),(49868|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(465,($0|0),(49868|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(465,($1|0),(49868|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$42,$__b,$$byval_copy1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 4|0);
   $57 = $53 ? $56 : $55;
   $58 = HEAP32[$56>>2]|0;
   $59 = $51&255;
   $60 = $59 >>> 1;
   $61 = $53 ? $60 : $58;
   $62 = (($57) + ($61<<2)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
   $63 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$57,$62)|0);
   HEAP32[$__b>>2] = $63;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $64 = ((($__tm)) + 12|0);
   $65 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $65;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$64,$__b,$$byval_copy4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $66 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $66;
   $67 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $67;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;
   $68 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,50476,(50508))|0);
   HEAP32[$__b>>2] = $68;
   label = 28;
   break;
  }
  case 70:  {
   $69 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $69;
   $70 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $70;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$10>>2]|0;
   $71 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,50508,(50540))|0);
   HEAP32[$__b>>2] = $71;
   label = 28;
   break;
  }
  case 72:  {
   $72 = ((($__tm)) + 8|0);
   $73 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $73;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$72,$__b,$$byval_copy9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $74 = ((($__tm)) + 8|0);
   $75 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $75;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$74,$__b,$$byval_copy10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $76 = ((($__tm)) + 28|0);
   $77 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $77;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$76,$__b,$$byval_copy11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $78 = ((($__tm)) + 16|0);
   $79 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $79;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$78,$__b,$$byval_copy12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $80 = ((($__tm)) + 4|0);
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $81;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$80,$__b,$$byval_copy13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $82;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $83 = ((($__tm)) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $84;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$83,$__b,$$byval_copy15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $85 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $85;
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $86;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$19>>2]|0;
   $87 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,50540,(50584))|0);
   HEAP32[$__b>>2] = $87;
   label = 28;
   break;
  }
  case 82:  {
   $88 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $88;
   $89 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $89;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$21>>2]|0;
   $90 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,50584,(50604))|0);
   HEAP32[$__b>>2] = $90;
   label = 28;
   break;
  }
  case 83:  {
   $91 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $91;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $92 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $92;
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $93;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$24>>2]|0;
   $94 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,50604,(50636))|0);
   HEAP32[$__b>>2] = $94;
   label = 28;
   break;
  }
  case 119:  {
   $95 = ((($__tm)) + 24|0);
   $96 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $96;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$95,$__b,$$byval_copy23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $97 = HEAP32[$this>>2]|0;
   $98 = ((($97)) + 20|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $100;
   $101 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $101;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$27>>2]|0;
   $102 = (FUNCTION_TABLE_iiiiiii[$99 & 511]($this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $102;
   break;
  }
  case 88:  {
   $103 = ((($this)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_ii[$106 & 1023]($103)|0);
   $108 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $108;
   $109 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $109;
   $110 = HEAP8[$107>>0]|0;
   $111 = $110 & 1;
   $112 = ($111<<24>>24)==(0);
   $113 = ((($107)) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ((($107)) + 4|0);
   $116 = $112 ? $115 : $114;
   $117 = HEAP32[$115>>2]|0;
   $118 = $110&255;
   $119 = $118 >>> 1;
   $120 = $112 ? $119 : $117;
   $121 = (($116) + ($120<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$29>>2]|0;
   $122 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$116,$121)|0);
   HEAP32[$__b>>2] = $122;
   label = 28;
   break;
  }
  case 121:  {
   $123 = ((($__tm)) + 20|0);
   $124 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $124;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$123,$__b,$$byval_copy28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $126;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$125,$__b,$$byval_copy29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $127 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $127;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $128 = HEAP32[$__err>>2]|0;
   $129 = $128 | 4;
   HEAP32[$__err>>2] = $129;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $130 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $130;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = ((($0)) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ((($0)) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = ((($7)) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = ((($13)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($13)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = ((($20)) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($26)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = ((($32)) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($41)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = ((($47)) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
   continue;
  } else {
   $50 = ((($43)) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = ((($51)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($51)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = ((($58)) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = ((($$pre$i3$i$i9)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($$pre$i3$i$i9)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = ((($70)) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   } else {
    if ($80) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($80) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $76 = HEAP32[$__err>>2]|0;
  $77 = $76 | 2;
  HEAP32[$__err>>2] = $77;
 }
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 52|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
   $43 = ($42<<24>>24)==(37);
   if (!($43)) {
    $44 = HEAP32[$__err>>2]|0;
    $45 = $44 | 4;
    HEAP32[$__err>>2] = $45;
    break;
   }
   $46 = HEAP32[$__b>>2]|0;
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($46)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $53 = HEAP32[$46>>2]|0;
    $54 = ((($53)) + 40|0);
    $55 = HEAP32[$54>>2]|0;
    (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $56 = ($$pre|0)==(0|0);
    if ($56) {
     $84 = 1;
    } else {
     $58 = $$pre;
     label = 25;
    }
   } else {
    $52 = ((($48)) + 4|0);
    HEAP32[$47>>2] = $52;
    $58 = $46;
    label = 25;
   }
   do {
    if ((label|0) == 25) {
     $57 = ((($58)) + 12|0);
     $59 = HEAP32[$57>>2]|0;
     $60 = ((($58)) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59|0)==($61|0);
     if ($62) {
      $63 = HEAP32[$58>>2]|0;
      $64 = ((($63)) + 36|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 1023]($58)|0);
      $$0$i$i$i$i1 = $66;
     } else {
      $67 = HEAP32[$59>>2]|0;
      $$0$i$i$i$i1 = $67;
     }
     $68 = ($$0$i$i$i$i1|0)==(-1);
     if ($68) {
      HEAP32[$__b>>2] = 0;
      $84 = 1;
      break;
     } else {
      $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
      $84 = $phitmp$i$i$i4;
      break;
     }
    }
   } while(0);
   $69 = ($$pre$i3$i$i915|0)==(0|0);
   do {
    if ($69) {
     label = 37;
    } else {
     $70 = ((($$pre$i3$i$i915)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($$pre$i3$i$i915)) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
      $76 = ((($75)) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
      $$0$i$i1$i$i7 = $78;
     } else {
      $79 = HEAP32[$71>>2]|0;
      $$0$i$i1$i$i7 = $79;
     }
     $80 = ($$0$i$i1$i$i7|0)==(-1);
     if ($80) {
      HEAP32[$__e>>2] = 0;
      label = 37;
      break;
     } else {
      if ($84) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 37) {
    if (!($84)) {
     break;
    }
   }
   $81 = HEAP32[$__err>>2]|0;
   $82 = $81 | 2;
   HEAP32[$__err>>2] = $82;
  }
 } while(0);
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(469)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = ($0|0)==($1|0);
   if (!($4)) {
    $5 = HEAP32[$this>>2]|0;
    __THREW__ = 0;
    invoke_vi(483,($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
   }
   return;
  }
 } while(0);
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i2 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = $5;
 $7 = ($__nar|0)==($4|0);
 if ($7) {
  $$lcssa = $6;
 } else {
  $$0$i$i2 = $__nar;$9 = $6;
  while(1) {
   $8 = HEAP8[$$0$i$i2>>0]|0;
   $10 = ($9|0)==(0|0);
   do {
    if ($10) {
     $25 = 0;
    } else {
     $11 = ((($9)) + 24|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($9)) + 28|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($12|0)==($14|0);
     if ($15) {
      $17 = HEAP32[$9>>2]|0;
      $18 = ((($17)) + 52|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = $8&255;
      $21 = (FUNCTION_TABLE_iii[$19 & 1023]($9,$20)|0);
      $22 = ($21|0)==(-1);
      $$$i = $22 ? 0 : $9;
      $25 = $$$i;
      break;
     } else {
      $16 = ((($12)) + 1|0);
      HEAP32[$11>>2] = $16;
      HEAP8[$12>>0] = $8;
      $25 = $9;
      break;
     }
    }
   } while(0);
   $23 = ((($$0$i$i2)) + 1|0);
   $24 = ($23|0)==($4|0);
   if ($24) {
    $$lcssa = $25;
    break;
   } else {
    $$0$i$i2 = $23;$9 = $25;
   }
  }
 }
 STACKTOP = sp;return ($$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = ((($fmt)) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = ((($fmt)) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = ((($fmt)) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$0$i$i2 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = ((($__nar)) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = $5;
 $7 = ($__nar|0)==($4|0);
 if ($7) {
  $$lcssa = $6;
 } else {
  $$0$i$i2 = $__nar;$9 = $6;
  while(1) {
   $8 = HEAP32[$$0$i$i2>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $24 = 0;
   } else {
    $11 = ((($9)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($9)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12|0)==($14|0);
    if ($15) {
     $16 = HEAP32[$9>>2]|0;
     $17 = ((($16)) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (FUNCTION_TABLE_iii[$18 & 1023]($9,$8)|0);
     $$0$i$i$i$i = $19;
    } else {
     $20 = ((($12)) + 4|0);
     HEAP32[$11>>2] = $20;
     HEAP32[$12>>2] = $8;
     $$0$i$i$i$i = $8;
    }
    $21 = ($$0$i$i$i$i|0)==(-1);
    $$$i = $21 ? 0 : $9;
    $24 = $$$i;
   }
   $22 = ((($$0$i$i2)) + 4|0);
   $23 = ($22|0)==($4|0);
   if ($23) {
    $$lcssa = $24;
    break;
   } else {
    $$0$i$i2 = $22;$9 = $24;
   }
  }
 }
 STACKTOP = sp;return ($$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $5;
 $7 = $__wb;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this>>2]|0;
 $11 = (_uselocale($10)|0);
 __THREW__ = 0;
 $12 = (invoke_iiiii(484,($__wb|0),($__nb|0),($9|0),($mb|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $22 = ($11|0)==(0|0);
  if (!($22)) {
   __THREW__ = 0;
   (invoke_ii(485,($11|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $25 = ___cxa_find_matching_catch(0|0)|0;
    $26 = tempRet0;
    ___clang_call_terminate($25);
    // unreachable;
   }
  }
  ___resumeException($20|0);
  // unreachable;
 }
 $15 = ($11|0)==(0|0);
 if (!($15)) {
  __THREW__ = 0;
  (invoke_ii(485,($11|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
 }
 $27 = ($12|0)==(-1);
 if ($27) {
  __ZNSt3__121__throw_runtime_errorEPKc(77229);
  // unreachable;
 } else {
  $28 = (($__wb) + ($12<<2)|0);
  HEAP32[$__we>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$113 = 0, $$114 = 0, $$1211 = 0, $$1212 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2$lcssa = 0, $__nc$217 = 0, $__neg = 0, $__w$018 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 138|0;
 $0 = sp + 4|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (486);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(468,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$113 = $33;$$1211 = $34;$119 = 486;$120 = $__wbuf;
  label = 45;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(465,($__loc|0),(49876|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(487,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 32|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(77250|0),((77260)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = $21;
       $24 = $22;
       $25 = (($23) - ($24))|0;
       $26 = ($25|0)>(98);
       if ($26) {
        $27 = (($25) + 2)|0;
        $28 = (_malloc($27)|0);
        $29 = $28;
        $30 = ($28|0)==(0|0);
        if ($30) {
         __THREW__ = 0;
         invoke_v(475);
         $31 = __THREW__; __THREW__ = 0;
         $32 = $31&1;
         if ($32) {
          $39 = $29;
         } else {
          $73 = $29;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $73 = $29;$__nc$0 = $28;
         label = 13;
        }
       } else {
        $73 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $42 = HEAP8[$__neg>>0]|0;
         $43 = ($42<<24>>24)==(0);
         if ($43) {
          $__nc$1 = $__nc$0;
         } else {
          $44 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $44;
         }
         $45 = ((($__atoms)) + 10|0);
         $46 = $__atoms;
         $47 = ($22>>>0)<($21>>>0);
         if ($47) {
          $48 = ((($__atoms)) + 1|0);
          $49 = ((($48)) + 1|0);
          $50 = ((($49)) + 1|0);
          $51 = ((($50)) + 1|0);
          $52 = ((($51)) + 1|0);
          $53 = ((($52)) + 1|0);
          $54 = ((($53)) + 1|0);
          $55 = ((($54)) + 1|0);
          $56 = ((($55)) + 1|0);
          $__nc$217 = $__nc$1;$__w$018 = $22;
          while(1) {
           $57 = HEAP8[$__w$018>>0]|0;
           $58 = HEAP8[$__atoms>>0]|0;
           $59 = ($58<<24>>24)==($57<<24>>24);
           do {
            if ($59) {
             $$0$lcssa$i = $__atoms;
            } else {
             $60 = HEAP8[$48>>0]|0;
             $61 = ($60<<24>>24)==($57<<24>>24);
             if ($61) {
              $$0$lcssa$i = $48;
             } else {
              $125 = HEAP8[$49>>0]|0;
              $126 = ($125<<24>>24)==($57<<24>>24);
              if ($126) {
               $$0$lcssa$i = $49;
              } else {
               $127 = HEAP8[$50>>0]|0;
               $128 = ($127<<24>>24)==($57<<24>>24);
               if ($128) {
                $$0$lcssa$i = $50;
               } else {
                $129 = HEAP8[$51>>0]|0;
                $130 = ($129<<24>>24)==($57<<24>>24);
                if ($130) {
                 $$0$lcssa$i = $51;
                } else {
                 $131 = HEAP8[$52>>0]|0;
                 $132 = ($131<<24>>24)==($57<<24>>24);
                 if ($132) {
                  $$0$lcssa$i = $52;
                  break;
                 }
                 $133 = HEAP8[$53>>0]|0;
                 $134 = ($133<<24>>24)==($57<<24>>24);
                 if ($134) {
                  $$0$lcssa$i = $53;
                  break;
                 }
                 $135 = HEAP8[$54>>0]|0;
                 $136 = ($135<<24>>24)==($57<<24>>24);
                 if ($136) {
                  $$0$lcssa$i = $54;
                  break;
                 }
                 $137 = HEAP8[$55>>0]|0;
                 $138 = ($137<<24>>24)==($57<<24>>24);
                 if ($138) {
                  $$0$lcssa$i = $55;
                  break;
                 }
                 $139 = HEAP8[$56>>0]|0;
                 $140 = ($139<<24>>24)==($57<<24>>24);
                 $$ = $140 ? $56 : $45;
                 $$0$lcssa$i = $$;
                }
               }
              }
             }
            }
           } while(0);
           $62 = $$0$lcssa$i;
           $63 = (($62) - ($46))|0;
           $64 = (77250 + ($63)|0);
           $65 = HEAP8[$64>>0]|0;
           HEAP8[$__nc$217>>0] = $65;
           $66 = ((($__w$018)) + 1|0);
           $67 = ((($__nc$217)) + 1|0);
           $$pre = HEAP32[$__wn>>2]|0;
           $68 = ($66>>>0)<($$pre>>>0);
           if ($68) {
            $__nc$217 = $67;$__w$018 = $66;
           } else {
            $__nc$2$lcssa = $67;
            break;
           }
          }
         } else {
          $__nc$2$lcssa = $__nc$1;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $69 = (_sscanf($__nbuf,77261,$vararg_buffer)|0);
         $70 = ($69|0)==(1);
         if (!($70)) {
          __THREW__ = 0;
          invoke_vi(488,(77265|0));
          $71 = __THREW__; __THREW__ = 0;
          $72 = $71&1;
          if ($72) {
           $39 = $73;
           break;
          }
         }
         $74 = ($73|0)==(0);
         if (!($74)) {
          $75 = $73;
          _free($75);
         }
         break L7;
        }
       } while(0);
       $37 = ___cxa_find_matching_catch()|0;
       $38 = tempRet0;
       $40 = ($39|0)==(0);
       if ($40) {
        $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $41 = $39;
       _free($41);
       $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $76 = HEAP32[$__b>>2]|0;
     $77 = ($76|0)==(0|0);
     do {
      if ($77) {
       $90 = 0;
      } else {
       $78 = ((($76)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ((($76)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($79|0)==($81|0);
       if ($82) {
        $83 = HEAP32[$76>>2]|0;
        $84 = ((($83)) + 36|0);
        $85 = HEAP32[$84>>2]|0;
        __THREW__ = 0;
        $86 = (invoke_ii($85|0,($76|0))|0);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if ($88) {
         label = 10;
         break L4;
        }
        $89 = ($86|0)==(-1);
        if ($89) {
         HEAP32[$__b>>2] = 0;
         $90 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $90 = $$pre$i$i$i;
         break;
        }
       } else {
        $90 = $76;
       }
      }
     } while(0);
     $91 = ($90|0)==(0|0);
     $92 = HEAP32[$__e>>2]|0;
     $93 = ($92|0)==(0|0);
     do {
      if ($93) {
       label = 37;
      } else {
       $94 = ((($92)) + 12|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = ((($92)) + 16|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = ($95|0)==($97|0);
       if ($98) {
        $99 = HEAP32[$92>>2]|0;
        $100 = ((($99)) + 36|0);
        $101 = HEAP32[$100>>2]|0;
        __THREW__ = 0;
        $102 = (invoke_ii($101|0,($92|0))|0);
        $103 = __THREW__; __THREW__ = 0;
        $104 = $103&1;
        if ($104) {
         label = 10;
         break L4;
        }
        $105 = ($102|0)==(-1);
        if ($105) {
         HEAP32[$__e>>2] = 0;
         label = 37;
         break;
        }
       }
       if (!($91)) {
        label = 38;
       }
      }
     } while(0);
     if ((label|0) == 37) {
      if ($91) {
       label = 38;
      }
     }
     if ((label|0) == 38) {
      $106 = HEAP32[$__err>>2]|0;
      $107 = $106 | 2;
      HEAP32[$__err>>2] = $107;
     }
     $108 = HEAP32[$__b>>2]|0;
     $109 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($109)|0);
     $110 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $111 = ($110|0)==(0|0);
     if (!($111)) {
      $112 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($112|0,($110|0));
      $113 = __THREW__; __THREW__ = 0;
      $114 = $113&1;
      if ($114) {
       $115 = ___cxa_find_matching_catch(0|0)|0;
       $116 = tempRet0;
       ___clang_call_terminate($115);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($108|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $35 = ___cxa_find_matching_catch()|0;
   $36 = tempRet0;
   $$0 = $35;$$01 = $36;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $117 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($117)|0);
  $$pre7 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $118 = ($$pre7|0)==(0|0);
  if ($118) {
   $$114 = $$0;$$1212 = $$01;
  } else {
   $$pre15 = HEAP32[$2>>2]|0;
   $$113 = $$0;$$1211 = $$01;$119 = $$pre15;$120 = $$pre7;
   label = 45;
  }
 }
 if ((label|0) == 45) {
  __THREW__ = 0;
  invoke_vi($119|0,($120|0));
  $121 = __THREW__; __THREW__ = 0;
  $122 = $121&1;
  if ($122) {
   $123 = ___cxa_find_matching_catch(0|0)|0;
   $124 = tempRet0;
   ___clang_call_terminate($123);
   // unreachable;
  } else {
   $$114 = $$113;$$1212 = $$1211;
  }
 }
 ___resumeException($$114|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i121 = 0, $$0$i$i130 = 0, $$0$i$i140 = 0, $$0$i$i157 = 0, $$0$i$i42 = 0, $$0$i$i45 = 0, $$0$i$i58 = 0, $$0$i$i65 = 0, $$0$i$i68 = 0, $$0$i$i75 = 0, $$0$i$i94 = 0, $$0$i$i97 = 0, $$in340 = 0, $$lcssa = 0, $$lcssa243 = 0, $$lcssa313 = 0, $$lcssa371 = 0;
 var $$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert274 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i104 = 0, $$pre$i$i$i144 = 0, $$pre$i$i$i161 = 0, $$pre$i$i$i32 = 0, $$pre$i$i$i48 = 0, $$pre$i$i$i80 = 0, $$pre$i2$i$i108 = 0, $$pre$i2$i$i148 = 0, $$pre$i2$i$i148256 = 0, $$pre$i2$i$i148258 = 0, $$pre$i2$i$i165268 = 0, $$pre$i2$i$i165269 = 0, $$pre$i2$i$i165345 = 0, $$pre$i2$i$i52 = 0, $$pre$i2$i$i52278 = 0;
 var $$pre$i2$i$i52280 = 0, $$pre$i2$i$i84264$ph = 0, $$pre$i2$i$i84264283 = 0, $$pre$i2$i$i84336 = 0, $$pre261 = 0, $$pre263 = 0, $$pre266 = 0, $$pre267 = 0, $$pre271 = 0, $$pre272 = 0, $$pre273 = 0, $$pre275 = 0, $$pre276 = 0, $$pre277 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa372 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0353 = 0, $__pat = 0, $__psn = 0;
 var $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i138 = 0, $isascii1$i171 = 0, $isascii1$i61 = 0, $isascii1$i73 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, $sext = 0, $sext210 = 0, $sext211 = 0, $sext212 = 0, $switch = 0, $tmp$i$i150 = 0, $tmp$i$i167 = 0, $tmp$i$i54 = 0, $tmp$i$i86 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 80|0;
 $__gn = sp + 72|0;
 $__ge = sp + 68|0;
 $__pat = sp + 496|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (486);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 HEAP32[$__grp>>2] = 0;
 $4 = ((($__grp)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($__grp)) + 8|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$__sym>>2] = 0;
 $6 = ((($__sym)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($__sym)) + 8|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$__psn>>2] = 0;
 $8 = ((($__psn)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($__psn)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$__nsn>>2] = 0;
 $10 = ((($__nsn)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($__nsn)) + 8|0);
 HEAP32[$11>>2] = 0;
 HEAP32[$__spaces>>2] = 0;
 $12 = ((($__spaces)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($__spaces)) + 8|0);
 HEAP32[$13>>2] = 0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(489,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L1: do {
  if ($15) {
   $80 = ___cxa_find_matching_catch()|0;
   $81 = tempRet0;
   $lpad$phi$index = $80;$lpad$phi$index7 = $81;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__ct)) + 8|0);
   $18 = ((($__psn)) + 4|0);
   $19 = ((($__nsn)) + 4|0);
   $20 = ((($__nsn)) + 8|0);
   $21 = ((($__nsn)) + 1|0);
   $22 = ((($__psn)) + 8|0);
   $23 = ((($__psn)) + 1|0);
   $24 = $__flags & 512;
   $25 = ($24|0)!=(0);
   $26 = ((($__sym)) + 8|0);
   $27 = ((($__sym)) + 1|0);
   $28 = ((($__sym)) + 4|0);
   $29 = ((($__spaces)) + 4|0);
   $30 = ((($__spaces)) + 8|0);
   $31 = ((($__spaces)) + 1|0);
   $32 = ((($__pat)) + 3|0);
   $33 = ((($__grp)) + 4|0);
   $876 = $__gbuf;$__p$0353 = 0;$__trailing_sign$0355 = 0;
   L4: while(1) {
    $34 = HEAP32[$__b>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      $48 = 0;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 24;
        break L4;
       }
       $47 = ($44|0)==(-1);
       if ($47) {
        HEAP32[$__b>>2] = 0;
        $48 = 0;
        break;
       } else {
        $$pre$i$i$i32 = HEAP32[$__b>>2]|0;
        $48 = $$pre$i$i$i32;
        break;
       }
      } else {
       $48 = $34;
      }
     }
    } while(0);
    $49 = ($48|0)==(0|0);
    $50 = HEAP32[$__e>>2]|0;
    $51 = ($50|0)==(0|0);
    do {
     if ($51) {
      label = 15;
     } else {
      $52 = ((($50)) + 12|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ((($50)) + 16|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($53|0)==($55|0);
      if (!($56)) {
       if ($49) {
        $877 = $50;
        break;
       } else {
        $$lcssa313 = $876;$__trailing_sign$0$lcssa = $__trailing_sign$0355;
        label = 235;
        break L4;
       }
      }
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 24;
       break L4;
      }
      $63 = ($60|0)==(-1);
      if ($63) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       if ($49) {
        $877 = $50;
        break;
       } else {
        $$lcssa313 = $876;$__trailing_sign$0$lcssa = $__trailing_sign$0355;
        label = 235;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($49) {
      $$lcssa313 = $876;$__trailing_sign$0$lcssa = $__trailing_sign$0355;
      label = 235;
      break;
     } else {
      $877 = 0;
     }
    }
    $64 = (($__pat) + ($__p$0353)|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    L26: do {
     switch ($66|0) {
     case 1:  {
      $cond = ($__p$0353|0)==(3);
      if ($cond) {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      } else {
       $89 = HEAP32[$__b>>2]|0;
       $90 = ((($89)) + 12|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ((($89)) + 16|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($91|0)==($93|0);
       if ($94) {
        $95 = HEAP32[$89>>2]|0;
        $96 = ((($95)) + 36|0);
        $97 = HEAP32[$96>>2]|0;
        __THREW__ = 0;
        $98 = (invoke_ii($97|0,($89|0))|0);
        $99 = __THREW__; __THREW__ = 0;
        $100 = $99&1;
        if ($100) {
         label = 24;
         break L4;
        } else {
         $$0$i$i42 = $98;
        }
       } else {
        $101 = HEAP8[$91>>0]|0;
        $102 = $101&255;
        $$0$i$i42 = $102;
       }
       $103 = $$0$i$i42&255;
       $isascii1$i = ($103<<24>>24)>(-1);
       if (!($isascii1$i)) {
        label = 40;
        break L4;
       }
       $sext212 = $$0$i$i42 << 24;
       $104 = $sext212 >> 24;
       $105 = HEAP32[$17>>2]|0;
       $106 = (($105) + ($104<<1)|0);
       $107 = HEAP16[$106>>1]|0;
       $108 = $107 & 8192;
       $109 = ($108<<16>>16)==(0);
       if ($109) {
        label = 40;
        break L4;
       }
       $110 = HEAP32[$__b>>2]|0;
       $111 = ((($110)) + 12|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = ((($110)) + 16|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = ($112|0)==($114|0);
       if ($115) {
        $116 = HEAP32[$110>>2]|0;
        $117 = ((($116)) + 40|0);
        $118 = HEAP32[$117>>2]|0;
        __THREW__ = 0;
        $119 = (invoke_ii($118|0,($110|0))|0);
        $120 = __THREW__; __THREW__ = 0;
        $121 = $120&1;
        if ($121) {
         label = 24;
         break L4;
        } else {
         $$0$i$i45 = $119;
        }
       } else {
        $122 = ((($112)) + 1|0);
        HEAP32[$111>>2] = $122;
        $123 = HEAP8[$112>>0]|0;
        $124 = $123&255;
        $$0$i$i45 = $124;
       }
       $125 = $$0$i$i45&255;
       __THREW__ = 0;
       invoke_vii(490,($__spaces|0),($125|0));
       $126 = __THREW__; __THREW__ = 0;
       $127 = $126&1;
       if ($127) {
        label = 24;
        break L4;
       } else {
        $$pre$i2$i$i52 = $877;$147 = $877;
        label = 42;
       }
      }
      break;
     }
     case 0:  {
      $130 = ($__p$0353|0)==(3);
      if ($130) {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      } else {
       $$pre$i2$i$i52 = $877;$147 = $877;
       label = 42;
      }
      break;
     }
     case 3:  {
      $201 = HEAP8[$__psn>>0]|0;
      $202 = $201 & 1;
      $203 = ($202<<24>>24)==(0);
      $204 = HEAP32[$18>>2]|0;
      $205 = $201&255;
      $206 = $205 >>> 1;
      $207 = $203 ? $206 : $204;
      $208 = HEAP8[$__nsn>>0]|0;
      $209 = $208 & 1;
      $210 = ($209<<24>>24)==(0);
      $211 = HEAP32[$19>>2]|0;
      $212 = $208&255;
      $213 = $212 >>> 1;
      $214 = $210 ? $213 : $211;
      $215 = (0 - ($214))|0;
      $216 = ($207|0)==($215|0);
      if ($216) {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      } else {
       $217 = ($207|0)==(0);
       if ($217) {
        $261 = HEAP32[$__b>>2]|0;
        $262 = ((($261)) + 12|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = ((($261)) + 16|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = ($263|0)==($265|0);
        if ($266) {
         $267 = HEAP32[$261>>2]|0;
         $268 = ((($267)) + 36|0);
         $269 = HEAP32[$268>>2]|0;
         __THREW__ = 0;
         $270 = (invoke_ii($269|0,($261|0))|0);
         $271 = __THREW__; __THREW__ = 0;
         $272 = $271&1;
         if ($272) {
          label = 24;
          break L4;
         }
         $$pre277 = HEAP8[$__nsn>>0]|0;
         $$0$i$i114 = $270;$277 = $$pre277;
        } else {
         $273 = HEAP8[$263>>0]|0;
         $274 = $273&255;
         $$0$i$i114 = $274;$277 = $208;
        }
        $275 = $$0$i$i114&255;
        $276 = $277 & 1;
        $278 = ($276<<24>>24)==(0);
        $279 = HEAP32[$20>>2]|0;
        $280 = $278 ? $21 : $279;
        $281 = HEAP8[$280>>0]|0;
        $282 = ($275<<24>>24)==($281<<24>>24);
        if (!($282)) {
         $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
         break L26;
        }
        $283 = HEAP32[$__b>>2]|0;
        $284 = ((($283)) + 12|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = ((($283)) + 16|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = ($285|0)==($287|0);
        if ($288) {
         $289 = HEAP32[$283>>2]|0;
         $290 = ((($289)) + 40|0);
         $291 = HEAP32[$290>>2]|0;
         __THREW__ = 0;
         (invoke_ii($291|0,($283|0))|0);
         $292 = __THREW__; __THREW__ = 0;
         $293 = $292&1;
         if ($293) {
          label = 24;
          break L4;
         }
        } else {
         $294 = ((($285)) + 1|0);
         HEAP32[$284>>2] = $294;
        }
        HEAP8[$__neg>>0] = 1;
        $295 = HEAP8[$__nsn>>0]|0;
        $296 = $295 & 1;
        $297 = ($296<<24>>24)==(0);
        $298 = HEAP32[$19>>2]|0;
        $299 = $295&255;
        $300 = $299 >>> 1;
        $301 = $297 ? $300 : $298;
        $302 = ($301>>>0)>(1);
        $__nsn$__trailing_sign$0 = $302 ? $__nsn : $__trailing_sign$0355;
        $878 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L26;
       }
       $218 = ($214|0)==(0);
       $219 = HEAP32[$__b>>2]|0;
       $220 = ((($219)) + 12|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = ((($219)) + 16|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = ($221|0)==($223|0);
       if ($218) {
        if ($224) {
         $225 = HEAP32[$219>>2]|0;
         $226 = ((($225)) + 36|0);
         $227 = HEAP32[$226>>2]|0;
         __THREW__ = 0;
         $228 = (invoke_ii($227|0,($219|0))|0);
         $229 = __THREW__; __THREW__ = 0;
         $230 = $229&1;
         if ($230) {
          label = 24;
          break L4;
         }
         $$pre276 = HEAP8[$__psn>>0]|0;
         $$0$i$i94 = $228;$235 = $$pre276;
        } else {
         $231 = HEAP8[$221>>0]|0;
         $232 = $231&255;
         $$0$i$i94 = $232;$235 = $201;
        }
        $233 = $$0$i$i94&255;
        $234 = $235 & 1;
        $236 = ($234<<24>>24)==(0);
        $237 = HEAP32[$22>>2]|0;
        $238 = $236 ? $23 : $237;
        $239 = HEAP8[$238>>0]|0;
        $240 = ($233<<24>>24)==($239<<24>>24);
        if (!($240)) {
         HEAP8[$__neg>>0] = 1;
         $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
         break L26;
        }
        $241 = HEAP32[$__b>>2]|0;
        $242 = ((($241)) + 12|0);
        $243 = HEAP32[$242>>2]|0;
        $244 = ((($241)) + 16|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = ($243|0)==($245|0);
        if ($246) {
         $247 = HEAP32[$241>>2]|0;
         $248 = ((($247)) + 40|0);
         $249 = HEAP32[$248>>2]|0;
         __THREW__ = 0;
         (invoke_ii($249|0,($241|0))|0);
         $250 = __THREW__; __THREW__ = 0;
         $251 = $250&1;
         if ($251) {
          label = 24;
          break L4;
         }
        } else {
         $252 = ((($243)) + 1|0);
         HEAP32[$242>>2] = $252;
        }
        $253 = HEAP8[$__psn>>0]|0;
        $254 = $253 & 1;
        $255 = ($254<<24>>24)==(0);
        $256 = HEAP32[$18>>2]|0;
        $257 = $253&255;
        $258 = $257 >>> 1;
        $259 = $255 ? $258 : $256;
        $260 = ($259>>>0)>(1);
        $__psn$__trailing_sign$0 = $260 ? $__psn : $__trailing_sign$0355;
        $878 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L26;
       }
       if ($224) {
        $303 = HEAP32[$219>>2]|0;
        $304 = ((($303)) + 36|0);
        $305 = HEAP32[$304>>2]|0;
        __THREW__ = 0;
        $306 = (invoke_ii($305|0,($219|0))|0);
        $307 = __THREW__; __THREW__ = 0;
        $308 = $307&1;
        if ($308) {
         label = 24;
         break L4;
        }
        $$pre271 = HEAP8[$__psn>>0]|0;
        $$pre272 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre272)) + 12|0);
        $$pre273 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert274 = ((($$pre272)) + 16|0);
        $$pre275 = HEAP32[$$phi$trans$insert274>>2]|0;
        $$0$i$i121 = $306;$313 = $$pre271;$320 = $$pre272;$321 = $$pre273;$323 = $$pre275;
       } else {
        $309 = HEAP8[$221>>0]|0;
        $310 = $309&255;
        $$0$i$i121 = $310;$313 = $201;$320 = $219;$321 = $221;$323 = $223;
       }
       $311 = $$0$i$i121&255;
       $312 = $313 & 1;
       $314 = ($312<<24>>24)==(0);
       $315 = HEAP32[$22>>2]|0;
       $316 = $314 ? $23 : $315;
       $317 = HEAP8[$316>>0]|0;
       $318 = ($311<<24>>24)==($317<<24>>24);
       $319 = ((($320)) + 12|0);
       $322 = ($321|0)==($323|0);
       if ($318) {
        if ($322) {
         $324 = HEAP32[$320>>2]|0;
         $325 = ((($324)) + 40|0);
         $326 = HEAP32[$325>>2]|0;
         __THREW__ = 0;
         (invoke_ii($326|0,($320|0))|0);
         $327 = __THREW__; __THREW__ = 0;
         $328 = $327&1;
         if ($328) {
          label = 24;
          break L4;
         }
        } else {
         $329 = ((($321)) + 1|0);
         HEAP32[$319>>2] = $329;
        }
        $330 = HEAP8[$__psn>>0]|0;
        $331 = $330 & 1;
        $332 = ($331<<24>>24)==(0);
        $333 = HEAP32[$18>>2]|0;
        $334 = $330&255;
        $335 = $334 >>> 1;
        $336 = $332 ? $335 : $333;
        $337 = ($336>>>0)>(1);
        $__psn$__trailing_sign$010 = $337 ? $__psn : $__trailing_sign$0355;
        $878 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$010;
        break L26;
       }
       if ($322) {
        $338 = HEAP32[$320>>2]|0;
        $339 = ((($338)) + 36|0);
        $340 = HEAP32[$339>>2]|0;
        __THREW__ = 0;
        $341 = (invoke_ii($340|0,($320|0))|0);
        $342 = __THREW__; __THREW__ = 0;
        $343 = $342&1;
        if ($343) {
         label = 24;
         break L4;
        } else {
         $$0$i$i130 = $341;
        }
       } else {
        $344 = HEAP8[$321>>0]|0;
        $345 = $344&255;
        $$0$i$i130 = $345;
       }
       $346 = $$0$i$i130&255;
       $347 = HEAP8[$__nsn>>0]|0;
       $348 = $347 & 1;
       $349 = ($348<<24>>24)==(0);
       $350 = HEAP32[$20>>2]|0;
       $351 = $349 ? $21 : $350;
       $352 = HEAP8[$351>>0]|0;
       $353 = ($346<<24>>24)==($352<<24>>24);
       if (!($353)) {
        label = 104;
        break L4;
       }
       $354 = HEAP32[$__b>>2]|0;
       $355 = ((($354)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ((($354)) + 16|0);
       $358 = HEAP32[$357>>2]|0;
       $359 = ($356|0)==($358|0);
       if ($359) {
        $360 = HEAP32[$354>>2]|0;
        $361 = ((($360)) + 40|0);
        $362 = HEAP32[$361>>2]|0;
        __THREW__ = 0;
        (invoke_ii($362|0,($354|0))|0);
        $363 = __THREW__; __THREW__ = 0;
        $364 = $363&1;
        if ($364) {
         label = 24;
         break L4;
        }
       } else {
        $365 = ((($356)) + 1|0);
        HEAP32[$355>>2] = $365;
       }
       HEAP8[$__neg>>0] = 1;
       $366 = HEAP8[$__nsn>>0]|0;
       $367 = $366 & 1;
       $368 = ($367<<24>>24)==(0);
       $369 = HEAP32[$19>>2]|0;
       $370 = $366&255;
       $371 = $370 >>> 1;
       $372 = $368 ? $371 : $369;
       $373 = ($372>>>0)>(1);
       $__nsn$__trailing_sign$011 = $373 ? $__nsn : $__trailing_sign$0355;
       $878 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
      }
      break;
     }
     case 2:  {
      $376 = ($__trailing_sign$0355|0)!=(0|0);
      $377 = ($__p$0353>>>0)<(2);
      $or$cond = $377 | $376;
      if (!($or$cond)) {
       $378 = ($__p$0353|0)==(2);
       $379 = HEAP8[$32>>0]|0;
       $380 = ($379<<24>>24)!=(0);
       $381 = $378 & $380;
       $brmerge = $25 | $381;
       if (!($brmerge)) {
        $878 = $876;$__trailing_sign$1 = 0;
        break L26;
       }
      }
      $382 = HEAP8[$__sym>>0]|0;
      $383 = $382 & 1;
      $384 = ($383<<24>>24)==(0);
      $385 = HEAP32[$26>>2]|0;
      $386 = $384 ? $27 : $385;
      $387 = $386;
      $388 = ($__p$0353|0)==(0);
      L95: do {
       if ($388) {
        $$ph = $387;
       } else {
        $399 = (($__p$0353) + -1)|0;
        $400 = (($__pat) + ($399)|0);
        $401 = HEAP8[$400>>0]|0;
        $switch = ($401&255)<(2);
        if ($switch) {
         $402 = HEAP32[$28>>2]|0;
         $403 = $382&255;
         $404 = $403 >>> 1;
         $405 = $384 ? $404 : $402;
         $406 = (($386) + ($405)|0);
         $407 = HEAP32[$17>>2]|0;
         $408 = ($405|0)==(0);
         L98: do {
          if ($408) {
           $$lcssa = $387;
          } else {
           $410 = $386;$880 = $387;
           while(1) {
            $409 = HEAP8[$410>>0]|0;
            $isascii1$i171 = ($409<<24>>24)>(-1);
            if (!($isascii1$i171)) {
             $$lcssa = $880;
             break L98;
            }
            $411 = $409 << 24 >> 24;
            $412 = (($407) + ($411<<1)|0);
            $413 = HEAP16[$412>>1]|0;
            $414 = $413 & 8192;
            $415 = ($414<<16>>16)==(0);
            if ($415) {
             $$lcssa = $880;
             break L98;
            }
            $416 = ((($410)) + 1|0);
            $417 = $416;
            $418 = ($416|0)==($406|0);
            if ($418) {
             $$lcssa = $417;
             break;
            } else {
             $410 = $416;$880 = $417;
            }
           }
          }
         } while(0);
         $419 = (($$lcssa) - ($387))|0;
         $420 = HEAP8[$__spaces>>0]|0;
         $421 = $420 & 1;
         $422 = ($421<<24>>24)==(0);
         $423 = HEAP32[$29>>2]|0;
         $424 = $420&255;
         $425 = $424 >>> 1;
         $426 = $422 ? $425 : $423;
         $427 = ($426>>>0)<($419>>>0);
         if ($427) {
          $$ph = $387;
         } else {
          $428 = HEAP32[$30>>2]|0;
          $429 = $422 ? $31 : $428;
          $430 = (($429) + ($426)|0);
          $431 = ($$lcssa|0)==($387|0);
          if ($431) {
           $$ph = $$lcssa;
          } else {
           $$sum = (($426) - ($419))|0;
           $432 = (($429) + ($$sum)|0);
           $$in340 = $386;$434 = $432;
           while(1) {
            $433 = HEAP8[$434>>0]|0;
            $435 = HEAP8[$$in340>>0]|0;
            $436 = ($433<<24>>24)==($435<<24>>24);
            if (!($436)) {
             $$ph = $387;
             break L95;
            }
            $437 = ((($434)) + 1|0);
            $438 = ((($$in340)) + 1|0);
            $439 = ($437|0)==($430|0);
            if ($439) {
             $$ph = $$lcssa;
             break;
            } else {
             $$in340 = $438;$434 = $437;
            }
           }
          }
         }
        } else {
         $$ph = $387;
        }
       }
      } while(0);
      $389 = $382 & 1;
      $390 = ($389<<24>>24)==(0);
      $391 = HEAP32[$28>>2]|0;
      $392 = $382&255;
      $393 = $392 >>> 1;
      $394 = $390 ? $27 : $385;
      $395 = $390 ? $393 : $391;
      $396 = (($394) + ($395)|0);
      $397 = $$ph;
      $398 = ($397|0)==($396|0);
      L110: do {
       if ($398) {
        $$lcssa243 = $396;
       } else {
        $$pre$i2$i$i165345 = $877;$456 = $877;$487 = $397;
        while(1) {
         $440 = HEAP32[$__b>>2]|0;
         $441 = ($440|0)==(0|0);
         do {
          if ($441) {
           $454 = 0;
          } else {
           $442 = ((($440)) + 12|0);
           $443 = HEAP32[$442>>2]|0;
           $444 = ((($440)) + 16|0);
           $445 = HEAP32[$444>>2]|0;
           $446 = ($443|0)==($445|0);
           if ($446) {
            $447 = HEAP32[$440>>2]|0;
            $448 = ((($447)) + 36|0);
            $449 = HEAP32[$448>>2]|0;
            __THREW__ = 0;
            $450 = (invoke_ii($449|0,($440|0))|0);
            $451 = __THREW__; __THREW__ = 0;
            $452 = $451&1;
            if ($452) {
             label = 21;
             break L4;
            }
            $453 = ($450|0)==(-1);
            if ($453) {
             HEAP32[$__b>>2] = 0;
             $454 = 0;
             break;
            } else {
             $$pre$i$i$i161 = HEAP32[$__b>>2]|0;
             $454 = $$pre$i$i$i161;
             break;
            }
           } else {
            $454 = $440;
           }
          }
         } while(0);
         $455 = ($454|0)==(0|0);
         $457 = ($456|0)==(0|0);
         do {
          if ($457) {
           $$pre$i2$i$i165269 = $$pre$i2$i$i165345;
           label = 131;
          } else {
           $458 = ((($456)) + 12|0);
           $459 = HEAP32[$458>>2]|0;
           $460 = ((($456)) + 16|0);
           $461 = HEAP32[$460>>2]|0;
           $462 = ($459|0)==($461|0);
           if (!($462)) {
            if ($455) {
             $$pre$i2$i$i165268 = $$pre$i2$i$i165345;$881 = $456;
             break;
            } else {
             $$lcssa243 = $487;
             break L110;
            }
           }
           $463 = HEAP32[$456>>2]|0;
           $464 = ((($463)) + 36|0);
           $465 = HEAP32[$464>>2]|0;
           __THREW__ = 0;
           $466 = (invoke_ii($465|0,($456|0))|0);
           $467 = __THREW__; __THREW__ = 0;
           $468 = $467&1;
           if ($468) {
            label = 21;
            break L4;
           }
           $469 = ($466|0)==(-1);
           if ($469) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i165269 = 0;
            label = 131;
            break;
           } else {
            $470 = ($$pre$i2$i$i165345|0)==(0|0);
            $tmp$i$i167 = $455 ^ $470;
            if ($tmp$i$i167) {
             $$pre$i2$i$i165268 = $$pre$i2$i$i165345;$881 = $$pre$i2$i$i165345;
             break;
            } else {
             $$lcssa243 = $487;
             break L110;
            }
           }
          }
         } while(0);
         if ((label|0) == 131) {
          label = 0;
          if ($455) {
           $$lcssa243 = $487;
           break L110;
          } else {
           $$pre$i2$i$i165268 = $$pre$i2$i$i165269;$881 = 0;
          }
         }
         $471 = HEAP32[$__b>>2]|0;
         $472 = ((($471)) + 12|0);
         $473 = HEAP32[$472>>2]|0;
         $474 = ((($471)) + 16|0);
         $475 = HEAP32[$474>>2]|0;
         $476 = ($473|0)==($475|0);
         if ($476) {
          $477 = HEAP32[$471>>2]|0;
          $478 = ((($477)) + 36|0);
          $479 = HEAP32[$478>>2]|0;
          __THREW__ = 0;
          $480 = (invoke_ii($479|0,($471|0))|0);
          $481 = __THREW__; __THREW__ = 0;
          $482 = $481&1;
          if ($482) {
           label = 21;
           break L4;
          } else {
           $$0$i$i157 = $480;
          }
         } else {
          $483 = HEAP8[$473>>0]|0;
          $484 = $483&255;
          $$0$i$i157 = $484;
         }
         $485 = $$0$i$i157&255;
         $486 = HEAP8[$487>>0]|0;
         $488 = ($485<<24>>24)==($486<<24>>24);
         if (!($488)) {
          $$lcssa243 = $487;
          break L110;
         }
         $489 = HEAP32[$__b>>2]|0;
         $490 = ((($489)) + 12|0);
         $491 = HEAP32[$490>>2]|0;
         $492 = ((($489)) + 16|0);
         $493 = HEAP32[$492>>2]|0;
         $494 = ($491|0)==($493|0);
         if ($494) {
          $495 = HEAP32[$489>>2]|0;
          $496 = ((($495)) + 40|0);
          $497 = HEAP32[$496>>2]|0;
          __THREW__ = 0;
          (invoke_ii($497|0,($489|0))|0);
          $498 = __THREW__; __THREW__ = 0;
          $499 = $498&1;
          if ($499) {
           label = 21;
           break L4;
          }
         } else {
          $500 = ((($491)) + 1|0);
          HEAP32[$490>>2] = $500;
         }
         $501 = ((($487)) + 1|0);
         $$pre266 = HEAP8[$__sym>>0]|0;
         $$pre267 = HEAP32[$26>>2]|0;
         $502 = $$pre266 & 1;
         $503 = ($502<<24>>24)==(0);
         $504 = HEAP32[$28>>2]|0;
         $505 = $$pre266&255;
         $506 = $505 >>> 1;
         $507 = $503 ? $27 : $$pre267;
         $508 = $503 ? $506 : $504;
         $509 = (($507) + ($508)|0);
         $510 = ($501|0)==($509|0);
         if ($510) {
          $$lcssa243 = $509;
          break;
         } else {
          $$pre$i2$i$i165345 = $$pre$i2$i$i165268;$456 = $881;$487 = $501;
         }
        }
       }
      } while(0);
      if ($25) {
       $511 = HEAP8[$__sym>>0]|0;
       $512 = $511 & 1;
       $513 = ($512<<24>>24)==(0);
       $514 = HEAP32[$26>>2]|0;
       $515 = HEAP32[$28>>2]|0;
       $516 = $511&255;
       $517 = $516 >>> 1;
       $518 = $513 ? $27 : $514;
       $519 = $513 ? $517 : $515;
       $520 = (($518) + ($519)|0);
       $521 = ($$lcssa243|0)==($520|0);
       if ($521) {
        $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
       } else {
        label = 143;
        break L4;
       }
      } else {
       $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
      }
      break;
     }
     case 4:  {
      $67 = HEAP8[$__ts>>0]|0;
      $$pre$i2$i$i148 = $877;$540 = $877;$595 = $876;$__ng$0 = 0;
      L145: while(1) {
       $524 = HEAP32[$__b>>2]|0;
       $525 = ($524|0)==(0|0);
       do {
        if ($525) {
         $538 = 0;
        } else {
         $526 = ((($524)) + 12|0);
         $527 = HEAP32[$526>>2]|0;
         $528 = ((($524)) + 16|0);
         $529 = HEAP32[$528>>2]|0;
         $530 = ($527|0)==($529|0);
         if ($530) {
          $531 = HEAP32[$524>>2]|0;
          $532 = ((($531)) + 36|0);
          $533 = HEAP32[$532>>2]|0;
          __THREW__ = 0;
          $534 = (invoke_ii($533|0,($524|0))|0);
          $535 = __THREW__; __THREW__ = 0;
          $536 = $535&1;
          if ($536) {
           label = 23;
           break L4;
          }
          $537 = ($534|0)==(-1);
          if ($537) {
           HEAP32[$__b>>2] = 0;
           $538 = 0;
           break;
          } else {
           $$pre$i$i$i144 = HEAP32[$__b>>2]|0;
           $538 = $$pre$i$i$i144;
           break;
          }
         } else {
          $538 = $524;
         }
        }
       } while(0);
       $539 = ($538|0)==(0|0);
       $541 = ($540|0)==(0|0);
       do {
        if ($541) {
         $$pre$i2$i$i148256 = $$pre$i2$i$i148;
         label = 156;
        } else {
         $542 = ((($540)) + 12|0);
         $543 = HEAP32[$542>>2]|0;
         $544 = ((($540)) + 16|0);
         $545 = HEAP32[$544>>2]|0;
         $546 = ($543|0)==($545|0);
         if (!($546)) {
          if ($539) {
           $$pre$i2$i$i148258 = $$pre$i2$i$i148;$882 = $540;
           break;
          } else {
           $$lcssa371 = $595;$$pre$i2$i$i108 = $$pre$i2$i$i148;$__ng$0$lcssa372 = $__ng$0;
           break L145;
          }
         }
         $547 = HEAP32[$540>>2]|0;
         $548 = ((($547)) + 36|0);
         $549 = HEAP32[$548>>2]|0;
         __THREW__ = 0;
         $550 = (invoke_ii($549|0,($540|0))|0);
         $551 = __THREW__; __THREW__ = 0;
         $552 = $551&1;
         if ($552) {
          label = 23;
          break L4;
         }
         $553 = ($550|0)==(-1);
         if ($553) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i148256 = 0;
          label = 156;
          break;
         } else {
          $554 = ($$pre$i2$i$i148|0)==(0|0);
          $tmp$i$i150 = $539 ^ $554;
          if ($tmp$i$i150) {
           $$pre$i2$i$i148258 = $$pre$i2$i$i148;$882 = $$pre$i2$i$i148;
           break;
          } else {
           $$lcssa371 = $595;$$pre$i2$i$i108 = $$pre$i2$i$i148;$__ng$0$lcssa372 = $__ng$0;
           break L145;
          }
         }
        }
       } while(0);
       if ((label|0) == 156) {
        label = 0;
        if ($539) {
         $$lcssa371 = $595;$$pre$i2$i$i108 = $$pre$i2$i$i148256;$__ng$0$lcssa372 = $__ng$0;
         break;
        } else {
         $$pre$i2$i$i148258 = $$pre$i2$i$i148256;$882 = 0;
        }
       }
       $555 = HEAP32[$__b>>2]|0;
       $556 = ((($555)) + 12|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ((($555)) + 16|0);
       $559 = HEAP32[$558>>2]|0;
       $560 = ($557|0)==($559|0);
       if ($560) {
        $561 = HEAP32[$555>>2]|0;
        $562 = ((($561)) + 36|0);
        $563 = HEAP32[$562>>2]|0;
        __THREW__ = 0;
        $564 = (invoke_ii($563|0,($555|0))|0);
        $565 = __THREW__; __THREW__ = 0;
        $566 = $565&1;
        if ($566) {
         label = 23;
         break L4;
        } else {
         $$0$i$i140 = $564;
        }
       } else {
        $567 = HEAP8[$557>>0]|0;
        $568 = $567&255;
        $$0$i$i140 = $568;
       }
       $569 = $$0$i$i140&255;
       $isascii1$i138 = ($569<<24>>24)>(-1);
       if ($isascii1$i138) {
        $sext210 = $$0$i$i140 << 24;
        $570 = $sext210 >> 24;
        $571 = HEAP32[$17>>2]|0;
        $572 = (($571) + ($570<<1)|0);
        $573 = HEAP16[$572>>1]|0;
        $574 = $573 & 2048;
        $575 = ($574<<16>>16)==(0);
        if ($575) {
         label = 167;
        } else {
         $576 = HEAP32[$__wn>>2]|0;
         $577 = HEAP32[$0>>2]|0;
         $578 = ($576|0)==($577|0);
         if ($578) {
          __THREW__ = 0;
          invoke_viii(491,($__wb|0),($__wn|0),($0|0));
          $579 = __THREW__; __THREW__ = 0;
          $580 = $579&1;
          if ($580) {
           label = 23;
           break L4;
          }
          $$pre = HEAP32[$__wn>>2]|0;
          $582 = $$pre;
         } else {
          $582 = $576;
         }
         $581 = ((($582)) + 1|0);
         HEAP32[$__wn>>2] = $581;
         HEAP8[$582>>0] = $569;
         $583 = (($__ng$0) + 1)|0;
         $883 = $595;$__ng$1 = $583;
        }
       } else {
        label = 167;
       }
       if ((label|0) == 167) {
        label = 0;
        $584 = HEAP8[$__grp>>0]|0;
        $585 = $584 & 1;
        $586 = ($585<<24>>24)==(0);
        $587 = HEAP32[$33>>2]|0;
        $588 = $584&255;
        $589 = $588 >>> 1;
        $590 = $586 ? $589 : $587;
        $591 = ($590|0)!=(0);
        $592 = ($__ng$0|0)!=(0);
        $or$cond7 = $592 & $591;
        $593 = ($569<<24>>24)==($67<<24>>24);
        $or$cond13 = $593 & $or$cond7;
        if (!($or$cond13)) {
         $$lcssa371 = $595;$$pre$i2$i$i108 = $$pre$i2$i$i148258;$__ng$0$lcssa372 = $__ng$0;
         break;
        }
        $594 = HEAP32[$__ge>>2]|0;
        $596 = ($595|0)==($594|0);
        if ($596) {
         __THREW__ = 0;
         invoke_viii(492,($__gb|0),($__gn|0),($__ge|0));
         $597 = __THREW__; __THREW__ = 0;
         $598 = $597&1;
         if ($598) {
          label = 23;
          break L4;
         }
         $$pre261 = HEAP32[$__gn>>2]|0;
         $600 = $$pre261;
        } else {
         $600 = $595;
        }
        $599 = ((($600)) + 4|0);
        HEAP32[$__gn>>2] = $599;
        HEAP32[$600>>2] = $__ng$0;
        $883 = $599;$__ng$1 = 0;
       }
       $601 = HEAP32[$__b>>2]|0;
       $602 = ((($601)) + 12|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = ((($601)) + 16|0);
       $605 = HEAP32[$604>>2]|0;
       $606 = ($603|0)==($605|0);
       if ($606) {
        $607 = HEAP32[$601>>2]|0;
        $608 = ((($607)) + 40|0);
        $609 = HEAP32[$608>>2]|0;
        __THREW__ = 0;
        (invoke_ii($609|0,($601|0))|0);
        $610 = __THREW__; __THREW__ = 0;
        $611 = $610&1;
        if ($611) {
         label = 23;
         break L4;
        } else {
         $$pre$i2$i$i148 = $$pre$i2$i$i148258;$540 = $882;$595 = $883;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $612 = ((($603)) + 1|0);
        HEAP32[$602>>2] = $612;
        $$pre$i2$i$i148 = $$pre$i2$i$i148258;$540 = $882;$595 = $883;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $613 = HEAP32[$__gb>>2]|0;
      $614 = ($613|0)!=($$lcssa371|0);
      $615 = ($__ng$0$lcssa372|0)!=(0);
      $or$cond9 = $615 & $614;
      if ($or$cond9) {
       $616 = HEAP32[$__ge>>2]|0;
       $617 = ($$lcssa371|0)==($616|0);
       if ($617) {
        __THREW__ = 0;
        invoke_viii(492,($__gb|0),($__gn|0),($__ge|0));
        $618 = __THREW__; __THREW__ = 0;
        $619 = $618&1;
        if ($619) {
         label = 24;
         break L4;
        }
        $$pre263 = HEAP32[$__gn>>2]|0;
        $621 = $$pre263;
       } else {
        $621 = $$lcssa371;
       }
       $620 = ((($621)) + 4|0);
       HEAP32[$__gn>>2] = $620;
       HEAP32[$621>>2] = $__ng$0$lcssa372;
       $884 = $620;
      } else {
       $884 = $$lcssa371;
      }
      $622 = HEAP32[$__fd>>2]|0;
      $623 = ($622|0)>(0);
      if ($623) {
       $624 = HEAP32[$__b>>2]|0;
       $625 = ($624|0)==(0|0);
       do {
        if ($625) {
         $638 = 0;
        } else {
         $626 = ((($624)) + 12|0);
         $627 = HEAP32[$626>>2]|0;
         $628 = ((($624)) + 16|0);
         $629 = HEAP32[$628>>2]|0;
         $630 = ($627|0)==($629|0);
         if ($630) {
          $631 = HEAP32[$624>>2]|0;
          $632 = ((($631)) + 36|0);
          $633 = HEAP32[$632>>2]|0;
          __THREW__ = 0;
          $634 = (invoke_ii($633|0,($624|0))|0);
          $635 = __THREW__; __THREW__ = 0;
          $636 = $635&1;
          if ($636) {
           label = 24;
           break L4;
          }
          $637 = ($634|0)==(-1);
          if ($637) {
           HEAP32[$__b>>2] = 0;
           $638 = 0;
           break;
          } else {
           $$pre$i$i$i104 = HEAP32[$__b>>2]|0;
           $638 = $$pre$i$i$i104;
           break;
          }
         } else {
          $638 = $624;
         }
        }
       } while(0);
       $639 = ($638|0)==(0|0);
       $640 = ($$pre$i2$i$i108|0)==(0|0);
       do {
        if ($640) {
         label = 193;
        } else {
         $641 = ((($$pre$i2$i$i108)) + 12|0);
         $642 = HEAP32[$641>>2]|0;
         $643 = ((($$pre$i2$i$i108)) + 16|0);
         $644 = HEAP32[$643>>2]|0;
         $645 = ($642|0)==($644|0);
         if ($645) {
          $646 = HEAP32[$$pre$i2$i$i108>>2]|0;
          $647 = ((($646)) + 36|0);
          $648 = HEAP32[$647>>2]|0;
          __THREW__ = 0;
          $649 = (invoke_ii($648|0,($$pre$i2$i$i108|0))|0);
          $650 = __THREW__; __THREW__ = 0;
          $651 = $650&1;
          if ($651) {
           label = 24;
           break L4;
          }
          $652 = ($649|0)==(-1);
          if ($652) {
           HEAP32[$__e>>2] = 0;
           label = 193;
           break;
          }
         }
         if ($639) {
          $885 = $$pre$i2$i$i108;
         } else {
          label = 198;
          break L4;
         }
        }
       } while(0);
       if ((label|0) == 193) {
        label = 0;
        if ($639) {
         label = 198;
         break L4;
        } else {
         $885 = 0;
        }
       }
       $653 = HEAP32[$__b>>2]|0;
       $654 = ((($653)) + 12|0);
       $655 = HEAP32[$654>>2]|0;
       $656 = ((($653)) + 16|0);
       $657 = HEAP32[$656>>2]|0;
       $658 = ($655|0)==($657|0);
       if ($658) {
        $659 = HEAP32[$653>>2]|0;
        $660 = ((($659)) + 36|0);
        $661 = HEAP32[$660>>2]|0;
        __THREW__ = 0;
        $662 = (invoke_ii($661|0,($653|0))|0);
        $663 = __THREW__; __THREW__ = 0;
        $664 = $663&1;
        if ($664) {
         label = 24;
         break L4;
        } else {
         $$0$i$i97 = $662;
        }
       } else {
        $665 = HEAP8[$655>>0]|0;
        $666 = $665&255;
        $$0$i$i97 = $666;
       }
       $667 = $$0$i$i97&255;
       $668 = HEAP8[$__dp>>0]|0;
       $669 = ($667<<24>>24)==($668<<24>>24);
       if (!($669)) {
        label = 198;
        break L4;
       }
       $672 = HEAP32[$__b>>2]|0;
       $673 = ((($672)) + 12|0);
       $674 = HEAP32[$673>>2]|0;
       $675 = ((($672)) + 16|0);
       $676 = HEAP32[$675>>2]|0;
       $677 = ($674|0)==($676|0);
       if ($677) {
        $678 = HEAP32[$672>>2]|0;
        $679 = ((($678)) + 40|0);
        $680 = HEAP32[$679>>2]|0;
        __THREW__ = 0;
        (invoke_ii($680|0,($672|0))|0);
        $681 = __THREW__; __THREW__ = 0;
        $682 = $681&1;
        if ($682) {
         label = 24;
         break L4;
        }
       } else {
        $683 = ((($674)) + 1|0);
        HEAP32[$673>>2] = $683;
       }
       $684 = ($622|0)>(0);
       if ($684) {
        $$pre$i2$i$i84336 = $885;$701 = $885;$762 = $622;
        while(1) {
         $685 = HEAP32[$__b>>2]|0;
         $686 = ($685|0)==(0|0);
         do {
          if ($686) {
           $699 = 0;
          } else {
           $687 = ((($685)) + 12|0);
           $688 = HEAP32[$687>>2]|0;
           $689 = ((($685)) + 16|0);
           $690 = HEAP32[$689>>2]|0;
           $691 = ($688|0)==($690|0);
           if ($691) {
            $692 = HEAP32[$685>>2]|0;
            $693 = ((($692)) + 36|0);
            $694 = HEAP32[$693>>2]|0;
            __THREW__ = 0;
            $695 = (invoke_ii($694|0,($685|0))|0);
            $696 = __THREW__; __THREW__ = 0;
            $697 = $696&1;
            if ($697) {
             label = 22;
             break L4;
            }
            $698 = ($695|0)==(-1);
            if ($698) {
             HEAP32[$__b>>2] = 0;
             $699 = 0;
             break;
            } else {
             $$pre$i$i$i80 = HEAP32[$__b>>2]|0;
             $699 = $$pre$i$i$i80;
             break;
            }
           } else {
            $699 = $685;
           }
          }
         } while(0);
         $700 = ($699|0)==(0|0);
         $702 = ($701|0)==(0|0);
         do {
          if ($702) {
           $$pre$i2$i$i84264$ph = $$pre$i2$i$i84336;
           label = 215;
          } else {
           $703 = ((($701)) + 12|0);
           $704 = HEAP32[$703>>2]|0;
           $705 = ((($701)) + 16|0);
           $706 = HEAP32[$705>>2]|0;
           $707 = ($704|0)==($706|0);
           if (!($707)) {
            if ($700) {
             $$pre$i2$i$i84264283 = $$pre$i2$i$i84336;$886 = $701;
             break;
            } else {
             label = 222;
             break L4;
            }
           }
           $708 = HEAP32[$701>>2]|0;
           $709 = ((($708)) + 36|0);
           $710 = HEAP32[$709>>2]|0;
           __THREW__ = 0;
           $711 = (invoke_ii($710|0,($701|0))|0);
           $712 = __THREW__; __THREW__ = 0;
           $713 = $712&1;
           if ($713) {
            label = 22;
            break L4;
           }
           $714 = ($711|0)==(-1);
           if ($714) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i84264$ph = 0;
            label = 215;
            break;
           } else {
            $715 = ($$pre$i2$i$i84336|0)==(0|0);
            $tmp$i$i86 = $700 ^ $715;
            if ($tmp$i$i86) {
             $$pre$i2$i$i84264283 = $$pre$i2$i$i84336;$886 = $$pre$i2$i$i84336;
             break;
            } else {
             label = 222;
             break L4;
            }
           }
          }
         } while(0);
         if ((label|0) == 215) {
          label = 0;
          if ($700) {
           label = 222;
           break L4;
          } else {
           $$pre$i2$i$i84264283 = $$pre$i2$i$i84264$ph;$886 = 0;
          }
         }
         $716 = HEAP32[$__b>>2]|0;
         $717 = ((($716)) + 12|0);
         $718 = HEAP32[$717>>2]|0;
         $719 = ((($716)) + 16|0);
         $720 = HEAP32[$719>>2]|0;
         $721 = ($718|0)==($720|0);
         if ($721) {
          $722 = HEAP32[$716>>2]|0;
          $723 = ((($722)) + 36|0);
          $724 = HEAP32[$723>>2]|0;
          __THREW__ = 0;
          $725 = (invoke_ii($724|0,($716|0))|0);
          $726 = __THREW__; __THREW__ = 0;
          $727 = $726&1;
          if ($727) {
           label = 22;
           break L4;
          } else {
           $$0$i$i75 = $725;
          }
         } else {
          $728 = HEAP8[$718>>0]|0;
          $729 = $728&255;
          $$0$i$i75 = $729;
         }
         $730 = $$0$i$i75&255;
         $isascii1$i73 = ($730<<24>>24)>(-1);
         if (!($isascii1$i73)) {
          label = 222;
          break L4;
         }
         $sext = $$0$i$i75 << 24;
         $731 = $sext >> 24;
         $732 = HEAP32[$17>>2]|0;
         $733 = (($732) + ($731<<1)|0);
         $734 = HEAP16[$733>>1]|0;
         $735 = $734 & 2048;
         $736 = ($735<<16>>16)==(0);
         if ($736) {
          label = 222;
          break L4;
         }
         $739 = HEAP32[$__wn>>2]|0;
         $740 = HEAP32[$0>>2]|0;
         $741 = ($739|0)==($740|0);
         if ($741) {
          __THREW__ = 0;
          invoke_viii(491,($__wb|0),($__wn|0),($0|0));
          $742 = __THREW__; __THREW__ = 0;
          $743 = $742&1;
          if ($743) {
           label = 22;
           break L4;
          }
         }
         $744 = HEAP32[$__b>>2]|0;
         $745 = ((($744)) + 12|0);
         $746 = HEAP32[$745>>2]|0;
         $747 = ((($744)) + 16|0);
         $748 = HEAP32[$747>>2]|0;
         $749 = ($746|0)==($748|0);
         if ($749) {
          $750 = HEAP32[$744>>2]|0;
          $751 = ((($750)) + 36|0);
          $752 = HEAP32[$751>>2]|0;
          __THREW__ = 0;
          $753 = (invoke_ii($752|0,($744|0))|0);
          $754 = __THREW__; __THREW__ = 0;
          $755 = $754&1;
          if ($755) {
           label = 22;
           break L4;
          } else {
           $$0$i$i68 = $753;
          }
         } else {
          $756 = HEAP8[$746>>0]|0;
          $757 = $756&255;
          $$0$i$i68 = $757;
         }
         $758 = $$0$i$i68&255;
         $759 = HEAP32[$__wn>>2]|0;
         $760 = ((($759)) + 1|0);
         HEAP32[$__wn>>2] = $760;
         HEAP8[$759>>0] = $758;
         $761 = (($762) + -1)|0;
         HEAP32[$__fd>>2] = $761;
         $763 = HEAP32[$__b>>2]|0;
         $764 = ((($763)) + 12|0);
         $765 = HEAP32[$764>>2]|0;
         $766 = ((($763)) + 16|0);
         $767 = HEAP32[$766>>2]|0;
         $768 = ($765|0)==($767|0);
         if ($768) {
          $769 = HEAP32[$763>>2]|0;
          $770 = ((($769)) + 40|0);
          $771 = HEAP32[$770>>2]|0;
          __THREW__ = 0;
          (invoke_ii($771|0,($763|0))|0);
          $772 = __THREW__; __THREW__ = 0;
          $773 = $772&1;
          if ($773) {
           label = 22;
           break L4;
          }
         } else {
          $775 = ((($765)) + 1|0);
          HEAP32[$764>>2] = $775;
         }
         $774 = ($762|0)>(1);
         if ($774) {
          $$pre$i2$i$i84336 = $$pre$i2$i$i84264283;$701 = $886;$762 = $761;
         } else {
          break;
         }
        }
       }
      }
      $776 = HEAP32[$__wn>>2]|0;
      $777 = HEAP32[$__wb>>2]|0;
      $778 = ($776|0)==($777|0);
      if ($778) {
       label = 233;
       break L4;
      } else {
       $878 = $884;$__trailing_sign$1 = $__trailing_sign$0355;
      }
      break;
     }
     default: {
      $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
     }
     }
    } while(0);
    L266: do {
     if ((label|0) == 42) {
      while(1) {
       label = 0;
       $131 = HEAP32[$__b>>2]|0;
       $132 = ($131|0)==(0|0);
       do {
        if ($132) {
         $145 = 0;
        } else {
         $133 = ((($131)) + 12|0);
         $134 = HEAP32[$133>>2]|0;
         $135 = ((($131)) + 16|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = ($134|0)==($136|0);
         if ($137) {
          $138 = HEAP32[$131>>2]|0;
          $139 = ((($138)) + 36|0);
          $140 = HEAP32[$139>>2]|0;
          __THREW__ = 0;
          $141 = (invoke_ii($140|0,($131|0))|0);
          $142 = __THREW__; __THREW__ = 0;
          $143 = $142&1;
          if ($143) {
           label = 20;
           break L4;
          }
          $144 = ($141|0)==(-1);
          if ($144) {
           HEAP32[$__b>>2] = 0;
           $145 = 0;
           break;
          } else {
           $$pre$i$i$i48 = HEAP32[$__b>>2]|0;
           $145 = $$pre$i$i$i48;
           break;
          }
         } else {
          $145 = $131;
         }
        }
       } while(0);
       $146 = ($145|0)==(0|0);
       $148 = ($147|0)==(0|0);
       do {
        if ($148) {
         $$pre$i2$i$i52278 = $$pre$i2$i$i52;
         label = 54;
        } else {
         $149 = ((($147)) + 12|0);
         $150 = HEAP32[$149>>2]|0;
         $151 = ((($147)) + 16|0);
         $152 = HEAP32[$151>>2]|0;
         $153 = ($150|0)==($152|0);
         if (!($153)) {
          if ($146) {
           $$pre$i2$i$i52280 = $$pre$i2$i$i52;$879 = $147;
           break;
          } else {
           $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
           break L266;
          }
         }
         $154 = HEAP32[$147>>2]|0;
         $155 = ((($154)) + 36|0);
         $156 = HEAP32[$155>>2]|0;
         __THREW__ = 0;
         $157 = (invoke_ii($156|0,($147|0))|0);
         $158 = __THREW__; __THREW__ = 0;
         $159 = $158&1;
         if ($159) {
          label = 20;
          break L4;
         }
         $160 = ($157|0)==(-1);
         if ($160) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i52278 = 0;
          label = 54;
          break;
         } else {
          $161 = ($$pre$i2$i$i52|0)==(0|0);
          $tmp$i$i54 = $146 ^ $161;
          if ($tmp$i$i54) {
           $$pre$i2$i$i52280 = $$pre$i2$i$i52;$879 = $$pre$i2$i$i52;
           break;
          } else {
           $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
           break L266;
          }
         }
        }
       } while(0);
       if ((label|0) == 54) {
        label = 0;
        if ($146) {
         $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
         break L266;
        } else {
         $$pre$i2$i$i52280 = $$pre$i2$i$i52278;$879 = 0;
        }
       }
       $162 = HEAP32[$__b>>2]|0;
       $163 = ((($162)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ((($162)) + 16|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($164|0)==($166|0);
       if ($167) {
        $168 = HEAP32[$162>>2]|0;
        $169 = ((($168)) + 36|0);
        $170 = HEAP32[$169>>2]|0;
        __THREW__ = 0;
        $171 = (invoke_ii($170|0,($162|0))|0);
        $172 = __THREW__; __THREW__ = 0;
        $173 = $172&1;
        if ($173) {
         label = 20;
         break L4;
        } else {
         $$0$i$i58 = $171;
        }
       } else {
        $174 = HEAP8[$164>>0]|0;
        $175 = $174&255;
        $$0$i$i58 = $175;
       }
       $176 = $$0$i$i58&255;
       $isascii1$i61 = ($176<<24>>24)>(-1);
       if (!($isascii1$i61)) {
        $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
        break L266;
       }
       $sext211 = $$0$i$i58 << 24;
       $177 = $sext211 >> 24;
       $178 = HEAP32[$17>>2]|0;
       $179 = (($178) + ($177<<1)|0);
       $180 = HEAP16[$179>>1]|0;
       $181 = $180 & 8192;
       $182 = ($181<<16>>16)==(0);
       if ($182) {
        $878 = $876;$__trailing_sign$1 = $__trailing_sign$0355;
        break L266;
       }
       $183 = HEAP32[$__b>>2]|0;
       $184 = ((($183)) + 12|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ((($183)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($185|0)==($187|0);
       if ($188) {
        $189 = HEAP32[$183>>2]|0;
        $190 = ((($189)) + 40|0);
        $191 = HEAP32[$190>>2]|0;
        __THREW__ = 0;
        $192 = (invoke_ii($191|0,($183|0))|0);
        $193 = __THREW__; __THREW__ = 0;
        $194 = $193&1;
        if ($194) {
         label = 20;
         break L4;
        } else {
         $$0$i$i65 = $192;
        }
       } else {
        $195 = ((($185)) + 1|0);
        HEAP32[$184>>2] = $195;
        $196 = HEAP8[$185>>0]|0;
        $197 = $196&255;
        $$0$i$i65 = $197;
       }
       $198 = $$0$i$i65&255;
       __THREW__ = 0;
       invoke_vii(490,($__spaces|0),($198|0));
       $199 = __THREW__; __THREW__ = 0;
       $200 = $199&1;
       if ($200) {
        label = 20;
        break L4;
       } else {
        $$pre$i2$i$i52 = $$pre$i2$i$i52280;$147 = $879;
        label = 42;
       }
      }
     }
    } while(0);
    $781 = (($__p$0353) + 1)|0;
    $782 = ($781>>>0)<(4);
    if ($782) {
     $876 = $878;$__p$0353 = $781;$__trailing_sign$0355 = $__trailing_sign$1;
    } else {
     $$lcssa313 = $878;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 235;
     break;
    }
   }
   L300:    switch (label|0) {
    case 20: {
     $70 = ___cxa_find_matching_catch()|0;
     $71 = tempRet0;
     $lpad$phi$index = $70;$lpad$phi$index7 = $71;
     break L1;
     break;
    }
    case 21: {
     $72 = ___cxa_find_matching_catch()|0;
     $73 = tempRet0;
     $lpad$phi$index = $72;$lpad$phi$index7 = $73;
     break L1;
     break;
    }
    case 22: {
     $74 = ___cxa_find_matching_catch()|0;
     $75 = tempRet0;
     $lpad$phi$index = $74;$lpad$phi$index7 = $75;
     break L1;
     break;
    }
    case 23: {
     $76 = ___cxa_find_matching_catch()|0;
     $77 = tempRet0;
     $lpad$phi$index = $76;$lpad$phi$index7 = $77;
     break L1;
     break;
    }
    case 24: {
     $78 = ___cxa_find_matching_catch()|0;
     $79 = tempRet0;
     $lpad$phi$index = $78;$lpad$phi$index7 = $79;
     break L1;
     break;
    }
    case 40: {
     $128 = HEAP32[$__err>>2]|0;
     $129 = $128 | 4;
     HEAP32[$__err>>2] = $129;
     $$0 = 0;
     break;
    }
    case 104: {
     $374 = HEAP32[$__err>>2]|0;
     $375 = $374 | 4;
     HEAP32[$__err>>2] = $375;
     $$0 = 0;
     break;
    }
    case 143: {
     $522 = HEAP32[$__err>>2]|0;
     $523 = $522 | 4;
     HEAP32[$__err>>2] = $523;
     $$0 = 0;
     break;
    }
    case 198: {
     $670 = HEAP32[$__err>>2]|0;
     $671 = $670 | 4;
     HEAP32[$__err>>2] = $671;
     $$0 = 0;
     break;
    }
    case 222: {
     $737 = HEAP32[$__err>>2]|0;
     $738 = $737 | 4;
     HEAP32[$__err>>2] = $738;
     $$0 = 0;
     break;
    }
    case 233: {
     $779 = HEAP32[$__err>>2]|0;
     $780 = $779 | 4;
     HEAP32[$__err>>2] = $780;
     $$0 = 0;
     break;
    }
    case 235: {
     $783 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L302: do {
      if (!($783)) {
       $784 = ((($__trailing_sign$0$lcssa)) + 1|0);
       $785 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $786 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $__i$0 = 1;
       L304: while(1) {
        $787 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $788 = $787 & 1;
        $789 = ($788<<24>>24)==(0);
        if ($789) {
         $791 = $787&255;
         $792 = $791 >>> 1;
         $794 = $792;
        } else {
         $790 = HEAP32[$786>>2]|0;
         $794 = $790;
        }
        $793 = ($__i$0>>>0)<($794>>>0);
        if (!($793)) {
         break L302;
        }
        $795 = HEAP32[$__b>>2]|0;
        $796 = ($795|0)==(0|0);
        do {
         if ($796) {
          $809 = 0;
         } else {
          $797 = ((($795)) + 12|0);
          $798 = HEAP32[$797>>2]|0;
          $799 = ((($795)) + 16|0);
          $800 = HEAP32[$799>>2]|0;
          $801 = ($798|0)==($800|0);
          if ($801) {
           $802 = HEAP32[$795>>2]|0;
           $803 = ((($802)) + 36|0);
           $804 = HEAP32[$803>>2]|0;
           __THREW__ = 0;
           $805 = (invoke_ii($804|0,($795|0))|0);
           $806 = __THREW__; __THREW__ = 0;
           $807 = $806&1;
           if ($807) {
            label = 19;
            break L304;
           }
           $808 = ($805|0)==(-1);
           if ($808) {
            HEAP32[$__b>>2] = 0;
            $809 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $809 = $$pre$i$i$i;
            break;
           }
          } else {
           $809 = $795;
          }
         }
        } while(0);
        $810 = ($809|0)==(0|0);
        $811 = HEAP32[$__e>>2]|0;
        $812 = ($811|0)==(0|0);
        do {
         if ($812) {
          label = 253;
         } else {
          $813 = ((($811)) + 12|0);
          $814 = HEAP32[$813>>2]|0;
          $815 = ((($811)) + 16|0);
          $816 = HEAP32[$815>>2]|0;
          $817 = ($814|0)==($816|0);
          if ($817) {
           $818 = HEAP32[$811>>2]|0;
           $819 = ((($818)) + 36|0);
           $820 = HEAP32[$819>>2]|0;
           __THREW__ = 0;
           $821 = (invoke_ii($820|0,($811|0))|0);
           $822 = __THREW__; __THREW__ = 0;
           $823 = $822&1;
           if ($823) {
            label = 19;
            break L304;
           }
           $824 = ($821|0)==(-1);
           if ($824) {
            HEAP32[$__e>>2] = 0;
            label = 253;
            break;
           }
          }
          if (!($810)) {
           label = 260;
           break L304;
          }
         }
        } while(0);
        if ((label|0) == 253) {
         label = 0;
         if ($810) {
          label = 260;
          break;
         }
        }
        $825 = HEAP32[$__b>>2]|0;
        $826 = ((($825)) + 12|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = ((($825)) + 16|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = ($827|0)==($829|0);
        if ($830) {
         $831 = HEAP32[$825>>2]|0;
         $832 = ((($831)) + 36|0);
         $833 = HEAP32[$832>>2]|0;
         __THREW__ = 0;
         $834 = (invoke_ii($833|0,($825|0))|0);
         $835 = __THREW__; __THREW__ = 0;
         $836 = $835&1;
         if ($836) {
          label = 19;
          break;
         } else {
          $$0$i$i = $834;
         }
        } else {
         $837 = HEAP8[$827>>0]|0;
         $838 = $837&255;
         $$0$i$i = $838;
        }
        $839 = $$0$i$i&255;
        $840 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $841 = $840 & 1;
        $842 = ($841<<24>>24)==(0);
        if ($842) {
         $845 = $784;
        } else {
         $843 = HEAP32[$785>>2]|0;
         $845 = $843;
        }
        $844 = (($845) + ($__i$0)|0);
        $846 = HEAP8[$844>>0]|0;
        $847 = ($839<<24>>24)==($846<<24>>24);
        if (!($847)) {
         label = 260;
         break;
        }
        $850 = (($__i$0) + 1)|0;
        $851 = HEAP32[$__b>>2]|0;
        $852 = ((($851)) + 12|0);
        $853 = HEAP32[$852>>2]|0;
        $854 = ((($851)) + 16|0);
        $855 = HEAP32[$854>>2]|0;
        $856 = ($853|0)==($855|0);
        if ($856) {
         $857 = HEAP32[$851>>2]|0;
         $858 = ((($857)) + 40|0);
         $859 = HEAP32[$858>>2]|0;
         __THREW__ = 0;
         (invoke_ii($859|0,($851|0))|0);
         $860 = __THREW__; __THREW__ = 0;
         $861 = $860&1;
         if ($861) {
          label = 19;
          break;
         } else {
          $__i$0 = $850;
          continue;
         }
        } else {
         $862 = ((($853)) + 1|0);
         HEAP32[$852>>2] = $862;
         $__i$0 = $850;
         continue;
        }
       }
       if ((label|0) == 19) {
        $68 = ___cxa_find_matching_catch()|0;
        $69 = tempRet0;
        $lpad$phi$index = $68;$lpad$phi$index7 = $69;
        break L1;
       }
       else if ((label|0) == 260) {
        $848 = HEAP32[$__err>>2]|0;
        $849 = $848 | 4;
        HEAP32[$__err>>2] = $849;
        $$0 = 0;
        break L300;
       }
      }
     } while(0);
     $863 = HEAP32[$__gb>>2]|0;
     $864 = ($863|0)==($$lcssa313|0);
     if ($864) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$863,$$lcssa313,$__et);
      $865 = HEAP32[$__et>>2]|0;
      $866 = ($865|0)==(0);
      if ($866) {
       $$0 = 1;
      } else {
       $867 = HEAP32[$__err>>2]|0;
       $868 = $867 | 4;
       HEAP32[$__err>>2] = $868;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $869 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $870 = ($869|0)==(0|0);
   if (!($870)) {
    $871 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($871|0,($869|0));
    $872 = __THREW__; __THREW__ = 0;
    $873 = $872&1;
    if ($873) {
     $874 = ___cxa_find_matching_catch(0|0)|0;
     $875 = tempRet0;
     ___clang_call_terminate($874);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $82 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $83 = ($82|0)==(0|0);
 if (!($83)) {
  $84 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($84|0,($82|0));
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   $87 = ___cxa_find_matching_catch(0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(493,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(352|0),(5|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$013 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $__wbuf = sp + 32|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 28|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (486);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(468,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $34;$$019 = $35;$96 = $__wbuf;
  label = 36;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(465,($__loc|0),(49876|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(487,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $23 = ((($__v)) + 1|0);
       HEAP8[$23>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP8[$21>>0] = 0;
       $22 = ((($__v)) + 4|0);
       HEAP32[$22>>2] = 0;
      }
      $24 = HEAP8[$__neg>>0]|0;
      $25 = ($24<<24>>24)==(0);
      if (!($25)) {
       $26 = HEAP32[$7>>2]|0;
       $27 = ((($26)) + 28|0);
       $28 = HEAP32[$27>>2]|0;
       __THREW__ = 0;
       $29 = (invoke_iii($28|0,($7|0),45)|0);
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(490,($__v|0),($29|0));
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        break;
       }
      }
      $36 = HEAP32[$7>>2]|0;
      $37 = ((($36)) + 28|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_iii($38|0,($7|0),48)|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       break;
      }
      $42 = HEAP32[$__wb>>2]|0;
      $43 = HEAP32[$__wn>>2]|0;
      $44 = ((($43)) + -1|0);
      $45 = ($42>>>0)<($44>>>0);
      L18: do {
       if ($45) {
        $__w$013 = $42;
        while(1) {
         $46 = HEAP8[$__w$013>>0]|0;
         $47 = ($46<<24>>24)==($39<<24>>24);
         if (!($47)) {
          $__w$0$lcssa = $__w$013;
          break L18;
         }
         $48 = ((($__w$013)) + 1|0);
         $49 = ($48>>>0)<($44>>>0);
         if ($49) {
          $__w$013 = $48;
         } else {
          $__w$0$lcssa = $48;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $42;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(494,($__v|0),($__w$0$lcssa|0),($43|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       break;
      }
     }
     $52 = HEAP32[$__b>>2]|0;
     $53 = ($52|0)==(0|0);
     do {
      if ($53) {
       $66 = 0;
      } else {
       $54 = ((($52)) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ((($52)) + 16|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($55|0)==($57|0);
       if ($58) {
        $59 = HEAP32[$52>>2]|0;
        $60 = ((($59)) + 36|0);
        $61 = HEAP32[$60>>2]|0;
        __THREW__ = 0;
        $62 = (invoke_ii($61|0,($52|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         break L4;
        }
        $65 = ($62|0)==(-1);
        if ($65) {
         HEAP32[$__b>>2] = 0;
         $66 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $66 = $$pre$i$i$i;
         break;
        }
       } else {
        $66 = $52;
       }
      }
     } while(0);
     $67 = ($66|0)==(0|0);
     $68 = ($10|0)==(0);
     do {
      if ($68) {
       label = 29;
      } else {
       $69 = ((($13)) + 12|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ((($13)) + 16|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($70|0)==($72|0);
       if ($73) {
        $74 = $10;
        $75 = HEAP32[$74>>2]|0;
        $76 = ((($75)) + 36|0);
        $77 = HEAP32[$76>>2]|0;
        __THREW__ = 0;
        $78 = (invoke_ii($77|0,($13|0))|0);
        $79 = __THREW__; __THREW__ = 0;
        $80 = $79&1;
        if ($80) {
         break L4;
        }
        $81 = ($78|0)==(-1);
        if ($81) {
         HEAP32[$__e>>2] = 0;
         label = 29;
         break;
        }
       }
       if (!($67)) {
        label = 30;
       }
      }
     } while(0);
     if ((label|0) == 29) {
      if ($67) {
       label = 30;
      }
     }
     if ((label|0) == 30) {
      $82 = HEAP32[$__err>>2]|0;
      $83 = $82 | 2;
      HEAP32[$__err>>2] = $83;
     }
     $84 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $85 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $86 = ($85|0)==(0|0);
     if (!($86)) {
      $87 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($87|0,($85|0));
      $88 = __THREW__; __THREW__ = 0;
      $89 = $88&1;
      if ($89) {
       $90 = ___cxa_find_matching_catch(0|0)|0;
       $91 = tempRet0;
       ___clang_call_terminate($90);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($84|0);
    }
   }
  } while(0);
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $94 = ($$pre|0)==(0|0);
  if ($94) {
   $$0110 = $93;$$012 = $92;
  } else {
   $$011 = $92;$$019 = $93;$96 = $$pre;
   label = 36;
  }
 }
 if ((label|0) == 36) {
  $95 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($95|0,($96|0));
  $97 = __THREW__; __THREW__ = 0;
  $98 = $97&1;
  if ($98) {
   $99 = ___cxa_find_matching_catch(0|0)|0;
   $100 = tempRet0;
   ___clang_call_terminate($99);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49484)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
   $14 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
   $15 = HEAP32[$10>>2]|0;
   $16 = ((($15)) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
   $18 = HEAP8[$__nsn>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $24 = ((($__nsn)) + 1|0);
    HEAP8[$24>>0] = 0;
    HEAP8[$__nsn>>0] = 0;
   } else {
    $21 = ((($__nsn)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP8[$22>>0] = 0;
    $23 = ((($__nsn)) + 4|0);
    HEAP32[$23>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__nsn|0),0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
   HEAP32[$1>>2] = 0;
   $29 = ((($1)) + 4|0);
   HEAP32[$29>>2] = 0;
   $30 = ((($1)) + 8|0);
   HEAP32[$30>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
   $31 = HEAP32[$10>>2]|0;
   $32 = ((($31)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vii[$33 & 1023]($2,$10);
   $34 = HEAP8[$__psn>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $40 = ((($__psn)) + 1|0);
    HEAP8[$40>>0] = 0;
    HEAP8[$__psn>>0] = 0;
   } else {
    $37 = ((($__psn)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    HEAP8[$38>>0] = 0;
    $39 = ((($__psn)) + 4|0);
    HEAP32[$39>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__psn|0),0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    $43 = ___cxa_find_matching_catch(0|0)|0;
    $44 = tempRet0;
    ___clang_call_terminate($43);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
   HEAP32[$2>>2] = 0;
   $45 = ((($2)) + 4|0);
   HEAP32[$45>>2] = 0;
   $46 = ((($2)) + 8|0);
   HEAP32[$46>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
   $47 = HEAP32[$10>>2]|0;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
   HEAP8[$__dp>>0] = $50;
   $51 = HEAP32[$10>>2]|0;
   $52 = ((($51)) + 16|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (FUNCTION_TABLE_ii[$53 & 1023]($10)|0);
   HEAP8[$__ts>>0] = $54;
   $55 = HEAP32[$10>>2]|0;
   $56 = ((($55)) + 20|0);
   $57 = HEAP32[$56>>2]|0;
   FUNCTION_TABLE_vii[$57 & 1023]($3,$10);
   $58 = HEAP8[$__grp>>0]|0;
   $59 = $58 & 1;
   $60 = ($59<<24>>24)==(0);
   if ($60) {
    $64 = ((($__grp)) + 1|0);
    HEAP8[$64>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $61 = ((($__grp)) + 8|0);
    $62 = HEAP32[$61>>2]|0;
    HEAP8[$62>>0] = 0;
    $63 = ((($__grp)) + 4|0);
    HEAP32[$63>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__grp|0),0);
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $67 = ___cxa_find_matching_catch(0|0)|0;
    $68 = tempRet0;
    ___clang_call_terminate($67);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
   HEAP32[$3>>2] = 0;
   $69 = ((($3)) + 4|0);
   HEAP32[$69>>2] = 0;
   $70 = ((($3)) + 8|0);
   HEAP32[$70>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $71 = HEAP32[$10>>2]|0;
   $72 = ((($71)) + 24|0);
   $73 = HEAP32[$72>>2]|0;
   FUNCTION_TABLE_vii[$73 & 1023]($4,$10);
   $74 = HEAP8[$__sym>>0]|0;
   $75 = $74 & 1;
   $76 = ($75<<24>>24)==(0);
   if ($76) {
    $80 = ((($__sym)) + 1|0);
    HEAP8[$80>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $77 = ((($__sym)) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    HEAP8[$78>>0] = 0;
    $79 = ((($__sym)) + 4|0);
    HEAP32[$79>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__sym|0),0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    $83 = ___cxa_find_matching_catch(0|0)|0;
    $84 = tempRet0;
    ___clang_call_terminate($83);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
    HEAP32[$4>>2] = 0;
    $85 = ((($4)) + 4|0);
    HEAP32[$85>>2] = 0;
    $86 = ((($4)) + 8|0);
    HEAP32[$86>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    $87 = HEAP32[$10>>2]|0;
    $88 = ((($87)) + 36|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (FUNCTION_TABLE_ii[$89 & 1023]($10)|0);
    $storemerge = $90;
    break;
   }
  } else {
   $91 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49420)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($92)) + 44|0);
   $94 = HEAP32[$93>>2]|0;
   FUNCTION_TABLE_vii[$94 & 1023]($5,$91);
   $95 = HEAP32[$5>>2]|0;
   HEAP8[$__pat>>0]=$95&255;HEAP8[$__pat+1>>0]=($95>>8)&255;HEAP8[$__pat+2>>0]=($95>>16)&255;HEAP8[$__pat+3>>0]=$95>>24;
   $96 = HEAP32[$91>>2]|0;
   $97 = ((($96)) + 32|0);
   $98 = HEAP32[$97>>2]|0;
   FUNCTION_TABLE_vii[$98 & 1023]($6,$91);
   $99 = HEAP8[$__nsn>>0]|0;
   $100 = $99 & 1;
   $101 = ($100<<24>>24)==(0);
   if ($101) {
    $105 = ((($__nsn)) + 1|0);
    HEAP8[$105>>0] = 0;
    HEAP8[$__nsn>>0] = 0;
   } else {
    $102 = ((($__nsn)) + 8|0);
    $103 = HEAP32[$102>>2]|0;
    HEAP8[$103>>0] = 0;
    $104 = ((($__nsn)) + 4|0);
    HEAP32[$104>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__nsn|0),0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   if ($107) {
    $108 = ___cxa_find_matching_catch(0|0)|0;
    $109 = tempRet0;
    ___clang_call_terminate($108);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
   HEAP32[$6>>2] = 0;
   $110 = ((($6)) + 4|0);
   HEAP32[$110>>2] = 0;
   $111 = ((($6)) + 8|0);
   HEAP32[$111>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $112 = HEAP32[$91>>2]|0;
   $113 = ((($112)) + 28|0);
   $114 = HEAP32[$113>>2]|0;
   FUNCTION_TABLE_vii[$114 & 1023]($7,$91);
   $115 = HEAP8[$__psn>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $121 = ((($__psn)) + 1|0);
    HEAP8[$121>>0] = 0;
    HEAP8[$__psn>>0] = 0;
   } else {
    $118 = ((($__psn)) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    HEAP8[$119>>0] = 0;
    $120 = ((($__psn)) + 4|0);
    HEAP32[$120>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__psn|0),0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    $124 = ___cxa_find_matching_catch(0|0)|0;
    $125 = tempRet0;
    ___clang_call_terminate($124);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
   HEAP32[$7>>2] = 0;
   $126 = ((($7)) + 4|0);
   HEAP32[$126>>2] = 0;
   $127 = ((($7)) + 8|0);
   HEAP32[$127>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $128 = HEAP32[$91>>2]|0;
   $129 = ((($128)) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 1023]($91)|0);
   HEAP8[$__dp>>0] = $131;
   $132 = HEAP32[$91>>2]|0;
   $133 = ((($132)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (FUNCTION_TABLE_ii[$134 & 1023]($91)|0);
   HEAP8[$__ts>>0] = $135;
   $136 = HEAP32[$91>>2]|0;
   $137 = ((($136)) + 20|0);
   $138 = HEAP32[$137>>2]|0;
   FUNCTION_TABLE_vii[$138 & 1023]($8,$91);
   $139 = HEAP8[$__grp>>0]|0;
   $140 = $139 & 1;
   $141 = ($140<<24>>24)==(0);
   if ($141) {
    $145 = ((($__grp)) + 1|0);
    HEAP8[$145>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $142 = ((($__grp)) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    HEAP8[$143>>0] = 0;
    $144 = ((($__grp)) + 4|0);
    HEAP32[$144>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__grp|0),0);
   $146 = __THREW__; __THREW__ = 0;
   $147 = $146&1;
   if ($147) {
    $148 = ___cxa_find_matching_catch(0|0)|0;
    $149 = tempRet0;
    ___clang_call_terminate($148);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
   HEAP32[$8>>2] = 0;
   $150 = ((($8)) + 4|0);
   HEAP32[$150>>2] = 0;
   $151 = ((($8)) + 8|0);
   HEAP32[$151>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
   $152 = HEAP32[$91>>2]|0;
   $153 = ((($152)) + 24|0);
   $154 = HEAP32[$153>>2]|0;
   FUNCTION_TABLE_vii[$154 & 1023]($9,$91);
   $155 = HEAP8[$__sym>>0]|0;
   $156 = $155 & 1;
   $157 = ($156<<24>>24)==(0);
   if ($157) {
    $161 = ((($__sym)) + 1|0);
    HEAP8[$161>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $158 = ((($__sym)) + 8|0);
    $159 = HEAP32[$158>>2]|0;
    HEAP8[$159>>0] = 0;
    $160 = ((($__sym)) + 4|0);
    HEAP32[$160>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__sym|0),0);
   $162 = __THREW__; __THREW__ = 0;
   $163 = $162&1;
   if ($163) {
    $164 = ___cxa_find_matching_catch(0|0)|0;
    $165 = tempRet0;
    ___clang_call_terminate($164);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
    HEAP32[$9>>2] = 0;
    $166 = ((($9)) + 4|0);
    HEAP32[$166>>2] = 0;
    $167 = ((($9)) + 8|0);
    HEAP32[$167>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
    $168 = HEAP32[$91>>2]|0;
    $169 = ((($168)) + 36|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (FUNCTION_TABLE_ii[$170 & 1023]($91)|0);
    $storemerge = $171;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$01$i$i22 = 0, $$__ig$0 = 0, $$lcssa = 0, $$not = 0, $$not16 = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$018 = 0, $__r$019 = 0;
 var $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond217 = 0, $or$cond220 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__grouping)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7|0)==(0);
 L1: do {
  if (!($8)) {
   $9 = ($__g|0)==($__g_end|0);
   if ($9) {
    $19 = $0;$27 = $4;
   } else {
    $10 = ((($__g_end)) + -4|0);
    $11 = ($10>>>0)>($__g>>>0);
    if ($11) {
     $$01$i$i22 = $__g;$14 = $10;
     while(1) {
      $12 = HEAP32[$$01$i$i22>>2]|0;
      $13 = HEAP32[$14>>2]|0;
      HEAP32[$$01$i$i22>>2] = $13;
      HEAP32[$14>>2] = $12;
      $15 = ((($$01$i$i22)) + 4|0);
      $16 = ((($14)) + -4|0);
      $17 = ($15>>>0)<($16>>>0);
      if ($17) {
       $$01$i$i22 = $15;$14 = $16;
      } else {
       break;
      }
     }
    }
    $$pre = HEAP8[$__grouping>>0]|0;
    $$pre11 = HEAP32[$3>>2]|0;
    $19 = $$pre;$27 = $$pre11;
   }
   $18 = $19 & 1;
   $20 = ($18<<24>>24)==(0);
   $21 = ((($__grouping)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($__grouping)) + 1|0);
   $24 = $20 ? $23 : $22;
   $25 = $19&255;
   $26 = $25 >>> 1;
   $28 = $20 ? $26 : $27;
   $29 = (($24) + ($28)|0);
   $30 = ((($__g_end)) + -4|0);
   $31 = $29;
   $32 = ($30>>>0)>($__g>>>0);
   $33 = HEAP8[$24>>0]|0;
   $$not16 = ($33<<24>>24)<(1);
   $34 = ($33<<24>>24)==(127);
   $or$cond217 = $$not16 | $34;
   L10: do {
    if ($32) {
     $36 = $33;$__ig$018 = $24;$__r$019 = $__g;$or$cond220 = $or$cond217;
     while(1) {
      if (!($or$cond220)) {
       $35 = $36 << 24 >> 24;
       $37 = HEAP32[$__r$019>>2]|0;
       $38 = ($35|0)==($37|0);
       if (!($38)) {
        break;
       }
      }
      $39 = $__ig$018;
      $40 = (($31) - ($39))|0;
      $41 = ($40|0)>(1);
      $42 = ((($__ig$018)) + 1|0);
      $$__ig$0 = $41 ? $42 : $__ig$018;
      $43 = ((($__r$019)) + 4|0);
      $44 = ($43>>>0)<($30>>>0);
      $45 = HEAP8[$$__ig$0>>0]|0;
      $$not = ($45<<24>>24)<(1);
      $46 = ($45<<24>>24)==(127);
      $or$cond2 = $$not | $46;
      if ($44) {
       $36 = $45;$__ig$018 = $$__ig$0;$__r$019 = $43;$or$cond220 = $or$cond2;
      } else {
       $$lcssa = $45;$or$cond2$lcssa = $or$cond2;
       break L10;
      }
     }
     HEAP32[$__err>>2] = 4;
     break L1;
    } else {
     $$lcssa = $33;$or$cond2$lcssa = $or$cond217;
    }
   } while(0);
   if (!($or$cond2$lcssa)) {
    $47 = $$lcssa << 24 >> 24;
    $48 = HEAP32[$30>>2]|0;
    $49 = (($48) + -1)|0;
    $50 = ($49>>>0)<($47>>>0);
    if (!($50)) {
     HEAP32[$__err>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$112 = 0, $$113 = 0, $$1210 = 0, $$1211 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre14 = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$216 = 0, $__neg = 0, $__w$017 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 72|0;
 $__wb = sp + 64|0;
 $__wn = sp + 56|0;
 $__loc = sp + 52|0;
 $__neg = sp + 576|0;
 $0 = sp + 48|0;
 $__atoms = sp + 8|0;
 $__nbuf = sp + 476|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (486);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(468,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$112 = $34;$$1210 = $35;$121 = 486;$122 = $__wbuf;
  label = 47;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(465,($__loc|0),(49868|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(496,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 48|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(77281|0),((77291)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = $21;
       $24 = $22;
       $25 = (($23) - ($24))|0;
       $26 = ($25|0)>(392);
       if ($26) {
        $27 = $25 >> 2;
        $28 = (($27) + 2)|0;
        $29 = (_malloc($28)|0);
        $30 = $29;
        $31 = ($29|0)==(0|0);
        if ($31) {
         __THREW__ = 0;
         invoke_v(475);
         $32 = __THREW__; __THREW__ = 0;
         $33 = $32&1;
         if ($33) {
          $40 = $30;
         } else {
          $75 = $30;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $75 = $30;$__nc$0 = $29;
         label = 13;
        }
       } else {
        $75 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $43 = HEAP8[$__neg>>0]|0;
         $44 = ($43<<24>>24)==(0);
         if ($44) {
          $__nc$1 = $__nc$0;
         } else {
          $45 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $45;
         }
         $46 = ((($__atoms)) + 40|0);
         $47 = $__atoms;
         $48 = ($22>>>0)<($21>>>0);
         if ($48) {
          $49 = ((($__atoms)) + 4|0);
          $50 = ((($49)) + 4|0);
          $51 = ((($50)) + 4|0);
          $52 = ((($51)) + 4|0);
          $53 = ((($52)) + 4|0);
          $54 = ((($53)) + 4|0);
          $55 = ((($54)) + 4|0);
          $56 = ((($55)) + 4|0);
          $57 = ((($56)) + 4|0);
          $__nc$216 = $__nc$1;$__w$017 = $22;
          while(1) {
           $58 = HEAP32[$__w$017>>2]|0;
           $59 = HEAP32[$__atoms>>2]|0;
           $60 = ($59|0)==($58|0);
           do {
            if ($60) {
             $$0$lcssa$i = $__atoms;
            } else {
             $61 = HEAP32[$49>>2]|0;
             $62 = ($61|0)==($58|0);
             if ($62) {
              $$0$lcssa$i = $49;
             } else {
              $127 = HEAP32[$50>>2]|0;
              $128 = ($127|0)==($58|0);
              if ($128) {
               $$0$lcssa$i = $50;
              } else {
               $129 = HEAP32[$51>>2]|0;
               $130 = ($129|0)==($58|0);
               if ($130) {
                $$0$lcssa$i = $51;
               } else {
                $131 = HEAP32[$52>>2]|0;
                $132 = ($131|0)==($58|0);
                if ($132) {
                 $$0$lcssa$i = $52;
                } else {
                 $133 = HEAP32[$53>>2]|0;
                 $134 = ($133|0)==($58|0);
                 if ($134) {
                  $$0$lcssa$i = $53;
                  break;
                 }
                 $135 = HEAP32[$54>>2]|0;
                 $136 = ($135|0)==($58|0);
                 if ($136) {
                  $$0$lcssa$i = $54;
                  break;
                 }
                 $137 = HEAP32[$55>>2]|0;
                 $138 = ($137|0)==($58|0);
                 if ($138) {
                  $$0$lcssa$i = $55;
                  break;
                 }
                 $139 = HEAP32[$56>>2]|0;
                 $140 = ($139|0)==($58|0);
                 if ($140) {
                  $$0$lcssa$i = $56;
                  break;
                 }
                 $141 = HEAP32[$57>>2]|0;
                 $142 = ($141|0)==($58|0);
                 $$ = $142 ? $57 : $46;
                 $$0$lcssa$i = $$;
                }
               }
              }
             }
            }
           } while(0);
           $63 = $$0$lcssa$i;
           $64 = (($63) - ($47))|0;
           $65 = $64 >> 2;
           $66 = (77281 + ($65)|0);
           $67 = HEAP8[$66>>0]|0;
           HEAP8[$__nc$216>>0] = $67;
           $68 = ((($__w$017)) + 4|0);
           $69 = ((($__nc$216)) + 1|0);
           $$pre = HEAP32[$__wn>>2]|0;
           $70 = ($68>>>0)<($$pre>>>0);
           if ($70) {
            $__nc$216 = $69;$__w$017 = $68;
           } else {
            $__nc$2$lcssa = $69;
            break;
           }
          }
         } else {
          $__nc$2$lcssa = $__nc$1;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $71 = (_sscanf($__nbuf,77261,$vararg_buffer)|0);
         $72 = ($71|0)==(1);
         if (!($72)) {
          __THREW__ = 0;
          invoke_vi(488,(77265|0));
          $73 = __THREW__; __THREW__ = 0;
          $74 = $73&1;
          if ($74) {
           $40 = $75;
           break;
          }
         }
         $76 = ($75|0)==(0);
         if (!($76)) {
          $77 = $75;
          _free($77);
         }
         break L7;
        }
       } while(0);
       $38 = ___cxa_find_matching_catch()|0;
       $39 = tempRet0;
       $41 = ($40|0)==(0);
       if ($41) {
        $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $42 = $40;
       _free($42);
       $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $78 = HEAP32[$__b>>2]|0;
     $79 = ($78|0)==(0|0);
     do {
      if ($79) {
       $143 = 1;
      } else {
       $80 = ((($78)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ((($78)) + 16|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ($81|0)==($83|0);
       if ($84) {
        $85 = HEAP32[$78>>2]|0;
        $86 = ((($85)) + 36|0);
        $87 = HEAP32[$86>>2]|0;
        __THREW__ = 0;
        $88 = (invoke_ii($87|0,($78|0))|0);
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         label = 10;
         break L4;
        } else {
         $$0$i$i$i$i = $88;
        }
       } else {
        $91 = HEAP32[$81>>2]|0;
        $$0$i$i$i$i = $91;
       }
       $92 = ($$0$i$i$i$i|0)==(-1);
       if ($92) {
        HEAP32[$__b>>2] = 0;
        $143 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $143 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $93 = HEAP32[$__e>>2]|0;
     $94 = ($93|0)==(0|0);
     do {
      if ($94) {
       label = 38;
      } else {
       $95 = ((($93)) + 12|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = ((($93)) + 16|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = ($96|0)==($98|0);
       if ($99) {
        $100 = HEAP32[$93>>2]|0;
        $101 = ((($100)) + 36|0);
        $102 = HEAP32[$101>>2]|0;
        __THREW__ = 0;
        $103 = (invoke_ii($102|0,($93|0))|0);
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if ($105) {
         label = 10;
         break L4;
        } else {
         $$0$i$i1$i$i = $103;
        }
       } else {
        $106 = HEAP32[$96>>2]|0;
        $$0$i$i1$i$i = $106;
       }
       $107 = ($$0$i$i1$i$i|0)==(-1);
       if ($107) {
        HEAP32[$__e>>2] = 0;
        label = 38;
        break;
       } else {
        if ($143) {
         break;
        } else {
         label = 40;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 38) {
      if ($143) {
       label = 40;
      }
     }
     if ((label|0) == 40) {
      $108 = HEAP32[$__err>>2]|0;
      $109 = $108 | 2;
      HEAP32[$__err>>2] = $109;
     }
     $110 = HEAP32[$__b>>2]|0;
     $111 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($111)|0);
     $112 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $113 = ($112|0)==(0|0);
     if (!($113)) {
      $114 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($114|0,($112|0));
      $115 = __THREW__; __THREW__ = 0;
      $116 = $115&1;
      if ($116) {
       $117 = ___cxa_find_matching_catch(0|0)|0;
       $118 = tempRet0;
       ___clang_call_terminate($117);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($110|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $36 = ___cxa_find_matching_catch()|0;
   $37 = tempRet0;
   $$0 = $36;$$01 = $37;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $119 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($119)|0);
  $$pre6 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $120 = ($$pre6|0)==(0|0);
  if ($120) {
   $$113 = $$0;$$1211 = $$01;
  } else {
   $$pre14 = HEAP32[$2>>2]|0;
   $$112 = $$0;$$1210 = $$01;$121 = $$pre14;$122 = $$pre6;
   label = 47;
  }
 }
 if ((label|0) == 47) {
  __THREW__ = 0;
  invoke_vi($121|0,($122|0));
  $123 = __THREW__; __THREW__ = 0;
  $124 = $123&1;
  if ($124) {
   $125 = ___cxa_find_matching_catch(0|0)|0;
   $126 = tempRet0;
   ___clang_call_terminate($125);
   // unreachable;
  } else {
   $$113 = $$112;$$1211 = $$1210;
  }
 }
 ___resumeException($$113|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i126 = 0, $$0$i$i$i$i158 = 0, $$0$i$i$i$i183 = 0, $$0$i$i$i$i30 = 0, $$0$i$i$i$i51 = 0, $$0$i$i$i$i92 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i132 = 0, $$0$i$i1$i$i164 = 0, $$0$i$i1$i$i189 = 0, $$0$i$i1$i$i36 = 0, $$0$i$i1$i$i57 = 0, $$0$i$i1$i$i98 = 0, $$0$i$i110 = 0, $$0$i$i119 = 0, $$0$i$i122 = 0, $$0$i$i144 = 0;
 var $$0$i$i155 = 0, $$0$i$i179 = 0, $$0$i$i45 = 0, $$0$i$i49 = 0, $$0$i$i66 = 0, $$0$i$i73 = 0, $$0$i$i78 = 0, $$0$i$i86 = 0, $$0$i$i89 = 0, $$in386 = 0, $$lcssa261 = 0, $$lcssa357 = 0, $$lcssa416 = 0, $$lcssa418 = 0, $$ph = 0, $$ph345 = 0, $$ph346 = 0, $$phi$trans$insert = 0, $$phi$trans$insert296 = 0, $$pre = 0;
 var $$pre$i$i$i = 0, $$pre$i$i$i128 = 0, $$pre$i$i$i160 = 0, $$pre$i$i$i185 = 0, $$pre$i$i$i32 = 0, $$pre$i$i$i53 = 0, $$pre$i$i$i94 = 0, $$pre$i3$i$i100282$ph = 0, $$pre$i3$i$i100282306 = 0, $$pre$i3$i$i100382 = 0, $$pre$i3$i$i134 = 0, $$pre$i3$i$i166 = 0, $$pre$i3$i$i166275 = 0, $$pre$i3$i$i166277 = 0, $$pre$i3$i$i191290 = 0, $$pre$i3$i$i191291 = 0, $$pre$i3$i$i191391 = 0, $$pre$i3$i$i59 = 0, $$pre$i3$i$i59300 = 0, $$pre$i3$i$i59302 = 0;
 var $$pre279 = 0, $$pre281 = 0, $$pre284 = 0, $$pre285 = 0, $$pre286 = 0, $$pre287 = 0, $$pre288 = 0, $$pre289 = 0, $$pre293 = 0, $$pre294 = 0, $$pre295 = 0, $$pre297 = 0, $$pre298 = 0, $$pre299 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0;
 var $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa417 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0397 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0399 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0;
 var $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i129 = 0, $phitmp$i$i$i161 = 0, $phitmp$i$i$i186 = 0, $phitmp$i$i$i33 = 0, $phitmp$i$i$i54 = 0, $phitmp$i$i$i95 = 0, $phitmp$i4$i$i101 = 0, $phitmp$i4$i$i167 = 0, $phitmp$i4$i$i192 = 0, $phitmp$i4$i$i60 = 0, $switch = 0, $tmp$i$i103 = 0, $tmp$i$i169 = 0;
 var $tmp$i$i194 = 0, $tmp$i$i62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 88|0;
 $__gn = sp + 80|0;
 $__ge = sp + 76|0;
 $__pat = sp + 500|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (486);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 HEAP32[$__grp>>2] = 0;
 $4 = ((($__grp)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($__grp)) + 8|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$__sym>>2] = 0;
 $6 = ((($__sym)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($__sym)) + 8|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$__psn>>2] = 0;
 $8 = ((($__psn)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($__psn)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$__nsn>>2] = 0;
 $10 = ((($__nsn)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($__nsn)) + 8|0);
 HEAP32[$11>>2] = 0;
 HEAP32[$__spaces>>2] = 0;
 $12 = ((($__spaces)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($__spaces)) + 8|0);
 HEAP32[$13>>2] = 0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(497,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L1: do {
  if ($15) {
   $77 = ___cxa_find_matching_catch()|0;
   $78 = tempRet0;
   $lpad$phi$index = $77;$lpad$phi$index8 = $78;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__psn)) + 4|0);
   $18 = ((($__nsn)) + 4|0);
   $19 = ((($__nsn)) + 8|0);
   $20 = ((($__psn)) + 8|0);
   $21 = $__flags & 512;
   $22 = ($21|0)!=(0);
   $23 = ((($__sym)) + 8|0);
   $24 = ((($__sym)) + 4|0);
   $25 = ((($__spaces)) + 4|0);
   $26 = ((($__spaces)) + 8|0);
   $27 = ((($__pat)) + 3|0);
   $28 = ((($__grp)) + 4|0);
   $863 = $__gbuf;$__p$0397 = 0;$__trailing_sign$0399 = 0;
   L4: while(1) {
    $29 = HEAP32[$__b>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      $864 = 1;
     } else {
      $31 = ((($29)) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ((($29)) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if ($35) {
       $36 = HEAP32[$29>>2]|0;
       $37 = ((($36)) + 36|0);
       $38 = HEAP32[$37>>2]|0;
       __THREW__ = 0;
       $39 = (invoke_ii($38|0,($29|0))|0);
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if ($41) {
        label = 26;
        break L4;
       } else {
        $$0$i$i$i$i30 = $39;
       }
      } else {
       $42 = HEAP32[$32>>2]|0;
       $$0$i$i$i$i30 = $42;
      }
      $43 = ($$0$i$i$i$i30|0)==(-1);
      if ($43) {
       HEAP32[$__b>>2] = 0;
       $864 = 1;
       break;
      } else {
       $$pre$i$i$i32 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i33 = ($$pre$i$i$i32|0)==(0|0);
       $864 = $phitmp$i$i$i33;
       break;
      }
     }
    } while(0);
    $44 = HEAP32[$__e>>2]|0;
    $45 = ($44|0)==(0|0);
    do {
     if ($45) {
      label = 16;
     } else {
      $46 = ((($44)) + 12|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ((($44)) + 16|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($47|0)==($49|0);
      if ($50) {
       $51 = HEAP32[$44>>2]|0;
       $52 = ((($51)) + 36|0);
       $53 = HEAP32[$52>>2]|0;
       __THREW__ = 0;
       $54 = (invoke_ii($53|0,($44|0))|0);
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if ($56) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i36 = $54;
       }
      } else {
       $57 = HEAP32[$47>>2]|0;
       $$0$i$i1$i$i36 = $57;
      }
      $58 = ($$0$i$i1$i$i36|0)==(-1);
      if ($58) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($864) {
        $865 = $44;
        break;
       } else {
        $$lcssa357 = $863;$__trailing_sign$0$lcssa = $__trailing_sign$0399;
        label = 244;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($864) {
      $$lcssa357 = $863;$__trailing_sign$0$lcssa = $__trailing_sign$0399;
      label = 244;
      break;
     } else {
      $865 = 0;
     }
    }
    $59 = (($__pat) + ($__p$0397)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    L28: do {
     switch ($61|0) {
     case 1:  {
      $cond = ($__p$0397|0)==(3);
      if ($cond) {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      } else {
       $86 = HEAP32[$__b>>2]|0;
       $87 = ((($86)) + 12|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ((($86)) + 16|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ($88|0)==($90|0);
       if ($91) {
        $92 = HEAP32[$86>>2]|0;
        $93 = ((($92)) + 36|0);
        $94 = HEAP32[$93>>2]|0;
        __THREW__ = 0;
        $95 = (invoke_ii($94|0,($86|0))|0);
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         label = 26;
         break L4;
        } else {
         $$0$i$i45 = $95;
        }
       } else {
        $98 = HEAP32[$88>>2]|0;
        $$0$i$i45 = $98;
       }
       $99 = HEAP32[$__ct>>2]|0;
       $100 = ((($99)) + 12|0);
       $101 = HEAP32[$100>>2]|0;
       __THREW__ = 0;
       $102 = (invoke_iiii($101|0,($__ct|0),8192,($$0$i$i45|0))|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 26;
        break L4;
       }
       if (!($102)) {
        label = 42;
        break L4;
       }
       $105 = HEAP32[$__b>>2]|0;
       $106 = ((($105)) + 12|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ((($105)) + 16|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($107|0)==($109|0);
       if ($110) {
        $111 = HEAP32[$105>>2]|0;
        $112 = ((($111)) + 40|0);
        $113 = HEAP32[$112>>2]|0;
        __THREW__ = 0;
        $114 = (invoke_ii($113|0,($105|0))|0);
        $115 = __THREW__; __THREW__ = 0;
        $116 = $115&1;
        if ($116) {
         label = 26;
         break L4;
        } else {
         $$0$i$i49 = $114;
        }
       } else {
        $117 = ((($107)) + 4|0);
        HEAP32[$106>>2] = $117;
        $118 = HEAP32[$107>>2]|0;
        $$0$i$i49 = $118;
       }
       __THREW__ = 0;
       invoke_vii(498,($__spaces|0),($$0$i$i49|0));
       $119 = __THREW__; __THREW__ = 0;
       $120 = $119&1;
       if ($120) {
        label = 26;
        break L4;
       } else {
        $$pre$i3$i$i59 = $865;$139 = $865;
        label = 44;
       }
      }
      break;
     }
     case 0:  {
      $123 = ($__p$0397|0)==(3);
      if ($123) {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      } else {
       $$pre$i3$i$i59 = $865;$139 = $865;
       label = 44;
      }
      break;
     }
     case 3:  {
      $190 = HEAP8[$__psn>>0]|0;
      $191 = $190 & 1;
      $192 = ($191<<24>>24)==(0);
      $193 = HEAP32[$17>>2]|0;
      $194 = $190&255;
      $195 = $194 >>> 1;
      $196 = $192 ? $195 : $193;
      $197 = HEAP8[$__nsn>>0]|0;
      $198 = $197 & 1;
      $199 = ($198<<24>>24)==(0);
      $200 = HEAP32[$18>>2]|0;
      $201 = $197&255;
      $202 = $201 >>> 1;
      $203 = $199 ? $202 : $200;
      $204 = (0 - ($203))|0;
      $205 = ($196|0)==($204|0);
      if ($205) {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      } else {
       $206 = ($196|0)==(0);
       if ($206) {
        $248 = HEAP32[$__b>>2]|0;
        $249 = ((($248)) + 12|0);
        $250 = HEAP32[$249>>2]|0;
        $251 = ((($248)) + 16|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = ($250|0)==($252|0);
        if ($253) {
         $254 = HEAP32[$248>>2]|0;
         $255 = ((($254)) + 36|0);
         $256 = HEAP32[$255>>2]|0;
         __THREW__ = 0;
         $257 = (invoke_ii($256|0,($248|0))|0);
         $258 = __THREW__; __THREW__ = 0;
         $259 = $258&1;
         if ($259) {
          label = 26;
          break L4;
         }
         $$pre299 = HEAP8[$__nsn>>0]|0;
         $$0$i$i110 = $257;$262 = $$pre299;
        } else {
         $260 = HEAP32[$250>>2]|0;
         $$0$i$i110 = $260;$262 = $197;
        }
        $261 = $262 & 1;
        $263 = ($261<<24>>24)==(0);
        $264 = HEAP32[$19>>2]|0;
        $265 = $263 ? $18 : $264;
        $266 = HEAP32[$265>>2]|0;
        $267 = ($$0$i$i110|0)==($266|0);
        if (!($267)) {
         $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
         break L28;
        }
        $268 = HEAP32[$__b>>2]|0;
        $269 = ((($268)) + 12|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = ((($268)) + 16|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($270|0)==($272|0);
        if ($273) {
         $274 = HEAP32[$268>>2]|0;
         $275 = ((($274)) + 40|0);
         $276 = HEAP32[$275>>2]|0;
         __THREW__ = 0;
         (invoke_ii($276|0,($268|0))|0);
         $277 = __THREW__; __THREW__ = 0;
         $278 = $277&1;
         if ($278) {
          label = 26;
          break L4;
         }
        } else {
         $279 = ((($270)) + 4|0);
         HEAP32[$269>>2] = $279;
        }
        HEAP8[$__neg>>0] = 1;
        $280 = HEAP8[$__nsn>>0]|0;
        $281 = $280 & 1;
        $282 = ($281<<24>>24)==(0);
        $283 = HEAP32[$18>>2]|0;
        $284 = $280&255;
        $285 = $284 >>> 1;
        $286 = $282 ? $285 : $283;
        $287 = ($286>>>0)>(1);
        $__nsn$__trailing_sign$0 = $287 ? $__nsn : $__trailing_sign$0399;
        $866 = $863;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L28;
       }
       $207 = ($203|0)==(0);
       $208 = HEAP32[$__b>>2]|0;
       $209 = ((($208)) + 12|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = ((($208)) + 16|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = ($210|0)==($212|0);
       if ($207) {
        if ($213) {
         $214 = HEAP32[$208>>2]|0;
         $215 = ((($214)) + 36|0);
         $216 = HEAP32[$215>>2]|0;
         __THREW__ = 0;
         $217 = (invoke_ii($216|0,($208|0))|0);
         $218 = __THREW__; __THREW__ = 0;
         $219 = $218&1;
         if ($219) {
          label = 26;
          break L4;
         }
         $$pre298 = HEAP8[$__psn>>0]|0;
         $$0$i$i89 = $217;$222 = $$pre298;
        } else {
         $220 = HEAP32[$210>>2]|0;
         $$0$i$i89 = $220;$222 = $190;
        }
        $221 = $222 & 1;
        $223 = ($221<<24>>24)==(0);
        $224 = HEAP32[$20>>2]|0;
        $225 = $223 ? $17 : $224;
        $226 = HEAP32[$225>>2]|0;
        $227 = ($$0$i$i89|0)==($226|0);
        if (!($227)) {
         HEAP8[$__neg>>0] = 1;
         $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
         break L28;
        }
        $228 = HEAP32[$__b>>2]|0;
        $229 = ((($228)) + 12|0);
        $230 = HEAP32[$229>>2]|0;
        $231 = ((($228)) + 16|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = ($230|0)==($232|0);
        if ($233) {
         $234 = HEAP32[$228>>2]|0;
         $235 = ((($234)) + 40|0);
         $236 = HEAP32[$235>>2]|0;
         __THREW__ = 0;
         (invoke_ii($236|0,($228|0))|0);
         $237 = __THREW__; __THREW__ = 0;
         $238 = $237&1;
         if ($238) {
          label = 26;
          break L4;
         }
        } else {
         $239 = ((($230)) + 4|0);
         HEAP32[$229>>2] = $239;
        }
        $240 = HEAP8[$__psn>>0]|0;
        $241 = $240 & 1;
        $242 = ($241<<24>>24)==(0);
        $243 = HEAP32[$17>>2]|0;
        $244 = $240&255;
        $245 = $244 >>> 1;
        $246 = $242 ? $245 : $243;
        $247 = ($246>>>0)>(1);
        $__psn$__trailing_sign$0 = $247 ? $__psn : $__trailing_sign$0399;
        $866 = $863;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L28;
       }
       if ($213) {
        $288 = HEAP32[$208>>2]|0;
        $289 = ((($288)) + 36|0);
        $290 = HEAP32[$289>>2]|0;
        __THREW__ = 0;
        $291 = (invoke_ii($290|0,($208|0))|0);
        $292 = __THREW__; __THREW__ = 0;
        $293 = $292&1;
        if ($293) {
         label = 26;
         break L4;
        }
        $$pre293 = HEAP8[$__psn>>0]|0;
        $$pre294 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre294)) + 12|0);
        $$pre295 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert296 = ((($$pre294)) + 16|0);
        $$pre297 = HEAP32[$$phi$trans$insert296>>2]|0;
        $$0$i$i122 = $291;$296 = $$pre293;$303 = $$pre294;$304 = $$pre295;$306 = $$pre297;
       } else {
        $294 = HEAP32[$210>>2]|0;
        $$0$i$i122 = $294;$296 = $190;$303 = $208;$304 = $210;$306 = $212;
       }
       $295 = $296 & 1;
       $297 = ($295<<24>>24)==(0);
       $298 = HEAP32[$20>>2]|0;
       $299 = $297 ? $17 : $298;
       $300 = HEAP32[$299>>2]|0;
       $301 = ($$0$i$i122|0)==($300|0);
       $302 = ((($303)) + 12|0);
       $305 = ($304|0)==($306|0);
       if ($301) {
        if ($305) {
         $307 = HEAP32[$303>>2]|0;
         $308 = ((($307)) + 40|0);
         $309 = HEAP32[$308>>2]|0;
         __THREW__ = 0;
         (invoke_ii($309|0,($303|0))|0);
         $310 = __THREW__; __THREW__ = 0;
         $311 = $310&1;
         if ($311) {
          label = 26;
          break L4;
         }
        } else {
         $312 = ((($304)) + 4|0);
         HEAP32[$302>>2] = $312;
        }
        $313 = HEAP8[$__psn>>0]|0;
        $314 = $313 & 1;
        $315 = ($314<<24>>24)==(0);
        $316 = HEAP32[$17>>2]|0;
        $317 = $313&255;
        $318 = $317 >>> 1;
        $319 = $315 ? $318 : $316;
        $320 = ($319>>>0)>(1);
        $__psn$__trailing_sign$010 = $320 ? $__psn : $__trailing_sign$0399;
        $866 = $863;$__trailing_sign$1 = $__psn$__trailing_sign$010;
        break L28;
       }
       if ($305) {
        $321 = HEAP32[$303>>2]|0;
        $322 = ((($321)) + 36|0);
        $323 = HEAP32[$322>>2]|0;
        __THREW__ = 0;
        $324 = (invoke_ii($323|0,($303|0))|0);
        $325 = __THREW__; __THREW__ = 0;
        $326 = $325&1;
        if ($326) {
         label = 26;
         break L4;
        } else {
         $$0$i$i144 = $324;
        }
       } else {
        $327 = HEAP32[$304>>2]|0;
        $$0$i$i144 = $327;
       }
       $328 = HEAP8[$__nsn>>0]|0;
       $329 = $328 & 1;
       $330 = ($329<<24>>24)==(0);
       $331 = HEAP32[$19>>2]|0;
       $332 = $330 ? $18 : $331;
       $333 = HEAP32[$332>>2]|0;
       $334 = ($$0$i$i144|0)==($333|0);
       if (!($334)) {
        label = 107;
        break L4;
       }
       $335 = HEAP32[$__b>>2]|0;
       $336 = ((($335)) + 12|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ((($335)) + 16|0);
       $339 = HEAP32[$338>>2]|0;
       $340 = ($337|0)==($339|0);
       if ($340) {
        $341 = HEAP32[$335>>2]|0;
        $342 = ((($341)) + 40|0);
        $343 = HEAP32[$342>>2]|0;
        __THREW__ = 0;
        (invoke_ii($343|0,($335|0))|0);
        $344 = __THREW__; __THREW__ = 0;
        $345 = $344&1;
        if ($345) {
         label = 26;
         break L4;
        }
       } else {
        $346 = ((($337)) + 4|0);
        HEAP32[$336>>2] = $346;
       }
       HEAP8[$__neg>>0] = 1;
       $347 = HEAP8[$__nsn>>0]|0;
       $348 = $347 & 1;
       $349 = ($348<<24>>24)==(0);
       $350 = HEAP32[$18>>2]|0;
       $351 = $347&255;
       $352 = $351 >>> 1;
       $353 = $349 ? $352 : $350;
       $354 = ($353>>>0)>(1);
       $__nsn$__trailing_sign$011 = $354 ? $__nsn : $__trailing_sign$0399;
       $866 = $863;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
      }
      break;
     }
     case 2:  {
      $357 = ($__trailing_sign$0399|0)!=(0|0);
      $358 = ($__p$0397>>>0)<(2);
      $or$cond = $358 | $357;
      if (!($or$cond)) {
       $359 = ($__p$0397|0)==(2);
       $360 = HEAP8[$27>>0]|0;
       $361 = ($360<<24>>24)!=(0);
       $362 = $359 & $361;
       $brmerge = $22 | $362;
       if (!($brmerge)) {
        $866 = $863;$__trailing_sign$1 = 0;
        break L28;
       }
      }
      $363 = HEAP8[$__sym>>0]|0;
      $364 = $363 & 1;
      $365 = ($364<<24>>24)==(0);
      $366 = HEAP32[$23>>2]|0;
      $367 = $365 ? $24 : $366;
      $368 = $367;
      $369 = ($__p$0397|0)==(0);
      L97: do {
       if ($369) {
        $$ph = $366;$$ph345 = $363;$$ph346 = $368;
       } else {
        $380 = (($__p$0397) + -1)|0;
        $381 = (($__pat) + ($380)|0);
        $382 = HEAP8[$381>>0]|0;
        $switch = ($382&255)<(2);
        if ($switch) {
         $383 = $363 & 1;
         $384 = ($383<<24>>24)==(0);
         $385 = HEAP32[$24>>2]|0;
         $386 = $363&255;
         $387 = $386 >>> 1;
         $388 = $384 ? $24 : $366;
         $389 = $384 ? $387 : $385;
         $390 = (($388) + ($389<<2)|0);
         $391 = ($367|0)==($390|0);
         L100: do {
          if ($391) {
           $412 = $363;$414 = $366;$418 = $368;
          } else {
           $393 = $367;$868 = $368;
           while(1) {
            $392 = HEAP32[$393>>2]|0;
            $394 = HEAP32[$__ct>>2]|0;
            $395 = ((($394)) + 12|0);
            $396 = HEAP32[$395>>2]|0;
            __THREW__ = 0;
            $397 = (invoke_iiii($396|0,($__ct|0),8192,($392|0))|0);
            $398 = __THREW__; __THREW__ = 0;
            $399 = $398&1;
            if ($399) {
             label = 23;
             break L4;
            }
            if (!($397)) {
             $$lcssa418 = $868;
             break;
            }
            $400 = ((($393)) + 4|0);
            $401 = $400;
            $$pre284 = HEAP8[$__sym>>0]|0;
            $$pre285 = HEAP32[$23>>2]|0;
            $402 = $$pre284 & 1;
            $403 = ($402<<24>>24)==(0);
            $404 = HEAP32[$24>>2]|0;
            $405 = $$pre284&255;
            $406 = $405 >>> 1;
            $407 = $403 ? $24 : $$pre285;
            $408 = $403 ? $406 : $404;
            $409 = (($407) + ($408<<2)|0);
            $410 = ($400|0)==($409|0);
            if ($410) {
             $412 = $$pre284;$414 = $$pre285;$418 = $401;
             break L100;
            } else {
             $393 = $400;$868 = $401;
            }
           }
           $$pre286 = HEAP8[$__sym>>0]|0;
           $$pre287 = HEAP32[$23>>2]|0;
           $412 = $$pre286;$414 = $$pre287;$418 = $$lcssa418;
          }
         } while(0);
         $411 = $412 & 1;
         $413 = ($411<<24>>24)==(0);
         $415 = $413 ? $24 : $414;
         $416 = $415;
         $417 = (($418) - ($416))|0;
         $419 = $417 >> 2;
         $420 = HEAP8[$__spaces>>0]|0;
         $421 = $420 & 1;
         $422 = ($421<<24>>24)==(0);
         $423 = HEAP32[$25>>2]|0;
         $424 = $420&255;
         $425 = $424 >>> 1;
         $426 = $422 ? $425 : $423;
         $427 = ($426>>>0)<($419>>>0);
         if ($427) {
          $$ph = $414;$$ph345 = $412;$$ph346 = $416;
         } else {
          $428 = HEAP32[$26>>2]|0;
          $429 = $422 ? $25 : $428;
          $430 = (($429) + ($426<<2)|0);
          $431 = ($419|0)==(0);
          if ($431) {
           $$ph = $414;$$ph345 = $412;$$ph346 = $418;
          } else {
           $$sum = (($426) - ($419))|0;
           $432 = (($429) + ($$sum<<2)|0);
           $$in386 = $415;$434 = $432;
           while(1) {
            $433 = HEAP32[$434>>2]|0;
            $435 = HEAP32[$$in386>>2]|0;
            $436 = ($433|0)==($435|0);
            if (!($436)) {
             $$ph = $414;$$ph345 = $412;$$ph346 = $416;
             break L97;
            }
            $437 = ((($434)) + 4|0);
            $438 = ((($$in386)) + 4|0);
            $439 = ($437|0)==($430|0);
            if ($439) {
             $$ph = $414;$$ph345 = $412;$$ph346 = $418;
             break;
            } else {
             $$in386 = $438;$434 = $437;
            }
           }
          }
         }
        } else {
         $$ph = $366;$$ph345 = $363;$$ph346 = $368;
        }
       }
      } while(0);
      $370 = $$ph345 & 1;
      $371 = ($370<<24>>24)==(0);
      $372 = HEAP32[$24>>2]|0;
      $373 = $$ph345&255;
      $374 = $373 >>> 1;
      $375 = $371 ? $24 : $$ph;
      $376 = $371 ? $374 : $372;
      $377 = (($375) + ($376<<2)|0);
      $378 = $$ph346;
      $379 = ($378|0)==($377|0);
      L113: do {
       if ($379) {
        $$lcssa261 = $377;
       } else {
        $$pre$i3$i$i191391 = $865;$455 = $865;$485 = $378;
        while(1) {
         $440 = HEAP32[$__b>>2]|0;
         $441 = ($440|0)==(0|0);
         do {
          if ($441) {
           $470 = 1;
          } else {
           $442 = ((($440)) + 12|0);
           $443 = HEAP32[$442>>2]|0;
           $444 = ((($440)) + 16|0);
           $445 = HEAP32[$444>>2]|0;
           $446 = ($443|0)==($445|0);
           if ($446) {
            $447 = HEAP32[$440>>2]|0;
            $448 = ((($447)) + 36|0);
            $449 = HEAP32[$448>>2]|0;
            __THREW__ = 0;
            $450 = (invoke_ii($449|0,($440|0))|0);
            $451 = __THREW__; __THREW__ = 0;
            $452 = $451&1;
            if ($452) {
             label = 22;
             break L4;
            } else {
             $$0$i$i$i$i183 = $450;
            }
           } else {
            $453 = HEAP32[$443>>2]|0;
            $$0$i$i$i$i183 = $453;
           }
           $454 = ($$0$i$i$i$i183|0)==(-1);
           if ($454) {
            HEAP32[$__b>>2] = 0;
            $470 = 1;
            break;
           } else {
            $$pre$i$i$i185 = HEAP32[$__b>>2]|0;
            $phitmp$i$i$i186 = ($$pre$i$i$i185|0)==(0|0);
            $470 = $phitmp$i$i$i186;
            break;
           }
          }
         } while(0);
         $456 = ($455|0)==(0|0);
         do {
          if ($456) {
           $$pre$i3$i$i191291 = $$pre$i3$i$i191391;
           label = 136;
          } else {
           $457 = ((($455)) + 12|0);
           $458 = HEAP32[$457>>2]|0;
           $459 = ((($455)) + 16|0);
           $460 = HEAP32[$459>>2]|0;
           $461 = ($458|0)==($460|0);
           if ($461) {
            $462 = HEAP32[$455>>2]|0;
            $463 = ((($462)) + 36|0);
            $464 = HEAP32[$463>>2]|0;
            __THREW__ = 0;
            $465 = (invoke_ii($464|0,($455|0))|0);
            $466 = __THREW__; __THREW__ = 0;
            $467 = $466&1;
            if ($467) {
             label = 22;
             break L4;
            } else {
             $$0$i$i1$i$i189 = $465;
            }
           } else {
            $468 = HEAP32[$458>>2]|0;
            $$0$i$i1$i$i189 = $468;
           }
           $469 = ($$0$i$i1$i$i189|0)==(-1);
           if ($469) {
            HEAP32[$__e>>2] = 0;
            $$pre$i3$i$i191291 = 0;
            label = 136;
            break;
           } else {
            $phitmp$i4$i$i192 = ($$pre$i3$i$i191391|0)==(0|0);
            $tmp$i$i194 = $470 ^ $phitmp$i4$i$i192;
            if ($tmp$i$i194) {
             $$pre$i3$i$i191290 = $$pre$i3$i$i191391;$869 = $$pre$i3$i$i191391;
             break;
            } else {
             $$lcssa261 = $485;
             break L113;
            }
           }
          }
         } while(0);
         if ((label|0) == 136) {
          label = 0;
          if ($470) {
           $$lcssa261 = $485;
           break L113;
          } else {
           $$pre$i3$i$i191290 = $$pre$i3$i$i191291;$869 = 0;
          }
         }
         $471 = HEAP32[$__b>>2]|0;
         $472 = ((($471)) + 12|0);
         $473 = HEAP32[$472>>2]|0;
         $474 = ((($471)) + 16|0);
         $475 = HEAP32[$474>>2]|0;
         $476 = ($473|0)==($475|0);
         if ($476) {
          $477 = HEAP32[$471>>2]|0;
          $478 = ((($477)) + 36|0);
          $479 = HEAP32[$478>>2]|0;
          __THREW__ = 0;
          $480 = (invoke_ii($479|0,($471|0))|0);
          $481 = __THREW__; __THREW__ = 0;
          $482 = $481&1;
          if ($482) {
           label = 22;
           break L4;
          } else {
           $$0$i$i179 = $480;
          }
         } else {
          $483 = HEAP32[$473>>2]|0;
          $$0$i$i179 = $483;
         }
         $484 = HEAP32[$485>>2]|0;
         $486 = ($$0$i$i179|0)==($484|0);
         if (!($486)) {
          $$lcssa261 = $485;
          break L113;
         }
         $487 = HEAP32[$__b>>2]|0;
         $488 = ((($487)) + 12|0);
         $489 = HEAP32[$488>>2]|0;
         $490 = ((($487)) + 16|0);
         $491 = HEAP32[$490>>2]|0;
         $492 = ($489|0)==($491|0);
         if ($492) {
          $493 = HEAP32[$487>>2]|0;
          $494 = ((($493)) + 40|0);
          $495 = HEAP32[$494>>2]|0;
          __THREW__ = 0;
          (invoke_ii($495|0,($487|0))|0);
          $496 = __THREW__; __THREW__ = 0;
          $497 = $496&1;
          if ($497) {
           label = 22;
           break L4;
          }
         } else {
          $498 = ((($489)) + 4|0);
          HEAP32[$488>>2] = $498;
         }
         $499 = ((($485)) + 4|0);
         $$pre288 = HEAP8[$__sym>>0]|0;
         $$pre289 = HEAP32[$23>>2]|0;
         $500 = $$pre288 & 1;
         $501 = ($500<<24>>24)==(0);
         $502 = HEAP32[$24>>2]|0;
         $503 = $$pre288&255;
         $504 = $503 >>> 1;
         $505 = $501 ? $24 : $$pre289;
         $506 = $501 ? $504 : $502;
         $507 = (($505) + ($506<<2)|0);
         $508 = ($499|0)==($507|0);
         if ($508) {
          $$lcssa261 = $507;
          break;
         } else {
          $$pre$i3$i$i191391 = $$pre$i3$i$i191290;$455 = $869;$485 = $499;
         }
        }
       }
      } while(0);
      if ($22) {
       $509 = HEAP8[$__sym>>0]|0;
       $510 = $509 & 1;
       $511 = ($510<<24>>24)==(0);
       $512 = HEAP32[$23>>2]|0;
       $513 = HEAP32[$24>>2]|0;
       $514 = $509&255;
       $515 = $514 >>> 1;
       $516 = $511 ? $24 : $512;
       $517 = $511 ? $515 : $513;
       $518 = (($516) + ($517<<2)|0);
       $519 = ($$lcssa261|0)==($518|0);
       if ($519) {
        $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
       } else {
        label = 148;
        break L4;
       }
      } else {
       $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
      }
      break;
     }
     case 4:  {
      $62 = HEAP32[$__ts>>2]|0;
      $$pre$i3$i$i166 = $865;$537 = $865;$591 = $863;$__ng$0 = 0;
      L150: while(1) {
       $522 = HEAP32[$__b>>2]|0;
       $523 = ($522|0)==(0|0);
       do {
        if ($523) {
         $552 = 1;
        } else {
         $524 = ((($522)) + 12|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = ((($522)) + 16|0);
         $527 = HEAP32[$526>>2]|0;
         $528 = ($525|0)==($527|0);
         if ($528) {
          $529 = HEAP32[$522>>2]|0;
          $530 = ((($529)) + 36|0);
          $531 = HEAP32[$530>>2]|0;
          __THREW__ = 0;
          $532 = (invoke_ii($531|0,($522|0))|0);
          $533 = __THREW__; __THREW__ = 0;
          $534 = $533&1;
          if ($534) {
           label = 25;
           break L4;
          } else {
           $$0$i$i$i$i158 = $532;
          }
         } else {
          $535 = HEAP32[$525>>2]|0;
          $$0$i$i$i$i158 = $535;
         }
         $536 = ($$0$i$i$i$i158|0)==(-1);
         if ($536) {
          HEAP32[$__b>>2] = 0;
          $552 = 1;
          break;
         } else {
          $$pre$i$i$i160 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i161 = ($$pre$i$i$i160|0)==(0|0);
          $552 = $phitmp$i$i$i161;
          break;
         }
        }
       } while(0);
       $538 = ($537|0)==(0|0);
       do {
        if ($538) {
         $$pre$i3$i$i166275 = $$pre$i3$i$i166;
         label = 162;
        } else {
         $539 = ((($537)) + 12|0);
         $540 = HEAP32[$539>>2]|0;
         $541 = ((($537)) + 16|0);
         $542 = HEAP32[$541>>2]|0;
         $543 = ($540|0)==($542|0);
         if ($543) {
          $544 = HEAP32[$537>>2]|0;
          $545 = ((($544)) + 36|0);
          $546 = HEAP32[$545>>2]|0;
          __THREW__ = 0;
          $547 = (invoke_ii($546|0,($537|0))|0);
          $548 = __THREW__; __THREW__ = 0;
          $549 = $548&1;
          if ($549) {
           label = 25;
           break L4;
          } else {
           $$0$i$i1$i$i164 = $547;
          }
         } else {
          $550 = HEAP32[$540>>2]|0;
          $$0$i$i1$i$i164 = $550;
         }
         $551 = ($$0$i$i1$i$i164|0)==(-1);
         if ($551) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i166275 = 0;
          label = 162;
          break;
         } else {
          $phitmp$i4$i$i167 = ($$pre$i3$i$i166|0)==(0|0);
          $tmp$i$i169 = $552 ^ $phitmp$i4$i$i167;
          if ($tmp$i$i169) {
           $$pre$i3$i$i166277 = $$pre$i3$i$i166;$870 = $$pre$i3$i$i166;
           break;
          } else {
           $$lcssa416 = $591;$$pre$i3$i$i134 = $$pre$i3$i$i166;$__ng$0$lcssa417 = $__ng$0;
           break L150;
          }
         }
        }
       } while(0);
       if ((label|0) == 162) {
        label = 0;
        if ($552) {
         $$lcssa416 = $591;$$pre$i3$i$i134 = $$pre$i3$i$i166275;$__ng$0$lcssa417 = $__ng$0;
         break;
        } else {
         $$pre$i3$i$i166277 = $$pre$i3$i$i166275;$870 = 0;
        }
       }
       $553 = HEAP32[$__b>>2]|0;
       $554 = ((($553)) + 12|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = ((($553)) + 16|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ($555|0)==($557|0);
       if ($558) {
        $559 = HEAP32[$553>>2]|0;
        $560 = ((($559)) + 36|0);
        $561 = HEAP32[$560>>2]|0;
        __THREW__ = 0;
        $562 = (invoke_ii($561|0,($553|0))|0);
        $563 = __THREW__; __THREW__ = 0;
        $564 = $563&1;
        if ($564) {
         label = 25;
         break L4;
        } else {
         $$0$i$i155 = $562;
        }
       } else {
        $565 = HEAP32[$555>>2]|0;
        $$0$i$i155 = $565;
       }
       $566 = HEAP32[$__ct>>2]|0;
       $567 = ((($566)) + 12|0);
       $568 = HEAP32[$567>>2]|0;
       __THREW__ = 0;
       $569 = (invoke_iiii($568|0,($__ct|0),2048,($$0$i$i155|0))|0);
       $570 = __THREW__; __THREW__ = 0;
       $571 = $570&1;
       if ($571) {
        label = 25;
        break L4;
       }
       if ($569) {
        $572 = HEAP32[$__wn>>2]|0;
        $573 = HEAP32[$0>>2]|0;
        $574 = ($572|0)==($573|0);
        if ($574) {
         __THREW__ = 0;
         invoke_viii(499,($__wb|0),($__wn|0),($0|0));
         $575 = __THREW__; __THREW__ = 0;
         $576 = $575&1;
         if ($576) {
          label = 25;
          break L4;
         }
         $$pre279 = HEAP32[$__wn>>2]|0;
         $578 = $$pre279;
        } else {
         $578 = $572;
        }
        $577 = ((($578)) + 4|0);
        HEAP32[$__wn>>2] = $577;
        HEAP32[$578>>2] = $$0$i$i155;
        $579 = (($__ng$0) + 1)|0;
        $871 = $591;$__ng$1 = $579;
       } else {
        $580 = HEAP8[$__grp>>0]|0;
        $581 = $580 & 1;
        $582 = ($581<<24>>24)==(0);
        $583 = HEAP32[$28>>2]|0;
        $584 = $580&255;
        $585 = $584 >>> 1;
        $586 = $582 ? $585 : $583;
        $587 = ($586|0)!=(0);
        $588 = ($__ng$0|0)!=(0);
        $or$cond7 = $588 & $587;
        $589 = ($$0$i$i155|0)==($62|0);
        $or$cond13 = $589 & $or$cond7;
        if (!($or$cond13)) {
         $$lcssa416 = $591;$$pre$i3$i$i134 = $$pre$i3$i$i166277;$__ng$0$lcssa417 = $__ng$0;
         break;
        }
        $590 = HEAP32[$__ge>>2]|0;
        $592 = ($591|0)==($590|0);
        if ($592) {
         __THREW__ = 0;
         invoke_viii(492,($__gb|0),($__gn|0),($__ge|0));
         $593 = __THREW__; __THREW__ = 0;
         $594 = $593&1;
         if ($594) {
          label = 25;
          break L4;
         }
         $$pre = HEAP32[$__gn>>2]|0;
         $596 = $$pre;
        } else {
         $596 = $591;
        }
        $595 = ((($596)) + 4|0);
        HEAP32[$__gn>>2] = $595;
        HEAP32[$596>>2] = $__ng$0;
        $871 = $595;$__ng$1 = 0;
       }
       $597 = HEAP32[$__b>>2]|0;
       $598 = ((($597)) + 12|0);
       $599 = HEAP32[$598>>2]|0;
       $600 = ((($597)) + 16|0);
       $601 = HEAP32[$600>>2]|0;
       $602 = ($599|0)==($601|0);
       if ($602) {
        $603 = HEAP32[$597>>2]|0;
        $604 = ((($603)) + 40|0);
        $605 = HEAP32[$604>>2]|0;
        __THREW__ = 0;
        (invoke_ii($605|0,($597|0))|0);
        $606 = __THREW__; __THREW__ = 0;
        $607 = $606&1;
        if ($607) {
         label = 25;
         break L4;
        } else {
         $$pre$i3$i$i166 = $$pre$i3$i$i166277;$537 = $870;$591 = $871;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $608 = ((($599)) + 4|0);
        HEAP32[$598>>2] = $608;
        $$pre$i3$i$i166 = $$pre$i3$i$i166277;$537 = $870;$591 = $871;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $609 = HEAP32[$__gb>>2]|0;
      $610 = ($609|0)!=($$lcssa416|0);
      $611 = ($__ng$0$lcssa417|0)!=(0);
      $or$cond9 = $611 & $610;
      if ($or$cond9) {
       $612 = HEAP32[$__ge>>2]|0;
       $613 = ($$lcssa416|0)==($612|0);
       if ($613) {
        __THREW__ = 0;
        invoke_viii(492,($__gb|0),($__gn|0),($__ge|0));
        $614 = __THREW__; __THREW__ = 0;
        $615 = $614&1;
        if ($615) {
         label = 26;
         break L4;
        }
        $$pre281 = HEAP32[$__gn>>2]|0;
        $617 = $$pre281;
       } else {
        $617 = $$lcssa416;
       }
       $616 = ((($617)) + 4|0);
       HEAP32[$__gn>>2] = $616;
       HEAP32[$617>>2] = $__ng$0$lcssa417;
       $872 = $616;
      } else {
       $872 = $$lcssa416;
      }
      $618 = HEAP32[$__fd>>2]|0;
      $619 = ($618|0)>(0);
      if ($619) {
       $620 = HEAP32[$__b>>2]|0;
       $621 = ($620|0)==(0|0);
       do {
        if ($621) {
         $873 = 1;
        } else {
         $622 = ((($620)) + 12|0);
         $623 = HEAP32[$622>>2]|0;
         $624 = ((($620)) + 16|0);
         $625 = HEAP32[$624>>2]|0;
         $626 = ($623|0)==($625|0);
         if ($626) {
          $627 = HEAP32[$620>>2]|0;
          $628 = ((($627)) + 36|0);
          $629 = HEAP32[$628>>2]|0;
          __THREW__ = 0;
          $630 = (invoke_ii($629|0,($620|0))|0);
          $631 = __THREW__; __THREW__ = 0;
          $632 = $631&1;
          if ($632) {
           label = 26;
           break L4;
          } else {
           $$0$i$i$i$i126 = $630;
          }
         } else {
          $633 = HEAP32[$623>>2]|0;
          $$0$i$i$i$i126 = $633;
         }
         $634 = ($$0$i$i$i$i126|0)==(-1);
         if ($634) {
          HEAP32[$__b>>2] = 0;
          $873 = 1;
          break;
         } else {
          $$pre$i$i$i128 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i129 = ($$pre$i$i$i128|0)==(0|0);
          $873 = $phitmp$i$i$i129;
          break;
         }
        }
       } while(0);
       $635 = ($$pre$i3$i$i134|0)==(0|0);
       do {
        if ($635) {
         label = 200;
        } else {
         $636 = ((($$pre$i3$i$i134)) + 12|0);
         $637 = HEAP32[$636>>2]|0;
         $638 = ((($$pre$i3$i$i134)) + 16|0);
         $639 = HEAP32[$638>>2]|0;
         $640 = ($637|0)==($639|0);
         if ($640) {
          $641 = HEAP32[$$pre$i3$i$i134>>2]|0;
          $642 = ((($641)) + 36|0);
          $643 = HEAP32[$642>>2]|0;
          __THREW__ = 0;
          $644 = (invoke_ii($643|0,($$pre$i3$i$i134|0))|0);
          $645 = __THREW__; __THREW__ = 0;
          $646 = $645&1;
          if ($646) {
           label = 26;
           break L4;
          } else {
           $$0$i$i1$i$i132 = $644;
          }
         } else {
          $647 = HEAP32[$637>>2]|0;
          $$0$i$i1$i$i132 = $647;
         }
         $648 = ($$0$i$i1$i$i132|0)==(-1);
         if ($648) {
          HEAP32[$__e>>2] = 0;
          label = 200;
          break;
         } else {
          if ($873) {
           $874 = $$pre$i3$i$i134;
           break;
          } else {
           label = 206;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 200) {
        label = 0;
        if ($873) {
         label = 206;
         break L4;
        } else {
         $874 = 0;
        }
       }
       $649 = HEAP32[$__b>>2]|0;
       $650 = ((($649)) + 12|0);
       $651 = HEAP32[$650>>2]|0;
       $652 = ((($649)) + 16|0);
       $653 = HEAP32[$652>>2]|0;
       $654 = ($651|0)==($653|0);
       if ($654) {
        $655 = HEAP32[$649>>2]|0;
        $656 = ((($655)) + 36|0);
        $657 = HEAP32[$656>>2]|0;
        __THREW__ = 0;
        $658 = (invoke_ii($657|0,($649|0))|0);
        $659 = __THREW__; __THREW__ = 0;
        $660 = $659&1;
        if ($660) {
         label = 26;
         break L4;
        } else {
         $$0$i$i119 = $658;
        }
       } else {
        $661 = HEAP32[$651>>2]|0;
        $$0$i$i119 = $661;
       }
       $662 = HEAP32[$__dp>>2]|0;
       $663 = ($$0$i$i119|0)==($662|0);
       if (!($663)) {
        label = 206;
        break L4;
       }
       $666 = HEAP32[$__b>>2]|0;
       $667 = ((($666)) + 12|0);
       $668 = HEAP32[$667>>2]|0;
       $669 = ((($666)) + 16|0);
       $670 = HEAP32[$669>>2]|0;
       $671 = ($668|0)==($670|0);
       if ($671) {
        $672 = HEAP32[$666>>2]|0;
        $673 = ((($672)) + 40|0);
        $674 = HEAP32[$673>>2]|0;
        __THREW__ = 0;
        (invoke_ii($674|0,($666|0))|0);
        $675 = __THREW__; __THREW__ = 0;
        $676 = $675&1;
        if ($676) {
         label = 26;
         break L4;
        }
       } else {
        $677 = ((($668)) + 4|0);
        HEAP32[$667>>2] = $677;
       }
       $678 = ($618|0)>(0);
       if ($678) {
        $$pre$i3$i$i100382 = $874;$694 = $874;$752 = $618;
        while(1) {
         $679 = HEAP32[$__b>>2]|0;
         $680 = ($679|0)==(0|0);
         do {
          if ($680) {
           $709 = 1;
          } else {
           $681 = ((($679)) + 12|0);
           $682 = HEAP32[$681>>2]|0;
           $683 = ((($679)) + 16|0);
           $684 = HEAP32[$683>>2]|0;
           $685 = ($682|0)==($684|0);
           if ($685) {
            $686 = HEAP32[$679>>2]|0;
            $687 = ((($686)) + 36|0);
            $688 = HEAP32[$687>>2]|0;
            __THREW__ = 0;
            $689 = (invoke_ii($688|0,($679|0))|0);
            $690 = __THREW__; __THREW__ = 0;
            $691 = $690&1;
            if ($691) {
             label = 24;
             break L4;
            } else {
             $$0$i$i$i$i92 = $689;
            }
           } else {
            $692 = HEAP32[$682>>2]|0;
            $$0$i$i$i$i92 = $692;
           }
           $693 = ($$0$i$i$i$i92|0)==(-1);
           if ($693) {
            HEAP32[$__b>>2] = 0;
            $709 = 1;
            break;
           } else {
            $$pre$i$i$i94 = HEAP32[$__b>>2]|0;
            $phitmp$i$i$i95 = ($$pre$i$i$i94|0)==(0|0);
            $709 = $phitmp$i$i$i95;
            break;
           }
          }
         } while(0);
         $695 = ($694|0)==(0|0);
         do {
          if ($695) {
           $$pre$i3$i$i100282$ph = $$pre$i3$i$i100382;
           label = 224;
          } else {
           $696 = ((($694)) + 12|0);
           $697 = HEAP32[$696>>2]|0;
           $698 = ((($694)) + 16|0);
           $699 = HEAP32[$698>>2]|0;
           $700 = ($697|0)==($699|0);
           if ($700) {
            $701 = HEAP32[$694>>2]|0;
            $702 = ((($701)) + 36|0);
            $703 = HEAP32[$702>>2]|0;
            __THREW__ = 0;
            $704 = (invoke_ii($703|0,($694|0))|0);
            $705 = __THREW__; __THREW__ = 0;
            $706 = $705&1;
            if ($706) {
             label = 24;
             break L4;
            } else {
             $$0$i$i1$i$i98 = $704;
            }
           } else {
            $707 = HEAP32[$697>>2]|0;
            $$0$i$i1$i$i98 = $707;
           }
           $708 = ($$0$i$i1$i$i98|0)==(-1);
           if ($708) {
            HEAP32[$__e>>2] = 0;
            $$pre$i3$i$i100282$ph = 0;
            label = 224;
            break;
           } else {
            $phitmp$i4$i$i101 = ($$pre$i3$i$i100382|0)==(0|0);
            $tmp$i$i103 = $709 ^ $phitmp$i4$i$i101;
            if ($tmp$i$i103) {
             $$pre$i3$i$i100282306 = $$pre$i3$i$i100382;$875 = $$pre$i3$i$i100382;
             break;
            } else {
             label = 231;
             break L4;
            }
           }
          }
         } while(0);
         if ((label|0) == 224) {
          label = 0;
          if ($709) {
           label = 231;
           break L4;
          } else {
           $$pre$i3$i$i100282306 = $$pre$i3$i$i100282$ph;$875 = 0;
          }
         }
         $710 = HEAP32[$__b>>2]|0;
         $711 = ((($710)) + 12|0);
         $712 = HEAP32[$711>>2]|0;
         $713 = ((($710)) + 16|0);
         $714 = HEAP32[$713>>2]|0;
         $715 = ($712|0)==($714|0);
         if ($715) {
          $716 = HEAP32[$710>>2]|0;
          $717 = ((($716)) + 36|0);
          $718 = HEAP32[$717>>2]|0;
          __THREW__ = 0;
          $719 = (invoke_ii($718|0,($710|0))|0);
          $720 = __THREW__; __THREW__ = 0;
          $721 = $720&1;
          if ($721) {
           label = 24;
           break L4;
          } else {
           $$0$i$i86 = $719;
          }
         } else {
          $722 = HEAP32[$712>>2]|0;
          $$0$i$i86 = $722;
         }
         $723 = HEAP32[$__ct>>2]|0;
         $724 = ((($723)) + 12|0);
         $725 = HEAP32[$724>>2]|0;
         __THREW__ = 0;
         $726 = (invoke_iiii($725|0,($__ct|0),2048,($$0$i$i86|0))|0);
         $727 = __THREW__; __THREW__ = 0;
         $728 = $727&1;
         if ($728) {
          label = 24;
          break L4;
         }
         if (!($726)) {
          label = 231;
          break L4;
         }
         $731 = HEAP32[$__wn>>2]|0;
         $732 = HEAP32[$0>>2]|0;
         $733 = ($731|0)==($732|0);
         if ($733) {
          __THREW__ = 0;
          invoke_viii(499,($__wb|0),($__wn|0),($0|0));
          $734 = __THREW__; __THREW__ = 0;
          $735 = $734&1;
          if ($735) {
           label = 24;
           break L4;
          }
         }
         $736 = HEAP32[$__b>>2]|0;
         $737 = ((($736)) + 12|0);
         $738 = HEAP32[$737>>2]|0;
         $739 = ((($736)) + 16|0);
         $740 = HEAP32[$739>>2]|0;
         $741 = ($738|0)==($740|0);
         if ($741) {
          $742 = HEAP32[$736>>2]|0;
          $743 = ((($742)) + 36|0);
          $744 = HEAP32[$743>>2]|0;
          __THREW__ = 0;
          $745 = (invoke_ii($744|0,($736|0))|0);
          $746 = __THREW__; __THREW__ = 0;
          $747 = $746&1;
          if ($747) {
           label = 24;
           break L4;
          } else {
           $$0$i$i78 = $745;
          }
         } else {
          $748 = HEAP32[$738>>2]|0;
          $$0$i$i78 = $748;
         }
         $749 = HEAP32[$__wn>>2]|0;
         $750 = ((($749)) + 4|0);
         HEAP32[$__wn>>2] = $750;
         HEAP32[$749>>2] = $$0$i$i78;
         $751 = (($752) + -1)|0;
         HEAP32[$__fd>>2] = $751;
         $753 = HEAP32[$__b>>2]|0;
         $754 = ((($753)) + 12|0);
         $755 = HEAP32[$754>>2]|0;
         $756 = ((($753)) + 16|0);
         $757 = HEAP32[$756>>2]|0;
         $758 = ($755|0)==($757|0);
         if ($758) {
          $759 = HEAP32[$753>>2]|0;
          $760 = ((($759)) + 40|0);
          $761 = HEAP32[$760>>2]|0;
          __THREW__ = 0;
          (invoke_ii($761|0,($753|0))|0);
          $762 = __THREW__; __THREW__ = 0;
          $763 = $762&1;
          if ($763) {
           label = 24;
           break L4;
          }
         } else {
          $765 = ((($755)) + 4|0);
          HEAP32[$754>>2] = $765;
         }
         $764 = ($752|0)>(1);
         if ($764) {
          $$pre$i3$i$i100382 = $$pre$i3$i$i100282306;$694 = $875;$752 = $751;
         } else {
          break;
         }
        }
       }
      }
      $766 = HEAP32[$__wn>>2]|0;
      $767 = HEAP32[$__wb>>2]|0;
      $768 = ($766|0)==($767|0);
      if ($768) {
       label = 242;
       break L4;
      } else {
       $866 = $872;$__trailing_sign$1 = $__trailing_sign$0399;
      }
      break;
     }
     default: {
      $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
     }
     }
    } while(0);
    L278: do {
     if ((label|0) == 44) {
      while(1) {
       label = 0;
       $124 = HEAP32[$__b>>2]|0;
       $125 = ($124|0)==(0|0);
       do {
        if ($125) {
         $154 = 1;
        } else {
         $126 = ((($124)) + 12|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = ((($124)) + 16|0);
         $129 = HEAP32[$128>>2]|0;
         $130 = ($127|0)==($129|0);
         if ($130) {
          $131 = HEAP32[$124>>2]|0;
          $132 = ((($131)) + 36|0);
          $133 = HEAP32[$132>>2]|0;
          __THREW__ = 0;
          $134 = (invoke_ii($133|0,($124|0))|0);
          $135 = __THREW__; __THREW__ = 0;
          $136 = $135&1;
          if ($136) {
           label = 21;
           break L4;
          } else {
           $$0$i$i$i$i51 = $134;
          }
         } else {
          $137 = HEAP32[$127>>2]|0;
          $$0$i$i$i$i51 = $137;
         }
         $138 = ($$0$i$i$i$i51|0)==(-1);
         if ($138) {
          HEAP32[$__b>>2] = 0;
          $154 = 1;
          break;
         } else {
          $$pre$i$i$i53 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i54 = ($$pre$i$i$i53|0)==(0|0);
          $154 = $phitmp$i$i$i54;
          break;
         }
        }
       } while(0);
       $140 = ($139|0)==(0|0);
       do {
        if ($140) {
         $$pre$i3$i$i59300 = $$pre$i3$i$i59;
         label = 57;
        } else {
         $141 = ((($139)) + 12|0);
         $142 = HEAP32[$141>>2]|0;
         $143 = ((($139)) + 16|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = ($142|0)==($144|0);
         if ($145) {
          $146 = HEAP32[$139>>2]|0;
          $147 = ((($146)) + 36|0);
          $148 = HEAP32[$147>>2]|0;
          __THREW__ = 0;
          $149 = (invoke_ii($148|0,($139|0))|0);
          $150 = __THREW__; __THREW__ = 0;
          $151 = $150&1;
          if ($151) {
           label = 21;
           break L4;
          } else {
           $$0$i$i1$i$i57 = $149;
          }
         } else {
          $152 = HEAP32[$142>>2]|0;
          $$0$i$i1$i$i57 = $152;
         }
         $153 = ($$0$i$i1$i$i57|0)==(-1);
         if ($153) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i59300 = 0;
          label = 57;
          break;
         } else {
          $phitmp$i4$i$i60 = ($$pre$i3$i$i59|0)==(0|0);
          $tmp$i$i62 = $154 ^ $phitmp$i4$i$i60;
          if ($tmp$i$i62) {
           $$pre$i3$i$i59302 = $$pre$i3$i$i59;$867 = $$pre$i3$i$i59;
           break;
          } else {
           $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
           break L278;
          }
         }
        }
       } while(0);
       if ((label|0) == 57) {
        label = 0;
        if ($154) {
         $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
         break L278;
        } else {
         $$pre$i3$i$i59302 = $$pre$i3$i$i59300;$867 = 0;
        }
       }
       $155 = HEAP32[$__b>>2]|0;
       $156 = ((($155)) + 12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ((($155)) + 16|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($157|0)==($159|0);
       if ($160) {
        $161 = HEAP32[$155>>2]|0;
        $162 = ((($161)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($155|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         label = 21;
         break L4;
        } else {
         $$0$i$i66 = $164;
        }
       } else {
        $167 = HEAP32[$157>>2]|0;
        $$0$i$i66 = $167;
       }
       $168 = HEAP32[$__ct>>2]|0;
       $169 = ((($168)) + 12|0);
       $170 = HEAP32[$169>>2]|0;
       __THREW__ = 0;
       $171 = (invoke_iiii($170|0,($__ct|0),8192,($$0$i$i66|0))|0);
       $172 = __THREW__; __THREW__ = 0;
       $173 = $172&1;
       if ($173) {
        label = 21;
        break L4;
       }
       if (!($171)) {
        $866 = $863;$__trailing_sign$1 = $__trailing_sign$0399;
        break L278;
       }
       $174 = HEAP32[$__b>>2]|0;
       $175 = ((($174)) + 12|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ((($174)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($176|0)==($178|0);
       if ($179) {
        $180 = HEAP32[$174>>2]|0;
        $181 = ((($180)) + 40|0);
        $182 = HEAP32[$181>>2]|0;
        __THREW__ = 0;
        $183 = (invoke_ii($182|0,($174|0))|0);
        $184 = __THREW__; __THREW__ = 0;
        $185 = $184&1;
        if ($185) {
         label = 21;
         break L4;
        } else {
         $$0$i$i73 = $183;
        }
       } else {
        $186 = ((($176)) + 4|0);
        HEAP32[$175>>2] = $186;
        $187 = HEAP32[$176>>2]|0;
        $$0$i$i73 = $187;
       }
       __THREW__ = 0;
       invoke_vii(498,($__spaces|0),($$0$i$i73|0));
       $188 = __THREW__; __THREW__ = 0;
       $189 = $188&1;
       if ($189) {
        label = 21;
        break L4;
       } else {
        $$pre$i3$i$i59 = $$pre$i3$i$i59302;$139 = $867;
        label = 44;
       }
      }
     }
    } while(0);
    $771 = (($__p$0397) + 1)|0;
    $772 = ($771>>>0)<(4);
    if ($772) {
     $863 = $866;$__p$0397 = $771;$__trailing_sign$0399 = $__trailing_sign$1;
    } else {
     $$lcssa357 = $866;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 244;
     break;
    }
   }
   L314:    switch (label|0) {
    case 21: {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $lpad$phi$index = $65;$lpad$phi$index8 = $66;
     break L1;
     break;
    }
    case 22: {
     $67 = ___cxa_find_matching_catch()|0;
     $68 = tempRet0;
     $lpad$phi$index = $67;$lpad$phi$index8 = $68;
     break L1;
     break;
    }
    case 23: {
     $69 = ___cxa_find_matching_catch()|0;
     $70 = tempRet0;
     $lpad$phi$index = $69;$lpad$phi$index8 = $70;
     break L1;
     break;
    }
    case 24: {
     $71 = ___cxa_find_matching_catch()|0;
     $72 = tempRet0;
     $lpad$phi$index = $71;$lpad$phi$index8 = $72;
     break L1;
     break;
    }
    case 25: {
     $73 = ___cxa_find_matching_catch()|0;
     $74 = tempRet0;
     $lpad$phi$index = $73;$lpad$phi$index8 = $74;
     break L1;
     break;
    }
    case 26: {
     $75 = ___cxa_find_matching_catch()|0;
     $76 = tempRet0;
     $lpad$phi$index = $75;$lpad$phi$index8 = $76;
     break L1;
     break;
    }
    case 42: {
     $121 = HEAP32[$__err>>2]|0;
     $122 = $121 | 4;
     HEAP32[$__err>>2] = $122;
     $$0 = 0;
     break;
    }
    case 107: {
     $355 = HEAP32[$__err>>2]|0;
     $356 = $355 | 4;
     HEAP32[$__err>>2] = $356;
     $$0 = 0;
     break;
    }
    case 148: {
     $520 = HEAP32[$__err>>2]|0;
     $521 = $520 | 4;
     HEAP32[$__err>>2] = $521;
     $$0 = 0;
     break;
    }
    case 206: {
     $664 = HEAP32[$__err>>2]|0;
     $665 = $664 | 4;
     HEAP32[$__err>>2] = $665;
     $$0 = 0;
     break;
    }
    case 231: {
     $729 = HEAP32[$__err>>2]|0;
     $730 = $729 | 4;
     HEAP32[$__err>>2] = $730;
     $$0 = 0;
     break;
    }
    case 242: {
     $769 = HEAP32[$__err>>2]|0;
     $770 = $769 | 4;
     HEAP32[$__err>>2] = $770;
     $$0 = 0;
     break;
    }
    case 244: {
     $773 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L316: do {
      if (!($773)) {
       $774 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $775 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $__i$0 = 1;
       L318: while(1) {
        $776 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $777 = $776 & 1;
        $778 = ($777<<24>>24)==(0);
        if ($778) {
         $780 = $776&255;
         $781 = $780 >>> 1;
         $783 = $781;
        } else {
         $779 = HEAP32[$774>>2]|0;
         $783 = $779;
        }
        $782 = ($__i$0>>>0)<($783>>>0);
        if (!($782)) {
         break L316;
        }
        $784 = HEAP32[$__b>>2]|0;
        $785 = ($784|0)==(0|0);
        do {
         if ($785) {
          $876 = 1;
         } else {
          $786 = ((($784)) + 12|0);
          $787 = HEAP32[$786>>2]|0;
          $788 = ((($784)) + 16|0);
          $789 = HEAP32[$788>>2]|0;
          $790 = ($787|0)==($789|0);
          if ($790) {
           $791 = HEAP32[$784>>2]|0;
           $792 = ((($791)) + 36|0);
           $793 = HEAP32[$792>>2]|0;
           __THREW__ = 0;
           $794 = (invoke_ii($793|0,($784|0))|0);
           $795 = __THREW__; __THREW__ = 0;
           $796 = $795&1;
           if ($796) {
            label = 20;
            break L318;
           } else {
            $$0$i$i$i$i = $794;
           }
          } else {
           $797 = HEAP32[$787>>2]|0;
           $$0$i$i$i$i = $797;
          }
          $798 = ($$0$i$i$i$i|0)==(-1);
          if ($798) {
           HEAP32[$__b>>2] = 0;
           $876 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $876 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $799 = HEAP32[$__e>>2]|0;
        $800 = ($799|0)==(0|0);
        do {
         if ($800) {
          label = 263;
         } else {
          $801 = ((($799)) + 12|0);
          $802 = HEAP32[$801>>2]|0;
          $803 = ((($799)) + 16|0);
          $804 = HEAP32[$803>>2]|0;
          $805 = ($802|0)==($804|0);
          if ($805) {
           $806 = HEAP32[$799>>2]|0;
           $807 = ((($806)) + 36|0);
           $808 = HEAP32[$807>>2]|0;
           __THREW__ = 0;
           $809 = (invoke_ii($808|0,($799|0))|0);
           $810 = __THREW__; __THREW__ = 0;
           $811 = $810&1;
           if ($811) {
            label = 20;
            break L318;
           } else {
            $$0$i$i1$i$i = $809;
           }
          } else {
           $812 = HEAP32[$802>>2]|0;
           $$0$i$i1$i$i = $812;
          }
          $813 = ($$0$i$i1$i$i|0)==(-1);
          if ($813) {
           HEAP32[$__e>>2] = 0;
           label = 263;
           break;
          } else {
           if ($876) {
            break;
           } else {
            label = 271;
            break L318;
           }
          }
         }
        } while(0);
        if ((label|0) == 263) {
         label = 0;
         if ($876) {
          label = 271;
          break;
         }
        }
        $814 = HEAP32[$__b>>2]|0;
        $815 = ((($814)) + 12|0);
        $816 = HEAP32[$815>>2]|0;
        $817 = ((($814)) + 16|0);
        $818 = HEAP32[$817>>2]|0;
        $819 = ($816|0)==($818|0);
        if ($819) {
         $820 = HEAP32[$814>>2]|0;
         $821 = ((($820)) + 36|0);
         $822 = HEAP32[$821>>2]|0;
         __THREW__ = 0;
         $823 = (invoke_ii($822|0,($814|0))|0);
         $824 = __THREW__; __THREW__ = 0;
         $825 = $824&1;
         if ($825) {
          label = 20;
          break;
         } else {
          $$0$i$i = $823;
         }
        } else {
         $826 = HEAP32[$816>>2]|0;
         $$0$i$i = $826;
        }
        $827 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $828 = $827 & 1;
        $829 = ($828<<24>>24)==(0);
        if ($829) {
         $832 = $774;
        } else {
         $830 = HEAP32[$775>>2]|0;
         $832 = $830;
        }
        $831 = (($832) + ($__i$0<<2)|0);
        $833 = HEAP32[$831>>2]|0;
        $834 = ($$0$i$i|0)==($833|0);
        if (!($834)) {
         label = 271;
         break;
        }
        $837 = (($__i$0) + 1)|0;
        $838 = HEAP32[$__b>>2]|0;
        $839 = ((($838)) + 12|0);
        $840 = HEAP32[$839>>2]|0;
        $841 = ((($838)) + 16|0);
        $842 = HEAP32[$841>>2]|0;
        $843 = ($840|0)==($842|0);
        if ($843) {
         $844 = HEAP32[$838>>2]|0;
         $845 = ((($844)) + 40|0);
         $846 = HEAP32[$845>>2]|0;
         __THREW__ = 0;
         (invoke_ii($846|0,($838|0))|0);
         $847 = __THREW__; __THREW__ = 0;
         $848 = $847&1;
         if ($848) {
          label = 20;
          break;
         } else {
          $__i$0 = $837;
          continue;
         }
        } else {
         $849 = ((($840)) + 4|0);
         HEAP32[$839>>2] = $849;
         $__i$0 = $837;
         continue;
        }
       }
       if ((label|0) == 20) {
        $63 = ___cxa_find_matching_catch()|0;
        $64 = tempRet0;
        $lpad$phi$index = $63;$lpad$phi$index8 = $64;
        break L1;
       }
       else if ((label|0) == 271) {
        $835 = HEAP32[$__err>>2]|0;
        $836 = $835 | 4;
        HEAP32[$__err>>2] = $836;
        $$0 = 0;
        break L314;
       }
      }
     } while(0);
     $850 = HEAP32[$__gb>>2]|0;
     $851 = ($850|0)==($$lcssa357|0);
     if ($851) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$850,$$lcssa357,$__et);
      $852 = HEAP32[$__et>>2]|0;
      $853 = ($852|0)==(0);
      if ($853) {
       $$0 = 1;
      } else {
       $854 = HEAP32[$__err>>2]|0;
       $855 = $854 | 4;
       HEAP32[$__err>>2] = $855;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $856 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $857 = ($856|0)==(0|0);
   if (!($857)) {
    $858 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($858|0,($856|0));
    $859 = __THREW__; __THREW__ = 0;
    $860 = $859&1;
    if ($860) {
     $861 = ___cxa_find_matching_catch(0|0)|0;
     $862 = tempRet0;
     ___clang_call_terminate($861);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $79 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $80 = ($79|0)==(0|0);
 if (!($80)) {
  $81 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($81|0,($79|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  if ($83) {
   $84 = ___cxa_find_matching_catch(0|0)|0;
   $85 = tempRet0;
   ___clang_call_terminate($84);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$013 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 424|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 428|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (486);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(468,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $33;$$019 = $34;$95 = $__wbuf;
  label = 38;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(465,($__loc|0),(49868|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(496,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP32[$21>>2] = 0;
      }
      $22 = ((($__v)) + 4|0);
      HEAP32[$22>>2] = 0;
      $23 = HEAP8[$__neg>>0]|0;
      $24 = ($23<<24>>24)==(0);
      if (!($24)) {
       $25 = HEAP32[$7>>2]|0;
       $26 = ((($25)) + 44|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_iii($27|0,($7|0),45)|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(498,($__v|0),($28|0));
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if ($32) {
        break;
       }
      }
      $35 = HEAP32[$7>>2]|0;
      $36 = ((($35)) + 44|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_iii($37|0,($7|0),48)|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break;
      }
      $41 = HEAP32[$__wb>>2]|0;
      $42 = HEAP32[$__wn>>2]|0;
      $43 = ((($42)) + -4|0);
      $44 = ($41>>>0)<($43>>>0);
      L18: do {
       if ($44) {
        $__w$013 = $41;
        while(1) {
         $45 = HEAP32[$__w$013>>2]|0;
         $46 = ($45|0)==($38|0);
         if (!($46)) {
          $__w$0$lcssa = $__w$013;
          break L18;
         }
         $47 = ((($__w$013)) + 4|0);
         $48 = ($47>>>0)<($43>>>0);
         if ($48) {
          $__w$013 = $47;
         } else {
          $__w$0$lcssa = $47;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $41;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(500,($__v|0),($__w$0$lcssa|0),($42|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       break;
      }
     }
     $51 = HEAP32[$__b>>2]|0;
     $52 = ($51|0)==(0|0);
     do {
      if ($52) {
       $100 = 1;
      } else {
       $53 = ((($51)) + 12|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($51)) + 16|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($54|0)==($56|0);
       if ($57) {
        $58 = HEAP32[$51>>2]|0;
        $59 = ((($58)) + 36|0);
        $60 = HEAP32[$59>>2]|0;
        __THREW__ = 0;
        $61 = (invoke_ii($60|0,($51|0))|0);
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         break L4;
        } else {
         $$0$i$i$i$i = $61;
        }
       } else {
        $64 = HEAP32[$54>>2]|0;
        $$0$i$i$i$i = $64;
       }
       $65 = ($$0$i$i$i$i|0)==(-1);
       if ($65) {
        HEAP32[$__b>>2] = 0;
        $100 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $100 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $66 = ($10|0)==(0);
     do {
      if ($66) {
       label = 30;
      } else {
       $67 = ((($13)) + 12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ((($13)) + 16|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($68|0)==($70|0);
       if ($71) {
        $72 = $10;
        $73 = HEAP32[$72>>2]|0;
        $74 = ((($73)) + 36|0);
        $75 = HEAP32[$74>>2]|0;
        __THREW__ = 0;
        $76 = (invoke_ii($75|0,($13|0))|0);
        $77 = __THREW__; __THREW__ = 0;
        $78 = $77&1;
        if ($78) {
         break L4;
        } else {
         $$0$i$i1$i$i = $76;
        }
       } else {
        $79 = HEAP32[$68>>2]|0;
        $$0$i$i1$i$i = $79;
       }
       $80 = ($$0$i$i1$i$i|0)==(-1);
       if ($80) {
        HEAP32[$__e>>2] = 0;
        label = 30;
        break;
       } else {
        if ($100) {
         break;
        } else {
         label = 32;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 30) {
      if ($100) {
       label = 32;
      }
     }
     if ((label|0) == 32) {
      $81 = HEAP32[$__err>>2]|0;
      $82 = $81 | 2;
      HEAP32[$__err>>2] = $82;
     }
     $83 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $84 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $85 = ($84|0)==(0|0);
     if (!($85)) {
      $86 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($86|0,($84|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       $89 = ___cxa_find_matching_catch(0|0)|0;
       $90 = tempRet0;
       ___clang_call_terminate($89);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($83|0);
    }
   }
  } while(0);
  $91 = ___cxa_find_matching_catch()|0;
  $92 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0110 = $92;$$012 = $91;
  } else {
   $$011 = $91;$$019 = $92;$95 = $$pre;
   label = 38;
  }
 }
 if ((label|0) == 38) {
  $94 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($94|0,($95|0));
  $96 = __THREW__; __THREW__ = 0;
  $97 = $96&1;
  if ($97) {
   $98 = ___cxa_find_matching_catch(0|0)|0;
   $99 = tempRet0;
   ___clang_call_terminate($98);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49612)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
   $14 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
   $15 = HEAP32[$10>>2]|0;
   $16 = ((($15)) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
   $18 = HEAP8[$__nsn>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    HEAP8[$__nsn>>0] = 0;
   } else {
    $21 = ((($__nsn)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$22>>2] = 0;
   }
   $23 = ((($__nsn)) + 4|0);
   HEAP32[$23>>2] = 0;
   __THREW__ = 0;
   invoke_vii(501,($__nsn|0),0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $26 = ___cxa_find_matching_catch(0|0)|0;
    $27 = tempRet0;
    ___clang_call_terminate($26);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
   HEAP32[$1>>2] = 0;
   $28 = ((($1)) + 4|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($1)) + 8|0);
   HEAP32[$29>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
   $30 = HEAP32[$10>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_vii[$32 & 1023]($2,$10);
   $33 = HEAP8[$__psn>>0]|0;
   $34 = $33 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    HEAP8[$__psn>>0] = 0;
   } else {
    $36 = ((($__psn)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    HEAP32[$37>>2] = 0;
   }
   $38 = ((($__psn)) + 4|0);
   HEAP32[$38>>2] = 0;
   __THREW__ = 0;
   invoke_vii(501,($__psn|0),0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $41 = ___cxa_find_matching_catch(0|0)|0;
    $42 = tempRet0;
    ___clang_call_terminate($41);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
   HEAP32[$2>>2] = 0;
   $43 = ((($2)) + 4|0);
   HEAP32[$43>>2] = 0;
   $44 = ((($2)) + 8|0);
   HEAP32[$44>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
   $45 = HEAP32[$10>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($10)|0);
   HEAP32[$__dp>>2] = $48;
   $49 = HEAP32[$10>>2]|0;
   $50 = ((($49)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_ii[$51 & 1023]($10)|0);
   HEAP32[$__ts>>2] = $52;
   $53 = HEAP32[$10>>2]|0;
   $54 = ((($53)) + 20|0);
   $55 = HEAP32[$54>>2]|0;
   FUNCTION_TABLE_vii[$55 & 1023]($3,$10);
   $56 = HEAP8[$__grp>>0]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $62 = ((($__grp)) + 1|0);
    HEAP8[$62>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $59 = ((($__grp)) + 8|0);
    $60 = HEAP32[$59>>2]|0;
    HEAP8[$60>>0] = 0;
    $61 = ((($__grp)) + 4|0);
    HEAP32[$61>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__grp|0),0);
   $63 = __THREW__; __THREW__ = 0;
   $64 = $63&1;
   if ($64) {
    $65 = ___cxa_find_matching_catch(0|0)|0;
    $66 = tempRet0;
    ___clang_call_terminate($65);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
   HEAP32[$3>>2] = 0;
   $67 = ((($3)) + 4|0);
   HEAP32[$67>>2] = 0;
   $68 = ((($3)) + 8|0);
   HEAP32[$68>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $69 = HEAP32[$10>>2]|0;
   $70 = ((($69)) + 24|0);
   $71 = HEAP32[$70>>2]|0;
   FUNCTION_TABLE_vii[$71 & 1023]($4,$10);
   $72 = HEAP8[$__sym>>0]|0;
   $73 = $72 & 1;
   $74 = ($73<<24>>24)==(0);
   if ($74) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $75 = ((($__sym)) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    HEAP32[$76>>2] = 0;
   }
   $77 = ((($__sym)) + 4|0);
   HEAP32[$77>>2] = 0;
   __THREW__ = 0;
   invoke_vii(501,($__sym|0),0);
   $78 = __THREW__; __THREW__ = 0;
   $79 = $78&1;
   if ($79) {
    $80 = ___cxa_find_matching_catch(0|0)|0;
    $81 = tempRet0;
    ___clang_call_terminate($80);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
    HEAP32[$4>>2] = 0;
    $82 = ((($4)) + 4|0);
    HEAP32[$82>>2] = 0;
    $83 = ((($4)) + 8|0);
    HEAP32[$83>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
    $84 = HEAP32[$10>>2]|0;
    $85 = ((($84)) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (FUNCTION_TABLE_ii[$86 & 1023]($10)|0);
    $storemerge = $87;
    break;
   }
  } else {
   $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49548)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($89)) + 44|0);
   $91 = HEAP32[$90>>2]|0;
   FUNCTION_TABLE_vii[$91 & 1023]($5,$88);
   $92 = HEAP32[$5>>2]|0;
   HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
   $93 = HEAP32[$88>>2]|0;
   $94 = ((($93)) + 32|0);
   $95 = HEAP32[$94>>2]|0;
   FUNCTION_TABLE_vii[$95 & 1023]($6,$88);
   $96 = HEAP8[$__nsn>>0]|0;
   $97 = $96 & 1;
   $98 = ($97<<24>>24)==(0);
   if ($98) {
    HEAP8[$__nsn>>0] = 0;
   } else {
    $99 = ((($__nsn)) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    HEAP32[$100>>2] = 0;
   }
   $101 = ((($__nsn)) + 4|0);
   HEAP32[$101>>2] = 0;
   __THREW__ = 0;
   invoke_vii(501,($__nsn|0),0);
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   if ($103) {
    $104 = ___cxa_find_matching_catch(0|0)|0;
    $105 = tempRet0;
    ___clang_call_terminate($104);
    // unreachable;
   }
   ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
   HEAP32[$6>>2] = 0;
   $106 = ((($6)) + 4|0);
   HEAP32[$106>>2] = 0;
   $107 = ((($6)) + 8|0);
   HEAP32[$107>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
   $108 = HEAP32[$88>>2]|0;
   $109 = ((($108)) + 28|0);
   $110 = HEAP32[$109>>2]|0;
   FUNCTION_TABLE_vii[$110 & 1023]($7,$88);
   $111 = HEAP8[$__psn>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   if ($113) {
    HEAP8[$__psn>>0] = 0;
   } else {
    $114 = ((($__psn)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    HEAP32[$115>>2] = 0;
   }
   $116 = ((($__psn)) + 4|0);
   HEAP32[$116>>2] = 0;
   __THREW__ = 0;
   invoke_vii(501,($__psn|0),0);
   $117 = __THREW__; __THREW__ = 0;
   $118 = $117&1;
   if ($118) {
    $119 = ___cxa_find_matching_catch(0|0)|0;
    $120 = tempRet0;
    ___clang_call_terminate($119);
    // unreachable;
   }
   ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
   HEAP32[$7>>2] = 0;
   $121 = ((($7)) + 4|0);
   HEAP32[$121>>2] = 0;
   $122 = ((($7)) + 8|0);
   HEAP32[$122>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
   $123 = HEAP32[$88>>2]|0;
   $124 = ((($123)) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 1023]($88)|0);
   HEAP32[$__dp>>2] = $126;
   $127 = HEAP32[$88>>2]|0;
   $128 = ((($127)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (FUNCTION_TABLE_ii[$129 & 1023]($88)|0);
   HEAP32[$__ts>>2] = $130;
   $131 = HEAP32[$88>>2]|0;
   $132 = ((($131)) + 20|0);
   $133 = HEAP32[$132>>2]|0;
   FUNCTION_TABLE_vii[$133 & 1023]($8,$88);
   $134 = HEAP8[$__grp>>0]|0;
   $135 = $134 & 1;
   $136 = ($135<<24>>24)==(0);
   if ($136) {
    $140 = ((($__grp)) + 1|0);
    HEAP8[$140>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $137 = ((($__grp)) + 8|0);
    $138 = HEAP32[$137>>2]|0;
    HEAP8[$138>>0] = 0;
    $139 = ((($__grp)) + 4|0);
    HEAP32[$139>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__grp|0),0);
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    $143 = ___cxa_find_matching_catch(0|0)|0;
    $144 = tempRet0;
    ___clang_call_terminate($143);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
   HEAP32[$8>>2] = 0;
   $145 = ((($8)) + 4|0);
   HEAP32[$145>>2] = 0;
   $146 = ((($8)) + 8|0);
   HEAP32[$146>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
   $147 = HEAP32[$88>>2]|0;
   $148 = ((($147)) + 24|0);
   $149 = HEAP32[$148>>2]|0;
   FUNCTION_TABLE_vii[$149 & 1023]($9,$88);
   $150 = HEAP8[$__sym>>0]|0;
   $151 = $150 & 1;
   $152 = ($151<<24>>24)==(0);
   if ($152) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $153 = ((($__sym)) + 8|0);
    $154 = HEAP32[$153>>2]|0;
    HEAP32[$154>>2] = 0;
   }
   $155 = ((($__sym)) + 4|0);
   HEAP32[$155>>2] = 0;
   __THREW__ = 0;
   invoke_vii(501,($__sym|0),0);
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if ($157) {
    $158 = ___cxa_find_matching_catch(0|0)|0;
    $159 = tempRet0;
    ___clang_call_terminate($158);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
    HEAP32[$9>>2] = 0;
    $160 = ((($9)) + 4|0);
    HEAP32[$160>>2] = 0;
    $161 = ((($9)) + 8|0);
    HEAP32[$161>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
    $162 = HEAP32[$88>>2]|0;
    $163 = ((($162)) + 36|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = (FUNCTION_TABLE_ii[$164 & 1023]($88)|0);
    $storemerge = $165;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $$pre20$pre = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 288|0;
 $__bb = sp + 72|0;
 $__digits = sp + 188|0;
 $__loc = sp + 68|0;
 $__pat = sp + 184|0;
 $__dp = sp + 181|0;
 $__ts = sp + 180|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 80|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,77292,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(469)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $137 = 0;$138 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(474,($__bb|0),($3|0),(77292|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $137 = 0;$138 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(475);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $137 = 0;$138 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $15 = $$pre;
     } else {
      $15 = $9;
     }
     $16 = $15;
     $17 = (_malloc($6)|0);
     $18 = $17;
     $19 = ($17|0)==(0|0);
     if ($19) {
      __THREW__ = 0;
      invoke_v(475);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       $137 = $16;$138 = $18;
       label = 7;
      } else {
       $124 = $18;$127 = $16;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $124 = $18;$127 = $16;$__db$0 = $17;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $124 = 0;$127 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  $22 = (invoke_ii(468,($__iob|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $137 = $127;$138 = $124;
   label = 7;
  } else {
   HEAP32[$__loc>>2] = $22;
   __THREW__ = 0;
   $25 = (invoke_iii(465,($__loc|0),(49876|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 22;
   } else {
    $28 = HEAP32[$__bb>>2]|0;
    $29 = (($28) + ($__n$0)|0);
    $30 = HEAP32[$25>>2]|0;
    $31 = ((($30)) + 32|0);
    $32 = HEAP32[$31>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($32|0,($25|0),($28|0),($29|0),($__db$0|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     label = 22;
    } else {
     $35 = ($__n$0|0)==(0);
     if ($35) {
      $45 = 0;
     } else {
      $36 = HEAP32[$__bb>>2]|0;
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(45);
      $45 = $38;
     }
     HEAP32[$__grp>>2] = 0;
     $39 = ((($__grp)) + 4|0);
     HEAP32[$39>>2] = 0;
     $40 = ((($__grp)) + 8|0);
     HEAP32[$40>>2] = 0;
     HEAP32[$__sym>>2] = 0;
     $41 = ((($__sym)) + 4|0);
     HEAP32[$41>>2] = 0;
     $42 = ((($__sym)) + 8|0);
     HEAP32[$42>>2] = 0;
     HEAP32[$__sn>>2] = 0;
     $43 = ((($__sn)) + 4|0);
     HEAP32[$43>>2] = 0;
     $44 = ((($__sn)) + 8|0);
     HEAP32[$44>>2] = 0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(502,($__intl|0),($45|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $100 = ___cxa_find_matching_catch()|0;
      $101 = tempRet0;
      $$0 = $100;$$01 = $101;$$pre20 = $22;
     } else {
      $48 = HEAP32[$__fd>>2]|0;
      $49 = ($__n$0|0)>($48|0);
      if ($49) {
       $50 = (($__n$0) - ($48))|0;
       $51 = $50 << 1;
       $52 = HEAP8[$__sn>>0]|0;
       $53 = $52 & 1;
       $54 = ($53<<24>>24)==(0);
       $55 = ((($__sn)) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = $52&255;
       $58 = $57 >>> 1;
       $59 = $54 ? $58 : $56;
       $60 = HEAP8[$__sym>>0]|0;
       $61 = $60 & 1;
       $62 = ($61<<24>>24)==(0);
       $63 = ((($__sym)) + 4|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = $60&255;
       $66 = $65 >>> 1;
       $67 = $62 ? $66 : $64;
       $68 = $51 | 1;
       $69 = (($68) + ($48))|0;
       $70 = (($69) + ($59))|0;
       $71 = (($70) + ($67))|0;
       $91 = $71;
      } else {
       $72 = HEAP8[$__sn>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__sn)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = HEAP8[$__sym>>0]|0;
       $81 = $80 & 1;
       $82 = ($81<<24>>24)==(0);
       $83 = ((($__sym)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $80&255;
       $86 = $85 >>> 1;
       $87 = $82 ? $86 : $84;
       $88 = (($48) + 2)|0;
       $89 = (($88) + ($79))|0;
       $90 = (($89) + ($87))|0;
       $91 = $90;
      }
      $92 = ($91>>>0)>(100);
      if ($92) {
       $93 = (_malloc($91)|0);
       $94 = $93;
       $95 = ($93|0)==(0|0);
       if ($95) {
        __THREW__ = 0;
        invoke_v(475);
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         $104 = $94;
        } else {
         $120 = $94;$__mb$0 = 0;
         label = 26;
        }
       } else {
        $120 = $94;$__mb$0 = $93;
        label = 26;
       }
      } else {
       $120 = 0;$__mb$0 = $__mbuf;
       label = 26;
      }
      if ((label|0) == 26) {
       $107 = ((($__iob)) + 4|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($__db$0) + ($__n$0)|0);
       $110 = HEAP8[$__dp>>0]|0;
       $111 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(503,($__mb$0|0),($__mi|0),($__me|0),($108|0),($__db$0|0),($109|0),($25|0),($45|0),($__pat|0),($110|0),($111|0),($__grp|0),($__sym|0),($__sn|0),($48|0));
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        $104 = $120;
       } else {
        $114 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $114;
        $115 = HEAP32[$__mi>>2]|0;
        $116 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $117 = (invoke_iiiiiii(477,($$byval_copy|0),($__mb$0|0),($115|0),($116|0),($__iob|0),($__fl|0))|0);
        $118 = __THREW__; __THREW__ = 0;
        $119 = $118&1;
        if ($119) {
         $104 = $120;
        } else {
         $121 = ($120|0)==(0);
         if ($121) {
          $123 = $22;
         } else {
          $122 = $120;
          _free($122);
          $$pre22 = HEAP32[$__loc>>2]|0;
          $123 = $$pre22;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($123)|0);
         $125 = ($124|0)==(0);
         if (!($125)) {
          $126 = $124;
          _free($126);
         }
         $128 = ($127|0)==(0);
         if (!($128)) {
          $129 = $127;
          _free($129);
         }
         STACKTOP = sp;return ($117|0);
        }
       }
      }
      $102 = ___cxa_find_matching_catch()|0;
      $103 = tempRet0;
      $105 = ($104|0)==(0);
      if ($105) {
       $$0 = $102;$$01 = $103;$$pre20 = $22;
      } else {
       $106 = $104;
       _free($106);
       $$pre20$pre = HEAP32[$__loc>>2]|0;
       $$0 = $102;$$01 = $103;$$pre20 = $$pre20$pre;
      }
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$130 = $$pre20;
    }
   }
   if ((label|0) == 22) {
    $98 = ___cxa_find_matching_catch()|0;
    $99 = tempRet0;
    $$1 = $98;$$12 = $99;$130 = $22;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($130)|0);
   $$2 = $$1;$$23 = $$12;$131 = $124;$134 = $127;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$131 = $138;$134 = $137;
 }
 $132 = ($131|0)==(0);
 if (!($132)) {
  $133 = $131;
  _free($133);
 }
 $135 = ($134|0)==(0);
 if (!($135)) {
  $136 = $134;
  _free($136);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$pre$phi39Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49484)|0);
   $13 = HEAP32[$12>>2]|0;
   do {
    if ($__neg) {
     $14 = ((($13)) + 44|0);
     $15 = HEAP32[$14>>2]|0;
     FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
     $16 = HEAP32[$0>>2]|0;
     HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
     $17 = HEAP32[$12>>2]|0;
     $18 = ((($17)) + 32|0);
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
     $20 = HEAP8[$__sn>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $26 = ((($__sn)) + 1|0);
      HEAP8[$26>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $23 = ((($__sn)) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP8[$24>>0] = 0;
      $25 = ((($__sn)) + 4|0);
      HEAP32[$25>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(495,($__sn|0),0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $29 = ___cxa_find_matching_catch(0|0)|0;
      $30 = tempRet0;
      ___clang_call_terminate($29);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
      HEAP32[$1>>2] = 0;
      $31 = ((($1)) + 4|0);
      HEAP32[$31>>2] = 0;
      $32 = ((($1)) + 8|0);
      HEAP32[$32>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
      $$pre$phiZ2D = $12;
      break;
     }
    } else {
     $33 = ((($13)) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_vii[$34 & 1023]($2,$12);
     $35 = HEAP32[$2>>2]|0;
     HEAP8[$__pat>>0]=$35&255;HEAP8[$__pat+1>>0]=($35>>8)&255;HEAP8[$__pat+2>>0]=($35>>16)&255;HEAP8[$__pat+3>>0]=$35>>24;
     $36 = HEAP32[$12>>2]|0;
     $37 = ((($36)) + 28|0);
     $38 = HEAP32[$37>>2]|0;
     FUNCTION_TABLE_vii[$38 & 1023]($3,$12);
     $39 = HEAP8[$__sn>>0]|0;
     $40 = $39 & 1;
     $41 = ($40<<24>>24)==(0);
     if ($41) {
      $45 = ((($__sn)) + 1|0);
      HEAP8[$45>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $42 = ((($__sn)) + 8|0);
      $43 = HEAP32[$42>>2]|0;
      HEAP8[$43>>0] = 0;
      $44 = ((($__sn)) + 4|0);
      HEAP32[$44>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(495,($__sn|0),0);
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $48 = ___cxa_find_matching_catch(0|0)|0;
      $49 = tempRet0;
      ___clang_call_terminate($48);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
      HEAP32[$3>>2] = 0;
      $50 = ((($3)) + 4|0);
      HEAP32[$50>>2] = 0;
      $51 = ((($3)) + 8|0);
      HEAP32[$51>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
      $$pre$phiZ2D = $12;
      break;
     }
    }
   } while(0);
   $52 = HEAP32[$12>>2]|0;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
   HEAP8[$__dp>>0] = $55;
   $56 = HEAP32[$12>>2]|0;
   $57 = ((($56)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (FUNCTION_TABLE_ii[$58 & 1023]($12)|0);
   HEAP8[$__ts>>0] = $59;
   $60 = HEAP32[$$pre$phiZ2D>>2]|0;
   $61 = ((($60)) + 20|0);
   $62 = HEAP32[$61>>2]|0;
   FUNCTION_TABLE_vii[$62 & 1023]($4,$12);
   $63 = HEAP8[$__grp>>0]|0;
   $64 = $63 & 1;
   $65 = ($64<<24>>24)==(0);
   if ($65) {
    $69 = ((($__grp)) + 1|0);
    HEAP8[$69>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $66 = ((($__grp)) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    HEAP8[$67>>0] = 0;
    $68 = ((($__grp)) + 4|0);
    HEAP32[$68>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__grp|0),0);
   $70 = __THREW__; __THREW__ = 0;
   $71 = $70&1;
   if ($71) {
    $72 = ___cxa_find_matching_catch(0|0)|0;
    $73 = tempRet0;
    ___clang_call_terminate($72);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
   HEAP32[$4>>2] = 0;
   $74 = ((($4)) + 4|0);
   HEAP32[$74>>2] = 0;
   $75 = ((($4)) + 8|0);
   HEAP32[$75>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
   $76 = HEAP32[$$pre$phiZ2D>>2]|0;
   $77 = ((($76)) + 24|0);
   $78 = HEAP32[$77>>2]|0;
   FUNCTION_TABLE_vii[$78 & 1023]($5,$12);
   $79 = HEAP8[$__sym>>0]|0;
   $80 = $79 & 1;
   $81 = ($80<<24>>24)==(0);
   if ($81) {
    $85 = ((($__sym)) + 1|0);
    HEAP8[$85>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $82 = ((($__sym)) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    HEAP8[$83>>0] = 0;
    $84 = ((($__sym)) + 4|0);
    HEAP32[$84>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__sym|0),0);
   $86 = __THREW__; __THREW__ = 0;
   $87 = $86&1;
   if ($87) {
    $88 = ___cxa_find_matching_catch(0|0)|0;
    $89 = tempRet0;
    ___clang_call_terminate($88);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
    HEAP32[$5>>2] = 0;
    $90 = ((($5)) + 4|0);
    HEAP32[$90>>2] = 0;
    $91 = ((($5)) + 8|0);
    HEAP32[$91>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    $92 = HEAP32[$12>>2]|0;
    $93 = ((($92)) + 36|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (FUNCTION_TABLE_ii[$94 & 1023]($12)|0);
    $storemerge = $95;
    break;
   }
  } else {
   $96 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49420)|0);
   $97 = HEAP32[$96>>2]|0;
   do {
    if ($__neg) {
     $98 = ((($97)) + 44|0);
     $99 = HEAP32[$98>>2]|0;
     FUNCTION_TABLE_vii[$99 & 1023]($6,$96);
     $100 = HEAP32[$6>>2]|0;
     HEAP8[$__pat>>0]=$100&255;HEAP8[$__pat+1>>0]=($100>>8)&255;HEAP8[$__pat+2>>0]=($100>>16)&255;HEAP8[$__pat+3>>0]=$100>>24;
     $101 = HEAP32[$96>>2]|0;
     $102 = ((($101)) + 32|0);
     $103 = HEAP32[$102>>2]|0;
     FUNCTION_TABLE_vii[$103 & 1023]($7,$96);
     $104 = HEAP8[$__sn>>0]|0;
     $105 = $104 & 1;
     $106 = ($105<<24>>24)==(0);
     if ($106) {
      $110 = ((($__sn)) + 1|0);
      HEAP8[$110>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $107 = ((($__sn)) + 8|0);
      $108 = HEAP32[$107>>2]|0;
      HEAP8[$108>>0] = 0;
      $109 = ((($__sn)) + 4|0);
      HEAP32[$109>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(495,($__sn|0),0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      $113 = ___cxa_find_matching_catch(0|0)|0;
      $114 = tempRet0;
      ___clang_call_terminate($113);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
      HEAP32[$7>>2] = 0;
      $115 = ((($7)) + 4|0);
      HEAP32[$115>>2] = 0;
      $116 = ((($7)) + 8|0);
      HEAP32[$116>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      $$pre$phi39Z2D = $96;
      break;
     }
    } else {
     $117 = ((($97)) + 40|0);
     $118 = HEAP32[$117>>2]|0;
     FUNCTION_TABLE_vii[$118 & 1023]($8,$96);
     $119 = HEAP32[$8>>2]|0;
     HEAP8[$__pat>>0]=$119&255;HEAP8[$__pat+1>>0]=($119>>8)&255;HEAP8[$__pat+2>>0]=($119>>16)&255;HEAP8[$__pat+3>>0]=$119>>24;
     $120 = HEAP32[$96>>2]|0;
     $121 = ((($120)) + 28|0);
     $122 = HEAP32[$121>>2]|0;
     FUNCTION_TABLE_vii[$122 & 1023]($9,$96);
     $123 = HEAP8[$__sn>>0]|0;
     $124 = $123 & 1;
     $125 = ($124<<24>>24)==(0);
     if ($125) {
      $129 = ((($__sn)) + 1|0);
      HEAP8[$129>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $126 = ((($__sn)) + 8|0);
      $127 = HEAP32[$126>>2]|0;
      HEAP8[$127>>0] = 0;
      $128 = ((($__sn)) + 4|0);
      HEAP32[$128>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(495,($__sn|0),0);
     $130 = __THREW__; __THREW__ = 0;
     $131 = $130&1;
     if ($131) {
      $132 = ___cxa_find_matching_catch(0|0)|0;
      $133 = tempRet0;
      ___clang_call_terminate($132);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
      HEAP32[$9>>2] = 0;
      $134 = ((($9)) + 4|0);
      HEAP32[$134>>2] = 0;
      $135 = ((($9)) + 8|0);
      HEAP32[$135>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      $$pre$phi39Z2D = $96;
      break;
     }
    }
   } while(0);
   $136 = HEAP32[$96>>2]|0;
   $137 = ((($136)) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (FUNCTION_TABLE_ii[$138 & 1023]($96)|0);
   HEAP8[$__dp>>0] = $139;
   $140 = HEAP32[$96>>2]|0;
   $141 = ((($140)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (FUNCTION_TABLE_ii[$142 & 1023]($96)|0);
   HEAP8[$__ts>>0] = $143;
   $144 = HEAP32[$$pre$phi39Z2D>>2]|0;
   $145 = ((($144)) + 20|0);
   $146 = HEAP32[$145>>2]|0;
   FUNCTION_TABLE_vii[$146 & 1023]($10,$96);
   $147 = HEAP8[$__grp>>0]|0;
   $148 = $147 & 1;
   $149 = ($148<<24>>24)==(0);
   if ($149) {
    $153 = ((($__grp)) + 1|0);
    HEAP8[$153>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $150 = ((($__grp)) + 8|0);
    $151 = HEAP32[$150>>2]|0;
    HEAP8[$151>>0] = 0;
    $152 = ((($__grp)) + 4|0);
    HEAP32[$152>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__grp|0),0);
   $154 = __THREW__; __THREW__ = 0;
   $155 = $154&1;
   if ($155) {
    $156 = ___cxa_find_matching_catch(0|0)|0;
    $157 = tempRet0;
    ___clang_call_terminate($156);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
   HEAP32[$10>>2] = 0;
   $158 = ((($10)) + 4|0);
   HEAP32[$158>>2] = 0;
   $159 = ((($10)) + 8|0);
   HEAP32[$159>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $160 = HEAP32[$$pre$phi39Z2D>>2]|0;
   $161 = ((($160)) + 24|0);
   $162 = HEAP32[$161>>2]|0;
   FUNCTION_TABLE_vii[$162 & 1023]($11,$96);
   $163 = HEAP8[$__sym>>0]|0;
   $164 = $163 & 1;
   $165 = ($164<<24>>24)==(0);
   if ($165) {
    $169 = ((($__sym)) + 1|0);
    HEAP8[$169>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $166 = ((($__sym)) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    HEAP8[$167>>0] = 0;
    $168 = ((($__sym)) + 4|0);
    HEAP32[$168>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__sym|0),0);
   $170 = __THREW__; __THREW__ = 0;
   $171 = $170&1;
   if ($171) {
    $172 = ___cxa_find_matching_catch(0|0)|0;
    $173 = tempRet0;
    ___clang_call_terminate($172);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
    HEAP32[$11>>2] = 0;
    $174 = ((($11)) + 4|0);
    HEAP32[$174>>2] = 0;
    $175 = ((($11)) + 8|0);
    HEAP32[$175>>2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
    $176 = HEAP32[$96>>2]|0;
    $177 = ((($176)) + 36|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (FUNCTION_TABLE_ii[$178 & 1023]($96)|0);
    $storemerge = $179;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$$027 = 0, $$0$i$i$lcssa = 0, $$0$i$i35 = 0, $$0$i$i9$lcssa = 0, $$0$i$i958 = 0, $$01$i$i56 = 0, $$062 = 0, $$2 = 0, $$lcssa = 0, $$lcssa34 = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa26 = 0, $__d$036 = 0, $__d$142 = 0, $__d$2 = 0, $__d$351 = 0, $__f$043 = 0, $__f$146 = 0;
 var $__gl$0$ph = 0, $__gl$054 = 0, $__gl$1 = 0, $__ig$053 = 0, $__ig$1 = 0, $__ng$052 = 0, $__ng$1 = 0, $__p$061 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep$sum = 0, $scevgep29 = 0, $umax28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sn)) + 1|0);
 $3 = ((($__sym)) + 4|0);
 $4 = $__flags & 512;
 $5 = ($4|0)==(0);
 $6 = ((($__sym)) + 8|0);
 $7 = ((($__sym)) + 1|0);
 $8 = ((($__ct)) + 8|0);
 $9 = ($__fd|0)>(0);
 $10 = ((($__grp)) + 4|0);
 $11 = ((($__grp)) + 8|0);
 $12 = ((($__grp)) + 1|0);
 $13 = (($__fd) + 1)|0;
 $14 = (-2 - ($__fd))|0;
 $15 = ($__fd|0)<(0);
 $$op = $__fd ^ -1;
 $16 = $15 ? $$op : -1;
 $17 = (($14) - ($16))|0;
 $18 = ($__fd|0)>(0);
 $$062 = $__db;$__p$061 = 0;
 while(1) {
  $19 = (($__pat) + ($__p$061)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  switch ($21|0) {
  case 0:  {
   $22 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $22;
   $$2 = $$062;
   break;
  }
  case 1:  {
   $23 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $23;
   $24 = HEAP32[$__ct>>2]|0;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (FUNCTION_TABLE_iii[$26 & 1023]($__ct,32)|0);
   $28 = HEAP32[$__me>>2]|0;
   $29 = ((($28)) + 1|0);
   HEAP32[$__me>>2] = $29;
   HEAP8[$28>>0] = $27;
   $$2 = $$062;
   break;
  }
  case 3:  {
   $30 = HEAP8[$__sn>>0]|0;
   $31 = $30 & 1;
   $32 = ($31<<24>>24)==(0);
   $33 = HEAP32[$0>>2]|0;
   $34 = $30&255;
   $35 = $34 >>> 1;
   $36 = $32 ? $35 : $33;
   $37 = ($36|0)==(0);
   if ($37) {
    $$2 = $$062;
   } else {
    $38 = HEAP32[$1>>2]|0;
    $39 = $32 ? $2 : $38;
    $40 = HEAP8[$39>>0]|0;
    $41 = HEAP32[$__me>>2]|0;
    $42 = ((($41)) + 1|0);
    HEAP32[$__me>>2] = $42;
    HEAP8[$41>>0] = $40;
    $$2 = $$062;
   }
   break;
  }
  case 2:  {
   $43 = HEAP8[$__sym>>0]|0;
   $44 = $43 & 1;
   $45 = ($44<<24>>24)==(0);
   $46 = HEAP32[$3>>2]|0;
   $47 = $43&255;
   $48 = $47 >>> 1;
   $49 = $45 ? $48 : $46;
   $50 = ($49|0)==(0);
   $or$cond = $5 | $50;
   if ($or$cond) {
    $$2 = $$062;
   } else {
    $51 = HEAP32[$6>>2]|0;
    $52 = $45 ? $7 : $51;
    $53 = (($52) + ($49)|0);
    $54 = HEAP32[$__me>>2]|0;
    $55 = ($49|0)==(0);
    if ($55) {
     $$0$i$i9$lcssa = $54;
    } else {
     $$0$i$i958 = $54;$57 = $52;
     while(1) {
      $56 = HEAP8[$57>>0]|0;
      HEAP8[$$0$i$i958>>0] = $56;
      $58 = ((($57)) + 1|0);
      $59 = ((($$0$i$i958)) + 1|0);
      $60 = ($58|0)==($53|0);
      if ($60) {
       $$0$i$i9$lcssa = $59;
       break;
      } else {
       $$0$i$i958 = $59;$57 = $58;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$i$i9$lcssa;
    $$2 = $$062;
   }
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = ((($$062)) + 1|0);
   $$$0 = $__neg ? $62 : $$062;
   $$$027 = $$$0;
   $63 = HEAP32[$8>>2]|0;
   $64 = ($$$0>>>0)<($__de>>>0);
   L15: do {
    if ($64) {
     $__d$036 = $$$0;
     while(1) {
      $65 = HEAP8[$__d$036>>0]|0;
      $isascii1$i = ($65<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$036;
       break L15;
      }
      $66 = $65 << 24 >> 24;
      $67 = (($63) + ($66<<1)|0);
      $68 = HEAP16[$67>>1]|0;
      $69 = $68 & 2048;
      $70 = ($69<<16>>16)==(0);
      if ($70) {
       $__d$0$lcssa = $__d$036;
       break L15;
      }
      $71 = ((($__d$036)) + 1|0);
      $72 = ($71>>>0)<($__de>>>0);
      if ($72) {
       $__d$036 = $71;
      } else {
       $__d$0$lcssa = $71;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa26 = $__d$0$lcssa;
   if ($9) {
    $73 = (-2 - ($__d$0$lcssa26))|0;
    $74 = ($__d$0$lcssa26>>>0)>($$$027>>>0);
    $75 = $74 ? $$$027 : $__d$0$lcssa26;
    $76 = $75 ^ -1;
    $77 = (($73) - ($76))|0;
    $78 = ($17>>>0)>($77>>>0);
    $umax28 = $78 ? $17 : $77;
    $79 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    $80 = $79 & $18;
    if ($80) {
     $__d$142 = $__d$0$lcssa;$__f$043 = $__fd;
     while(1) {
      $81 = ((($__d$142)) + -1|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = HEAP32[$__me>>2]|0;
      $84 = ((($83)) + 1|0);
      HEAP32[$__me>>2] = $84;
      HEAP8[$83>>0] = $82;
      $85 = (($__f$043) + -1)|0;
      $86 = ($81>>>0)>($$$0>>>0);
      $87 = ($__f$043|0)>(1);
      $88 = $86 & $87;
      if ($88) {
       $__d$142 = $81;$__f$043 = $85;
      } else {
       $$lcssa = $87;
       break;
      }
     }
    } else {
     $$lcssa = $18;
    }
    $89 = (($13) + ($umax28))|0;
    $scevgep$sum = (($umax28) + 1)|0;
    $scevgep29 = (($__d$0$lcssa) + ($scevgep$sum)|0);
    if ($$lcssa) {
     $90 = HEAP32[$__ct>>2]|0;
     $91 = ((($90)) + 28|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (FUNCTION_TABLE_iii[$92 & 1023]($__ct,48)|0);
     $97 = $93;
    } else {
     $97 = 0;
    }
    $94 = ($89|0)>(0);
    $95 = HEAP32[$__me>>2]|0;
    $96 = ((($95)) + 1|0);
    HEAP32[$__me>>2] = $96;
    if ($94) {
     $98 = $95;$__f$146 = $89;
     while(1) {
      HEAP8[$98>>0] = $97;
      $99 = (($__f$146) + -1)|0;
      $100 = ($__f$146|0)>(1);
      $101 = HEAP32[$__me>>2]|0;
      $102 = ((($101)) + 1|0);
      HEAP32[$__me>>2] = $102;
      if ($100) {
       $98 = $101;$__f$146 = $99;
      } else {
       $$lcssa34 = $101;
       break;
      }
     }
    } else {
     $$lcssa34 = $95;
    }
    HEAP8[$$lcssa34>>0] = $__dp;
    $__d$2 = $scevgep29;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $103 = ($__d$2|0)==($$$0|0);
   if ($103) {
    $104 = HEAP32[$__ct>>2]|0;
    $105 = ((($104)) + 28|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (FUNCTION_TABLE_iii[$106 & 1023]($__ct,48)|0);
    $108 = HEAP32[$__me>>2]|0;
    $109 = ((($108)) + 1|0);
    HEAP32[$__me>>2] = $109;
    HEAP8[$108>>0] = $107;
   } else {
    $110 = HEAP8[$__grp>>0]|0;
    $111 = $110 & 1;
    $112 = ($111<<24>>24)==(0);
    $113 = HEAP32[$10>>2]|0;
    $114 = $110&255;
    $115 = $114 >>> 1;
    $116 = $112 ? $115 : $113;
    $117 = ($116|0)==(0);
    if ($117) {
     $__gl$0$ph = -1;
    } else {
     $118 = HEAP32[$11>>2]|0;
     $119 = $112 ? $12 : $118;
     $120 = HEAP8[$119>>0]|0;
     $121 = $120 << 24 >> 24;
     $__gl$0$ph = $121;
    }
    $122 = ($__d$2|0)==($$$0|0);
    if (!($122)) {
     $__d$351 = $__d$2;$__gl$054 = $__gl$0$ph;$__ig$053 = 0;$__ng$052 = 0;
     while(1) {
      $123 = ($__ng$052|0)==($__gl$054|0);
      if ($123) {
       $124 = HEAP32[$__me>>2]|0;
       $125 = ((($124)) + 1|0);
       HEAP32[$__me>>2] = $125;
       HEAP8[$124>>0] = $__ts;
       $126 = (($__ig$053) + 1)|0;
       $127 = HEAP8[$__grp>>0]|0;
       $128 = $127 & 1;
       $129 = ($128<<24>>24)==(0);
       $130 = HEAP32[$10>>2]|0;
       $131 = $127&255;
       $132 = $131 >>> 1;
       $133 = $129 ? $132 : $130;
       $134 = ($126>>>0)<($133>>>0);
       if ($134) {
        $135 = HEAP32[$11>>2]|0;
        $136 = $129 ? $12 : $135;
        $137 = (($136) + ($126)|0);
        $138 = HEAP8[$137>>0]|0;
        $139 = ($138<<24>>24)==(127);
        $140 = $138 << 24 >> 24;
        $$ = $139 ? -1 : $140;
        $__gl$1 = $$;$__ig$1 = $126;$__ng$1 = 0;
       } else {
        $__gl$1 = $__ng$052;$__ig$1 = $126;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$054;$__ig$1 = $__ig$053;$__ng$1 = $__ng$052;
      }
      $141 = ((($__d$351)) + -1|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = HEAP32[$__me>>2]|0;
      $144 = ((($143)) + 1|0);
      HEAP32[$__me>>2] = $144;
      HEAP8[$143>>0] = $142;
      $145 = (($__ng$1) + 1)|0;
      $146 = ($141|0)==($$$0|0);
      if ($146) {
       break;
      } else {
       $__d$351 = $141;$__gl$054 = $__gl$1;$__ig$053 = $__ig$1;$__ng$052 = $145;
      }
     }
    }
   }
   $147 = HEAP32[$__me>>2]|0;
   $148 = ($61|0)==($147|0);
   if ($148) {
    $$2 = $$$0;
   } else {
    $149 = ((($147)) + -1|0);
    $150 = ($61>>>0)<($149>>>0);
    if ($150) {
     $$01$i$i56 = $61;$153 = $149;
     while(1) {
      $151 = HEAP8[$$01$i$i56>>0]|0;
      $152 = HEAP8[$153>>0]|0;
      HEAP8[$$01$i$i56>>0] = $152;
      HEAP8[$153>>0] = $151;
      $154 = ((($$01$i$i56)) + 1|0);
      $155 = ((($153)) + -1|0);
      $156 = ($154>>>0)<($155>>>0);
      if ($156) {
       $$01$i$i56 = $154;$153 = $155;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$062;
  }
  }
  $157 = (($__p$061) + 1)|0;
  $exitcond = ($157|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$062 = $$2;$__p$061 = $157;
  }
 }
 $158 = HEAP8[$__sn>>0]|0;
 $159 = $158 & 1;
 $160 = ($159<<24>>24)==(0);
 $161 = HEAP32[$0>>2]|0;
 $162 = $158&255;
 $163 = $162 >>> 1;
 $164 = $160 ? $163 : $161;
 $165 = ($164>>>0)>(1);
 if ($165) {
  $166 = HEAP32[$1>>2]|0;
  $167 = $160 ? $2 : $166;
  $168 = (($167) + ($164)|0);
  $169 = HEAP32[$__me>>2]|0;
  $170 = ($164|0)==(1);
  if ($170) {
   $$0$i$i$lcssa = $169;
  } else {
   $171 = ((($167)) + 1|0);
   $$0$i$i35 = $169;$173 = $171;
   while(1) {
    $172 = HEAP8[$173>>0]|0;
    HEAP8[$$0$i$i35>>0] = $172;
    $174 = ((($$0$i$i35)) + 1|0);
    $175 = ((($173)) + 1|0);
    $176 = ($175|0)==($168|0);
    if ($176) {
     $$0$i$i$lcssa = $174;
     break;
    } else {
     $$0$i$i35 = $174;$173 = $175;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$i$i$lcssa;
 }
 $177 = $__flags & 176;
 switch ($177|0) {
 case 32:  {
  $178 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $178;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre18 = 0, $$pre19 = 0, $$pre19$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $__loc = sp + 52|0;
 $__pat = sp + 164|0;
 $__dp = sp + 161|0;
 $__ts = sp + 160|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 16|0;
 $__fd = sp + 12|0;
 $__mbuf = sp + 60|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(465,($__loc|0),(49876|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 13;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $32 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($__digits)) + 1|0);
    $17 = $7 ? $16 : $15;
    $18 = HEAP8[$17>>0]|0;
    $19 = HEAP32[$2>>2]|0;
    $20 = ((($19)) + 28|0);
    $21 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    $22 = (invoke_iii($21|0,($2|0),45)|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 13;
     break;
    }
    $25 = ($18<<24>>24)==($22<<24>>24);
    $32 = $25;
   }
   HEAP32[$__grp>>2] = 0;
   $26 = ((($__grp)) + 4|0);
   HEAP32[$26>>2] = 0;
   $27 = ((($__grp)) + 8|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$__sym>>2] = 0;
   $28 = ((($__sym)) + 4|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($__sym)) + 8|0);
   HEAP32[$29>>2] = 0;
   HEAP32[$__sn>>2] = 0;
   $30 = ((($__sn)) + 4|0);
   HEAP32[$30>>2] = 0;
   $31 = ((($__sn)) + 8|0);
   HEAP32[$31>>2] = 0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(502,($__intl|0),($32|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $94 = ___cxa_find_matching_catch()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre19 = $1;
   } else {
    $35 = HEAP8[$__digits>>0]|0;
    $36 = $35 & 1;
    $37 = ($36<<24>>24)==(0);
    $38 = HEAP32[$8>>2]|0;
    $39 = $35&255;
    $40 = $39 >>> 1;
    $41 = $37 ? $40 : $38;
    $42 = HEAP32[$__fd>>2]|0;
    $43 = ($41|0)>($42|0);
    if ($43) {
     $44 = (($41) - ($42))|0;
     $45 = $44 << 1;
     $46 = HEAP8[$__sn>>0]|0;
     $47 = $46 & 1;
     $48 = ($47<<24>>24)==(0);
     $49 = ((($__sn)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $46&255;
     $52 = $51 >>> 1;
     $53 = $48 ? $52 : $50;
     $54 = HEAP8[$__sym>>0]|0;
     $55 = $54 & 1;
     $56 = ($55<<24>>24)==(0);
     $57 = ((($__sym)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $54&255;
     $60 = $59 >>> 1;
     $61 = $56 ? $60 : $58;
     $62 = $45 | 1;
     $63 = (($62) + ($42))|0;
     $64 = (($63) + ($53))|0;
     $65 = (($64) + ($61))|0;
     $85 = $65;
    } else {
     $66 = HEAP8[$__sn>>0]|0;
     $67 = $66 & 1;
     $68 = ($67<<24>>24)==(0);
     $69 = ((($__sn)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $66&255;
     $72 = $71 >>> 1;
     $73 = $68 ? $72 : $70;
     $74 = HEAP8[$__sym>>0]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     $77 = ((($__sym)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $74&255;
     $80 = $79 >>> 1;
     $81 = $76 ? $80 : $78;
     $82 = (($42) + 2)|0;
     $83 = (($82) + ($73))|0;
     $84 = (($83) + ($81))|0;
     $85 = $84;
    }
    $86 = ($85>>>0)>(100);
    if ($86) {
     $87 = (_malloc($85)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(475);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $98 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre18 = HEAP32[$8>>2]|0;
       $104 = $$pre;$112 = $$pre18;$125 = $88;$__mb$0 = 0;
       label = 17;
      }
     } else {
      $104 = $35;$112 = $38;$125 = $88;$__mb$0 = $87;
      label = 17;
     }
    } else {
     $104 = $35;$112 = $38;$125 = 0;$__mb$0 = $__mbuf;
     label = 17;
    }
    if ((label|0) == 17) {
     $101 = ((($__iob)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $104 & 1;
     $105 = ($103<<24>>24)==(0);
     $106 = ((($__digits)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ((($__digits)) + 1|0);
     $109 = $105 ? $108 : $107;
     $110 = $104&255;
     $111 = $110 >>> 1;
     $113 = $105 ? $111 : $112;
     $114 = (($109) + ($113)|0);
     $115 = HEAP8[$__dp>>0]|0;
     $116 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(503,($__mb$0|0),($__mi|0),($__me|0),($102|0),($109|0),($114|0),($2|0),($32|0),($__pat|0),($115|0),($116|0),($__grp|0),($__sym|0),($__sn|0),($42|0));
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      $98 = $125;
     } else {
      $119 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $119;
      $120 = HEAP32[$__mi>>2]|0;
      $121 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $122 = (invoke_iiiiiii(477,($$byval_copy|0),($__mb$0|0),($120|0),($121|0),($__iob|0),($__fl|0))|0);
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $98 = $125;
      } else {
       $126 = ($125|0)==(0);
       if ($126) {
        $128 = $1;
       } else {
        $127 = $125;
        _free($127);
        $$pre21 = HEAP32[$__loc>>2]|0;
        $128 = $$pre21;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($128)|0);
       STACKTOP = sp;return ($122|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0 = $96;$$01 = $97;$$pre19 = $1;
    } else {
     $100 = $98;
     _free($100);
     $$pre19$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre19 = $$pre19$pre;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$129 = $$pre19;
  }
 } while(0);
 if ((label|0) == 13) {
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$129 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($129)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre17$pre = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0;
 var $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 900|0;
 $__bb = sp + 888|0;
 $__digits = sp + 488|0;
 $__loc = sp + 480|0;
 $__pat = sp + 896|0;
 $__dp = sp + 476|0;
 $__ts = sp + 472|0;
 $__grp = sp + 460|0;
 $__sym = sp + 448|0;
 $__sn = sp + 436|0;
 $__fd = sp + 432|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,77292,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(469)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $139 = 0;$140 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(474,($__bb|0),($3|0),(77292|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $139 = 0;$140 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(475);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $139 = 0;$140 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $15 = $$pre;
     } else {
      $15 = $9;
     }
     $16 = $15;
     $17 = $6 << 2;
     $18 = (_malloc($17)|0);
     $19 = $18;
     $20 = ($18|0)==(0|0);
     if ($20) {
      __THREW__ = 0;
      invoke_v(475);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       $139 = $16;$140 = $19;
       label = 7;
      } else {
       $126 = $19;$129 = $16;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $126 = $19;$129 = $16;$__db$0 = $18;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $126 = 0;$129 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  $23 = (invoke_ii(468,($__iob|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $139 = $129;$140 = $126;
   label = 7;
  } else {
   HEAP32[$__loc>>2] = $23;
   __THREW__ = 0;
   $26 = (invoke_iii(465,($__loc|0),(49868|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    label = 22;
   } else {
    $29 = HEAP32[$__bb>>2]|0;
    $30 = (($29) + ($__n$0)|0);
    $31 = HEAP32[$26>>2]|0;
    $32 = ((($31)) + 48|0);
    $33 = HEAP32[$32>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($33|0,($26|0),($29|0),($30|0),($__db$0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     label = 22;
    } else {
     $36 = ($__n$0|0)==(0);
     if ($36) {
      $46 = 0;
     } else {
      $37 = HEAP32[$__bb>>2]|0;
      $38 = HEAP8[$37>>0]|0;
      $39 = ($38<<24>>24)==(45);
      $46 = $39;
     }
     HEAP32[$__grp>>2] = 0;
     $40 = ((($__grp)) + 4|0);
     HEAP32[$40>>2] = 0;
     $41 = ((($__grp)) + 8|0);
     HEAP32[$41>>2] = 0;
     HEAP32[$__sym>>2] = 0;
     $42 = ((($__sym)) + 4|0);
     HEAP32[$42>>2] = 0;
     $43 = ((($__sym)) + 8|0);
     HEAP32[$43>>2] = 0;
     HEAP32[$__sn>>2] = 0;
     $44 = ((($__sn)) + 4|0);
     HEAP32[$44>>2] = 0;
     $45 = ((($__sn)) + 8|0);
     HEAP32[$45>>2] = 0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(504,($__intl|0),($46|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      $102 = ___cxa_find_matching_catch()|0;
      $103 = tempRet0;
      $$0 = $102;$$01 = $103;$$pre17 = $23;
     } else {
      $49 = HEAP32[$__fd>>2]|0;
      $50 = ($__n$0|0)>($49|0);
      if ($50) {
       $51 = (($__n$0) - ($49))|0;
       $52 = $51 << 1;
       $53 = HEAP8[$__sn>>0]|0;
       $54 = $53 & 1;
       $55 = ($54<<24>>24)==(0);
       $56 = ((($__sn)) + 4|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = $53&255;
       $59 = $58 >>> 1;
       $60 = $55 ? $59 : $57;
       $61 = HEAP8[$__sym>>0]|0;
       $62 = $61 & 1;
       $63 = ($62<<24>>24)==(0);
       $64 = ((($__sym)) + 4|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = $61&255;
       $67 = $66 >>> 1;
       $68 = $63 ? $67 : $65;
       $69 = $52 | 1;
       $70 = (($69) + ($49))|0;
       $71 = (($70) + ($60))|0;
       $72 = (($71) + ($68))|0;
       $92 = $72;
      } else {
       $73 = HEAP8[$__sn>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       $76 = ((($__sn)) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $73&255;
       $79 = $78 >>> 1;
       $80 = $75 ? $79 : $77;
       $81 = HEAP8[$__sym>>0]|0;
       $82 = $81 & 1;
       $83 = ($82<<24>>24)==(0);
       $84 = ((($__sym)) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = $81&255;
       $87 = $86 >>> 1;
       $88 = $83 ? $87 : $85;
       $89 = (($49) + 2)|0;
       $90 = (($89) + ($80))|0;
       $91 = (($90) + ($88))|0;
       $92 = $91;
      }
      $93 = ($92>>>0)>(100);
      if ($93) {
       $94 = $92 << 2;
       $95 = (_malloc($94)|0);
       $96 = $95;
       $97 = ($95|0)==(0|0);
       if ($97) {
        __THREW__ = 0;
        invoke_v(475);
        $98 = __THREW__; __THREW__ = 0;
        $99 = $98&1;
        if ($99) {
         $106 = $96;
        } else {
         $122 = $96;$__mb$0 = 0;
         label = 26;
        }
       } else {
        $122 = $96;$__mb$0 = $95;
        label = 26;
       }
      } else {
       $122 = 0;$__mb$0 = $__mbuf;
       label = 26;
      }
      if ((label|0) == 26) {
       $109 = ((($__iob)) + 4|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($__db$0) + ($__n$0<<2)|0);
       $112 = HEAP32[$__dp>>2]|0;
       $113 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(505,($__mb$0|0),($__mi|0),($__me|0),($110|0),($__db$0|0),($111|0),($26|0),($46|0),($__pat|0),($112|0),($113|0),($__grp|0),($__sym|0),($__sn|0),($49|0));
       $114 = __THREW__; __THREW__ = 0;
       $115 = $114&1;
       if ($115) {
        $106 = $122;
       } else {
        $116 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $116;
        $117 = HEAP32[$__mi>>2]|0;
        $118 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $119 = (invoke_iiiiiii(482,($$byval_copy|0),($__mb$0|0),($117|0),($118|0),($__iob|0),($__fl|0))|0);
        $120 = __THREW__; __THREW__ = 0;
        $121 = $120&1;
        if ($121) {
         $106 = $122;
        } else {
         $123 = ($122|0)==(0);
         if ($123) {
          $125 = $23;
         } else {
          $124 = $122;
          _free($124);
          $$pre19 = HEAP32[$__loc>>2]|0;
          $125 = $$pre19;
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
         $127 = ($126|0)==(0);
         if (!($127)) {
          $128 = $126;
          _free($128);
         }
         $130 = ($129|0)==(0);
         if (!($130)) {
          $131 = $129;
          _free($131);
         }
         STACKTOP = sp;return ($119|0);
        }
       }
      }
      $104 = ___cxa_find_matching_catch()|0;
      $105 = tempRet0;
      $107 = ($106|0)==(0);
      if ($107) {
       $$0 = $104;$$01 = $105;$$pre17 = $23;
      } else {
       $108 = $106;
       _free($108);
       $$pre17$pre = HEAP32[$__loc>>2]|0;
       $$0 = $104;$$01 = $105;$$pre17 = $$pre17$pre;
      }
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$132 = $$pre17;
    }
   }
   if ((label|0) == 22) {
    $100 = ___cxa_find_matching_catch()|0;
    $101 = tempRet0;
    $$1 = $100;$$12 = $101;$132 = $23;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($132)|0);
   $$2 = $$1;$$23 = $$12;$133 = $126;$136 = $129;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$133 = $140;$136 = $139;
 }
 $134 = ($133|0)==(0);
 if (!($134)) {
  $135 = $133;
  _free($135);
 }
 $137 = ($136|0)==(0);
 if (!($137)) {
  $138 = $136;
  _free($138);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49612)|0);
   $13 = HEAP32[$12>>2]|0;
   do {
    if ($__neg) {
     $14 = ((($13)) + 44|0);
     $15 = HEAP32[$14>>2]|0;
     FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
     $16 = HEAP32[$0>>2]|0;
     HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
     $17 = HEAP32[$12>>2]|0;
     $18 = ((($17)) + 32|0);
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
     $20 = HEAP8[$__sn>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $23 = ((($__sn)) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP32[$24>>2] = 0;
     }
     $25 = ((($__sn)) + 4|0);
     HEAP32[$25>>2] = 0;
     __THREW__ = 0;
     invoke_vii(501,($__sn|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      $28 = ___cxa_find_matching_catch(0|0)|0;
      $29 = tempRet0;
      ___clang_call_terminate($28);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
      HEAP32[$1>>2] = 0;
      $30 = ((($1)) + 4|0);
      HEAP32[$30>>2] = 0;
      $31 = ((($1)) + 8|0);
      HEAP32[$31>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
      break;
     }
    } else {
     $32 = ((($13)) + 40|0);
     $33 = HEAP32[$32>>2]|0;
     FUNCTION_TABLE_vii[$33 & 1023]($2,$12);
     $34 = HEAP32[$2>>2]|0;
     HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
     $35 = HEAP32[$12>>2]|0;
     $36 = ((($35)) + 28|0);
     $37 = HEAP32[$36>>2]|0;
     FUNCTION_TABLE_vii[$37 & 1023]($3,$12);
     $38 = HEAP8[$__sn>>0]|0;
     $39 = $38 & 1;
     $40 = ($39<<24>>24)==(0);
     if ($40) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $41 = ((($__sn)) + 8|0);
      $42 = HEAP32[$41>>2]|0;
      HEAP32[$42>>2] = 0;
     }
     $43 = ((($__sn)) + 4|0);
     HEAP32[$43>>2] = 0;
     __THREW__ = 0;
     invoke_vii(501,($__sn|0),0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $46 = ___cxa_find_matching_catch(0|0)|0;
      $47 = tempRet0;
      ___clang_call_terminate($46);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
      HEAP32[$3>>2] = 0;
      $48 = ((($3)) + 4|0);
      HEAP32[$48>>2] = 0;
      $49 = ((($3)) + 8|0);
      HEAP32[$49>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
      break;
     }
    }
   } while(0);
   $50 = HEAP32[$12>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_ii[$52 & 1023]($12)|0);
   HEAP32[$__dp>>2] = $53;
   $54 = HEAP32[$12>>2]|0;
   $55 = ((($54)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (FUNCTION_TABLE_ii[$56 & 1023]($12)|0);
   HEAP32[$__ts>>2] = $57;
   $58 = HEAP32[$12>>2]|0;
   $59 = ((($58)) + 20|0);
   $60 = HEAP32[$59>>2]|0;
   FUNCTION_TABLE_vii[$60 & 1023]($4,$12);
   $61 = HEAP8[$__grp>>0]|0;
   $62 = $61 & 1;
   $63 = ($62<<24>>24)==(0);
   if ($63) {
    $67 = ((($__grp)) + 1|0);
    HEAP8[$67>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $64 = ((($__grp)) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    HEAP8[$65>>0] = 0;
    $66 = ((($__grp)) + 4|0);
    HEAP32[$66>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__grp|0),0);
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if ($69) {
    $70 = ___cxa_find_matching_catch(0|0)|0;
    $71 = tempRet0;
    ___clang_call_terminate($70);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
   HEAP32[$4>>2] = 0;
   $72 = ((($4)) + 4|0);
   HEAP32[$72>>2] = 0;
   $73 = ((($4)) + 8|0);
   HEAP32[$73>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
   $74 = HEAP32[$12>>2]|0;
   $75 = ((($74)) + 24|0);
   $76 = HEAP32[$75>>2]|0;
   FUNCTION_TABLE_vii[$76 & 1023]($5,$12);
   $77 = HEAP8[$__sym>>0]|0;
   $78 = $77 & 1;
   $79 = ($78<<24>>24)==(0);
   if ($79) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $80 = ((($__sym)) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    HEAP32[$81>>2] = 0;
   }
   $82 = ((($__sym)) + 4|0);
   HEAP32[$82>>2] = 0;
   __THREW__ = 0;
   invoke_vii(501,($__sym|0),0);
   $83 = __THREW__; __THREW__ = 0;
   $84 = $83&1;
   if ($84) {
    $85 = ___cxa_find_matching_catch(0|0)|0;
    $86 = tempRet0;
    ___clang_call_terminate($85);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
    HEAP32[$5>>2] = 0;
    $87 = ((($5)) + 4|0);
    HEAP32[$87>>2] = 0;
    $88 = ((($5)) + 8|0);
    HEAP32[$88>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($5);
    $89 = HEAP32[$12>>2]|0;
    $90 = ((($89)) + 36|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (FUNCTION_TABLE_ii[$91 & 1023]($12)|0);
    $storemerge = $92;
    break;
   }
  } else {
   $93 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,49548)|0);
   $94 = HEAP32[$93>>2]|0;
   do {
    if ($__neg) {
     $95 = ((($94)) + 44|0);
     $96 = HEAP32[$95>>2]|0;
     FUNCTION_TABLE_vii[$96 & 1023]($6,$93);
     $97 = HEAP32[$6>>2]|0;
     HEAP8[$__pat>>0]=$97&255;HEAP8[$__pat+1>>0]=($97>>8)&255;HEAP8[$__pat+2>>0]=($97>>16)&255;HEAP8[$__pat+3>>0]=$97>>24;
     $98 = HEAP32[$93>>2]|0;
     $99 = ((($98)) + 32|0);
     $100 = HEAP32[$99>>2]|0;
     FUNCTION_TABLE_vii[$100 & 1023]($7,$93);
     $101 = HEAP8[$__sn>>0]|0;
     $102 = $101 & 1;
     $103 = ($102<<24>>24)==(0);
     if ($103) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $104 = ((($__sn)) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      HEAP32[$105>>2] = 0;
     }
     $106 = ((($__sn)) + 4|0);
     HEAP32[$106>>2] = 0;
     __THREW__ = 0;
     invoke_vii(501,($__sn|0),0);
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      $109 = ___cxa_find_matching_catch(0|0)|0;
      $110 = tempRet0;
      ___clang_call_terminate($109);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
      HEAP32[$7>>2] = 0;
      $111 = ((($7)) + 4|0);
      HEAP32[$111>>2] = 0;
      $112 = ((($7)) + 8|0);
      HEAP32[$112>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
      break;
     }
    } else {
     $113 = ((($94)) + 40|0);
     $114 = HEAP32[$113>>2]|0;
     FUNCTION_TABLE_vii[$114 & 1023]($8,$93);
     $115 = HEAP32[$8>>2]|0;
     HEAP8[$__pat>>0]=$115&255;HEAP8[$__pat+1>>0]=($115>>8)&255;HEAP8[$__pat+2>>0]=($115>>16)&255;HEAP8[$__pat+3>>0]=$115>>24;
     $116 = HEAP32[$93>>2]|0;
     $117 = ((($116)) + 28|0);
     $118 = HEAP32[$117>>2]|0;
     FUNCTION_TABLE_vii[$118 & 1023]($9,$93);
     $119 = HEAP8[$__sn>>0]|0;
     $120 = $119 & 1;
     $121 = ($120<<24>>24)==(0);
     if ($121) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $122 = ((($__sn)) + 8|0);
      $123 = HEAP32[$122>>2]|0;
      HEAP32[$123>>2] = 0;
     }
     $124 = ((($__sn)) + 4|0);
     HEAP32[$124>>2] = 0;
     __THREW__ = 0;
     invoke_vii(501,($__sn|0),0);
     $125 = __THREW__; __THREW__ = 0;
     $126 = $125&1;
     if ($126) {
      $127 = ___cxa_find_matching_catch(0|0)|0;
      $128 = tempRet0;
      ___clang_call_terminate($127);
      // unreachable;
     } else {
      ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
      HEAP32[$9>>2] = 0;
      $129 = ((($9)) + 4|0);
      HEAP32[$129>>2] = 0;
      $130 = ((($9)) + 8|0);
      HEAP32[$130>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
      break;
     }
    }
   } while(0);
   $131 = HEAP32[$93>>2]|0;
   $132 = ((($131)) + 12|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (FUNCTION_TABLE_ii[$133 & 1023]($93)|0);
   HEAP32[$__dp>>2] = $134;
   $135 = HEAP32[$93>>2]|0;
   $136 = ((($135)) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (FUNCTION_TABLE_ii[$137 & 1023]($93)|0);
   HEAP32[$__ts>>2] = $138;
   $139 = HEAP32[$93>>2]|0;
   $140 = ((($139)) + 20|0);
   $141 = HEAP32[$140>>2]|0;
   FUNCTION_TABLE_vii[$141 & 1023]($10,$93);
   $142 = HEAP8[$__grp>>0]|0;
   $143 = $142 & 1;
   $144 = ($143<<24>>24)==(0);
   if ($144) {
    $148 = ((($__grp)) + 1|0);
    HEAP8[$148>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $145 = ((($__grp)) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    HEAP8[$146>>0] = 0;
    $147 = ((($__grp)) + 4|0);
    HEAP32[$147>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(495,($__grp|0),0);
   $149 = __THREW__; __THREW__ = 0;
   $150 = $149&1;
   if ($150) {
    $151 = ___cxa_find_matching_catch(0|0)|0;
    $152 = tempRet0;
    ___clang_call_terminate($151);
    // unreachable;
   }
   ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
   HEAP32[$10>>2] = 0;
   $153 = ((($10)) + 4|0);
   HEAP32[$153>>2] = 0;
   $154 = ((($10)) + 8|0);
   HEAP32[$154>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $155 = HEAP32[$93>>2]|0;
   $156 = ((($155)) + 24|0);
   $157 = HEAP32[$156>>2]|0;
   FUNCTION_TABLE_vii[$157 & 1023]($11,$93);
   $158 = HEAP8[$__sym>>0]|0;
   $159 = $158 & 1;
   $160 = ($159<<24>>24)==(0);
   if ($160) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $161 = ((($__sym)) + 8|0);
    $162 = HEAP32[$161>>2]|0;
    HEAP32[$162>>2] = 0;
   }
   $163 = ((($__sym)) + 4|0);
   HEAP32[$163>>2] = 0;
   __THREW__ = 0;
   invoke_vii(501,($__sym|0),0);
   $164 = __THREW__; __THREW__ = 0;
   $165 = $164&1;
   if ($165) {
    $166 = ___cxa_find_matching_catch(0|0)|0;
    $167 = tempRet0;
    ___clang_call_terminate($166);
    // unreachable;
   } else {
    ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
    HEAP32[$11>>2] = 0;
    $168 = ((($11)) + 4|0);
    HEAP32[$168>>2] = 0;
    $169 = ((($11)) + 8|0);
    HEAP32[$169>>2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
    $170 = HEAP32[$93>>2]|0;
    $171 = ((($170)) + 36|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = (FUNCTION_TABLE_ii[$172 & 1023]($93)|0);
    $storemerge = $173;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0$i$i30 = 0, $$0$i$i954 = 0, $$01$i$i52 = 0, $$057 = 0, $$2 = 0, $$lcssa = 0, $$lcssa63 = 0, $$lcssa64 = 0, $$lcssa65 = 0, $$lcssa67 = 0, $$op = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0;
 var $__d$031 = 0, $__d$1$lcssa = 0, $__d$137 = 0, $__d$2 = 0, $__d$347 = 0, $__f$0$lcssa = 0, $__f$038 = 0, $__f$143 = 0, $__gl$0$ph = 0, $__gl$050 = 0, $__gl$1 = 0, $__ig$049 = 0, $__ig$1 = 0, $__me$promoted = 0, $__me$promoted66 = 0, $__ng$048 = 0, $__ng$1 = 0, $__p$056 = 0, $exitcond = 0, $or$cond = 0;
 var $scevgep$i = 0, $scevgep$i10 = 0, $scevgep$sum = 0, $scevgep26 = 0, $scevgep27$sum = 0, $scevgep28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sym)) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = ((($__sym)) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = ((($__grp)) + 4|0);
 $8 = ((($__grp)) + 8|0);
 $9 = ((($__grp)) + 1|0);
 $10 = ($__fd|0)>(0);
 $$057 = $__db;$__p$056 = 0;
 while(1) {
  $11 = (($__pat) + ($__p$056)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  switch ($13|0) {
  case 0:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $$2 = $$057;
   break;
  }
  case 1:  {
   $15 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $15;
   $16 = HEAP32[$__ct>>2]|0;
   $17 = ((($16)) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iii[$18 & 1023]($__ct,32)|0);
   $20 = HEAP32[$__me>>2]|0;
   $21 = ((($20)) + 4|0);
   HEAP32[$__me>>2] = $21;
   HEAP32[$20>>2] = $19;
   $$2 = $$057;
   break;
  }
  case 3:  {
   $22 = HEAP8[$__sn>>0]|0;
   $23 = $22 & 1;
   $24 = ($23<<24>>24)==(0);
   $25 = HEAP32[$0>>2]|0;
   $26 = $22&255;
   $27 = $26 >>> 1;
   $28 = $24 ? $27 : $25;
   $29 = ($28|0)==(0);
   if ($29) {
    $$2 = $$057;
   } else {
    $30 = HEAP32[$1>>2]|0;
    $31 = $24 ? $0 : $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$__me>>2]|0;
    $34 = ((($33)) + 4|0);
    HEAP32[$__me>>2] = $34;
    HEAP32[$33>>2] = $32;
    $$2 = $$057;
   }
   break;
  }
  case 2:  {
   $35 = HEAP8[$__sym>>0]|0;
   $36 = $35 & 1;
   $37 = ($36<<24>>24)==(0);
   $38 = HEAP32[$2>>2]|0;
   $39 = $35&255;
   $40 = $39 >>> 1;
   $41 = $37 ? $40 : $38;
   $42 = ($41|0)==(0);
   $or$cond = $4 | $42;
   if ($or$cond) {
    $$2 = $$057;
   } else {
    $43 = HEAP32[$5>>2]|0;
    $44 = $37 ? $2 : $43;
    $45 = (($44) + ($41<<2)|0);
    $46 = HEAP32[$__me>>2]|0;
    $47 = ($41|0)==(0);
    if (!($47)) {
     $$0$i$i954 = $46;$49 = $44;
     while(1) {
      $48 = HEAP32[$49>>2]|0;
      HEAP32[$$0$i$i954>>2] = $48;
      $50 = ((($49)) + 4|0);
      $51 = ((($$0$i$i954)) + 4|0);
      $52 = ($50|0)==($45|0);
      if ($52) {
       break;
      } else {
       $$0$i$i954 = $51;$49 = $50;
      }
     }
    }
    $scevgep$i10 = (($46) + ($41<<2)|0);
    HEAP32[$__me>>2] = $scevgep$i10;
    $$2 = $$057;
   }
   break;
  }
  case 4:  {
   $53 = HEAP32[$__me>>2]|0;
   $54 = ((($$057)) + 4|0);
   $$$0 = $__neg ? $54 : $$057;
   $55 = ($$$0>>>0)<($__de>>>0);
   L15: do {
    if ($55) {
     $__d$031 = $$$0;
     while(1) {
      $56 = HEAP32[$__d$031>>2]|0;
      $57 = HEAP32[$__ct>>2]|0;
      $58 = ((($57)) + 12|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($__ct,2048,$56)|0);
      if (!($60)) {
       $__d$0$lcssa = $__d$031;
       break L15;
      }
      $61 = ((($__d$031)) + 4|0);
      $62 = ($61>>>0)<($__de>>>0);
      if ($62) {
       $__d$031 = $61;
      } else {
       $__d$0$lcssa = $61;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $63 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    $64 = $63 & $10;
    if ($64) {
     $__me$promoted66 = HEAP32[$__me>>2]|0;
     $68 = $__me$promoted66;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $65 = ((($__d$137)) + -4|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ((($68)) + 4|0);
      HEAP32[$68>>2] = $66;
      $69 = (($__f$038) + -1)|0;
      $70 = ($65>>>0)>($$$0>>>0);
      $71 = ($__f$038|0)>(1);
      $72 = $70 & $71;
      if ($72) {
       $68 = $67;$__d$137 = $65;$__f$038 = $69;
      } else {
       $$lcssa63 = $65;$$lcssa64 = $69;$$lcssa65 = $71;$$lcssa67 = $67;
       break;
      }
     }
     HEAP32[$__me>>2] = $$lcssa67;
     $$lcssa = $$lcssa65;$__d$1$lcssa = $$lcssa63;$__f$0$lcssa = $$lcssa64;
    } else {
     $$lcssa = $10;$__d$1$lcssa = $__d$0$lcssa;$__f$0$lcssa = $__fd;
    }
    if ($$lcssa) {
     $73 = HEAP32[$__ct>>2]|0;
     $74 = ((($73)) + 44|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iii[$75 & 1023]($__ct,48)|0);
     $83 = $76;
    } else {
     $83 = 0;
    }
    $__me$promoted = HEAP32[$__me>>2]|0;
    $77 = ($__f$0$lcssa|0)<(0);
    $$op = $__f$0$lcssa ^ -1;
    $78 = $77 ? $$op : -1;
    $79 = (($__f$0$lcssa) + ($78))|0;
    $80 = ($__f$0$lcssa|0)>(0);
    if ($80) {
     $82 = $__me$promoted;$__f$143 = $__f$0$lcssa;
     while(1) {
      $81 = ((($82)) + 4|0);
      HEAP32[$82>>2] = $83;
      $84 = (($__f$143) + -1)|0;
      $85 = ($__f$143|0)>(1);
      if ($85) {
       $82 = $81;$__f$143 = $84;
      } else {
       break;
      }
     }
    }
    $scevgep$sum = (($79) + 2)|0;
    $scevgep26 = (($__me$promoted) + ($scevgep$sum<<2)|0);
    $scevgep27$sum = (($79) + 1)|0;
    $scevgep28 = (($__me$promoted) + ($scevgep27$sum<<2)|0);
    HEAP32[$__me>>2] = $scevgep26;
    HEAP32[$scevgep28>>2] = $__dp;
    $__d$2 = $__d$1$lcssa;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $86 = ($__d$2|0)==($$$0|0);
   if ($86) {
    $87 = HEAP32[$__ct>>2]|0;
    $88 = ((($87)) + 44|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (FUNCTION_TABLE_iii[$89 & 1023]($__ct,48)|0);
    $91 = HEAP32[$__me>>2]|0;
    $92 = ((($91)) + 4|0);
    HEAP32[$__me>>2] = $92;
    HEAP32[$91>>2] = $90;
    $130 = $92;
   } else {
    $93 = HEAP8[$__grp>>0]|0;
    $94 = $93 & 1;
    $95 = ($94<<24>>24)==(0);
    $96 = HEAP32[$7>>2]|0;
    $97 = $93&255;
    $98 = $97 >>> 1;
    $99 = $95 ? $98 : $96;
    $100 = ($99|0)==(0);
    if ($100) {
     $__gl$0$ph = -1;
    } else {
     $101 = HEAP32[$8>>2]|0;
     $102 = $95 ? $9 : $101;
     $103 = HEAP8[$102>>0]|0;
     $104 = $103 << 24 >> 24;
     $__gl$0$ph = $104;
    }
    $105 = ($__d$2|0)==($$$0|0);
    if (!($105)) {
     $__d$347 = $__d$2;$__gl$050 = $__gl$0$ph;$__ig$049 = 0;$__ng$048 = 0;
     while(1) {
      $106 = ($__ng$048|0)==($__gl$050|0);
      $107 = HEAP32[$__me>>2]|0;
      if ($106) {
       $108 = ((($107)) + 4|0);
       HEAP32[$__me>>2] = $108;
       HEAP32[$107>>2] = $__ts;
       $109 = (($__ig$049) + 1)|0;
       $110 = HEAP8[$__grp>>0]|0;
       $111 = $110 & 1;
       $112 = ($111<<24>>24)==(0);
       $113 = $110&255;
       $114 = $113 >>> 1;
       $115 = $112 ? $114 : $96;
       $116 = ($109>>>0)<($115>>>0);
       if ($116) {
        $117 = HEAP32[$8>>2]|0;
        $118 = $112 ? $9 : $117;
        $119 = (($118) + ($109)|0);
        $120 = HEAP8[$119>>0]|0;
        $121 = ($120<<24>>24)==(127);
        $122 = $120 << 24 >> 24;
        $$ = $121 ? -1 : $122;
        $126 = $108;$__gl$1 = $$;$__ig$1 = $109;$__ng$1 = 0;
       } else {
        $126 = $108;$__gl$1 = $__ng$048;$__ig$1 = $109;$__ng$1 = 0;
       }
      } else {
       $126 = $107;$__gl$1 = $__gl$050;$__ig$1 = $__ig$049;$__ng$1 = $__ng$048;
      }
      $123 = ((($__d$347)) + -4|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ((($126)) + 4|0);
      HEAP32[$__me>>2] = $125;
      HEAP32[$126>>2] = $124;
      $127 = (($__ng$1) + 1)|0;
      $128 = ($123|0)==($$$0|0);
      if ($128) {
       break;
      } else {
       $__d$347 = $123;$__gl$050 = $__gl$1;$__ig$049 = $__ig$1;$__ng$048 = $127;
      }
     }
    }
    $$pre29 = HEAP32[$__me>>2]|0;
    $130 = $$pre29;
   }
   $129 = ($53|0)==($130|0);
   if ($129) {
    $$2 = $$$0;
   } else {
    $131 = ((($130)) + -4|0);
    $132 = ($53>>>0)<($131>>>0);
    if ($132) {
     $$01$i$i52 = $53;$135 = $131;
     while(1) {
      $133 = HEAP32[$$01$i$i52>>2]|0;
      $134 = HEAP32[$135>>2]|0;
      HEAP32[$$01$i$i52>>2] = $134;
      HEAP32[$135>>2] = $133;
      $136 = ((($$01$i$i52)) + 4|0);
      $137 = ((($135)) + -4|0);
      $138 = ($136>>>0)<($137>>>0);
      if ($138) {
       $$01$i$i52 = $136;$135 = $137;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$057;
  }
  }
  $139 = (($__p$056) + 1)|0;
  $exitcond = ($139|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$057 = $$2;$__p$056 = $139;
  }
 }
 $140 = HEAP8[$__sn>>0]|0;
 $141 = $140 & 1;
 $142 = ($141<<24>>24)==(0);
 $143 = HEAP32[$0>>2]|0;
 $144 = $140&255;
 $145 = $144 >>> 1;
 $146 = $142 ? $145 : $143;
 $147 = ($146>>>0)>(1);
 if ($147) {
  $148 = HEAP32[$1>>2]|0;
  $149 = $142 ? $0 : $148;
  $150 = ((($149)) + 4|0);
  $151 = (($149) + ($146<<2)|0);
  $152 = HEAP32[$__me>>2]|0;
  $153 = $150;
  $154 = $151;
  $155 = (($154) - ($153))|0;
  $156 = ($146|0)==(1);
  if (!($156)) {
   $$0$i$i30 = $152;$158 = $150;
   while(1) {
    $157 = HEAP32[$158>>2]|0;
    HEAP32[$$0$i$i30>>2] = $157;
    $159 = ((($158)) + 4|0);
    $160 = ((($$0$i$i30)) + 4|0);
    $161 = ($159|0)==($151|0);
    if ($161) {
     break;
    } else {
     $$0$i$i30 = $160;$158 = $159;
    }
   }
  }
  $162 = $155 >>> 2;
  $scevgep$i = (($152) + ($162<<2)|0);
  HEAP32[$__me>>2] = $scevgep$i;
 }
 $163 = $__flags & 176;
 switch ($163|0) {
 case 32:  {
  $164 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $164;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $$pre18$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0;
 var $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 468|0;
 $__loc = sp + 464|0;
 $__pat = sp + 472|0;
 $__dp = sp + 460|0;
 $__ts = sp + 456|0;
 $__grp = sp + 444|0;
 $__sym = sp + 432|0;
 $__sn = sp + 420|0;
 $__fd = sp + 416|0;
 $__mbuf = sp + 16|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(465,($__loc|0),(49868|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 13;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $31 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $7 ? $8 : $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$2>>2]|0;
    $19 = ((($18)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($2|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 13;
     break;
    }
    $24 = ($17|0)==($21|0);
    $31 = $24;
   }
   HEAP32[$__grp>>2] = 0;
   $25 = ((($__grp)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = ((($__grp)) + 8|0);
   HEAP32[$26>>2] = 0;
   HEAP32[$__sym>>2] = 0;
   $27 = ((($__sym)) + 4|0);
   HEAP32[$27>>2] = 0;
   $28 = ((($__sym)) + 8|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$__sn>>2] = 0;
   $29 = ((($__sn)) + 4|0);
   HEAP32[$29>>2] = 0;
   $30 = ((($__sn)) + 8|0);
   HEAP32[$30>>2] = 0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(504,($__intl|0),($31|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $94 = ___cxa_find_matching_catch()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre18 = $1;
   } else {
    $34 = HEAP8[$__digits>>0]|0;
    $35 = $34 & 1;
    $36 = ($35<<24>>24)==(0);
    $37 = HEAP32[$8>>2]|0;
    $38 = $34&255;
    $39 = $38 >>> 1;
    $40 = $36 ? $39 : $37;
    $41 = HEAP32[$__fd>>2]|0;
    $42 = ($40|0)>($41|0);
    if ($42) {
     $43 = (($40) - ($41))|0;
     $44 = $43 << 1;
     $45 = HEAP8[$__sn>>0]|0;
     $46 = $45 & 1;
     $47 = ($46<<24>>24)==(0);
     $48 = ((($__sn)) + 4|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $45&255;
     $51 = $50 >>> 1;
     $52 = $47 ? $51 : $49;
     $53 = HEAP8[$__sym>>0]|0;
     $54 = $53 & 1;
     $55 = ($54<<24>>24)==(0);
     $56 = ((($__sym)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $53&255;
     $59 = $58 >>> 1;
     $60 = $55 ? $59 : $57;
     $61 = $44 | 1;
     $62 = (($61) + ($41))|0;
     $63 = (($62) + ($52))|0;
     $64 = (($63) + ($60))|0;
     $84 = $64;
    } else {
     $65 = HEAP8[$__sn>>0]|0;
     $66 = $65 & 1;
     $67 = ($66<<24>>24)==(0);
     $68 = ((($__sn)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $65&255;
     $71 = $70 >>> 1;
     $72 = $67 ? $71 : $69;
     $73 = HEAP8[$__sym>>0]|0;
     $74 = $73 & 1;
     $75 = ($74<<24>>24)==(0);
     $76 = ((($__sym)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $73&255;
     $79 = $78 >>> 1;
     $80 = $75 ? $79 : $77;
     $81 = (($41) + 2)|0;
     $82 = (($81) + ($72))|0;
     $83 = (($82) + ($80))|0;
     $84 = $83;
    }
    $85 = ($84>>>0)>(100);
    if ($85) {
     $86 = $84 << 2;
     $87 = (_malloc($86)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(475);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $98 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre17 = HEAP32[$8>>2]|0;
       $104 = $$pre;$111 = $$pre17;$124 = $88;$__mb$0 = 0;
       label = 17;
      }
     } else {
      $104 = $34;$111 = $37;$124 = $88;$__mb$0 = $87;
      label = 17;
     }
    } else {
     $104 = $34;$111 = $37;$124 = 0;$__mb$0 = $__mbuf;
     label = 17;
    }
    if ((label|0) == 17) {
     $101 = ((($__iob)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $104 & 1;
     $105 = ($103<<24>>24)==(0);
     $106 = ((($__digits)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $105 ? $8 : $107;
     $109 = $104&255;
     $110 = $109 >>> 1;
     $112 = $105 ? $110 : $111;
     $113 = (($108) + ($112<<2)|0);
     $114 = HEAP32[$__dp>>2]|0;
     $115 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(505,($__mb$0|0),($__mi|0),($__me|0),($102|0),($108|0),($113|0),($2|0),($31|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($41|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      $98 = $124;
     } else {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $121 = (invoke_iiiiiii(482,($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0))|0);
      $122 = __THREW__; __THREW__ = 0;
      $123 = $122&1;
      if ($123) {
       $98 = $124;
      } else {
       $125 = ($124|0)==(0);
       if ($125) {
        $127 = $1;
       } else {
        $126 = $124;
        _free($126);
        $$pre20 = HEAP32[$__loc>>2]|0;
        $127 = $$pre20;
       }
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($127)|0);
       STACKTOP = sp;return ($121|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0 = $96;$$01 = $97;$$pre18 = $1;
    } else {
     $100 = $98;
     _free($100);
     $$pre18$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre18 = $$pre18$pre;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$128 = $$pre18;
  }
 } while(0);
 if ((label|0) == 13) {
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$128 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($128)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__18messagesIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i15 = 0, $$0$i817 = 0, $$02 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 HEAP32[$__ndflt>>2] = 0;
 $0 = ((($__ndflt)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__ndflt)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__dflt>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 $5 = ((($__dflt)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($__dflt)) + 1|0);
 $8 = $4 ? $7 : $6;
 $9 = ((($__dflt)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2&255;
 $12 = $11 >>> 1;
 $13 = $4 ? $12 : $10;
 $14 = (($8) + ($13)|0);
 $15 = ($13|0)>(0);
 L1: do {
  if ($15) {
   $$0$i817 = $8;
   while(1) {
    $16 = HEAP8[$$0$i817>>0]|0;
    __THREW__ = 0;
    invoke_vii(490,($__ndflt|0),($16|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($$0$i817)) + 1|0);
    $20 = ($19>>>0)<($14>>>0);
    if ($20) {
     $$0$i817 = $19;
    } else {
     label = 4;
     break L1;
    }
   }
   $35 = ___cxa_find_matching_catch()|0;
   $36 = tempRet0;
   $lpad$phi$index = $35;$lpad$phi$index2 = $36;
   label = 7;
  } else {
   label = 4;
  }
 } while(0);
 L6: do {
  if ((label|0) == 4) {
   $21 = ($__c|0)==(-1);
   $22 = $__c << 1;
   $23 = $22;
   $24 = $21 ? (-1) : $23;
   $25 = HEAP8[$__ndflt>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   $28 = ((($__ndflt)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($__ndflt)) + 1|0);
   $31 = $27 ? $30 : $29;
   __THREW__ = 0;
   $32 = (invoke_iiiii(506,($24|0),($__set|0),($__msgid|0),($31|0))|0);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $37 = ___cxa_find_matching_catch()|0;
    $38 = tempRet0;
    $lpad$phi$index = $37;$lpad$phi$index2 = $38;
    label = 7;
    break;
   }
   HEAP32[$agg$result>>2] = 0;
   $39 = ((($agg$result)) + 4|0);
   HEAP32[$39>>2] = 0;
   $40 = ((($agg$result)) + 8|0);
   HEAP32[$40>>2] = 0;
   $41 = (_strlen($32)|0);
   $42 = (($32) + ($41)|0);
   $43 = ($41|0)>(0);
   L11: do {
    if ($43) {
     $$0$i15 = $32;
     while(1) {
      $44 = HEAP8[$$0$i15>>0]|0;
      __THREW__ = 0;
      invoke_vii(490,($agg$result|0),($44|0));
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       break;
      }
      $47 = ((($$0$i15)) + 1|0);
      $48 = ($47>>>0)<($42>>>0);
      if ($48) {
       $$0$i15 = $47;
      } else {
       break L11;
      }
     }
     $49 = ___cxa_find_matching_catch()|0;
     $50 = tempRet0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
     $$02 = $49;$$03 = $50;
     break L6;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 7) {
  $$02 = $lpad$phi$index;$$03 = $lpad$phi$index2;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$02|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i1440 = 0, $$0$i35 = 0, $$1 = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i12 = 0, $__buf$i = 0, $__buf$i11 = 0, $__mb$i = 0, $__mb$i10 = 0, $__ndflt = 0, $__nn$i = 0, $__p$0$i1638 = 0, $__p$0$i34 = 0, $__wn$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index10 = 0, $lpad$phi30$index = 0, $lpad$phi30$index3 = 0, $or$cond$i = 0, $or$cond$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i10 = sp + 184|0;
 $__buf$i11 = sp + 192|0;
 $__bn$i12 = sp + 180|0;
 $__wn$i = sp + 176|0;
 $__mb$i = sp + 168|0;
 $__buf$i = sp + 40|0;
 $__bn$i = sp + 32|0;
 $__nn$i = sp + 28|0;
 $__ndflt = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 HEAP32[$__ndflt>>2] = 0;
 $2 = ((($__ndflt)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($__ndflt)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$0>>2] = (50352);
 $5 = HEAP8[$__dflt>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__dflt)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($__dflt)) + 4|0);
 $11 = $7 ? $10 : $9;
 $12 = HEAP32[$10>>2]|0;
 $13 = $5&255;
 $14 = $13 >>> 1;
 $15 = $7 ? $14 : $12;
 $16 = (($11) + ($15<<2)|0);
 $17 = ((($__buf$i11)) + 32|0);
 $18 = ($15|0)>(0);
 L1: do {
  if ($18) {
   $$0$i1440 = $11;
   L2: while(1) {
    HEAP32[$__wn$i>>2] = $$0$i1440;
    $19 = HEAP32[$0>>2]|0;
    $20 = ((($19)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    $22 = (invoke_iiiiiiiii($21|0,($0|0),($__mb$i10|0),($$0$i1440|0),($16|0),($__wn$i|0),($__buf$i11|0),($17|0),($__bn$i12|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 12;
     break;
    }
    $25 = ($22|0)==(2);
    $26 = HEAP32[$__wn$i>>2]|0;
    $27 = ($26|0)==($$0$i1440|0);
    $or$cond$i15 = $25 | $27;
    if ($or$cond$i15) {
     label = 5;
     break;
    }
    $28 = HEAP32[$__bn$i12>>2]|0;
    $29 = ($__buf$i11>>>0)<($28>>>0);
    if ($29) {
     $__p$0$i1638 = $__buf$i11;
     while(1) {
      $33 = HEAP8[$__p$0$i1638>>0]|0;
      __THREW__ = 0;
      invoke_vii(490,($__ndflt|0),($33|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       label = 11;
       break L2;
      }
      $36 = ((($__p$0$i1638)) + 1|0);
      $37 = HEAP32[$__bn$i12>>2]|0;
      $38 = ($36>>>0)<($37>>>0);
      if ($38) {
       $__p$0$i1638 = $36;
      } else {
       break;
      }
     }
    }
    $39 = HEAP32[$__wn$i>>2]|0;
    $40 = ($39>>>0)<($16>>>0);
    $41 = ($22|0)!=(2);
    $42 = $41 & $40;
    if ($42) {
     $$0$i1440 = $39;
    } else {
     label = 9;
     break L1;
    }
   }
   if ((label|0) == 5) {
    __THREW__ = 0;
    invoke_vi(488,(77229|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = ___cxa_find_matching_catch()|0;
    $32 = tempRet0;
    $lpad$phi30$index = $31;$lpad$phi30$index3 = $32;
   }
   else if ((label|0) == 11) {
    $59 = ___cxa_find_matching_catch()|0;
    $60 = tempRet0;
    $lpad$phi30$index = $59;$lpad$phi30$index3 = $60;
   }
   else if ((label|0) == 12) {
    $61 = ___cxa_find_matching_catch()|0;
    $62 = tempRet0;
    $lpad$phi30$index = $61;$lpad$phi30$index3 = $62;
   }
   $$1 = $lpad$phi30$index;$$14 = $lpad$phi30$index3;
  } else {
   label = 9;
  }
 } while(0);
 L16: do {
  if ((label|0) == 9) {
   $43 = ($__c|0)==(-1);
   $44 = $__c << 1;
   $45 = $44;
   $46 = $43 ? (-1) : $45;
   $47 = HEAP8[$__ndflt>>0]|0;
   $48 = $47 & 1;
   $49 = ($48<<24>>24)==(0);
   $50 = ((($__ndflt)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($__ndflt)) + 1|0);
   $53 = $49 ? $52 : $51;
   __THREW__ = 0;
   $54 = (invoke_iiiii(506,($46|0),($__set|0),($__msgid|0),($53|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $$1 = $57;$$14 = $58;
    break;
   }
   HEAP32[$agg$result>>2] = 0;
   $63 = ((($agg$result)) + 4|0);
   HEAP32[$63>>2] = 0;
   $64 = ((($agg$result)) + 8|0);
   HEAP32[$64>>2] = 0;
   $65 = ((($1)) + 4|0);
   HEAP32[$65>>2] = 0;
   HEAP32[$1>>2] = (50400);
   $66 = (_strlen($54)|0);
   $67 = (($54) + ($66)|0);
   $68 = $67;
   $69 = ((($__buf$i)) + 128|0);
   $70 = ($66|0)>(0);
   L21: do {
    if ($70) {
     $$0$i35 = $54;
     L22: while(1) {
      HEAP32[$__nn$i>>2] = $$0$i35;
      $71 = HEAP32[$1>>2]|0;
      $72 = ((($71)) + 16|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = $$0$i35;
      $75 = (($68) - ($74))|0;
      $76 = ($75|0)>(32);
      $77 = ((($$0$i35)) + 32|0);
      $78 = $76 ? $77 : $67;
      __THREW__ = 0;
      $79 = (invoke_iiiiiiiii($73|0,($1|0),($__mb$i|0),($$0$i35|0),($78|0),($__nn$i|0),($__buf$i|0),($69|0),($__bn$i|0))|0);
      $80 = __THREW__; __THREW__ = 0;
      $81 = $80&1;
      if ($81) {
       label = 24;
       break;
      }
      $82 = ($79|0)==(2);
      $83 = HEAP32[$__nn$i>>2]|0;
      $84 = ($83|0)==($$0$i35|0);
      $or$cond$i = $82 | $84;
      if ($or$cond$i) {
       label = 18;
       break;
      }
      $85 = HEAP32[$__bn$i>>2]|0;
      $86 = ($__buf$i>>>0)<($85>>>0);
      if ($86) {
       $__p$0$i34 = $__buf$i;
       while(1) {
        $90 = HEAP32[$__p$0$i34>>2]|0;
        __THREW__ = 0;
        invoke_vii(498,($agg$result|0),($90|0));
        $91 = __THREW__; __THREW__ = 0;
        $92 = $91&1;
        if ($92) {
         label = 23;
         break L22;
        }
        $93 = ((($__p$0$i34)) + 4|0);
        $94 = HEAP32[$__bn$i>>2]|0;
        $95 = ($93>>>0)<($94>>>0);
        if ($95) {
         $__p$0$i34 = $93;
        } else {
         break;
        }
       }
      }
      $96 = HEAP32[$__nn$i>>2]|0;
      $97 = ($96>>>0)<($67>>>0);
      $98 = ($79|0)!=(2);
      $99 = $98 & $97;
      if ($99) {
       $$0$i35 = $96;
      } else {
       break L21;
      }
     }
     if ((label|0) == 18) {
      __THREW__ = 0;
      invoke_vi(488,(77229|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = ___cxa_find_matching_catch()|0;
      $89 = tempRet0;
      $lpad$phi$index = $88;$lpad$phi$index10 = $89;
     }
     else if ((label|0) == 23) {
      $100 = ___cxa_find_matching_catch()|0;
      $101 = tempRet0;
      $lpad$phi$index = $100;$lpad$phi$index10 = $101;
     }
     else if ((label|0) == 24) {
      $102 = ___cxa_find_matching_catch()|0;
      $103 = tempRet0;
      $lpad$phi$index = $102;$lpad$phi$index10 = $103;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$result);
     $$1 = $lpad$phi$index;$$14 = $lpad$phi$index10;
     break L16;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
   STACKTOP = sp;return;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (49852);
 $2 = ((($this)) + 8|0);
 __THREW__ = 0;
 invoke_vii(507,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  $$1 = $84;$$12 = $83;
 } else {
  $5 = ((($this)) + 144|0);
  __THREW__ = 0;
  invoke_viii(508,($5|0),(77159|0),1);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $85 = ___cxa_find_matching_catch()|0;
   $86 = tempRet0;
   $$0 = $86;$$01 = $85;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = ((($this)) + 12|0);
   $$pre$i$i$i = HEAP32[$9>>2]|0;
   $10 = ($$pre$i$i$i|0)==($8|0);
   if (!($10)) {
    $12 = $$pre$i$i$i;
    while(1) {
     $11 = ((($12)) + -4|0);
     $13 = ($11|0)==($8|0);
     if ($13) {
      $$lcssa = $11;
      break;
     } else {
      $12 = $11;
     }
    }
    HEAP32[$9>>2] = $$lcssa;
   }
   HEAP32[(1756)>>2] = 0;
   HEAP32[1752>>2] = (48780);
   __THREW__ = 0;
   invoke_vii(509,($this|0),(1752|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   do {
    if ($15) {
     label = 42;
    } else {
     HEAP32[(1764)>>2] = 0;
     HEAP32[1760>>2] = (48820);
     __THREW__ = 0;
     invoke_vii(510,($this|0),(1760|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      label = 42;
     } else {
      HEAP32[(1772)>>2] = 0;
      HEAP32[1768>>2] = (49892);
      HEAP32[(1776)>>2] = 0;
      HEAP8[(1780)>>0] = 0;
      $18 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
      HEAP32[(1776)>>2] = $18;
      __THREW__ = 0;
      invoke_vii(511,($this|0),(1768|0));
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       label = 42;
      } else {
       HEAP32[(1788)>>2] = 0;
       HEAP32[1784>>2] = (50140);
       __THREW__ = 0;
       invoke_vii(512,($this|0),(1784|0));
       $21 = __THREW__; __THREW__ = 0;
       $22 = $21&1;
       if ($22) {
        label = 42;
       } else {
        HEAP32[(1796)>>2] = 0;
        HEAP32[1792>>2] = (50208);
        __THREW__ = 0;
        invoke_vii(513,($this|0),(1792|0));
        $23 = __THREW__; __THREW__ = 0;
        $24 = $23&1;
        if ($24) {
         label = 42;
        } else {
         __THREW__ = 0;
         invoke_vii(514,(1800|0),1);
         $25 = __THREW__; __THREW__ = 0;
         $26 = $25&1;
         if ($26) {
          label = 42;
         } else {
          __THREW__ = 0;
          invoke_vii(515,($this|0),(1800|0));
          $27 = __THREW__; __THREW__ = 0;
          $28 = $27&1;
          if ($28) {
           label = 42;
          } else {
           HEAP32[(1820)>>2] = 0;
           HEAP32[1816>>2] = (50256);
           __THREW__ = 0;
           invoke_vii(516,($this|0),(1816|0));
           $29 = __THREW__; __THREW__ = 0;
           $30 = $29&1;
           if ($30) {
            label = 42;
           } else {
            HEAP32[(1828)>>2] = 0;
            HEAP32[1824>>2] = (50304);
            __THREW__ = 0;
            invoke_vii(517,($this|0),(1824|0));
            $31 = __THREW__; __THREW__ = 0;
            $32 = $31&1;
            if ($32) {
             label = 42;
            } else {
             __ZNSt3__18numpunctIcEC2Ej(1832,1);
             __THREW__ = 0;
             invoke_vii(518,($this|0),(1832|0));
             $33 = __THREW__; __THREW__ = 0;
             $34 = $33&1;
             if ($34) {
              label = 42;
             } else {
              __ZNSt3__18numpunctIwEC2Ej(1856,1);
              __THREW__ = 0;
              invoke_vii(519,($this|0),(1856|0));
              $35 = __THREW__; __THREW__ = 0;
              $36 = $35&1;
              if ($36) {
               label = 42;
              } else {
               HEAP32[(1892)>>2] = 0;
               HEAP32[1888>>2] = (48860);
               __THREW__ = 0;
               invoke_vii(520,($this|0),(1888|0));
               $37 = __THREW__; __THREW__ = 0;
               $38 = $37&1;
               if ($38) {
                label = 42;
               } else {
                HEAP32[(1900)>>2] = 0;
                HEAP32[1896>>2] = (48932);
                __THREW__ = 0;
                invoke_vii(521,($this|0),(1896|0));
                $39 = __THREW__; __THREW__ = 0;
                $40 = $39&1;
                if ($40) {
                 label = 42;
                } else {
                 HEAP32[(1908)>>2] = 0;
                 HEAP32[1904>>2] = (49004);
                 __THREW__ = 0;
                 invoke_vii(522,($this|0),(1904|0));
                 $41 = __THREW__; __THREW__ = 0;
                 $42 = $41&1;
                 if ($42) {
                  label = 42;
                 } else {
                  HEAP32[(1916)>>2] = 0;
                  HEAP32[1912>>2] = (49064);
                  __THREW__ = 0;
                  invoke_vii(523,($this|0),(1912|0));
                  $43 = __THREW__; __THREW__ = 0;
                  $44 = $43&1;
                  if ($44) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1924)>>2] = 0;
                  HEAP32[1920>>2] = (49372);
                  __THREW__ = 0;
                  invoke_vii(524,($this|0),(1920|0));
                  $45 = __THREW__; __THREW__ = 0;
                  $46 = $45&1;
                  if ($46) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1932)>>2] = 0;
                  HEAP32[1928>>2] = (49436);
                  __THREW__ = 0;
                  invoke_vii(525,($this|0),(1928|0));
                  $47 = __THREW__; __THREW__ = 0;
                  $48 = $47&1;
                  if ($48) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1940)>>2] = 0;
                  HEAP32[1936>>2] = (49500);
                  __THREW__ = 0;
                  invoke_vii(526,($this|0),(1936|0));
                  $49 = __THREW__; __THREW__ = 0;
                  $50 = $49&1;
                  if ($50) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1948)>>2] = 0;
                  HEAP32[1944>>2] = (49564);
                  __THREW__ = 0;
                  invoke_vii(527,($this|0),(1944|0));
                  $51 = __THREW__; __THREW__ = 0;
                  $52 = $51&1;
                  if ($52) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1956)>>2] = 0;
                  HEAP32[1952>>2] = (49628);
                  __THREW__ = 0;
                  invoke_vii(528,($this|0),(1952|0));
                  $53 = __THREW__; __THREW__ = 0;
                  $54 = $53&1;
                  if ($54) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1964)>>2] = 0;
                  HEAP32[1960>>2] = (49664);
                  __THREW__ = 0;
                  invoke_vii(529,($this|0),(1960|0));
                  $55 = __THREW__; __THREW__ = 0;
                  $56 = $55&1;
                  if ($56) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1972)>>2] = 0;
                  HEAP32[1968>>2] = (49700);
                  __THREW__ = 0;
                  invoke_vii(530,($this|0),(1968|0));
                  $57 = __THREW__; __THREW__ = 0;
                  $58 = $57&1;
                  if ($58) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1980)>>2] = 0;
                  HEAP32[1976>>2] = (49736);
                  __THREW__ = 0;
                  invoke_vii(531,($this|0),(1976|0));
                  $59 = __THREW__; __THREW__ = 0;
                  $60 = $59&1;
                  if ($60) {
                   label = 42;
                   break;
                  }
                  HEAP32[(1988)>>2] = 0;
                  HEAP32[1984>>2] = (49124);
                  HEAP32[(1992)>>2] = (49172);
                  __THREW__ = 0;
                  invoke_vii(532,($this|0),(1984|0));
                  $61 = __THREW__; __THREW__ = 0;
                  $62 = $61&1;
                  if ($62) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2004)>>2] = 0;
                  HEAP32[2000>>2] = (49216);
                  HEAP32[(2008)>>2] = (49264);
                  __THREW__ = 0;
                  invoke_vii(533,($this|0),(2000|0));
                  $63 = __THREW__; __THREW__ = 0;
                  $64 = $63&1;
                  if ($64) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2020)>>2] = 0;
                  HEAP32[2016>>2] = (50120);
                  __THREW__ = 0;
                  $65 = (invoke_i(469)|0);
                  $66 = __THREW__; __THREW__ = 0;
                  $67 = $66&1;
                  if ($67) {
                   $68 = ___cxa_find_matching_catch()|0;
                   $69 = tempRet0;
                   $eh$lpad$body$index3Z2D = $69;$eh$lpad$body$indexZ2D = $68;
                   break;
                  }
                  HEAP32[(2024)>>2] = $65;
                  HEAP32[2016>>2] = (49308);
                  __THREW__ = 0;
                  invoke_vii(534,($this|0),(2016|0));
                  $70 = __THREW__; __THREW__ = 0;
                  $71 = $70&1;
                  if ($71) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2036)>>2] = 0;
                  HEAP32[2032>>2] = (50120);
                  __THREW__ = 0;
                  $72 = (invoke_i(469)|0);
                  $73 = __THREW__; __THREW__ = 0;
                  $74 = $73&1;
                  if ($74) {
                   $75 = ___cxa_find_matching_catch()|0;
                   $76 = tempRet0;
                   $eh$lpad$body$index3Z2D = $76;$eh$lpad$body$indexZ2D = $75;
                   break;
                  }
                  HEAP32[(2040)>>2] = $72;
                  HEAP32[2032>>2] = (49340);
                  __THREW__ = 0;
                  invoke_vii(535,($this|0),(2032|0));
                  $77 = __THREW__; __THREW__ = 0;
                  $78 = $77&1;
                  if ($78) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2052)>>2] = 0;
                  HEAP32[2048>>2] = (49772);
                  __THREW__ = 0;
                  invoke_vii(536,($this|0),(2048|0));
                  $79 = __THREW__; __THREW__ = 0;
                  $80 = $79&1;
                  if ($80) {
                   label = 42;
                   break;
                  }
                  HEAP32[(2060)>>2] = 0;
                  HEAP32[2056>>2] = (49812);
                  __THREW__ = 0;
                  invoke_vii(537,($this|0),(2056|0));
                  $81 = __THREW__; __THREW__ = 0;
                  $82 = $81&1;
                  if ($82) {
                   label = 42;
                   break;
                  }
                  return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 42) {
    $87 = ___cxa_find_matching_catch()|0;
    $88 = tempRet0;
    $eh$lpad$body$index3Z2D = $88;$eh$lpad$body$indexZ2D = $87;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
  }
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
  $$1 = $$0;$$12 = $$01;
 }
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2064>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2064|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(538)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((2064|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[50640>>2] = 50636;
     ___cxa_guard_release((2064|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[50640>>2]|0;
 return ($6|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $16 = $3;
  } else {
   $9 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(539,($0|0),($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $$pre = HEAP32[$0>>2]|0;
    $16 = $$pre;
    break;
   }
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $14 = ($f|0)==(0|0);
   if (!($14)) {
    (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   }
   ___resumeException($12|0);
   // unreachable;
  }
 } while(0);
 $15 = (($16) + ($id<<2)|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $20 = $16;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  $$pre2 = HEAP32[$0>>2]|0;
  $20 = $$pre2;
 }
 $19 = (($20) + ($id<<2)|0);
 HEAP32[$19>>2] = $f;
 return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (49852);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
   }
   $9 = (($i$01) + 1)|0;
   $10 = HEAP32[$1>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = $10;
   $13 = $11;
   $14 = (($12) - ($13))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $6 = $11;$i$01 = $9;
   } else {
    break;
   }
  }
 }
 $17 = ((($this)) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($17);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = ((($this)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(376|0),(8|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(2072,1);
 HEAP32[50636>>2] = 2072;
 return (50636|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[50644>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return (50644|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2232>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2232|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(540)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((2232|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[50648>>2] = 50644;
     ___cxa_guard_release((2232|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[50648>>2]|0;
 return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(541)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 return;
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = ((($__p$i)) + 4|0);
  HEAP32[$2>>2] = (542);
  $3 = ((($__p$i)) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,543);
 }
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$this>>2]|0;
  $2 = ((($1)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vi[$3 & 1023]($this);
 }
 return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[49864>>2]|0;HEAP32[49864>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
  $1 = (($0) + ($c<<1)|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2 & $m;
  $4 = ($3<<16>>16)!=(0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(544)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$015 = 0, $$06 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$015 = $low;$$06 = $vec;
  while(1) {
   $4 = HEAP32[$$015>>2]|0;
   $isascii = ($4>>>0)<(128);
   if ($isascii) {
    $5 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $6 = (($5) + ($4<<1)|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = $7&65535;
    $10 = $8;
   } else {
    $10 = 0;
   }
   $9 = $10&65535;
   HEAP16[$$06>>1] = $9;
   $11 = ((($$015)) + 4|0);
   $12 = ((($$06)) + 2|0);
   $13 = ($11|0)==($high|0);
   if ($13) {
    break;
   } else {
    $$015 = $11;$$06 = $12;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $high;
  } else {
   $$01 = $low;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $isascii = ($1>>>0)<(128);
    if ($isascii) {
     $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
     $3 = (($2) + ($1<<1)|0);
     $4 = HEAP16[$3>>1]|0;
     $5 = $4 & $m;
     $6 = ($5<<16>>16)==(0);
     if (!($6)) {
      $$0$lcssa = $$01;
      break L1;
     }
    }
    $7 = ((($$01)) + 4|0);
    $8 = ($7|0)==($high|0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while(0);
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $high;
  } else {
   $$01 = $low;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $isascii = ($1>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$01;
     break L1;
    }
    $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $3 = (($2) + ($1<<1)|0);
    $4 = HEAP16[$3>>1]|0;
    $5 = $4 & $m;
    $6 = ($5<<16>>16)==(0);
    if ($6) {
     $$0$lcssa = $$01;
     break L1;
    }
    $7 = ((($$01)) + 4|0);
    $8 = ($7|0)==($high|0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while(0);
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(545)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$04 = $low;
  while(1) {
   $4 = HEAP32[$$04>>2]|0;
   $isascii = ($4>>>0)<(128);
   if ($isascii) {
    $5 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
    $6 = (($5) + ($4<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = $7;
   } else {
    $8 = $4;
   }
   HEAP32[$$04>>2] = $8;
   $9 = ((($$04)) + 4|0);
   $10 = ($9|0)==($high|0);
   if ($10) {
    break;
   } else {
    $$04 = $9;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(546)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$04 = $low;
  while(1) {
   $4 = HEAP32[$$04>>2]|0;
   $isascii = ($4>>>0)<(128);
   if ($isascii) {
    $5 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
    $6 = (($5) + ($4<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = $7;
   } else {
    $8 = $4;
   }
   HEAP32[$$04>>2] = $8;
   $9 = ((($$04)) + 4|0);
   $10 = ($9|0)==($high|0);
   if ($10) {
    break;
   } else {
    $$04 = $9;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   $2 = $1 << 24 >> 24;
   HEAP32[$$03>>2] = $2;
   $3 = ((($$012)) + 1|0);
   $4 = ((($$03)) + 4|0);
   $5 = ($3|0)==($high|0);
   if ($5) {
    break;
   } else {
    $$012 = $3;$$03 = $4;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$015 = 0, $$06 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $3 = ($low|0)==($high|0);
 if (!($3)) {
  $$015 = $low;$$06 = $dest;
  while(1) {
   $4 = HEAP32[$$015>>2]|0;
   $isascii = ($4>>>0)<(128);
   $5 = $4&255;
   $$dfault = $isascii ? $5 : $dfault;
   HEAP8[$$06>>0] = $$dfault;
   $6 = ((($$015)) + 4|0);
   $7 = ((($$06)) + 1|0);
   $8 = ($6|0)==($high|0);
   if ($8) {
    break;
   } else {
    $$015 = $6;$$06 = $7;
   }
  }
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (49892);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($this)) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c&255;
  $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$02 = $low;
  while(1) {
   $1 = HEAP8[$$02>>0]|0;
   $isascii1 = ($1<<24>>24)>(-1);
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
    $4 = (($3) + ($2<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5&255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02>>0] = $7;
   $8 = ((($$02)) + 1|0);
   $9 = ($8|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c << 24 >> 24;
  $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$02 = $low;
  while(1) {
   $1 = HEAP8[$$02>>0]|0;
   $isascii1 = ($1<<24>>24)>(-1);
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
    $4 = (($3) + ($2<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5&255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02>>0] = $7;
   $8 = ((($$02)) + 1|0);
   $9 = ($8|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = ((($$012)) + 1|0);
   $3 = ((($$03)) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if (!($0)) {
  $$013 = $low;$$04 = $dest;
  while(1) {
   $1 = HEAP8[$$013>>0]|0;
   $isascii2 = ($1<<24>>24)>(-1);
   $$dfault = $isascii2 ? $1 : $dfault;
   HEAP8[$$04>>0] = $$dfault;
   $2 = ((($$013)) + 1|0);
   $3 = ((($$04)) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    break;
   } else {
    $$013 = $2;$$04 = $3;
   }
  }
 }
 return ($high|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (49960);
 __THREW__ = 0;
 $2 = (invoke_i(469)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = ((($this)) + 8|0);
  HEAP32[$5>>2] = $2;
  return;
 }
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$01$be = 0, $$01128 = 0, $$01128$lcssa170 = 0, $$02$be = 0, $$02127 = 0, $$02127$lcssa177 = 0, $$1$lcssa = 0, $$1113 = 0, $$lcssa = 0, $$lcssa183 = 0, $$lcssa191 = 0, $$pre = 0, $$pre59 = 0, $$pre60 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$0133 = 0, $fend$1$be = 0, $fend$1129 = 0, $fend$2$lcssa = 0, $fend$2120 = 0, $n$0117 = 0, $not$ = 0, $or$cond = 0, $or$cond126 = 0, $p$0118 = 0, $save_state = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   $fend$0$lcssa = $frm_end;
  } else {
   $fend$0133 = $frm;
   while(1) {
    $1 = HEAP32[$fend$0133>>2]|0;
    $2 = ($1|0)==(0);
    if ($2) {
     $fend$0$lcssa = $fend$0133;
     break L1;
    }
    $3 = ((($fend$0133)) + 4|0);
    $4 = ($3|0)==($frm_end|0);
    if ($4) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$0133 = $3;
    }
   }
  }
 } while(0);
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $5 = $to_end;
 $6 = ((($this)) + 8|0);
 $7 = ($frm|0)==($frm_end|0);
 $8 = ($to|0)==($to_end|0);
 $or$cond126 = $8 | $7;
 L6: do {
  if ($or$cond126) {
   $111 = $frm;
   label = 47;
  } else {
   $$01128 = $frm;$$02127 = $to;$fend$1129 = $fend$0$lcssa;
   L7: while(1) {
    $9 = $st;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 4)|0;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = $save_state;
    $16 = $15;
    HEAP32[$16>>2] = $11;
    $17 = (($15) + 4)|0;
    $18 = $17;
    HEAP32[$18>>2] = $14;
    $19 = $fend$1129;
    $20 = $$01128;
    $21 = (($19) - ($20))|0;
    $22 = $21 >> 2;
    $23 = $$02127;
    $24 = (($5) - ($23))|0;
    $25 = HEAP32[$6>>2]|0;
    $26 = (_uselocale($25)|0);
    __THREW__ = 0;
    $27 = (invoke_iiiiii(547,($$02127|0),($frm_nxt|0),($22|0),($24|0),($st|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $$lcssa183 = $26;
     label = 9;
     break;
    }
    $30 = ($26|0)==(0|0);
    if (!($30)) {
     __THREW__ = 0;
     (invoke_ii(485,($26|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      label = 8;
      break;
     }
    }
    switch ($27|0) {
    case 0:  {
     $$0 = 1;
     break L6;
     break;
    }
    case -1:  {
     $$01128$lcssa170 = $$01128;$$02127$lcssa177 = $$02127;
     label = 14;
     break L7;
     break;
    }
    default: {
    }
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = (($69) + ($27)|0);
    HEAP32[$to_nxt>>2] = $70;
    $71 = ($70|0)==($to_end|0);
    if ($71) {
     label = 27;
     break;
    }
    $72 = ($fend$1129|0)==($frm_end|0);
    if ($72) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $$01$be = $$pre;$$02$be = $70;$fend$1$be = $frm_end;
    } else {
     $75 = HEAP32[$6>>2]|0;
     $76 = (_uselocale($75)|0);
     __THREW__ = 0;
     $77 = (invoke_iiii(548,($tmp|0),0,($st|0))|0);
     $78 = __THREW__; __THREW__ = 0;
     $79 = $78&1;
     if ($79) {
      $$lcssa191 = $76;
      label = 35;
      break;
     }
     $80 = ($76|0)==(0|0);
     if (!($80)) {
      __THREW__ = 0;
      (invoke_ii(485,($76|0))|0);
      $81 = __THREW__; __THREW__ = 0;
      $82 = $81&1;
      if ($82) {
       label = 34;
       break;
      }
     }
     $92 = ($77|0)==(-1);
     if ($92) {
      $$0 = 2;
      break L6;
     }
     $93 = HEAP32[$to_nxt>>2]|0;
     $94 = $93;
     $95 = (($5) - ($94))|0;
     $96 = ($77>>>0)>($95>>>0);
     if ($96) {
      $$0 = 1;
      break L6;
     }
     $97 = ($77|0)==(0);
     if (!($97)) {
      $n$0117 = $77;$p$0118 = $tmp;
      while(1) {
       $98 = ((($p$0118)) + 1|0);
       $99 = HEAP8[$p$0118>>0]|0;
       $100 = HEAP32[$to_nxt>>2]|0;
       $101 = ((($100)) + 1|0);
       HEAP32[$to_nxt>>2] = $101;
       HEAP8[$100>>0] = $99;
       $102 = (($n$0117) + -1)|0;
       $103 = ($102|0)==(0);
       if ($103) {
        break;
       } else {
        $n$0117 = $102;$p$0118 = $98;
       }
      }
     }
     $104 = HEAP32[$frm_nxt>>2]|0;
     $105 = ((($104)) + 4|0);
     HEAP32[$frm_nxt>>2] = $105;
     $106 = ($105|0)==($frm_end|0);
     L28: do {
      if ($106) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$2120 = $105;
       while(1) {
        $107 = HEAP32[$fend$2120>>2]|0;
        $108 = ($107|0)==(0);
        if ($108) {
         $fend$2$lcssa = $fend$2120;
         break L28;
        }
        $109 = ((($fend$2120)) + 4|0);
        $110 = ($109|0)==($frm_end|0);
        if ($110) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$2120 = $109;
        }
       }
      }
     } while(0);
     $$pre59 = HEAP32[$to_nxt>>2]|0;
     $$01$be = $105;$$02$be = $$pre59;$fend$1$be = $fend$2$lcssa;
    }
    $73 = ($$01$be|0)==($frm_end|0);
    $74 = ($$02$be|0)==($to_end|0);
    $or$cond = $74 | $73;
    if ($or$cond) {
     $111 = $$01$be;
     label = 47;
     break L6;
    } else {
     $$01128 = $$01$be;$$02127 = $$02$be;$fend$1129 = $fend$1$be;
    }
   }
   if ((label|0) == 8) {
    $33 = ___cxa_find_matching_catch(0|0)|0;
    $34 = tempRet0;
    ___clang_call_terminate($33);
    // unreachable;
   }
   else if ((label|0) == 9) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $37 = ($$lcssa183|0)==(0|0);
    if (!($37)) {
     __THREW__ = 0;
     (invoke_ii(485,($$lcssa183|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      $40 = ___cxa_find_matching_catch(0|0)|0;
      $41 = tempRet0;
      ___clang_call_terminate($40);
      // unreachable;
     }
    }
    ___resumeException($35|0);
    // unreachable;
   }
   else if ((label|0) == 14) {
    HEAP32[$to_nxt>>2] = $$02127$lcssa177;
    $42 = HEAP32[$frm_nxt>>2]|0;
    $43 = ($$01128$lcssa170|0)==($42|0);
    L42: do {
     if ($43) {
      $$1$lcssa = $$01128$lcssa170;
     } else {
      $$1113 = $$01128$lcssa170;$47 = $$02127$lcssa177;
      while(1) {
       $44 = HEAP32[$$1113>>2]|0;
       $45 = HEAP32[$6>>2]|0;
       $46 = (_uselocale($45)|0);
       __THREW__ = 0;
       $48 = (invoke_iiii(548,($47|0),($44|0),($save_state|0))|0);
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        $$lcssa = $46;
        break;
       }
       $51 = ($46|0)==(0|0);
       if (!($51)) {
        __THREW__ = 0;
        (invoke_ii(485,($46|0))|0);
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if ($53) {
         label = 18;
         break;
        }
       }
       $63 = ($48|0)==(-1);
       if ($63) {
        $$1$lcssa = $$1113;
        break L42;
       }
       $64 = HEAP32[$to_nxt>>2]|0;
       $65 = (($64) + ($48)|0);
       HEAP32[$to_nxt>>2] = $65;
       $66 = ((($$1113)) + 4|0);
       $67 = HEAP32[$frm_nxt>>2]|0;
       $68 = ($66|0)==($67|0);
       if ($68) {
        $$1$lcssa = $66;
        break L42;
       } else {
        $$1113 = $66;$47 = $65;
       }
      }
      if ((label|0) == 18) {
       $54 = ___cxa_find_matching_catch(0|0)|0;
       $55 = tempRet0;
       ___clang_call_terminate($54);
       // unreachable;
      }
      $56 = ___cxa_find_matching_catch()|0;
      $57 = tempRet0;
      $58 = ($$lcssa|0)==(0|0);
      if (!($58)) {
       __THREW__ = 0;
       (invoke_ii(485,($$lcssa|0))|0);
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if ($60) {
        $61 = ___cxa_find_matching_catch(0|0)|0;
        $62 = tempRet0;
        ___clang_call_terminate($61);
        // unreachable;
       }
      }
      ___resumeException($56|0);
      // unreachable;
     }
    } while(0);
    HEAP32[$frm_nxt>>2] = $$1$lcssa;
    $$0 = 2;
    break;
   }
   else if ((label|0) == 27) {
    $$pre60 = HEAP32[$frm_nxt>>2]|0;
    $111 = $$pre60;
    label = 47;
    break;
   }
   else if ((label|0) == 34) {
    $83 = ___cxa_find_matching_catch(0|0)|0;
    $84 = tempRet0;
    ___clang_call_terminate($83);
    // unreachable;
   }
   else if ((label|0) == 35) {
    $85 = ___cxa_find_matching_catch()|0;
    $86 = tempRet0;
    $87 = ($$lcssa191|0)==(0|0);
    if (!($87)) {
     __THREW__ = 0;
     (invoke_ii(485,($$lcssa191|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      $90 = ___cxa_find_matching_catch(0|0)|0;
      $91 = tempRet0;
      ___clang_call_terminate($90);
      // unreachable;
     }
    }
    ___resumeException($85|0);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 47) {
  $not$ = ($111|0)!=($frm_end|0);
  $112 = $not$&1;
  $$0 = $112;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$01$be = 0, $$01165 = 0, $$01165$lcssa223 = 0, $$02$be = 0, $$02164 = 0, $$02164$lcssa230 = 0, $$1$lcssa = 0, $$1157 = 0, $$1157$lcssa215 = 0, $$1157$lcssa216 = 0, $$2 = 0, $$lcssa = 0, $$lcssa238 = 0, $$lcssa244 = 0, $$lcssa252 = 0, $$pre = 0, $$pre80 = 0, $$pre81 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$0169 = 0, $fend$1$be = 0, $fend$1166 = 0, $fend$2$lcssa = 0, $fend$2158 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond163 = 0, $save_state = 0, $storemerge156 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   $fend$0$lcssa = $frm_end;
  } else {
   $fend$0169 = $frm;
   while(1) {
    $1 = HEAP8[$fend$0169>>0]|0;
    $2 = ($1<<24>>24)==(0);
    if ($2) {
     $fend$0$lcssa = $fend$0169;
     break L1;
    }
    $3 = ((($fend$0169)) + 1|0);
    $4 = ($3|0)==($frm_end|0);
    if ($4) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$0169 = $3;
    }
   }
  }
 } while(0);
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $5 = $to_end;
 $6 = ((($this)) + 8|0);
 $7 = ($frm|0)==($frm_end|0);
 $8 = ($to|0)==($to_end|0);
 $or$cond163 = $8 | $7;
 L6: do {
  if ($or$cond163) {
   $103 = $frm;
   label = 47;
  } else {
   $$01165 = $frm;$$02164 = $to;$fend$1166 = $fend$0$lcssa;
   L7: while(1) {
    $9 = $st;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 4)|0;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = $save_state;
    $16 = $15;
    HEAP32[$16>>2] = $11;
    $17 = (($15) + 4)|0;
    $18 = $17;
    HEAP32[$18>>2] = $14;
    $19 = $fend$1166;
    $20 = $$01165;
    $21 = (($19) - ($20))|0;
    $22 = $$02164;
    $23 = (($5) - ($22))|0;
    $24 = $23 >> 2;
    $25 = HEAP32[$6>>2]|0;
    $26 = (_uselocale($25)|0);
    __THREW__ = 0;
    $27 = (invoke_iiiiii(549,($$02164|0),($frm_nxt|0),($21|0),($24|0),($st|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $$lcssa244 = $26;
     label = 9;
     break;
    }
    $30 = ($26|0)==(0|0);
    if (!($30)) {
     __THREW__ = 0;
     (invoke_ii(485,($26|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      label = 8;
      break;
     }
    }
    switch ($27|0) {
    case 0:  {
     $$0 = 2;
     break L6;
     break;
    }
    case -1:  {
     $$01165$lcssa223 = $$01165;$$02164$lcssa230 = $$02164;$$lcssa238 = $19;
     label = 14;
     break L7;
     break;
    }
    default: {
    }
    }
    $70 = HEAP32[$to_nxt>>2]|0;
    $71 = (($70) + ($27<<2)|0);
    HEAP32[$to_nxt>>2] = $71;
    $72 = ($71|0)==($to_end|0);
    if ($72) {
     label = 31;
     break;
    }
    $73 = ($fend$1166|0)==($frm_end|0);
    $$pre = HEAP32[$frm_nxt>>2]|0;
    if ($73) {
     $$01$be = $$pre;$$02$be = $71;$fend$1$be = $frm_end;
    } else {
     $76 = HEAP32[$6>>2]|0;
     $77 = (_uselocale($76)|0);
     __THREW__ = 0;
     $78 = (invoke_iiiii(550,($71|0),($$pre|0),1,($st|0))|0);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      $$lcssa252 = $77;
      label = 38;
      break;
     }
     $81 = ($77|0)==(0|0);
     if (!($81)) {
      __THREW__ = 0;
      (invoke_ii(485,($77|0))|0);
      $82 = __THREW__; __THREW__ = 0;
      $83 = $82&1;
      if ($83) {
       label = 37;
       break;
      }
     }
     $93 = ($78|0)==(0);
     if (!($93)) {
      $$0 = 2;
      break L6;
     }
     $94 = HEAP32[$to_nxt>>2]|0;
     $95 = ((($94)) + 4|0);
     HEAP32[$to_nxt>>2] = $95;
     $96 = HEAP32[$frm_nxt>>2]|0;
     $97 = ((($96)) + 1|0);
     HEAP32[$frm_nxt>>2] = $97;
     $98 = ($97|0)==($frm_end|0);
     L22: do {
      if ($98) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$2158 = $97;
       while(1) {
        $99 = HEAP8[$fend$2158>>0]|0;
        $100 = ($99<<24>>24)==(0);
        if ($100) {
         $fend$2$lcssa = $fend$2158;
         break L22;
        }
        $101 = ((($fend$2158)) + 1|0);
        $102 = ($101|0)==($frm_end|0);
        if ($102) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$2158 = $101;
        }
       }
      }
     } while(0);
     $$pre80 = HEAP32[$to_nxt>>2]|0;
     $$01$be = $97;$$02$be = $$pre80;$fend$1$be = $fend$2$lcssa;
    }
    $74 = ($$01$be|0)==($frm_end|0);
    $75 = ($$02$be|0)==($to_end|0);
    $or$cond = $75 | $74;
    if ($or$cond) {
     $103 = $$01$be;
     label = 47;
     break L6;
    } else {
     $$01165 = $$01$be;$$02164 = $$02$be;$fend$1166 = $fend$1$be;
    }
   }
   if ((label|0) == 8) {
    $33 = ___cxa_find_matching_catch(0|0)|0;
    $34 = tempRet0;
    ___clang_call_terminate($33);
    // unreachable;
   }
   else if ((label|0) == 9) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $37 = ($$lcssa244|0)==(0|0);
    if (!($37)) {
     __THREW__ = 0;
     (invoke_ii(485,($$lcssa244|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      $40 = ___cxa_find_matching_catch(0|0)|0;
      $41 = tempRet0;
      ___clang_call_terminate($40);
      // unreachable;
     }
    }
    ___resumeException($35|0);
    // unreachable;
   }
   else if ((label|0) == 14) {
    HEAP32[$to_nxt>>2] = $$02164$lcssa230;
    $42 = HEAP32[$frm_nxt>>2]|0;
    $43 = ($$01165$lcssa223|0)==($42|0);
    L36: do {
     if ($43) {
      $$1$lcssa = $$01165$lcssa223;
     } else {
      $$1157 = $$01165$lcssa223;$storemerge156 = $$02164$lcssa230;
      L37: while(1) {
       $44 = $$1157;
       $45 = (($$lcssa238) - ($44))|0;
       $46 = HEAP32[$6>>2]|0;
       $47 = (_uselocale($46)|0);
       __THREW__ = 0;
       $48 = (invoke_iiiii(550,($storemerge156|0),($$1157|0),($45|0),($save_state|0))|0);
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        $$lcssa = $47;
        label = 19;
        break;
       }
       $51 = ($47|0)==(0|0);
       if (!($51)) {
        __THREW__ = 0;
        (invoke_ii(485,($47|0))|0);
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if ($53) {
         label = 18;
         break;
        }
       }
       switch ($48|0) {
       case -1:  {
        $$1157$lcssa215 = $$1157;
        label = 25;
        break L37;
        break;
       }
       case -2:  {
        $$1157$lcssa216 = $$1157;
        label = 26;
        break L37;
        break;
       }
       case 0:  {
        $63 = ((($$1157)) + 1|0);
        $$2 = $63;
        break;
       }
       default: {
        $64 = (($$1157) + ($48)|0);
        $$2 = $64;
       }
       }
       $65 = HEAP32[$to_nxt>>2]|0;
       $66 = ((($65)) + 4|0);
       HEAP32[$to_nxt>>2] = $66;
       $67 = HEAP32[$frm_nxt>>2]|0;
       $68 = ($$2|0)==($67|0);
       if ($68) {
        $$1$lcssa = $$2;
        break L36;
       } else {
        $$1157 = $$2;$storemerge156 = $66;
       }
      }
      if ((label|0) == 18) {
       $54 = ___cxa_find_matching_catch(0|0)|0;
       $55 = tempRet0;
       ___clang_call_terminate($54);
       // unreachable;
      }
      else if ((label|0) == 19) {
       $56 = ___cxa_find_matching_catch()|0;
       $57 = tempRet0;
       $58 = ($$lcssa|0)==(0|0);
       if (!($58)) {
        __THREW__ = 0;
        (invoke_ii(485,($$lcssa|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         $61 = ___cxa_find_matching_catch(0|0)|0;
         $62 = tempRet0;
         ___clang_call_terminate($61);
         // unreachable;
        }
       }
       ___resumeException($56|0);
       // unreachable;
      }
      else if ((label|0) == 25) {
       HEAP32[$frm_nxt>>2] = $$1157$lcssa215;
       $$0 = 2;
       break L6;
      }
      else if ((label|0) == 26) {
       HEAP32[$frm_nxt>>2] = $$1157$lcssa216;
       $$0 = 1;
       break L6;
      }
     }
    } while(0);
    HEAP32[$frm_nxt>>2] = $$1$lcssa;
    $not$3 = ($$1$lcssa|0)!=($frm_end|0);
    $69 = $not$3&1;
    $$0 = $69;
    break;
   }
   else if ((label|0) == 31) {
    $$pre81 = HEAP32[$frm_nxt>>2]|0;
    $103 = $$pre81;
    label = 47;
    break;
   }
   else if ((label|0) == 37) {
    $84 = ___cxa_find_matching_catch(0|0)|0;
    $85 = tempRet0;
    ___clang_call_terminate($84);
    // unreachable;
   }
   else if ((label|0) == 38) {
    $86 = ___cxa_find_matching_catch()|0;
    $87 = tempRet0;
    $88 = ($$lcssa252|0)==(0|0);
    if (!($88)) {
     __THREW__ = 0;
     (invoke_ii(485,($$lcssa252|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      $91 = ___cxa_find_matching_catch(0|0)|0;
      $92 = tempRet0;
      ___clang_call_terminate($91);
      // unreachable;
     }
    }
    ___resumeException($86|0);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 47) {
  $not$ = ($103|0)!=($frm_end|0);
  $104 = $not$&1;
  $$0 = $104;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale($1)|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(548,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if (!($13)) {
   __THREW__ = 0;
   (invoke_ii(485,($2|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   }
  }
  ___resumeException($11|0);
  // unreachable;
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(485,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 switch ($3|0) {
 case 0: case -1:  {
  $$0 = 2;
  break;
 }
 default: {
  $18 = (($3) + -1)|0;
  $19 = HEAP32[$to_nxt>>2]|0;
  $20 = $to_end;
  $21 = $19;
  $22 = (($20) - ($21))|0;
  $23 = ($18>>>0)>($22>>>0);
  if ($23) {
   $$0 = 1;
  } else {
   $24 = ($18|0)==(0);
   if ($24) {
    $$0 = 0;
   } else {
    $n$02 = $18;$p$03 = $tmp;
    while(1) {
     $25 = ((($p$03)) + 1|0);
     $26 = HEAP8[$p$03>>0]|0;
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = ((($27)) + 1|0);
     HEAP32[$to_nxt>>2] = $28;
     HEAP8[$27>>0] = $26;
     $29 = (($n$02) + -1)|0;
     $30 = ($29|0)==(0);
     if ($30) {
      $$0 = 0;
      break;
     } else {
      $n$02 = $29;$p$03 = $25;
     }
    }
   }
  }
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(485,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 16;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iiii(551,(0|0),(0|0),4)|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $13 = ___cxa_find_matching_catch(0|0)|0;
    $14 = tempRet0;
    $15 = ($2|0)==(0|0);
    if ($15) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(485,($2|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
   $8 = ($2|0)==(0|0);
   if (!($8)) {
    __THREW__ = 0;
    (invoke_ii(485,($2|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch(0|0)|0;
     $12 = tempRet0;
     ___clang_call_terminate($11);
     // unreachable;
    }
   }
   $20 = ($5|0)==(0);
   if ($20) {
    $21 = HEAP32[$0>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     $23 = (invoke_ii(485,($21|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 16;
      break;
     }
     $26 = ($23|0)==(0|0);
     if ($26) {
      $$0 = 0;
     } else {
      __THREW__ = 0;
      (invoke_ii(485,($23|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       $29 = ___cxa_find_matching_catch(0|0)|0;
       $30 = tempRet0;
       ___clang_call_terminate($29);
       // unreachable;
      } else {
       $$0 = 0;
      }
     }
    }
   } else {
    $$0 = -1;
   }
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 16) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  $eh$lpad$body$indexZ2D = $31;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$0115 = 0, $$1 = 0, $$lcssa = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$016 = 0, $nbytes$1 = 0, $nwchar_t$017 = 0, $or$cond = 0, $or$cond14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $frm_end;
 $1 = ((($this)) + 8|0);
 $2 = ($mx|0)==(0);
 $3 = ($frm|0)==($frm_end|0);
 $or$cond14 = $3 | $2;
 L1: do {
  if ($or$cond14) {
   $nbytes$0$lcssa = 0;
  } else {
   $$0115 = $frm;$nbytes$016 = 0;$nwchar_t$017 = 0;
   while(1) {
    $4 = $$0115;
    $5 = (($0) - ($4))|0;
    $6 = HEAP32[$1>>2]|0;
    $7 = (_uselocale($6)|0);
    __THREW__ = 0;
    $8 = (invoke_iiii(552,($$0115|0),($5|0),($st|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $$lcssa = $7;
     break;
    }
    $11 = ($7|0)==(0|0);
    if (!($11)) {
     __THREW__ = 0;
     (invoke_ii(485,($7|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 5;
      break;
     }
    }
    switch ($8|0) {
    case -2: case -1:  {
     $nbytes$0$lcssa = $nbytes$016;
     break L1;
     break;
    }
    case 0:  {
     $23 = ((($$0115)) + 1|0);
     $$1 = $23;$$pn = 1;
     break;
    }
    default: {
     $24 = (($$0115) + ($8)|0);
     $$1 = $24;$$pn = $8;
    }
    }
    $nbytes$1 = (($$pn) + ($nbytes$016))|0;
    $25 = (($nwchar_t$017) + 1)|0;
    $26 = ($25>>>0)>=($mx>>>0);
    $27 = ($$1|0)==($frm_end|0);
    $or$cond = $27 | $26;
    if ($or$cond) {
     $nbytes$0$lcssa = $nbytes$1;
     break L1;
    } else {
     $$0115 = $$1;$nbytes$016 = $nbytes$1;$nwchar_t$017 = $25;
    }
   }
   if ((label|0) == 5) {
    $14 = ___cxa_find_matching_catch(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
   $16 = ___cxa_find_matching_catch()|0;
   $17 = tempRet0;
   $18 = ($$lcssa|0)==(0|0);
   if (!($18)) {
    __THREW__ = 0;
    (invoke_ii(485,($$lcssa|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    }
   }
   ___resumeException($16|0);
   // unreachable;
  }
 } while(0);
 return ($nbytes$0$lcssa|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
 } else {
  __THREW__ = 0;
  $3 = (invoke_ii(485,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  }
  $6 = ($3|0)==(0|0);
  if ($6) {
   $11 = 4;
  } else {
   __THREW__ = 0;
   (invoke_ii(485,($3|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(0|0)|0;
    $10 = tempRet0;
    ___clang_call_terminate($9);
    // unreachable;
   } else {
    $11 = 4;
   }
  }
 }
 return ($11|0);
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIcEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (50040);
 $2 = ((($this)) + 8|0);
 HEAP8[$2>>0] = 46;
 $3 = ((($this)) + 9|0);
 HEAP8[$3>>0] = 44;
 $4 = ((($this)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 return;
}
function __ZNSt3__18numpunctIwEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (50080);
 $2 = ((($this)) + 8|0);
 HEAP32[$2>>2] = 46;
 $3 = ((($this)) + 12|0);
 HEAP32[$3>>2] = 44;
 $4 = ((($this)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (50040);
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (50080);
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,77298,4);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(50652)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,50652,$0);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,77303,5);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(50672)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,50672,$0);
 return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0 = 8;
  break;
 }
 case 8:  {
  $$0 = 16;
  break;
 }
 case 0:  {
  $$0 = 0;
  break;
 }
 default: {
  $$0 = 10;
 }
 }
 return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2240>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2240|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2248>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2248|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 50696;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((50864)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2248|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(553,(50696|0),(77309|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(553,((50708)|0),(77316|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(553,((50720)|0),(77323|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(553,((50732)|0),(77331|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(553,((50744)|0),(77341|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(553,((50756)|0),(77350|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(553,((50768)|0),(77357|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(553,((50780)|0),(77366|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(553,((50792)|0),(77370|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(553,((50804)|0),(77374|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(553,((50816)|0),(77378|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(553,((50828)|0),(77382|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(553,((50840)|0),(77386|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(553,((50852)|0),(77390|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[50864>>2] = 50696;
                  ___cxa_guard_release((2240|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch()|0;
    $43 = tempRet0;
    ___cxa_guard_abort((2240|0));
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[50864>>2]|0;
 return ($41|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2256>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2256|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2264>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2264|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 50868;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((51036)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2264|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(554,(50868|0),(51036|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(554,((50880)|0),(51064|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(554,((50892)|0),(51092|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(554,((50904)|0),(51124|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(554,((50916)|0),(51164|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(554,((50928)|0),(51200|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(554,((50940)|0),(51228|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(554,((50952)|0),(51264|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(554,((50964)|0),(51280|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(554,((50976)|0),(51296|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(554,((50988)|0),(51312|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(554,((51000)|0),(51328|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(554,((51012)|0),(51344|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(554,((51024)|0),(51360|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[51376>>2] = 50868;
                  ___cxa_guard_release((2256|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch()|0;
    $43 = tempRet0;
    ___cxa_guard_abort((2256|0));
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[51376>>2]|0;
 return ($41|0);
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2272>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2272|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2280>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2280|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 51380;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((51668)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2280|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(553,(51380|0),(77394|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(553,((51392)|0),(77402|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(553,((51404)|0),(77411|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(553,((51416)|0),(77417|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(553,((51428)|0),(77423|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(553,((51440)|0),(77427|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(553,((51452)|0),(77432|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(553,((51464)|0),(77437|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(553,((51476)|0),(77444|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(553,((51488)|0),(77454|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(553,((51500)|0),(77462|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(553,((51512)|0),(77471|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(553,((51524)|0),(77480|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(553,((51536)|0),(77484|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(553,((51548)|0),(77488|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(553,((51560)|0),(77492|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(553,((51572)|0),(77423|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(553,((51584)|0),(77496|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(553,((51596)|0),(77500|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(553,((51608)|0),(77504|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(553,((51620)|0),(77508|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(553,((51632)|0),(77512|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(553,((51644)|0),(77516|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(553,((51656)|0),(77520|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[51668>>2] = 51380;
                    ___cxa_guard_release((2272|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch()|0;
    $63 = tempRet0;
    ___cxa_guard_abort((2272|0));
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[51668>>2]|0;
 return ($61|0);
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2288>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2288|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2296>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2296|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 51672;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((51960)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2296|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(554,(51672|0),(51960|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(554,((51684)|0),(51992|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(554,((51696)|0),(52028|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(554,((51708)|0),(52052|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(554,((51720)|0),(52076|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(554,((51732)|0),(52092|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(554,((51744)|0),(52112|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(554,((51756)|0),(52132|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(554,((51768)|0),(52160|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(554,((51780)|0),(52200|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(554,((51792)|0),(52232|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(554,((51804)|0),(52268|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(554,((51816)|0),(52304|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(554,((51828)|0),(52320|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(554,((51840)|0),(52336|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(554,((51852)|0),(52352|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(554,((51864)|0),(52076|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(554,((51876)|0),(52368|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(554,((51888)|0),(52384|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(554,((51900)|0),(52400|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(554,((51912)|0),(52416|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(554,((51924)|0),(52432|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(554,((51936)|0),(52448|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(554,((51948)|0),(52464|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[52480>>2] = 51672;
                    ___cxa_guard_release((2288|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch()|0;
    $63 = tempRet0;
    ___cxa_guard_abort((2288|0));
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[52480>>2]|0;
 return ($61|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2304>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2304|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2312>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2312|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 52484;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((52772)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2312|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(553,(52484|0),(77524|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(553,((52496)|0),(77527|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[52772>>2] = 52484;
      ___cxa_guard_release((2304|0));
      break;
     }
    }
    $18 = ___cxa_find_matching_catch()|0;
    $19 = tempRet0;
    ___cxa_guard_abort((2304|0));
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[52772>>2]|0;
 return ($17|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2320>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2320|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[2328>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((2328|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $8 = 52776;
      while(1) {
       HEAP32[$8>>2] = 0;
       $9 = ((($8)) + 4|0);
       HEAP32[$9>>2] = 0;
       $10 = ((($8)) + 8|0);
       HEAP32[$10>>2] = 0;
       $11 = ((($8)) + 12|0);
       $12 = ($11|0)==((53064)|0);
       if ($12) {
        break;
       } else {
        $8 = $11;
       }
      }
      ___cxa_guard_release((2328|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(554,(52776|0),(53064|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(554,((52788)|0),(53076|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[53088>>2] = 52776;
      ___cxa_guard_release((2320|0));
      break;
     }
    }
    $18 = ___cxa_find_matching_catch()|0;
    $19 = tempRet0;
    ___cxa_guard_abort((2320|0));
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[53088>>2]|0;
 return ($17|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2336>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2336|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(508,(53092|0),(77530|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2336|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     ___cxa_guard_release((2336|0));
     break;
    }
   }
  }
 } while(0);
 return (53092|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2344>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2344|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(555,(53104|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(556,(53140|0),(53104|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      ___cxa_guard_release((2344|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2344|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (53140|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2352>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2352|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(508,(53152|0),(77539|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2352|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     ___cxa_guard_release((2352|0));
     break;
    }
   }
  }
 } while(0);
 return (53152|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2360>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2360|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(555,(53164|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(556,(53200|0),(53164|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      ___cxa_guard_release((2360|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2360|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (53200|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2368>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2368|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(508,(53212|0),(77548|0),20);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2368|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     ___cxa_guard_release((2368|0));
     break;
    }
   }
  }
 } while(0);
 return (53212|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2376>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2376|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(555,(53224|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(556,(53308|0),(53224|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      ___cxa_guard_release((2376|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2376|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (53308|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2384>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2384|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(508,(53320|0),(77569|0),11);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((2384|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     ___cxa_guard_release((2384|0));
     break;
    }
   }
  }
 } while(0);
 return (53320|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2392>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((2392|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(555,(53332|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(556,(53380|0),(53332|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      ___cxa_guard_release((2392|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((2392|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (53380|0);
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (49960);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(469)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = ($1|0)==($2|0);
   if (!($5)) {
    $6 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi(483,($6|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
   }
   return;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$040 = 0, $$085 = 0, $$lcssa = 0, $$lcssa117 = 0, $$ph$ph = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $$pre$i2$i$i16$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off090 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0104 = 0, $__ky1$091 = 0, $__ky2$098 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$0102 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$387 = 0, $__n_does_match$4 = 0, $__n_does_match$596 = 0;
 var $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$0101 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$386 = 0, $__n_might_match$4 = 0, $__st$0103 = 0, $__st$188 = 0, $__st$297 = 0, $__st$384 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $or$cond = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(475);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $18 = $5;
   $190 = $18;$__status$0 = $5;
   label = 11;
  } else {
   $190 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $19 = ($__kb|0)==($__ke|0);
   if ($19) {
    $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
   } else {
    $__ky$0104 = $__kb;$__n_does_match$0102 = 0;$__n_might_match$0101 = $3;$__st$0103 = $__status$0;
    while(1) {
     $22 = HEAP8[$__ky$0104>>0]|0;
     $23 = $22 & 1;
     $24 = ($23<<24>>24)==(0);
     if ($24) {
      $27 = $22&255;
      $28 = $27 >>> 1;
      $29 = $28;
     } else {
      $25 = ((($__ky$0104)) + 4|0);
      $26 = HEAP32[$25>>2]|0;
      $29 = $26;
     }
     $30 = ($29|0)==(0);
     if ($30) {
      HEAP8[$__st$0103>>0] = 2;
      $31 = (($__n_might_match$0101) + -1)|0;
      $32 = (($__n_does_match$0102) + 1)|0;
      $__n_does_match$1 = $32;$__n_might_match$1 = $31;
     } else {
      HEAP8[$__st$0103>>0] = 1;
      $__n_does_match$1 = $__n_does_match$0102;$__n_might_match$1 = $__n_might_match$0101;
     }
     $33 = ((($__ky$0104)) + 12|0);
     $34 = ((($__st$0103)) + 1|0);
     $35 = ($33|0)==($__ke|0);
     if ($35) {
      $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
      break;
     } else {
      $__ky$0104 = $33;$__n_does_match$0102 = $__n_does_match$1;$__n_might_match$0101 = $__n_might_match$1;$__st$0103 = $34;
     }
    }
   }
   $20 = ($__kb|0)==($__ke|0);
   $21 = ($__kb|0)==($__ke|0);
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $36 = HEAP32[$__b>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      $50 = 0;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 5;
        break L20;
       }
       $49 = ($46|0)==(-1);
       if ($49) {
        HEAP32[$__b>>2] = 0;
        $50 = 0;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $50 = $$pre$i$i$i;
        break;
       }
      } else {
       $50 = $36;
      }
     }
    } while(0);
    $51 = ($50|0)==(0|0);
    $52 = HEAP32[$__e>>2]|0;
    $53 = ($52|0)==(0|0);
    if ($53) {
     $$pre$i2$i$i16 = 0;
    } else {
     $54 = ((($52)) + 12|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ((($52)) + 16|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($55|0)==($57|0);
     if ($58) {
      $59 = HEAP32[$52>>2]|0;
      $60 = ((($59)) + 36|0);
      $61 = HEAP32[$60>>2]|0;
      __THREW__ = 0;
      $62 = (invoke_ii($61|0,($52|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       label = 5;
       break;
      }
      $65 = ($62|0)==(-1);
      if ($65) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i16 = 0;
      } else {
       $$pre$i2$i$i16 = $52;
      }
     } else {
      $$pre$i2$i$i16 = $52;
     }
    }
    $66 = ($$pre$i2$i$i16|0)==(0|0);
    $tmp$i$i = $51 ^ $66;
    $67 = ($__n_might_match$2|0)!=(0);
    $68 = $67 & $tmp$i$i;
    $69 = HEAP32[$__b>>2]|0;
    if (!($68)) {
     $$lcssa = $66;$$lcssa117 = $69;$$pre$i2$i$i16$lcssa = $$pre$i2$i$i16;
     label = 64;
     break;
    }
    $70 = ((($69)) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ((($69)) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($71|0)==($73|0);
    if ($74) {
     $75 = HEAP32[$69>>2]|0;
     $76 = ((($75)) + 36|0);
     $77 = HEAP32[$76>>2]|0;
     __THREW__ = 0;
     $78 = (invoke_ii($77|0,($69|0))|0);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      label = 5;
      break;
     } else {
      $$0$i$i = $78;
     }
    } else {
     $81 = HEAP8[$71>>0]|0;
     $82 = $81&255;
     $$0$i$i = $82;
    }
    $83 = $$0$i$i&255;
    if ($__case_sensitive) {
     $__c$0 = $83;
    } else {
     $84 = HEAP32[$__ct>>2]|0;
     $85 = ((($84)) + 12|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_iii($86|0,($__ct|0),($83|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 5;
      break;
     } else {
      $__c$0 = $87;
     }
    }
    $90 = (($__indx$0) + 1)|0;
    if ($20) {
     $__consume$0$off0$lcssa = 0;$__n_does_match$3$lcssa = $__n_does_match$2;$__n_might_match$3$lcssa = $__n_might_match$2;
    } else {
     $__consume$0$off090 = 0;$__ky1$091 = $__kb;$__n_does_match$387 = $__n_does_match$2;$__n_might_match$386 = $__n_might_match$2;$__st$188 = $__status$0;
     while(1) {
      $91 = HEAP8[$__st$188>>0]|0;
      $92 = ($91<<24>>24)==(1);
      do {
       if ($92) {
        $93 = HEAP8[$__ky1$091>>0]|0;
        $94 = $93 & 1;
        $95 = ($94<<24>>24)==(0);
        if ($95) {
         $98 = ((($__ky1$091)) + 1|0);
         $100 = $98;
        } else {
         $96 = ((($__ky1$091)) + 8|0);
         $97 = HEAP32[$96>>2]|0;
         $100 = $97;
        }
        $99 = (($100) + ($__indx$0)|0);
        $101 = HEAP8[$99>>0]|0;
        if ($__case_sensitive) {
         $__kc$0 = $101;
        } else {
         $102 = HEAP32[$__ct>>2]|0;
         $103 = ((($102)) + 12|0);
         $104 = HEAP32[$103>>2]|0;
         __THREW__ = 0;
         $105 = (invoke_iii($104|0,($__ct|0),($101|0))|0);
         $106 = __THREW__; __THREW__ = 0;
         $107 = $106&1;
         if ($107) {
          label = 4;
          break L20;
         } else {
          $__kc$0 = $105;
         }
        }
        $108 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
        if (!($108)) {
         HEAP8[$__st$188>>0] = 0;
         $120 = (($__n_might_match$386) + -1)|0;
         $__consume$1$off0 = $__consume$0$off090;$__n_does_match$4 = $__n_does_match$387;$__n_might_match$4 = $120;
         break;
        }
        $109 = HEAP8[$__ky1$091>>0]|0;
        $110 = $109 & 1;
        $111 = ($110<<24>>24)==(0);
        if ($111) {
         $114 = $109&255;
         $115 = $114 >>> 1;
         $116 = $115;
        } else {
         $112 = ((($__ky1$091)) + 4|0);
         $113 = HEAP32[$112>>2]|0;
         $116 = $113;
        }
        $117 = ($116|0)==($90|0);
        if ($117) {
         HEAP8[$__st$188>>0] = 2;
         $118 = (($__n_might_match$386) + -1)|0;
         $119 = (($__n_does_match$387) + 1)|0;
         $__consume$1$off0 = 1;$__n_does_match$4 = $119;$__n_might_match$4 = $118;
        } else {
         $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$387;$__n_might_match$4 = $__n_might_match$386;
        }
       } else {
        $__consume$1$off0 = $__consume$0$off090;$__n_does_match$4 = $__n_does_match$387;$__n_might_match$4 = $__n_might_match$386;
       }
      } while(0);
      $121 = ((($__ky1$091)) + 12|0);
      $122 = ((($__st$188)) + 1|0);
      $123 = ($121|0)==($__ke|0);
      if ($123) {
       $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
       break;
      } else {
       $__consume$0$off090 = $__consume$1$off0;$__ky1$091 = $121;$__n_does_match$387 = $__n_does_match$4;$__n_might_match$386 = $__n_might_match$4;$__st$188 = $122;
      }
     }
    }
    if (!($__consume$0$off0$lcssa)) {
     $__indx$0 = $90;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    }
    $124 = HEAP32[$__b>>2]|0;
    $125 = ((($124)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($124)) + 16|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($126|0)==($128|0);
    if ($129) {
     $130 = HEAP32[$124>>2]|0;
     $131 = ((($130)) + 40|0);
     $132 = HEAP32[$131>>2]|0;
     __THREW__ = 0;
     (invoke_ii($132|0,($124|0))|0);
     $133 = __THREW__; __THREW__ = 0;
     $134 = $133&1;
     if ($134) {
      label = 5;
      break;
     }
    } else {
     $135 = ((($126)) + 1|0);
     HEAP32[$125>>2] = $135;
    }
    $136 = (($__n_does_match$3$lcssa) + ($__n_might_match$3$lcssa))|0;
    $137 = ($136>>>0)<(2);
    $or$cond = $137 | $21;
    if ($or$cond) {
     $__indx$0 = $90;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    } else {
     $__ky2$098 = $__kb;$__n_does_match$596 = $__n_does_match$3$lcssa;$__st$297 = $__status$0;
    }
    while(1) {
     $138 = HEAP8[$__st$297>>0]|0;
     $139 = ($138<<24>>24)==(2);
     if ($139) {
      $140 = HEAP8[$__ky2$098>>0]|0;
      $141 = $140 & 1;
      $142 = ($141<<24>>24)==(0);
      if ($142) {
       $145 = $140&255;
       $146 = $145 >>> 1;
       $147 = $146;
      } else {
       $143 = ((($__ky2$098)) + 4|0);
       $144 = HEAP32[$143>>2]|0;
       $147 = $144;
      }
      $148 = ($147|0)==($90|0);
      if ($148) {
       $__n_does_match$6 = $__n_does_match$596;
      } else {
       HEAP8[$__st$297>>0] = 0;
       $149 = (($__n_does_match$596) + -1)|0;
       $__n_does_match$6 = $149;
      }
     } else {
      $__n_does_match$6 = $__n_does_match$596;
     }
     $150 = ((($__ky2$098)) + 12|0);
     $151 = ((($__st$297)) + 1|0);
     $152 = ($150|0)==($__ke|0);
     if ($152) {
      $__indx$0 = $90;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
      continue L20;
     } else {
      $__ky2$098 = $150;$__n_does_match$596 = $__n_does_match$6;$__st$297 = $151;
     }
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $15 = $190;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch()|0;
    $12 = tempRet0;
    $15 = $190;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 64) {
    $153 = ($$lcssa117|0)==(0|0);
    do {
     if ($153) {
      $166 = 0;
     } else {
      $154 = ((($$lcssa117)) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ((($$lcssa117)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      if ($158) {
       $159 = HEAP32[$$lcssa117>>2]|0;
       $160 = ((($159)) + 36|0);
       $161 = HEAP32[$160>>2]|0;
       __THREW__ = 0;
       $162 = (invoke_ii($161|0,($$lcssa117|0))|0);
       $163 = __THREW__; __THREW__ = 0;
       $164 = $163&1;
       if ($164) {
        $$ph$ph = $190;
        label = 6;
        break L6;
       }
       $165 = ($162|0)==(-1);
       if ($165) {
        HEAP32[$__b>>2] = 0;
        $166 = 0;
        break;
       } else {
        $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
        $166 = $$pre$i$i$i12;
        break;
       }
      } else {
       $166 = $$lcssa117;
      }
     }
    } while(0);
    $167 = ($166|0)==(0|0);
    do {
     if ($$lcssa) {
      label = 76;
     } else {
      $168 = ((($$pre$i2$i$i16$lcssa)) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ((($$pre$i2$i$i16$lcssa)) + 16|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ($169|0)==($171|0);
      if ($172) {
       $173 = HEAP32[$$pre$i2$i$i16$lcssa>>2]|0;
       $174 = ((($173)) + 36|0);
       $175 = HEAP32[$174>>2]|0;
       __THREW__ = 0;
       $176 = (invoke_ii($175|0,($$pre$i2$i$i16$lcssa|0))|0);
       $177 = __THREW__; __THREW__ = 0;
       $178 = $177&1;
       if ($178) {
        $$ph$ph = $190;
        label = 6;
        break L6;
       }
       $179 = ($176|0)==(-1);
       if ($179) {
        HEAP32[$__e>>2] = 0;
        label = 76;
        break;
       }
      }
      if (!($167)) {
       label = 77;
      }
     }
    } while(0);
    if ((label|0) == 76) {
     if ($167) {
      label = 77;
     }
    }
    if ((label|0) == 77) {
     $180 = HEAP32[$__err>>2]|0;
     $181 = $180 | 2;
     HEAP32[$__err>>2] = $181;
    }
    $182 = ($__kb|0)==($__ke|0);
    L105: do {
     if ($182) {
      label = 81;
     } else {
      $$085 = $__kb;$__st$384 = $__status$0;
      while(1) {
       $183 = HEAP8[$__st$384>>0]|0;
       $184 = ($183<<24>>24)==(2);
       if ($184) {
        $$040 = $$085;
        break L105;
       }
       $185 = ((($$085)) + 12|0);
       $186 = ((($__st$384)) + 1|0);
       $187 = ($185|0)==($__ke|0);
       if ($187) {
        label = 81;
        break;
       } else {
        $$085 = $185;$__st$384 = $186;
       }
      }
     }
    } while(0);
    if ((label|0) == 81) {
     $188 = HEAP32[$__err>>2]|0;
     $189 = $188 | 4;
     HEAP32[$__err>>2] = $189;
     $$040 = $__ke;
    }
    $191 = ($190|0)==(0);
    if (!($191)) {
     $192 = $190;
     _free($192);
    }
    STACKTOP = sp;return ($$040|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $15 = $$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = $15;
  _free($17);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(557,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($139)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($139) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(558,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 25;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($130) {
     $143 = 0;
    } else {
     $131 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $137 = ((($136)) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$pre$i$i$i$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 25;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $$pre$i$i$i$lcssa;
      }
     } else {
      $143 = $$pre$i$i$i$lcssa;
     }
    }
    $144 = ($143|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 49;
     } else {
      $146 = ((($$pre$i2$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i2$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i2$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 25;
        break L4;
       }
       $157 = ($154|0)==(-1);
       if ($157) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($144)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($144) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $158 = HEAP32[$__err>>2]|0;
     $159 = $158 | 2;
     HEAP32[$__err>>2] = $159;
    }
    $160 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($160|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(559,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP16[$__v>>1] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($139)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($139) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(560,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($139)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($139) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(561,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 25;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($125) {
     $138 = 0;
    } else {
     $126 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$pre$i$i$i$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 25;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $138 = 0;
      } else {
       $138 = $$pre$i$i$i$lcssa;
      }
     } else {
      $138 = $$pre$i$i$i$lcssa;
     }
    }
    $139 = ($138|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 49;
     } else {
      $141 = ((($$pre$i2$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i2$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i2$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 25;
        break L4;
       }
       $152 = ($149|0)==(-1);
       if ($152) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($139)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($139) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 | 2;
     HEAP32[$__err>>2] = $154;
    }
    $155 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($155|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 25;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i4)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i4)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i4>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$18>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19 = (($65) + -1)|0;
      $66 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$14>>2]|0;
     $73 = $71 ? $16 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   if (!($112)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = ((($113)) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(562,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 25;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($130) {
     $143 = 0;
    } else {
     $131 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $137 = ((($136)) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$pre$i$i$i$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 25;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $$pre$i$i$i$lcssa;
      }
     } else {
      $143 = $$pre$i$i$i$lcssa;
     }
    }
    $144 = ($143|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 49;
     } else {
      $146 = ((($$pre$i2$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i2$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i2$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 25;
        break L4;
       }
       $157 = ($154|0)==(-1);
       if ($157) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($144)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($144) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $158 = HEAP32[$__err>>2]|0;
     $159 = $158 | 2;
     HEAP32[$__err>>2] = $159;
    }
    $160 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($160|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(563,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 25;
   } else {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($141)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($141) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(564,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 25;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($141)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($141) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 25;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 24;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 16;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break L6;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 24;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 24;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 24;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 24;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 24) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(565,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 25;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 25;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 49;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 25;
        break L4;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 49;
        break;
       }
      }
      if (!($141)) {
       label = 50;
      }
     }
    } while(0);
    if ((label|0) == 49) {
     if ($141) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(485,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$044 = 0, $$081 = 0, $$lcssa = 0, $$ph$ph = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $$pre$i3$i$i19$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off086 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0100 = 0, $__ky1$087 = 0, $__ky2$094 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$098 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0;
 var $__n_does_match$3$lcssa = 0, $__n_does_match$383 = 0, $__n_does_match$4 = 0, $__n_does_match$592 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$097 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$382 = 0, $__n_might_match$4 = 0, $__st$099 = 0, $__st$184 = 0, $__st$293 = 0, $__st$380 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0;
 var $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(475);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $18 = $5;
   $190 = $18;$__status$0 = $5;
   label = 11;
  } else {
   $190 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $19 = ($__kb|0)==($__ke|0);
   if ($19) {
    $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
   } else {
    $__ky$0100 = $__kb;$__n_does_match$098 = 0;$__n_might_match$097 = $3;$__st$099 = $__status$0;
    while(1) {
     $22 = HEAP8[$__ky$0100>>0]|0;
     $23 = $22 & 1;
     $24 = ($23<<24>>24)==(0);
     if ($24) {
      $27 = $22&255;
      $28 = $27 >>> 1;
      $29 = $28;
     } else {
      $25 = ((($__ky$0100)) + 4|0);
      $26 = HEAP32[$25>>2]|0;
      $29 = $26;
     }
     $30 = ($29|0)==(0);
     if ($30) {
      HEAP8[$__st$099>>0] = 2;
      $31 = (($__n_might_match$097) + -1)|0;
      $32 = (($__n_does_match$098) + 1)|0;
      $__n_does_match$1 = $32;$__n_might_match$1 = $31;
     } else {
      HEAP8[$__st$099>>0] = 1;
      $__n_does_match$1 = $__n_does_match$098;$__n_might_match$1 = $__n_might_match$097;
     }
     $33 = ((($__ky$0100)) + 12|0);
     $34 = ((($__st$099)) + 1|0);
     $35 = ($33|0)==($__ke|0);
     if ($35) {
      $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
      break;
     } else {
      $__ky$0100 = $33;$__n_does_match$098 = $__n_does_match$1;$__n_might_match$097 = $__n_might_match$1;$__st$099 = $34;
     }
    }
   }
   $20 = ($__kb|0)==($__ke|0);
   $21 = ($__kb|0)==($__ke|0);
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $36 = HEAP32[$__b>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      $66 = 1;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 5;
        break L20;
       } else {
        $$0$i$i$i$i = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i$i$i = $49;
      }
      $50 = ($$0$i$i$i$i|0)==(-1);
      if ($50) {
       HEAP32[$__b>>2] = 0;
       $66 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $66 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $51 = HEAP32[$__e>>2]|0;
    $52 = ($51|0)==(0|0);
    if ($52) {
     $$pre$i3$i$i19 = 0;$67 = 1;
    } else {
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($51)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 5;
       break;
      } else {
       $$0$i$i1$i$i = $61;
      }
     } else {
      $64 = HEAP32[$54>>2]|0;
      $$0$i$i1$i$i = $64;
     }
     $65 = ($$0$i$i1$i$i|0)==(-1);
     if ($65) {
      HEAP32[$__e>>2] = 0;
      $$pre$i3$i$i19 = 0;$67 = 1;
     } else {
      $$pre$i3$i$i19 = $51;$67 = 0;
     }
    }
    $tmp$i$i = $66 ^ $67;
    $68 = ($__n_might_match$2|0)!=(0);
    $69 = $68 & $tmp$i$i;
    $70 = HEAP32[$__b>>2]|0;
    if (!($69)) {
     $$lcssa = $70;$$pre$i3$i$i19$lcssa = $$pre$i3$i$i19;
     label = 66;
     break;
    }
    $71 = ((($70)) + 12|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($70)) + 16|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($72|0)==($74|0);
    if ($75) {
     $76 = HEAP32[$70>>2]|0;
     $77 = ((($76)) + 36|0);
     $78 = HEAP32[$77>>2]|0;
     __THREW__ = 0;
     $79 = (invoke_ii($78|0,($70|0))|0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if ($81) {
      label = 5;
      break;
     } else {
      $$0$i$i = $79;
     }
    } else {
     $82 = HEAP32[$72>>2]|0;
     $$0$i$i = $82;
    }
    if ($__case_sensitive) {
     $__c$0 = $$0$i$i;
    } else {
     $83 = HEAP32[$__ct>>2]|0;
     $84 = ((($83)) + 28|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     $86 = (invoke_iii($85|0,($__ct|0),($$0$i$i|0))|0);
     $87 = __THREW__; __THREW__ = 0;
     $88 = $87&1;
     if ($88) {
      label = 5;
      break;
     } else {
      $__c$0 = $86;
     }
    }
    $89 = (($__indx$0) + 1)|0;
    if ($20) {
     $__consume$0$off0$lcssa = 0;$__n_does_match$3$lcssa = $__n_does_match$2;$__n_might_match$3$lcssa = $__n_might_match$2;
    } else {
     $__consume$0$off086 = 0;$__ky1$087 = $__kb;$__n_does_match$383 = $__n_does_match$2;$__n_might_match$382 = $__n_might_match$2;$__st$184 = $__status$0;
     while(1) {
      $90 = HEAP8[$__st$184>>0]|0;
      $91 = ($90<<24>>24)==(1);
      do {
       if ($91) {
        $92 = HEAP8[$__ky1$087>>0]|0;
        $93 = $92 & 1;
        $94 = ($93<<24>>24)==(0);
        if ($94) {
         $97 = ((($__ky1$087)) + 4|0);
         $99 = $97;
        } else {
         $95 = ((($__ky1$087)) + 8|0);
         $96 = HEAP32[$95>>2]|0;
         $99 = $96;
        }
        $98 = (($99) + ($__indx$0<<2)|0);
        $100 = HEAP32[$98>>2]|0;
        if ($__case_sensitive) {
         $__kc$0 = $100;
        } else {
         $101 = HEAP32[$__ct>>2]|0;
         $102 = ((($101)) + 28|0);
         $103 = HEAP32[$102>>2]|0;
         __THREW__ = 0;
         $104 = (invoke_iii($103|0,($__ct|0),($100|0))|0);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 4;
          break L20;
         } else {
          $__kc$0 = $104;
         }
        }
        $107 = ($__c$0|0)==($__kc$0|0);
        if (!($107)) {
         HEAP8[$__st$184>>0] = 0;
         $119 = (($__n_might_match$382) + -1)|0;
         $__consume$1$off0 = $__consume$0$off086;$__n_does_match$4 = $__n_does_match$383;$__n_might_match$4 = $119;
         break;
        }
        $108 = HEAP8[$__ky1$087>>0]|0;
        $109 = $108 & 1;
        $110 = ($109<<24>>24)==(0);
        if ($110) {
         $113 = $108&255;
         $114 = $113 >>> 1;
         $115 = $114;
        } else {
         $111 = ((($__ky1$087)) + 4|0);
         $112 = HEAP32[$111>>2]|0;
         $115 = $112;
        }
        $116 = ($115|0)==($89|0);
        if ($116) {
         HEAP8[$__st$184>>0] = 2;
         $117 = (($__n_might_match$382) + -1)|0;
         $118 = (($__n_does_match$383) + 1)|0;
         $__consume$1$off0 = 1;$__n_does_match$4 = $118;$__n_might_match$4 = $117;
        } else {
         $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$383;$__n_might_match$4 = $__n_might_match$382;
        }
       } else {
        $__consume$1$off0 = $__consume$0$off086;$__n_does_match$4 = $__n_does_match$383;$__n_might_match$4 = $__n_might_match$382;
       }
      } while(0);
      $120 = ((($__ky1$087)) + 12|0);
      $121 = ((($__st$184)) + 1|0);
      $122 = ($120|0)==($__ke|0);
      if ($122) {
       $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
       break;
      } else {
       $__consume$0$off086 = $__consume$1$off0;$__ky1$087 = $120;$__n_does_match$383 = $__n_does_match$4;$__n_might_match$382 = $__n_might_match$4;$__st$184 = $121;
      }
     }
    }
    if (!($__consume$0$off0$lcssa)) {
     $__indx$0 = $89;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    }
    $123 = HEAP32[$__b>>2]|0;
    $124 = ((($123)) + 12|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ((($123)) + 16|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($125|0)==($127|0);
    if ($128) {
     $129 = HEAP32[$123>>2]|0;
     $130 = ((($129)) + 40|0);
     $131 = HEAP32[$130>>2]|0;
     __THREW__ = 0;
     (invoke_ii($131|0,($123|0))|0);
     $132 = __THREW__; __THREW__ = 0;
     $133 = $132&1;
     if ($133) {
      label = 5;
      break;
     }
    } else {
     $134 = ((($125)) + 4|0);
     HEAP32[$124>>2] = $134;
    }
    $135 = (($__n_does_match$3$lcssa) + ($__n_might_match$3$lcssa))|0;
    $136 = ($135>>>0)<(2);
    $or$cond = $136 | $21;
    if ($or$cond) {
     $__indx$0 = $89;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
     continue;
    } else {
     $__ky2$094 = $__kb;$__n_does_match$592 = $__n_does_match$3$lcssa;$__st$293 = $__status$0;
    }
    while(1) {
     $137 = HEAP8[$__st$293>>0]|0;
     $138 = ($137<<24>>24)==(2);
     if ($138) {
      $139 = HEAP8[$__ky2$094>>0]|0;
      $140 = $139 & 1;
      $141 = ($140<<24>>24)==(0);
      if ($141) {
       $144 = $139&255;
       $145 = $144 >>> 1;
       $146 = $145;
      } else {
       $142 = ((($__ky2$094)) + 4|0);
       $143 = HEAP32[$142>>2]|0;
       $146 = $143;
      }
      $147 = ($146|0)==($89|0);
      if ($147) {
       $__n_does_match$6 = $__n_does_match$592;
      } else {
       HEAP8[$__st$293>>0] = 0;
       $148 = (($__n_does_match$592) + -1)|0;
       $__n_does_match$6 = $148;
      }
     } else {
      $__n_does_match$6 = $__n_does_match$592;
     }
     $149 = ((($__ky2$094)) + 12|0);
     $150 = ((($__st$293)) + 1|0);
     $151 = ($149|0)==($__ke|0);
     if ($151) {
      $__indx$0 = $89;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
      continue L20;
     } else {
      $__ky2$094 = $149;$__n_does_match$592 = $__n_does_match$6;$__st$293 = $150;
     }
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $15 = $190;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch()|0;
    $12 = tempRet0;
    $15 = $190;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 66) {
    $152 = ($$lcssa|0)==(0|0);
    do {
     if ($152) {
      $193 = 1;
     } else {
      $153 = ((($$lcssa)) + 12|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ((($$lcssa)) + 16|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ($154|0)==($156|0);
      if ($157) {
       $158 = HEAP32[$$lcssa>>2]|0;
       $159 = ((($158)) + 36|0);
       $160 = HEAP32[$159>>2]|0;
       __THREW__ = 0;
       $161 = (invoke_ii($160|0,($$lcssa|0))|0);
       $162 = __THREW__; __THREW__ = 0;
       $163 = $162&1;
       if ($163) {
        $$ph$ph = $190;
        label = 6;
        break L6;
       } else {
        $$0$i$i$i$i11 = $161;
       }
      } else {
       $164 = HEAP32[$154>>2]|0;
       $$0$i$i$i$i11 = $164;
      }
      $165 = ($$0$i$i$i$i11|0)==(-1);
      if ($165) {
       HEAP32[$__b>>2] = 0;
       $193 = 1;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
       $193 = $phitmp$i$i$i14;
       break;
      }
     }
    } while(0);
    $166 = ($$pre$i3$i$i19$lcssa|0)==(0|0);
    do {
     if ($166) {
      label = 79;
     } else {
      $167 = ((($$pre$i3$i$i19$lcssa)) + 12|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ((($$pre$i3$i$i19$lcssa)) + 16|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($168|0)==($170|0);
      if ($171) {
       $172 = HEAP32[$$pre$i3$i$i19$lcssa>>2]|0;
       $173 = ((($172)) + 36|0);
       $174 = HEAP32[$173>>2]|0;
       __THREW__ = 0;
       $175 = (invoke_ii($174|0,($$pre$i3$i$i19$lcssa|0))|0);
       $176 = __THREW__; __THREW__ = 0;
       $177 = $176&1;
       if ($177) {
        $$ph$ph = $190;
        label = 6;
        break L6;
       } else {
        $$0$i$i1$i$i17 = $175;
       }
      } else {
       $178 = HEAP32[$168>>2]|0;
       $$0$i$i1$i$i17 = $178;
      }
      $179 = ($$0$i$i1$i$i17|0)==(-1);
      if ($179) {
       HEAP32[$__e>>2] = 0;
       label = 79;
       break;
      } else {
       if ($193) {
        break;
       } else {
        label = 81;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 79) {
     if ($193) {
      label = 81;
     }
    }
    if ((label|0) == 81) {
     $180 = HEAP32[$__err>>2]|0;
     $181 = $180 | 2;
     HEAP32[$__err>>2] = $181;
    }
    $182 = ($__kb|0)==($__ke|0);
    L113: do {
     if ($182) {
      label = 85;
     } else {
      $$081 = $__kb;$__st$380 = $__status$0;
      while(1) {
       $183 = HEAP8[$__st$380>>0]|0;
       $184 = ($183<<24>>24)==(2);
       if ($184) {
        $$044 = $$081;
        break L113;
       }
       $185 = ((($$081)) + 12|0);
       $186 = ((($__st$380)) + 1|0);
       $187 = ($185|0)==($__ke|0);
       if ($187) {
        label = 85;
        break;
       } else {
        $$081 = $185;$__st$380 = $186;
       }
      }
     }
    } while(0);
    if ((label|0) == 85) {
     $188 = HEAP32[$__err>>2]|0;
     $189 = $188 | 4;
     HEAP32[$__err>>2] = $189;
     $$044 = $__ke;
    }
    $191 = ($190|0)==(0);
    if (!($191)) {
     $192 = $190;
     _free($192);
    }
    STACKTOP = sp;return ($$044|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $15 = $$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = $15;
  _free($17);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(557,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$160 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$160 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$160 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($160) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($160) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(558,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 26;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($129) {
     $162 = 1;
    } else {
     $130 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $136 = ((($135)) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$pre$i$i$i$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $162 = 1;
     } else {
      $162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 51;
     } else {
      $144 = ((($$pre$i3$i$i)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($$pre$i3$i$i)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = ((($149)) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($162) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    $159 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($159|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(559,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP16[$__v>>1] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(560,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$155 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$155 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$155 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($155) {
        $156 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($155) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(561,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 26;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($124) {
     $157 = 1;
    } else {
     $125 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$pre$i$i$i$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;
     } else {
      $157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 51;
     } else {
      $139 = ((($$pre$i3$i$i)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($$pre$i3$i$i)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = ((($144)) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($157) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    $154 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($154|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $1 = ((($__buf)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__buf)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($8|0),0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L4: do {
  if ($10) {
   label = 26;
  } else {
   $11 = HEAP8[$__buf>>0]|0;
   $12 = $11 & 1;
   $13 = ($12<<24>>24)==(0);
   $14 = ((($__buf)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($__buf)) + 1|0);
   $17 = $13 ? $16 : $15;
   HEAP32[$__a_end>>2] = $17;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $18 = ((($__buf)) + 4|0);
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $17;
   L6: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$160 = 1;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i3 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i3 = $32;
     }
     $33 = ($$0$i$i$i$i3|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$160 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$160 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i9 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i9 = $47;
      }
      $48 = ($$0$i$i1$i$i9|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($160) {
        $161 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($160) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$18>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$14>>2]|0;
     $74 = $72 ? $16 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$19,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   if (!($111)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = ((($112)) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(562,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 26;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($129) {
     $162 = 1;
    } else {
     $130 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $136 = ((($135)) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$pre$i$i$i$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $162 = 1;
     } else {
      $162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 51;
     } else {
      $144 = ((($$pre$i3$i$i)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($$pre$i3$i$i)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = ((($149)) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($162) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    $159 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($159|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(563,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 26;
   } else {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(564,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 26;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 HEAP32[$__buf>>2] = 0;
 $0 = ((($__buf)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($__buf)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(446,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if ($9) {
   label = 26;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L6: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 25;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 17;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 25;
        break L6;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 25;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(446,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 25;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 25;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 25;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 25) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(565,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 26;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 26;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 51;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 51;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 53;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 51) {
     if ($159) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(485,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(566,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(485,($0|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
  }
  ___resumeException($9|0);
  // unreachable;
 } else {
  $4 = ($0|0)==(0|0);
  if (!($4)) {
   __THREW__ = 0;
   (invoke_ii(485,($0|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch(0|0)|0;
    $8 = tempRet0;
    ___clang_call_terminate($7);
    // unreachable;
   }
  }
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$sroa$0$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$sroa$0$1 = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = $4 >> 2;
   $6 = ((($__iob)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>($5|0);
   $9 = (($7) - ($5))|0;
   $__ns$0 = $8 ? $9 : 0;
   $10 = $__op;
   $11 = (($10) - ($3))|0;
   $12 = $11 >> 2;
   $13 = ($11|0)>(0);
   if ($13) {
    $14 = HEAP32[$0>>2]|0;
    $15 = ((($14)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
    $18 = ($17|0)==($12|0);
    if (!($18)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$1 = 0;
     break;
    }
   }
   $19 = ($__ns$0|0)>(0);
   do {
    if ($19) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
     $20 = HEAP8[$__sp>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     $23 = ((($__sp)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($__sp)) + 4|0);
     $26 = $22 ? $25 : $24;
     $27 = HEAP32[$0>>2]|0;
     $28 = ((($27)) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     $30 = (invoke_iiii($29|0,($0|0),($26|0),($__ns$0|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      $34 = ___cxa_find_matching_catch()|0;
      $35 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      ___resumeException($34|0);
      // unreachable;
     }
     $33 = ($30|0)==($__ns$0|0);
     if ($33) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      $$sroa$0$1 = 0;
      break L1;
     }
    }
   } while(0);
   $36 = (($2) - ($10))|0;
   $37 = $36 >> 2;
   $38 = ($36|0)>(0);
   if ($38) {
    $39 = HEAP32[$0>>2]|0;
    $40 = ((($39)) + 48|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
    $43 = ($42|0)==($37|0);
    if (!($43)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$1 = 0;
     break;
    }
   }
   HEAP32[$6>>2] = 0;
   $$sroa$0$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$1|0);
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $157 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $157 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $isascii1$i = ($40<<24>>24)>(-1);
   if ($isascii1$i) {
    $sext = $$0$i$i << 24;
    $41 = $sext >> 24;
    $42 = ((($__ct)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($41<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 & 2048;
    $47 = ($46<<16>>16)==(0);
    if (!($47)) {
     $50 = HEAP32[$__ct>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
     $54 = $53 << 24 >> 24;
     $55 = HEAP32[$__b>>2]|0;
     $56 = ((($55)) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($55)) + 16|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($57|0)==($59|0);
     if ($60) {
      $61 = HEAP32[$55>>2]|0;
      $62 = ((($61)) + 40|0);
      $63 = HEAP32[$62>>2]|0;
      (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
      $$0$in = $__n;$$pre$i2$i$i7 = $157;$79 = $157;$__r$0$in = $54;
     } else {
      $64 = ((($57)) + 1|0);
      HEAP32[$56>>2] = $64;
      $$0$in = $__n;$$pre$i2$i$i7 = $157;$79 = $157;$__r$0$in = $54;
     }
     while(1) {
      $__r$0 = (($__r$0$in) + -48)|0;
      $$0 = (($$0$in) + -1)|0;
      $65 = HEAP32[$__b>>2]|0;
      $66 = ($65|0)==(0|0);
      do {
       if ($66) {
        $77 = 0;
       } else {
        $67 = ((($65)) + 12|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ((($65)) + 16|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($68|0)==($70|0);
        if ($71) {
         $72 = HEAP32[$65>>2]|0;
         $73 = ((($72)) + 36|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
         $76 = ($75|0)==(-1);
         if ($76) {
          HEAP32[$__b>>2] = 0;
          $77 = 0;
          break;
         } else {
          $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
          $77 = $$pre$i$i$i3;
          break;
         }
        } else {
         $77 = $65;
        }
       }
      } while(0);
      $78 = ($77|0)==(0|0);
      $80 = ($79|0)==(0|0);
      if ($80) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = 0;
      } else {
       $81 = ((($79)) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ((($79)) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)==($84|0);
       if ($85) {
        $86 = HEAP32[$79>>2]|0;
        $87 = ((($86)) + 36|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (FUNCTION_TABLE_ii[$88 & 1023]($79)|0);
        $90 = ($89|0)==(-1);
        if ($90) {
         HEAP32[$__e>>2] = 0;
         $$pre$i2$i$i20 = 0;$91 = 0;
        } else {
         $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $$pre$i2$i$i7;
        }
       } else {
        $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $79;
       }
      }
      $92 = ($91|0)==(0|0);
      $tmp$i$i9 = $78 ^ $92;
      $93 = ($$0$in|0)>(1);
      $94 = $93 & $tmp$i$i9;
      $95 = HEAP32[$__b>>2]|0;
      if (!($94)) {
       $$lcssa = $95;$$pre$i2$i$i20$lcssa = $$pre$i2$i$i20;$__r$0$lcssa = $__r$0;
       break;
      }
      $96 = ((($95)) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ((($95)) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($97|0)==($99|0);
      if ($100) {
       $101 = HEAP32[$95>>2]|0;
       $102 = ((($101)) + 36|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (FUNCTION_TABLE_ii[$103 & 1023]($95)|0);
       $$0$i$i10 = $104;
      } else {
       $105 = HEAP8[$97>>0]|0;
       $106 = $105&255;
       $$0$i$i10 = $106;
      }
      $107 = $$0$i$i10&255;
      $isascii1$i12 = ($107<<24>>24)>(-1);
      if (!($isascii1$i12)) {
       $$01 = $__r$0;
       break L16;
      }
      $sext24 = $$0$i$i10 << 24;
      $108 = $sext24 >> 24;
      $109 = HEAP32[$42>>2]|0;
      $110 = (($109) + ($108<<1)|0);
      $111 = HEAP16[$110>>1]|0;
      $112 = $111 & 2048;
      $113 = ($112<<16>>16)==(0);
      if ($113) {
       $$01 = $__r$0;
       break L16;
      }
      $114 = ($__r$0*10)|0;
      $115 = HEAP32[$__ct>>2]|0;
      $116 = ((($115)) + 36|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (FUNCTION_TABLE_iiii[$117 & 1023]($__ct,$107,0)|0);
      $119 = $118 << 24 >> 24;
      $120 = (($119) + ($114))|0;
      $121 = HEAP32[$__b>>2]|0;
      $122 = ((($121)) + 12|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($121)) + 16|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($123|0)==($125|0);
      if ($126) {
       $127 = HEAP32[$121>>2]|0;
       $128 = ((($127)) + 40|0);
       $129 = HEAP32[$128>>2]|0;
       (FUNCTION_TABLE_ii[$129 & 1023]($121)|0);
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $120;
       continue;
      } else {
       $130 = ((($123)) + 1|0);
       HEAP32[$122>>2] = $130;
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $120;
       continue;
      }
     }
     $131 = ($$lcssa|0)==(0|0);
     do {
      if ($131) {
       $142 = 0;
      } else {
       $132 = ((($$lcssa)) + 12|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ((($$lcssa)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($133|0)==($135|0);
       if ($136) {
        $137 = HEAP32[$$lcssa>>2]|0;
        $138 = ((($137)) + 36|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (FUNCTION_TABLE_ii[$139 & 1023]($$lcssa)|0);
        $141 = ($140|0)==(-1);
        if ($141) {
         HEAP32[$__b>>2] = 0;
         $142 = 0;
         break;
        } else {
         $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
         $142 = $$pre$i$i$i16;
         break;
        }
       } else {
        $142 = $$lcssa;
       }
      }
     } while(0);
     $143 = ($142|0)==(0|0);
     $144 = ($$pre$i2$i$i20$lcssa|0)==(0|0);
     do {
      if ($144) {
       label = 50;
      } else {
       $145 = ((($$pre$i2$i$i20$lcssa)) + 12|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ((($$pre$i2$i$i20$lcssa)) + 16|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($146|0)==($148|0);
       if ($149) {
        $150 = HEAP32[$$pre$i2$i$i20$lcssa>>2]|0;
        $151 = ((($150)) + 36|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = (FUNCTION_TABLE_ii[$152 & 1023]($$pre$i2$i$i20$lcssa)|0);
        $154 = ($153|0)==(-1);
        if ($154) {
         HEAP32[$__e>>2] = 0;
         label = 50;
         break;
        }
       }
       if ($143) {
        $$01 = $__r$0$lcssa;
        break L16;
       }
      }
     } while(0);
     if ((label|0) == 50) {
      if (!($143)) {
       $$01 = $__r$0$lcssa;
       break;
      }
     }
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $48 = HEAP32[$__err>>2]|0;
   $49 = $48 | 4;
   HEAP32[$__err>>2] = $49;
   $$01 = 0;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $148 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $148 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $148 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($148) {
     $149 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($148) {
   label = 16;
  } else {
   $149 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
   if (!($42)) {
    $43 = HEAP32[$__err>>2]|0;
    $44 = $43 | 4;
    HEAP32[$__err>>2] = $44;
    $$01 = 0;
    break;
   }
   $45 = HEAP32[$__ct>>2]|0;
   $46 = ((($45)) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
   $49 = $48 << 24 >> 24;
   $50 = HEAP32[$__b>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($50)) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = HEAP32[$50>>2]|0;
    $57 = ((($56)) + 40|0);
    $58 = HEAP32[$57>>2]|0;
    (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
    $$0$in = $__n;$$pre$i3$i$i10 = $149;$73 = $149;$__r$0$in = $49;
   } else {
    $59 = ((($52)) + 4|0);
    HEAP32[$51>>2] = $59;
    $$0$in = $__n;$$pre$i3$i$i10 = $149;$73 = $149;$__r$0$in = $49;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $60 = HEAP32[$__b>>2]|0;
    $61 = ($60|0)==(0|0);
    do {
     if ($61) {
      $86 = 1;
     } else {
      $62 = ((($60)) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($60)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = ((($67)) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
       $$0$i$i$i$i2 = $70;
      } else {
       $71 = HEAP32[$63>>2]|0;
       $$0$i$i$i$i2 = $71;
      }
      $72 = ($$0$i$i$i$i2|0)==(-1);
      if ($72) {
       HEAP32[$__b>>2] = 0;
       $86 = 1;
       break;
      } else {
       $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
       $86 = $phitmp$i$i$i5;
       break;
      }
     }
    } while(0);
    $74 = ($73|0)==(0|0);
    do {
     if ($74) {
      $$pre$i3$i$i25 = $$pre$i3$i$i10;$150 = 0;$87 = 1;
     } else {
      $75 = ((($73)) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($73)) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      if ($79) {
       $80 = HEAP32[$73>>2]|0;
       $81 = ((($80)) + 36|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (FUNCTION_TABLE_ii[$82 & 1023]($73)|0);
       $$0$i$i1$i$i8 = $83;
      } else {
       $84 = HEAP32[$76>>2]|0;
       $$0$i$i1$i$i8 = $84;
      }
      $85 = ($$0$i$i1$i$i8|0)==(-1);
      if ($85) {
       HEAP32[$__e>>2] = 0;
       $$pre$i3$i$i25 = 0;$150 = 0;$87 = 1;
       break;
      } else {
       $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
       $$pre$i3$i$i25 = $$pre$i3$i$i10;$150 = $$pre$i3$i$i10;$87 = $phitmp$i4$i$i11;
       break;
      }
     }
    } while(0);
    $tmp$i$i13 = $86 ^ $87;
    $88 = ($$0$in|0)>(1);
    $89 = $88 & $tmp$i$i13;
    $90 = HEAP32[$__b>>2]|0;
    if (!($89)) {
     $$lcssa = $90;$$pre$i3$i$i25$lcssa = $$pre$i3$i$i25;$__r$0$lcssa = $__r$0;
     break;
    }
    $91 = ((($90)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($90)) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$90>>2]|0;
     $97 = ((($96)) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_ii[$98 & 1023]($90)|0);
     $$0$i$i14 = $99;
    } else {
     $100 = HEAP32[$92>>2]|0;
     $$0$i$i14 = $100;
    }
    $101 = HEAP32[$__ct>>2]|0;
    $102 = ((($101)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (FUNCTION_TABLE_iiii[$103 & 1023]($__ct,2048,$$0$i$i14)|0);
    if (!($104)) {
     $$01 = $__r$0;
     break L22;
    }
    $105 = ($__r$0*10)|0;
    $106 = HEAP32[$__ct>>2]|0;
    $107 = ((($106)) + 52|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (FUNCTION_TABLE_iiii[$108 & 1023]($__ct,$$0$i$i14,0)|0);
    $110 = $109 << 24 >> 24;
    $111 = (($110) + ($105))|0;
    $112 = HEAP32[$__b>>2]|0;
    $113 = ((($112)) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($112)) + 16|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($114|0)==($116|0);
    if ($117) {
     $118 = HEAP32[$112>>2]|0;
     $119 = ((($118)) + 40|0);
     $120 = HEAP32[$119>>2]|0;
     (FUNCTION_TABLE_ii[$120 & 1023]($112)|0);
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $150;$__r$0$in = $111;
     continue;
    } else {
     $121 = ((($114)) + 4|0);
     HEAP32[$113>>2] = $121;
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $150;$__r$0$in = $111;
     continue;
    }
   }
   $122 = ($$lcssa|0)==(0|0);
   do {
    if ($122) {
     $151 = 1;
    } else {
     $123 = ((($$lcssa)) + 12|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($$lcssa)) + 16|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($124|0)==($126|0);
     if ($127) {
      $128 = HEAP32[$$lcssa>>2]|0;
      $129 = ((($128)) + 36|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (FUNCTION_TABLE_ii[$130 & 1023]($$lcssa)|0);
      $$0$i$i$i$i17 = $131;
     } else {
      $132 = HEAP32[$124>>2]|0;
      $$0$i$i$i$i17 = $132;
     }
     $133 = ($$0$i$i$i$i17|0)==(-1);
     if ($133) {
      HEAP32[$__b>>2] = 0;
      $151 = 1;
      break;
     } else {
      $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
      $151 = $phitmp$i$i$i20;
      break;
     }
    }
   } while(0);
   $134 = ($$pre$i3$i$i25$lcssa|0)==(0|0);
   do {
    if ($134) {
     label = 60;
    } else {
     $135 = ((($$pre$i3$i$i25$lcssa)) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ((($$pre$i3$i$i25$lcssa)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$$pre$i3$i$i25$lcssa>>2]|0;
      $141 = ((($140)) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (FUNCTION_TABLE_ii[$142 & 1023]($$pre$i3$i$i25$lcssa)|0);
      $$0$i$i1$i$i23 = $143;
     } else {
      $144 = HEAP32[$136>>2]|0;
      $$0$i$i1$i$i23 = $144;
     }
     $145 = ($$0$i$i1$i$i23|0)==(-1);
     if ($145) {
      HEAP32[$__e>>2] = 0;
      label = 60;
      break;
     } else {
      if ($151) {
       $$01 = $__r$0$lcssa;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($151)) {
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $146 = HEAP32[$__err>>2]|0;
   $147 = $146 | 2;
   HEAP32[$__err>>2] = $147;
   $$01 = $__r$0$lcssa;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(486|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $16 = $14;
   HEAP32[$__b>>2] = $16;
   $25 = $14;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $17 = $14;
   HEAP32[$__b>>2] = $17;
   $18 = ($$pr|0)==(0|0);
   if ($18) {
    $25 = $14;
   } else {
    $19 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($19|0,($$pr|0));
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     $22 = ___cxa_find_matching_catch(0|0)|0;
     $23 = tempRet0;
     ___clang_call_terminate($22);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (427);
 $24 = (($25) + ($12)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($$)|0);
 HEAP32[$__e>>2] = $27;
 return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(486|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $17 = $15;
   HEAP32[$__b>>2] = $17;
   $27 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $18 = $15;
   HEAP32[$__b>>2] = $18;
   $19 = ($$pr|0)==(0|0);
   if ($19) {
    $27 = $15;
   } else {
    $20 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($20|0,($$pr|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $23 = ___cxa_find_matching_catch(0|0)|0;
     $24 = tempRet0;
     ___clang_call_terminate($23);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $27 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (427);
 $25 = $$ >>> 2;
 $26 = (($27) + ($13<<2)|0);
 HEAP32[$__n>>2] = $26;
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + ($25<<2)|0);
 HEAP32[$__e>>2] = $29;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$04 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$41 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$41 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 do {
  if (!($13)) {
   $14 = (($15) - ($16))|0;
   $17 = ($14>>>0)<($12>>>0);
   if ($17) {
    $18 = (($16) + ($12))|0;
    $19 = (($18) - ($15))|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $21 = $$pre;
   } else {
    $21 = $41;
   }
   $20 = $21 & 1;
   $22 = ($20<<24>>24)==(0);
   if ($22) {
    $25 = ((($this)) + 1|0);
    $29 = $25;
   } else {
    $23 = ((($this)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = (($16) - ($0))|0;
   $scevgep = (($__last) + ($26)|0);
   $scevgep1 = $scevgep;
   $27 = ($__first|0)==($__last|0);
   if (!($27)) {
    $28 = (($29) + ($16)|0);
    $$03 = $__first;$__p$04 = $28;
    while(1) {
     $30 = HEAP8[$$03>>0]|0;
     HEAP8[$__p$04>>0] = $30;
     $31 = ((($__p$04)) + 1|0);
     $32 = ((($$03)) + 1|0);
     $33 = ($32|0)==($__last|0);
     if ($33) {
      break;
     } else {
      $$03 = $32;$__p$04 = $31;
     }
    }
   }
   $scevgep2 = (($29) + ($scevgep1)|0);
   HEAP8[$scevgep2>>0] = 0;
   $34 = (($16) + ($12))|0;
   $35 = HEAP8[$this>>0]|0;
   $36 = $35 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $39 = $34 << 1;
    $40 = $39&255;
    HEAP8[$this>>0] = $40;
    break;
   } else {
    $38 = ((($this)) + 4|0);
    HEAP32[$38>>2] = $34;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(486|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $17 = $15;
   HEAP32[$__b>>2] = $17;
   $27 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $18 = $15;
   HEAP32[$__b>>2] = $18;
   $19 = ($$pr|0)==(0|0);
   if ($19) {
    $27 = $15;
   } else {
    $20 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($20|0,($$pr|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $23 = ___cxa_find_matching_catch(0|0)|0;
     $24 = tempRet0;
     ___clang_call_terminate($23);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $27 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (427);
 $25 = $$ >>> 2;
 $26 = (($27) + ($13<<2)|0);
 HEAP32[$__n>>2] = $26;
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + ($25<<2)|0);
 HEAP32[$__e>>2] = $29;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$04 = 0, $phitmp$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$45 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$45 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 do {
  if (!($14)) {
   $15 = (($16) - ($17))|0;
   $18 = ($15>>>0)<($13>>>0);
   if ($18) {
    $19 = (($17) + ($13))|0;
    $20 = (($19) - ($16))|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $22 = $$pre;
   } else {
    $22 = $45;
   }
   $21 = $22 & 1;
   $23 = ($21<<24>>24)==(0);
   if ($23) {
    $26 = ((($this)) + 4|0);
    $33 = $26;
   } else {
    $24 = ((($this)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $33 = $25;
   }
   $27 = $__last;
   $28 = (($27) - ($0))|0;
   $29 = $28 >>> 2;
   $30 = (($17) + ($29))|0;
   $31 = ($__first|0)==($__last|0);
   if (!($31)) {
    $32 = (($33) + ($17<<2)|0);
    $$03 = $__first;$__p$04 = $32;
    while(1) {
     $34 = HEAP32[$$03>>2]|0;
     HEAP32[$__p$04>>2] = $34;
     $35 = ((($__p$04)) + 4|0);
     $36 = ((($$03)) + 4|0);
     $37 = ($36|0)==($__last|0);
     if ($37) {
      break;
     } else {
      $$03 = $36;$__p$04 = $35;
     }
    }
   }
   $scevgep = (($33) + ($30<<2)|0);
   HEAP32[$scevgep>>2] = 0;
   $38 = (($17) + ($13))|0;
   $39 = HEAP8[$this>>0]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $43 = $38 << 1;
    $44 = $43&255;
    HEAP8[$this>>0] = $44;
    break;
   } else {
    $42 = ((($this)) + 4|0);
    HEAP32[$42>>2] = $38;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 do {
  if (!($3)) {
   __THREW__ = 0;
   invoke_vii(567,($this|0),($__n|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $6 = ___cxa_find_matching_catch()|0;
    $7 = tempRet0;
    __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
    ___resumeException($6|0);
    // unreachable;
   } else {
    __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(48804)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(48844)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49876)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49868)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49936)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49944)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(50000)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(50008)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(50016)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(50024)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(48916)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(48988)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49048)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49108)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49420)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49484)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49548)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49612)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49648)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49684)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49720)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49756)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49200)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49292)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49324)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49356)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49796)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(49836)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if (!($1)) {
   $2 = ((($this)) + 4|0);
   $$pre$i$i = HEAP32[$2>>2]|0;
   $3 = ($$pre$i$i|0)==($0|0);
   if (!($3)) {
    $5 = $$pre$i$i;
    while(1) {
     $4 = ((($5)) + -4|0);
     $6 = ($4|0)==($0|0);
     if ($6) {
      $$lcssa = $4;
      break;
     } else {
      $5 = $4;
     }
    }
    HEAP32[$2>>2] = $$lcssa;
   }
   $7 = ((($this)) + 16|0);
   $8 = ($7|0)==($0|0);
   if ($8) {
    $9 = ((($this)) + 128|0);
    HEAP8[$9>>0] = 0;
    break;
   } else {
    __ZdlPv($0);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
 } else {
  $9 = ($6>>>0)>($__sz>>>0);
  if ($9) {
   $10 = (($2) + ($__sz<<2)|0);
   $11 = ($1|0)==($10|0);
   if (!($11)) {
    $13 = $1;
    while(1) {
     $12 = ((($13)) + -4|0);
     $14 = ($12|0)==($10|0);
     if ($14) {
      $$lcssa = $12;
      break;
     } else {
      $13 = $12;
     }
    }
    HEAP32[$0>>2] = $$lcssa;
   }
  }
 }
 return;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if ($8) {
  $9 = (($3) + ($id<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 return ($12|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__vp)) + 4|0);
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 1023]($3);
 return;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre1 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre1) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$0 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $10 = $frm_end;
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $11 = ($$pre>>>0)<($frm_end>>>0);
   if ($11) {
    $13 = $$pre;
    while(1) {
     $12 = HEAP16[$13>>1]|0;
     $14 = $12&65535;
     $15 = ($14>>>0)>($Maxcode>>>0);
     if ($15) {
      $$0 = 2;
      break L4;
     }
     $16 = ($12&65535)<(128);
     do {
      if ($16) {
       $17 = HEAP32[$to_nxt>>2]|0;
       $18 = $17;
       $19 = (($$pre1) - ($18))|0;
       $20 = ($19|0)<(1);
       if ($20) {
        $$0 = 1;
        break L4;
       }
       $21 = $12&255;
       $22 = ((($17)) + 1|0);
       HEAP32[$to_nxt>>2] = $22;
       HEAP8[$17>>0] = $21;
      } else {
       $23 = ($12&65535)<(2048);
       if ($23) {
        $24 = HEAP32[$to_nxt>>2]|0;
        $25 = $24;
        $26 = (($$pre1) - ($25))|0;
        $27 = ($26|0)<(2);
        if ($27) {
         $$0 = 1;
         break L4;
        }
        $28 = $14 >>> 6;
        $29 = $28 | 192;
        $30 = $29&255;
        $31 = ((($24)) + 1|0);
        HEAP32[$to_nxt>>2] = $31;
        HEAP8[$24>>0] = $30;
        $32 = $14 & 63;
        $33 = $32 | 128;
        $34 = $33&255;
        $35 = HEAP32[$to_nxt>>2]|0;
        $36 = ((($35)) + 1|0);
        HEAP32[$to_nxt>>2] = $36;
        HEAP8[$35>>0] = $34;
        break;
       }
       $37 = ($12&65535)<(55296);
       if ($37) {
        $38 = HEAP32[$to_nxt>>2]|0;
        $39 = $38;
        $40 = (($$pre1) - ($39))|0;
        $41 = ($40|0)<(3);
        if ($41) {
         $$0 = 1;
         break L4;
        }
        $42 = $14 >>> 12;
        $43 = $42 | 224;
        $44 = $43&255;
        $45 = ((($38)) + 1|0);
        HEAP32[$to_nxt>>2] = $45;
        HEAP8[$38>>0] = $44;
        $46 = $14 >>> 6;
        $47 = $46 & 63;
        $48 = $47 | 128;
        $49 = $48&255;
        $50 = HEAP32[$to_nxt>>2]|0;
        $51 = ((($50)) + 1|0);
        HEAP32[$to_nxt>>2] = $51;
        HEAP8[$50>>0] = $49;
        $52 = $14 & 63;
        $53 = $52 | 128;
        $54 = $53&255;
        $55 = HEAP32[$to_nxt>>2]|0;
        $56 = ((($55)) + 1|0);
        HEAP32[$to_nxt>>2] = $56;
        HEAP8[$55>>0] = $54;
        break;
       }
       $57 = ($12&65535)<(56320);
       if (!($57)) {
        $109 = ($12&65535)<(57344);
        if ($109) {
         $$0 = 2;
         break L4;
        }
        $110 = HEAP32[$to_nxt>>2]|0;
        $111 = $110;
        $112 = (($$pre1) - ($111))|0;
        $113 = ($112|0)<(3);
        if ($113) {
         $$0 = 1;
         break L4;
        }
        $114 = $14 >>> 12;
        $115 = $114 | 224;
        $116 = $115&255;
        $117 = ((($110)) + 1|0);
        HEAP32[$to_nxt>>2] = $117;
        HEAP8[$110>>0] = $116;
        $118 = $14 >>> 6;
        $119 = $118 & 63;
        $120 = $119 | 128;
        $121 = $120&255;
        $122 = HEAP32[$to_nxt>>2]|0;
        $123 = ((($122)) + 1|0);
        HEAP32[$to_nxt>>2] = $123;
        HEAP8[$122>>0] = $121;
        $124 = $14 & 63;
        $125 = $124 | 128;
        $126 = $125&255;
        $127 = HEAP32[$to_nxt>>2]|0;
        $128 = ((($127)) + 1|0);
        HEAP32[$to_nxt>>2] = $128;
        HEAP8[$127>>0] = $126;
        break;
       }
       $58 = $13;
       $59 = (($10) - ($58))|0;
       $60 = ($59|0)<(4);
       if ($60) {
        $$0 = 1;
        break L4;
       }
       $61 = ((($13)) + 2|0);
       $62 = HEAP16[$61>>1]|0;
       $63 = $62&65535;
       $64 = $63 & 64512;
       $65 = ($64|0)==(56320);
       if (!($65)) {
        $$0 = 2;
        break L4;
       }
       $66 = HEAP32[$to_nxt>>2]|0;
       $67 = $66;
       $68 = (($$pre1) - ($67))|0;
       $69 = ($68|0)<(4);
       if ($69) {
        $$0 = 1;
        break L4;
       }
       $70 = $14 & 960;
       $71 = $70 << 10;
       $72 = (($71) + 65536)|0;
       $73 = $14 << 10;
       $74 = $73 & 64512;
       $75 = $72 | $74;
       $76 = $63 & 1023;
       $77 = $75 | $76;
       $78 = ($77>>>0)>($Maxcode>>>0);
       if ($78) {
        $$0 = 2;
        break L4;
       }
       HEAP32[$frm_nxt>>2] = $61;
       $79 = $70 >>> 6;
       $80 = (($79) + 1)|0;
       $81 = $80 >>> 2;
       $82 = $81 | 240;
       $83 = $82&255;
       $84 = HEAP32[$to_nxt>>2]|0;
       $85 = ((($84)) + 1|0);
       HEAP32[$to_nxt>>2] = $85;
       HEAP8[$84>>0] = $83;
       $86 = $80 << 4;
       $87 = $86 & 48;
       $88 = $14 >>> 2;
       $89 = $88 & 15;
       $90 = $89 | $87;
       $91 = $90 | 128;
       $92 = $91&255;
       $93 = HEAP32[$to_nxt>>2]|0;
       $94 = ((($93)) + 1|0);
       HEAP32[$to_nxt>>2] = $94;
       HEAP8[$93>>0] = $92;
       $95 = $14 << 4;
       $96 = $95 & 48;
       $97 = $63 >>> 6;
       $98 = $97 & 15;
       $99 = $96 | $98;
       $100 = $99 | 128;
       $101 = $100&255;
       $102 = HEAP32[$to_nxt>>2]|0;
       $103 = ((($102)) + 1|0);
       HEAP32[$to_nxt>>2] = $103;
       HEAP8[$102>>0] = $101;
       $104 = $63 & 63;
       $105 = $104 | 128;
       $106 = $105&255;
       $107 = HEAP32[$to_nxt>>2]|0;
       $108 = ((($107)) + 1|0);
       HEAP32[$to_nxt>>2] = $108;
       HEAP8[$107>>0] = $106;
      }
     } while(0);
     $129 = HEAP32[$frm_nxt>>2]|0;
     $130 = ((($129)) + 2|0);
     HEAP32[$frm_nxt>>2] = $130;
     $131 = ($130>>>0)<($frm_end>>>0);
     if ($131) {
      $13 = $130;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre4 = $frm_end;
  $$pre = $to;$$pre$phiZ2D = $$pre4;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$pre = HEAP32[$to_nxt>>2]|0;
      $$pre = $$pre$pre;$$pre$phiZ2D = $3;
     } else {
      $$pre = $to;$$pre$phiZ2D = $3;
     }
    } else {
     $$pre = $to;$$pre$phiZ2D = $3;
    }
   } else {
    $$pre = $to;$$pre$phiZ2D = $3;
   }
  } else {
   $$pre = $to;$$pre$phiZ2D = $3;
  }
 }
 $16 = $to_end;
 $17 = HEAP32[$frm_nxt>>2]|0;
 $18 = ($17>>>0)<($frm_end>>>0);
 $19 = ($$pre>>>0)<($to_end>>>0);
 $20 = $18 & $19;
 L9: do {
  if ($20) {
   $22 = $17;$27 = $$pre;
   while(1) {
    $21 = HEAP8[$22>>0]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     break L9;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$27>>1] = $26;
      $28 = ((($22)) + 1|0);
      HEAP32[$frm_nxt>>2] = $28;
     } else {
      $29 = ($21&255)<(194);
      if ($29) {
       $$0 = 2;
       break L9;
      }
      $30 = ($21&255)<(224);
      if ($30) {
       $31 = $22;
       $32 = (($$pre$phiZ2D) - ($31))|0;
       $33 = ($32|0)<(2);
       if ($33) {
        $$0 = 1;
        break L9;
       }
       $34 = ((($22)) + 1|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = $35&255;
       $37 = $36 & 192;
       $38 = ($37|0)==(128);
       if (!($38)) {
        $$0 = 2;
        break L9;
       }
       $39 = $23 << 6;
       $40 = $39 & 1984;
       $41 = $36 & 63;
       $42 = $41 | $40;
       $43 = ($42>>>0)>($Maxcode>>>0);
       if ($43) {
        $$0 = 2;
        break L9;
       }
       $44 = $42&65535;
       HEAP16[$27>>1] = $44;
       $45 = ((($22)) + 2|0);
       HEAP32[$frm_nxt>>2] = $45;
       break;
      }
      $46 = ($21&255)<(240);
      if ($46) {
       $47 = $22;
       $48 = (($$pre$phiZ2D) - ($47))|0;
       $49 = ($48|0)<(3);
       if ($49) {
        $$0 = 1;
        break L9;
       }
       $50 = ((($22)) + 1|0);
       $51 = HEAP8[$50>>0]|0;
       $52 = ((($22)) + 2|0);
       $53 = HEAP8[$52>>0]|0;
       switch ($23|0) {
       case 224:  {
        $54 = $51 & -32;
        $55 = ($54<<24>>24)==(-96);
        if (!($55)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       case 237:  {
        $56 = $51 & -32;
        $57 = ($56<<24>>24)==(-128);
        if (!($57)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       default: {
        $58 = $51 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         $$0 = 2;
         break L9;
        }
       }
       }
       $60 = $53&255;
       $61 = $60 & 192;
       $62 = ($61|0)==(128);
       if (!($62)) {
        $$0 = 2;
        break L9;
       }
       $63 = $23 << 12;
       $64 = $51&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $60 & 63;
       $69 = $67 | $68;
       $70 = $69 & 65535;
       $71 = ($70>>>0)>($Maxcode>>>0);
       if ($71) {
        $$0 = 2;
        break L9;
       }
       $72 = $69&65535;
       HEAP16[$27>>1] = $72;
       $73 = ((($22)) + 3|0);
       HEAP32[$frm_nxt>>2] = $73;
       break;
      }
      $74 = ($21&255)<(245);
      if (!($74)) {
       $$0 = 2;
       break L9;
      }
      $75 = $22;
      $76 = (($$pre$phiZ2D) - ($75))|0;
      $77 = ($76|0)<(4);
      if ($77) {
       $$0 = 1;
       break L9;
      }
      $78 = ((($22)) + 1|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = ((($22)) + 2|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = ((($22)) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      switch ($23|0) {
      case 240:  {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      case 244:  {
       $85 = $79 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      default: {
       $87 = $79 & -64;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        $$0 = 2;
        break L9;
       }
      }
      }
      $89 = $81&255;
      $90 = $89 & 192;
      $91 = ($90|0)==(128);
      if (!($91)) {
       $$0 = 2;
       break L9;
      }
      $92 = $83&255;
      $93 = $92 & 192;
      $94 = ($93|0)==(128);
      if (!($94)) {
       $$0 = 2;
       break L9;
      }
      $95 = $27;
      $96 = (($16) - ($95))|0;
      $97 = ($96|0)<(4);
      if ($97) {
       $$0 = 1;
       break L9;
      }
      $98 = $23 & 7;
      $99 = $98 << 18;
      $100 = $79&255;
      $101 = $100 << 12;
      $102 = $101 & 258048;
      $103 = $102 | $99;
      $104 = $89 << 6;
      $105 = $104 & 4032;
      $106 = $103 | $105;
      $107 = $92 & 63;
      $108 = $106 | $107;
      $109 = ($108>>>0)>($Maxcode>>>0);
      if ($109) {
       $$0 = 2;
       break L9;
      }
      $110 = $98 << 2;
      $111 = $100 >>> 4;
      $112 = $111 & 3;
      $113 = $112 | $110;
      $114 = $113 << 6;
      $115 = (($114) + 16320)|0;
      $116 = $100 << 2;
      $117 = $116 & 60;
      $118 = $89 >>> 4;
      $119 = $118 & 3;
      $120 = $117 | $119;
      $121 = $120 | $115;
      $122 = $121 | 55296;
      $123 = $122&65535;
      HEAP16[$27>>1] = $123;
      $124 = $104 & 960;
      $125 = $107 | $124;
      $126 = $125 | 56320;
      $127 = $126&65535;
      $128 = ((($27)) + 2|0);
      HEAP32[$to_nxt>>2] = $128;
      HEAP16[$128>>1] = $127;
      $129 = HEAP32[$frm_nxt>>2]|0;
      $130 = ((($129)) + 4|0);
      HEAP32[$frm_nxt>>2] = $130;
     }
    } while(0);
    $131 = HEAP32[$to_nxt>>2]|0;
    $132 = ((($131)) + 2|0);
    HEAP32[$to_nxt>>2] = $132;
    $133 = HEAP32[$frm_nxt>>2]|0;
    $134 = ($133>>>0)<($frm_end>>>0);
    $135 = ($132>>>0)<($to_end>>>0);
    $136 = $134 & $135;
    if ($136) {
     $22 = $133;$27 = $132;
    } else {
     $$lcssa = $134;
     label = 39;
     break;
    }
   }
  } else {
   $$lcssa = $18;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $137 = $$lcssa&1;
  $$0 = $137;
 }
 return ($$0|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$150 = 0, $frm_nxt$2 = 0, $nchar16_t$049 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = $frm_end;
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm;
  $3 = (($$pre) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $14 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $15 = ($mx|0)!=(0);
 $or$cond48 = $15 & $14;
 L7: do {
  if ($or$cond48) {
   $frm_nxt$150 = $frm_nxt$1$ph;$nchar16_t$049 = 0;
   L8: while(1) {
    $16 = HEAP8[$frm_nxt$150>>0]|0;
    $17 = $16&255;
    $18 = ($17>>>0)>($Maxcode>>>0);
    if ($18) {
     $frm_nxt$1$lcssa = $frm_nxt$150;
     label = 42;
     break L7;
    }
    $19 = ($16<<24>>24)>(-1);
    do {
     if ($19) {
      $20 = ((($frm_nxt$150)) + 1|0);
      $frm_nxt$2 = $20;$nchar16_t$1 = $nchar16_t$049;
     } else {
      $21 = ($16&255)<(194);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $22 = ($16&255)<(224);
      if ($22) {
       $23 = $frm_nxt$150;
       $24 = (($$pre) - ($23))|0;
       $25 = ($24|0)<(2);
       if ($25) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $26 = ((($frm_nxt$150)) + 1|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = $27&255;
       $29 = $28 & 192;
       $30 = ($29|0)==(128);
       if (!($30)) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $31 = $17 << 6;
       $32 = $31 & 1984;
       $33 = $28 & 63;
       $34 = $33 | $32;
       $35 = ($34>>>0)>($Maxcode>>>0);
       if ($35) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $36 = ((($frm_nxt$150)) + 2|0);
       $frm_nxt$2 = $36;$nchar16_t$1 = $nchar16_t$049;
       break;
      }
      $37 = ($16&255)<(240);
      if ($37) {
       $38 = $frm_nxt$150;
       $39 = (($$pre) - ($38))|0;
       $40 = ($39|0)<(3);
       if ($40) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $41 = ((($frm_nxt$150)) + 1|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = ((($frm_nxt$150)) + 2|0);
       $44 = HEAP8[$43>>0]|0;
       switch ($17|0) {
       case 224:  {
        $45 = $42 & -32;
        $46 = ($45<<24>>24)==(-96);
        if (!($46)) {
         $$lcssa85 = $38;
         label = 20;
         break L8;
        }
        break;
       }
       case 237:  {
        $49 = $42 & -32;
        $50 = ($49<<24>>24)==(-128);
        if (!($50)) {
         $$lcssa84 = $38;
         label = 22;
         break L8;
        }
        break;
       }
       default: {
        $53 = $42 & -64;
        $54 = ($53<<24>>24)==(-128);
        if (!($54)) {
         $$lcssa86 = $38;
         label = 24;
         break L8;
        }
       }
       }
       $57 = $44&255;
       $58 = $57 & 192;
       $59 = ($58|0)==(128);
       if (!($59)) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $60 = $17 << 12;
       $61 = $60 & 61440;
       $62 = $42&255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = ($67>>>0)>($Maxcode>>>0);
       if ($68) {
        $frm_nxt$1$lcssa = $frm_nxt$150;
        label = 42;
        break L7;
       }
       $69 = ((($frm_nxt$150)) + 3|0);
       $frm_nxt$2 = $69;$nchar16_t$1 = $nchar16_t$049;
       break;
      }
      $70 = ($16&255)<(245);
      if (!($70)) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $71 = $frm_nxt$150;
      $72 = (($$pre) - ($71))|0;
      $73 = ($72|0)<(4);
      $74 = (($mx) - ($nchar16_t$049))|0;
      $75 = ($74>>>0)<(2);
      $or$cond2 = $75 | $73;
      if ($or$cond2) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $76 = ((($frm_nxt$150)) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = ((($frm_nxt$150)) + 2|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = ((($frm_nxt$150)) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      switch ($17|0) {
      case 240:  {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        $$lcssa82 = $71;
        label = 32;
        break L8;
       }
       break;
      }
      case 244:  {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        $$lcssa = $71;
        label = 34;
        break L8;
       }
       break;
      }
      default: {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        $$lcssa83 = $71;
        label = 36;
        break L8;
       }
      }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $99 = $17 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$150;
       label = 42;
       break L7;
      }
      $111 = (($nchar16_t$049) + 1)|0;
      $112 = ((($frm_nxt$150)) + 4|0);
      $frm_nxt$2 = $112;$nchar16_t$1 = $111;
     }
    } while(0);
    $113 = (($nchar16_t$1) + 1)|0;
    $114 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $115 = ($113>>>0)<($mx>>>0);
    $or$cond = $115 & $114;
    if ($or$cond) {
     $frm_nxt$150 = $frm_nxt$2;$nchar16_t$049 = $113;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     label = 42;
     break L7;
    }
   }
   if ((label|0) == 20) {
    $47 = $frm;
    $48 = (($$lcssa85) - ($47))|0;
    $$0 = $48;
    break;
   }
   else if ((label|0) == 22) {
    $51 = $frm;
    $52 = (($$lcssa84) - ($51))|0;
    $$0 = $52;
    break;
   }
   else if ((label|0) == 24) {
    $55 = $frm;
    $56 = (($$lcssa86) - ($55))|0;
    $$0 = $56;
    break;
   }
   else if ((label|0) == 32) {
    $83 = $frm;
    $84 = (($$lcssa82) - ($83))|0;
    $$0 = $84;
    break;
   }
   else if ((label|0) == 34) {
    $87 = $frm;
    $88 = (($$lcssa) - ($87))|0;
    $$0 = $88;
    break;
   }
   else if ((label|0) == 36) {
    $91 = $frm;
    $92 = (($$lcssa83) - ($91))|0;
    $$0 = $92;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 42;
  }
 } while(0);
 if ((label|0) == 42) {
  $116 = $frm_nxt$1$lcssa;
  $117 = $frm;
  $118 = (($116) - ($117))|0;
  $$0 = $118;
 }
 return ($$0|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre1 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre1) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$0 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $10 = ($$pre>>>0)<($frm_end>>>0);
   if ($10) {
    $12 = $$pre;
    while(1) {
     $11 = HEAP32[$12>>2]|0;
     $13 = $11 & -2048;
     $14 = ($13|0)==(55296);
     $15 = ($11>>>0)>($Maxcode>>>0);
     $or$cond = $15 | $14;
     if ($or$cond) {
      $$0 = 2;
      break L4;
     }
     $16 = ($11>>>0)<(128);
     do {
      if ($16) {
       $17 = HEAP32[$to_nxt>>2]|0;
       $18 = $17;
       $19 = (($$pre1) - ($18))|0;
       $20 = ($19|0)<(1);
       if ($20) {
        $$0 = 1;
        break L4;
       }
       $21 = $11&255;
       $22 = ((($17)) + 1|0);
       HEAP32[$to_nxt>>2] = $22;
       HEAP8[$17>>0] = $21;
      } else {
       $23 = ($11>>>0)<(2048);
       if ($23) {
        $24 = HEAP32[$to_nxt>>2]|0;
        $25 = $24;
        $26 = (($$pre1) - ($25))|0;
        $27 = ($26|0)<(2);
        if ($27) {
         $$0 = 1;
         break L4;
        }
        $28 = $11 >>> 6;
        $29 = $28 | 192;
        $30 = $29&255;
        $31 = ((($24)) + 1|0);
        HEAP32[$to_nxt>>2] = $31;
        HEAP8[$24>>0] = $30;
        $32 = $11 & 63;
        $33 = $32 | 128;
        $34 = $33&255;
        $35 = HEAP32[$to_nxt>>2]|0;
        $36 = ((($35)) + 1|0);
        HEAP32[$to_nxt>>2] = $36;
        HEAP8[$35>>0] = $34;
        break;
       }
       $37 = ($11>>>0)<(65536);
       $38 = HEAP32[$to_nxt>>2]|0;
       $39 = $38;
       $40 = (($$pre1) - ($39))|0;
       if ($37) {
        $41 = ($40|0)<(3);
        if ($41) {
         $$0 = 1;
         break L4;
        }
        $42 = $11 >>> 12;
        $43 = $42 | 224;
        $44 = $43&255;
        $45 = ((($38)) + 1|0);
        HEAP32[$to_nxt>>2] = $45;
        HEAP8[$38>>0] = $44;
        $46 = $11 >>> 6;
        $47 = $46 & 63;
        $48 = $47 | 128;
        $49 = $48&255;
        $50 = HEAP32[$to_nxt>>2]|0;
        $51 = ((($50)) + 1|0);
        HEAP32[$to_nxt>>2] = $51;
        HEAP8[$50>>0] = $49;
        $52 = $11 & 63;
        $53 = $52 | 128;
        $54 = $53&255;
        $55 = HEAP32[$to_nxt>>2]|0;
        $56 = ((($55)) + 1|0);
        HEAP32[$to_nxt>>2] = $56;
        HEAP8[$55>>0] = $54;
        break;
       } else {
        $57 = ($40|0)<(4);
        if ($57) {
         $$0 = 1;
         break L4;
        }
        $58 = $11 >>> 18;
        $59 = $58 | 240;
        $60 = $59&255;
        $61 = ((($38)) + 1|0);
        HEAP32[$to_nxt>>2] = $61;
        HEAP8[$38>>0] = $60;
        $62 = $11 >>> 12;
        $63 = $62 & 63;
        $64 = $63 | 128;
        $65 = $64&255;
        $66 = HEAP32[$to_nxt>>2]|0;
        $67 = ((($66)) + 1|0);
        HEAP32[$to_nxt>>2] = $67;
        HEAP8[$66>>0] = $65;
        $68 = $11 >>> 6;
        $69 = $68 & 63;
        $70 = $69 | 128;
        $71 = $70&255;
        $72 = HEAP32[$to_nxt>>2]|0;
        $73 = ((($72)) + 1|0);
        HEAP32[$to_nxt>>2] = $73;
        HEAP8[$72>>0] = $71;
        $74 = $11 & 63;
        $75 = $74 | 128;
        $76 = $75&255;
        $77 = HEAP32[$to_nxt>>2]|0;
        $78 = ((($77)) + 1|0);
        HEAP32[$to_nxt>>2] = $78;
        HEAP8[$77>>0] = $76;
        break;
       }
      }
     } while(0);
     $79 = HEAP32[$frm_nxt>>2]|0;
     $80 = ((($79)) + 4|0);
     HEAP32[$frm_nxt>>2] = $80;
     $81 = ($80>>>0)<($frm_end>>>0);
     if ($81) {
      $12 = $80;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre4 = $frm_end;
  $$pre = $to;$$pre$phiZ2D = $$pre4;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$pre = HEAP32[$to_nxt>>2]|0;
      $$pre = $$pre$pre;$$pre$phiZ2D = $3;
     } else {
      $$pre = $to;$$pre$phiZ2D = $3;
     }
    } else {
     $$pre = $to;$$pre$phiZ2D = $3;
    }
   } else {
    $$pre = $to;$$pre$phiZ2D = $3;
   }
  } else {
   $$pre = $to;$$pre$phiZ2D = $3;
  }
 }
 $16 = HEAP32[$frm_nxt>>2]|0;
 $17 = ($16>>>0)<($frm_end>>>0);
 $18 = ($$pre>>>0)<($to_end>>>0);
 $19 = $17 & $18;
 L9: do {
  if ($19) {
   $21 = $16;$25 = $$pre;
   while(1) {
    $20 = HEAP8[$21>>0]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L9;
      }
      HEAP32[$25>>2] = $22;
      $26 = ((($21)) + 1|0);
      HEAP32[$frm_nxt>>2] = $26;
     } else {
      $27 = ($20&255)<(194);
      if ($27) {
       $$0 = 2;
       break L9;
      }
      $28 = ($20&255)<(224);
      if ($28) {
       $29 = $21;
       $30 = (($$pre$phiZ2D) - ($29))|0;
       $31 = ($30|0)<(2);
       if ($31) {
        $$0 = 1;
        break L9;
       }
       $32 = ((($21)) + 1|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = $33&255;
       $35 = $34 & 192;
       $36 = ($35|0)==(128);
       if (!($36)) {
        $$0 = 2;
        break L9;
       }
       $37 = $22 << 6;
       $38 = $37 & 1984;
       $39 = $34 & 63;
       $40 = $39 | $38;
       $41 = ($40>>>0)>($Maxcode>>>0);
       if ($41) {
        $$0 = 2;
        break L9;
       }
       HEAP32[$25>>2] = $40;
       $42 = ((($21)) + 2|0);
       HEAP32[$frm_nxt>>2] = $42;
       break;
      }
      $43 = ($20&255)<(240);
      if ($43) {
       $44 = $21;
       $45 = (($$pre$phiZ2D) - ($44))|0;
       $46 = ($45|0)<(3);
       if ($46) {
        $$0 = 1;
        break L9;
       }
       $47 = ((($21)) + 1|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = ((($21)) + 2|0);
       $50 = HEAP8[$49>>0]|0;
       switch ($22|0) {
       case 224:  {
        $51 = $48 & -32;
        $52 = ($51<<24>>24)==(-96);
        if (!($52)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       case 237:  {
        $53 = $48 & -32;
        $54 = ($53<<24>>24)==(-128);
        if (!($54)) {
         $$0 = 2;
         break L9;
        }
        break;
       }
       default: {
        $55 = $48 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         break L9;
        }
       }
       }
       $57 = $50&255;
       $58 = $57 & 192;
       $59 = ($58|0)==(128);
       if (!($59)) {
        $$0 = 2;
        break L9;
       }
       $60 = $22 << 12;
       $61 = $60 & 61440;
       $62 = $48&255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = ($67>>>0)>($Maxcode>>>0);
       if ($68) {
        $$0 = 2;
        break L9;
       }
       HEAP32[$25>>2] = $67;
       $69 = ((($21)) + 3|0);
       HEAP32[$frm_nxt>>2] = $69;
       break;
      }
      $70 = ($20&255)<(245);
      if (!($70)) {
       $$0 = 2;
       break L9;
      }
      $71 = $21;
      $72 = (($$pre$phiZ2D) - ($71))|0;
      $73 = ($72|0)<(4);
      if ($73) {
       $$0 = 1;
       break L9;
      }
      $74 = ((($21)) + 1|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = ((($21)) + 2|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = ((($21)) + 3|0);
      $79 = HEAP8[$78>>0]|0;
      switch ($22|0) {
      case 240:  {
       $$off = (($75) + 112)<<24>>24;
       $80 = ($$off&255)<(48);
       if (!($80)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      case 244:  {
       $81 = $75 & -16;
       $82 = ($81<<24>>24)==(-128);
       if (!($82)) {
        $$0 = 2;
        break L9;
       }
       break;
      }
      default: {
       $83 = $75 & -64;
       $84 = ($83<<24>>24)==(-128);
       if (!($84)) {
        $$0 = 2;
        break L9;
       }
      }
      }
      $85 = $77&255;
      $86 = $85 & 192;
      $87 = ($86|0)==(128);
      if (!($87)) {
       $$0 = 2;
       break L9;
      }
      $88 = $79&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       break L9;
      }
      $91 = $22 << 18;
      $92 = $91 & 1835008;
      $93 = $75&255;
      $94 = $93 << 12;
      $95 = $94 & 258048;
      $96 = $95 | $92;
      $97 = $85 << 6;
      $98 = $97 & 4032;
      $99 = $96 | $98;
      $100 = $88 & 63;
      $101 = $99 | $100;
      $102 = ($101>>>0)>($Maxcode>>>0);
      if ($102) {
       $$0 = 2;
       break L9;
      }
      HEAP32[$25>>2] = $101;
      $103 = ((($21)) + 4|0);
      HEAP32[$frm_nxt>>2] = $103;
     }
    } while(0);
    $104 = HEAP32[$to_nxt>>2]|0;
    $105 = ((($104)) + 4|0);
    HEAP32[$to_nxt>>2] = $105;
    $106 = HEAP32[$frm_nxt>>2]|0;
    $107 = ($106>>>0)<($frm_end>>>0);
    $108 = ($105>>>0)<($to_end>>>0);
    $109 = $107 & $108;
    if ($109) {
     $21 = $106;$25 = $105;
    } else {
     $$lcssa = $107;
     label = 38;
     break;
    }
   }
  } else {
   $$lcssa = $17;
   label = 38;
  }
 } while(0);
 if ((label|0) == 38) {
  $110 = $$lcssa&1;
  $$0 = $110;
 }
 return ($$0|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa80 = 0, $$lcssa81 = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$148 = 0, $frm_nxt$2 = 0, $nchar32_t$047 = 0, $or$cond = 0, $or$cond46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = $frm_end;
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm;
  $3 = (($$pre) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $14 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $15 = ($mx|0)!=(0);
 $or$cond46 = $15 & $14;
 L7: do {
  if ($or$cond46) {
   $frm_nxt$148 = $frm_nxt$1$ph;$nchar32_t$047 = 0;
   L8: while(1) {
    $16 = HEAP8[$frm_nxt$148>>0]|0;
    $17 = $16&255;
    $18 = ($16<<24>>24)>(-1);
    do {
     if ($18) {
      $19 = ($17>>>0)>($Maxcode>>>0);
      if ($19) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $20 = ((($frm_nxt$148)) + 1|0);
      $frm_nxt$2 = $20;
     } else {
      $21 = ($16&255)<(194);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $22 = ($16&255)<(224);
      if ($22) {
       $23 = $frm_nxt$148;
       $24 = (($$pre) - ($23))|0;
       $25 = ($24|0)<(2);
       if ($25) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $26 = ((($frm_nxt$148)) + 1|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = $27&255;
       $29 = $28 & 192;
       $30 = ($29|0)==(128);
       if (!($30)) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $31 = $17 << 6;
       $32 = $31 & 1984;
       $33 = $28 & 63;
       $34 = $33 | $32;
       $35 = ($34>>>0)>($Maxcode>>>0);
       if ($35) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $36 = ((($frm_nxt$148)) + 2|0);
       $frm_nxt$2 = $36;
       break;
      }
      $37 = ($16&255)<(240);
      if ($37) {
       $38 = $frm_nxt$148;
       $39 = (($$pre) - ($38))|0;
       $40 = ($39|0)<(3);
       if ($40) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $41 = ((($frm_nxt$148)) + 1|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = ((($frm_nxt$148)) + 2|0);
       $44 = HEAP8[$43>>0]|0;
       switch ($17|0) {
       case 224:  {
        $45 = $42 & -32;
        $46 = ($45<<24>>24)==(-96);
        if (!($46)) {
         $$lcssa83 = $38;
         label = 20;
         break L8;
        }
        break;
       }
       case 237:  {
        $49 = $42 & -32;
        $50 = ($49<<24>>24)==(-128);
        if (!($50)) {
         $$lcssa82 = $38;
         label = 22;
         break L8;
        }
        break;
       }
       default: {
        $53 = $42 & -64;
        $54 = ($53<<24>>24)==(-128);
        if (!($54)) {
         $$lcssa84 = $38;
         label = 24;
         break L8;
        }
       }
       }
       $57 = $44&255;
       $58 = $57 & 192;
       $59 = ($58|0)==(128);
       if (!($59)) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $60 = $17 << 12;
       $61 = $60 & 61440;
       $62 = $42&255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = ($67>>>0)>($Maxcode>>>0);
       if ($68) {
        $frm_nxt$1$lcssa = $frm_nxt$148;
        label = 42;
        break L7;
       }
       $69 = ((($frm_nxt$148)) + 3|0);
       $frm_nxt$2 = $69;
       break;
      }
      $70 = ($16&255)<(245);
      if (!($70)) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $71 = $frm_nxt$148;
      $72 = (($$pre) - ($71))|0;
      $73 = ($72|0)<(4);
      if ($73) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $74 = ((($frm_nxt$148)) + 1|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = ((($frm_nxt$148)) + 2|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = ((($frm_nxt$148)) + 3|0);
      $79 = HEAP8[$78>>0]|0;
      switch ($17|0) {
      case 240:  {
       $$off = (($75) + 112)<<24>>24;
       $80 = ($$off&255)<(48);
       if (!($80)) {
        $$lcssa80 = $71;
        label = 32;
        break L8;
       }
       break;
      }
      case 244:  {
       $83 = $75 & -16;
       $84 = ($83<<24>>24)==(-128);
       if (!($84)) {
        $$lcssa = $71;
        label = 34;
        break L8;
       }
       break;
      }
      default: {
       $87 = $75 & -64;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        $$lcssa81 = $71;
        label = 36;
        break L8;
       }
      }
      }
      $91 = $77&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $94 = $79&255;
      $95 = $94 & 192;
      $96 = ($95|0)==(128);
      if (!($96)) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $97 = $17 << 18;
      $98 = $97 & 1835008;
      $99 = $75&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $91 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $94 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $frm_nxt$1$lcssa = $frm_nxt$148;
       label = 42;
       break L7;
      }
      $109 = ((($frm_nxt$148)) + 4|0);
      $frm_nxt$2 = $109;
     }
    } while(0);
    $110 = (($nchar32_t$047) + 1)|0;
    $111 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $112 = ($110>>>0)<($mx>>>0);
    $or$cond = $112 & $111;
    if ($or$cond) {
     $frm_nxt$148 = $frm_nxt$2;$nchar32_t$047 = $110;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     label = 42;
     break L7;
    }
   }
   if ((label|0) == 20) {
    $47 = $frm;
    $48 = (($$lcssa83) - ($47))|0;
    $$0 = $48;
    break;
   }
   else if ((label|0) == 22) {
    $51 = $frm;
    $52 = (($$lcssa82) - ($51))|0;
    $$0 = $52;
    break;
   }
   else if ((label|0) == 24) {
    $55 = $frm;
    $56 = (($$lcssa84) - ($55))|0;
    $$0 = $56;
    break;
   }
   else if ((label|0) == 32) {
    $81 = $frm;
    $82 = (($$lcssa80) - ($81))|0;
    $$0 = $82;
    break;
   }
   else if ((label|0) == 34) {
    $85 = $frm;
    $86 = (($$lcssa) - ($85))|0;
    $$0 = $86;
    break;
   }
   else if ((label|0) == 36) {
    $89 = $frm;
    $90 = (($$lcssa81) - ($89))|0;
    $$0 = $90;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 42;
  }
 } while(0);
 if ((label|0) == 42) {
  $113 = $frm_nxt$1$lcssa;
  $114 = $frm;
  $115 = (($113) - ($114))|0;
  $$0 = $115;
 }
 return ($$0|0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i1 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if ($8) {
  $9 = ((($this)) + 16|0);
  $10 = HEAP32[$this>>2]|0;
  $11 = $10;
  $12 = (($5) - ($11))|0;
  $13 = $12 >> 2;
  $14 = (($13) + ($__n))|0;
  $15 = ($14>>>0)>(1073741823);
  if ($15) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $16 = (($4) - ($11))|0;
  $17 = $16 >> 2;
  $18 = ($17>>>0)<(536870911);
  if ($18) {
   $19 = $16 >> 1;
   $20 = ($19>>>0)<($14>>>0);
   $21 = $20 ? $14 : $19;
   $$0$i1 = $21;
  } else {
   $$0$i1 = 1073741823;
  }
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i1,$13,$9);
  $22 = ((($__v)) + 8|0);
  $$pre$i = HEAP32[$22>>2]|0;
  $23 = $__n << 2;
  _memset(($$pre$i|0),0,($23|0))|0;
  $scevgep = (($$pre$i) + ($__n<<2)|0);
  HEAP32[$22>>2] = $scevgep;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pre;
 while(1) {
  HEAP32[$1>>2] = 0;
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 4|0);
  HEAP32[$0>>2] = $3;
  $4 = (($$0) + -1)|0;
  $5 = ($4|0)==(0);
  if ($5) {
   break;
  } else {
   $$0 = $4;$1 = $3;
  }
 }
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = ((($__a)) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $5 & $$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = ((($this)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($this)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 $13 = ((($this)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = ((($__v)) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = ((($this)) + 8|0);
 $17 = ((($__v)) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $$pre$i$i$i = HEAP32[$2>>2]|0;
 $3 = ($$pre$i$i$i|0)==($1|0);
 if (!($3)) {
  $5 = $$pre$i$i$i;
  while(1) {
   $4 = ((($5)) + -4|0);
   $6 = ($4|0)==($1|0);
   if ($6) {
    $$lcssa = $4;
    break;
   } else {
    $5 = $4;
   }
  }
  HEAP32[$2>>2] = $$lcssa;
 }
 $7 = HEAP32[$this>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($this)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($7|0);
   if ($11) {
    $12 = ((($10)) + 112|0);
    HEAP8[$12>>0] = 0;
    break;
   } else {
    __ZdlPv($7);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ((($this)) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $3 & $$not$i$i;
 if ($or$cond$i$i) {
  $4 = ((($this)) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = ((($this)) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = ((($this)) + 8|0);
 HEAP32[$9>>2] = $8;
 return;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
   }
   $10 = $4;
   $$0 = $10;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   if ($12) {
    HEAP32[$__err>>2] = 4;
    $13 = -1;$14 = -1;
   } else {
    $13 = $7;$14 = $6;
   }
  }
 } while(0);
 tempRet0 = ($13);
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(65535);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $18 = $6&65535;
    $$0 = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $18 = 0;$19 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $18 = 0;$19 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   if ($10) {
    HEAP32[$__err>>2] = 4;
    $11 = ($5|0)>(0);
    $12 = ($4>>>0)>(0);
    $13 = ($5|0)==(0);
    $14 = $13 & $12;
    $15 = $11 | $14;
    $16 = $15 ? -1 : 0;
    $17 = $15 ? 2147483647 : -2147483648;
    tempRet0 = ($17);
    STACKTOP = sp;return ($16|0);
   } else {
    $18 = $5;$19 = $4;
   }
  }
 } while(0);
 tempRet0 = ($18);
 STACKTOP = sp;return ($19|0);
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 L1: do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   do {
    if ($10) {
     HEAP32[$__err>>2] = 4;
     $21 = ($5|0)>(0);
     $22 = ($4>>>0)>(0);
     $23 = ($5|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     if ($25) {
      $$0 = 2147483647;
      break L1;
     }
    } else {
     $11 = ($5|0)<(-1);
     $12 = ($4>>>0)<(2147483648);
     $13 = ($5|0)==(-1);
     $14 = $13 & $12;
     $15 = $11 | $14;
     if ($15) {
      HEAP32[$__err>>2] = 4;
      break;
     }
     $16 = ($5|0)>(0);
     $17 = ($4>>>0)>(2147483647);
     $18 = ($5|0)==(0);
     $19 = $18 & $17;
     $20 = $16 | $19;
     if ($20) {
      HEAP32[$__err>>2] = 4;
      $$0 = 2147483647;
      break L1;
     } else {
      $$0 = $4;
      break L1;
     }
    }
   } while(0);
   $$0 = -2147483648;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 1023]($this);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (42628);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(568,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($msg)|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((53392|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((53420|0),(53392|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   HEAP32[$flag>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(569,(53392|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __THREW__ = 0;
    invoke_vi($func|0,($arg|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_ii(570,(53392|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      HEAP32[$flag>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(569,(53392|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       (invoke_ii(571,(53420|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        break;
       }
      }
     }
    }
   }
   $16 = ___cxa_find_matching_catch(0|0)|0;
   $17 = tempRet0;
   (___cxa_begin_catch(($16|0))|0);
   __THREW__ = 0;
   (invoke_ii(570,(53392|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    HEAP32[$flag>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(569,(53392|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     __THREW__ = 0;
     (invoke_ii(571,(53420|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      __THREW__ = 0;
      invoke_v(442);
      $24 = __THREW__; __THREW__ = 0;
     }
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   __THREW__ = 0;
   invoke_v(443);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    ___resumeException($25|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((53392|0))|0);
  }
 } while(0);
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&511](a1|0,+a2);
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_id(index,a1) {
  index = index|0;
  a1=+a1;
  return FUNCTION_TABLE_id[index&511](+a1)|0;
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&255](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(2);
}
function b3(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(3);return 0;
}
function b4(p0) {
 p0 = p0|0; nullFunc_vi(4);
}
function __emval_decref__wrapper(p0) {
 p0 = p0|0; __emval_decref(p0|0);
}
function __emval_run_destructors__wrapper(p0) {
 p0 = p0|0; __emval_run_destructors(p0|0);
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(5);
}
function _emscripten_log__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_log(p0|0,p1|0);
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(6);return 0;
}
function b7(p0) {
 p0 = p0|0; nullFunc_ii(7);return 0;
}
function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0;
}
function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_lock(p0|0)|0;
}
function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0;
}
function b8(p0) {
 p0 = +p0; nullFunc_id(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(9);return 0;
}
function b10(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(10);return 0;
}
function b11(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(11);
}
function b12(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(12);
}
function b13(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(13);
}
function b14(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(14);
}
function b15(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0;
}
function __emval_get_property__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return __emval_get_property(p0|0,p1|0)|0;
}
function b16(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(16);return 0;
}
function b17(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(17);return +0;
}
function b18() {
 ; nullFunc_i(18);return 0;
}
function b19(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(19);return 0;
}
function __emval_new__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return __emval_new(p0|0,p1|0,p2|0,p3|0)|0;
}
function b20(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(20);
}
function __emval_set_property__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; __emval_set_property(p0|0,p1|0,p2|0);
}
function b21() {
 ; nullFunc_v(21);
}
function ___cxa_rethrow__wrapper() {
 ; ___cxa_rethrow();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b22(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(22);return 0;
}
function b23(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(23);return 0;
}
function b24(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(24);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b0,b0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b0,b0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_FillRow1,_h264bsdFillRow7,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal19fromGenericWireTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_d,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiiiiid = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b3,b3,b3,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,b4,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b4,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b4,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b4,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b4,__ZN10__cxxabiv117__class_type_infoD0Ev,b4,b4,b4,b4,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b4,b4,b4,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b4,b4,b4
,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIwED0Ev,b4,b4,b4,b4,b4,b4,b4
,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIcED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b4,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev
,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b4,b4,b4,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,b4,b4,b4,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4
,b4,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b4,b4,b4,b4,b4,b4
,b4,b4,b4,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,b4,b4,b4,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,b4,b4,b4,__ZNSt3__16locale5__impD2Ev
,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b4,b4,b4,b4,b4,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b4
,b4,b4,b4,b4,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b4,b4
,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,b4,b4,b4,__ZN10emscripten8internal14raw_destructorI9NetStreamEEvPT_,b4,b4,b4,b4,b4,b4,b4,b4,__ZN9NetStream17decodeVideoBufferEv,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,__ZN10emscripten8internal14raw_destructorI10MonaClientEEvPT_,b4,b4,b4,b4,b4,b4,b4,__ZN10MonaClient5CloseEv,b4,b4,b4,b4,__ZN12VideoDecoderC2Ev,b4,b4,b4,b4,b4,b4,b4,b4,__emval_decref__wrapper,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,__ZN10MonaClientC2Ev,b4,_free,_H264SwDecRelease,_mad_frame_finish,b4,b4,__emval_run_destructors__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZN12MemoryStreamC2Ev,_mad_stream_init,_mad_frame_init,_mad_synth_init,b4,b4,b4,b4,b4,b4,b4,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4,_cleanup521,_cleanup526,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,_freelocale,b4,b4,__ZNSt3__112__do_nothingEPv,b4,__ZNSt3__121__throw_runtime_errorEPKc,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b5,b5,b5,b5,b5,b5
,b5,b5,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b5,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv
,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b5,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b5,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv
,b5,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__18messagesIcE8do_closeEi,b5,b5,b5,b5,__ZNKSt3__18messagesIwE8do_closeEi,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b5,b5,b5
,b5,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN9NetStream4playENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5,b5,__ZN10emscripten8internal13MethodInvokerIM9NetStreamFvvEvPS2_JEE6invokeERKS4_S5_,b5
,__ZN9NetStream13setBufferTimeEN10emscripten3valE,b5,b5,b5,__ZNK10emscripten3val2asINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_v,b5,b5,b5,b5,__ZN12MemoryStreamC2EONSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5,b5,b5,_emscripten_log__wrapper,b5,__ZN10emscripten3valC2IRS0_EEOT_,__ZNK10emscripten3val4callIvJEEET_PKcDpOT0_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZN10emscripten3valC2ERKS0_,b5,b5,b5,b5,__ZN10MonaClient11OnWsMessageEN10emscripten3valE,b5,__ZN10MonaClient8OnWsOpenEN10emscripten3valE,b5,b5,b5,__ZN10emscripten8internal13MethodInvokerIM10MonaClientFvvEvPS2_JEE6invokeERKS4_S5_,b5,b5,__ZN9NetStreamC2EP10MonaClient,b5,b5,__ZN12AudioDecoderC2Ei,b5,b5,__ZNK10MonaClient4SendERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5,b5,b5,b5,b5,__ZN10emscripten3valC2EPNS_8internal7_EM_VALE,b5,b5,b5
,b5,b5,b5,b5,__ZN10emscripten3valC2EPKc,b5,b5,__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEE9push_backEOS2_,b5,b5,__ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEE10push_frontERKS2_,b5,b5,b5,b5
,b5,b5,b5,b5,b5,__ZN9NetStream9onConnectEON10emscripten3valE,b5,b5,b5,_abort_message,b5,b5,b5,b5,b5,__ZNSt3__18ios_base4initEPv,b5,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b5,b5,__ZNSt13runtime_errorC2EPKc,b5,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b5,b5,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b5,b5,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b5,b5,b5,b5,b5,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,b5
,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b5
,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,__ZNSt3__118__libcpp_refstringC2EPKc
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx
,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b6,b6,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b6,b6,b6,b6,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b6,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b6,b6
,b6,b6,b6,b6,b6,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b6,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b6,b6,b6,b6,b6,b6,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b6,b6,b6,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal13MethodInvokerIM10MonaClientFNS_3valES3_NSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_ES3_PS2_JS3_SA_SA_SA_EE6invokeERKSC_SD_PNS0_7_EM_VALEPNS0_11BindingTypeISA_EUt_ESM_SM_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b6
,b6,b6,b6,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_ii = [b7,b7,b7,b7,__ZNKSt9bad_alloc4whatEv,b7,b7,__ZNKSt13runtime_error4whatEv,b7,b7,__ZNKSt8bad_cast4whatEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,___stdio_close,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b7,b7,b7,b7,b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b7,b7,b7
,b7,b7,b7,b7,b7,b7,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b7,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b7,b7,b7,b7,b7,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b7,b7,b7,b7,b7,b7,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b7,b7,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv
,b7,b7,b7,b7,b7,b7,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b7,b7
,b7,b7,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b7,b7,b7,b7
,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b7,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b7,b7,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b7,b7,b7,b7,b7,__ZNKSt3__18numpunctIwE16do_decimal_pointEv
,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b7,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b7,b7,b7
,b7,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b7,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b7,b7,b7,b7,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b7,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b7,b7,b7,b7,__ZN10emscripten8internal13getActualTypeI9NetStreamEEPKvPT_,b7,__ZN10emscripten8internal12operator_newI9NetStreamJP10MonaClientEEEPT_DpOT0_,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK9NetStream13getBufferTimeEv
,b7,b7,b7,__ZNK10emscripten3val6typeofEv,b7,b7,b7,b7,b7,b7,__ZN12MemoryStream5readBILi4EjEET0_v,b7,b7,b7,b7,b7,b7,__Znwj,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,__ZN10emscripten8internal13getActualTypeI10MonaClientEEPKvPT_,b7,b7,__ZN10emscripten8internal7InvokerIP10MonaClientJEE6invokeEPFS3_vE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb,b7,__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi,__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi,b7,b7,b7,__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_,b7,b7,b7,b7,b7,b7
,b7,__ZNSt3__111char_traitsIcE6lengthEPKc,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN12MemoryStream5pointEv,_malloc
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__18ios_base6getlocEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,_uselocale,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_wcslen,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_id = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10emscripten8internal19fromGenericWireTypeINS_3valEEET_d,b8,b8,b8,b8,b8,b8,__ZN10emscripten8internal19fromGenericWireTypeIiEET_d,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_iiiiiiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_iiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b10,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,b10,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b10,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b10,b10,b10,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b10
,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b10,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b10,b10,b10,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b10,b10,b10,b10,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b10,b10,b10,b10,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b10,b10,b10
,b10,b10,b10,b10,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b10,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b10,b10,__ZNKSt3__15ctypeIcE9do_narrowEcc,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__15ctypeIwE5do_isEtw,b10,b10,b10,b10,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b10,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b10,b10,__ZNKSt3__15ctypeIwE9do_narrowEwc,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN9NetStream11decodeAudioElR12MemoryStream,__ZN9NetStream11decodeVideoElR12MemoryStream,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b10,b10,b10,__ZNK10emscripten3val4callIS0_JRS0_EEET_PKcDpOT0_,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN10emscripten8internal13MethodInvokerIM10MonaClientFNS_3valES3_ES3_PS2_JS3_EE6invokeERKS5_S6_PNS0_7_EM_VALE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,__ZNK10emscripten3val4callIiJlEEET_PKcDpOT0_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_do_read,b10,b10,b10,b10,b10,b10,b10,b10,b10,_newlocale,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b10,b10,b10,b10,b10,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,_wcrtomb,b10,b10,_mbtowc,_mbrlen,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_vasprintf,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b11,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_viiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b12,b12,b12,b12,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_viiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b13,b13,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b13,b13
,b13,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_viiiiiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b14,b14,b14,b14,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b14,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_iii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b15,__ZNSt3__111__stdoutbufIwE8overflowEj,b15,b15,b15,b15,b15,__ZNSt3__110__stdinbufIwE9pbackfailEj,b15,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b15,__ZNSt3__111__stdoutbufIcE8overflowEi,b15,b15,b15,b15,b15,__ZNSt3__110__stdinbufIcE9pbackfailEi,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,__ZNKSt3__15ctypeIcE10do_toupperEc,b15,__ZNKSt3__15ctypeIcE10do_tolowerEc,b15,__ZNKSt3__15ctypeIcE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__15ctypeIwE10do_toupperEw,b15,__ZNKSt3__15ctypeIwE10do_tolowerEw,b15,__ZNKSt3__15ctypeIwE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN10emscripten8internal7InvokerIP9NetStreamJOP10MonaClientEE6invokeEPFS3_S6_ES5_,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,__ZN10emscripten8internal12GetterPolicyIM9NetStreamKFNS_3valEvEE3getIS2_EEPNS0_7_EM_VALERKS5_RKT_,b15,b15,b15,__ZNK10emscripten3valixIA5_cEES0_RKT_,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE2atEj,__ZNSt3__13mapIiP9NetStreamNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixEOi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b15,__ZNK10emscripten3val4new_IJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEES0_DpOT_,b15,__ZNK10emscripten3valixIA10_cEES0_RKT_,b15,b15,__ZNK10emscripten3valixIA13_cEES0_RKT_,b15,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_
,b15,b15,b15,b15,b15,b15,b15,b15,__ZN10MonaClient12GetWebSocketEN10emscripten3valE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__emval_get_property__wrapper,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN12MemoryStreamlsERKS_,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__16locale9use_facetERNS0_2idE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_isxdigit_l
,_isdigit_l,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_iiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b16,b16,b16,b16,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b16,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b16,b16,b16
,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b16,b16,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b16,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b16,b16,b16,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b16,b16,b16,b16,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b16,b16,b16,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16
,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN10emscripten8internal13MethodInvokerIM9NetStreamFiNS_3valEiiEiPS2_JS3_iiEE6invokeERKS5_S6_PNS0_7_EM_VALEii,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN10MonaClient7ConnectEN10emscripten3valENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,_wcsnrtombs,b16,_mbsnrtowcs,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_diii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_i = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,__ZN10emscripten8internal12operator_newI10MonaClientJEEEPT_DpOT0_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN10emscripten8internal9SignatureINS_3valEJRS2_EE18init_method_callerEv,b18,__ZN10emscripten8internal9SignatureIvJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE18init_method_callerEv,__ZN10emscripten8internal9SignatureIvJEE18init_method_callerEv,__ZN10emscripten8internal9SignatureIvJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE18init_method_callerEv,__ZN10emscripten8internal9SignatureIvJRjS2_iEE18init_method_callerEv,b18,__ZN10emscripten8internal9SignatureIiJlEE18init_method_callerEv,__ZN10emscripten8internal9SignatureIvJRNS_3valEEE18init_method_callerEv,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,__ZN10emscripten3val4nullEv,b18,b18,b18,b18,b18,___cxa_get_globals_fast,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__16__clocEv,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__16locale5__imp12make_classicEv
,b18,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b18,b18,___ctype_b_loc,___ctype_toupper_loc,___ctype_tolower_loc,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_iiiii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN9NetStream9initAudioEN10emscripten3valEii,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,__emval_new__wrapper,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b19,b19,b19,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b19,b19,b19,b19
,b19,b19,b19,b19,b19,_mbsrtowcs,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_catgets,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_mbrtowc,b19,b19,b19,b19,b19,b19,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_viii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN9NetStream12attachCanvasEN10emscripten3valEb,b20,b20,b20,b20,__ZN10emscripten8internal13MethodInvokerIM9NetStreamFvNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEvPS2_JS9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_EUt_E,b20,b20,b20
,b20,b20,__ZN10emscripten8internal12SetterPolicyIM9NetStreamFvNS_3valEEE3setIS2_EEvRKS5_RT_PNS0_7_EM_VALE,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNK10emscripten3val4callIvJRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEET_PKcDpOT0_,b20,b20,b20,__ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_,b20,b20,b20,__ZN10emscripten3val3setIA11_cA12_cEEvRKT_RKT0_,b20,b20,__ZN10emscripten3val3setIA7_cEEvRKT_RKS0_,b20,__ZN10emscripten3val3setIA10_cEEvRKT_RKS0_,__ZN10emscripten3val3setIA8_cEEvRKT_RKS0_,b20
,b20,b20,b20,b20,b20,b20,__ZN10emscripten8internal13MethodInvokerIM10MonaClientFvNS_3valEEvPS2_JS3_EE6invokeERKS5_S6_PNS0_7_EM_VALE,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN10emscripten3val3setIA5_cA23_cEEvRKT_RKT0_,__ZNK10emscripten3val4callIvJRS0_EEET_PKcDpOT0_,b20,b20,b20,b20,b20,b20,__ZN10emscripten3val3setIA5_cA21_cEEvRKT_RKT0_
,b20,b20,b20,b20,b20,__emval_set_property__wrapper,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__114__split_bufferIP11VideoPacketRNS_9allocatorIS2_EEE18__construct_at_endINS_13move_iteratorIPS2_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_,b20,b20,b20,b20,b20,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b20,b20,b20,b20,b20,b20,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_v = [b21,__ZL25default_terminate_handlerv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___cxa_rethrow__wrapper,___cxa_end_catch__wrapper,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZSt17__throw_bad_allocv,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21];
var FUNCTION_TABLE_iiiiiiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_
,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22];
var FUNCTION_TABLE_iiiiid = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce
,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23];
var FUNCTION_TABLE_viiii = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b24,b24,b24,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b24,b24,b24,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b24,b24,b24,b24,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN10emscripten8internal13MethodInvokerIM9NetStreamFvNS_3valEbEvPS2_JS3_bEE6invokeERKS5_S6_PNS0_7_EM_VALEb,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__16__treeINS_12__value_typeIiP9NetStreamEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSF_SF_,b24
,b24,b24,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,_synth_full,_synth_half,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24];

  return { _strlen: _strlen, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, ___cxa_can_catch: ___cxa_can_catch, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _bitshift64Lshr: _bitshift64Lshr, _i64Subtract: _i64Subtract, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_MonaClient_cpp: __GLOBAL__sub_I_MonaClient_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_id: dynCall_id, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real___GLOBAL__sub_I_MonaClient_cpp = asm["__GLOBAL__sub_I_MonaClient_cpp"]; asm["__GLOBAL__sub_I_MonaClient_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_MonaClient_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real___GLOBAL__I_000101 = asm["__GLOBAL__I_000101"]; asm["__GLOBAL__I_000101"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_000101.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var __GLOBAL__sub_I_MonaClient_cpp = Module["__GLOBAL__sub_I_MonaClient_cpp"] = asm["__GLOBAL__sub_I_MonaClient_cpp"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_id = Module["dynCall_id"] = asm["dynCall_id"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = true;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];

if (Module['thisProgram']) thisProgram = Module['thisProgram'];

if (Module['quit']) quit_ = Module['quit'];

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message




var STACK_ALIGN = 16;

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
var noExitRuntime = Module['noExitRuntime'] || true;

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
    return uint8Array;
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 12624, "rRgAACQAAAAAAAAAZEY4AAQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAACAAAAAlAAAA/////8YZAAD5GQAA8xkAAO0ZAADlGQAA4BkAANgZAADMGQAA0hkAAP///38AAAAAAAAAANobAAADAQEAEAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAgAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4hsAAAMBAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAIAAAAAQAAAAcAAAABAAAAAAAAAAQAAAABAAAAAAAAAAgAAAADAAAABwAAAAIAAAAAAAAABAAAAAMAAAAAAAAACAAAAAMAAAAHAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADqGwAAAwAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAgAAAACAAAABwAAAAEAAAAAAAAAAwAAAAEAAAAAAAAACAAAAAIAAAAHAAAAAgAAAAAAAAADAAAAAgAAAAAAAAAIAAAAAgAAAAcAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAbAAADAAAAIAAAAAAAAAAAAAAAAwAAAAIAAAAAAAAACAAAAAIAAAAHAAAAAwAAAAAAAAADAAAAAQAAAAAAAAAIAAAAAgAAAAcAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAgAAAACAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9hsAAAMBAAAQAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAACAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+GwAAAwAAABAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAABAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAIAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYcAAADAgIAEAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAgAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADhwAAAMCAAAQAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAACAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWHAAAAQAAAEAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbHAAAAAAAACQcAAABAAAABAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKhwAAAEAAAAEAAAAAAAAAAAAAAABAAAAAAAAAAcAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwHAAAAQAAAIIAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADUcAAADAQEAEAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAgAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPhwAAAMBAAAQAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAACAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABHHAAAAwAAABAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAABAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAIAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAcAAADAQAAAAAAAAAAAAAAAAAAAgAAAAEAAAAAAAAACAAAAAEAAAAHAAAAAgAAAAAAAAAEAAAAAAAAAAAAAAAIAAAAAwAAAAcAAAABAAAAAAAAAAQAAAACAAAAAAAAAAgAAAADAAAABwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWBwAAAMCAAAAAAAAAAAAAAAAAAAEAAAAAQAAAAAAAAAIAAAAAwAAAAcAAAACAAAAAAAAAAYAAAAAAAAAAAAAAAgAAAAFAAAABwAAAAEAAAAAAAAABgAAAAMAAAAAAAAACAAAAAUAAAAHAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiHAAAAwAAAGAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAAAAAAAAAgAAAAEAAAAAAAAAAQAAAAAAAAADAAAAAwAAAAAAAAACAAAAAQAAAAAAAAABAAAAAAAAAAYAAAACAAAAAAAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGccAAADAAAAJAAAAAAAAAAAAAAABAAAAAMAAAAAAAAAAQAAAAMAAAAAAAAABAAAAAAAAAAEAAAAAQAAAAAAAAACAAAAAwAAAAEAAAACAAAAAAAAAAQAAAAAAAAAAAAAAAEAAAADAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbBwAAAMAAABgAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAIAAAAAAAAAAQAAAAEAAAAAAAAAAQAAAAAAAAADAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2HAAAAwAAAGAAAAAAAAAAAAAAAAEAAAAAAAAABgAAAAIAAAAAAAAAAQAAAAEAAAAAAAAAAQAAAAAAAAADAAAAAwAAAAAAAAACAAAAAQAAAAAAAAABAAAAAAAAAAAAAAADAAAAAAAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHscAAADAAAAJAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAQAAAAMAAAAAAAAAAQAAAAAAAAAEAAAAAQAAAAAAAAACAAAAAwAAAAEAAAACAAAAAAAAAAQAAAADAAAAAAAAAAEAAAADAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgBwAAAMAAABgAAAAAAAAAAAAAAABAAAAAAAAAAMAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAIAAAAAAAAAAQAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACKHAAAAwEBABAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAABAAAAAgAAAAAAAAAAAAAACAAAAAEAAAAHAAAAAQAAAAEAAAACAAAAAQAAAAAAAAAIAAAAAQAAAAcAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI8cAAADAQEAEAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAEAAAACAAAAAQAAAAAAAAAIAAAAAQAAAAcAAAACAAAAAQAAAAIAAAAAAAAAAAAAAAgAAAABAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlBwAAAQAAACgAAAAAAAAAAAAAAAEAAAAAQAAAAAAAAAIAAAAAwAAAAcAAAACAAAAAAAAAAQAAAACAAAAAAAAAAgAAAADAAAABwAAAAMAAAAAAAAABAAAAAMAAAAAAAAACAAAAAMAAAAHAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAIAAAAAwAAAAcAAAABAAAAAAAAAAAAAADVGwAABAAAAKAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAgAAAADAAAABwAAAAEAAAAAAAAABAAAAAEAAAAAAAAACAAAAAMAAAAHAAAAAgAAAAAAAAAEAAAAAgAAAAAAAAAIAAAAAwAAAAcAAAADAAAAAAAAAAQAAAADAAAAAAAAAAgAAAADAAAABwAAAAQAAAAAAAAAAAAAAJkcAAAEAAAAoAAAAAAAAAAAAAAABAAAAAMAAAAAAAAACAAAAAMAAAAHAAAABAAAAAAAAAAEAAAAAgAAAAAAAAAIAAAAAwAAAAcAAAADAAAAAAAAAAQAAAABAAAAAAAAAAgAAAADAAAABwAAAAIAAAAAAAAABAAAAAAAAAAAAAAACAAAAAMAAAAHAAAAAQAAAAAAAAAAAAAA0BsAAAQAAACgAAAAAAAAAAAAAAAEAAAAAgAAAAAAAAAIAAAAAwAAAAcAAAADAAAAAAAAAAQAAAABAAAAAAAAAAgAAAADAAAABwAAAAIAAAAAAAAABAAAAAAAAAAAAAAACAAAAAMAAAAHAAAAAQAAAAAAAAAEAAAAAwAAAAAAAAAIAAAAAwAAAAcAAAAEAAAAAAAAAAAAAACeHAAAAQAAAAEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACnHAAAAAAAAK0cAAABAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALYcAAAAAAAAvBwAAAMAAQAQAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAACAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEHAAAAwABABAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAABAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAIAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM0cAAAEAQEAkAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAgAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAADAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAAAAAAAAAAA1hwAAAMAAAAhAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAQAAAABQAAAA8AAAABAAAAAAAAAAYAAAACAAAAAAAAABAAAAAFAAAADwAAAAMAAAAAAAAABgAAAAQAAAAAAAAAEAAAAAUAAAAPAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADeHAAAAwAAACAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAABAAAAAFAAAADwAAAAEAAAAAAAAABgAAAAIAAAAAAAAAEAAAAAUAAAAPAAAAAwAAAAAAAAAGAAAABAAAAAAAAAAQAAAABQAAAA8AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOYcAAADAAAAIQAAAAAAAAAAAAAAAgAAAP////8DAAAABQAAAAEAAAAEAAAAAAAAAAAAAAACAAAAAAAAAAUAAAAGAAAAAQAAAAUAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAUAAAABAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7xwAAAMAAAAgAAAAAAAAAAAAAAACAAAAAQAAAAMAAAAFAAAAAQAAAAQAAAACAAAAAAAAAAIAAAAAAAAABQAAAAYAAAABAAAABQAAAAEAAAAAAAAAAgAAAAAAAAAAAAAABQAAAAEAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4HAAAAwAAACEAAAAAAAAAAAAAAAIAAAD/////AgAAAAUAAAABAAAABAAAAAAAAAAAAAAAAgAAAAAAAAAFAAAABQAAAAEAAAAEAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAFAAAAAQAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEdAAADAAAAIAAAAAAAAAAAAAAAAgAAAAEAAAACAAAABQAAAAEAAAAEAAAAAgAAAAAAAAACAAAAAAAAAAUAAAAFAAAAAQAAAAQAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAUAAAABAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACh0AAAMAAAAhAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAFAAAAAQAAAAQAAAABAAAAAAAAAAIAAAAAAAAABQAAAAYAAAABAAAABQAAAAEAAAAAAAAAAgAAAP////8DAAAABQAAAAEAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATHQAAAwAAACAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAUAAAABAAAABAAAAAEAAAAAAAAAAgAAAAAAAAAFAAAABgAAAAEAAAAFAAAAAQAAAAAAAAACAAAAAQAAAAMAAAAFAAAAAQAAAAQAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwdAAADAAAAIQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAABQAAAAEAAAAEAAAAAQAAAAAAAAACAAAAAAAAAAUAAAAFAAAAAQAAAAQAAAABAAAAAAAAAAIAAAD/////AgAAAAUAAAABAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJR0AAAMAAAAgAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAFAAAAAQAAAAQAAAABAAAAAAAAAAIAAAAAAAAABQAAAAUAAAABAAAABAAAAAEAAAAAAAAAAgAAAAEAAAACAAAABQAAAAEAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuHQAAAAEBAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADkdAAAAAQEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARB0AAAABAQAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOHQAAAwEBABAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAABAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFodAAADAQEAEQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAgAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZh0AAAMBAAAQAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAQAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAACAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAByHQAAAwEAABEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAABAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH4dAAADAAAAEAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAgAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAih0AAAMAAAARAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAQAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAACAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACWHQAAAAEBAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAdAAADAAAAIAAAAAAAAAAAAAAAAgAAAAEAAAAAAAAABAAAAAEAAAADAAAAAgAAAAAAAAACAAAAAAAAAAQAAAAEAAAAAQAAAAMAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAQAAAABAAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqR0AAAMAAAAhAAAAAAAAAAAAAAACAAAA/////wAAAAAEAAAAAQAAAAMAAAAAAAAAAAAAAAIAAAAAAAAABAAAAAQAAAABAAAAAwAAAAEAAAAAAAAAAgAAAAAAAAAAAAAABAAAAAEAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACyHQAAAwAAACAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAQAAAABAAAAAwAAAAEAAAAAAAAAAgAAAAAAAAAEAAAABAAAAAEAAAADAAAAAQAAAAAAAAACAAAAAQAAAAAAAAAEAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALsdAAADAAAAIQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAABAAAAAEAAAADAAAAAQAAAAAAAAACAAAAAAAAAAQAAAAEAAAAAQAAAAMAAAABAAAAAAAAAAIAAAD/////AAAAAAQAAAABAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxB0AAAIAAACAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAIAAAAAQAAAAcAAAABAAAAAAAAAAIAAAABAAAAAAAAAAgAAAABAAAABwAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyB0AAAAAAADPHQAAAwAAACEAAAAAAAAAAAAAAAYAAAAEAAAAAAAAABAAAAAFAAAADwAAAAUAAAAAAAAABgAAAAIAAAAAAAAAEAAAAAUAAAAPAAAAAwAAAAAAAAAGAAAAAAAAAAAAAAAQAAAABQAAAA8AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANcdAAADAAAAIAAAAAAAAAAAAAAABgAAAAQAAAAAAAAAEAAAAAUAAAAPAAAABQAAAAAAAAAGAAAAAgAAAAAAAAAQAAAABQAAAA8AAAADAAAAAAAAAAYAAAAAAAAAAAAAABAAAAAFAAAADwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3x0AAAMBAQARAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAACAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADqHQAAAwEBABAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAABAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPUdAAADAQEAEQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAR4AAAMBAQAQAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAACAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANHgAAAwEAABEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAABAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkeAAADAQAAEAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJR4AAAMAAAARAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAACAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwHgAAAwAAABAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAABAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADseAAADAAAAEQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARx4AAAMAAAAQAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAACAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABTHgAAAwEAABEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAABAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF4eAAADAQAAEAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaR4AAAMAAAAwAAAAAAAAAAIAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAABAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABuHgAAAwAAADEAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAAAAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHYeAAADAAAAMAAAAAAAAAACAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfh4AAAMAAAAxAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAABAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACHHgAAAwAAADAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAAAAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAeAAADAAAAMQAAAAAAAAACAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAQAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmR4AAAMAAAAwAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAAAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAABAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACiHgAABAEAAJAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAABAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAIAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAwAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAAAAAAAAAAAAKseAAAEAAAAkAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAgAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAADAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAAAAAAAAAAAtB4AAAQBAQCRAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAACAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAAAAAAAAAADAHgAABAEBAJAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAABAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAwAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAAAAAAAAAAAAMweAAAEAQAAkQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAADAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAAAAAAAAAAA2B4AAAQBAACQAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAACAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAAAAAAAAAADkHgAABAAAAJEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAABAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAwAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAAAAAAAAAAAAPAeAAAEAAAAkAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAADAAAAAgAAAAAAAAAAAAAACQAAAAEAAAAIAAAAAQAAAAAAAAAAAAAA/B4AAAQBAQCRAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAACAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAAAAAAAAAAAJHwAABAEBAJAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAABAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAwAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAAAAAAAAAAAABYfAAAEAQAAkQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAADAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAAAAAAAAAAAIx8AAAQBAACQAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAACAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAAAAAAAAAAAwHwAABAAAAJEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAABAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAwAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAAAAAAAAAAAAD0fAAAEAAAAkAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAADAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAAAAAAAAAAASh8AAAQBAQCRAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAQAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAACAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAAAAAAAAAABXHwAABAEBAJAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAABAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAwAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAAAAAAAAAAAAGQfAAAEAQAAkQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAgAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAADAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAAAAAAAAAAAcR8AAAQBAACQAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAQAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAACAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAAAAAAAAAAB+HwAABAAAAJEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAABAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAwAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAAAAAAAAAAAAIsfAAAEAAAAkAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAgAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAADAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAAAAAAAAAAAmB8AAAABAQAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACeHwAAAwAAAAAAAAAAAAAAAAAAAAYAAAAAAAAABAAAAAwAAAAFAAAACwAAAAEAAAAAAAAABgAAAAIAAAAEAAAADAAAAAUAAAALAAAAAwAAAAAAAAAGAAAABAAAAAQAAAAMAAAABQAAAAsAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKYfAAADAAAAAQAAAAAAAAAAAAAABgAAAAAAAAAEAAAADAAAAAUAAAALAAAAAQAAAAAAAAAGAAAAAgAAAAQAAAAMAAAABQAAAAsAAAADAAAAAAAAAAYAAAAEAAAABAAAAAwAAAAFAAAACwAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArh8AAAMBAAAQAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAgAAAABAAAABwAAAAEAAAABAAAAAgAAAAEAAAAAAAAACAAAAAEAAAAHAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACzHwAAAwEAABAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAABAAAABAAAAAAAAAAAAAAACgAAAAMAAAAJAAAAAQAAAAEAAAAEAAAAAgAAAAAAAAAKAAAAAwAAAAkAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALofAAADAQAAEQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAEAAAAEAAAAAAAAAAAAAAAKAAAAAwAAAAkAAAABAAAAAQAAAAQAAAACAAAAAAAAAAoAAAADAAAACQAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwR8AAAQAAAChAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAQAAAABwAAAA8AAAABAAAAAAAAAAgAAAACAAAAAAAAABAAAAAHAAAADwAAAAMAAAAAAAAACAAAAAQAAAAAAAAAEAAAAAcAAAAPAAAABQAAAAAAAAAIAAAABgAAAAAAAAAQAAAABwAAAA8AAAAHAAAAAAAAAAAAAADKHwAABAAAAKAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAABAAAAAHAAAADwAAAAEAAAAAAAAACAAAAAIAAAAAAAAAEAAAAAcAAAAPAAAAAwAAAAAAAAAIAAAABAAAAAAAAAAQAAAABwAAAA8AAAAFAAAAAAAAAAgAAAAGAAAAAAAAABAAAAAHAAAADwAAAAcAAAAAAAAAAAAAANMfAAAEAAAAoQAAAAAAAAAAAAAACAAAAAQAAAAAAAAAEAAAAAcAAAAPAAAABQAAAAAAAAAIAAAAAgAAAAAAAAAQAAAABwAAAA8AAAADAAAAAAAAAAgAAAAAAAAAAAAAABAAAAAHAAAADwAAAAEAAAAAAAAACAAAAAYAAAAAAAAAEAAAAAcAAAAPAAAABwAAAAAAAAAAAAAA3B8AAAQAAACgAAAAAAAAAAAAAAAIAAAABAAAAAAAAAAQAAAABwAAAA8AAAAFAAAAAAAAAAgAAAACAAAAAAAAABAAAAAHAAAADwAAAAMAAAAAAAAACAAAAAAAAAAAAAAAEAAAAAcAAAAPAAAAAQAAAAAAAAAIAAAABgAAAAAAAAAQAAAABwAAAA8AAAAHAAAAAAAAAAAAAADlHwAAAwEAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAgAAAABAAAABwAAAAEAAAAAAAAABAAAAAMAAAAAAAAACAAAAAMAAAAHAAAABAAAAAAAAAAEAAAAAQAAAAAAAAAIAAAAAwAAAAcAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO0fAAACAAAAgQAAAAAAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAMAAAAPAAAAAQAAAAAAAAAEAAAAAgAAAAAAAAAQAAAAAwAAAA8AAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9B8AAAIAAACAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAQAAAAAwAAAA8AAAABAAAAAAAAAAQAAAACAAAAAAAAABAAAAADAAAADwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD7HwAABAAAALAAAAAAAAAAAgAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAAAAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAwAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAAAAAAAAAAAAAEgAAAEAAAAsQAAAAAAAAACAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAQAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAADAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAAAAAAAAAAACyAAAAQAAACwAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAAAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAABAAAAAgAAAAAAAAAAAAAAEAAAAAEAAAAPAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAAAAAAAAAAAVIAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkgAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHiAAAAABAQAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqIAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8gAAADAAAAIAAAAAAAAAAAAAAABAAAAAEAAAAAAAAACAAAAAMAAAAHAAAAAgAAAAAAAAAEAAAAAgAAAAAAAAAIAAAAAwAAAAcAAAADAAAAAAAAAAQAAAADAAAAAAAAAAgAAAADAAAABwAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCAAAAMAAAAgAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAIAAAAAwAAAAcAAAABAAAAAAAAAAQAAAABAAAAAAAAAAgAAAADAAAABwAAAAIAAAAAAAAABAAAAAIAAAAAAAAACAAAAAMAAAAHAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5IAAAAwAAACAAAAAAAAAAAAAAAAQAAAADAAAAAAAAAAgAAAADAAAABwAAAAQAAAAAAAAABAAAAAIAAAAAAAAACAAAAAMAAAAHAAAAAwAAAAAAAAAEAAAAAQAAAAAAAAAIAAAAAwAAAAcAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4gAAADAAAAIAAAAAAAAAAAAAAABAAAAAIAAAAAAAAACAAAAAMAAAAHAAAAAwAAAAAAAAAEAAAAAQAAAAAAAAAIAAAAAwAAAAcAAAACAAAAAAAAAAQAAAAAAAAAAAAAAAgAAAADAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQyAAAAMBAQARAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAACAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPIAAAAwEBABAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAABAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFsgAAADAQEAEQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAADgAAAAEAAAANAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAOAAAAAQAAAA0AAAABAAAAAgAAAAIAAAAAAAAAAAAAAA4AAAABAAAADQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZyAAAAMBAQAQAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAOAAAAAQAAAA0AAAABAAAAAQAAAAIAAAAAAAAAAAAAAA4AAAABAAAADQAAAAEAAAACAAAAAgAAAAAAAAAAAAAADgAAAAEAAAANAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABzIAAAAwEAABEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAABAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH8gAAADAQAAEAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiyAAAAMBAAARAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAOAAAAAQAAAA0AAAABAAAAAQAAAAIAAAAAAAAAAAAAAA4AAAABAAAADQAAAAEAAAACAAAAAgAAAAAAAAAAAAAADgAAAAEAAAANAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACXIAAAAwEAABAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAA4AAAABAAAADQAAAAEAAAABAAAAAgAAAAAAAAAAAAAADgAAAAEAAAANAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAOAAAAAQAAAA0AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKMgAAADAAAAEQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAryAAAAMAAAAQAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAACAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC7IAAAAwAAABEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAA4AAAABAAAADQAAAAEAAAABAAAAAgAAAAAAAAAAAAAADgAAAAEAAAANAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAOAAAAAQAAAA0AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMcgAAADAAAAEAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAADgAAAAEAAAANAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAOAAAAAQAAAA0AAAABAAAAAgAAAAIAAAAAAAAAAAAAAA4AAAABAAAADQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0yAAAAMAAAAxAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAABAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcIAAAAwAAADAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAAAAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOUgAAADAAAAMQAAAAAAAAACAAAAAgAAAAAAAAAAAAAADgAAAAEAAAANAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAOAAAAAQAAAA0AAAABAAAAAQAAAAIAAAAAAAAAAAAAAA4AAAABAAAADQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7iAAAAMAAAAwAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAOAAAAAQAAAA0AAAABAAAAAAAAAAIAAAAAAAAAAAAAAA4AAAABAAAADQAAAAEAAAABAAAAAgAAAAAAAAAAAAAADgAAAAEAAAANAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD3IAAAAwIAABAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAABAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAIAAAABAAAAAAAAAAAAAAAIAAAAAAAAAAcAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhAAADAAAAIAEAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAgAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAMAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAIAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADCEAAAMAAAAgAQAAAAAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAEAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAQAAAAAAAAAAwAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAgAAAAAAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYIQAAAwAAACABAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAIAAAAAAAAAAQAAAAEAAAAAAAAAAQAAAAAAAAAAAAAABAAAAAAAAAADAAAAAQAAAAAAAAABAAAAAAAAAAAAAAACAAAAAAAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQhAAADAAAAIAEAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAgAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAMAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAIAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMCEAAAMAAAAgAQAAAAAAAAAAAAACAAAAAAAAAAAAAAAEAAAAAQAAAAMAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAgAAAABAAAABwAAAAEAAAAAAAAAAgAAAAAAAAAAAAAABAAAAAEAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/IQAAAwAAACEBAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAQAAAABAAAAAwAAAAEAAAAAAAAAAgAAAAAAAAAAAAAACAAAAAEAAAAHAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAEAAAAAQAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE4hAAADAAAAIAEAAAAAAAAAAAAAAgAAAAAAAAAAAAAABAAAAAEAAAADAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAIAAAAAQAAAAcAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAQAAAABAAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXSEAAAMAAAAhAQAAAAAAAAAAAAACAAAAAAAAAAAAAAAEAAAAAQAAAAMAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAgAAAABAAAABwAAAAEAAAAAAAAAAgAAAAAAAAAAAAAABAAAAAEAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsIQAAAwAAACABAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAQAAAABAAAAAwAAAAEAAAAAAAAAAgAAAAAAAAAAAAAACAAAAAEAAAAHAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAEAAAAAQAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHshAAADAAAAIQEAAAAAAAAAAAAAAgAAAAAAAAAAAAAABAAAAAEAAAADAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAIAAAAAQAAAAcAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAQAAAABAAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiiEAAAMAAAAgAQAAAAAAAAAAAAACAAAAAAAAAAAAAAAEAAAAAQAAAAMAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAgAAAABAAAABwAAAAEAAAAAAAAAAgAAAAAAAAAAAAAABAAAAAEAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZIQAAAwAAACEBAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAQAAAABAAAAAwAAAAEAAAAAAAAAAgAAAAAAAAAAAAAACAAAAAEAAAAHAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAEAAAAAQAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKghAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArSEAAAMAAQAQAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAACAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC5IQAAAwABABEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAABAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMUhAAADAAEAEAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0SEAAAMAAQARAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAACAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADdIQAABAAAAIAAAAAAAAAAAAAAAAgAAAACAAAAAAAAABAAAAAHAAAADwAAAAMAAAAAAAAACAAAAAQAAAAAAAAAEAAAAAcAAAAPAAAABQAAAAAAAAAIAAAABgAAAAAAAAAQAAAABwAAAA8AAAAHAAAAAAAAAAgAAAAAAAAAAAAAABAAAAAHAAAADwAAAAEAAAAAAAAAAAAAAOYhAAAEAAAAgQAAAAAAAAAAAAAACAAAAAIAAAAAAAAAEAAAAAcAAAAPAAAAAwAAAAAAAAAIAAAABAAAAAAAAAAQAAAABwAAAA8AAAAFAAAAAAAAAAgAAAAGAAAAAAAAABAAAAAHAAAADwAAAAcAAAAAAAAACAAAAAAAAAAAAAAAEAAAAAcAAAAPAAAAAQAAAAAAAAAAAAAA7yEAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIgAAAwEBABAAAAAAAAAAAAAAAAIAAAAAAAAABgAAAAoAAAABAAAACQAAAAEAAAABAAAABAAAAAAAAAAGAAAACgAAAAMAAAAJAAAAAQAAAAEAAAAEAAAAAgAAAAYAAAAKAAAAAwAAAAkAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAciAAADAQEAEQAAAAAAAAAAAAAAAgAAAAAAAAAGAAAACgAAAAEAAAAJAAAAAQAAAAEAAAAEAAAAAAAAAAYAAAAKAAAAAwAAAAkAAAABAAAAAQAAAAQAAAACAAAABgAAAAoAAAADAAAACQAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADiIAAAQAAACxAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAABAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAAAAAAAAAAAYIgAABAAAALAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAAAAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAwAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAAAAAAAAAAAACIiAAAEAAAAsQAAAAAAAAACAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAADAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAAAAAAAAAAALCIAAAQAAACwAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAAAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAABAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAKAAAAAQAAAAkAAAABAAAAAAAAAAAAAAA2IgAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEiAAABAAAAAQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEoiAAAAAAAAUCIAAAEAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWSIAAAAAAABfIgAAAQAAAAEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAoAAAABAAAACQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoIgAAAAAAAG4iAAABAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAACgAAAAEAAAAJAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHciAAAAAAAAfSIAAAMBAQAQAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAQAAAAAQAAAA8AAAABAAAAAQAAAAQAAAAAAAAAAAAAABAAAAADAAAADwAAAAEAAAABAAAABAAAAAIAAAAAAAAAEAAAAAMAAAAPAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEIgAAAwEBABEAAAAAAAAAAAAAAAIAAAAAAAAAAAAAABAAAAABAAAADwAAAAEAAAABAAAABAAAAAAAAAAAAAAAEAAAAAMAAAAPAAAAAQAAAAEAAAAEAAAAAgAAAAAAAAAQAAAAAwAAAA8AAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIsiAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkSIAAAEAAAABAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAJAAAAAQAAAAgAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmSIAAAAAAACeIgAAAQAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAkAAAABAAAACAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmIgAAAAAAAKsiAAADAAAAMQIAAAAAAAACAAAABAAAAAAAAAAAAAAAIAAAAAMAAAAfAAAAAQAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAwAAAB8AAAABAAAAAQAAAAQAAAAAAAAAAAAAACAAAAADAAAAHwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtSIAAAMAAAAwAgAAAAAAAAIAAAAEAAAAAAAAAAAAAAAgAAAAAwAAAB8AAAABAAAAAAAAAAQAAAAAAAAAAAAAACAAAAADAAAAHwAAAAEAAAABAAAABAAAAAAAAAAAAAAAIAAAAAMAAAAfAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/IgAABAAAALECAAAAAAAAAgAAAAQAAAAAAAAAAAAAACAAAAADAAAAHwAAAAEAAAAAAAAABAAAAAAAAAAAAAAAIAAAAAMAAAAfAAAAAQAAAAEAAAAEAAAAAAAAAAAAAAAgAAAAAwAAAB8AAAABAAAAAwAAAAQAAAAAAAAAAAAAACAAAAADAAAAHwAAAAEAAAAAAAAAAAAAAMoiAAAEAAAAsAIAAAAAAAACAAAABAAAAAAAAAAAAAAAIAAAAAMAAAAfAAAAAQAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAwAAAB8AAAABAAAAAQAAAAQAAAAAAAAAAAAAACAAAAADAAAAHwAAAAEAAAADAAAABAAAAAAAAAAAAAAAIAAAAAMAAAAfAAAAAQAAAAAAAAAAAAAA1SIAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADfIgAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOYiAAABAAAAAQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAADgAAAAEAAAANAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO8iAAAAAAAA9SIAAAEAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAOAAAAAQAAAA0AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/iIAAAAAAAAEIwAAAQAAAAECAAAAAAAAAAAAAAQAAAAAAAAAAAAAACAAAAADAAAAHwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOIwAAAAAAABUjAAABAAAAAAIAAAAAAAAAAAAABAAAAAAAAAAAAAAAIAAAAAMAAAAfAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8jAAAAAAAAJiMAAAQBAACRAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAACAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAAAAAAAAAAAzIwAABAEAAJAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAABAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAwAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAAAAAAAAAAAAEAjAAAEAAAAkQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAEAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAgAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAADAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAAAAAAAAAAATSMAAAQAAACQAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAQAAAAIAAAAAAAAAAAAAAAwAAAABAAAACwAAAAEAAAACAAAAAgAAAAAAAAAAAAAADAAAAAEAAAALAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAMAAAAAQAAAAsAAAABAAAAAAAAAAAAAABaIwAAAwAAABAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAAAAAABwAAAAEAAAABAAAAAgAAAAAAAAAAAAAACAAAAAEAAAAHAAAAAQAAAAEAAAACAAAAAQAAAAAAAAAIAAAAAQAAAAcAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF8jAAADAAAAEAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAACAAAAAAAAAAHAAAAAQAAAAEAAAACAAAAAQAAAAAAAAAIAAAAAQAAAAcAAAACAAAAAQAAAAIAAAAAAAAAAAAAAAgAAAABAAAABwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZCMAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABrIwAAAwEAAAEAAAAAAAAAAAAAAAQAAAAAAAAABgAAAAoAAAADAAAACQAAAAEAAAAAAAAACAAAAAIAAAAGAAAACgAAAAcAAAAJAAAAAwAAAAAAAAAIAAAABgAAAAYAAAAKAAAABwAAAAkAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHIjAAADAQAAAAAAAAAAAAAAAAAABAAAAAAAAAAGAAAACgAAAAMAAAAJAAAAAQAAAAAAAAAIAAAAAgAAAAYAAAAKAAAABwAAAAkAAAADAAAAAAAAAAgAAAAGAAAABgAAAAoAAAAHAAAACQAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeSMAAAMAAAAgAAAAAAAAAAAAAAAEAAAAAgAAAAQAAAAKAAAAAwAAAAkAAAACAAAAAAAAAAQAAAABAAAAAgAAAAoAAAADAAAACQAAAAMAAAAAAAAABAAAAAAAAAAAAAAACgAAAAMAAAAJAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDIwAAAwAAACEAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAoAAAADAAAACQAAAAIAAAAAAAAABAAAAAEAAAACAAAACgAAAAMAAAAJAAAAAwAAAAAAAAAEAAAAAgAAAAAAAAAKAAAAAwAAAAkAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAACcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAApAAAANK0AAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcrQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICvUAA=");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_memory_fill(dest, value, size) {
    dest = dest >>> 0;
    size = size >>> 0;
    if (dest + size > bufferView.length) throw "trap: invalid memory.fill";
    bufferView.fill(value, dest, dest + size);
  }
      
  function wasm2js_memory_copy(dest, source, size) {
    // TODO: traps on invalid things
    bufferView.copyWithin(dest, source, source + size);
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env._embind_register_class;
 var fimport$1 = env._embind_register_class_constructor;
 var fimport$2 = env._emval_decref;
 var fimport$3 = env.emscripten_log;
 var fimport$4 = env._emval_call_void_method;
 var fimport$5 = env._emval_get_method_caller;
 var fimport$6 = env._embind_register_class_function;
 var fimport$7 = env.abort;
 var fimport$8 = env.pthread_join;
 var fimport$9 = env._embind_register_void;
 var fimport$10 = env._embind_register_bool;
 var fimport$11 = env._embind_register_std_string;
 var fimport$12 = env._embind_register_std_wstring;
 var fimport$13 = env._embind_register_emval;
 var fimport$14 = env._embind_register_integer;
 var fimport$15 = env._embind_register_float;
 var fimport$16 = env._embind_register_memory_view;
 var fimport$17 = env.fd_fdstat_get;
 var fimport$18 = env.fd_close;
 var fimport$19 = env.fd_write;
 var fimport$20 = env.environ_sizes_get;
 var fimport$21 = env.environ_get;
 var fimport$22 = env.emscripten_resize_heap;
 var fimport$23 = env.emscripten_memcpy_big;
 var fimport$24 = env.setTempRet0;
 var fimport$25 = env._embind_register_bigint;
 var fimport$26 = env.fd_seek;
 var global$0 = 5287808;
 var global$1 = 0;
 var global$2 = 27;
 var global$3 = 1;
 var global$4 = 30;
 var global$5 = 31;
 var global$6 = 10952;
 var global$7 = 4050;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $558();
  $173();
  $515();
 }
 
 function $1() {
  FUNCTION_TABLE[1 | 0](43216) | 0;
  return;
 }
 
 function $2($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $33_1 = 0, $143_1 = 0, $37_1 = 0, $38_1 = 0, $40_1 = 0, $41_1 = 0, $169_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 112 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  HEAP32[($3_1 + 48 | 0) >> 2] = $3_1 + 16 | 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = 1024;
  $3();
  HEAP32[($3_1 + 40 | 0) >> 2] = 2;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $5() | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $6() | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($3_1 + 28 | 0) >> 2] = 3;
  $12_1 = $8() | 0;
  $13_1 = $9() | 0;
  $14_1 = $10() | 0;
  $15_1 = $11() | 0;
  HEAP32[($3_1 + 88 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
  $17_1 = $12() | 0;
  $18_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
  HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
  $20_1 = $13() | 0;
  $21_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
  HEAP32[($3_1 + 92 | 0) >> 2] = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
  $23_1 = $13() | 0;
  $24_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
  $25_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 100 | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  fimport$0($12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $17_1 | 0, $18_1 | 0, $20_1 | 0, $21_1 | 0, $23_1 | 0, $24_1 | 0, $25_1 | 0, $14() | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 52 | 0) >> 2] = $3_1 + 16 | 0;
  HEAP32[($3_1 + 108 | 0) >> 2] = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
  HEAP32[($3_1 + 104 | 0) >> 2] = 4;
  $33_1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
  $16(HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = 1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 8;
  i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $143_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 56 | 0) >> 2] = $143_1;
  HEAP32[($3_1 + 60 | 0) >> 2] = i64toi32_i32$1;
  $37_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
  $38_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
  HEAP32[($3_1 + 84 | 0) >> 2] = $33_1;
  HEAP32[($3_1 + 80 | 0) >> 2] = 1037;
  HEAP32[($3_1 + 76 | 0) >> 2] = $38_1;
  HEAP32[($3_1 + 72 | 0) >> 2] = $37_1;
  $40_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
  $41_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  HEAP32[($3_1 + 64 | 0) >> 2] = $41_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
  $169_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[$3_1 >> 2] = $169_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $17($40_1 | 0, $3_1 | 0);
  global$0 = $3_1 + 112 | 0;
  return $4_1 | 0;
 }
 
 function $3() {
  return;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $31(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $5() {
  return 0 | 0;
 }
 
 function $6() {
  return 0 | 0;
 }
 
 function $7($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($4_1);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $8() {
  return $32() | 0 | 0;
 }
 
 function $9() {
  return $33() | 0 | 0;
 }
 
 function $10() {
  return $34() | 0 | 0;
 }
 
 function $11() {
  return 0 | 0;
 }
 
 function $12() {
  return 1188 | 0;
 }
 
 function $13() {
  return 1191 | 0;
 }
 
 function $14() {
  return 1193 | 0;
 }
 
 function $15($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $616(40 | 0) | 0;
  $36($5_1 | 0, $35(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = 5;
  $5_1 = $8() | 0;
  $9_1 = $38($3_1 + 16 | 0 | 0) | 0;
  $13_1 = $39($3_1 + 16 | 0 | 0) | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$1($5_1 | 0, $9_1 | 0, $13_1 | 0, $40() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $17($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 6;
  $8_1 = $8() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $119($4_1 + 8 | 0 | 0) | 0;
  $17_1 = $120($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$6($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $121() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $122($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $18() {
  FUNCTION_TABLE[7 | 0](43217) | 0;
  return;
 }
 
 function $19($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $33_1 = 0, $143_1 = 0, $37_1 = 0, $38_1 = 0, $40_1 = 0, $41_1 = 0, $169_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 112 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  HEAP32[($3_1 + 48 | 0) >> 2] = $3_1 + 16 | 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = 1044;
  $20();
  HEAP32[($3_1 + 40 | 0) >> 2] = 8;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $22() | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $23() | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($3_1 + 28 | 0) >> 2] = 9;
  $12_1 = $25() | 0;
  $13_1 = $26() | 0;
  $14_1 = $27() | 0;
  $15_1 = $11() | 0;
  HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
  $17_1 = $12() | 0;
  $18_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
  HEAP32[($3_1 + 92 | 0) >> 2] = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
  $20_1 = $13() | 0;
  $21_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
  HEAP32[($3_1 + 88 | 0) >> 2] = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
  $23_1 = $13() | 0;
  $24_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
  $25_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 100 | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  fimport$0($12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $17_1 | 0, $18_1 | 0, $20_1 | 0, $21_1 | 0, $23_1 | 0, $24_1 | 0, $25_1 | 0, $14() | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 52 | 0) >> 2] = $3_1 + 16 | 0;
  HEAP32[($3_1 + 108 | 0) >> 2] = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
  HEAP32[($3_1 + 104 | 0) >> 2] = 10;
  $33_1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
  $29(HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = 1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 8;
  i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $143_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 56 | 0) >> 2] = $143_1;
  HEAP32[($3_1 + 60 | 0) >> 2] = i64toi32_i32$1;
  $37_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
  $38_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
  HEAP32[($3_1 + 84 | 0) >> 2] = $33_1;
  HEAP32[($3_1 + 80 | 0) >> 2] = 1037;
  HEAP32[($3_1 + 76 | 0) >> 2] = $38_1;
  HEAP32[($3_1 + 72 | 0) >> 2] = $37_1;
  $40_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
  $41_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  HEAP32[($3_1 + 64 | 0) >> 2] = $41_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
  $169_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[$3_1 >> 2] = $169_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $30($40_1 | 0, $3_1 | 0);
  global$0 = $3_1 + 112 | 0;
  return $4_1 | 0;
 }
 
 function $20() {
  return;
 }
 
 function $21($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $132(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $22() {
  return 0 | 0;
 }
 
 function $23() {
  return 0 | 0;
 }
 
 function $24($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($4_1);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $25() {
  return $133() | 0 | 0;
 }
 
 function $26() {
  return $134() | 0 | 0;
 }
 
 function $27() {
  return $135() | 0 | 0;
 }
 
 function $28($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $616(64 | 0) | 0;
  $136($5_1 | 0, $35(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = 11;
  $5_1 = $25() | 0;
  $9_1 = $138($3_1 + 16 | 0 | 0) | 0;
  $13_1 = $139($3_1 + 16 | 0 | 0) | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$1($5_1 | 0, $9_1 | 0, $13_1 | 0, $40() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $30($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 12;
  $8_1 = $25() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $168($4_1 + 8 | 0 | 0) | 0;
  $17_1 = $169($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$6($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $121() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $170($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $31($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + -4 | 0) >> 2] | 0 | 0;
 }
 
 function $32() {
  return 1096 | 0;
 }
 
 function $33() {
  return 1132 | 0;
 }
 
 function $34() {
  return 1172 | 0;
 }
 
 function $35($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $36($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $49($5_1 | 0, $48(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 1236 + 8 | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  $14_1 = 0;
  fimport$3($14_1 | 0, 1264 | 0, $14_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $37($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $41($4_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $10_1 = $42(FUNCTION_TABLE[$5_1 | 0]($4_1) | 0 | 0) | 0;
  $43($4_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $38($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $39($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $44() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $40() {
  return 1232 | 0;
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $45($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $42($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $43($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$2(HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $44() {
  return 1196 | 0;
 }
 
 function $45($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $46($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $46($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $47($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $47($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $49($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 1288 + 8 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $289() | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $174() | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  $50($5_1 + 24 | 0 | 0, $35(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP8[($5_1 + 28 | 0) >> 0] = 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $50($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $51($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 1236 + 8 | 0;
  $364($4_1 + 36 | 0 | 0);
  $12_1 = 0;
  fimport$3($12_1 | 0, 1316 | 0, $12_1 | 0);
  $52($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $52($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 1288 + 8 | 0;
  $291($4_1 + 16 | 0 | 0);
  $176($4_1 + 20 | 0 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($4_1);
  $43($4_1 + 24 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $53($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $51($4_1 | 0) | 0;
  $617($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $54($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $52_1 = 0, $97_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAPU8[($55($1_1 | 0, 0 | 0) | 0) >> 0] | 0), HEAP8[(wasm2js_i32$0 + 55 | 0) >> 0] = wasm2js_i32$1;
  HEAP8[($4_1 + 54 | 0) >> 0] = ((HEAPU8[($4_1 + 55 | 0) >> 0] | 0) & 255 | 0) >> 4 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAPU8[($5_1 + 28 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!(((HEAPU8[($4_1 + 54 | 0) >> 0] | 0) & 255 | 0 | 0) == (10 | 0) & 1 | 0)) {
      break label$3
     }
     $56($4_1 + 40 | 0 | 0, $1_1 | 0, 2 | 0, -1 | 0);
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $57($5_1 | 0, $4_1 + 40 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
     $599($4_1 + 40 | 0 | 0) | 0;
     break label$1;
    }
    $56($4_1 + 24 | 0 | 0, $1_1 | 0, 1 | 0, -1 | 0);
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $57($5_1 | 0, $4_1 + 24 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
    $599($4_1 + 24 | 0 | 0) | 0;
    break label$1;
   }
   $52_1 = (HEAPU8[($4_1 + 54 | 0) >> 0] | 0) + -7 | 0;
   label$4 : {
    label$5 : {
     switch ($52_1 | 0) {
     case 3:
      label$9 : {
       if (((HEAPU8[($55($1_1 | 0, 1 | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
        break label$9
       }
       $56($4_1 + 8 | 0 | 0, $1_1 | 0, 2 | 0, -1 | 0);
       $58($5_1 | 0, 86018 | 0, $4_1 + 8 | 0 | 0);
       $599($4_1 + 8 | 0 | 0) | 0;
      }
      break label$4;
     case 0:
      $59($5_1 | 0, 65543 | 0);
      break label$4;
     case 1:
      $59($5_1 | 0, 65542 | 0);
      break label$4;
     default:
      break label$5;
     };
    }
    HEAP32[$4_1 >> 2] = (HEAPU8[($4_1 + 54 | 0) >> 0] | 0) & 255 | 0;
    fimport$3(0 | 0, 1343 | 0, $4_1 | 0);
   }
   label$10 : {
    if (!((HEAPU8[($5_1 + 28 | 0) >> 0] | 0) & 1 | 0)) {
     break label$10
    }
    $60($5_1 + 24 | 0 | 0, 1369 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 348 | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 344 | 0 | 0);
   }
   HEAP32[($4_1 + 60 | 0) >> 2] = 0;
  }
  $97_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  global$0 = $4_1 + 64 | 0;
  return $97_1 | 0;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = ($80(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $56($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  $596($0_1 | 0, $7_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $81($7_1 | 0) | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $57($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $9_1 = 0, $42_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $7_1 = $65($1_1 | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] = $7_1;
  $9_1 = $66($1_1 | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 28 | 0) >> 2] = $9_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $199(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$2
     }
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $203(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
     label$4 : {
      label$5 : {
       if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) == (-6 | 0) & 1 | 0) {
        break label$5
       }
       if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) == (-541478725 | 0) & 1 | 0)) {
        break label$4
       }
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = 0;
      break label$1;
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($5_1);
     continue label$3;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $42_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $42_1 | 0;
 }
 
 function $58($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $59($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  $8_1 = $66($2_1 | 0) | 0;
  HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 72 | 0) >> 2] = $8_1;
  $10_1 = $65($2_1 | 0) | 0;
  HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 68 | 0) >> 2] = $10_1;
  HEAP8[($6_1 + 28 | 0) >> 0] = 1;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $59($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($5_1);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $60($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $83(HEAP32[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $82(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $82(HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $61($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $357(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 352 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($3_1 + 4 | 0) >> 2] = Math_imul(Math_imul(HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0), HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 348 | 0) >> 2] | 0);
  HEAP32[$3_1 >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  $62($4_1 + 24 | 0 | 0, 1400 | 0, $3_1 | 0, $3_1 + 4 | 0 | 0, $4_1 + 32 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $62($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  $106(HEAP32[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, $104(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0, $82(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $224(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  }
  label$2 : {
   if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   $223($4_1 + 12 | 0 | 0);
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $64($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $52($4_1 | 0) | 0;
  $617($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $65($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $69($68(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $66($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $70(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $67($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $68($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($71($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $72($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $73($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $69($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $70($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($71($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $78($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $79($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($74(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0) & 128 | 0 | 0) != (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $72($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($74(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $75($74(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $74($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $76(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $75($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $77(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $76($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $77($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[(($74(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $79($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = (HEAPU8[(($74(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $80($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($71($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $84($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $85($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $81($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $90(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $82($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $83($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $92() | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  $93($6_1 + 8 | 0 | 0, $82(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0, $82(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  fimport$4(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, $94($6_1 + 8 | 0 | 0) | 0 | 0);
  global$0 = $6_1 + 48 | 0;
  return;
 }
 
 function $84($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($86(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $85($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $87($86(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $86($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $88(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $87($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $89(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $88($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $90($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $91(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $91($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $92() {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!((((HEAPU8[(0 + 43224 | 0) >> 0] | 0) & 1 | 0) & 255 | 0 | 0) == (0 & 255 | 0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!($619(43224 | 0) | 0)) {
    break label$1
   }
   (wasm2js_i32$0 = 0, wasm2js_i32$1 = $95() | 0), HEAP32[(wasm2js_i32$0 + 43220 | 0) >> 2] = wasm2js_i32$1;
   $627(43224 | 0);
  }
  return HEAP32[(0 + 43220 | 0) >> 2] | 0 | 0;
 }
 
 function $93($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $9_1 = 0, $11_1 = 0, $19_1 = 0, $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $96($6_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  $9_1 = $82(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $11_1 = $82(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = $5_1 + 12 | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = $9_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $11_1;
  $98(HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, $97($82(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $19_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  $21_1 = $82(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = $19_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $21_1;
  $98(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, $97($82(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $99(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 48 | 0;
  return $6_1 | 0;
 }
 
 function $94($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $100(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $95() {
  var $2_1 = 0, $11_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $11_1 = fimport$5($101($2_1 + 8 | 0 | 0) | 0 | 0, $102($2_1 + 8 | 0 | 0) | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $96($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $97($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $98($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$8_1 >> 2] = (HEAP32[$8_1 >> 2] | 0) + 8 | 0;
  return;
 }
 
 function $99($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $100($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $103() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $103() {
  return 1388 | 0;
 }
 
 function $104($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $105($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $106($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $107() | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  $108($7_1 | 0, $104(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0, $82(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  fimport$4(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, $109($7_1 | 0) | 0 | 0);
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $107() {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!((((HEAPU8[(0 + 43232 | 0) >> 0] | 0) & 1 | 0) & 255 | 0 | 0) == (0 & 255 | 0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!($619(43232 | 0) | 0)) {
    break label$1
   }
   (wasm2js_i32$0 = 0, wasm2js_i32$1 = $110() | 0), HEAP32[(wasm2js_i32$0 + 43228 | 0) >> 2] = wasm2js_i32$1;
   $627(43232 | 0);
  }
  return HEAP32[(0 + 43228 | 0) >> 2] | 0 | 0;
 }
 
 function $108($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $10_1 = 0, $12_1 = 0, $14_1 = 0, $22_1 = 0, $24_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $111($7_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $10_1 = $104(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $12_1 = $82(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  $14_1 = $105(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 40 | 0) >> 2] = $6_1 + 8 | 0;
  HEAP32[($6_1 + 36 | 0) >> 2] = $10_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $12_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $14_1;
  $98(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, $97($104(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $22_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
  $24_1 = $82(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  $26_1 = $105(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 52 | 0) >> 2] = $22_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $24_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $26_1;
  $98(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, $97($82(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $31_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
  $33_1 = $105(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = $31_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $33_1;
  $113(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, $112($105(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $99(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 64 | 0;
  return $7_1 | 0;
 }
 
 function $109($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $114(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $110() {
  var $2_1 = 0, $11_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $11_1 = fimport$5($115($2_1 + 8 | 0 | 0) | 0 | 0, $116($2_1 + 8 | 0 | 0) | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $111($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $112($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $113($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $8_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$8_1 >> 2] = (HEAP32[$8_1 >> 2] | 0) + 8 | 0;
  return;
 }
 
 function $114($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $115($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 4 | 0;
 }
 
 function $116($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $117() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $117() {
  return 1424 | 0;
 }
 
 function $118($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $13_1 = 0, $19_1 = 0, $7_1 = 0, $28_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $7_1 = $123(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $8_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
  $10_1 = HEAP32[$8_1 >> 2] | 0;
  $13_1 = $7_1 + ($9_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($9_1 & 1 | 0)) {
     break label$2
    }
    $19_1 = HEAP32[((HEAP32[$13_1 >> 2] | 0) + $10_1 | 0) >> 2] | 0;
    break label$1;
   }
   $19_1 = $10_1;
  }
  $124($5_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = FUNCTION_TABLE[$19_1 | 0]($13_1, $5_1) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  $28_1 = $97($5_1 + 16 | 0 | 0) | 0;
  $599($5_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $28_1 | 0;
 }
 
 function $119($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $120($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $125() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $121() {
  return 1588 | 0;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $616(8 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $8_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $126($0_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $125() {
  return 1440 | 0;
 }
 
 function $126($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $127($6_1 | 0, $5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
  $581($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $127($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $128(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $129($6_1 | 0) | 0;
  $128(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $130($6_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $129($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $130($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $131($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $131($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $132($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + -4 | 0) >> 2] | 0 | 0;
 }
 
 function $133() {
  return 1616 | 0;
 }
 
 function $134() {
  return 1652 | 0;
 }
 
 function $135() {
  return 1692 | 0;
 }
 
 function $136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $49($5_1 | 0, $48(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 1716 + 8 | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  HEAP32[($5_1 + 48 | 0) >> 2] = 0;
  HEAP32[($5_1 + 52 | 0) >> 2] = 0;
  HEAP32[($5_1 + 56 | 0) >> 2] = 0;
  HEAP32[($5_1 + 60 | 0) >> 2] = 0;
  $20_1 = 0;
  fimport$3($20_1 | 0, 1744 | 0, $20_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $41($4_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $10_1 = $140(FUNCTION_TABLE[$5_1 | 0]($4_1) | 0 | 0) | 0;
  $43($4_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $138($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $139($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $141() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $140($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $141() {
  return 1708 | 0;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 1716 + 8 | 0;
  $10_1 = 0;
  fimport$3($10_1 | 0, 1768 | 0, $10_1 | 0);
  $52($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $143($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $142($4_1 | 0) | 0;
  $617($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $12_1 = 0, $20_1 = 0, $34_1 = 0, $39_1 = 0, $72_1 = 0, $80_1 = 0, $89_1 = 0, $106_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAPU8[($5_1 + 28 | 0) >> 0] | 0) & 1 | 0) {
      break label$3
     }
     $12_1 = 24;
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = (((HEAPU8[($55($1_1 | 0, 0 | 0) | 0) >> 0] | 0) << $12_1 | 0) >> $12_1 | 0) & 15 | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
     $20_1 = 24;
     label$4 : {
      if (!(((((HEAPU8[($55($1_1 | 0, 0 | 0) | 0) >> 0] | 0) << $20_1 | 0) >> $20_1 | 0) >> 4 | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$4
      }
      $34_1 = 24;
      if (((HEAPU8[($55($1_1 | 0, 1 | 0) | 0) >> 0] | 0) << $34_1 | 0) >> $34_1 | 0) {
       break label$4
      }
      $39_1 = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) + -7 | 0;
      label$5 : {
       label$6 : {
        switch ($39_1 | 0) {
        case 0:
         $56($4_1 + 40 | 0 | 0, $1_1 | 0, 5 | 0, -1 | 0);
         $58($5_1 | 0, 27 | 0, $4_1 + 40 | 0 | 0);
         $599($4_1 + 40 | 0 | 0) | 0;
         break label$5;
        case 5:
         $56($4_1 + 24 | 0 | 0, $1_1 | 0, 5 | 0, -1 | 0);
         $58($5_1 | 0, 173 | 0, $4_1 + 24 | 0 | 0);
         $599($4_1 + 24 | 0 | 0) | 0;
         break label$5;
        default:
         break label$6;
        };
       }
       HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
       fimport$3(0 | 0, 1795 | 0, $4_1 | 0);
       HEAP32[($4_1 + 60 | 0) >> 2] = -1;
       break label$1;
      }
     }
     break label$2;
    }
    $72_1 = 24;
    $80_1 = 24;
    $89_1 = 24;
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = (((((HEAPU8[($55($1_1 | 0, 2 | 0) | 0) >> 0] | 0) << $72_1 | 0) >> $72_1 | 0) << 16 | 0) + ((((HEAPU8[($55($1_1 | 0, 3 | 0) | 0) >> 0] | 0) << $80_1 | 0) >> $80_1 | 0) << 8 | 0) | 0) + (((HEAPU8[($55($1_1 | 0, 4 | 0) | 0) >> 0] | 0) << $89_1 | 0) >> $89_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
    $56($4_1 + 8 | 0 | 0, $1_1 | 0, 5 | 0, -1 | 0);
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $57($5_1 | 0, $4_1 + 8 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
    $599($4_1 + 8 | 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($4_1 + 60 | 0) >> 2] = 0;
  }
  $106_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  global$0 = $4_1 + 64 | 0;
  return $106_1 | 0;
 }
 
 function $145($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0;
   HEAP32[($4_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
   $146($4_1 + 24 | 0 | 0, 1817 | 0, $4_1 + 36 | 0 | 0, $4_1 + 40 | 0 | 0);
   HEAP32[($3_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($4_1 + 36 | 0) >> 2] | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0);
   label$3 : {
    if (!(HEAP32[($4_1 + 44 | 0) >> 2] | 0)) {
     break label$3
    }
    $668(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
   }
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $667(Math_imul(HEAP32[($3_1 + 24 | 0) >> 2] | 0, 3) >> 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + (HEAP32[($3_1 + 24 | 0) >> 2] | 0) | 0;
   HEAP32[($4_1 + 52 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) >> 2 | 0) | 0;
  }
  HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 40 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$4
    }
    $677(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 16 | 0) >> 2] | 0, HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + (HEAP32[($4_1 + 36 | 0) >> 2] | 0) | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) >>> 1 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) >>> 1 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    $677(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  HEAP32[$3_1 >> 2] = 0;
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[$3_1 >> 2] | 0 | 0) < (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    $677(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[$3_1 >> 2] | 0, HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0;
    HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
    continue label$9;
   };
  }
  $147($4_1 + 24 | 0 | 0, 1830 | 0, $4_1 + 60 | 0 | 0, $4_1 + 32 | 0 | 0, $4_1 + 44 | 0 | 0, $4_1 + 48 | 0 | 0, $4_1 + 52 | 0 | 0);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $146($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $149(HEAP32[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $105(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $147($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0;
  $9_1 = global$0 - 32 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 8 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 4 | 0) >> 2] = $6_1;
  $150(HEAP32[(HEAP32[($9_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 24 | 0) >> 2] | 0 | 0, $105(HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $9_1 + 32 | 0;
  return;
 }
 
 function $148($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = 0;
  HEAP32[($4_1 + 40 | 0) >> 2] = 0;
  $63($4_1 | 0);
  label$1 : {
   if (!(HEAP32[($4_1 + 44 | 0) >> 2] | 0)) {
    break label$1
   }
   $668(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $149($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $151() | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  $152($6_1 + 8 | 0 | 0, $105(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  fimport$4(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, $153($6_1 + 8 | 0 | 0) | 0 | 0);
  global$0 = $6_1 + 48 | 0;
  return;
 }
 
 function $150($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9_1 = global$0 - 80 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 52 | 0) >> 2] = $6_1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $158() | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
  $159($9_1 + 8 | 0 | 0, $105(HEAP32[($9_1 + 68 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[($9_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[($9_1 + 56 | 0) >> 2] | 0 | 0) | 0 | 0, $105(HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  fimport$4(HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0, $160($9_1 + 8 | 0 | 0) | 0 | 0);
  global$0 = $9_1 + 80 | 0;
  return;
 }
 
 function $151() {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!((((HEAPU8[(0 + 43240 | 0) >> 0] | 0) & 1 | 0) & 255 | 0 | 0) == (0 & 255 | 0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!($619(43240 | 0) | 0)) {
    break label$1
   }
   (wasm2js_i32$0 = 0, wasm2js_i32$1 = $154() | 0), HEAP32[(wasm2js_i32$0 + 43236 | 0) >> 2] = wasm2js_i32$1;
   $627(43240 | 0);
  }
  return HEAP32[(0 + 43236 | 0) >> 2] | 0 | 0;
 }
 
 function $152($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $9_1 = 0, $11_1 = 0, $19_1 = 0, $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $96($6_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  $9_1 = $105(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $11_1 = $105(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = $5_1 + 12 | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = $9_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $11_1;
  $113(HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, $112($105(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $19_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
  $21_1 = $105(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = $19_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $21_1;
  $113(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, $112($105(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $99(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 48 | 0;
  return $6_1 | 0;
 }
 
 function $153($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $100(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $154() {
  var $2_1 = 0, $11_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $11_1 = fimport$5($155($2_1 + 8 | 0 | 0) | 0 | 0, $156($2_1 + 8 | 0 | 0) | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $156($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $157() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $157() {
  return 1836 | 0;
 }
 
 function $158() {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!((((HEAPU8[(0 + 43248 | 0) >> 0] | 0) & 1 | 0) & 255 | 0 | 0) == (0 & 255 | 0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!($619(43248 | 0) | 0)) {
    break label$1
   }
   (wasm2js_i32$0 = 0, wasm2js_i32$1 = $161() | 0), HEAP32[(wasm2js_i32$0 + 43244 | 0) >> 2] = wasm2js_i32$1;
   $627(43248 | 0);
  }
  return HEAP32[(0 + 43244 | 0) >> 2] | 0 | 0;
 }
 
 function $159($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0, $16_1 = 0, $18_1 = 0, $20_1 = 0, $28_1 = 0, $30_1 = 0, $32_1 = 0, $34_1 = 0, $36_1 = 0, $41_1 = 0, $43_1 = 0, $45_1 = 0, $47_1 = 0, $52_1 = 0, $54_1 = 0, $56_1 = 0, $61_1 = 0, $63_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 112 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $162($9_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $12_1 = $105(HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $14_1 = $105(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $16_1 = $105(HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  $18_1 = $105(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $20_1 = $105(HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($8_1 + 52 | 0) >> 2] = $8_1 + 4 | 0;
  HEAP32[($8_1 + 48 | 0) >> 2] = $12_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $14_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $16_1;
  HEAP32[($8_1 + 36 | 0) >> 2] = $18_1;
  HEAP32[($8_1 + 32 | 0) >> 2] = $20_1;
  $113(HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0, $112($105(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $28_1 = HEAP32[($8_1 + 52 | 0) >> 2] | 0;
  $30_1 = $105(HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0) | 0;
  $32_1 = $105(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) | 0;
  $34_1 = $105(HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  $36_1 = $105(HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($8_1 + 72 | 0) >> 2] = $28_1;
  HEAP32[($8_1 + 68 | 0) >> 2] = $30_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $32_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $34_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $36_1;
  $113(HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0, $112($105(HEAP32[($8_1 + 68 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $41_1 = HEAP32[($8_1 + 72 | 0) >> 2] | 0;
  $43_1 = $105(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) | 0;
  $45_1 = $105(HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0) | 0;
  $47_1 = $105(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($8_1 + 88 | 0) >> 2] = $41_1;
  HEAP32[($8_1 + 84 | 0) >> 2] = $43_1;
  HEAP32[($8_1 + 80 | 0) >> 2] = $45_1;
  HEAP32[($8_1 + 76 | 0) >> 2] = $47_1;
  $113(HEAP32[($8_1 + 88 | 0) >> 2] | 0 | 0, $112($105(HEAP32[($8_1 + 84 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $52_1 = HEAP32[($8_1 + 88 | 0) >> 2] | 0;
  $54_1 = $105(HEAP32[($8_1 + 80 | 0) >> 2] | 0 | 0) | 0;
  $56_1 = $105(HEAP32[($8_1 + 76 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($8_1 + 100 | 0) >> 2] = $52_1;
  HEAP32[($8_1 + 96 | 0) >> 2] = $54_1;
  HEAP32[($8_1 + 92 | 0) >> 2] = $56_1;
  $113(HEAP32[($8_1 + 100 | 0) >> 2] | 0 | 0, $112($105(HEAP32[($8_1 + 96 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $61_1 = HEAP32[($8_1 + 100 | 0) >> 2] | 0;
  $63_1 = $105(HEAP32[($8_1 + 92 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($8_1 + 108 | 0) >> 2] = $61_1;
  HEAP32[($8_1 + 104 | 0) >> 2] = $63_1;
  $113(HEAP32[($8_1 + 108 | 0) >> 2] | 0 | 0, $112($105(HEAP32[($8_1 + 104 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
  $99(HEAP32[($8_1 + 108 | 0) >> 2] | 0 | 0);
  global$0 = $8_1 + 112 | 0;
  return $9_1 | 0;
 }
 
 function $160($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $163(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $161() {
  var $2_1 = 0, $11_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $11_1 = fimport$5($164($2_1 + 8 | 0 | 0) | 0 | 0, $165($2_1 + 8 | 0 | 0) | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $163($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $164($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 6 | 0;
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $166() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $166() {
  return 1856 | 0;
 }
 
 function $167($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $13_1 = 0, $19_1 = 0, $7_1 = 0, $28_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $7_1 = $171(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $8_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
  $10_1 = HEAP32[$8_1 >> 2] | 0;
  $13_1 = $7_1 + ($9_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($9_1 & 1 | 0)) {
     break label$2
    }
    $19_1 = HEAP32[((HEAP32[$13_1 >> 2] | 0) + $10_1 | 0) >> 2] | 0;
    break label$1;
   }
   $19_1 = $10_1;
  }
  $124($5_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = FUNCTION_TABLE[$19_1 | 0]($13_1, $5_1) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  $28_1 = $97($5_1 + 16 | 0 | 0) | 0;
  $599($5_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $28_1 | 0;
 }
 
 function $168($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $172() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $170($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $616(8 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $8_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $171($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $172() {
  return 1880 | 0;
 }
 
 function $173() {
  $1();
  $18();
  return;
 }
 
 function $174() {
  var $0_1 = 0;
  label$1 : {
   $0_1 = $346(72 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $175($0_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $175($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  wasm2js_memory_fill($0_1, 0, 72);
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -2147483648;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -2147483648;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $177($1_1 | 0);
   $343($0_1 | 0);
  }
 }
 
 function $177($0_1) {
  $0_1 = $0_1 | 0;
  $178($0_1 | 0);
  $256($0_1 | 0);
  $175($0_1 | 0);
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1 + 40 | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) >= (HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $343((HEAP32[$1_1 >> 2] | 0) + Math_imul($2_1, 12) | 0 | 0);
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  $343($1_1 | 0);
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
 }
 
 function $179($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = -28;
  label$1 : {
   if ($1_1 >>> 0 > 2147483582 >>> 0) {
    break label$1
   }
   $2_1 = $259($0_1 | 0, $1_1 + 64 | 0 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   wasm2js_memory_fill((HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0) + $1_1 | 0, 0, 64);
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $180($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      if (($4_1 | 0) == ($6_1 | 0)) {
       break label$3
      }
      label$5 : {
       $7_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       if ((HEAP32[(($7_1 + Math_imul($4_1, 12) | 0) + 8 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$5
       }
       $4_1 = $7_1 + Math_imul($4_1, 12) | 0;
       $342(HEAP32[$4_1 >> 2] | 0 | 0);
       HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
       HEAP32[$4_1 >> 2] = $2_1;
       break label$2;
      }
      $4_1 = $4_1 + 1 | 0;
      continue label$4;
     };
    }
    $4_1 = -68;
    $6_1 = $5_1 + 1 | 0;
    if ($6_1 >>> 0 > 31 >>> 0) {
     break label$1
    }
    label$6 : {
     $4_1 = $339(HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, Math_imul($6_1, 12) | 0) | 0;
     if ($4_1) {
      break label$6
     }
     return -48 | 0;
    }
    HEAP32[($0_1 + 40 | 0) >> 2] = $4_1;
    $4_1 = $4_1 + Math_imul($5_1, 12) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[$4_1 >> 2] = $2_1;
    HEAP32[($0_1 + 44 | 0) >> 2] = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + 1 | 0;
   }
   $4_1 = 0;
  }
  return $4_1 | 0;
 }
 
 function $181($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2147483583 >>> 0) {
     break label$2
    }
    $4_1 = $346($2_1 + 64 | 0 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
    if (!$4_1) {
     break label$2
    }
    if (($180($0_1 | 0, $1_1 | 0, $4_1 | 0, $2_1 | 0) | 0 | 0) > (-1 | 0)) {
     break label$1
    }
    $343($3_1 + 12 | 0 | 0);
   }
   $4_1 = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $182($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = 0;
  $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $4_1 = ($4_1 | 0) > (0 | 0) ? $4_1 : 0;
  label$1 : {
   label$2 : while (1) {
    if (($3_1 | 0) == ($4_1 | 0)) {
     break label$1
    }
    label$3 : {
     $5_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     if ((HEAP32[(($5_1 + Math_imul($3_1, 12) | 0) + 8 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if (!$2_1) {
       break label$4
      }
      HEAP32[$2_1 >> 2] = HEAP32[(($5_1 + Math_imul($3_1, 12) | 0) + 4 | 0) >> 2] | 0;
     }
     return HEAP32[($5_1 + Math_imul($3_1, 12) | 0) >> 2] | 0 | 0;
    }
    $3_1 = $3_1 + 1 | 0;
    continue label$2;
   };
  }
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   HEAP32[$2_1 >> 2] = 0;
  }
  return 0 | 0;
 }
 
 function $183($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   if (!$0_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    $4_1 = $0_1 + $1_1 | 0;
    if (HEAPU8[($4_1 + -1 | 0) >> 0] | 0) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      if ($0_1 >>> 0 < $4_1 >>> 0) {
       break label$4
      }
      return 0 | 0;
     }
     $1_1 = ($0_1 + ($685($0_1 | 0) | 0) | 0) + 1 | 0;
     if ($1_1 >>> 0 >= $4_1 >>> 0) {
      break label$2
     }
     if (!(HEAPU8[$0_1 >> 0] | 0)) {
      break label$2
     }
     $3_1 = $271($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0) | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$1
     }
     $0_1 = ($1_1 + ($685($1_1 | 0) | 0) | 0) + 1 | 0;
     continue label$3;
    };
   }
   $3_1 = -1094995529;
  }
  return $3_1 | 0;
 }
 
 function $184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $9_1 = 0, $12_1 = 0, $15_1 = 0, $18_1 = 0, $21_1 = 0, $5_1 = 0, $43_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $9_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $15_1;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $18_1;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $21_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $2_1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $2_1;
  $3_1 = 0;
  $2_1 = 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($2_1 | 0) >= (HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     $4_1 = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + Math_imul($2_1, 12) | 0;
     $5_1 = HEAP32[$4_1 >> 2] | 0;
     $43_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     $6_1 = $181($0_1 | 0, $43_1 | 0, $4_1 | 0) | 0;
     if ($6_1) {
      break label$2
     }
     $178($0_1 | 0);
     $3_1 = -48;
    }
    return $3_1 | 0;
   }
   wasm2js_memory_copy($6_1, $5_1, $4_1);
   $2_1 = $2_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = $184($0_1 | 0, $1_1 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      if ($2_1) {
       break label$4
      }
      $2_1 = $179($0_1 | 0, HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) | 0;
      if (($2_1 | 0) < (0 | 0)) {
       break label$3
      }
      label$5 : {
       $2_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$5
       }
       wasm2js_memory_copy(HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($1_1 + 24 | 0) >> 2] | 0, $2_1);
      }
      $2_1 = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
      break label$1;
     }
     $2_1 = $255($2_1 | 0) | 0;
     HEAP32[$0_1 >> 2] = $2_1;
     if ($2_1) {
      break label$2
     }
     $2_1 = -48;
    }
    $177($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = $1_1 + 24 | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
  return 0 | 0;
 }
 
 function $186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  wasm2js_memory_copy($0_1, $1_1, 72);
  $175($1_1 | 0);
 }
 
 function $187($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break label$1
   }
   $1_1 = $179($0_1 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    wasm2js_memory_copy(HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0, $1_1);
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $343($0_1 + 12 | 0 | 0);
  wasm2js_memory_fill($0_1 + 8 | 0, 0, 128);
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 2;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 2;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 2;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = -1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -99;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = -99;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $189($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $188($1_1 | 0);
   $343($0_1 | 0);
  }
 }
 
 function $190($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    $3_1 = $1_1 + 8 | 0;
    label$3 : {
     $4_1 = HEAP32[((HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$3
     }
     FUNCTION_TABLE[$4_1 | 0]($1_1);
     $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    $176($2_1 | 0);
    $343($3_1 | 0);
   }
   label$4 : {
    if (!(HEAP32[((HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$4
    }
    $351($2_1 | 0);
   }
   $343($1_1 + 12 | 0 | 0);
   $189($1_1 + 16 | 0 | 0);
   $189($1_1 + 20 | 0 | 0);
   $343($0_1 | 0);
  }
 }
 
 function $191($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      if (HEAP32[($1_1 + 24 | 0) >> 2] | 0) {
       break label$3
      }
      if (HEAP32[($1_1 + 44 | 0) >> 2] | 0) {
       break label$3
      }
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = 1;
     break label$2;
    }
    label$5 : {
     if (!(HEAP32[($2_1 + 4 | 0) >> 2] | 0)) {
      break label$5
     }
     $332($0_1 | 0, 16 | 0, global$1 + 1892 | 0 | 0, 0 | 0);
     return -28 | 0;
    }
    $0_1 = -6;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (HEAP32[($3_1 + 24 | 0) >> 2] | 0) {
     break label$1
    }
    if (HEAP32[($3_1 + 44 | 0) >> 2] | 0) {
     break label$1
    }
    $0_1 = $187($1_1 | 0) | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$1
    }
    $186(HEAP32[$2_1 >> 2] | 0 | 0, $1_1 | 0);
   }
   $0_1 = 0;
  }
  return $0_1 | 0;
 }
 
 function $192($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (!($193($0_1 | 0) | 0)) {
     break label$2
    }
    label$3 : {
     $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if (!(HEAP32[($1_1 + 44 | 0) >> 2] | 0)) {
      break label$3
     }
     if ((HEAP32[($0_1 + 688 | 0) >> 2] | 0 | 0) < (2 | 0)) {
      break label$3
     }
     $222($0_1 | 0);
     $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    label$4 : {
     if (!(HEAP32[($1_1 + 16 | 0) >> 2] | 0)) {
      break label$4
     }
     $225($0_1 | 0);
    }
    $1_1 = $0_1 + 28 | 0;
    label$5 : {
     $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$5
     }
     $2_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$5
     }
     FUNCTION_TABLE[$2_1 | 0]($0_1) | 0;
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($2_1 + 40 | 0) >> 2] = 0;
    $343($2_1 + 36 | 0 | 0);
    $291((HEAP32[$1_1 >> 2] | 0) + 8 | 0 | 0);
    $291((HEAP32[$1_1 >> 2] | 0) + 88 | 0 | 0);
    $176((HEAP32[$1_1 >> 2] | 0) + 92 | 0 | 0);
    $291((HEAP32[$1_1 >> 2] | 0) + 68 | 0 | 0);
    $176((HEAP32[$1_1 >> 2] | 0) + 64 | 0 | 0);
    label$6 : {
     label$7 : while (1) {
      $177(HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0);
      $3_1 = $279(HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) | 0;
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      if ($3_1 >>> 0 < 72 >>> 0) {
       break label$6
      }
      $282(HEAP32[($2_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0, 72 | 0, 0 | 0) | 0;
      continue label$7;
     };
    }
    $176($2_1 + 28 | 0 | 0);
    $278((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 32 | 0 | 0);
    $176((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 20 | 0 | 0);
    $291((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 48 | 0 | 0);
    $256((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 12 | 0 | 0);
    label$8 : {
     $2_1 = HEAP32[($0_1 + 592 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$8
     }
     $2_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$8
     }
     FUNCTION_TABLE[$2_1 | 0]($0_1) | 0;
    }
    $343((HEAP32[$1_1 >> 2] | 0) + 56 | 0 | 0);
    $190((HEAP32[$1_1 >> 2] | 0) + 24 | 0 | 0);
    $343($1_1 | 0);
   }
   $2_1 = $0_1 + 852 | 0;
   $1_1 = 0;
   label$9 : {
    label$10 : while (1) {
     if (($1_1 | 0) >= (HEAP32[($0_1 + 856 | 0) >> 2] | 0 | 0)) {
      break label$9
     }
     $343((HEAP32[$2_1 >> 2] | 0) + Math_imul($1_1, 12) | 0 | 0);
     $1_1 = $1_1 + 1 | 0;
     continue label$10;
    };
   }
   $343($2_1 | 0);
   HEAP32[($0_1 + 856 | 0) >> 2] = 0;
   $256($0_1 + 860 | 0 | 0);
   $256($0_1 + 880 | 0 | 0);
   $1_1 = $0_1 + 24 | 0;
   label$11 : {
    $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$11
    }
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$11
    }
    if (!(HEAP32[($3_1 + 44 | 0) >> 2] | 0)) {
     break label$11
    }
    $351($2_1 | 0);
   }
   $351($0_1 | 0);
   $343($1_1 | 0);
   label$12 : {
    if (!($237(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) | 0)) {
     break label$12
    }
    $343($0_1 + 68 | 0 | 0);
    $291($0_1 + 684 | 0 | 0);
   }
   HEAP32[($0_1 + 696 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  }
  return 0 | 0;
 }
 
 function $195($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = -541478725;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if (HEAP32[($3_1 + 60 | 0) >> 2] | 0) {
     break label$2
    }
    label$3 : {
     $2_1 = $192(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
     if (($2_1 | 0) != (-541478725 | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 60 | 0) >> 2] = 1;
     return -541478725 | 0;
    }
    if (($2_1 | 0) < (0 | 0)) {
     break label$2
    }
    label$4 : {
     $2_1 = $196(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$4
     }
     $2_1 = $197($0_1 | 0, $1_1 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$4
     }
     if (!(HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 100 | 0) >> 2] | 0)) {
      break label$1
     }
     HEAP32[($3_1 + 80 | 0) >> 2] = (HEAP32[($3_1 + 80 | 0) >> 2] | 0) + (HEAP32[($1_1 + 28 | 0) >> 2] | 0) | 0;
     break label$1;
    }
    $177($1_1 | 0);
   }
   return $2_1 | 0;
  }
  return 0 | 0;
 }
 
 function $196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  wasm2js_memory_fill($2_1 + 8 | 0, 0, 72);
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) {
      break label$3
     }
     if (($279(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0) >>> 0 < 72 >>> 0) {
      break label$2
     }
     $282(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, 72 | 0, 0 | 0) | 0;
    }
    label$4 : {
     if (($280(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0) >>> 0 > 71 >>> 0) {
      break label$4
     }
     $3_1 = $284(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, 72 | 0) | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$1
     }
    }
    $3_1 = $198($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
    if (($3_1 | 0) < (0 | 0)) {
     break label$1
    }
    $285(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $2_1 + 8 | 0 | 0, 72 | 0, 0 | 0) | 0;
    $3_1 = 0;
    break label$1;
   }
   $3_1 = $198(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  }
  global$0 = $2_1 + 80 | 0;
  return $3_1 | 0;
 }
 
 function $197($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $7_1 = 0, $6_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   $1_1 = $182($1_1 | 0, 2 | 0, $2_1 + 12 | 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ((HEAPU8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 17 | 0) >> 0] | 0) & 64 | 0) {
      break label$3
     }
     $332($0_1 | 0, 16 | 0, global$1 + 2854 | 0 | 0, 0 | 0);
     $1_1 = -28;
     break label$2;
    }
    label$4 : {
     label$5 : {
      $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($4_1 | 0) < (4 | 0)) {
       break label$5
      }
      $5_1 = HEAPU8[$1_1 >> 0] | 0 | ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $6_1 = $4_1 + -4 | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
      $7_1 = $1_1 + 4 | 0;
      label$6 : {
       if (!($5_1 & 1 | 0)) {
        break label$6
       }
       if (($4_1 | 0) < (8 | 0)) {
        break label$5
       }
       label$7 : {
        $6_1 = HEAPU8[$7_1 >> 0] | 0 | ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        if (($6_1 | 0) > (0 | 0)) {
         break label$7
        }
        $332($0_1 | 0, 16 | 0, global$1 + 2947 | 0 | 0, 0 | 0);
        break label$4;
       }
       HEAP32[($0_1 + 348 | 0) >> 2] = $6_1;
       $6_1 = $4_1 + -8 | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       $7_1 = $1_1 + 8 | 0;
      }
      label$8 : {
       if (!($5_1 & 2 | 0)) {
        break label$8
       }
       if (($6_1 | 0) < (8 | 0)) {
        break label$5
       }
       i64toi32_i32$1 = HEAPU8[($7_1 + 4 | 0) >> 0] | 0 | ((HEAPU8[($7_1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7_1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7_1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($0_1 + 376 | 0) >> 2] = HEAPU8[$7_1 >> 0] | 0 | ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($0_1 + 380 | 0) >> 2] = i64toi32_i32$1;
       $6_1 = $6_1 + -8 | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       $7_1 = $7_1 + 8 | 0;
      }
      label$9 : {
       if (!($5_1 & 4 | 0)) {
        break label$9
       }
       if (($6_1 | 0) < (4 | 0)) {
        break label$5
       }
       label$10 : {
        $1_1 = HEAPU8[$7_1 >> 0] | 0 | ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        if (($1_1 | 0) > (0 | 0)) {
         break label$10
        }
        $332($0_1 | 0, 16 | 0, global$1 + 2969 | 0 | 0, 0 | 0);
        break label$4;
       }
       HEAP32[($0_1 + 344 | 0) >> 2] = $1_1;
       $6_1 = $6_1 + -4 | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       $7_1 = $7_1 + 4 | 0;
      }
      if (!($5_1 & 8 | 0)) {
       break label$1
      }
      if (($6_1 | 0) < (8 | 0)) {
       break label$5
      }
      $1_1 = HEAPU8[$7_1 >> 0] | 0 | ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      HEAP32[($0_1 + 92 | 0) >> 2] = $1_1;
      $4_1 = HEAPU8[($7_1 + 4 | 0) >> 0] | 0 | ((HEAPU8[($7_1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7_1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7_1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      HEAP32[($0_1 + 96 | 0) >> 2] = $4_1;
      HEAP32[($2_1 + 12 | 0) >> 2] = $6_1 + -8 | 0;
      $1_1 = $239($0_1 | 0, $1_1 | 0, $4_1 | 0) | 0;
      if (($1_1 | 0) <= (-1 | 0)) {
       break label$2
      }
      break label$1;
     }
     $332($0_1 | 0, 16 | 0, global$1 + 2989 | 0 | 0, 0 | 0);
    }
    $1_1 = -1094995529;
   }
   $332($0_1 | 0, 16 | 0, global$1 + 3024 | 0 | 0, 0 | 0);
   $3_1 = (((HEAP32[($0_1 + 580 | 0) >> 2] | 0) << 28 | 0) >> 31 | 0) & $1_1 | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $198($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = $184($0_1 | 0, $1_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   HEAP32[($0_1 + 24 | 0) >> 2] = 1;
   HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $3_1 = -28;
  label$1 : {
   if (!($193($0_1 | 0) | 0)) {
    break label$1
   }
   if (!($238(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $3_1 = -541478725;
   if (HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) {
    break label$1
   }
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    if (HEAP32[($1_1 + 28 | 0) >> 2] | 0) {
     break label$2
    }
    $3_1 = -28;
    if (HEAP32[($1_1 + 24 | 0) >> 2] | 0) {
     break label$1
    }
   }
   $177(HEAP32[($2_1 + 64 | 0) >> 2] | 0 | 0);
   label$3 : {
    if (!$1_1) {
     break label$3
    }
    label$4 : {
     if (HEAP32[($1_1 + 24 | 0) >> 2] | 0) {
      break label$4
     }
     if (!(HEAP32[($1_1 + 44 | 0) >> 2] | 0)) {
      break label$3
     }
    }
    $3_1 = $185(HEAP32[($2_1 + 64 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
    if (($3_1 | 0) < (0 | 0)) {
     break label$1
    }
   }
   label$5 : {
    $3_1 = $191(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 64 | 0) >> 2] | 0 | 0) | 0;
    if (($3_1 | 0) > (-1 | 0)) {
     break label$5
    }
    $177(HEAP32[($2_1 + 64 | 0) >> 2] | 0 | 0);
    return $3_1 | 0;
   }
   label$6 : {
    $3_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
    if (HEAP32[($3_1 + 248 | 0) >> 2] | 0) {
     break label$6
    }
    $3_1 = $200($0_1 | 0, $3_1 | 0) | 0;
    if (($3_1 | 0) > (-1 | 0)) {
     break label$6
    }
    if (($3_1 | 0) == (-6 | 0)) {
     break label$6
    }
    if (($3_1 | 0) != (-541478725 | 0)) {
     break label$1
    }
   }
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $200($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $3_1 = 0, $38_1 = 0, $38$hi = 0, $40_1 = 0, $40$hi = 0, $41_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (HEAP32[($1_1 + 248 | 0) >> 2] | 0) {
        break label$5
       }
       $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       label$6 : {
        label$7 : {
         $4_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 100 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$7
         }
         $5_1 = -6;
         $4_1 = FUNCTION_TABLE[$4_1 | 0]($0_1, $1_1) | 0;
         if (($4_1 | 0) == (-6 | 0)) {
          break label$2
         }
         $177(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0);
         $5_1 = $4_1;
         break label$6;
        }
        $5_1 = $201($0_1 | 0, $1_1 | 0) | 0;
       }
       label$8 : {
        if (!$5_1) {
         break label$8
        }
        if (($5_1 | 0) != (-541478725 | 0)) {
         break label$2
        }
        HEAP32[($3_1 + 72 | 0) >> 2] = 1;
        $5_1 = -541478725;
        break label$2;
       }
       i64toi32_i32$0 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
       $38_1 = i64toi32_i32$0;
       $38$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[($1_1 + 120 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($1_1 + 124 | 0) >> 2] | 0;
       $40_1 = i64toi32_i32$1;
       $40$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $38$hi;
       i64toi32_i32$1 = $40$hi;
       i64toi32_i32$1 = $202($0_1 | 0, $38_1 | 0, i64toi32_i32$0 | 0, $40_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $41_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $1_1;
       HEAP32[($1_1 + 320 | 0) >> 2] = $41_1;
       HEAP32[($1_1 + 324 | 0) >> 2] = i64toi32_i32$0;
       label$9 : {
        label$10 : {
         $5_1 = HEAP32[($1_1 + 400 | 0) >> 2] | 0;
         if (!$5_1) {
          break label$10
         }
         if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) == (20 | 0)) {
          break label$9
         }
        }
        if ((HEAPU8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 2 | 0) {
         break label$4
        }
        if (!$5_1) {
         break label$3
        }
       }
       $5_1 = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
       if (!$5_1) {
        break label$3
       }
       $5_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, $1_1) | 0;
       if (($5_1 | 0) > (-1 | 0)) {
        break label$2
       }
       $292($1_1 | 0);
       break label$1;
      }
      HEAP32[($2_1 + 24 | 0) >> 2] = 539;
      $1_1 = global$1;
      HEAP32[($2_1 + 20 | 0) >> 2] = $1_1 + 2019 | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 + 3059 | 0;
      $332(0 | 0, 0 | 0, $1_1 + 1982 | 0 | 0, $2_1 + 16 | 0 | 0);
      fimport$7();
      abort();
     }
     HEAP32[($2_1 + 8 | 0) >> 2] = 559;
     $1_1 = global$1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 + 2019 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 3074 | 0;
     $332(0 | 0, 0 | 0, $1_1 + 1982 | 0 | 0, $2_1 | 0);
     fimport$7();
     abort();
    }
    $5_1 = 0;
   }
   $256($1_1 + 400 | 0 | 0);
  }
  global$0 = $2_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $13_1 = 0, $15_1 = 0, $16_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0, i64toi32_i32$3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (!(HEAP32[($1_1 + 248 | 0) >> 2] | 0)) {
      break label$3
     }
     $3_1 = 0;
     break label$1;
    }
    label$4 : {
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 904 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 908 | 0) >> 2] | 0;
     $14_1 = i64toi32_i32$1;
     $14$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$3 = $14_1;
     if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
      $13_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
        $15_1 = 0
       } else {
        $15_1 = 1
       }
       $16_1 = $15_1;
      } else {
       $16_1 = 0
      }
      $13_1 = $16_1;
     }
     if ($13_1) {
      break label$4
     }
     $3_1 = -6;
     break label$1;
    }
    $3_1 = $220($0_1 | 0, $1_1 | 0, $2_1 + 8 | 0 | 0) | 0;
    if (($3_1 | 0) > (-1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $202($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $3_1 = 0, $4_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $42_1 = 0, $44_1 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $15_1 = 0, $17_1 = 0, $17$hi = 0, $21$hi = 0, $29_1 = 0, $31_1 = 0, $31$hi = 0, $35$hi = 0, $39_1 = 0, $39$hi = 0, $40_1 = 0, $40$hi = 0, $41_1 = 0, $41$hi = 0, $43_1 = 0, $43$hi = 0, $45_1 = 0, $45$hi = 0, $47_1 = 0, $47$hi = 0, $50$hi = 0, $50_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = -2147483648;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
       break label$4
      }
      $3_1 = 0;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$0 = -2147483648;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
       break label$1
      }
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$2 = $0_1;
      HEAP32[(i64toi32_i32$2 + 808 | 0) >> 2] = $1_1;
      HEAP32[(i64toi32_i32$2 + 812 | 0) >> 2] = i64toi32_i32$3;
      break label$3;
     }
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 808 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 812 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     HEAP32[(i64toi32_i32$1 + 808 | 0) >> 2] = $2_1;
     HEAP32[(i64toi32_i32$1 + 812 | 0) >> 2] = i64toi32_i32$2;
     $15_1 = i64toi32_i32$1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 792 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 796 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$2;
     $17$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
      $35_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        $36_1 = 0
       } else {
        $36_1 = 1
       }
       $37_1 = $36_1;
      } else {
       $37_1 = 0
      }
      $35_1 = $37_1;
     }
     i64toi32_i32$1 = 0;
     $21$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$2 = $35_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$0 = $15_1;
     HEAP32[(i64toi32_i32$0 + 792 | 0) >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$0 + 796 | 0) >> 2] = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$2
     }
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 800 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 804 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$2 + 800 | 0) >> 2] = $1_1;
    HEAP32[(i64toi32_i32$2 + 804 | 0) >> 2] = i64toi32_i32$5;
    $29_1 = i64toi32_i32$2;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 784 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 788 | 0) >> 2] | 0;
    $31_1 = i64toi32_i32$5;
    $31$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$0 = $1_1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$5 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       $42_1 = 0
      } else {
       $42_1 = 1
      }
      $44_1 = $42_1;
     } else {
      $44_1 = 0
     }
     $38_1 = $44_1;
    }
    i64toi32_i32$2 = 0;
    $35$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $31$hi;
    i64toi32_i32$0 = $31_1;
    i64toi32_i32$1 = $35$hi;
    i64toi32_i32$5 = $38_1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    i64toi32_i32$0 = $29_1;
    HEAP32[(i64toi32_i32$0 + 784 | 0) >> 2] = i64toi32_i32$3;
    HEAP32[(i64toi32_i32$0 + 788 | 0) >> 2] = i64toi32_i32$4;
    $3_1 = 1;
    break label$1;
   }
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$0 = $0_1;
   HEAP32[(i64toi32_i32$0 + 800 | 0) >> 2] = $2_1;
   HEAP32[(i64toi32_i32$0 + 804 | 0) >> 2] = i64toi32_i32$4;
   $3_1 = 0;
  }
  i64toi32_i32$4 = $1$hi;
  $39_1 = $1_1;
  $39$hi = i64toi32_i32$4;
  $40_1 = $1_1;
  $40$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $2$hi;
  $41_1 = $2_1;
  $41$hi = i64toi32_i32$4;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 784 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 788 | 0) >> 2] | 0;
  $43_1 = i64toi32_i32$4;
  $43$hi = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 792 | 0) >> 2] | 0;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 796 | 0) >> 2] | 0;
  $45_1 = i64toi32_i32$0;
  $45$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $43$hi;
  i64toi32_i32$2 = $43_1;
  i64toi32_i32$0 = $45$hi;
  i64toi32_i32$5 = $45_1;
  if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
   $46_1 = 1
  } else {
   if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
     $48_1 = 0
    } else {
     $48_1 = 1
    }
    $49_1 = $48_1;
   } else {
    $49_1 = 0
   }
   $46_1 = $49_1;
  }
  i64toi32_i32$1 = $46_1;
  i64toi32_i32$2 = $40$hi;
  i64toi32_i32$4 = $41$hi;
  i64toi32_i32$0 = i64toi32_i32$1 ? $40_1 : $41_1;
  i64toi32_i32$5 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$4;
  $47_1 = i64toi32_i32$0;
  $47$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $47$hi;
  i64toi32_i32$0 = i64toi32_i32$4 ? $39_1 : $47_1;
  i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$5;
  $50$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = $50$hi;
  $50_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ? $50_1 : $2_1;
  i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
  return i64toi32_i32$1 | 0;
 }
 
 function $203($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $77_1 = 0, $116_1 = 0, $116$hi = 0, $118_1 = 0, $118$hi = 0, $136_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $292($1_1 | 0);
  $4_1 = -28;
  label$1 : {
   if (!($193($0_1 | 0) | 0)) {
    break label$1
   }
   if (!($238(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $4_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
     if (!(HEAP32[($4_1 + 248 | 0) >> 2] | 0)) {
      break label$3
     }
     $302($1_1 | 0, $4_1 | 0);
     break label$2;
    }
    $4_1 = $200($0_1 | 0, $1_1 | 0) | 0;
    if (($4_1 | 0) < (0 | 0)) {
     break label$1
    }
   }
   label$4 : {
    if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
     break label$4
    }
    $4_1 = $204($0_1 | 0, $1_1 | 0) | 0;
    if (($4_1 | 0) > (-1 | 0)) {
     break label$4
    }
    $292($1_1 | 0);
    break label$1;
   }
   $5_1 = HEAP32[($0_1 + 360 | 0) >> 2] | 0;
   $6_1 = $5_1 + 1 | 0;
   HEAP32[($0_1 + 360 | 0) >> 2] = $6_1;
   $4_1 = 0;
   if (!((HEAPU8[($0_1 + 60 | 0) >> 0] | 0) & 32 | 0)) {
    break label$1
   }
   label$5 : {
    if ($5_1) {
     break label$5
    }
    HEAP32[($3_1 + 112 | 0) >> 2] = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
    label$6 : {
     switch (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) {
     case 0:
      HEAP32[($3_1 + 116 | 0) >> 2] = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
      HEAP32[($3_1 + 120 | 0) >> 2] = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
      break label$1;
     case 1:
      break label$6;
     default:
      break label$1;
     };
    }
    label$8 : {
     $5_1 = HEAP32[($1_1 + 232 | 0) >> 2] | 0;
     if ($5_1) {
      break label$8
     }
     $5_1 = HEAP32[($0_1 + 344 | 0) >> 2] | 0;
    }
    HEAP32[($3_1 + 124 | 0) >> 2] = $5_1;
    HEAP32[($3_1 + 128 | 0) >> 2] = HEAP32[($1_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[($1_1 + 240 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 244 | 0) >> 2] | 0;
    $77_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[($3_1 + 136 | 0) >> 2] = $77_1;
    HEAP32[($3_1 + 140 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   if (($5_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = (HEAP32[($3_1 + 112 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0);
   label$9 : {
    label$10 : {
     switch (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) {
     case 0:
      $7_1 = 1;
      label$12 : {
       if ((HEAP32[($3_1 + 116 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0)) {
        break label$12
       }
       $7_1 = (HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0);
      }
      $5_1 = $7_1 | $5_1 | 0;
      break label$9;
     case 1:
      break label$10;
     default:
      break label$9;
     };
    }
    $7_1 = 1;
    label$13 : {
     $8_1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
     if (($8_1 | 0) != (HEAP32[($1_1 + 232 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     if (($8_1 | 0) != (HEAP32[($0_1 + 344 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     if ((HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 352 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
     $116_1 = i64toi32_i32$1;
     $116$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[($1_1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 244 | 0) >> 2] | 0;
     $118_1 = i64toi32_i32$0;
     $118$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $116$hi;
     i64toi32_i32$2 = $116_1;
     i64toi32_i32$0 = $118$hi;
     $7_1 = (i64toi32_i32$2 | 0) != ($118_1 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0;
    }
    $5_1 = $7_1 | $5_1 | 0;
   }
   if (!$5_1) {
    break label$1
   }
   $4_1 = (HEAP32[($3_1 + 108 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($3_1 + 108 | 0) >> 2] = $4_1;
   i64toi32_i32$2 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
   $136_1 = i64toi32_i32$2;
   i64toi32_i32$2 = $2_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $136_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$2_1 >> 2] = $6_1;
   $332($0_1 | 0, 32 | 0, global$1 + 1930 | 0 | 0, $2_1 | 0);
   $292($1_1 | 0);
   $4_1 = -1668179713;
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $204($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $41_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($1_1 + 388 | 0) >> 2] | 0;
  $4_1 = HEAP32[($1_1 + 384 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $5_1 = HEAP32[($1_1 + 392 | 0) >> 2] | 0;
       $6_1 = HEAP32[($1_1 + 396 | 0) >> 2] | 0;
       if ($5_1 >>> 0 >= (2147483647 - $6_1 | 0) >>> 0) {
        break label$5
       }
       if ($4_1 >>> 0 >= (2147483647 - $3_1 | 0) >>> 0) {
        break label$5
       }
       if (($6_1 + $5_1 | 0) >>> 0 >= (HEAP32[($1_1 + 68 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       if (($3_1 + $4_1 | 0) >>> 0 < (HEAP32[($1_1 + 72 | 0) >> 2] | 0) >>> 0) {
        break label$4
       }
      }
      i64toi32_i32$0 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
      $41_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $2_1 + 16 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $41_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[$2_1 >> 2] = $5_1;
      $332($0_1 | 0, 24 | 0, global$1 + 3539 | 0 | 0, $2_1 | 0);
      i64toi32_i32$0 = $1_1 + 392 | 0;
      i64toi32_i32$1 = 0;
      HEAP32[i64toi32_i32$0 >> 2] = 0;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$1 = 0;
      HEAP32[($1_1 + 384 | 0) >> 2] = 0;
      HEAP32[($1_1 + 388 | 0) >> 2] = i64toi32_i32$1;
      break label$3;
     }
     if (HEAP32[($0_1 + 888 | 0) >> 2] | 0) {
      break label$2
     }
    }
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $303($1_1 | 0, (HEAP32[($0_1 + 60 | 0) >> 2] | 0) & 1 | 0 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[($0_1 + 880 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$4
      }
      $3_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 116 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$4
      }
      $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      $5_1 = 0;
      label$5 : while (1) {
       $6_1 = HEAP32[($3_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
       if (!$6_1) {
        break label$4
       }
       label$6 : {
        if (!((HEAPU8[($6_1 + 4 | 0) >> 0] | 0) & 1 | 0)) {
         break label$6
        }
        if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$6
        }
        $7_1 = 0;
        label$7 : while (1) {
         $2_1 = HEAP32[($1_1 + ($7_1 << 2 | 0) | 0) >> 2] | 0;
         if (($2_1 | 0) == (-1 | 0)) {
          break label$6
         }
         $7_1 = $7_1 + 1 | 0;
         if ((HEAP32[$6_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
          continue label$7
         }
         break label$3;
        };
       }
       $5_1 = $5_1 + 1 | 0;
       continue label$5;
      };
     }
     $2_1 = 0;
     label$8 : while (1) {
      $7_1 = $2_1;
      $2_1 = $2_1 + 1 | 0;
      if ((HEAP32[($1_1 + ($7_1 << 2 | 0) | 0) >> 2] | 0 | 0) != (-1 | 0)) {
       continue label$8
      }
      break label$8;
     };
     $2_1 = (($7_1 << 2 | 0) + $1_1 | 0) + -4 | 0;
     if (!((HEAPU8[(($353(HEAP32[$2_1 >> 2] | 0 | 0) | 0) + 8 | 0) >> 0] | 0) & 8 | 0)) {
      break label$2
     }
     $3_1 = 0;
     label$9 : while (1) {
      $2_1 = -1;
      $7_1 = 0;
      $5_1 = $1_1 + ($3_1 << 2 | 0) | 0;
      if ((HEAP32[$5_1 >> 2] | 0 | 0) == (-1 | 0)) {
       break label$3
      }
      label$10 : while (1) {
       $6_1 = $241(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $7_1 | 0) | 0;
       if (!$6_1) {
        break label$1
       }
       $7_1 = $7_1 + 1 | 0;
       $2_1 = HEAP32[$6_1 >> 2] | 0;
       if (($2_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
        continue label$10
       }
       break label$10;
      };
      $3_1 = $3_1 + 1 | 0;
      if (!((HEAPU8[($6_1 + 4 | 0) >> 0] | 0) & 4 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    return $2_1 | 0;
   }
   return HEAP32[$2_1 >> 2] | 0 | 0;
  }
  return HEAP32[$5_1 >> 2] | 0 | 0;
 }
 
 function $206($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = 0, $3_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 128 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : while (1) {
   $4_1 = $3_1;
   $3_1 = $4_1 + 1 | 0;
   if ((HEAP32[($1_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (!$4_1) {
       break label$5
      }
      label$6 : {
       $5_1 = (($4_1 << 2 | 0) + $1_1 | 0) + -4 | 0;
       if ((HEAPU8[(($353(HEAP32[$5_1 >> 2] | 0 | 0) | 0) + 8 | 0) >> 0] | 0) & 8 | 0) {
        break label$6
       }
       HEAP32[($0_1 + 768 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
      }
      $6_1 = $344($3_1 | 0, 4 | 0) | 0;
      HEAP32[($2_1 + 124 | 0) >> 2] = $6_1;
      label$7 : {
       if ($6_1) {
        break label$7
       }
       $7_1 = -1;
       break label$2;
      }
      wasm2js_memory_copy($6_1, $1_1, $3_1 << 2 | 0);
      $7_1 = -1;
      label$8 : while (1) {
       $207($0_1 | 0);
       $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 120 | 0) >> 2] | 0 | 0]($0_1, $6_1) | 0;
       if (($5_1 | 0) == (-1 | 0)) {
        break label$3
       }
       label$9 : {
        $8_1 = $353($5_1 | 0) | 0;
        if ($8_1) {
         break label$9
        }
        $332($0_1 | 0, 16 | 0, global$1 + 2039 | 0 | 0, 0 | 0);
        break label$3;
       }
       $3_1 = ($4_1 | 0) > (0 | 0) ? $4_1 : 0;
       HEAP32[($2_1 + 112 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
       $332($0_1 | 0, 48 | 0, global$1 + 2090 | 0 | 0, $2_1 + 112 | 0 | 0);
       $1_1 = 0;
       label$10 : {
        label$11 : while (1) {
         label$12 : {
          if (($1_1 | 0) != ($3_1 | 0)) {
           break label$12
          }
          $1_1 = $3_1;
          break label$10;
         }
         if ((HEAP32[($6_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
          break label$10
         }
         $1_1 = $1_1 + 1 | 0;
         continue label$11;
        };
       }
       label$13 : {
        if (($1_1 | 0) != ($4_1 | 0)) {
         break label$13
        }
        HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
        $332($0_1 | 0, 16 | 0, global$1 + 2125 | 0 | 0, $2_1 + 16 | 0 | 0);
        break label$3;
       }
       $1_1 = 0;
       $9_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 116 | 0) >> 2] | 0;
       if (!$9_1) {
        break label$4
       }
       label$14 : while (1) {
        $10_1 = HEAP32[($9_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
        if (!$10_1) {
         break label$4
        }
        $1_1 = $1_1 + 1 | 0;
        if ((HEAP32[$10_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
         continue label$14
        }
        break label$14;
       };
       label$15 : {
        label$16 : {
         label$17 : {
          $1_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
          if (!($1_1 & 2 | 0)) {
           break label$17
          }
          $9_1 = HEAP32[($0_1 + 860 | 0) >> 2] | 0;
          if (!$9_1) {
           break label$17
          }
          if ((HEAP32[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
           break label$16
          }
          HEAP32[($2_1 + 96 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
          $332($0_1 | 0, 16 | 0, global$1 + 2185 | 0 | 0, $2_1 + 96 | 0 | 0);
          break label$15;
         }
         label$18 : {
          if (!($1_1 & 1 | 0)) {
           break label$18
          }
          $9_1 = HEAP32[($0_1 + 880 | 0) >> 2] | 0;
          if (!$9_1) {
           break label$18
          }
          if ((HEAP32[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($10_1 + 8 | 0) >> 2] | 0 | 0)) {
           break label$16
          }
          HEAP32[($2_1 + 80 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
          $332($0_1 | 0, 16 | 0, global$1 + 2273 | 0 | 0, $2_1 + 80 | 0 | 0);
          break label$15;
         }
         if ($1_1 & 12 | 0) {
          break label$16
         }
         HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
         $332($0_1 | 0, 16 | 0, global$1 + 2359 | 0 | 0, $2_1 + 48 | 0 | 0);
         break label$15;
        }
        if (!(HEAP32[($10_1 + 12 | 0) >> 2] | 0)) {
         break label$4
        }
        HEAP32[($2_1 + 64 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
        $332($0_1 | 0, 48 | 0, global$1 + 2412 | 0 | 0, $2_1 + 64 | 0 | 0);
        if (($208($0_1 | 0, $10_1 | 0) | 0 | 0) > (-1 | 0)) {
         break label$4
        }
       }
       HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
       $332($0_1 | 0, 48 | 0, global$1 + 2456 | 0 | 0, $2_1 + 32 | 0 | 0);
       $1_1 = 0;
       label$19 : while (1) {
        label$20 : {
         label$21 : {
          if (($1_1 | 0) == ($3_1 | 0)) {
           break label$21
          }
          if ((HEAP32[($6_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
           break label$20
          }
          $3_1 = $1_1;
         }
         label$22 : {
          label$23 : while (1) {
           $1_1 = $3_1 + 1 | 0;
           if (($1_1 | 0) >= ($4_1 | 0)) {
            break label$22
           }
           $5_1 = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
           HEAP32[($5_1 + ($3_1 << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
           $3_1 = $1_1;
           continue label$23;
          };
         }
         $4_1 = $4_1 + -1 | 0;
         $6_1 = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
         continue label$8;
        }
        $1_1 = $1_1 + 1 | 0;
        continue label$19;
       };
      };
     }
     HEAP32[($2_1 + 8 | 0) >> 2] = 1329;
     $4_1 = global$1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 + 2019 | 0;
     HEAP32[$2_1 >> 2] = $4_1 + 2012 | 0;
     $332(0 | 0, 0 | 0, $4_1 + 1982 | 0 | 0, $2_1 | 0);
     fimport$7();
     abort();
    }
    $7_1 = $5_1;
   }
   $343($2_1 + 124 | 0 | 0);
  }
  global$0 = $2_1 + 128 | 0;
  return $7_1 | 0;
 }
 
 function $207($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 592 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   FUNCTION_TABLE[$1_1 | 0]($0_1) | 0;
  }
  $343((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 56 | 0 | 0);
  HEAP32[($0_1 + 592 | 0) >> 2] = 0;
  $256($0_1 + 860 | 0 | 0);
 }
 
 function $208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if (!((HEAPU8[($3_1 + 17 | 0) >> 0] | 0) & 2 | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 568 | 0) >> 2] | 0 | 0) < (-1 | 0)) {
     break label$2
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
    $332($0_1 | 0, 24 | 0, global$1 + 3655 | 0 | 0, $2_1 + 16 | 0 | 0);
    $4_1 = -1163346256;
    break label$1;
   }
   label$3 : {
    $4_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    $4_1 = $346($4_1 | 0) | 0;
    HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] = $4_1;
    if ($4_1) {
     break label$3
    }
    $4_1 = -48;
    break label$1;
   }
   HEAP32[($0_1 + 592 | 0) >> 2] = $3_1;
   $4_1 = 0;
   $3_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $3_1 = FUNCTION_TABLE[$3_1 | 0]($0_1) | 0;
   if (($3_1 | 0) > (-1 | 0)) {
    break label$1
   }
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $352(HEAP32[$1_1 >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $332($0_1 | 0, 16 | 0, global$1 + 3690 | 0 | 0, $2_1 | 0);
   $343((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 56 | 0 | 0);
   HEAP32[($0_1 + 592 | 0) >> 2] = 0;
   $4_1 = $3_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $209($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 860 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $3_1 = $305($3_1 | 0, $1_1 | 0, 0 | 0) | 0;
   HEAP32[($1_1 + 68 | 0) >> 2] = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
   HEAP32[($1_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
   return $3_1 | 0;
  }
  label$2 : {
   $3_1 = $210($0_1 | 0, $1_1 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$2
   }
   $3_1 = -1;
   label$3 : {
    switch (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) {
    case 0:
     return $211($0_1 | 0, $1_1 | 0) | 0 | 0;
    case 1:
     break label$3;
    default:
     break label$2;
    };
   }
   $3_1 = $212($0_1 | 0, $1_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $210($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    break label$1;
   }
   $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  }
  label$3 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$3
   }
   $3_1 = $358(HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) | 0;
   $5_1 = HEAP32[($1_1 + 352 | 0) >> 2] | 0;
   $6_1 = $3_1 ? $5_1 : 1;
  }
  label$4 : {
   label$5 : {
    if (!$4_1) {
     break label$5
    }
    if ((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    label$6 : {
     switch (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) {
     case 0:
      if ((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      $3_1 = 0;
      if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      break label$4;
     case 1:
      break label$6;
     default:
      break label$5;
     };
    }
    if ((HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
     break label$5
    }
    if ((HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
     break label$5
    }
    $3_1 = 0;
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0)) {
     break label$4
    }
   }
   $3_1 = $213() | 0;
   HEAP32[($2_1 + 92 | 0) >> 2] = $3_1;
   label$8 : {
    if ($3_1) {
     break label$8
    }
    $3_1 = -48;
    break label$4;
   }
   $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       label$13 : {
        switch (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) {
        case 0:
         HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
         HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
         $240($0_1 | 0, $2_1 + 60 | 0 | 0, $2_1 + 56 | 0 | 0, $7_1 + 28 | 0 | 0);
         $6_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
         label$15 : {
          label$16 : while (1) {
           $8_1 = 5;
           $3_1 = $313($2_1 + 64 | 0 | 0, HEAP32[($0_1 + 112 | 0) >> 2] | 0 | 0, $6_1 | 0) | 0;
           if (($3_1 | 0) < (0 | 0)) {
            break label$15
           }
           $3_1 = 0;
           $4_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
           $6_1 = ($4_1 & (0 - $4_1 | 0) | 0) + $4_1 | 0;
           HEAP32[($2_1 + 60 | 0) >> 2] = $6_1;
           $4_1 = 0;
           label$17 : {
            label$18 : while (1) {
             if (($3_1 | 0) == (4 | 0)) {
              break label$17
             }
             $5_1 = $3_1 << 2 | 0;
             $4_1 = (HEAP32[(($2_1 + 64 | 0) + $5_1 | 0) >> 2] | 0 | 0) % (HEAP32[(($7_1 + $5_1 | 0) + 28 | 0) >> 2] | 0 | 0) | 0 | $4_1 | 0;
             $3_1 = $3_1 + 1 | 0;
             continue label$18;
            };
           }
           if ($4_1) {
            continue label$16
           }
           break label$16;
          };
          $3_1 = 0;
          label$19 : {
           label$20 : while (1) {
            if (($3_1 | 0) == (4 | 0)) {
             break label$19
            }
            $4_1 = $3_1 << 2 | 0;
            HEAP32[(($2_1 + 32 | 0) + $4_1 | 0) >> 2] = HEAP32[(($2_1 + 64 | 0) + $4_1 | 0) >> 2] | 0;
            $3_1 = $3_1 + 1 | 0;
            continue label$20;
           };
          }
          $4_1 = 0;
          $3_1 = $314($2_1 + 16 | 0 | 0, HEAP32[($0_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0, $2_1 + 32 | 0 | 0) | 0;
          if (($3_1 | 0) < (0 | 0)) {
           break label$15
          }
          label$21 : {
           label$22 : while (1) {
            if (($4_1 | 0) == (4 | 0)) {
             break label$21
            }
            $5_1 = $4_1 << 2 | 0;
            $6_1 = $7_1 + $5_1 | 0;
            HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[(($2_1 + 64 | 0) + $5_1 | 0) >> 2] | 0;
            label$23 : {
             $5_1 = HEAP32[(($2_1 + 16 | 0) + $5_1 | 0) >> 2] | 0;
             if (!$5_1) {
              break label$23
             }
             label$24 : {
              if ($5_1 >>> 0 <= 2147483624 >>> 0) {
               break label$24
              }
              $3_1 = -28;
              break label$15;
             }
             $5_1 = $261($5_1 + 23 | 0 | 0, global$2 | 0) | 0;
             HEAP32[$6_1 >> 2] = $5_1;
             if ($5_1) {
              break label$23
             }
             $3_1 = -48;
             break label$15;
            }
            $4_1 = $4_1 + 1 | 0;
            continue label$22;
           };
          }
          HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
          HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
          HEAP32[($7_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
          $8_1 = 2;
         }
         switch ($8_1 + -2 | 0 | 0) {
         case 3:
          break label$12;
         case 0:
          break label$9;
         default:
          break label$4;
         };
        case 1:
         break label$13;
        default:
         break label$11;
        };
       }
       $3_1 = $359($7_1 + 60 | 0 | 0, $5_1 | 0, HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$12
       }
       $3_1 = $261(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
       HEAP32[$7_1 >> 2] = $3_1;
       if ($3_1) {
        break label$10
       }
       $3_1 = -48;
      }
      $256($2_1 + 92 | 0 | 0);
      break label$4;
     }
     HEAP32[($2_1 + 8 | 0) >> 2] = 1582;
     $3_1 = global$1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 2019 | 0;
     HEAP32[$2_1 >> 2] = $3_1 + 3758 | 0;
     $332(0 | 0, 0 | 0, $3_1 + 1982 | 0 | 0, $2_1 | 0);
     fimport$7();
     abort();
    }
    $3_1 = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
    HEAP32[($7_1 + 80 | 0) >> 2] = $5_1;
    HEAP32[($7_1 + 76 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
    HEAP32[($7_1 + 84 | 0) >> 2] = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
   }
   $256((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 12 | 0 | 0);
   HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
   $3_1 = 0;
  }
  global$0 = $2_1 + 96 | 0;
  return $3_1 | 0;
 }
 
 function $211($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $6_1 = 0, $7_1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $9$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[((HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $4_1 = $353(HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[$1_1 >> 2] | 0) {
      break label$3
     }
     if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
      break label$3
     }
     if (HEAP32[($1_1 + 8 | 0) >> 2] | 0) {
      break label$3
     }
     if (!(HEAP32[($1_1 + 12 | 0) >> 2] | 0)) {
      break label$2
     }
    }
    $332($0_1 | 0, 16 | 0, global$1 + 3760 | 0 | 0, 0 | 0);
    $5_1 = -1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $352(HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $332($0_1 | 0, 16 | 0, global$1 + 3810 | 0 | 0, $2_1 | 0);
    $5_1 = -28;
    break label$1;
   }
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 64 | 0) >> 2] = $1_1;
   $5_1 = 0;
   label$5 : {
    label$6 : {
     label$7 : while (1) {
      if (($5_1 | 0) == (4 | 0)) {
       break label$6
      }
      $6_1 = $5_1 << 2 | 0;
      $7_1 = $3_1 + $6_1 | 0;
      $8_1 = HEAP32[$7_1 >> 2] | 0;
      if (!$8_1) {
       break label$6
      }
      $6_1 = $1_1 + $6_1 | 0;
      HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
      $7_1 = $265($8_1 | 0) | 0;
      HEAP32[($6_1 + 248 | 0) >> 2] = $7_1;
      if (!$7_1) {
       break label$5
      }
      HEAP32[$6_1 >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      $5_1 = $5_1 + 1 | 0;
      continue label$7;
     };
    }
    label$8 : {
     label$9 : while (1) {
      if (($5_1 | 0) == (8 | 0)) {
       break label$8
      }
      $3_1 = $1_1 + ($5_1 << 2 | 0) | 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[($3_1 + 32 | 0) >> 2] = 0;
      $5_1 = $5_1 + 1 | 0;
      continue label$9;
     };
    }
    label$10 : {
     label$11 : {
      label$12 : {
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       $9_1 = i64toi32_i32$0;
       $9$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 2;
       i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       if (!(i64toi32_i32$2 & i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
        break label$12
       }
       $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 64;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      if (!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
       break label$10
      }
      $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$10
      }
     }
     $316($5_1 | 0, HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) | 0;
    }
    $5_1 = 0;
    if (!((HEAPU8[($0_1 + 577 | 0) >> 0] | 0) & 128 | 0)) {
     break label$1
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
    $332($0_1 | 0, 48 | 0, global$1 + 3863 | 0 | 0, $2_1 + 16 | 0 | 0);
    break label$1;
   }
   $292($1_1 | 0);
   $5_1 = -48;
  }
  global$0 = $2_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $6_1 = 0, $2_1 = 0, $4_1 = 0, $8_1 = 0, $3_1 = 0, $7_1 = 0, $9_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[((HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($4_1 | 0) < (9 | 0)) {
        break label$5
       }
       $5_1 = $345($4_1 | 0, 4 | 0) | 0;
       $6_1 = $4_1 + -8 | 0;
       HEAP32[($1_1 + 284 | 0) >> 2] = $6_1;
       HEAP32[($1_1 + 64 | 0) >> 2] = $5_1;
       $5_1 = $345($6_1 | 0, 4 | 0) | 0;
       HEAP32[($1_1 + 280 | 0) >> 2] = $5_1;
       label$6 : {
        if (!$5_1) {
         break label$6
        }
        if (!(HEAP32[($1_1 + 64 | 0) >> 2] | 0)) {
         break label$6
        }
        $7_1 = $1_1 + 64 | 0;
        $4_1 = 8;
        break label$4;
       }
       $343($1_1 + 64 | 0 | 0);
       $343($1_1 + 280 | 0 | 0);
       break label$3;
      }
      HEAP32[($1_1 + 64 | 0) >> 2] = $1_1;
      if (HEAP32[($1_1 + 284 | 0) >> 2] | 0) {
       break label$1
      }
      $7_1 = $1_1 + 64 | 0;
      if (($4_1 | 0) >= (1 | 0)) {
       break label$4
      }
      $4_1 = 0;
     }
     $5_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : while (1) {
        label$10 : {
         if (($5_1 | 0) != ($4_1 | 0)) {
          break label$10
         }
         $5_1 = 0;
         label$11 : while (1) {
          if (($5_1 | 0) >= (HEAP32[($1_1 + 284 | 0) >> 2] | 0 | 0)) {
           break label$8
          }
          $8_1 = $265(HEAP32[$3_1 >> 2] | 0 | 0) | 0;
          $6_1 = $5_1 << 2 | 0;
          HEAP32[((HEAP32[($1_1 + 280 | 0) >> 2] | 0) + $6_1 | 0) >> 2] = $8_1;
          $8_1 = HEAP32[((HEAP32[($1_1 + 280 | 0) >> 2] | 0) + $6_1 | 0) >> 2] | 0;
          if (!$8_1) {
           break label$7
          }
          HEAP32[(($6_1 + (HEAP32[$7_1 >> 2] | 0) | 0) + 32 | 0) >> 2] = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
          $5_1 = $5_1 + 1 | 0;
          continue label$11;
         };
        }
        $8_1 = $5_1 << 2 | 0;
        $9_1 = $1_1 + $8_1 | 0;
        $6_1 = $265(HEAP32[$3_1 >> 2] | 0 | 0) | 0;
        HEAP32[($9_1 + 248 | 0) >> 2] = $6_1;
        if (!$6_1) {
         break label$7
        }
        $6_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
        HEAP32[$9_1 >> 2] = $6_1;
        HEAP32[((HEAP32[($1_1 + 64 | 0) >> 2] | 0) + $8_1 | 0) >> 2] = $6_1;
        $5_1 = $5_1 + 1 | 0;
        continue label$9;
       };
      }
      $5_1 = 0;
      if (!((HEAPU8[($0_1 + 577 | 0) >> 0] | 0) & 128 | 0)) {
       break label$2
      }
      HEAP32[$2_1 >> 2] = $1_1;
      $332($0_1 | 0, 48 | 0, global$1 + 3928 | 0 | 0, $2_1 | 0);
      break label$2;
     }
     $292($1_1 | 0);
    }
    $5_1 = -48;
   }
   global$0 = $2_1 + 32 | 0;
   return $5_1 | 0;
  }
  HEAP32[($2_1 + 24 | 0) >> 2] = 1614;
  $1_1 = global$1;
  HEAP32[($2_1 + 20 | 0) >> 2] = $1_1 + 2019 | 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 + 3900 | 0;
  $332(0 | 0, 0 | 0, $1_1 + 1982 | 0 | 0, $2_1 + 16 | 0 | 0);
  fimport$7();
  abort();
 }
 
 function $213() {
  var $1_1 = 0, $0_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  $1_1 = $346(88 | 0) | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    $1_1 = $251($1_1 | 0, 88 | 0, global$3 + 27 | 0 | 0, 0 | 0, 0 | 0) | 0;
    if ($1_1) {
     break label$1
    }
    $343($0_1 + 12 | 0 | 0);
   }
   $1_1 = 0;
  }
  global$0 = $0_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $214($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $7$hi = 0, $34_1 = 0, $37_1 = 0, $86_1 = 0, $127_1 = 0, $138_1 = 0, $147_1 = 0, $195_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
   if (HEAP32[($4_1 + 24 | 0) >> 2] | 0) {
    break label$1
   }
   if (($279(HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) | 0) >>> 0 < 72 >>> 0) {
    break label$1
   }
   $282(HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0, $4_1 | 0, 72 | 0, 0 | 0) | 0;
  }
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $1_1;
  HEAP32[($1_1 + 112 | 0) >> 2] = $7_1;
  HEAP32[($1_1 + 116 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $1_1;
  HEAP32[($1_1 + 104 | 0) >> 2] = $7_1;
  HEAP32[($1_1 + 108 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
  $34_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[($1_1 + 328 | 0) >> 2] = $34_1;
  HEAP32[($1_1 + 332 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $37_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[($1_1 + 336 | 0) >> 2] = $37_1;
  HEAP32[($1_1 + 340 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($1_1 + 356 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
  $3_1 = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      if (($3_1 | 0) == (10 | 0)) {
       break label$4
      }
      label$6 : {
       $5_1 = $3_1 << 3 | 0;
       $6_1 = $182($4_1 | 0, HEAP32[((global$1 + 2528 | 0) + $5_1 | 0) >> 2] | 0 | 0, $2_1 + 28 | 0 | 0) | 0;
       if (!$6_1) {
        break label$6
       }
       $5_1 = $287($1_1 | 0, HEAP32[(((global$1 + 2528 | 0) + $5_1 | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) | 0;
       if (!$5_1) {
        break label$3
       }
       wasm2js_memory_copy(HEAP32[($5_1 + 4 | 0) >> 2] | 0, $6_1, HEAP32[($2_1 + 28 | 0) >> 2] | 0);
      }
      $3_1 = $3_1 + 1 | 0;
      continue label$5;
     };
    }
    $215($4_1 | 0, $1_1 | 0);
    HEAP32[($1_1 + 296 | 0) >> 2] = (HEAP32[($1_1 + 296 | 0) >> 2] | 0) & -5 | 0 | ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) & 4 | 0) | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 584 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 588 | 0) >> 2] | 0;
    $86_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 224 | 0) >> 2] = $86_1;
    HEAP32[($1_1 + 228 | 0) >> 2] = i64toi32_i32$0;
    label$7 : {
     if ((HEAP32[($1_1 + 304 | 0) >> 2] | 0 | 0) != (2 | 0)) {
      break label$7
     }
     HEAP32[($1_1 + 304 | 0) >> 2] = HEAP32[($0_1 + 316 | 0) >> 2] | 0;
    }
    label$8 : {
     if ((HEAP32[($1_1 + 308 | 0) >> 2] | 0 | 0) != (2 | 0)) {
      break label$8
     }
     HEAP32[($1_1 + 308 | 0) >> 2] = HEAP32[($0_1 + 320 | 0) >> 2] | 0;
    }
    label$9 : {
     if ((HEAP32[($1_1 + 312 | 0) >> 2] | 0 | 0) != (2 | 0)) {
      break label$9
     }
     HEAP32[($1_1 + 312 | 0) >> 2] = HEAP32[($0_1 + 324 | 0) >> 2] | 0;
    }
    label$10 : {
     if (HEAP32[($1_1 + 300 | 0) >> 2] | 0) {
      break label$10
     }
     HEAP32[($1_1 + 300 | 0) >> 2] = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
    }
    label$11 : {
     if (HEAP32[($1_1 + 316 | 0) >> 2] | 0) {
      break label$11
     }
     HEAP32[($1_1 + 316 | 0) >> 2] = HEAP32[($0_1 + 332 | 0) >> 2] | 0;
    }
    $3_1 = 0;
    label$12 : {
     switch (HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) {
     case 0:
      HEAP32[($1_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
      $5_1 = $1_1 + 92 | 0;
      label$14 : {
       if (HEAP32[($1_1 + 92 | 0) >> 2] | 0) {
        break label$14
       }
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 188 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
       $127_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $5_1;
       HEAP32[i64toi32_i32$0 >> 2] = $127_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      }
      $6_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$2
      }
      $4_1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$2
      }
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $138_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $2_1;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $138_1;
      HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
      if (($319($6_1 | 0, $4_1 | 0, i64toi32_i32$1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
       break label$2
      }
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$0 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
      $147_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $2_1;
      HEAP32[i64toi32_i32$0 >> 2] = $147_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $332($0_1 | 0, 24 | 0, global$1 + 2608 | 0 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$1 = 1;
      HEAP32[($1_1 + 92 | 0) >> 2] = 0;
      HEAP32[($1_1 + 96 | 0) >> 2] = i64toi32_i32$1;
      break label$2;
     case 1:
      break label$12;
     default:
      break label$2;
     };
    }
    label$15 : {
     if (HEAP32[($1_1 + 232 | 0) >> 2] | 0) {
      break label$15
     }
     HEAP32[($1_1 + 232 | 0) >> 2] = HEAP32[($0_1 + 344 | 0) >> 2] | 0;
    }
    label$16 : {
     if ((HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$16
     }
     HEAP32[($1_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 352 | 0) >> 2] | 0;
    }
    label$17 : {
     label$18 : {
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = HEAP32[($1_1 + 240 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 244 | 0) >> 2] | 0;
      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
       break label$18
      }
      $5_1 = HEAP32[($0_1 + 348 | 0) >> 2] | 0;
      break label$17;
     }
     label$19 : {
      label$20 : {
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 376 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 380 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
        break label$20
       }
       i64toi32_i32$1 = $7$hi;
       $5_1 = $268($7_1 | 0, i64toi32_i32$1 | 0) | 0;
       if (($5_1 | 0) == (HEAP32[($0_1 + 348 | 0) >> 2] | 0 | 0)) {
        break label$19
       }
       $332($0_1 | 0, 16 | 0, global$1 + 2637 | 0 | 0, 0 | 0);
       $3_1 = -28;
       break label$2;
      }
      $5_1 = HEAP32[($0_1 + 348 | 0) >> 2] | 0;
      if ($5_1 >>> 0 < 513 >>> 0) {
       break label$17
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = $5_1;
      $332($0_1 | 0, 16 | 0, global$1 + 2674 | 0 | 0, $2_1 + 16 | 0 | 0);
      $3_1 = -52;
      break label$2;
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 376 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 380 | 0) >> 2] | 0;
     $195_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $1_1;
     HEAP32[($1_1 + 240 | 0) >> 2] = $195_1;
     HEAP32[($1_1 + 244 | 0) >> 2] = i64toi32_i32$0;
    }
    HEAP32[($1_1 + 352 | 0) >> 2] = $5_1;
    break label$2;
   }
   $3_1 = -48;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $183($182($0_1 | 0, 13 | 0, $2_1 + 12 | 0 | 0) | 0 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, $1_1 + 344 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $0_1 + 400 | 0;
  $256($2_1 | 0);
  $0_1 = $346(20 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $3_1 = -48;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $0_1 = $251($0_1 | 0, 20 | 0, global$3 + 28 | 0 | 0, 0 | 0, 1 | 0) | 0;
    if ($0_1) {
     break label$2
    }
    $343($1_1 + 12 | 0 | 0);
    break label$1;
   }
   HEAP32[$2_1 >> 2] = $0_1;
   $3_1 = 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $217($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   FUNCTION_TABLE[$3_1 | 0](HEAP32[($1_1 + 4 | 0) >> 2] | 0);
  }
  label$2 : {
   $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$2
   }
   FUNCTION_TABLE[$3_1 | 0](HEAP32[($1_1 + 12 | 0) >> 2] | 0);
  }
  $343($2_1 + 12 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $218($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $7_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $9$hi = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $88_1 = 0, $88$hi = 0, $92$hi = 0, $93_1 = 0, $93$hi = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  $5_1 = HEAP32[($0_1 + 592 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) {
      case 0:
       label$6 : {
        label$7 : {
         $6_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
         if ($6_1 >>> 0 >= 2147483640 >>> 0) {
          break label$7
         }
         i64toi32_i32$2 = $0_1;
         i64toi32_i32$0 = HEAP32[($0_1 + 872 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($0_1 + 876 | 0) >> 2] | 0;
         if (($318(($6_1 + 7 | 0) & -8 | 0 | 0, HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, -1 | 0, 0 | 0, $0_1 | 0) | 0 | 0) < (0 | 0)) {
          break label$7
         }
         if ((HEAP32[($0_1 + 112 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
          break label$6
         }
        }
        $332($0_1 | 0, 16 | 0, global$1 + 2698 | 0 | 0, 0 | 0);
        $6_1 = -28;
        break label$2;
       }
       $4_1 = 1;
       label$8 : {
        label$9 : {
         if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$9
         }
         if ((HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
          break label$8
         }
        }
        $4_1 = 0;
        $6_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
        $7_1 = HEAP32[($0_1 + 680 | 0) >> 2] | 0;
        $8_1 = 0 - ((0 - (HEAP32[($0_1 + 100 | 0) >> 2] | 0) | 0) >> $7_1 | 0) | 0;
        HEAP32[($1_1 + 68 | 0) >> 2] = ($6_1 | 0) > ($8_1 | 0) ? $6_1 : $8_1;
        $6_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
        $7_1 = 0 - ((0 - (HEAP32[($0_1 + 104 | 0) >> 2] | 0) | 0) >> $7_1 | 0) | 0;
        HEAP32[($1_1 + 72 | 0) >> 2] = ($6_1 | 0) > ($7_1 | 0) ? $6_1 : $7_1;
       }
       label$10 : {
        if (HEAP32[$1_1 >> 2] | 0) {
         break label$10
        }
        if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
         break label$10
        }
        if (HEAP32[($1_1 + 8 | 0) >> 2] | 0) {
         break label$10
        }
        if (!(HEAP32[($1_1 + 12 | 0) >> 2] | 0)) {
         break label$3
        }
       }
       $332($0_1 | 0, 16 | 0, global$1 + 2742 | 0 | 0, 0 | 0);
       $6_1 = -28;
       break label$2;
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 348 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $88_1 = i64toi32_i32$1;
     $88$hi = i64toi32_i32$0;
     $6_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$0 = $6_1 >> 31 | 0;
     $92$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $88$hi;
     i64toi32_i32$1 = $92$hi;
     i64toi32_i32$1 = __wasm_i64_mul($88_1 | 0, i64toi32_i32$0 | 0, $6_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $93_1 = i64toi32_i32$1;
     $93$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 904 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 908 | 0) >> 2] | 0;
     $9_1 = i64toi32_i32$0;
     $9$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $93$hi;
     i64toi32_i32$2 = $93_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$3 = $9_1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
      $20_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
        $21_1 = 0
       } else {
        $21_1 = 1
       }
       $22_1 = $21_1;
      } else {
       $22_1 = 0
      }
      $20_1 = $22_1;
     }
     if ($20_1) {
      break label$3
     }
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $3_1;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $9_1;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
     HEAP32[i64toi32_i32$1 >> 2] = $6_1;
     $332($0_1 | 0, 16 | 0, global$1 + 2785 | 0 | 0, i64toi32_i32$1 | 0);
     $6_1 = -28;
     break label$2;
    }
    $6_1 = $214($0_1 | 0, $1_1 | 0) | 0;
    if (($6_1 | 0) < (0 | 0)) {
     break label$2
    }
    label$11 : {
     label$12 : {
      label$13 : {
       if (!$5_1) {
        break label$13
       }
       $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
       if (!$6_1) {
        break label$12
       }
       $5_1 = FUNCTION_TABLE[$6_1 | 0]($0_1, $1_1) | 0;
       break label$11;
      }
      HEAP32[($0_1 + 768 | 0) >> 2] = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     }
     $5_1 = 0;
     $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 400 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0;
     if (($6_1 | 0) < (0 | 0)) {
      break label$2
     }
     $219($0_1 | 0, $1_1 | 0);
     $6_1 = $216($1_1 | 0) | 0;
     if (($6_1 | 0) < (0 | 0)) {
      break label$2
     }
    }
    $6_1 = $5_1;
    label$14 : {
     if (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | $4_1 | 0) {
      break label$14
     }
     if ((HEAPU8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 108 | 0) >> 0] | 0) & 16 | 0) {
      break label$14
     }
     HEAP32[($1_1 + 68 | 0) >> 2] = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
     HEAP32[($1_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
    }
    if (($6_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   $332($0_1 | 0, 16 | 0, global$1 + 2833 | 0 | 0, 0 | 0);
   $292($1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $219($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
    break label$1
   }
   $3_1 = $354(HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    label$3 : {
     $4_1 = $353(HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) | 0;
     if ($4_1) {
      break label$3
     }
     $4_1 = 0;
     break label$2;
    }
    $4_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   }
   $3_1 = ($3_1 | 0) == (1 | 0) ? ($4_1 & 2 | 0 ? 2 : 1) : $3_1;
   label$4 : {
    if (!($4_1 & 64 | 0)) {
     break label$4
    }
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0 ? 2 : $3_1;
   }
   $4_1 = 0;
   $5_1 = ($3_1 | 0) > (0 | 0) ? $3_1 : 0;
   label$5 : while (1) {
    label$6 : {
     if (($4_1 | 0) != ($5_1 | 0)) {
      break label$6
     }
     $6_1 = ($3_1 | 0) < (1 | 0);
     label$7 : while (1) {
      if ($6_1) {
       break label$1
      }
      if ($3_1 >>> 0 > 7 >>> 0) {
       break label$1
      }
      label$8 : {
       $4_1 = $1_1 + ($3_1 << 2 | 0) | 0;
       if (!(HEAP32[$4_1 >> 2] | 0)) {
        break label$8
       }
       $332($0_1 | 0, 16 | 0, global$1 + 3981 | 0 | 0, 0 | 0);
      }
      HEAP32[$4_1 >> 2] = 0;
      $3_1 = $3_1 + 1 | 0;
      continue label$7;
     };
    }
    $6_1 = $4_1 << 2 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (HEAP32[($1_1 + $6_1 | 0) >> 2] | 0) {
     continue label$5
    }
    break label$5;
   };
   HEAP32[($2_1 + 8 | 0) >> 2] = 1845;
   $3_1 = global$1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 2019 | 0;
   HEAP32[$2_1 >> 2] = $3_1 + 3966 | 0;
   $332(0 | 0, 0 | 0, $3_1 + 1982 | 0 | 0, $2_1 | 0);
   fimport$7();
   abort();
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $220($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $14$hi = 0, $15$hi = 0, $12_1 = 0, $14_1 = 0, $15_1 = 0, $9_1 = 0, $13_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $8_1 = 0, $11_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $74_1 = 0, $81_1 = 0, $89_1 = 0, $132_1 = 0, $198_1 = 0, $200_1 = 0, $200$hi = 0, $202$hi = 0, $220_1 = 0, $222_1 = 0, $222$hi = 0, $224$hi = 0, $265_1 = 0, $269_1 = 0, $280_1 = 0, $288_1 = 0, $296_1 = 0, $324_1 = 0, $326_1 = 0, $326$hi = 0, $330$hi = 0, $355_1 = 0, $357_1 = 0, $357$hi = 0, $359$hi = 0, $374_1 = 0, $378_1 = 0, $388_1 = 0, $485_1 = 0, $488_1 = 0, $495_1 = 0, $498$hi = 0, $500_1 = 0, $500$hi = 0, $501_1 = 0;
  $3_1 = global$0 - 160 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
     if (HEAP32[($5_1 + 24 | 0) >> 2] | 0) {
      break label$3
     }
     if (HEAP32[($4_1 + 60 | 0) >> 2] | 0) {
      break label$3
     }
     $177($5_1 | 0);
     $6_1 = $195($0_1 | 0, $5_1 | 0) | 0;
     if (($6_1 | 0) > (-1 | 0)) {
      break label$3
     }
     if (($6_1 | 0) != (-541478725 | 0)) {
      break label$2
     }
    }
    $6_1 = -541478725;
    if (HEAP32[($4_1 + 72 | 0) >> 2] | 0) {
     break label$2
    }
    label$4 : {
     if (HEAP32[($5_1 + 24 | 0) >> 2] | 0) {
      break label$4
     }
     if ((HEAPU8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 32 | 0) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 696 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($3_1 + 156 | 0) >> 2] = 0;
    label$5 : {
     label$6 : {
      if (!((HEAPU8[($0_1 + 696 | 0) >> 0] | 0) & 1 | 0)) {
       break label$6
      }
      $6_1 = $226($0_1 | 0, $1_1 | 0, $3_1 + 156 | 0 | 0, $5_1 | 0) | 0;
      break label$5;
     }
     $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0 | 0]($0_1, $1_1, $3_1 + 156 | 0, $5_1) | 0;
     label$7 : {
      $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if ((HEAPU8[($7_1 + 108 | 0) >> 0] | 0) & 4 | 0) {
       break label$7
      }
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $74_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $1_1;
      HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = $74_1;
      HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$1;
     }
     if (HEAP32[($7_1 + 8 | 0) >> 2] | 0) {
      break label$5
     }
     label$8 : {
      if (HEAP32[($0_1 + 140 | 0) >> 2] | 0) {
       break label$8
      }
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
      $81_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $1_1;
      HEAP32[($1_1 + 328 | 0) >> 2] = $81_1;
      HEAP32[($1_1 + 332 | 0) >> 2] = i64toi32_i32$0;
     }
     if ((HEAPU8[($7_1 + 16 | 0) >> 0] | 0) & 2 | 0) {
      break label$5
     }
     label$9 : {
      if (HEAP32[($1_1 + 92 | 0) >> 2] | 0) {
       break label$9
      }
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
      $89_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $1_1;
      HEAP32[(i64toi32_i32$0 + 92 | 0) >> 2] = $89_1;
      HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] = i64toi32_i32$1;
     }
     label$10 : {
      if (HEAP32[($1_1 + 68 | 0) >> 2] | 0) {
       break label$10
      }
      HEAP32[($1_1 + 68 | 0) >> 2] = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
     }
     label$11 : {
      if (HEAP32[($1_1 + 72 | 0) >> 2] | 0) {
       break label$11
      }
      HEAP32[($1_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
     }
     if ((HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
      break label$5
     }
     HEAP32[($1_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
    }
    $8_1 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
    $7_1 = $8_1;
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         switch (HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) {
         case 0:
          if (!((HEAPU8[($1_1 + 296 | 0) >> 0] | 0) & 4 | 0)) {
           break label$15
          }
          HEAP32[($3_1 + 156 | 0) >> 2] = 0;
          break label$13;
         case 1:
          break label$16;
         default:
          break label$14;
         };
        }
        $9_1 = 0;
        label$18 : {
         if (($6_1 | 0) < (0 | 0)) {
          break label$18
         }
         if (!$8_1) {
          break label$18
         }
         label$19 : {
          if ((HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
           break label$19
          }
          HEAP32[($1_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 352 | 0) >> 2] | 0;
         }
         label$20 : {
          i64toi32_i32$2 = $1_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 240 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 244 | 0) >> 2] | 0;
          i64toi32_i32$2 = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
           break label$20
          }
          i64toi32_i32$3 = $0_1;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 376 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 380 | 0) >> 2] | 0;
          $132_1 = i64toi32_i32$2;
          i64toi32_i32$2 = $1_1;
          HEAP32[(i64toi32_i32$2 + 240 | 0) >> 2] = $132_1;
          HEAP32[(i64toi32_i32$2 + 244 | 0) >> 2] = i64toi32_i32$0;
         }
         label$21 : {
          if (HEAP32[($1_1 + 352 | 0) >> 2] | 0) {
           break label$21
          }
          HEAP32[($1_1 + 352 | 0) >> 2] = HEAP32[($0_1 + 348 | 0) >> 2] | 0;
         }
         if (HEAP32[($1_1 + 232 | 0) >> 2] | 0) {
          break label$18
         }
         HEAP32[($1_1 + 232 | 0) >> 2] = HEAP32[($0_1 + 344 | 0) >> 2] | 0;
        }
        label$22 : {
         label$23 : {
          $10_1 = $182(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 11 | 0, $3_1 + 152 | 0 | 0) | 0;
          if ($10_1) {
           break label$23
          }
          $11_1 = 0;
          $7_1 = 0;
          break label$22;
         }
         $11_1 = 0;
         $7_1 = 0;
         if ((HEAP32[($3_1 + 152 | 0) >> 2] | 0 | 0) < (10 | 0)) {
          break label$22
         }
         $9_1 = Math_imul(HEAP32[($4_1 + 100 | 0) >> 2] | 0, HEAPU8[$10_1 >> 0] | 0 | ((HEAPU8[($10_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0);
         HEAP32[($4_1 + 52 | 0) >> 2] = $9_1;
         $7_1 = HEAPU8[($10_1 + 4 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         HEAP32[($3_1 + 112 | 0) >> 2] = $9_1;
         HEAP32[($3_1 + 116 | 0) >> 2] = $7_1;
         $332($0_1 | 0, 48 | 0, global$1 + 3194 | 0 | 0, $3_1 + 112 | 0 | 0);
         $9_1 = HEAPU8[($10_1 + 9 | 0) >> 0] | 0;
         $11_1 = HEAPU8[($10_1 + 8 | 0) >> 0] | 0;
        }
        $10_1 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
        label$24 : {
         if (!((HEAPU8[($1_1 + 296 | 0) >> 0] | 0) & 4 | 0)) {
          break label$24
         }
         if (!$10_1) {
          break label$24
         }
         $10_1 = 1;
         if ((HEAPU8[($0_1 + 67 | 0) >> 0] | 0) & 32 | 0) {
          break label$24
         }
         $10_1 = 0;
         $12_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
         $13_1 = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) - $12_1 | 0;
         HEAP32[($4_1 + 52 | 0) >> 2] = ($13_1 | 0) > (0 | 0) ? $13_1 : 0;
         HEAP32[($3_1 + 156 | 0) >> 2] = 0;
         $198_1 = $2_1;
         i64toi32_i32$3 = $2_1;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
         $200_1 = i64toi32_i32$0;
         $200$hi = i64toi32_i32$2;
         i64toi32_i32$0 = $12_1;
         i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
         $202$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $200$hi;
         i64toi32_i32$3 = $200_1;
         i64toi32_i32$0 = $202$hi;
         i64toi32_i32$1 = $12_1;
         i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
         i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         i64toi32_i32$3 = $198_1;
         HEAP32[i64toi32_i32$3 >> 2] = i64toi32_i32$4;
         HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
        }
        label$25 : {
         $12_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
         if (($12_1 | 0) < (1 | 0)) {
          break label$25
         }
         if (!$10_1) {
          break label$25
         }
         if ((HEAPU8[($0_1 + 67 | 0) >> 0] | 0) & 32 | 0) {
          break label$25
         }
         label$26 : {
          $10_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
          if (($10_1 | 0) > ($12_1 | 0)) {
           break label$26
          }
          HEAP32[($3_1 + 156 | 0) >> 2] = 0;
          $220_1 = $2_1;
          i64toi32_i32$2 = $2_1;
          i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $222_1 = i64toi32_i32$5;
          $222$hi = i64toi32_i32$3;
          i64toi32_i32$5 = $10_1;
          i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
          $224$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $222$hi;
          i64toi32_i32$2 = $222_1;
          i64toi32_i32$5 = $224$hi;
          i64toi32_i32$1 = $10_1;
          i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
          i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          i64toi32_i32$2 = $220_1;
          HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$0;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
          $10_1 = $12_1 - $10_1 | 0;
          HEAP32[($4_1 + 52 | 0) >> 2] = $10_1;
          HEAP32[($3_1 + 96 | 0) >> 2] = $10_1;
          $332($0_1 | 0, 48 | 0, global$1 + 3241 | 0 | 0, $3_1 + 96 | 0 | 0);
          break label$25;
         }
         $13_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
         $360($13_1 | 0, $13_1 | 0, 0 | 0, $12_1 | 0, $10_1 - $12_1 | 0 | 0, HEAP32[($0_1 + 348 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) | 0;
         label$27 : {
          label$28 : {
           if (!(HEAP32[($0_1 + 772 | 0) >> 2] | 0)) {
            break label$28
           }
           $10_1 = HEAP32[($0_1 + 344 | 0) >> 2] | 0;
           if (!$10_1) {
            break label$28
           }
           i64toi32_i32$3 = $4_1;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
           $14_1 = i64toi32_i32$4;
           $14$hi = i64toi32_i32$2;
           HEAP32[($3_1 + 148 | 0) >> 2] = $10_1;
           HEAP32[($3_1 + 144 | 0) >> 2] = 1;
           i64toi32_i32$3 = $3_1;
           i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 144 | 0) >> 2] | 0;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 148 | 0) >> 2] | 0;
           $265_1 = i64toi32_i32$2;
           i64toi32_i32$2 = i64toi32_i32$3;
           HEAP32[(i64toi32_i32$3 + 88 | 0) >> 2] = $265_1;
           HEAP32[(i64toi32_i32$3 + 92 | 0) >> 2] = i64toi32_i32$4;
           i64toi32_i32$3 = $0_1 + 772 | 0;
           i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
           i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
           $269_1 = i64toi32_i32$4;
           i64toi32_i32$4 = $3_1;
           HEAP32[($3_1 + 80 | 0) >> 2] = $269_1;
           HEAP32[($3_1 + 84 | 0) >> 2] = i64toi32_i32$2;
           i64toi32_i32$2 = $14$hi;
           i64toi32_i32$2 = $337($14_1 | 0, i64toi32_i32$2 | 0, $3_1 + 88 | 0 | 0, $3_1 + 80 | 0 | 0) | 0;
           i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
           $14_1 = i64toi32_i32$2;
           $14$hi = i64toi32_i32$4;
           label$29 : {
            i64toi32_i32$3 = $1_1;
            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] | 0;
            $15_1 = i64toi32_i32$4;
            $15$hi = i64toi32_i32$2;
            i64toi32_i32$3 = i64toi32_i32$4;
            i64toi32_i32$4 = -2147483648;
            i64toi32_i32$1 = 0;
            if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) | 0) {
             break label$29
            }
            $280_1 = $1_1;
            i64toi32_i32$3 = $15$hi;
            i64toi32_i32$3 = $14$hi;
            i64toi32_i32$3 = $15$hi;
            i64toi32_i32$1 = $15_1;
            i64toi32_i32$2 = $14$hi;
            i64toi32_i32$4 = $14_1;
            i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
            i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
            if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
             i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
            }
            i64toi32_i32$1 = $280_1;
            HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] = i64toi32_i32$5;
            HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = i64toi32_i32$0;
           }
           label$30 : {
            i64toi32_i32$3 = $1_1;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
            $15_1 = i64toi32_i32$0;
            $15$hi = i64toi32_i32$1;
            i64toi32_i32$3 = i64toi32_i32$0;
            i64toi32_i32$0 = -2147483648;
            i64toi32_i32$4 = 0;
            if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
             break label$30
            }
            $288_1 = $1_1;
            i64toi32_i32$3 = $15$hi;
            i64toi32_i32$3 = $14$hi;
            i64toi32_i32$3 = $15$hi;
            i64toi32_i32$4 = $15_1;
            i64toi32_i32$1 = $14$hi;
            i64toi32_i32$0 = $14_1;
            i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
            i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
            }
            i64toi32_i32$4 = $288_1;
            HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] = i64toi32_i32$2;
            HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] = i64toi32_i32$5;
           }
           label$31 : {
            i64toi32_i32$3 = $1_1;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] | 0;
            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] | 0;
            $15_1 = i64toi32_i32$5;
            $15$hi = i64toi32_i32$4;
            i64toi32_i32$3 = i64toi32_i32$5;
            i64toi32_i32$5 = -2147483648;
            i64toi32_i32$0 = 0;
            if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) | 0) {
             break label$31
            }
            $296_1 = $1_1;
            i64toi32_i32$3 = $15$hi;
            i64toi32_i32$3 = $14$hi;
            i64toi32_i32$3 = $15$hi;
            i64toi32_i32$0 = $15_1;
            i64toi32_i32$4 = $14$hi;
            i64toi32_i32$5 = $14_1;
            i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
            i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
            }
            i64toi32_i32$0 = $296_1;
            HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
            HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$2;
           }
           i64toi32_i32$3 = $1_1;
           i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
           $15_1 = i64toi32_i32$2;
           $15$hi = i64toi32_i32$0;
           i64toi32_i32$0 = $14$hi;
           i64toi32_i32$0 = $15$hi;
           i64toi32_i32$3 = i64toi32_i32$2;
           i64toi32_i32$2 = $14$hi;
           i64toi32_i32$5 = $14_1;
           if ((i64toi32_i32$0 | 0) < (i64toi32_i32$2 | 0)) {
            $62_1 = 1
           } else {
            if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$2 | 0)) {
             if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
              $63_1 = 0
             } else {
              $63_1 = 1
             }
             $64_1 = $63_1;
            } else {
             $64_1 = 0
            }
            $62_1 = $64_1;
           }
           if ($62_1) {
            break label$27
           }
           i64toi32_i32$3 = $15$hi;
           i64toi32_i32$3 = $14$hi;
           i64toi32_i32$3 = $15$hi;
           i64toi32_i32$5 = $15_1;
           i64toi32_i32$0 = $14$hi;
           i64toi32_i32$2 = $14_1;
           i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
           i64toi32_i32$1 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$0 | 0;
           i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
           i64toi32_i32$5 = $1_1;
           HEAP32[(i64toi32_i32$5 + 336 | 0) >> 2] = i64toi32_i32$4;
           HEAP32[(i64toi32_i32$5 + 340 | 0) >> 2] = i64toi32_i32$1;
           break label$27;
          }
          $332($0_1 | 0, 24 | 0, global$1 + 3274 | 0 | 0, 0 | 0);
         }
         $10_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
         HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
         HEAP32[($3_1 + 64 | 0) >> 2] = $10_1;
         $332($0_1 | 0, 48 | 0, global$1 + 3324 | 0 | 0, $3_1 + 64 | 0 | 0);
         $324_1 = $2_1;
         i64toi32_i32$3 = $2_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
         $326_1 = i64toi32_i32$1;
         $326$hi = i64toi32_i32$5;
         $10_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
         i64toi32_i32$1 = $10_1;
         i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
         $330$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $326$hi;
         i64toi32_i32$3 = $326_1;
         i64toi32_i32$1 = $330$hi;
         i64toi32_i32$2 = $10_1;
         i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         i64toi32_i32$3 = $324_1;
         HEAP32[i64toi32_i32$3 >> 2] = i64toi32_i32$0;
         HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
         HEAP32[($1_1 + 76 | 0) >> 2] = (HEAP32[($1_1 + 76 | 0) >> 2] | 0) - $10_1 | 0;
         HEAP32[($4_1 + 52 | 0) >> 2] = 0;
        }
        label$32 : {
         if (!$7_1) {
          break label$32
         }
         $10_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
         if ($10_1 >>> 0 < $7_1 >>> 0) {
          break label$32
         }
         if (!(HEAP32[($3_1 + 156 | 0) >> 2] | 0)) {
          break label$32
         }
         if ((HEAPU8[($0_1 + 67 | 0) >> 0] | 0) & 32 | 0) {
          break label$32
         }
         label$33 : {
          if (($10_1 | 0) != ($7_1 | 0)) {
           break label$33
          }
          $355_1 = $2_1;
          i64toi32_i32$5 = $2_1;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $357_1 = i64toi32_i32$4;
          $357$hi = i64toi32_i32$3;
          i64toi32_i32$4 = $7_1;
          i64toi32_i32$3 = i64toi32_i32$4 >> 31 | 0;
          $359$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $357$hi;
          i64toi32_i32$5 = $357_1;
          i64toi32_i32$4 = $359$hi;
          i64toi32_i32$2 = $7_1;
          i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
          }
          i64toi32_i32$5 = $355_1;
          HEAP32[i64toi32_i32$5 >> 2] = i64toi32_i32$1;
          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($3_1 + 156 | 0) >> 2] = 0;
          break label$32;
         }
         label$34 : {
          label$35 : {
           if (!(HEAP32[($0_1 + 772 | 0) >> 2] | 0)) {
            break label$35
           }
           $2_1 = HEAP32[($0_1 + 344 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$35
           }
           HEAP32[($3_1 + 140 | 0) >> 2] = $2_1;
           HEAP32[($3_1 + 136 | 0) >> 2] = 1;
           i64toi32_i32$3 = $3_1;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 136 | 0) >> 2] | 0;
           i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 140 | 0) >> 2] | 0;
           $374_1 = i64toi32_i32$0;
           i64toi32_i32$0 = i64toi32_i32$3;
           HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $374_1;
           HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$5;
           i64toi32_i32$3 = $0_1 + 772 | 0;
           i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
           $378_1 = i64toi32_i32$5;
           i64toi32_i32$5 = $3_1;
           HEAP32[($3_1 + 48 | 0) >> 2] = $378_1;
           HEAP32[($3_1 + 52 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$0 = $337($10_1 - $7_1 | 0 | 0, i64toi32_i32$0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 48 | 0 | 0) | 0;
           i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
           $388_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $1_1;
           HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] = $388_1;
           HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] = i64toi32_i32$5;
           break label$34;
          }
          $332($0_1 | 0, 24 | 0, global$1 + 3344 | 0 | 0, 0 | 0);
         }
         HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
         $2_1 = global$1;
         HEAP32[($3_1 + 32 | 0) >> 2] = $7_1;
         $332($0_1 | 0, 48 | 0, $2_1 + 3396 | 0 | 0, $3_1 + 32 | 0 | 0);
         HEAP32[($1_1 + 76 | 0) >> 2] = (HEAP32[($1_1 + 76 | 0) >> 2] | 0) - $7_1 | 0;
        }
        label$36 : {
         if (!((HEAPU8[($0_1 + 67 | 0) >> 0] | 0) & 32 | 0)) {
          break label$36
         }
         if (!(HEAP32[($3_1 + 156 | 0) >> 2] | 0)) {
          break label$36
         }
         $2_1 = $287($1_1 | 0, 9 | 0, 10 | 0) | 0;
         if (!$2_1) {
          break label$36
         }
         $59_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         $60_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
         HEAP8[$59_1 >> 0] = $60_1;
         HEAP8[($59_1 + 1 | 0) >> 0] = $60_1 >>> 8 | 0;
         HEAP8[($59_1 + 2 | 0) >> 0] = $60_1 >>> 16 | 0;
         HEAP8[($59_1 + 3 | 0) >> 0] = $60_1 >>> 24 | 0;
         $61_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         HEAP8[($61_1 + 4 | 0) >> 0] = $7_1;
         HEAP8[($61_1 + 5 | 0) >> 0] = $7_1 >>> 8 | 0;
         HEAP8[($61_1 + 6 | 0) >> 0] = $7_1 >>> 16 | 0;
         HEAP8[($61_1 + 7 | 0) >> 0] = $7_1 >>> 24 | 0;
         HEAP8[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 0] = $11_1;
         HEAP8[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 9 | 0) >> 0] = $9_1;
         HEAP32[($4_1 + 52 | 0) >> 2] = 0;
        }
        $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
         break label$15
        }
        if (($6_1 | 0) < (0 | 0)) {
         break label$15
        }
        if (HEAP32[($4_1 + 96 | 0) >> 2] | 0) {
         break label$15
        }
        if (($6_1 | 0) == (HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0)) {
         break label$15
        }
        if ((HEAPU8[($2_1 + 17 | 0) >> 0] | 0) & 1 | 0) {
         break label$15
        }
        $332($0_1 | 0, 24 | 0, global$1 + 3419 | 0 | 0, 0 | 0);
        HEAP32[($4_1 + 96 | 0) >> 2] = 1;
       }
       $7_1 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
      }
      if ($7_1) {
       break label$12
      }
     }
     $292($1_1 | 0);
    }
    label$37 : {
     if (($6_1 | 0) < (0 | 0)) {
      break label$37
     }
     if (HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) {
      break label$37
     }
     if ((HEAPU8[($0_1 + 62 | 0) >> 0] | 0) & 1 | 0) {
      break label$37
     }
     $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    }
    label$38 : {
     if ((HEAP32[($0_1 + 760 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$38
     }
     if ((HEAP32[($0_1 + 764 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$38
     }
     $2_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     HEAP32[($3_1 + 124 | 0) >> 2] = 1;
     HEAP32[($3_1 + 120 | 0) >> 2] = $2_1;
     i64toi32_i32$3 = $0_1 + 760 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $485_1 = i64toi32_i32$5;
     i64toi32_i32$5 = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $485_1;
     HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] | 0;
     $488_1 = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$3;
     HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $488_1;
     HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$5;
     $356(i64toi32_i32$0 + 128 | 0 | 0, i64toi32_i32$0 + 24 | 0 | 0, i64toi32_i32$0 + 16 | 0 | 0);
     $495_1 = $0_1;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $65_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $65_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $498$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
     i64toi32_i32$3 = 0;
     $500_1 = i64toi32_i32$5;
     $500$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $498$hi;
     i64toi32_i32$0 = $65_1;
     i64toi32_i32$5 = $500$hi;
     i64toi32_i32$2 = $500_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $501_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = $495_1;
     HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] = $501_1;
     HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] = i64toi32_i32$5;
    }
    label$39 : {
     if ($8_1) {
      break label$39
     }
     if (!(HEAP32[($4_1 + 60 | 0) >> 2] | 0)) {
      break label$39
     }
     label$40 : {
      if (($6_1 | 0) > (-1 | 0)) {
       break label$40
      }
      $2_1 = 21;
      label$41 : {
       if (!((HEAPU8[($0_1 + 696 | 0) >> 0] | 0) & 1 | 0)) {
        break label$41
       }
       $2_1 = (HEAP32[($0_1 + 688 | 0) >> 2] | 0) + 20 | 0;
      }
      $7_1 = HEAP32[($4_1 + 104 | 0) >> 2] | 0;
      HEAP32[($4_1 + 104 | 0) >> 2] = $7_1 + 1 | 0;
      if (($7_1 | 0) < ($2_1 | 0)) {
       break label$39
      }
      $332($0_1 | 0, 16 | 0, global$1 + 3449 | 0 | 0, 0 | 0);
      HEAP32[($4_1 + 72 | 0) >> 2] = 1;
      $6_1 = -558323010;
      break label$39;
     }
     HEAP32[($4_1 + 72 | 0) >> 2] = 1;
    }
    HEAP32[($4_1 + 80 | 0) >> 2] = (HEAP32[($4_1 + 80 | 0) >> 2] | 0) + $6_1 | 0;
    label$42 : {
     label$43 : {
      label$44 : {
       if (($6_1 | 0) < (0 | 0)) {
        break label$44
       }
       $0_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       if (($0_1 | 0) > ($6_1 | 0)) {
        break label$43
       }
      }
      $177($5_1 | 0);
      $177(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
      break label$42;
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = $0_1 - $6_1 | 0;
     HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + $6_1 | 0;
     $0_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     HEAP32[($0_1 + 28 | 0) >> 2] = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) - $6_1 | 0;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$5 = -2147483648;
     HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$5;
     i64toi32_i32$5 = -2147483648;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$5;
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$5 = -2147483648;
     HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$5;
     i64toi32_i32$5 = -2147483648;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$5;
    }
    label$45 : {
     if (!(HEAP32[($3_1 + 156 | 0) >> 2] | 0)) {
      break label$45
     }
     if (!(HEAP32[($1_1 + 248 | 0) >> 2] | 0)) {
      break label$1
     }
    }
    $6_1 = ($6_1 >> 31 | 0) & $6_1 | 0;
   }
   global$0 = $3_1 + 160 | 0;
   return $6_1 | 0;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = 513;
  $0_1 = global$1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 + 2019 | 0;
  HEAP32[$3_1 >> 2] = $0_1 + 3525 | 0;
  $332(0 | 0, 0 | 0, $0_1 + 1982 | 0 | 0, $3_1 | 0);
  fimport$7();
  abort();
 }
 
 function $221($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($3_1 | 0) == (4 | 0)) {
     break label$1
    }
    $262($1_1 + ($3_1 << 2 | 0) | 0 | 0);
    $3_1 = $3_1 + 1 | 0;
    continue label$2;
   };
  }
  $343($2_1 + 12 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $222($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0;
  $1_1 = HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
  $2_1 = $1_1 + 32 | 0;
  $567($2_1 | 0) | 0;
  Atomics.store(HEAP32, ($1_1 + 1512 | 0) >> 2, 1);
  $3_1 = $1_1 + 60 | 0;
  $572($3_1 | 0) | 0;
  $568($2_1 | 0) | 0;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($4_1 | 0) < (HEAP32[($0_1 + 688 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     $4_1 = 0;
     label$4 : while (1) {
      if ($4_1 >>> 0 >= (HEAP32[($1_1 + 108 | 0) >> 2] | 0) >>> 0) {
       break label$1
      }
      $5_1 = $1_1 + ($4_1 << 4 | 0) | 0;
      $291($5_1 + 112 | 0 | 0);
      $176($5_1 + 116 | 0 | 0);
      $4_1 = $4_1 + 1 | 0;
      continue label$4;
     };
    }
    fimport$8(HEAP32[(($1_1 + ($4_1 << 2 | 0) | 0) + 1256 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
    $4_1 = $4_1 + 1 | 0;
    continue label$2;
   };
  }
  $569($2_1 | 0) | 0;
  $569($1_1 + 1168 | 0 | 0) | 0;
  $569($1_1 + 4 | 0 | 0) | 0;
  $573($3_1 | 0) | 0;
  $573($1_1 + 1196 | 0 | 0) | 0;
  $343((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 44 | 0 | 0);
 }
 
 function $223($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $194($1_1 | 0) | 0;
   $343($1_1 + 68 | 0 | 0);
   $343($1_1 + 736 | 0 | 0);
   $343($1_1 + 248 | 0 | 0);
   $343($1_1 + 252 | 0 | 0);
   $343($1_1 + 436 | 0 | 0);
   $343($0_1 | 0);
  }
 }
 
 function $224($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    FUNCTION_TABLE[$1_1 | 0]($0_1);
   }
   $343($0_1 | 0);
   $342($0_1 | 0);
  }
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!((HEAPU8[($0_1 + 696 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $233($0_1 | 0, HEAP32[($0_1 + 688 | 0) >> 2] | 0 | 0);
   return;
  }
  $236($0_1 | 0);
 }
 
 function $226($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0, $83_1 = 0;
  $4_1 = HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  $5_1 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
  $227($4_1 | 0);
  label$1 : {
   $6_1 = $228((HEAP32[$4_1 >> 2] | 0) + Math_imul(HEAP32[($4_1 + 148 | 0) >> 2] | 0, 284) | 0 | 0, $0_1 | 0, $3_1 | 0) | 0;
   if ($6_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ((HEAP32[($4_1 + 148 | 0) >> 2] | 0 | 0) <= (((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == (33 | 0) ^ -1 | 0) + (HEAP32[($0_1 + 688 | 0) >> 2] | 0) | 0 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 156 | 0) >> 2] = 0;
     break label$2;
    }
    if (!(HEAP32[($4_1 + 156 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = 0;
    $6_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
    if ($6_1) {
     break label$1
    }
   }
   label$4 : while (1) {
    $7_1 = $5_1;
    $8_1 = $5_1 + 1 | 0;
    label$5 : {
     $9_1 = HEAP32[$4_1 >> 2] | 0;
     $10_1 = $9_1 + Math_imul($5_1, 284) | 0;
     if (!(Atomics.load(HEAP32, ($10_1 + 236 | 0) >> 2) | 0)) {
      break label$5
     }
     $6_1 = $10_1 + 236 | 0;
     $5_1 = $10_1 + 188 | 0;
     $567($5_1 | 0) | 0;
     $11_1 = $10_1 + 112 | 0;
     label$6 : {
      label$7 : while (1) {
       if (!(Atomics.load(HEAP32, $6_1 >> 2) | 0)) {
        break label$6
       }
       $570($11_1 | 0, $5_1 | 0) | 0;
       continue label$7;
      };
     }
     $568($5_1 | 0) | 0;
    }
    $302($1_1 | 0, HEAP32[($10_1 + 224 | 0) >> 2] | 0 | 0);
    HEAP32[$2_1 >> 2] = HEAP32[($10_1 + 228 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($10_1 + 220 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = $83_1;
    HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($10_1 + 228 | 0) >> 2] = 0;
    $6_1 = HEAP32[($10_1 + 232 | 0) >> 2] | 0;
    HEAP32[($10_1 + 232 | 0) >> 2] = 0;
    $5_1 = ($8_1 | 0) < (HEAP32[($0_1 + 688 | 0) >> 2] | 0 | 0) ? $8_1 : 0;
    label$8 : {
     if (HEAP32[($3_1 + 28 | 0) >> 2] | 0) {
      break label$8
     }
     if (($6_1 | 0) < (0 | 0)) {
      break label$8
     }
     if (HEAP32[$2_1 >> 2] | 0) {
      break label$8
     }
     if (($5_1 | 0) != (HEAP32[($4_1 + 152 | 0) >> 2] | 0 | 0)) {
      continue label$4
     }
    }
    break label$4;
   };
   $229($0_1 | 0, HEAP32[(($9_1 + Math_imul($7_1, 284) | 0) + 216 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
   label$9 : {
    if ((HEAP32[($4_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($0_1 + 688 | 0) >> 2] | 0 | 0)) {
     break label$9
    }
    HEAP32[($4_1 + 148 | 0) >> 2] = 0;
   }
   HEAP32[($4_1 + 152 | 0) >> 2] = $5_1;
   if (($6_1 | 0) < (0 | 0)) {
    break label$1
   }
   $6_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  }
  $230($4_1 | 0);
  return $6_1 | 0;
 }
 
 function $227($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $0_1 + 68 | 0;
  $567($2_1 | 0) | 0;
  label$1 : {
   if (HEAP32[($0_1 + 144 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = 167;
   $0_1 = global$1;
   HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 + 5563 | 0;
   HEAP32[$1_1 >> 2] = $0_1 + 5546 | 0;
   $332(0 | 0, 0 | 0, $0_1 + 5516 | 0 | 0, $1_1 | 0);
   fimport$7();
   abort();
  }
  HEAP32[($0_1 + 144 | 0) >> 2] = 0;
  $572($0_1 + 96 | 0 | 0) | 0;
  $568($2_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $228($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($2_1 + 28 | 0) >> 2] | 0) {
     break label$2
    }
    $5_1 = 0;
    if (!((HEAPU8[((HEAP32[((HEAP32[($0_1 + 216 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 32 | 0)) {
     break label$1
    }
   }
   $6_1 = $0_1 + 160 | 0;
   $567($6_1 | 0) | 0;
   label$3 : {
    $1_1 = $231(HEAP32[($0_1 + 216 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    $568($6_1 | 0) | 0;
    return $1_1 | 0;
   }
   Atomics.store(HEAP32, ($0_1 + 280 | 0) >> 2, (HEAPU16[((HEAP32[($0_1 + 216 | 0) >> 2] | 0) + 578 | 0) >> 1] | 0) & 1 | 0);
   $232($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    label$5 : {
     if ((Atomics.load(HEAP32, ($4_1 + 236 | 0) >> 2) | 0 | 0) != (1 | 0)) {
      break label$5
     }
     $1_1 = $4_1 + 188 | 0;
     $567($1_1 | 0) | 0;
     $5_1 = $4_1 + 64 | 0;
     label$6 : {
      label$7 : while (1) {
       if ((Atomics.load(HEAP32, ($4_1 + 236 | 0) >> 2) | 0 | 0) != (1 | 0)) {
        break label$6
       }
       $570($5_1 | 0, $1_1 | 0) | 0;
       continue label$7;
      };
     }
     $568($1_1 | 0) | 0;
    }
    $4_1 = $229(HEAP32[($0_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 216 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
    if (!$4_1) {
     break label$4
    }
    $568($6_1 | 0) | 0;
    return $4_1 | 0;
   }
   $177(HEAP32[($0_1 + 220 | 0) >> 2] | 0 | 0);
   label$8 : {
    $4_1 = $185(HEAP32[($0_1 + 220 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0;
    if (($4_1 | 0) > (-1 | 0)) {
     break label$8
    }
    $568($6_1 | 0) | 0;
    $1_1 = global$1;
    $332(HEAP32[($0_1 + 216 | 0) >> 2] | 0 | 0, 16 | 0, $1_1 + 5590 | 0 | 0, 0 | 0);
    return $4_1 | 0;
   }
   Atomics.store(HEAP32, ($0_1 + 236 | 0) >> 2, 1);
   $571($0_1 + 16 | 0 | 0) | 0;
   $568($6_1 | 0) | 0;
   label$9 : {
    $4_1 = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
    if (HEAP32[($4_1 + 700 | 0) >> 2] | 0) {
     break label$9
    }
    label$10 : {
     if ((HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0) != (global$4 | 0)) {
      break label$10
     }
     if ((HEAP32[($4_1 + 400 | 0) >> 2] | 0 | 0) == (global$5 | 0)) {
      break label$9
     }
    }
    $1_1 = $0_1 + 64 | 0;
    $4_1 = $0_1 + 188 | 0;
    label$11 : while (1) {
     if ((Atomics.load(HEAP32, ($0_1 + 236 | 0) >> 2) | 0 | 0) == (4 | 0)) {
      break label$9
     }
     if (!(Atomics.load(HEAP32, ($0_1 + 236 | 0) >> 2) | 0)) {
      break label$9
     }
     $567($4_1 | 0) | 0;
     label$12 : {
      label$13 : while (1) {
       if ((Atomics.load(HEAP32, ($0_1 + 236 | 0) >> 2) | 0 | 0) != (1 | 0)) {
        break label$12
       }
       $570($1_1 | 0, $4_1 | 0) | 0;
       continue label$13;
      };
     }
     label$14 : {
      label$15 : {
       label$16 : {
        switch ((Atomics.load(HEAP32, ($0_1 + 236 | 0) >> 2) | 0) + -2 | 0 | 0) {
        case 0:
         (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $218(HEAP32[($0_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 252 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 256 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 232 | 0) >> 2] = wasm2js_i32$1;
         break label$15;
        case 1:
         break label$16;
        default:
         break label$14;
        };
       }
       (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $206(HEAP32[($0_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 260 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 264 | 0) >> 2] = wasm2js_i32$1;
      }
      Atomics.store(HEAP32, ($0_1 + 236 | 0) >> 2, 1);
      $571($1_1 | 0) | 0;
     }
     $568($4_1 | 0) | 0;
     continue label$11;
    };
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 148 | 0) >> 2] = (HEAP32[($3_1 + 148 | 0) >> 2] | 0) + 1 | 0;
   $5_1 = 0;
  }
  return $5_1 | 0;
 }
 
 function $229($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $14_1 = 0, $17_1 = 0, $47_1 = 0, $92_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0_1 | 0) != ($1_1 | 0)) {
       break label$4
      }
      $3_1 = 0;
      break label$3;
     }
     label$5 : {
      if ($2_1) {
       break label$5
      }
      if (HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) {
       break label$5
      }
      $3_1 = 0;
      break label$2;
     }
     i64toi32_i32$0 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
     $14_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 76 | 0) >> 2] = $14_1;
     HEAP32[($0_1 + 80 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[($1_1 + 760 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 764 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 760 | 0) >> 2] = $17_1;
     HEAP32[($0_1 + 764 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0_1 + 92 | 0) >> 2] = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     HEAP32[($0_1 + 96 | 0) >> 2] = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
     HEAP32[($0_1 + 112 | 0) >> 2] = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
     HEAP32[($0_1 + 768 | 0) >> 2] = HEAP32[($1_1 + 768 | 0) >> 2] | 0;
     HEAP32[($0_1 + 100 | 0) >> 2] = HEAP32[($1_1 + 100 | 0) >> 2] | 0;
     HEAP32[($0_1 + 104 | 0) >> 2] = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
     HEAP32[($0_1 + 140 | 0) >> 2] = HEAP32[($1_1 + 140 | 0) >> 2] | 0;
     HEAP32[($0_1 + 668 | 0) >> 2] = HEAP32[($1_1 + 668 | 0) >> 2] | 0;
     HEAP32[($0_1 + 672 | 0) >> 2] = HEAP32[($1_1 + 672 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 188 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 192 | 0) >> 2] | 0;
     $47_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 188 | 0) >> 2] = $47_1;
     HEAP32[($0_1 + 192 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($0_1 + 716 | 0) >> 2] = HEAP32[($1_1 + 716 | 0) >> 2] | 0;
     HEAP32[($0_1 + 720 | 0) >> 2] = HEAP32[($1_1 + 720 | 0) >> 2] | 0;
     HEAP32[($0_1 + 676 | 0) >> 2] = HEAP32[($1_1 + 676 | 0) >> 2] | 0;
     HEAP32[($0_1 + 84 | 0) >> 2] = HEAP32[($1_1 + 84 | 0) >> 2] | 0;
     HEAP32[($0_1 + 316 | 0) >> 2] = HEAP32[($1_1 + 316 | 0) >> 2] | 0;
     HEAP32[($0_1 + 320 | 0) >> 2] = HEAP32[($1_1 + 320 | 0) >> 2] | 0;
     HEAP32[($0_1 + 324 | 0) >> 2] = HEAP32[($1_1 + 324 | 0) >> 2] | 0;
     HEAP32[($0_1 + 328 | 0) >> 2] = HEAP32[($1_1 + 328 | 0) >> 2] | 0;
     HEAP32[($0_1 + 332 | 0) >> 2] = HEAP32[($1_1 + 332 | 0) >> 2] | 0;
     HEAP32[($0_1 + 592 | 0) >> 2] = HEAP32[($1_1 + 592 | 0) >> 2] | 0;
     HEAP32[($0_1 + 596 | 0) >> 2] = HEAP32[($1_1 + 596 | 0) >> 2] | 0;
     HEAP32[($0_1 + 348 | 0) >> 2] = HEAP32[($1_1 + 348 | 0) >> 2] | 0;
     HEAP32[($0_1 + 344 | 0) >> 2] = HEAP32[($1_1 + 344 | 0) >> 2] | 0;
     HEAP32[($0_1 + 352 | 0) >> 2] = HEAP32[($1_1 + 352 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 376 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 380 | 0) >> 2] | 0;
     $92_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 376 | 0) >> 2] = $92_1;
     HEAP32[($0_1 + 380 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] = HEAP32[((HEAP32[($1_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $3_1 = HEAP32[($0_1 + 860 | 0) >> 2] | 0;
       $4_1 = HEAP32[($1_1 + 860 | 0) >> 2] | 0;
       if ((($3_1 | 0) != (0 | 0) | 0) == (!$4_1 | 0)) {
        break label$7
       }
       if (!$3_1) {
        break label$6
       }
       if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
      }
      $3_1 = $0_1 + 860 | 0;
      $256($3_1 | 0);
      $4_1 = HEAP32[($1_1 + 860 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$6
      }
      $4_1 = $255($4_1 | 0) | 0;
      HEAP32[$3_1 >> 2] = $4_1;
      if ($4_1) {
       break label$6
      }
      return -48 | 0;
     }
     HEAP32[($0_1 + 884 | 0) >> 2] = HEAP32[($1_1 + 884 | 0) >> 2] | 0;
     $3_1 = $260((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[((HEAP32[($1_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$1
     }
    }
    if (!$2_1) {
     break label$2
    }
    HEAP32[($0_1 + 684 | 0) >> 2] = HEAP32[($1_1 + 684 | 0) >> 2] | 0;
    break label$1;
   }
   $2_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   return FUNCTION_TABLE[$2_1 | 0]($0_1, $1_1) | 0 | 0;
  }
  return $3_1 | 0;
 }
 
 function $230($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $0_1 + 68 | 0;
  $567($1_1 | 0) | 0;
  $2_1 = $0_1 + 96 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!(HEAP32[($0_1 + 144 | 0) >> 2] | 0)) {
     break label$1
    }
    $570($2_1 | 0, $1_1 | 0) | 0;
    continue label$2;
   };
  }
  HEAP32[($0_1 + 144 | 0) >> 2] = 1;
  $568($1_1 | 0) | 0;
 }
 
 function $231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
  HEAP32[($0_1 + 116 | 0) >> 2] = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
  HEAP32[($0_1 + 400 | 0) >> 2] = HEAP32[($1_1 + 400 | 0) >> 2] | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
  HEAP32[($0_1 + 576 | 0) >> 2] = HEAP32[($1_1 + 576 | 0) >> 2] | 0;
  HEAP32[($0_1 + 240 | 0) >> 2] = HEAP32[($1_1 + 240 | 0) >> 2] | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
  HEAP32[($0_1 + 912 | 0) >> 2] = HEAP32[($1_1 + 912 | 0) >> 2] | 0;
  HEAP32[($0_1 + 724 | 0) >> 2] = HEAP32[($1_1 + 724 | 0) >> 2] | 0;
  HEAP32[($0_1 + 728 | 0) >> 2] = HEAP32[($1_1 + 728 | 0) >> 2] | 0;
  HEAP32[($0_1 + 732 | 0) >> 2] = HEAP32[($1_1 + 732 | 0) >> 2] | 0;
  HEAP32[($0_1 + 360 | 0) >> 2] = HEAP32[($1_1 + 360 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 588 | 0) >> 2] | 0;
  HEAP32[($0_1 + 584 | 0) >> 2] = HEAP32[($1_1 + 584 | 0) >> 2] | 0;
  HEAP32[($0_1 + 588 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 700 | 0) >> 2] = HEAP32[($1_1 + 700 | 0) >> 2] | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($1_1 + 176 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    label$3 : {
     $2_1 = HEAP32[($1_1 + 184 | 0) >> 2] | 0;
     if ($2_1) {
      break label$3
     }
     $2_1 = $3_1;
     break label$2;
    }
    label$4 : {
     if ((HEAP32[($0_1 + 176 | 0) >> 2] | 0 | 0) >= ($3_1 | 0)) {
      break label$4
     }
     $2_1 = $348($0_1 + 184 | 0 | 0, $3_1 | 0, 4 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$1
     }
     $3_1 = HEAP32[($1_1 + 176 | 0) >> 2] | 0;
     $2_1 = HEAP32[($1_1 + 184 | 0) >> 2] | 0;
    }
    wasm2js_memory_copy(HEAP32[($0_1 + 184 | 0) >> 2] | 0, $2_1, $3_1 << 2 | 0);
    $2_1 = HEAP32[($1_1 + 176 | 0) >> 2] | 0;
   }
   HEAP32[($0_1 + 176 | 0) >> 2] = $2_1;
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $232($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = (HEAP32[$0_1 >> 2] | 0) + 12 | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if ((HEAP32[($0_1 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$2
     }
     $567($2_1 | 0) | 0;
     if ((HEAP32[((HEAP32[($0_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0 >= 2 >>> 0) {
      break label$1
     }
     $3_1 = (HEAP32[($0_1 + 244 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($0_1 + 244 | 0) >> 2] = $3_1;
     $3_1 = HEAP32[((HEAP32[($0_1 + 240 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] | 0;
     HEAP32[($3_1 + 64 | 0) >> 2] = $3_1;
     $292($3_1 | 0);
     $568($2_1 | 0) | 0;
     continue label$3;
    };
   }
   global$0 = $1_1 + 16 | 0;
   return;
  }
  HEAP32[($1_1 + 8 | 0) >> 2] = 397;
  $0_1 = global$1;
  HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 + 5563 | 0;
  HEAP32[$1_1 >> 2] = $0_1 + 5633 | 0;
  $332(0 | 0, 0 | 0, $0_1 + 5516 | 0 | 0, $1_1 | 0);
  fimport$7();
  abort();
 }
 
 function $233($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $3_1 = 0, $10_1 = 0, $5_1 = 0, $7_1 = 0, $2_1 = 0, $6_1 = 0, $9_1 = 0, $11_1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $3_1 = HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  $234($3_1 | 0, $1_1 | 0);
  label$1 : {
   $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   label$2 : {
    $4_1 = HEAP32[($4_1 + 216 | 0) >> 2] | 0;
    if ((HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    if (($229($0_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $332($0_1 | 0, 16 | 0, global$1 + 5393 | 0 | 0, 0 | 0);
   }
   $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $5_1 = HEAP32[$3_1 >> 2] | 0;
   if (($4_1 | 0) == ($5_1 | 0)) {
    break label$1
   }
   if (($229(HEAP32[($5_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 216 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $332($0_1 | 0, 16 | 0, global$1 + 5424 | 0 | 0, 0 | 0);
   $4_1 = HEAP32[((HEAP32[((HEAP32[$3_1 >> 2] | 0) + 216 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
   HEAP32[(HEAP32[((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 216 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = 1;
  }
  $6_1 = ($1_1 | 0) > (0 | 0) ? $1_1 : 0;
  $7_1 = 0;
  label$3 : while (1) {
   label$4 : {
    label$5 : {
     if (($7_1 | 0) == ($6_1 | 0)) {
      break label$5
     }
     $8_1 = (HEAP32[$3_1 >> 2] | 0) + Math_imul($7_1, 284) | 0;
     $9_1 = $8_1 + 216 | 0;
     $10_1 = HEAP32[($8_1 + 216 | 0) >> 2] | 0;
     if (!(HEAP32[($10_1 + 28 | 0) >> 2] | 0)) {
      break label$4
     }
     label$6 : {
      if ((HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) != (2 | 0)) {
       break label$6
      }
      $1_1 = $8_1 + 160 | 0;
      $567($1_1 | 0) | 0;
      HEAP32[($8_1 + 268 | 0) >> 2] = 1;
      $571($8_1 + 16 | 0 | 0) | 0;
      $568($1_1 | 0) | 0;
      fimport$8(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
     }
     label$7 : {
      $1_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$7
      }
      if (!(HEAP32[($8_1 + 8 | 0) >> 2] | 0)) {
       break label$7
      }
      FUNCTION_TABLE[$1_1 | 0]($10_1) | 0;
     }
     $11_1 = $10_1 + 28 | 0;
     $232($8_1 | 0);
     $4_1 = $8_1 + 240 | 0;
     $5_1 = $8_1 + 248 | 0;
     $1_1 = 0;
     label$8 : while (1) {
      label$9 : {
       if (($1_1 | 0) < (HEAP32[$5_1 >> 2] | 0 | 0)) {
        break label$9
       }
       $343($4_1 | 0);
       label$10 : {
        $1_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
        if (!$1_1) {
         break label$10
        }
        $4_1 = $10_1 + 24 | 0;
        label$11 : {
         if (!(HEAP32[($2_1 + 44 | 0) >> 2] | 0)) {
          break label$11
         }
         $351($1_1 | 0);
        }
        $343($4_1 | 0);
       }
       $343($10_1 + 184 | 0 | 0);
       $256((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 12 | 0 | 0);
       $343($11_1 | 0);
       $256($10_1 + 860 | 0 | 0);
       break label$4;
      }
      $291((HEAP32[$4_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
      $1_1 = $1_1 + 1 | 0;
      continue label$8;
     };
    }
    $343($3_1 | 0);
    $235($3_1 | 0, global$1 + 5488 | 0 | 0);
    $343((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 16 | 0 | 0);
    label$12 : {
     $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$12
     }
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$12
     }
     if (!(HEAP32[($4_1 + 44 | 0) >> 2] | 0)) {
      break label$12
     }
     $351($1_1 | 0);
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
    return;
   }
   $291($8_1 + 224 | 0 | 0);
   $235($8_1 | 0, global$1 + 5456 | 0 | 0);
   $176($8_1 + 220 | 0 | 0);
   $343($9_1 | 0);
   $7_1 = $7_1 + 1 | 0;
   continue label$3;
  };
 }
 
 function $234($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $6_1 = 0;
  $227($0_1 | 0);
  $2_1 = ($1_1 | 0) > (0 | 0) ? $1_1 : 0;
  $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($3_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $4_1 = (HEAP32[$0_1 >> 2] | 0) + Math_imul($3_1, 284) | 0;
     if (!(Atomics.load(HEAP32, ($4_1 + 236 | 0) >> 2) | 0)) {
      break label$3
     }
     $1_1 = $4_1 + 236 | 0;
     $5_1 = $4_1 + 188 | 0;
     $567($5_1 | 0) | 0;
     $6_1 = $4_1 + 112 | 0;
     label$4 : {
      label$5 : while (1) {
       if (!(Atomics.load(HEAP32, $1_1 >> 2) | 0)) {
        break label$4
       }
       $570($6_1 | 0, $5_1 | 0) | 0;
       continue label$5;
      };
     }
     $568($5_1 | 0) | 0;
    }
    HEAP32[($4_1 + 228 | 0) >> 2] = 0;
    $3_1 = $3_1 + 1 | 0;
    continue label$2;
   };
  }
  $230($0_1 | 0);
 }
 
 function $235($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + (HEAP32[$1_1 >> 2] | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $1_1 + 4 | 0;
    if (!$2_1) {
     break label$1
    }
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $569($0_1 + $1_1 | 0 | 0) | 0;
    $2_1 = $2_1 + -1 | 0;
    $1_1 = $3_1;
    continue label$2;
   };
  }
  label$3 : {
   label$4 : while (1) {
    if (!$2_1) {
     break label$3
    }
    $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$3
    }
    $3_1 = $3_1 + 4 | 0;
    $573($0_1 + $1_1 | 0 | 0) | 0;
    $2_1 = $2_1 + -1 | 0;
    continue label$4;
   };
  }
 }
 
 function $236($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  $361($1_1 | 0);
  $2_1 = $1_1 + 40 | 0;
  $3_1 = $1_1 + 44 | 0;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= (HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $569((HEAP32[$3_1 >> 2] | 0) + Math_imul($4_1, 28) | 0 | 0) | 0;
    $573((HEAP32[$2_1 >> 2] | 0) + Math_imul($4_1, 48) | 0 | 0) | 0;
    $4_1 = $4_1 + 1 | 0;
    continue label$2;
   };
  }
  $343($1_1 + 28 | 0 | 0);
  $343($3_1 | 0);
  $343($2_1 | 0);
  $343((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 16 | 0 | 0);
 }
 
 function $237($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  $1_1 = 1;
  label$2 : {
   if (HEAP32[($0_1 + 80 | 0) >> 2] | 0) {
    break label$2
   }
   if (HEAP32[($0_1 + 84 | 0) >> 2] | 0) {
    break label$2
   }
   $1_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  return $1_1 | 0;
 }
 
 function $238($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  $1_1 = 1;
  label$2 : {
   if (HEAP32[($0_1 + 88 | 0) >> 2] | 0) {
    break label$2
   }
   $1_1 = (HEAP32[($0_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  return $1_1 | 0;
 }
 
 function $239($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $25_1 = 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 876 | 0) >> 2] | 0;
  $3_1 = $318($1_1 | 0, $2_1 | 0, HEAP32[($0_1 + 872 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0, -1 | 0, 0 | 0, $0_1 | 0) | 0;
  $4_1 = ($3_1 | 0) < (0 | 0);
  $2_1 = $4_1 ? 0 : $2_1;
  HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
  $1_1 = $4_1 ? 0 : $1_1;
  HEAP32[($0_1 + 100 | 0) >> 2] = $1_1;
  $25_1 = 0 - $2_1 | 0;
  $2_1 = HEAP32[($0_1 + 680 | 0) >> 2] | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = 0 - ($25_1 >> $2_1 | 0) | 0;
  HEAP32[($0_1 + 92 | 0) >> 2] = 0 - ((0 - $1_1 | 0) >> $2_1 | 0) | 0;
  return $3_1 | 0;
 }
 
 function $240($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    $4_1 = $353(HEAP32[($0_1 + 112 | 0) >> 2] | 0 | 0) | 0;
    if ($4_1) {
     break label$2
    }
    $4_1 = 1;
    $5_1 = 1;
    break label$1;
   }
   $5_1 = 1 << (HEAPU8[($4_1 + 6 | 0) >> 0] | 0) | 0;
   $4_1 = 1 << (HEAPU8[($4_1 + 5 | 0) >> 0] | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch (HEAP32[($0_1 + 112 | 0) >> 2] | 0 | 0) {
    case 0:
    case 1:
    case 4:
    case 5:
    case 8:
    case 12:
    case 13:
    case 14:
    case 15:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 110:
    case 113:
    case 114:
    case 115:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 154:
    case 155:
    case 156:
    case 157:
    case 163:
    case 164:
    case 187:
    case 188:
    case 189:
    case 190:
     $5_1 = 32;
     $4_1 = 16;
     break label$3;
    case 7:
    case 16:
    case 140:
     $4_1 = 32;
     $5_1 = 32;
     break label$3;
    case 6:
     $6_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == (22 | 0);
     $5_1 = $6_1 ? 64 : $5_1;
     $4_1 = $6_1 ? 64 : $4_1;
     break label$3;
    case 39:
     $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $7_1 = ($6_1 | 0) == (42 | 0);
     $6_1 = ($6_1 | 0) == (39 | 0);
     $5_1 = $6_1 ? 8 : $7_1 ? 4 : $5_1;
     $4_1 = $6_1 ? 8 : $7_1 ? 4 : $4_1;
     break label$3;
    case 11:
    case 17:
    case 20:
     label$11 : {
      label$12 : {
       $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (($6_1 | 0) == (49 | 0)) {
        break label$12
       }
       if (($6_1 | 0) != (43 | 0)) {
        break label$11
       }
      }
      $4_1 = 4;
      $5_1 = 4;
     }
     label$13 : {
      if (($6_1 | 0) == (148 | 0)) {
       break label$13
      }
      if (($6_1 | 0) != (39 | 0)) {
       break label$3
      }
     }
     $4_1 = 8;
     $5_1 = 8;
     break label$3;
    case 3:
     $6_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + -53 | 0) >>> 0 < 2 >>> 0;
     $5_1 = $6_1 ? 4 : $5_1;
     $4_1 = $6_1 ? 4 : $4_1;
     break label$3;
    case 2:
     break label$4;
    default:
     break label$3;
    };
   }
   $6_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == (43 | 0);
   $5_1 = $6_1 ? 4 : $5_1;
   $4_1 = $6_1 ? 4 : $4_1;
  }
  $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $4_1 = ($6_1 | 0) == (136 | 0) ? (($4_1 | 0) > (8 | 0) ? $4_1 : 8) : $4_1;
  HEAP32[$1_1 >> 2] = (((HEAP32[$1_1 >> 2] | 0) + $4_1 | 0) + -1 | 0) & (0 - $4_1 | 0) | 0;
  $4_1 = (($5_1 + (HEAP32[$2_1 >> 2] | 0) | 0) + -1 | 0) & (0 - $5_1 | 0) | 0;
  HEAP32[$2_1 >> 2] = $4_1;
  label$14 : {
   label$15 : {
    if (($6_1 | 0) == (27 | 0)) {
     break label$15
    }
    if (HEAP32[($0_1 + 680 | 0) >> 2] | 0) {
     break label$15
    }
    $0_1 = $6_1 + -90 | 0;
    if ($0_1 >>> 0 > 16 >>> 0) {
     break label$14
    }
    if (!((1 << $0_1 | 0) & 65543 | 0)) {
     break label$14
    }
   }
   HEAP32[$2_1 >> 2] = $4_1 + 2 | 0;
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = ($4_1 | 0) > (32 | 0) ? $4_1 : 32;
  }
  $4_1 = 0;
  label$16 : {
   label$17 : while (1) {
    if (($4_1 | 0) == (4 | 0)) {
     break label$16
    }
    HEAP32[($3_1 + ($4_1 << 2 | 0) | 0) >> 2] = 8;
    $4_1 = $4_1 + 1 | 0;
    continue label$17;
   };
  }
 }
 
 function $241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = $1_1 + 1 | 0;
   $2_1 = 0;
   label$2 : {
    label$3 : while (1) {
     if (($2_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $0_1 = $2_1 << 2 | 0;
     $2_1 = $2_1 + 1 | 0;
     if (HEAP32[($3_1 + $0_1 | 0) >> 2] | 0) {
      continue label$3
     }
     break label$3;
    };
    return 0 | 0;
   }
   $2_1 = HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $2_1 | 0;
 }
 
 function $242($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = $2_1 >>> 0 > 1 >>> 0 ? $2_1 : 1;
  $4_1 = $3_1 + -1 | 0;
  $5_1 = 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($5_1 | 0) == ($4_1 | 0)) {
      break label$3
     }
     $6_1 = $5_1 + 1 | 0;
     $7_1 = HEAPU8[$1_1 >> 0] | 0;
     if ($7_1) {
      break label$2
     }
     $4_1 = $5_1;
     $3_1 = $6_1;
    }
    label$4 : {
     if ($3_1 >>> 0 > $2_1 >>> 0) {
      break label$4
     }
     HEAP8[$0_1 >> 0] = 0;
    }
    return ($685($1_1 | 0) | 0) + $4_1 | 0 | 0;
   }
   HEAP8[$0_1 >> 0] = $7_1;
   $0_1 = $0_1 + 1 | 0;
   $1_1 = $1_1 + 1 | 0;
   $5_1 = $6_1;
   continue label$1;
  };
 }
 
 function $243($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = $685($0_1 | 0) | 0;
    if (($3_1 + 1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $2_1 = $685($1_1 | 0) | 0;
    break label$1;
   }
   $2_1 = $242($0_1 + $3_1 | 0 | 0, $1_1 | 0, $2_1 - $3_1 | 0 | 0) | 0;
  }
  return $2_1 + $3_1 | 0 | 0;
 }
 
 function $244($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP8[($0_1 + 16 | 0) >> 0] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = $0_1 + 16 | 0;
  $2_1 = ($2_1 | 0) == (1 | 0) ? 1008 : $2_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $2_1 >>> 0 < 1008 >>> 0 ? $2_1 : 1008;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $245($0_1 | 0, $1_1 + -1 | 0 | 0) | 0;
  }
 }
 
 function $245($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $26_1 = 0, $42_1 = 0;
  $2_1 = -29;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($3_1 | 0) == ($4_1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($246($0_1 | 0) | 0) {
     break label$2
    }
    return -1094995529 | 0;
   }
   label$3 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $5_1 = ($2_1 | 0) == ($0_1 + 16 | 0 | 0) ? 0 : $2_1;
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $26_1 = $2_1;
    $2_1 = -2 - $2_1 | 0;
    $2_1 = ($26_1 + ($2_1 >>> 0 > $1_1 >>> 0 ? $1_1 : $2_1) | 0) + 1 | 0;
    $42_1 = $4_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $4_1;
    $4_1 = $3_1 >>> 0 > ($4_1 >>> 1 | 0) >>> 0 ? $4_1 : $3_1 << 1 | 0;
    $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $42_1 : $4_1;
    $4_1 = $339($5_1 | 0, $2_1 | 0) | 0;
    if ($4_1) {
     break label$3
    }
    return -48 | 0;
   }
   label$4 : {
    if ($5_1) {
     break label$4
    }
    wasm2js_memory_copy($4_1, HEAP32[$0_1 >> 2] | 0, (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 1 | 0);
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[$0_1 >> 2] = $4_1;
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $246($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 | 0;
 }
 
 function $247($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : while (1) {
    $4_1 = 0;
    $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $7_1 = $5_1 - $6_1 | 0;
    $7_1 = $7_1 >>> 0 > $5_1 >>> 0 ? 0 : $7_1;
    label$3 : {
     if ($5_1 >>> 0 <= $6_1 >>> 0) {
      break label$3
     }
     $4_1 = (HEAP32[$0_1 >> 2] | 0) + $6_1 | 0;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
    $5_1 = $540($4_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    if (($5_1 | 0) < (1 | 0)) {
     break label$1
    }
    label$4 : {
     if ($5_1 >>> 0 < $7_1 >>> 0) {
      break label$4
     }
     if (!($245($0_1 | 0, $5_1 | 0) | 0)) {
      continue label$2
     }
    }
    break label$2;
   };
   $248($0_1 | 0, $5_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $248($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $23_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = -6 - $2_1 | 0;
  $1_1 = ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) + $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $23_1 = HEAP32[$0_1 >> 2] | 0;
   $0_1 = $2_1 + -1 | 0;
   HEAP8[($23_1 + ($1_1 >>> 0 > $0_1 >>> 0 ? $0_1 : $1_1) | 0) >> 0] = 0;
  }
 }
 
 function $249($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    $4_1 = 0;
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $6_1 = $2_1 - $5_1 | 0;
    $6_1 = $6_1 >>> 0 > $2_1 >>> 0 ? 0 : $6_1;
    label$3 : {
     if ($2_1 >>> 0 <= $5_1 >>> 0) {
      break label$3
     }
     $4_1 = (HEAP32[$0_1 >> 2] | 0) + $5_1 | 0;
    }
    $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
    $2_1 = $540($4_1 | 0, $6_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    if (($2_1 | 0) < (1 | 0)) {
     break label$1
    }
    label$4 : {
     if ($2_1 >>> 0 < $6_1 >>> 0) {
      break label$4
     }
     if (!($245($0_1 | 0, $2_1 | 0) | 0)) {
      continue label$2
     }
    }
    break label$2;
   };
   $248($0_1 | 0, $2_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $250($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $3_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 1 | 0;
  $2_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $4_1 = $0_1 + 16 | 0;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (($3_1 | 0) == ($4_1 | 0)) {
       break label$4
      }
      label$5 : {
       $3_1 = $339($3_1 | 0, $2_1 | 0) | 0;
       if ($3_1) {
        break label$5
       }
       $3_1 = HEAP32[$0_1 >> 2] | 0;
      }
      $5_1 = 0;
      HEAP32[$0_1 >> 2] = 0;
      break label$3;
     }
     label$6 : {
      $3_1 = $338($2_1 | 0) | 0;
      if ($3_1) {
       break label$6
      }
      $5_1 = -48;
      $3_1 = 0;
      break label$3;
     }
     wasm2js_memory_copy($3_1, HEAP32[$0_1 >> 2] | 0, $2_1);
     $5_1 = 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    break label$1;
   }
   $5_1 = 0;
   if (($3_1 | 0) == ($4_1 | 0)) {
    break label$1
   }
   $343($0_1 | 0);
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  return $5_1 | 0;
 }
 
 function $251($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = $346(28 | 0) | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $7_1 = 0;
  label$1 : {
   if (!$6_1) {
    break label$1
   }
   HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$6_1 >> 2] = $0_1;
   HEAP32[($6_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = 1;
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 ? $2_1 : global$3 + 31 | 0;
   label$2 : {
    $2_1 = $346(12 | 0) | 0;
    if ($2_1) {
     break label$2
    }
    $343($5_1 + 12 | 0 | 0);
    break label$1;
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   HEAP32[$2_1 >> 2] = $6_1;
   $7_1 = $2_1;
  }
  global$0 = $5_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $252($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $342($1_1 | 0);
 }
 
 function $253($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $338($0_1 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    $0_1 = $251($2_1 | 0, $0_1 | 0, global$3 + 31 | 0 | 0, 0 | 0, 0 | 0) | 0;
    if ($0_1) {
     break label$1
    }
    $343($1_1 + 12 | 0 | 0);
   }
   $0_1 = 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $254($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $253($0_1 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   wasm2js_memory_fill(HEAP32[($1_1 + 4 | 0) >> 2] | 0, 0, $0_1);
  }
  return $1_1 | 0;
 }
 
 function $255($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $1_1 = $346(12 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   return 0 | 0;
  }
  i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  Atomics.add(HEAP32, ((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2, 1);
  return $1_1 | 0;
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $257($0_1 | 0, 0 | 0);
  }
 }
 
 function $257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0_1 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $0_1 = $1_1;
  }
  $343($0_1 | 0);
  label$2 : {
   if ((Atomics.sub(HEAP32, ($4_1 + 8 | 0) >> 2, 1) | 0) != (1 | 0)) {
    break label$2
   }
   $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 16 | 0) >> 2] | 0, HEAP32[$0_1 >> 2] | 0);
   $343($2_1 + 12 | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $258($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   $0_1 = HEAP32[$0_1 >> 2] | 0;
   if ((HEAPU8[($0_1 + 20 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $1_1 = (Atomics.load(HEAP32, ($0_1 + 8 | 0) >> 2) | 0 | 0) == (1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $259($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = $339(0 | 0, $1_1 | 0) | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
    $4_1 = -48;
    if (!$3_1) {
     break label$1
    }
    label$3 : {
     $1_1 = $251($3_1 | 0, $1_1 | 0, global$3 + 31 | 0 | 0, 0 | 0, 0 | 0) | 0;
     if ($1_1) {
      break label$3
     }
     $343($2_1 + 12 | 0 | 0);
     break label$1;
    }
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    $4_1 = 0;
    break label$1;
   }
   $4_1 = 0;
   if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$4 : {
    label$5 : {
     if (!((HEAPU8[((HEAP32[$3_1 >> 2] | 0) + 24 | 0) >> 0] | 0) & 1 | 0)) {
      break label$5
     }
     if (!($258($3_1 | 0) | 0)) {
      break label$5
     }
     $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if (($5_1 | 0) == (HEAP32[(HEAP32[$3_1 >> 2] | 0) >> 2] | 0 | 0)) {
      break label$4
     }
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = 0;
    $4_1 = $259($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
    if (($4_1 | 0) < (0 | 0)) {
     break label$1
    }
    $64_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $3_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    wasm2js_memory_copy(HEAP32[((HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, $64_1, ($3_1 | 0) < ($1_1 | 0) ? $3_1 : $1_1);
    $257($0_1 | 0, $2_1 + 8 | 0 | 0);
    $4_1 = 0;
    break label$1;
   }
   label$6 : {
    $0_1 = $339($5_1 | 0, $1_1 | 0) | 0;
    if ($0_1) {
     break label$6
    }
    $4_1 = -48;
    break label$1;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
   $5_1 = HEAP32[$3_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $0_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $260($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $256($0_1 | 0);
    break label$1;
   }
   label$3 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$2_1) {
     break label$3
    }
    if ((HEAP32[$2_1 >> 2] | 0 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   label$4 : {
    $1_1 = $255($1_1 | 0) | 0;
    if ($1_1) {
     break label$4
    }
    return -48 | 0;
   }
   $256($0_1 | 0);
   HEAP32[$0_1 >> 2] = $1_1;
  }
  return 0 | 0;
 }
 
 function $261($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = $346(56 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $566($2_1 | 0, 0 | 0) | 0;
  HEAP32[($2_1 + 36 | 0) >> 2] = $0_1;
  HEAP32[($2_1 + 32 | 0) >> 2] = 1;
  HEAP32[($2_1 + 44 | 0) >> 2] = $1_1 ? $1_1 : global$3 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
   $567($1_1 | 0) | 0;
   $263($1_1 | 0);
   $568($1_1 | 0) | 0;
   if ((Atomics.sub(HEAP32, ($1_1 + 32 | 0) >> 2, 1) | 0) != (1 | 0)) {
    break label$1
   }
   $264($1_1 | 0);
  }
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$1
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0](HEAP32[($2_1 + 4 | 0) >> 2] | 0, HEAP32[$2_1 >> 2] | 0);
    $343($1_1 + 12 | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $264($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $263($0_1 | 0);
  $569($0_1 | 0) | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[$2_1 | 0](HEAP32[($0_1 + 40 | 0) >> 2] | 0);
  }
  $343($1_1 + 12 | 0 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $265($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $567($0_1 | 0) | 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    $2_1 = global$3;
    $3_1 = 0;
    $2_1 = $251(HEAP32[$1_1 >> 2] | 0 | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $2_1 + 33 | 0 | 0, $1_1 | 0, 0 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
    HEAP32[($0_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    HEAP32[($1_1 + 16 | 0) >> 2] = 0;
    $3_1 = $2_1;
    break label$1;
   }
   $3_1 = $267($0_1 | 0) | 0;
  }
  $568($0_1 | 0) | 0;
  label$3 : {
   if (!$3_1) {
    break label$3
   }
   Atomics.add(HEAP32, ($0_1 + 32 | 0) >> 2, 1);
  }
  return $3_1 | 0;
 }
 
 function $266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $567($2_1 | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = $0_1;
  $568($2_1 | 0) | 0;
  label$1 : {
   if ((Atomics.sub(HEAP32, ($2_1 + 32 | 0) >> 2, 1) | 0) != (1 | 0)) {
    break label$1
   }
   $264($2_1 | 0);
  }
 }
 
 function $267($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
      if ($3_1) {
       break label$4
      }
      if ($2_1) {
       break label$3
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = 349;
      $0_1 = global$1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 + 5752 | 0;
      HEAP32[$1_1 >> 2] = $0_1 + 5771 | 0;
      $332(0 | 0, 0 | 0, $0_1 + 5722 | 0 | 0, $1_1 | 0);
      fimport$7();
      abort();
     }
     if (!$2_1) {
      break label$2
     }
    }
    $2_1 = FUNCTION_TABLE[$2_1 | 0](HEAP32[($0_1 + 40 | 0) >> 2] | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
    break label$1;
   }
   $2_1 = FUNCTION_TABLE[$3_1 | 0](HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0;
  }
  HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
  $4_1 = 0;
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   label$6 : {
    $3_1 = $346(20 | 0) | 0;
    if ($3_1) {
     break label$6
    }
    $256($1_1 + 12 | 0 | 0);
    break label$5;
   }
   $4_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
   $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($4_1 + 12 | 0) >> 2] = global$3 + 33 | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $3_1;
   $4_1 = $2_1;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $268($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var $1_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $11_1 = 0, $28_1 = 0, $31_1 = 0;
  i64toi32_i32$0 = $0$hi;
  $1_1 = $0_1;
  $1_1 = $1_1 - (($1_1 >>> 1 | 0) & 1431655765 | 0) | 0;
  $1_1 = (($1_1 >>> 2 | 0) & 858993459 | 0) + ($1_1 & 858993459 | 0) | 0;
  $1_1 = (($1_1 >>> 4 | 0) + $1_1 | 0) & 252645135 | 0;
  $1_1 = ($1_1 >>> 8 | 0) + $1_1 | 0;
  $28_1 = (($1_1 >>> 16 | 0) + $1_1 | 0) & 63 | 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $31_1 = $10_1;
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 33;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $11_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $11_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $1_1 = $31_1 - ($11_1 & 1431655765 | 0) | 0;
  $1_1 = (($1_1 >>> 2 | 0) & 858993459 | 0) + ($1_1 & 858993459 | 0) | 0;
  $1_1 = (($1_1 >>> 4 | 0) + $1_1 | 0) & 252645135 | 0;
  $1_1 = ($1_1 >>> 8 | 0) + $1_1 | 0;
  return $28_1 + ((($1_1 >>> 16 | 0) + $1_1 | 0) & 63 | 0) | 0 | 0;
 }
 
 function $269($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $10_1 = 0, $8_1 = 0, $9_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $12_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $4_1 = 0;
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    $4_1 = (($2_1 - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >> 3 | 0) + 1 | 0;
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $5_1 = $4_1 >>> 0 > $2_1 >>> 0 ? $4_1 : $2_1;
   $6_1 = $3_1 & 1 | 0;
   $7_1 = !($3_1 & 2 | 0);
   label$3 : while (1) {
    if (($4_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $9_1 = HEAP32[($8_1 + ($4_1 << 3 | 0) | 0) >> 2] | 0;
    $3_1 = 0;
    label$4 : {
     label$5 : {
      if (!$6_1) {
       break label$5
      }
      label$6 : while (1) {
       $10_1 = HEAPU8[($9_1 + $3_1 | 0) >> 0] | 0;
       $2_1 = HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0;
       if (($10_1 | 0) != ($2_1 | 0)) {
        break label$4
       }
       $3_1 = $3_1 + 1 | 0;
       if ($2_1) {
        continue label$6
       }
       break label$4;
      };
     }
     label$7 : while (1) {
      $10_1 = HEAP8[($9_1 + $3_1 | 0) >> 0] | 0;
      $11_1 = $270($10_1 | 0) | 0;
      $2_1 = HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0;
      $12_1 = $270($2_1 << 24 >> 24 | 0) | 0;
      if (!$2_1) {
       break label$4
      }
      $3_1 = $3_1 + 1 | 0;
      if (($11_1 | 0) == ($12_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     if ($2_1) {
      break label$8
     }
     if ($7_1 & ($10_1 & 255 | 0 | 0) != (0 | 0) | 0) {
      break label$8
     }
     return $8_1 + ($4_1 << 3 | 0) | 0 | 0;
    }
    $4_1 = $4_1 + 1 | 0;
    continue label$3;
   };
  }
  return 0 | 0;
 }
 
 function $270($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 + -97 | 0) >>> 0 < 26 >>> 0 ? $0_1 ^ 32 | 0 : $0_1) | 0;
 }
 
 function $271($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $119_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   if ($3_1 & 64 | 0) {
    break label$1
   }
   $6_1 = $269($5_1 | 0, $1_1 | 0, 0 | 0, $3_1 | 0) | 0;
  }
  $7_1 = $1_1;
  label$2 : {
   if ($3_1 & 4 | 0) {
    break label$2
   }
   $7_1 = $349($1_1 | 0) | 0;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $7_1;
  label$3 : {
   label$4 : {
    if (!($3_1 & 8 | 0)) {
     break label$4
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = $2_1;
    $8_1 = $2_1;
    break label$3;
   }
   label$5 : {
    if ($7_1) {
     break label$5
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $349($2_1 | 0) | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $8_1;
  }
  label$6 : {
   label$7 : {
    label$8 : {
     if ($5_1) {
      break label$8
     }
     $5_1 = $346(8 | 0) | 0;
     HEAP32[$0_1 >> 2] = $5_1;
     if ($5_1) {
      break label$8
     }
     $1_1 = $8_1;
     break label$7;
    }
    label$9 : {
     label$10 : {
      if (!$1_1) {
       break label$10
      }
      if ($7_1) {
       break label$10
      }
      $1_1 = $8_1;
      break label$9;
     }
     label$11 : {
      if (!$2_1) {
       break label$11
      }
      $1_1 = 0;
      if (!$8_1) {
       break label$9
      }
     }
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         label$16 : {
          label$17 : {
           if (!$6_1) {
            break label$17
           }
           label$18 : {
            if (!($3_1 & 16 | 0)) {
             break label$18
            }
            $342($7_1 | 0);
            $342($8_1 | 0);
            $3_1 = 0;
            break label$6;
           }
           $1_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
           if (!($3_1 & 32 | 0)) {
            break label$16
           }
           HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
           break label$15;
          }
          if (!$8_1) {
           break label$13
          }
          $1_1 = $8_1;
          $7_1 = $347(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[$5_1 >> 2] | 0) + 1 | 0 | 0, 8 | 0) | 0;
          if (!$7_1) {
           break label$9
          }
          HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
          break label$14;
         }
         $342($1_1 | 0);
        }
        $342(HEAP32[$6_1 >> 2] | 0 | 0);
        $1_1 = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        HEAP32[$5_1 >> 2] = $1_1;
        i64toi32_i32$2 = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + ($1_1 << 3 | 0) | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        HEAP32[$6_1 >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
        HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
        if (!$8_1) {
         break label$13
        }
       }
       $1_1 = HEAP32[$5_1 >> 2] | 0;
       $7_1 = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + ($1_1 << 3 | 0) | 0;
       HEAP32[$7_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       label$19 : {
        if (!($3_1 & 32 | 0)) {
         break label$19
        }
        $3_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
        if (!$3_1) {
         break label$19
        }
        $119_1 = $685($3_1 | 0) | 0;
        $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        $2_1 = ($119_1 + ($685($1_1 | 0) | 0) | 0) + 1 | 0;
        $7_1 = $346($2_1 | 0) | 0;
        if (!$7_1) {
         break label$9
        }
        $243($7_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
        $343($4_1 + 12 | 0 | 0);
        $243($7_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
        HEAP32[(((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = $7_1;
        $343($4_1 + 4 | 0 | 0);
        $1_1 = HEAP32[$5_1 >> 2] | 0;
       }
       $1_1 = $1_1 + 1 | 0;
       HEAP32[$5_1 >> 2] = $1_1;
       break label$12;
      }
      $343($4_1 + 8 | 0 | 0);
      $1_1 = HEAP32[$5_1 >> 2] | 0;
     }
     $3_1 = 0;
     if ($1_1) {
      break label$6
     }
     $343($5_1 + 4 | 0 | 0);
     $343($0_1 | 0);
     break label$6;
    }
    if (HEAP32[$5_1 >> 2] | 0) {
     break label$7
    }
    $343($5_1 + 4 | 0 | 0);
    $343($0_1 | 0);
   }
   $342(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
   $342($1_1 | 0);
   $3_1 = -48;
  }
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $272($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = $1_1 + 4 | 0;
   label$2 : {
    label$3 : while (1) {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     $4_1 = $3_1 + -1 | 0;
     HEAP32[$1_1 >> 2] = $4_1;
     if (!$3_1) {
      break label$2
     }
     $343((HEAP32[($1_1 + 4 | 0) >> 2] | 0) + ($4_1 << 3 | 0) | 0 | 0);
     $343(((HEAP32[($1_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$1_1 >> 2] | 0) << 3 | 0) | 0) + 4 | 0 | 0);
     continue label$3;
    };
   }
   $343($2_1 | 0);
  }
  $343($0_1 | 0);
 }
 
 function $273($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    $3_1 = $269($1_1 | 0, global$1 + 5799 | 0 | 0, $3_1 | 0, 2 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    return 0 | 0;
   }
   $4_1 = $271($0_1 | 0, HEAP32[$3_1 >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0;
   if (($4_1 | 0) > (-1 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return $4_1 | 0;
 }
 
 function $274($0_1) {
  $0_1 = $0_1 | 0;
  return $275($338($0_1 | 0) | 0 | 0, $0_1 | 0) | 0 | 0;
 }
 
 function $275($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $2_1 = $346(24 | 0) | 0;
    if ($2_1) {
     break label$2
    }
    $342($0_1 | 0);
    return 0 | 0;
   }
   HEAP32[$2_1 >> 2] = $0_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $0_1 + $1_1 | 0;
   $276($2_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $276($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $277($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $343($0_1 | 0);
   $342($0_1 | 0);
  }
 }
 
 function $278($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $277(HEAP32[$0_1 >> 2] | 0 | 0);
   HEAP32[$0_1 >> 2] = 0;
  }
 }
 
 function $279($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function $280($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) - ($279($0_1 | 0) | 0) | 0 | 0;
 }
 
 function $281($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0, $40_1 = 0, $44_1 = 0, $47_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $3_1 = $279($0_1 | 0) | 0;
   label$2 : {
    $1_1 = $274($1_1 | 0) | 0;
    if ($1_1) {
     break label$2
    }
    return -48 | 0;
   }
   $2_1 = 0;
   $282($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $3_1 | 0, 0 | 0) | 0;
   $4_1 = $1_1 + 8 | 0;
   HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + $3_1 | 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
   $342(HEAP32[$0_1 >> 2] | 0 | 0);
   i64toi32_i32$2 = $1_1 + 16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $40_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $40_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $44_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $44_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $47_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[$0_1 >> 2] = $47_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $342($1_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $282($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  label$1 : while (1) {
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $5_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) - $4_1 | 0;
   $5_1 = ($5_1 | 0) > ($2_1 | 0) ? $2_1 : $5_1;
   label$2 : {
    label$3 : {
     if (!$3_1) {
      break label$3
     }
     FUNCTION_TABLE[$3_1 | 0]($1_1, $4_1, $5_1);
     break label$2;
    }
    wasm2js_memory_copy($1_1, $4_1, $5_1);
    $1_1 = $1_1 + $5_1 | 0;
   }
   $283($0_1 | 0, $5_1 | 0);
   $2_1 = $2_1 - $5_1 | 0;
   if (($2_1 | 0) > (0 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return 0 | 0;
 }
 
 function $283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if ($2_1 >>> 0 < $3_1 >>> 0) {
    break label$1
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + ((HEAP32[$0_1 >> 2] | 0) - $3_1 | 0) | 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $284($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $5_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $4_1 = -28;
  label$1 : {
   $5_1 = $279($0_1 | 0) | 0;
   if ($5_1 >>> 0 > ($1_1 ^ -1 | 0) >>> 0) {
    break label$1
   }
   $4_1 = 0;
   $2_1 = $3_1 - $2_1 | 0;
   $1_1 = $5_1 + $1_1 | 0;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $4_1 = $2_1 << 1 | 0;
   $4_1 = $281($0_1 | 0, ($1_1 >>> 0 > $4_1 >>> 0 ? $1_1 : $4_1) | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $285($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $8_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0;
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $7_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    $8_1 = $4_1 - $5_1 | 0;
    $8_1 = ($8_1 | 0) > ($7_1 | 0) ? $7_1 : $8_1;
    label$3 : {
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $8_1 = FUNCTION_TABLE[$3_1 | 0]($1_1, $5_1, $8_1) | 0;
      if (($8_1 | 0) >= (1 | 0)) {
       break label$3
      }
      break label$1;
     }
     wasm2js_memory_copy($5_1, $1_1, $8_1);
     $1_1 = $1_1 + $8_1 | 0;
    }
    label$5 : {
     $5_1 = $5_1 + $8_1 | 0;
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if ($5_1 >>> 0 < $4_1 >>> 0) {
      break label$5
     }
     $5_1 = HEAP32[$0_1 >> 2] | 0;
    }
    $6_1 = $8_1 + $6_1 | 0;
    $7_1 = $7_1 - $8_1 | 0;
    if (($7_1 | 0) > (0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $6_1;
  return $2_1 - $7_1 | 0 | 0;
 }
 
 function $286($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 292 | 0) >> 2] | 0;
   if ($4_1 >>> 0 > 536870910 >>> 0) {
    break label$1
   }
   $4_1 = $339(HEAP32[($0_1 + 288 | 0) >> 2] | 0 | 0, ($4_1 << 2 | 0) + 4 | 0 | 0) | 0;
   if (!$4_1) {
    break label$1
   }
   HEAP32[($0_1 + 288 | 0) >> 2] = $4_1;
   $4_1 = $346(20 | 0) | 0;
   if (!$4_1) {
    break label$1
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $1_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
   $2_1 = HEAP32[($0_1 + 292 | 0) >> 2] | 0;
   HEAP32[($0_1 + 292 | 0) >> 2] = $2_1 + 1 | 0;
   HEAP32[((HEAP32[($0_1 + 288 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $4_1;
   $3_1 = $4_1;
  }
  return $3_1 | 0;
 }
 
 function $287($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $253($2_1 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  label$1 : {
   $0_1 = $286($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if ($0_1) {
    break label$1
   }
   $256($3_1 + 12 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $288($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  $256($1_1 + 16 | 0 | 0);
  $272($1_1 + 12 | 0 | 0);
  $343($0_1 | 0);
 }
 
 function $289() {
  var $0_1 = 0;
  label$1 : {
   $0_1 = $346(408 | 0) | 0;
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($0_1 + 64 | 0) >> 2] = 0;
  $290($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $290($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
    break label$1
   }
   $343($0_1 + 64 | 0 | 0);
  }
  wasm2js_memory_fill($0_1, 0, 408);
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 336 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 340 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -2147483648;
  HEAP32[(i64toi32_i32$1 + 320 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -2147483648;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -2147483648;
  HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -2147483648;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 356 | 0) >> 2] = -1;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 328 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 332 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1;
  HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 2;
  HEAP32[(i64toi32_i32$1 + 304 | 0) >> 2] = 2;
  HEAP32[(i64toi32_i32$1 + 308 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 312 | 0) >> 2] = 2;
  HEAP32[(i64toi32_i32$1 + 316 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 296 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 300 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $291($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $292($1_1 | 0);
   $343($0_1 | 0);
  }
 }
 
 function $292($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $293($0_1 | 0);
   $1_1 = 0;
   label$2 : while (1) {
    label$3 : {
     if (($1_1 | 0) != (8 | 0)) {
      break label$3
     }
     $2_1 = $0_1 + 280 | 0;
     $1_1 = 0;
     label$4 : {
      label$5 : while (1) {
       if (($1_1 | 0) >= (HEAP32[($0_1 + 284 | 0) >> 2] | 0 | 0)) {
        break label$4
       }
       $256((HEAP32[$2_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
       $1_1 = $1_1 + 1 | 0;
       continue label$5;
      };
     }
     $343($2_1 | 0);
     $272($0_1 + 344 | 0 | 0);
     $256($0_1 + 372 | 0 | 0);
     $256($0_1 + 376 | 0 | 0);
     $256($0_1 + 380 | 0 | 0);
     $256($0_1 + 400 | 0 | 0);
     $290($0_1 | 0);
     break label$1;
    }
    $256(($0_1 + ($1_1 << 2 | 0) | 0) + 248 | 0 | 0);
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
 }
 
 function $293($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1 + 288 | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) >= (HEAP32[($0_1 + 292 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $288((HEAP32[$1_1 >> 2] | 0) + ($2_1 << 2 | 0) | 0 | 0);
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($0_1 + 292 | 0) >> 2] = 0;
  $343($1_1 | 0);
 }
 
 function $294($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0;
  $2_1 = -28;
  label$1 : {
   if ((HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    return $295($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   label$3 : {
    i64toi32_i32$0 = HEAP32[($0_1 + 240 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 244 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) != (0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
     break label$3
    }
    if ((HEAP32[($0_1 + 352 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$1
    }
   }
   $2_1 = $296($0_1 | 0, $1_1 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $7_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $4_1 = 0, $8_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!($353(HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) | 0)) {
     break label$2
    }
    $3_1 = $317(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0) | 0;
    if (($3_1 | 0) < (0 | 0)) {
     break label$1
    }
    $4_1 = $0_1 + 32 | 0;
    label$3 : {
     if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
      break label$3
     }
     $5_1 = ($1_1 | 0) < (1 | 0) ? 32 : $1_1;
     $6_1 = $5_1 + -1 | 0;
     $7_1 = 1;
     label$4 : {
      label$5 : while (1) {
       if (($7_1 | 0) > ($5_1 | 0)) {
        break label$4
       }
       $3_1 = $313($4_1 | 0, HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0, (($7_1 + (HEAP32[($0_1 + 68 | 0) >> 2] | 0) | 0) + -1 | 0) & (0 - $7_1 | 0) | 0 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$1
       }
       $7_1 = $7_1 << 1 | 0;
       if ((HEAP32[$4_1 >> 2] | 0) & $6_1 | 0) {
        continue label$5
       }
       break label$5;
      };
     }
     $7_1 = 0;
     $8_1 = 0 - $5_1 | 0;
     label$6 : while (1) {
      if (($7_1 | 0) == (4 | 0)) {
       break label$3
      }
      $3_1 = ($0_1 + ($7_1 << 2 | 0) | 0) + 32 | 0;
      $5_1 = HEAP32[$3_1 >> 2] | 0;
      if (!$5_1) {
       break label$3
      }
      HEAP32[$3_1 >> 2] = ($6_1 + $5_1 | 0) & $8_1 | 0;
      $7_1 = $7_1 + 1 | 0;
      continue label$6;
     };
    }
    $5_1 = ($1_1 | 0) > (32 | 0) ? $1_1 : 32;
    $7_1 = 0;
    label$7 : {
     label$8 : while (1) {
      if (($7_1 | 0) == (4 | 0)) {
       break label$7
      }
      $3_1 = $7_1 << 2 | 0;
      HEAP32[(($2_1 + 16 | 0) + $3_1 | 0) >> 2] = HEAP32[(($0_1 + $3_1 | 0) + 32 | 0) >> 2] | 0;
      $7_1 = $7_1 + 1 | 0;
      continue label$8;
     };
    }
    $7_1 = 0;
    $1_1 = ((HEAP32[($0_1 + 72 | 0) >> 2] | 0) + 31 | 0) & -32 | 0;
    $3_1 = $314($2_1 | 0, HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 + 16 | 0 | 0) | 0;
    if (($3_1 | 0) < (0 | 0)) {
     break label$1
    }
    $3_1 = $5_1 << 2 | 0;
    label$9 : {
     label$10 : while (1) {
      if (($7_1 | 0) == (4 | 0)) {
       break label$9
      }
      $6_1 = HEAP32[($2_1 + ($7_1 << 2 | 0) | 0) >> 2] | 0;
      if ($6_1 >>> 0 > (2147483647 - $3_1 | 0) >>> 0) {
       break label$2
      }
      $7_1 = $7_1 + 1 | 0;
      $3_1 = $6_1 + $3_1 | 0;
      continue label$10;
     };
    }
    $7_1 = $253($3_1 | 0) | 0;
    HEAP32[($0_1 + 248 | 0) >> 2] = $7_1;
    label$11 : {
     label$12 : {
      if ($7_1) {
       break label$12
      }
      $3_1 = -48;
      break label$11;
     }
     $3_1 = $315($0_1 | 0, HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0, $1_1 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$11
     }
     $7_1 = 1;
     label$13 : {
      label$14 : while (1) {
       if (($7_1 | 0) == (4 | 0)) {
        break label$13
       }
       label$15 : {
        $3_1 = $0_1 + ($7_1 << 2 | 0) | 0;
        $6_1 = HEAP32[$3_1 >> 2] | 0;
        if (!$6_1) {
         break label$15
        }
        HEAP32[$3_1 >> 2] = $6_1 + Math_imul($7_1, $5_1) | 0;
       }
       $7_1 = $7_1 + 1 | 0;
       continue label$14;
      };
     }
     HEAP32[($0_1 + 64 | 0) >> 2] = $0_1;
     $3_1 = 0;
     break label$1;
    }
    $292($0_1 | 0);
    break label$1;
   }
   $3_1 = -28;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $296($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = $358(HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 352 | 0) >> 2] | 0;
   if ($3_1) {
    break label$1
   }
   i64toi32_i32$1 = HEAP32[($0_1 + 244 | 0) >> 2] | 0;
   $3_1 = $268(HEAP32[($0_1 + 240 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0) | 0;
   HEAP32[($0_1 + 352 | 0) >> 2] = $3_1;
  }
  label$2 : {
   label$3 : {
    if (HEAP32[($0_1 + 32 | 0) >> 2] | 0) {
     break label$3
    }
    $4_1 = $359($0_1 + 32 | 0 | 0, $3_1 | 0, HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
    if (($4_1 | 0) < (0 | 0)) {
     break label$2
    }
   }
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       $5_1 = $2_1 ? $3_1 : 1;
       if (($5_1 | 0) < (9 | 0)) {
        break label$7
       }
       (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $345($5_1 | 0, 4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
       $2_1 = $5_1 + -8 | 0;
       $3_1 = $345($2_1 | 0, 4 | 0) | 0;
       HEAP32[($0_1 + 280 | 0) >> 2] = $3_1;
       label$8 : {
        if (!$3_1) {
         break label$8
        }
        if (HEAP32[($0_1 + 64 | 0) >> 2] | 0) {
         break label$6
        }
       }
       $343($0_1 + 64 | 0 | 0);
       $343($0_1 + 280 | 0 | 0);
       break label$4;
      }
      HEAP32[($0_1 + 64 | 0) >> 2] = $0_1;
      $6_1 = $0_1 + 64 | 0;
      label$9 : {
       if (($5_1 | 0) < (1 | 0)) {
        break label$9
       }
       $4_1 = $5_1;
       break label$5;
      }
      $4_1 = 0;
      break label$5;
     }
     HEAP32[($0_1 + 284 | 0) >> 2] = $2_1;
     $6_1 = $0_1 + 64 | 0;
     $4_1 = 8;
    }
    $3_1 = 0;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       label$13 : {
        if (($3_1 | 0) != ($4_1 | 0)) {
         break label$13
        }
        $4_1 = 0;
        $3_1 = $5_1 + -8 | 0;
        $7_1 = ($3_1 | 0) > (0 | 0) ? $3_1 : 0;
        $3_1 = 0;
        label$14 : while (1) {
         if (($3_1 | 0) == ($7_1 | 0)) {
          break label$2
         }
         $1_1 = $253(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
         $2_1 = $3_1 << 2 | 0;
         HEAP32[((HEAP32[($0_1 + 280 | 0) >> 2] | 0) + $2_1 | 0) >> 2] = $1_1;
         $1_1 = HEAP32[((HEAP32[($0_1 + 280 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
         if (!$1_1) {
          break label$12
         }
         HEAP32[(($2_1 + (HEAP32[$6_1 >> 2] | 0) | 0) + 32 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         $3_1 = $3_1 + 1 | 0;
         continue label$14;
        };
       }
       $1_1 = $3_1 << 2 | 0;
       $7_1 = $0_1 + $1_1 | 0;
       $2_1 = $253(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($7_1 + 248 | 0) >> 2] = $2_1;
       if ($2_1) {
        break label$11
       }
      }
      $292($0_1 | 0);
      break label$4;
     }
     $2_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[$7_1 >> 2] = $2_1;
     HEAP32[((HEAP32[($0_1 + 64 | 0) >> 2] | 0) + $1_1 | 0) >> 2] = $2_1;
     $3_1 = $3_1 + 1 | 0;
     continue label$10;
    };
   }
   $4_1 = -48;
  }
  return $4_1 | 0;
 }
 
 function $297($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $20_1 = 0, $55_1 = 0, $133_1 = 0, $138_1 = 0, $143_1 = 0, $148_1 = 0, $151_1 = 0, $156_1 = 0, $161_1 = 0, $166_1 = 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 352 | 0) >> 2] = HEAP32[($1_1 + 352 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 240 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 244 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 240 | 0) >> 2] = $20_1;
  HEAP32[($0_1 + 244 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 76 | 0) >> 2] = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = $298($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!(HEAP32[($1_1 + 248 | 0) >> 2] | 0)) {
        break label$5
       }
       break label$4;
      }
      $3_1 = $294($0_1 | 0, 0 | 0) | 0;
      if (($3_1 | 0) < (0 | 0)) {
       break label$1
      }
      $3_1 = $299($0_1 | 0, $1_1 | 0) | 0;
      if (($3_1 | 0) >= (0 | 0)) {
       break label$3
      }
      break label$1;
     }
     label$6 : {
      label$7 : while (1) {
       if (($2_1 | 0) == (8 | 0)) {
        break label$6
       }
       label$8 : {
        $4_1 = $2_1 << 2 | 0;
        $5_1 = HEAP32[(($1_1 + $4_1 | 0) + 248 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$8
        }
        $55_1 = ($0_1 + $4_1 | 0) + 248 | 0;
        $4_1 = $255($5_1 | 0) | 0;
        HEAP32[$55_1 >> 2] = $4_1;
        if (!$4_1) {
         break label$2
        }
       }
       $2_1 = $2_1 + 1 | 0;
       continue label$7;
      };
     }
     label$9 : {
      if (!(HEAP32[($1_1 + 280 | 0) >> 2] | 0)) {
       break label$9
      }
      $2_1 = $345(4 | 0, HEAP32[($1_1 + 284 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($0_1 + 280 | 0) >> 2] = $2_1;
      $3_1 = -48;
      if (!$2_1) {
       break label$1
      }
      HEAP32[($0_1 + 284 | 0) >> 2] = HEAP32[($1_1 + 284 | 0) >> 2] | 0;
      $2_1 = 0;
      label$10 : while (1) {
       if (($2_1 | 0) >= (HEAP32[($1_1 + 284 | 0) >> 2] | 0 | 0)) {
        break label$9
       }
       $4_1 = $2_1 << 2 | 0;
       $5_1 = $255(HEAP32[((HEAP32[($1_1 + 280 | 0) >> 2] | 0) + $4_1 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[((HEAP32[($0_1 + 280 | 0) >> 2] | 0) + $4_1 | 0) >> 2] = $5_1;
       $2_1 = $2_1 + 1 | 0;
       if (!(HEAP32[($4_1 + (HEAP32[($0_1 + 280 | 0) >> 2] | 0) | 0) >> 2] | 0)) {
        break label$1
       }
       continue label$10;
      };
     }
     label$11 : {
      $2_1 = HEAP32[($1_1 + 376 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$11
      }
      $2_1 = $255($2_1 | 0) | 0;
      HEAP32[($0_1 + 376 | 0) >> 2] = $2_1;
      if (!$2_1) {
       break label$2
      }
     }
     label$12 : {
      label$13 : {
       if ((HEAP32[($1_1 + 64 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
        break label$13
       }
       label$14 : {
        $2_1 = HEAP32[($1_1 + 352 | 0) >> 2] | 0;
        if ($2_1) {
         break label$14
        }
        $3_1 = -28;
        break label$1;
       }
       $4_1 = $344(4 | 0, $2_1 | 0) | 0;
       HEAP32[($0_1 + 64 | 0) >> 2] = $4_1;
       if (!$4_1) {
        break label$2
       }
       wasm2js_memory_copy($4_1, HEAP32[($1_1 + 64 | 0) >> 2] | 0, $2_1 << 2 | 0);
       break label$12;
      }
      HEAP32[($0_1 + 64 | 0) >> 2] = $0_1;
     }
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $133_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[$0_1 >> 2] = $133_1;
     HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 24 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $138_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1 + 24 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $138_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 16 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $143_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1 + 16 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $143_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $148_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $148_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
     $151_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 32 | 0) >> 2] = $151_1;
     HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 40 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $156_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1 + 40 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $156_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 48 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $161_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1 + 48 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $161_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 56 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $166_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1 + 56 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $166_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $3_1 = 0;
    }
    return $3_1 | 0;
   }
   $3_1 = -48;
  }
  $292($0_1 | 0);
  return $3_1 | 0;
 }
 
 function $298($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $3_1 = 0, $18_1 = 0, $33_1 = 0, $54_1 = 0, $57_1 = 0, $60_1 = 0, $66_1 = 0, $69_1 = 0, $75_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($0_1 + 84 | 0) >> 2] = HEAP32[($1_1 + 84 | 0) >> 2] | 0;
  HEAP32[($0_1 + 88 | 0) >> 2] = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 92 | 0) >> 2] = $18_1;
  HEAP32[($0_1 + 96 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 384 | 0) >> 2] = HEAP32[($1_1 + 384 | 0) >> 2] | 0;
  HEAP32[($0_1 + 388 | 0) >> 2] = HEAP32[($1_1 + 388 | 0) >> 2] | 0;
  HEAP32[($0_1 + 392 | 0) >> 2] = HEAP32[($1_1 + 392 | 0) >> 2] | 0;
  HEAP32[($0_1 + 396 | 0) >> 2] = HEAP32[($1_1 + 396 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 104 | 0) >> 2] = $33_1;
  HEAP32[($0_1 + 108 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 208 | 0) >> 2] = HEAP32[($1_1 + 208 | 0) >> 2] | 0;
  HEAP32[($0_1 + 212 | 0) >> 2] = HEAP32[($1_1 + 212 | 0) >> 2] | 0;
  HEAP32[($0_1 + 216 | 0) >> 2] = HEAP32[($1_1 + 216 | 0) >> 2] | 0;
  HEAP32[($0_1 + 220 | 0) >> 2] = HEAP32[($1_1 + 220 | 0) >> 2] | 0;
  HEAP32[($0_1 + 232 | 0) >> 2] = HEAP32[($1_1 + 232 | 0) >> 2] | 0;
  HEAP32[($0_1 + 140 | 0) >> 2] = HEAP32[($1_1 + 140 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
  $54_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 112 | 0) >> 2] = $54_1;
  HEAP32[($0_1 + 116 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($1_1 + 120 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 124 | 0) >> 2] | 0;
  $57_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 120 | 0) >> 2] = $57_1;
  HEAP32[($0_1 + 124 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($1_1 + 328 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 332 | 0) >> 2] | 0;
  $60_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 328 | 0) >> 2] = $60_1;
  HEAP32[($0_1 + 332 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 356 | 0) >> 2] = HEAP32[($1_1 + 356 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 336 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 340 | 0) >> 2] | 0;
  $66_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 336 | 0) >> 2] = $66_1;
  HEAP32[($0_1 + 340 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 228 | 0) >> 2] | 0;
  $69_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 224 | 0) >> 2] = $69_1;
  HEAP32[($0_1 + 228 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 136 | 0) >> 2] = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 320 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 324 | 0) >> 2] | 0;
  $75_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 320 | 0) >> 2] = $75_1;
  HEAP32[($0_1 + 324 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 128 | 0) >> 2] = HEAP32[($1_1 + 128 | 0) >> 2] | 0;
  HEAP32[($0_1 + 132 | 0) >> 2] = HEAP32[($1_1 + 132 | 0) >> 2] | 0;
  HEAP32[($0_1 + 296 | 0) >> 2] = HEAP32[($1_1 + 296 | 0) >> 2] | 0;
  HEAP32[($0_1 + 348 | 0) >> 2] = HEAP32[($1_1 + 348 | 0) >> 2] | 0;
  HEAP32[($0_1 + 304 | 0) >> 2] = HEAP32[($1_1 + 304 | 0) >> 2] | 0;
  HEAP32[($0_1 + 308 | 0) >> 2] = HEAP32[($1_1 + 308 | 0) >> 2] | 0;
  HEAP32[($0_1 + 312 | 0) >> 2] = HEAP32[($1_1 + 312 | 0) >> 2] | 0;
  HEAP32[($0_1 + 300 | 0) >> 2] = HEAP32[($1_1 + 300 | 0) >> 2] | 0;
  HEAP32[($0_1 + 316 | 0) >> 2] = HEAP32[($1_1 + 316 | 0) >> 2] | 0;
  $273($0_1 + 344 | 0 | 0, HEAP32[($1_1 + 344 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  wasm2js_memory_copy($0_1 + 144 | 0, $1_1 + 144 | 0, 64);
  $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($4_1 | 0) >= (HEAP32[($1_1 + 292 | 0) >> 2] | 0 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAP32[((HEAP32[($1_1 + 288 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] | 0;
         $6_1 = HEAP32[$5_1 >> 2] | 0;
         if ($6_1) {
          break label$7
         }
         if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0)) {
          break label$4
         }
         if ((HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0)) {
          break label$4
         }
        }
        label$8 : {
         if (!$2_1) {
          break label$8
         }
         $6_1 = $287($0_1 | 0, $6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         if (!$6_1) {
          break label$2
         }
         wasm2js_memory_copy(HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0);
         break label$5;
        }
        $6_1 = $255(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        $6_1 = $286($0_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
        if ($6_1) {
         break label$5
        }
        $256($3_1 + 12 | 0 | 0);
        break label$2;
       }
       HEAP32[($0_1 + 368 | 0) >> 2] = 0;
       i64toi32_i32$1 = $0_1;
       i64toi32_i32$0 = 0;
       HEAP32[($0_1 + 360 | 0) >> 2] = 0;
       HEAP32[($0_1 + 364 | 0) >> 2] = i64toi32_i32$0;
       $260($0_1 + 372 | 0 | 0, HEAP32[($1_1 + 372 | 0) >> 2] | 0 | 0) | 0;
       label$9 : {
        $4_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        if (!$4_1) {
         break label$9
        }
        HEAP32[($0_1 + 360 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        HEAP32[($0_1 + 364 | 0) >> 2] = HEAP32[($1_1 + 364 | 0) >> 2] | 0;
        HEAP32[($0_1 + 368 | 0) >> 2] = HEAP32[($1_1 + 368 | 0) >> 2] | 0;
       }
       $1_1 = $260($0_1 + 380 | 0 | 0, HEAP32[($1_1 + 380 | 0) >> 2] | 0 | 0) | 0 | ($260($0_1 + 400 | 0 | 0, HEAP32[($1_1 + 400 | 0) >> 2] | 0 | 0) | 0) | 0;
       break label$1;
      }
      $273($6_1 + 12 | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
     }
     $4_1 = $4_1 + 1 | 0;
     continue label$3;
    };
   }
   $293($0_1 | 0);
   $1_1 = -48;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = -28;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$1
   }
   if (($3_1 | 0) != (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    return $300($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   if ((HEAP32[($0_1 + 352 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = $301($0_1 | 0, $1_1 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $300($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $53_1 = 0, $57_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = -28;
  label$1 : {
   if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) < (HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) < (HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (HEAP32[($1_1 + 376 | 0) >> 2] | 0) {
      break label$3
     }
     if (!(HEAP32[($0_1 + 376 | 0) >> 2] | 0)) {
      break label$2
     }
    }
    $3_1 = $307($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
    break label$1;
   }
   $4_1 = 0;
   $5_1 = $354(HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) | 0;
   $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
   label$4 : {
    label$5 : while (1) {
     if (($4_1 | 0) == ($6_1 | 0)) {
      break label$4
     }
     $5_1 = $4_1 << 2 | 0;
     if (!(HEAP32[($0_1 + $5_1 | 0) >> 2] | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     if (HEAP32[($1_1 + $5_1 | 0) >> 2] | 0) {
      continue label$5
     }
     break label$1;
    };
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $53_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[$2_1 >> 2] = $53_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $57_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $57_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   $321($0_1 | 0, $0_1 + 32 | 0 | 0, $2_1 | 0, $1_1 + 32 | 0 | 0, HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0);
   $3_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $301($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $25_1 = 0, $25$hi = 0, $27_1 = 0, $27$hi = 0, $7_1 = 0;
  $2_1 = $358(HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) | 0;
  $3_1 = -28;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
   if (($4_1 | 0) != (HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 352 | 0) >> 2] | 0;
   if (($5_1 | 0) != (HEAP32[($1_1 + 352 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = HEAP32[($0_1 + 240 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 244 | 0) >> 2] | 0;
   $25_1 = i64toi32_i32$0;
   $25$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($1_1 + 240 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 244 | 0) >> 2] | 0;
   $27_1 = i64toi32_i32$1;
   $27$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $25$hi;
   i64toi32_i32$1 = $27$hi;
   if (($25_1 | 0) != ($27_1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
    break label$1
   }
   $6_1 = 0;
   $2_1 = $2_1 ? $5_1 : 1;
   $7_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
   $8_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   label$2 : {
    label$3 : while (1) {
     if (($6_1 | 0) == ($7_1 | 0)) {
      break label$2
     }
     $2_1 = $6_1 << 2 | 0;
     if (!(HEAP32[($8_1 + $2_1 | 0) >> 2] | 0)) {
      break label$1
     }
     $6_1 = $6_1 + 1 | 0;
     if (HEAP32[((HEAP32[($1_1 + 64 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = 0;
   $360($8_1 | 0, HEAP32[($1_1 + 64 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, $4_1 | 0, $5_1 | 0, HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  wasm2js_memory_copy($0_1, $1_1, 408);
  label$1 : {
   if ((HEAP32[($1_1 + 64 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 64 | 0) >> 2] = $0_1;
  }
  wasm2js_memory_fill($1_1, 0, 408);
  $290($1_1 | 0);
 }
 
 function $303($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $9_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = -28;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   if (($5_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = -68;
   $6_1 = HEAP32[($0_1 + 392 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 396 | 0) >> 2] | 0;
   if ($6_1 >>> 0 >= (2147483647 - $7_1 | 0) >>> 0) {
    break label$1
   }
   $8_1 = HEAP32[($0_1 + 388 | 0) >> 2] | 0;
   $9_1 = HEAP32[($0_1 + 384 | 0) >> 2] | 0;
   if (($8_1 + $9_1 | 0) >>> 0 >= $5_1 >>> 0) {
    break label$1
   }
   if (($7_1 + $6_1 | 0) >>> 0 >= $4_1 >>> 0) {
    break label$1
   }
   if ($9_1 >>> 0 >= (2147483647 - $8_1 | 0) >>> 0) {
    break label$1
   }
   $3_1 = -558323010;
   $6_1 = $353(HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if (!((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 12 | 0)) {
     break label$2
    }
    $4_1 = HEAP32[($0_1 + 388 | 0) >> 2] | 0;
    $3_1 = 0;
    HEAP32[($0_1 + 388 | 0) >> 2] = 0;
    $1_1 = HEAP32[($0_1 + 396 | 0) >> 2] | 0;
    HEAP32[($0_1 + 396 | 0) >> 2] = 0;
    HEAP32[($0_1 + 68 | 0) >> 2] = (HEAP32[($0_1 + 68 | 0) >> 2] | 0) - $1_1 | 0;
    HEAP32[($0_1 + 72 | 0) >> 2] = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) - $4_1 | 0;
    break label$1;
   }
   $304($2_1 | 0, $0_1 | 0, $6_1 | 0);
   label$3 : {
    if ($1_1 & 1 | 0) {
     break label$3
    }
    $4_1 = 2147483647;
    $7_1 = 2147483647;
    label$4 : {
     $8_1 = HEAP32[($0_1 + 392 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$4
     }
     $7_1 = HEAPU8[((global$1 + 5808 | 0) + (Math_imul($8_1 & (0 - $8_1 | 0) | 0, 125613361) >>> 27 | 0) | 0) >> 0] | 0;
    }
    $1_1 = 0;
    label$5 : {
     label$6 : while (1) {
      $5_1 = $1_1 << 2 | 0;
      if (!(HEAP32[($0_1 + $5_1 | 0) >> 2] | 0)) {
       break label$5
      }
      label$7 : {
       label$8 : {
        $5_1 = HEAP32[($2_1 + $5_1 | 0) >> 2] | 0;
        if ($5_1) {
         break label$8
        }
        $5_1 = 2147483647;
        break label$7;
       }
       $5_1 = HEAPU8[((global$1 + 5808 | 0) + (Math_imul($5_1 & (0 - $5_1 | 0) | 0, 125613361) >>> 27 | 0) | 0) >> 0] | 0;
      }
      $4_1 = ($5_1 | 0) > ($4_1 | 0) ? $4_1 : $5_1;
      $1_1 = $1_1 + 1 | 0;
      continue label$6;
     };
    }
    if (($7_1 | 0) < ($4_1 | 0)) {
     break label$1
    }
    if (($4_1 | 0) > (4 | 0)) {
     break label$3
    }
    HEAP32[($0_1 + 392 | 0) >> 2] = (-1 << (($7_1 - $4_1 | 0) + 5 | 0) | 0) & $8_1 | 0;
    $304($2_1 | 0, $0_1 | 0, $6_1 | 0);
   }
   $6_1 = $0_1 + 384 | 0;
   $3_1 = 0;
   label$9 : {
    label$10 : while (1) {
     $4_1 = $3_1 << 2 | 0;
     $1_1 = $0_1 + $4_1 | 0;
     $5_1 = HEAP32[$1_1 >> 2] | 0;
     if (!$5_1) {
      break label$9
     }
     HEAP32[$1_1 >> 2] = $5_1 + (HEAP32[($2_1 + $4_1 | 0) >> 2] | 0) | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$10;
    };
   }
   HEAP32[($0_1 + 68 | 0) >> 2] = (HEAP32[($0_1 + 68 | 0) >> 2] | 0) - ((HEAP32[($0_1 + 396 | 0) >> 2] | 0) + (HEAP32[($0_1 + 392 | 0) >> 2] | 0) | 0) | 0;
   HEAP32[($0_1 + 72 | 0) >> 2] = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) - ((HEAP32[($0_1 + 388 | 0) >> 2] | 0) + (HEAP32[($0_1 + 384 | 0) >> 2] | 0) | 0) | 0;
   i64toi32_i32$1 = $6_1 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $3_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $304($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $9_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0, $8_1 = 0;
  $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $4_1 = $3_1 << 2 | 0;
    $5_1 = $1_1 + $4_1 | 0;
    if (!(HEAP32[$5_1 >> 2] | 0)) {
     break label$1
    }
    $6_1 = 0;
    $7_1 = 0;
    label$3 : {
     if (($3_1 + -1 | 0) >>> 0 > 1 >>> 0) {
      break label$3
     }
     $7_1 = HEAPU8[($2_1 + 6 | 0) >> 0] | 0;
     $6_1 = HEAPU8[($2_1 + 5 | 0) >> 0] | 0;
    }
    label$4 : {
     label$5 : {
      if (($3_1 | 0) != (1 | 0)) {
       break label$5
      }
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 66;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
       break label$4
      }
     }
     $8_1 = HEAPU8[($2_1 + 4 | 0) >> 0] | 0;
     $9_1 = 0;
     label$6 : while (1) {
      if (($9_1 | 0) == ($8_1 | 0)) {
       break label$1
      }
      label$7 : {
       $10_1 = $2_1 + ($9_1 << 5 | 0) | 0;
       if ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
        break label$7
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$6;
      }
      break label$6;
     };
     HEAP32[($0_1 + $4_1 | 0) >> 2] = Math_imul((HEAP32[($1_1 + 392 | 0) >> 2] | 0) >>> $6_1 | 0, HEAP32[($10_1 + 20 | 0) >> 2] | 0) + Math_imul((HEAP32[($1_1 + 384 | 0) >> 2] | 0) >>> $7_1 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  }
 }
 
 function $305($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     if (!(HEAP32[($5_1 + 12 | 0) >> 2] | 0)) {
      break label$3
     }
     HEAP32[($1_1 + 80 | 0) >> 2] = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
     $5_1 = $255($0_1 | 0) | 0;
     HEAP32[($1_1 + 376 | 0) >> 2] = $5_1;
     $0_1 = -48;
     if (!$5_1) {
      break label$1
     }
     $5_1 = $289() | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
     if (!$5_1) {
      break label$1
     }
     label$4 : {
      $0_1 = $305(HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, $5_1 | 0, $3_1 | 0) | 0;
      if (($0_1 | 0) > (-1 | 0)) {
       break label$4
      }
      $291($3_1 + 12 | 0 | 0);
      break label$1;
     }
     label$5 : {
      $0_1 = $309($1_1 | 0, $5_1 | 0, HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
      if (!$0_1) {
       break label$5
      }
      HEAP32[$3_1 >> 2] = $0_1;
      $332($4_1 | 0, 16 | 0, global$1 + 6027 | 0 | 0, $3_1 | 0);
      $291($3_1 + 12 | 0 | 0);
      break label$1;
     }
     $291($3_1 + 12 | 0 | 0);
     break label$2;
    }
    label$6 : {
     if (HEAP32[((HEAP32[$5_1 >> 2] | 0) + 60 | 0) >> 2] | 0) {
      break label$6
     }
     $0_1 = -52;
     break label$1;
    }
    label$7 : {
     if (HEAP32[($4_1 + 28 | 0) >> 2] | 0) {
      break label$7
     }
     $0_1 = -28;
     break label$1;
    }
    $0_1 = $255($0_1 | 0) | 0;
    HEAP32[($1_1 + 376 | 0) >> 2] = $0_1;
    label$8 : {
     if ($0_1) {
      break label$8
     }
     $0_1 = -48;
     break label$1;
    }
    label$9 : {
     $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0]($4_1, $1_1) | 0;
     if (($0_1 | 0) > (-1 | 0)) {
      break label$9
     }
     $256($1_1 + 376 | 0 | 0);
     break label$1;
    }
    HEAP32[($1_1 + 64 | 0) >> 2] = $1_1;
   }
   $0_1 = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $306($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $4_1 = HEAP32[((HEAP32[(HEAP32[($0_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   return -52 | 0;
  }
  return FUNCTION_TABLE[$4_1 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $307($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   if (HEAP32[($0_1 + 248 | 0) >> 2] | 0) {
    break label$1
   }
   return $308($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $2_1 = HEAP32[($0_1 + 376 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       $3_1 = HEAP32[($1_1 + 376 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$6
       }
       label$7 : {
        if (!$2_1) {
         break label$7
        }
        label$8 : {
         $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
         $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
         if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
          break label$8
         }
         $332($3_1 | 0, 16 | 0, global$1 + 5840 | 0 | 0, 0 | 0);
         break label$5;
        }
        label$9 : {
         $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         if (!(HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0)) {
          break label$9
         }
         $332($3_1 | 0, 16 | 0, global$1 + 5931 | 0 | 0, 0 | 0);
         break label$5;
        }
        label$10 : {
         $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 72 | 0) >> 2] | 0 | 0]($3_1, $0_1, $1_1) | 0;
         if (($2_1 | 0) != (-52 | 0)) {
          break label$10
         }
         $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0]($5_1, $0_1, $1_1) | 0;
        }
        if (($2_1 | 0) >= (0 | 0)) {
         break label$3
        }
        break label$2;
       }
       $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[(HEAP32[($2_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0;
       if (($2_1 | 0) >= (0 | 0)) {
        break label$3
       }
       break label$2;
      }
      if ($2_1) {
       break label$4
      }
     }
     return -52 | 0;
    }
    $2_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[(HEAP32[($2_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0;
    if (($2_1 | 0) < (0 | 0)) {
     break label$2
    }
   }
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $308($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[((HEAP32[($1_1 + 376 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $5_1 = $289() | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if ($5_1) {
     break label$2
    }
    $5_1 = -48;
    break label$1;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      $6_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
      if (($6_1 | 0) < (0 | 0)) {
       break label$5
      }
      HEAP32[($5_1 + 80 | 0) >> 2] = $6_1;
      break label$4;
     }
     $5_1 = $306(HEAP32[($1_1 + 376 | 0) >> 2] | 0 | 0, 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
     if (($5_1 | 0) < (0 | 0)) {
      break label$3
     }
     HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
     $343($3_1 + 8 | 0 | 0);
     $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    }
    HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
    HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
    $5_1 = $294($5_1 | 0, 0 | 0) | 0;
    if (($5_1 | 0) < (0 | 0)) {
     break label$3
    }
    $5_1 = $307(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    if (($5_1 | 0) < (0 | 0)) {
     break label$3
    }
    $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 68 | 0) >> 2] = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
    HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
    $302($0_1 | 0, $4_1 | 0);
   }
   $291($3_1 + 12 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $309($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($1_1 + 376 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $4_1 = HEAP32[($0_1 + 376 | 0) >> 2] | 0;
      if ($4_1) {
       break label$4
      }
      $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      break label$3;
     }
     label$5 : {
      label$6 : {
       $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        break label$6
       }
       if ((HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       if ((HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
      }
      $5_1 = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$3
      }
      if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
       break label$3
      }
     }
     label$7 : {
      $1_1 = HEAP32[($1_1 + 248 | 0) >> 2] | 0;
      if ($1_1) {
       break label$7
      }
      $332($3_1 | 0, 16 | 0, global$1 + 6080 | 0 | 0, 0 | 0);
      return -28 | 0;
     }
     $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $292($0_1 | 0);
     $3_1 = $297($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
     break label$1;
    }
    if ((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $4_1 = HEAP32[((HEAP32[(HEAP32[($3_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 80 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$2
    }
    $3_1 = FUNCTION_TABLE[$4_1 | 0]($3_1, $0_1, $1_1, $2_1) | 0;
    if (($3_1 | 0) != (-52 | 0)) {
     break label$1
    }
   }
   label$8 : {
    $3_1 = HEAP32[($0_1 + 376 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$8
    }
    $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if ((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$8
    }
    $4_1 = HEAP32[((HEAP32[(HEAP32[($3_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$8
    }
    $3_1 = FUNCTION_TABLE[$4_1 | 0]($3_1, $0_1, $1_1, $2_1) | 0;
    if (($3_1 | 0) != (-52 | 0)) {
     break label$1
    }
   }
   return -52 | 0;
  }
  return $3_1 | 0;
 }
 
 function $310($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  $3_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if (($3_1 | 0) == (4 | 0)) {
     break label$2
    }
    label$4 : {
     $4_1 = $2_1 + ($3_1 << 5 | 0) | 0;
     $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
     $6_1 = $4_1 + 16 | 0;
     $4_1 = $0_1 + ((HEAP32[$6_1 >> 2] | 0) << 2 | 0) | 0;
     if (($5_1 | 0) <= (HEAP32[$4_1 >> 2] | 0 | 0)) {
      break label$4
     }
     HEAP32[$4_1 >> 2] = $5_1;
     if (!$1_1) {
      break label$4
     }
     HEAP32[($1_1 + ((HEAP32[$6_1 >> 2] | 0) << 2 | 0) | 0) >> 2] = $3_1;
    }
    $3_1 = $3_1 + 1 | 0;
    continue label$3;
   };
  }
 }
 
 function $311($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = -28;
  label$1 : {
   $0_1 = $353($0_1 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 8 | 0) {
    break label$1
   }
   $310($3_1 + 16 | 0 | 0, $3_1 | 0, $0_1 | 0);
   $4_1 = $2_1 << 2 | 0;
   $4_1 = $312($1_1 | 0, HEAP32[(($3_1 + 16 | 0) + $4_1 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + $4_1 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $312($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = -28;
  label$1 : {
   if (($0_1 | 0) < (0 | 0)) {
    break label$1
   }
   if (!$3_1) {
    break label$1
   }
   $5_1 = 0;
   label$2 : {
    if (($2_1 + -1 | 0) >>> 0 > 1 >>> 0) {
     break label$2
    }
    $5_1 = HEAPU8[($3_1 + 5 | 0) >> 0] | 0;
   }
   label$3 : {
    $0_1 = (($0_1 + (1 << $5_1 | 0) | 0) + -1 | 0) >> $5_1 | 0;
    if (!$0_1) {
     break label$3
    }
    if (((2147483647 | 0) / ($0_1 | 0) | 0 | 0) < ($1_1 | 0)) {
     break label$1
    }
   }
   $0_1 = Math_imul($0_1, $1_1);
   $4_1 = (HEAPU8[($3_1 + 8 | 0) >> 0] | 0) & 4 | 0 ? ($0_1 + 7 | 0) >> 3 | 0 : $0_1;
  }
  return $4_1 | 0;
 }
 
 function $313($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = $353($1_1 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = -28;
  label$1 : {
   if (!$4_1) {
    break label$1
   }
   if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 8 | 0) {
    break label$1
   }
   $310($3_1 + 16 | 0 | 0, $3_1 | 0, $4_1 | 0);
   $5_1 = 0;
   $1_1 = 0;
   label$2 : while (1) {
    if (($1_1 | 0) == (4 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = $1_1 << 2 | 0;
     $7_1 = $312($2_1 | 0, HEAP32[(($3_1 + 16 | 0) + $6_1 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + $6_1 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0;
     if (($7_1 | 0) >= (0 | 0)) {
      break label$3
     }
     $5_1 = $7_1;
     break label$1;
    }
    HEAP32[($0_1 + $6_1 | 0) >> 2] = $7_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $314($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $20_1 = 0, $8_1 = 0, $21_1 = 0, $9_1 = 0, $9$hi = 0, $28$hi = 0, $32$hi = 0, $6_1 = 0, $69$hi = 0, $75$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $353($1_1 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 8;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = 0;
    $28$hi = i64toi32_i32$1;
    $1_1 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $32$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $28$hi;
    i64toi32_i32$0 = $32$hi;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    if ($20_1) {
     break label$2
    }
    HEAP32[$0_1 >> 2] = Math_imul($1_1, $2_1);
    label$3 : {
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 66;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     if (!!(i64toi32_i32$1 & i64toi32_i32$2 | 0 | i64toi32_i32$3 | 0)) {
      break label$3
     }
     $1_1 = 0;
     label$4 : while (1) {
      label$5 : {
       if (($1_1 | 0) != (4 | 0)) {
        break label$5
       }
       $6_1 = $2_1 + -1 | 0;
       $1_1 = 1;
       label$6 : while (1) {
        $2_1 = 0;
        if (($1_1 | 0) == (4 | 0)) {
         break label$1
        }
        $7_1 = $1_1 << 2 | 0;
        if (!(HEAP32[($4_1 + $7_1 | 0) >> 2] | 0)) {
         break label$1
        }
        $2_1 = 0;
        label$7 : {
         if (($1_1 + -1 | 0) >>> 0 > 1 >>> 0) {
          break label$7
         }
         $2_1 = HEAPU8[($5_1 + 6 | 0) >> 0] | 0;
        }
        $2_1 = ($6_1 + (1 << $2_1 | 0) | 0) >> $2_1 | 0;
        i64toi32_i32$3 = 0;
        $69$hi = i64toi32_i32$3;
        $8_1 = HEAP32[($3_1 + $7_1 | 0) >> 2] | 0;
        i64toi32_i32$3 = 0;
        $75$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $69$hi;
        i64toi32_i32$1 = $75$hi;
        i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $8_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = 32;
        i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $21_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
         $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
        }
        if ($21_1) {
         break label$2
        }
        HEAP32[($0_1 + $7_1 | 0) >> 2] = Math_imul($2_1, $8_1);
        $1_1 = $1_1 + 1 | 0;
        continue label$6;
       };
      }
      HEAP32[($4_1 + ((HEAP32[(($5_1 + ($1_1 << 5 | 0) | 0) + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
      $1_1 = $1_1 + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 1024;
    $2_1 = 0;
    break label$1;
   }
   $2_1 = -28;
  }
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $315($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == (4 | 0)) {
     break label$1
    }
    $7_1 = $6_1 << 2 | 0;
    HEAP32[(($5_1 + 16 | 0) + $7_1 | 0) >> 2] = HEAP32[($4_1 + $7_1 | 0) >> 2] | 0;
    $6_1 = $6_1 + 1 | 0;
    continue label$2;
   };
  }
  $6_1 = 0;
  label$3 : {
   $7_1 = $314($5_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 + 16 | 0 | 0) | 0;
   if (($7_1 | 0) < (0 | 0)) {
    break label$3
   }
   $7_1 = 0;
   label$4 : {
    label$5 : while (1) {
     if (($6_1 | 0) == (4 | 0)) {
      break label$4
     }
     label$6 : {
      $4_1 = HEAP32[($5_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
      if ($4_1 >>> 0 <= (2147483647 - $7_1 | 0) >>> 0) {
       break label$6
      }
      $7_1 = -28;
      break label$3;
     }
     $6_1 = $6_1 + 1 | 0;
     $7_1 = $4_1 + $7_1 | 0;
     continue label$5;
    };
   }
   HEAP32[$0_1 >> 2] = $3_1;
   $6_1 = 1;
   label$7 : while (1) {
    if (($6_1 | 0) == (4 | 0)) {
     break label$3
    }
    $4_1 = $6_1 << 2 | 0;
    if (!(HEAP32[($5_1 + $4_1 | 0) >> 2] | 0)) {
     break label$3
    }
    $3_1 = $3_1 + (HEAP32[(($4_1 + $5_1 | 0) + -4 | 0) >> 2] | 0) | 0;
    HEAP32[($0_1 + $4_1 | 0) >> 2] = $3_1;
    $6_1 = $6_1 + 1 | 0;
    continue label$7;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return $7_1 | 0;
 }
 
 function $316($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = 0;
  $3_1 = $1_1 + -17 | 0;
  $4_1 = ($1_1 | 0) == (8 | 0);
  label$1 : while (1) {
   label$2 : {
    if (($2_1 | 0) != (256 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    label$4 : {
     switch ($3_1 | 0) {
     case 3:
      $1_1 = Math_imul($2_1 & 3 | 0, 85);
      $5_1 = Math_imul($2_1 >>> 5 | 0, 36);
      $6_1 = Math_imul(($2_1 >>> 2 | 0) & 7 | 0, 36);
      break label$3;
     case 0:
      $5_1 = Math_imul($2_1 & 7 | 0, 36);
      $1_1 = Math_imul($2_1 >>> 6 | 0, 85);
      $6_1 = Math_imul(($2_1 >>> 3 | 0) & 7 | 0, 36);
      break label$3;
     case 5:
      $1_1 = Math_imul($2_1 & 1 | 0, 255);
      $5_1 = Math_imul($2_1 >>> 3 | 0, 255);
      $6_1 = Math_imul(($2_1 >>> 1 | 0) & 3 | 0, 85);
      break label$3;
     case 2:
      $5_1 = Math_imul($2_1 & 1 | 0, 255);
      $1_1 = Math_imul($2_1 >>> 3 | 0, 255);
      $6_1 = Math_imul(($2_1 >>> 1 | 0) & 3 | 0, 85);
      break label$3;
     default:
      $5_1 = $2_1;
      $6_1 = $2_1;
      $1_1 = $2_1;
      if ($4_1) {
       break label$3
      }
      break;
     case 1:
     case 4:
      break label$4;
     };
    }
    return -28 | 0;
   }
   HEAP32[($0_1 + ($2_1 << 2 | 0) | 0) >> 2] = ((($5_1 << 16 | 0) + ($6_1 << 8 | 0) | 0) + $1_1 | 0) + -16777216 | 0;
   $2_1 = $2_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $317($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $318($0_1 | 0, $1_1 | 0, -1 | 0, 2147483647 | 0, -1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function $318($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $7$hi = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $7_1 = 0, $29$hi = 0, $31$hi = 0, $8_1 = 0, $8$hi = 0, $38$hi = 0, $41$hi = 0, $56$hi = 0, $58$hi = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $4_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = global$1 + 12624 | 0;
  $3_1 = $311($3_1 | 0, $0_1 | 0, 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0_1 | 0) < (1 | 0)) {
       break label$4
      }
      if (($1_1 | 0) < (1 | 0)) {
       break label$4
      }
      i64toi32_i32$0 = 0;
      $7_1 = $0_1;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 3;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $24_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $29$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $31$hi = i64toi32_i32$1;
      i64toi32_i32$4 = (i64toi32_i32$2 | 0) < (1 | 0);
      i64toi32_i32$1 = $29$hi;
      i64toi32_i32$2 = $31$hi;
      i64toi32_i32$3 = i64toi32_i32$4 ? $24_1 : $3_1;
      i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      $8_1 = i64toi32_i32$3;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 2147482622;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
       $25_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$1 >>> 0) {
         $26_1 = 0
        } else {
         $26_1 = 1
        }
        $27_1 = $26_1;
       } else {
        $27_1 = 0
       }
       $25_1 = $27_1;
      }
      if ($25_1) {
       break label$4
      }
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$1 = $8_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1024;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $38$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $41$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $38$hi;
      i64toi32_i32$1 = $41$hi;
      i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$5 | 0, $1_1 + 128 | 0 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 2147483647;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$3
      }
     }
     HEAP32[($6_1 + 4 | 0) >> 2] = $1_1;
     HEAP32[$6_1 >> 2] = $0_1;
     $332($6_1 + 32 | 0 | 0, 16 | 0, global$1 + 6126 | 0 | 0, $6_1 | 0);
     break label$2;
    }
    $3_1 = 0;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = 2147483647;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$3 = 0;
    $56$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $56$hi;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $58$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $58$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$4 | 0)) {
     $28_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0) {
       $29_1 = 0
      } else {
       $29_1 = 1
      }
      $30_1 = $29_1;
     } else {
      $30_1 = 0
     }
     $28_1 = $30_1;
    }
    if ($28_1) {
     break label$1
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $6_1;
    HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] = $2_1;
    HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] = $1_1;
    HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] = $0_1;
    $332(i64toi32_i32$3 + 32 | 0 | 0, 16 | 0, global$1 + 6157 | 0 | 0, i64toi32_i32$3 + 16 | 0 | 0);
   }
   $3_1 = -28;
  }
  global$0 = $6_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $319($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $24$hi = 0, $29$hi = 0, $34$hi = 0, i64toi32_i32$3 = 0;
  $3_1 = -28;
  label$1 : {
   $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = HEAP32[$2_1 >> 2] | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $3_1 = 0;
    break label$1;
   }
   $3_1 = 0;
   if (($2_1 | 0) == ($4_1 | 0)) {
    break label$1
   }
   $3_1 = ($2_1 | 0) < ($4_1 | 0);
   i64toi32_i32$0 = 0;
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $29$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $34$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $24$hi;
   i64toi32_i32$1 = $29$hi;
   i64toi32_i32$2 = $34$hi;
   i64toi32_i32$2 = $335(($3_1 ? $0_1 : $1_1) | 0, i64toi32_i32$0 | 0, ($3_1 ? $2_1 : $4_1) | 0, i64toi32_i32$1 | 0, ($3_1 ? $4_1 : $2_1) | 0, i64toi32_i32$2 | 0, 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   return ($12_1 ? 0 : -28) | 0;
  }
  return $3_1 | 0;
 }
 
 function $320($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if (!$2_1) {
      break label$3
     }
     $7_1 = $3_1 >> 31 | 0;
     if ((($3_1 + $7_1 | 0) ^ $7_1 | 0 | 0) < ($4_1 | 0)) {
      break label$2
     }
     $7_1 = $1_1 >> 31 | 0;
     if ((($1_1 + $7_1 | 0) ^ $7_1 | 0 | 0) < ($4_1 | 0)) {
      break label$1
     }
     label$4 : while (1) {
      if (($5_1 | 0) < (1 | 0)) {
       break label$3
      }
      wasm2js_memory_copy($0_1, $2_1, $4_1);
      $5_1 = $5_1 + -1 | 0;
      $2_1 = $2_1 + $3_1 | 0;
      $0_1 = $0_1 + $1_1 | 0;
      continue label$4;
     };
    }
    global$0 = $6_1 + 32 | 0;
    return;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = 349;
   $0_1 = global$1;
   HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 + 6296 | 0;
   HEAP32[$6_1 >> 2] = $0_1 + 6326 | 0;
   $332(0 | 0, 0 | 0, $0_1 + 6266 | 0 | 0, $6_1 | 0);
   fimport$7();
   abort();
  }
  HEAP32[($6_1 + 24 | 0) >> 2] = 350;
  $0_1 = global$1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $0_1 + 6296 | 0;
  HEAP32[($6_1 + 16 | 0) >> 2] = $0_1 + 6398 | 0;
  $332(0 | 0, 0 | 0, $0_1 + 6266 | 0 | 0, $6_1 + 16 | 0 | 0);
  fimport$7();
  abort();
 }
 
 function $321($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($8_1 | 0) == (4 | 0)) {
     break label$1
    }
    $9_1 = $8_1 << 2 | 0;
    HEAP32[(($7_1 + 16 | 0) + $9_1 | 0) >> 2] = HEAP32[($1_1 + $9_1 | 0) >> 2] | 0;
    HEAP32[($7_1 + $9_1 | 0) >> 2] = HEAP32[($3_1 + $9_1 | 0) >> 2] | 0;
    $8_1 = $8_1 + 1 | 0;
    continue label$2;
   };
  }
  $322($0_1 | 0, $7_1 + 16 | 0 | 0, $2_1 | 0, $7_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0, global$3 + 34 | 0 | 0);
  global$0 = $7_1 + 32 | 0;
 }
 
 function $322($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $15$hi = 0, $13_1 = 0, $14_1 = 0;
  label$1 : {
   $8_1 = $353($4_1 | 0) | 0;
   if (!$8_1) {
    break label$1
   }
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$0 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
   $15_1 = i64toi32_i32$0;
   $15$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 8;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 66;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$3
     }
     $9_1 = HEAPU8[($8_1 + 4 | 0) >> 0] | 0;
     $10_1 = 0;
     $11_1 = 0;
     break label$2;
    }
    FUNCTION_TABLE[$7_1 | 0](HEAP32[$0_1 >> 2] | 0, HEAP32[$1_1 >> 2] | 0, HEAP32[$2_1 >> 2] | 0, HEAP32[$3_1 >> 2] | 0, $5_1, $6_1);
    $10_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    label$4 : {
     label$5 : {
      if (!((HEAPU8[($8_1 + 8 | 0) >> 0] | 0) & 2 | 0)) {
       break label$5
      }
      $11_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      break label$4;
     }
     if (!$10_1) {
      break label$1
     }
     $11_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (!$11_1) {
      break label$1
     }
    }
    wasm2js_memory_copy($10_1, $11_1, 1024);
    return;
   }
   label$6 : {
    label$7 : while (1) {
     if (($10_1 | 0) == ($9_1 | 0)) {
      break label$6
     }
     $12_1 = (HEAP32[(($8_1 + ($10_1 << 5 | 0) | 0) + 16 | 0) >> 2] | 0) + 1 | 0;
     $11_1 = ($11_1 | 0) > ($12_1 | 0) ? $11_1 : $12_1;
     $10_1 = $10_1 + 1 | 0;
     continue label$7;
    };
   }
   $13_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
   $14_1 = 0 - $6_1 | 0;
   $10_1 = 0;
   label$8 : while (1) {
    if (($10_1 | 0) == ($13_1 | 0)) {
     break label$1
    }
    label$9 : {
     $9_1 = $311($4_1 | 0, $5_1 | 0, $10_1 | 0) | 0;
     if (($9_1 | 0) < (0 | 0)) {
      break label$9
     }
     $12_1 = $6_1;
     label$10 : {
      if (($10_1 + -1 | 0) >>> 0 > 1 >>> 0) {
       break label$10
      }
      $12_1 = 0 - ($14_1 >> (HEAPU8[($8_1 + 6 | 0) >> 0] | 0) | 0) | 0;
     }
     $11_1 = $10_1 << 2 | 0;
     FUNCTION_TABLE[$7_1 | 0](HEAP32[($0_1 + $11_1 | 0) >> 2] | 0, HEAP32[($1_1 + $11_1 | 0) >> 2] | 0, HEAP32[($2_1 + $11_1 | 0) >> 2] | 0, HEAP32[($3_1 + $11_1 | 0) >> 2] | 0, $9_1, $12_1);
     $10_1 = $10_1 + 1 | 0;
     continue label$8;
    }
    break label$8;
   };
   $332(0 | 0, 16 | 0, global$1 + 6470 | 0 | 0, 0 | 0);
  }
 }
 
 function $323($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(HEAP32[$0_1 >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $324($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $12_1 = 0, $9_1 = 0, $11_1 = 0, $13_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $8_1 = HEAP32[$0_1 >> 2] | 0;
  }
  $244($4_1 | 0, 0 | 0, 1 | 0);
  $9_1 = $4_1 + 1024 | 0;
  $244($9_1 | 0, 0 | 0, 1 | 0);
  $10_1 = $4_1 + 2048 | 0;
  $244($10_1 | 0, 0 | 0, 1 | 0);
  $11_1 = $4_1 + 3072 | 0;
  $244($11_1 | 0, 0 | 0, 65536 | 0);
  label$2 : {
   if (!$6_1) {
    break label$2
   }
   HEAP32[$6_1 >> 2] = 16;
   HEAP32[($6_1 + 4 | 0) >> 2] = 16;
  }
  label$3 : {
   if (!$8_1) {
    break label$3
   }
   if (!(HEAP32[$5_1 >> 2] | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     $12_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$12_1) {
      break label$5
     }
     $12_1 = HEAP32[($0_1 + $12_1 | 0) >> 2] | 0;
     if (!$12_1) {
      break label$5
     }
     $13_1 = HEAP32[$12_1 >> 2] | 0;
     if (!$13_1) {
      break label$5
     }
     $13_1 = FUNCTION_TABLE[HEAP32[($13_1 + 4 | 0) >> 2] | 0 | 0]($12_1) | 0;
     HEAP32[($7_1 + 52 | 0) >> 2] = $12_1;
     HEAP32[($7_1 + 48 | 0) >> 2] = $13_1;
     $247($4_1 | 0, global$1 + 6581 | 0 | 0, $7_1 + 48 | 0 | 0);
     if (!$6_1) {
      break label$4
     }
     (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $325($12_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $8_1 = FUNCTION_TABLE[HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0]($0_1) | 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($7_1 + 16 | 0) >> 2] = $8_1;
    $247($9_1 | 0, global$1 + 6581 | 0 | 0, $7_1 + 16 | 0 | 0);
    if (!$6_1) {
     break label$3
    }
    (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $325($0_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   $8_1 = FUNCTION_TABLE[HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0]($0_1) | 0;
   HEAP32[($7_1 + 36 | 0) >> 2] = $0_1;
   HEAP32[($7_1 + 32 | 0) >> 2] = $8_1;
   $247($9_1 | 0, global$1 + 6581 | 0 | 0, $7_1 + 32 | 0 | 0);
  }
  label$6 : {
   if (($1_1 | 0) < (-7 | 0)) {
    break label$6
   }
   if (!(HEAP32[$5_1 >> 2] | 0)) {
    break label$6
   }
   if (!((HEAPU8[(global$1 + 44320 | 0) >> 0] | 0) & 2 | 0)) {
    break label$6
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $326($1_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $247($10_1 | 0, global$1 + 6592 | 0 | 0, $7_1 | 0);
  }
  $249($11_1 | 0, $2_1 | 0, $3_1 | 0);
  label$7 : {
   label$8 : {
    if (HEAPU8[(HEAP32[$4_1 >> 2] | 0) >> 0] | 0) {
     break label$8
    }
    if (HEAPU8[(HEAP32[$9_1 >> 2] | 0) >> 0] | 0) {
     break label$8
    }
    if (HEAPU8[(HEAP32[$10_1 >> 2] | 0) >> 0] | 0) {
     break label$8
    }
    if (!(HEAPU8[(HEAP32[$11_1 >> 2] | 0) >> 0] | 0)) {
     break label$7
    }
   }
   $0_1 = 0;
   label$9 : {
    $8_1 = HEAP32[($4_1 + 3076 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$9
    }
    if ($8_1 >>> 0 > (HEAP32[($4_1 + 3080 | 0) >> 2] | 0) >>> 0) {
     break label$9
    }
    $0_1 = HEAP8[(($8_1 + (HEAP32[$11_1 >> 2] | 0) | 0) + -1 | 0) >> 0] | 0;
   }
   HEAP32[$5_1 >> 2] = ($0_1 | 0) == (10 | 0) | ($0_1 | 0) == (13 | 0) | 0;
  }
  global$0 = $7_1 + 64 | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0;
  $1_1 = 16;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   if (($3_1 | 0) < (3357440 | 0)) {
    break label$1
   }
   if (($3_1 & 252 | 0) >>> 0 < 100 >>> 0) {
    break label$1
   }
   $3_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
   if ($3_1 >>> 0 > 45 >>> 0) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    return (FUNCTION_TABLE[$2_1 | 0]($0_1) | 0) + 16 | 0 | 0;
   }
   $1_1 = $3_1 + 16 | 0;
  }
  return $1_1 | 0;
 }
 
 function $326($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = __wasm_rotl_i32($0_1 + 8 | 0 | 0, 29 | 0) | 0;
   if ($0_1 >>> 0 > 8 >>> 0) {
    break label$1
   }
   return HEAP32[((global$1 + 12688 | 0) + ($0_1 << 2 | 0) | 0) >> 2] | 0 | 0;
  }
  return global$1 + 6655 | 0 | 0;
 }
 
 function $327($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $95_1 = 0;
  $4_1 = global$0 - 5184 | 0;
  global$0 = $4_1;
  label$1 : {
   $5_1 = ($1_1 | 0) > (-1 | 0);
   $6_1 = $5_1 ? $1_1 & 255 | 0 : $1_1;
   if (($6_1 | 0) > (HEAP32[(global$1 + 12676 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $7_1 = global$1;
   $567($7_1 + 44292 | 0 | 0) | 0;
   $324($0_1 | 0, $6_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 1088 | 0 | 0, $7_1 + 12672 | 0 | 0, $4_1 + 56 | 0 | 0);
   HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 1088 | 0) >> 2] | 0;
   HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 2112 | 0) >> 2] | 0;
   HEAP32[($4_1 + 40 | 0) >> 2] = HEAP32[($4_1 + 3136 | 0) >> 2] | 0;
   HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 4160 | 0) >> 2] | 0;
   $539($4_1 + 64 | 0 | 0, 1024 | 0, $7_1 + 6500 | 0 | 0, $4_1 + 32 | 0 | 0) | 0;
   label$2 : {
    $7_1 = HEAP32[($7_1 + 44288 | 0) >> 2] | 0;
    if ($7_1) {
     break label$2
    }
    $7_1 = $517(2 | 0) | 0;
    $7_1 = $7_1 ? 1 : -1;
    HEAP32[(global$1 + 44288 | 0) >> 2] = $7_1;
   }
   label$3 : {
    label$4 : {
     if (!(HEAP32[(global$1 + 12672 | 0) >> 2] | 0)) {
      break label$4
     }
     if (!((HEAPU8[(global$1 + 44320 | 0) >> 0] | 0) & 1 | 0)) {
      break label$4
     }
     if ($552($4_1 + 64 | 0 | 0, global$1 + 43264 | 0 | 0) | 0) {
      break label$4
     }
     if (!((HEAPU8[($4_1 + 64 | 0) >> 0] | 0) & 255 | 0)) {
      break label$4
     }
     if ((HEAPU8[((($685($4_1 + 64 | 0 | 0) | 0) + ($4_1 + 64 | 0) | 0) + -1 | 0) >> 0] | 0 | 0) == (13 | 0)) {
      break label$4
     }
     $1_1 = global$1 + 43252 | 0;
     $95_1 = $1_1;
     $1_1 = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
     HEAP32[$95_1 >> 2] = $1_1;
     if (($7_1 | 0) != (1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
     $1_1 = global$1;
     $538(HEAP32[global$6 >> 2] | 0 | 0, $1_1 + 6509 | 0 | 0, $4_1 + 16 | 0 | 0) | 0;
     break label$3;
    }
    $1_1 = $5_1 ? ($1_1 >>> 8 | 0) & 255 | 0 : 0;
    label$5 : {
     $7_1 = HEAP32[(global$1 + 43252 | 0) >> 2] | 0;
     if (($7_1 | 0) < (1 | 0)) {
      break label$5
     }
     HEAP32[$4_1 >> 2] = $7_1;
     $7_1 = global$1;
     $538(HEAP32[global$6 >> 2] | 0 | 0, $7_1 + 6545 | 0 | 0, $4_1 | 0) | 0;
     HEAP32[($7_1 + 43252 | 0) >> 2] = 0;
    }
    $554(global$1 + 43264 | 0 | 0, $4_1 + 64 | 0 | 0) | 0;
    $328(HEAP32[($4_1 + 1088 | 0) >> 2] | 0 | 0);
    $329(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($4_1 + 1088 | 0) >> 2] | 0 | 0);
    $328(HEAP32[($4_1 + 2112 | 0) >> 2] | 0 | 0);
    $329(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($4_1 + 2112 | 0) >> 2] | 0 | 0);
    $328(HEAP32[($4_1 + 3136 | 0) >> 2] | 0 | 0);
    $7_1 = $6_1 >> 3 | 0;
    $7_1 = ($7_1 | 0) < (7 | 0) ? $7_1 : 7;
    $7_1 = ($7_1 | 0) > (0 | 0) ? $7_1 : 0;
    $329($7_1 | 0, $1_1 | 0, HEAP32[($4_1 + 3136 | 0) >> 2] | 0 | 0);
    $328(HEAP32[($4_1 + 4160 | 0) >> 2] | 0 | 0);
    $329($7_1 | 0, $1_1 | 0, HEAP32[($4_1 + 4160 | 0) >> 2] | 0 | 0);
   }
   $250($4_1 + 4160 | 0 | 0, 0 | 0) | 0;
   $568(global$1 + 44292 | 0 | 0) | 0;
  }
  global$0 = $4_1 + 5184 | 0;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $1_1 = HEAPU8[$0_1 >> 0] | 0;
    if (!$1_1) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if ($1_1 >>> 0 < 8 >>> 0) {
       break label$4
      }
      if ((($1_1 + -14 | 0) & 255 | 0) >>> 0 > 17 >>> 0) {
       break label$3
      }
     }
     HEAP8[$0_1 >> 0] = 63;
    }
    $0_1 = $0_1 + 1 | 0;
    continue label$2;
   };
  }
 }
 
 function $329($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!(HEAPU8[$2_1 >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[(global$1 + 12684 | 0) >> 2] | 0;
    if (($3_1 | 0) > (-1 | 0)) {
     break label$2
    }
    $3_1 = global$1;
    $330();
    $3_1 = HEAP32[($3_1 + 12684 | 0) >> 2] | 0;
   }
   $331($0_1 | 0, $1_1 | 0, $2_1 | 0, (($0_1 | 0) == (4 | 0) ? 0 : $3_1) | 0);
  }
 }
 
 function $330() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = 0;
  $1_1 = global$1;
  $2_1 = $559($1_1 + 6656 | 0 | 0) | 0;
  label$1 : {
   if ($559($1_1 + 6661 | 0 | 0) | 0) {
    break label$1
   }
   $0_1 = 1;
   if ($559(global$1 + 6682 | 0 | 0) | 0) {
    break label$1
   }
   $0_1 = 0;
   if (!$2_1) {
    break label$1
   }
   $0_1 = ($517(2 | 0) | 0 | 0) != (0 | 0);
  }
  $1_1 = global$1;
  HEAP32[($1_1 + 12684 | 0) >> 2] = $0_1;
  label$2 : {
   label$3 : {
    if ($559($1_1 + 6701 | 0 | 0) | 0) {
     break label$3
    }
    if (!$2_1) {
     break label$2
    }
    if (!($544($2_1 | 0, global$1 + 6723 | 0 | 0) | 0)) {
     break label$2
    }
   }
   HEAP32[(global$1 + 12684 | 0) >> 2] = $0_1 << 8 | 0;
  }
 }
 
 function $331($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
    $3_1 = global$1;
    $2_1 = HEAP32[(($3_1 + 6752 | 0) + ($0_1 << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 & 15 | 0;
    HEAP32[$4_1 >> 2] = ($2_1 >>> 4 | 0) & 15 | 0;
    $538(HEAP32[global$6 >> 2] | 0 | 0, $3_1 + 6732 | 0 | 0, $4_1 | 0) | 0;
    break label$1;
   }
   $5_1 = global$1;
   label$3 : {
    if (!$1_1) {
     break label$3
    }
    if ((HEAP32[($5_1 + 12684 | 0) >> 2] | 0 | 0) != (256 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
    HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
    $3_1 = global$1;
    HEAP32[($4_1 + 16 | 0) >> 2] = HEAPU8[((($3_1 + 6752 | 0) + ($0_1 << 2 | 0) | 0) + 2 | 0) >> 0] | 0;
    $538(HEAP32[global$6 >> 2] | 0 | 0, $3_1 + 7e3 | 0 | 0, $4_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   $1_1 = HEAP32[global$6 >> 2] | 0;
   label$4 : {
    if (($3_1 | 0) != (256 | 0)) {
     break label$4
    }
    HEAP32[($4_1 + 40 | 0) >> 2] = $2_1;
    $3_1 = global$1;
    $2_1 = HEAP32[(($3_1 + 6752 | 0) + ($0_1 << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = ($2_1 >>> 8 | 0) & 255 | 0;
    HEAP32[($4_1 + 32 | 0) >> 2] = ($2_1 >>> 16 | 0) & 255 | 0;
    $538($1_1 | 0, $3_1 + 7027 | 0 | 0, $4_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   $682($2_1 | 0, $1_1 | 0) | 0;
  }
  global$0 = $4_1 + 48 | 0;
 }
 
 function $332($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $333($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $333($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $4_1 = HEAP32[(global$1 + 12680 | 0) >> 2] | 0;
    break label$1;
   }
   $4_1 = HEAP32[(global$1 + 12680 | 0) >> 2] | 0;
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$5_1) {
    break label$1
   }
   if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (3280642 | 0)) {
    break label$1
   }
   if (($1_1 | 0) < (8 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$1
   }
   $1_1 = (HEAP32[($0_1 + $5_1 | 0) >> 2] | 0) + $1_1 | 0;
  }
  label$3 : {
   if (!$4_1) {
    break label$3
   }
   FUNCTION_TABLE[$4_1 | 0]($0_1, $1_1, $2_1, $3_1);
  }
 }
 
 function $334($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5$hi = 0, i64toi32_i32$6 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $12_1 = 0, $12$hi = 0, $15_1 = 0, $17$hi = 0, $58_1 = 0, $26$hi = 0, $28_1 = 0, $28$hi = 0, $32$hi = 0, $35_1 = 0, $35$hi = 0, $36_1 = 0, $38$hi = 0, $61_1 = 0, $47$hi = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $65_1 = 0, $65$hi = 0, $72_1 = 0, $72$hi = 0, $74_1 = 0, $77$hi = 0, $62_1 = 0, $83_1 = 0, $83$hi = 0, $93$hi = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    if (!!($1_1 | i64toi32_i32$0 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
   }
   i64toi32_i32$1 = $1$hi;
   $12_1 = $1_1;
   $12$hi = i64toi32_i32$1;
   $2_1 = global$1 + 7056 | 0;
   $15_1 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
   $17$hi = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
   $58_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 36691299;
   i64toi32_i32$1 = __wasm_i64_mul($58_1 | 0, i64toi32_i32$2 | 0, -862635923 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 58;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $45_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $45_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = HEAPU8[($15_1 + $45_1 | 0) >> 0] | 0;
   i64toi32_i32$1 = 0;
   $26$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$5 = $26$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $46_1 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
    $46_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
   }
   $1_1 = $46_1;
   $1$hi = i64toi32_i32$5;
   $28_1 = $1_1;
   $28$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
    $47_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
    $47_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $1_1 = $47_1;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $28$hi;
   i64toi32_i32$5 = $28_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $32$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$4 = $32$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   $35_1 = $0_1;
   $35$hi = i64toi32_i32$5;
   $36_1 = $2_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   $38$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $61_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   i64toi32_i32$5 = 36691299;
   i64toi32_i32$5 = __wasm_i64_mul($61_1 | 0, i64toi32_i32$4 | 0, -862635923 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 58;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $48_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    $48_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
   }
   $4_1 = HEAPU8[($36_1 + $48_1 | 0) >> 0] | 0;
   i64toi32_i32$5 = 0;
   $47$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $35$hi;
   i64toi32_i32$4 = $35_1;
   i64toi32_i32$0 = $47$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
    $50_1 = i64toi32_i32$5 >> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >> i64toi32_i32$2 | 0;
    $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
   }
   $1_1 = $50_1;
   $1$hi = i64toi32_i32$0;
   $49_1 = $1_1;
   $49$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
    $51_1 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
    $51_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   $1_1 = $51_1;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $49$hi;
   i64toi32_i32$0 = $49_1;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $53$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $53$hi;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   label$3 : {
    label$4 : while (1) {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$4 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$1 = $1$hi;
     $59_1 = $1_1;
     $59$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $5$hi;
     $60_1 = $5_1;
     $60$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$4 = $5_1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $52_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
        $53_1 = 0
       } else {
        $53_1 = 1
       }
       $54_1 = $53_1;
      } else {
       $54_1 = 0
      }
      $52_1 = $54_1;
     }
     $2_1 = $52_1;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$3 = $59$hi;
     i64toi32_i32$1 = $60$hi;
     i64toi32_i32$0 = i64toi32_i32$5 ? $59_1 : $60_1;
     i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
     $65_1 = i64toi32_i32$0;
     $65$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $5$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $5$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$5 ? $5_1 : $1_1;
     i64toi32_i32$5 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$0;
     $0_1 = i64toi32_i32$3;
     $0$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $65$hi;
     i64toi32_i32$1 = $65_1;
     i64toi32_i32$3 = $0$hi;
     i64toi32_i32$4 = $0_1;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$2;
     $72_1 = i64toi32_i32$0;
     $72$hi = i64toi32_i32$2;
     $74_1 = global$1 + 7056 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     $77$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $77$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $62_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     i64toi32_i32$2 = 36691299;
     i64toi32_i32$2 = __wasm_i64_mul($62_1 | 0, i64toi32_i32$5 | 0, -862635923 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 58;
     i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $55_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $55_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     i64toi32_i32$5 = $74_1 + $55_1 | 0;
     i64toi32_i32$2 = HEAPU8[i64toi32_i32$5 >> 0] | 0;
     i64toi32_i32$0 = 0;
     $83_1 = i64toi32_i32$2;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $72$hi;
     i64toi32_i32$5 = $72_1;
     i64toi32_i32$2 = $83$hi;
     i64toi32_i32$4 = $83_1;
     i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $56_1 = i64toi32_i32$0 >> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$1 | 0;
      $56_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
     }
     $5_1 = $56_1;
     $5$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $0$hi;
     $1_1 = $0_1;
     $1$hi = i64toi32_i32$2;
     continue label$4;
    };
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $93$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$5 = $93$hi;
   i64toi32_i32$4 = $4_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $4_1;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $57_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $57_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $1_1 = $57_1;
   $1$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$0 | 0;
 }
 
 function $335($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $6$hi = 0, $4$hi = 0, $4_1 = 0, $5$hi = 0, $6_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $7$hi = 0, $8_1 = 0, $73_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $88_1 = 0, $89_1 = 0, $91_1 = 0, $92_1 = 0, $93_1 = 0, $95_1 = 0, $96_1 = 0, $97_1 = 0, $98_1 = 0, $99_1 = 0, $102_1 = 0, $103_1 = 0, $104_1 = 0, $105_1 = 0, $106_1 = 0, $7_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $112_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $120_1 = 0, $121_1 = 0, $48_1 = 0, $48$hi = 0, $49$hi = 0, $58_1 = 0, $58$hi = 0, $59$hi = 0, $61$hi = 0, $63$hi = 0, $72$hi = 0, $74_1 = 0, $74$hi = 0, $79_1 = 0, $79$hi = 0, $87_1 = 0, $87$hi = 0, $90_1 = 0, $90$hi = 0, $94_1 = 0, $94$hi = 0, $97$hi = 0, $100_1 = 0, $100$hi = 0, $101_1 = 0, $101$hi = 0, $107_1 = 0, $107$hi = 0, $111_1 = 0, $112$hi = 0, $113_1 = 0, $113$hi = 0, $119_1 = 0, $120$hi = 0, $126$hi = 0, $128_1 = 0, $128$hi = 0, $130$hi = 0, $137_1 = 0, $137$hi = 0, $140$hi = 0, $143_1 = 0, $144$hi = 0, $148_1 = 0, $148$hi = 0, $153_1 = 0, $153$hi = 0, $156_1 = 0, $156$hi = 0, $157$hi = 0, $165_1 = 0, $165$hi = 0;
  i64toi32_i32$0 = -2147483648;
  $4_1 = 0;
  $4$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    $8_1 = $3_1 & -8193 | 0;
    if (($8_1 | 0) == (4 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $73_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $75_1 = 0
      } else {
       $75_1 = 1
      }
      $76_1 = $75_1;
     } else {
      $76_1 = 0
     }
     $73_1 = $76_1;
    }
    if ($73_1) {
     break label$2
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
     $77_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $78_1 = 0
      } else {
       $78_1 = 1
      }
      $80_1 = $78_1;
     } else {
      $80_1 = 0
     }
     $77_1 = $80_1;
    }
    if ($77_1) {
     break label$2
    }
    if ($8_1 >>> 0 > 5 >>> 0) {
     break label$2
    }
    label$3 : {
     if (!($3_1 & 8192 | 0)) {
      break label$3
     }
     label$4 : {
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$2 = -2147483648;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 2;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$4
      }
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$5 = $0_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
      return i64toi32_i32$5 | 0;
     }
     $3_1 = $3_1 + -8192 | 0;
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$3 | 0)) {
     $81_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0) {
       $82_1 = 0
      } else {
       $82_1 = 1
      }
      $83_1 = $82_1;
     } else {
      $83_1 = 0
     }
     $81_1 = $83_1;
    }
    if ($81_1) {
     break label$1
    }
    label$5 : {
     label$6 : {
      if (($3_1 | 0) != (5 | 0)) {
       break label$6
      }
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $84_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       $84_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
      }
      $5_1 = $84_1;
      $5$hi = i64toi32_i32$5;
      break label$5;
     }
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = $3_1 & 1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$2 : 0;
     i64toi32_i32$5 = i64toi32_i32$1 ? i64toi32_i32$4 : i64toi32_i32$0;
     $5_1 = i64toi32_i32$3;
     $5$hi = i64toi32_i32$5;
    }
    label$7 : {
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 2147483647;
     if ((i64toi32_i32$5 | 0) > (i64toi32_i32$3 | 0)) {
      $85_1 = 1
     } else {
      if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$3 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$4 >>> 0) {
        $86_1 = 0
       } else {
        $86_1 = 1
       }
       $88_1 = $86_1;
      } else {
       $88_1 = 0
      }
      $85_1 = $88_1;
     }
     if ($85_1) {
      break label$7
     }
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 2147483647;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$5 | 0)) {
      $89_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $91_1 = 0
       } else {
        $91_1 = 1
       }
       $92_1 = $91_1;
      } else {
       $92_1 = 0
      }
      $89_1 = $92_1;
     }
     if ($89_1) {
      break label$7
     }
     label$8 : {
      i64toi32_i32$4 = $0$hi;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 2147483647;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$1 | 0)) {
       $93_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$5 >>> 0) {
         $95_1 = 0
        } else {
         $95_1 = 1
        }
        $96_1 = $95_1;
       } else {
        $96_1 = 0
       }
       $93_1 = $96_1;
      }
      if ($93_1) {
       break label$8
      }
      i64toi32_i32$3 = $5$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $0$hi;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$4 = $0$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $0_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $48_1 = i64toi32_i32$4;
      $48$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $5$hi;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$4 = $48$hi;
      i64toi32_i32$1 = $48_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $49$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $49$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = __wasm_i64_sdiv(i64toi32_i32$0 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
      return i64toi32_i32$5 | 0;
     }
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $6_1 = i64toi32_i32$2;
     $6$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $58_1 = i64toi32_i32$2;
     $58$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$2 = $58$hi;
     i64toi32_i32$1 = $58_1;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     $59$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $59$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = __wasm_i64_mul(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $61$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$0 = $61$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = $5$hi;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $63$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $63$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = __wasm_i64_sdiv(i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$4;
     label$9 : {
      i64toi32_i32$4 = $1$hi;
      if (!($1_1 | i64toi32_i32$4 | 0)) {
       break label$9
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 2147483647;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
       $97_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
         $98_1 = 0
        } else {
         $98_1 = 1
        }
        $99_1 = $98_1;
       } else {
        $99_1 = 0
       }
       $97_1 = $99_1;
      }
      if ($97_1) {
       break label$9
      }
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
      $72$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $72$hi;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = __wasm_i64_sdiv(i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $74_1 = i64toi32_i32$1;
      $74$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = $74$hi;
      i64toi32_i32$5 = $74_1;
      if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
       $102_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$5 >>> 0) {
         $103_1 = 0
        } else {
         $103_1 = 1
        }
        $104_1 = $103_1;
       } else {
        $104_1 = 0
       }
       $102_1 = $104_1;
      }
      if ($102_1) {
       break label$2
      }
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $79_1 = i64toi32_i32$2;
     $79$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$2 = $79$hi;
     i64toi32_i32$1 = $79_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
     return i64toi32_i32$5 | 0;
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $105_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $105_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $105_1;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $6_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $6_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $1_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$5;
    $90_1 = $1_1;
    $90$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $106_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $106_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $7_1 = $106_1;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $90$hi;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$0 = __wasm_i64_mul($90_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $94_1 = i64toi32_i32$0;
    $94$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$0 = $94$hi;
    i64toi32_i32$1 = $94_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $0_1 = i64toi32_i32$2;
    $0$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $108_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     $108_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $97$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $100_1 = i64toi32_i32$3;
    $100$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $97$hi;
    i64toi32_i32$4 = $108_1;
    i64toi32_i32$3 = $100$hi;
    i64toi32_i32$1 = $100_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $101_1 = i64toi32_i32$0;
    $101$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     $109_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
     $109_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    }
    $4_1 = $109_1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $6_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $107_1 = i64toi32_i32$5;
    $107$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$5 = $107$hi;
    i64toi32_i32$1 = $107_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    $111_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $112$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $101$hi;
    i64toi32_i32$1 = $101_1;
    i64toi32_i32$0 = $112$hi;
    i64toi32_i32$2 = $111_1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $113_1 = i64toi32_i32$5;
    $113$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$2 = $5_1;
    $119_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $120$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $113$hi;
    i64toi32_i32$2 = $113_1;
    i64toi32_i32$5 = $120$hi;
    i64toi32_i32$4 = $119_1;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    $3_1 = 63;
    label$10 : {
     label$11 : while (1) {
      if (($3_1 | 0) < (0 | 0)) {
       break label$10
      }
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$0 = 0;
      $126$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$2 = $126$hi;
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $110_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $110_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$0 = $110_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $128_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $128$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
       $112_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
       $112_1 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
      }
      $130$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $128$hi;
      i64toi32_i32$3 = $128_1;
      i64toi32_i32$2 = $130$hi;
      i64toi32_i32$4 = $112_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$5 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$5 ? 0 : i64toi32_i32$4;
      i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$2;
      $137_1 = i64toi32_i32$3;
      $137$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$3 = $137$hi;
      i64toi32_i32$0 = $137_1;
      i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
      $4_1 = i64toi32_i32$2;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $0$hi;
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
       $114_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
       $114_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      }
      $140$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$0 = $2_1;
      $143_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $144$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $140$hi;
      i64toi32_i32$0 = $114_1;
      i64toi32_i32$5 = $144$hi;
      i64toi32_i32$4 = $143_1;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $0_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $0$hi = i64toi32_i32$5;
      $3_1 = $3_1 + -1 | 0;
      continue label$11;
     };
    }
    i64toi32_i32$5 = $0$hi;
    $148_1 = $0_1;
    $148$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
     $115_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $116_1 = 0
      } else {
       $116_1 = 1
      }
      $117_1 = $116_1;
     } else {
      $117_1 = 0
     }
     $115_1 = $117_1;
    }
    i64toi32_i32$3 = $115_1;
    i64toi32_i32$1 = -2147483648;
    i64toi32_i32$5 = $148$hi;
    i64toi32_i32$0 = i64toi32_i32$3 ? 0 : $148_1;
    i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$5;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $0$hi;
  $153_1 = $0_1;
  $153$hi = i64toi32_i32$0;
  i64toi32_i32$3 = $0_1;
  i64toi32_i32$4 = -2147483648;
  i64toi32_i32$1 = 1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$4 | 0)) {
   $118_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$4 | 0)) {
    if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$1 >>> 0) {
     $120_1 = 0
    } else {
     $120_1 = 1
    }
    $121_1 = $120_1;
   } else {
    $121_1 = 0
   }
   $118_1 = $121_1;
  }
  i64toi32_i32$5 = $118_1;
  i64toi32_i32$3 = $153$hi;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$4 = i64toi32_i32$5 ? $153_1 : 1;
  i64toi32_i32$1 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$0;
  $156_1 = i64toi32_i32$4;
  $156$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = 0;
  i64toi32_i32$4 = $156$hi;
  i64toi32_i32$3 = $156_1;
  i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
  $157$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = $157$hi;
  i64toi32_i32$5 = $1$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $335(i64toi32_i32$0 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$1 | 0, (($3_1 >>> 1 | 0) & 1 | 0) ^ $3_1 | 0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $165_1 = i64toi32_i32$1;
  $165$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $165$hi;
  i64toi32_i32$3 = $165_1;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$2 | 0;
 }
 
 function $336($0_1, $0$hi, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $6$hi = 0, $8_1 = 0, $8$hi = 0, $9_1 = 0, $9$hi = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $14_1 = 0, $14$hi = 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $6_1 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $8_1 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, $8_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$1 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$2 = $335($0_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function $337($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $9_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $9_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[i64toi32_i32$1 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$0 = $336($0_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 | 0, 5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $0_1 = i64toi32_i32$0;
  $0$hi = i64toi32_i32$1;
  global$0 = $3_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $338($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   if ((HEAP32[(global$1 + 12724 | 0) >> 2] | 0) >>> 0 < $0_1 >>> 0) {
    break label$1
   }
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $673($1_1 + 12 | 0 | 0, 16 | 0, $0_1 | 0) | 0;
    $2_1 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0, wasm2js_i32$2 = $0_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    break label$1;
   }
   $2_1 = $338(1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if ((HEAP32[(global$1 + 12724 | 0) >> 2] | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   $2_1 = $669($0_1 | 0, !$1_1 + $1_1 | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $340($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($341($2_1 | 0, $1_1 | 0, $3_1 + 12 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = $339($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    if ($2_1) {
     break label$1
    }
   }
   $342($0_1 | 0);
   $2_1 = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $341($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $3$hi = 0, i64toi32_i32$3 = 0, $12_1 = 0, $5$hi = 0, $7$hi = 0, i64toi32_i32$2 = 0;
  i64toi32_i32$0 = 0;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$1;
  $3$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (($1_1 | $0_1 | 0) >>> 0 < 65536 >>> 0) {
     break label$2
    }
    $0_1 = -28;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    if (($12_1 | 0) != (0 | 0)) {
     break label$1
    }
   }
   i64toi32_i32$1 = $3$hi;
   HEAP32[$2_1 >> 2] = $3_1;
   $0_1 = 0;
  }
  return $0_1 | 0;
 }
 
 function $342($0_1) {
  $0_1 = $0_1 | 0;
  $668($0_1 | 0);
 }
 
 function $343($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0;
  $2_1 = $0_1;
  $1_1 = HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $3_1 = 0;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  $342($1_1 | 0);
 }
 
 function $344($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   if (($341($0_1 | 0, $1_1 | 0, $2_1 + 12 | 0 | 0) | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = $338(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $345($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   if (($341($0_1 | 0, $1_1 | 0, $2_1 + 12 | 0 | 0) | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = $346(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $346($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $338($0_1 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   wasm2js_memory_fill($1_1, 0, $0_1);
  }
  return $1_1 | 0;
 }
 
 function $347($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   if (($341($1_1 | 0, $2_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $339($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $348($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $0_1;
  $4_1 = $340(HEAPU8[$3_1 >> 0] | 0 | ((HEAPU8[($3_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP8[$3_1 >> 0] = $4_1;
  HEAP8[($3_1 + 1 | 0) >> 0] = $4_1 >>> 8 | 0;
  HEAP8[($3_1 + 2 | 0) >> 0] = $4_1 >>> 16 | 0;
  HEAP8[($3_1 + 3 | 0) >> 0] = $4_1 >>> 24 | 0;
  return ($2_1 ? ($1_1 ? ($4_1 ? 0 : -48) : 0) : 0) | 0;
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  $1_1 = 0;
  label$2 : {
   $2_1 = ($685($0_1 | 0) | 0) + 1 | 0;
   $3_1 = $339(0 | 0, $2_1 | 0) | 0;
   if (!$3_1) {
    break label$2
   }
   wasm2js_memory_copy($3_1, $0_1, $2_1);
   $1_1 = $3_1;
  }
  return $1_1 | 0;
 }
 
 function $350($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    if (HEAP32[$2_1 >> 2] | 0) {
     break label$1
    }
   }
   label$3 : {
    if (!$1_1) {
     break label$3
    }
    if (!(HEAP32[($1_1 + 48 | 0) >> 2] | 0)) {
     break label$3
    }
    return $1_1 + 48 | 0 | 0;
   }
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $351($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $1_1 = $350($0_1 | 0, $1_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    label$3 : {
     switch ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + -5 | 0 | 0) {
     case 0:
     case 2:
      $343($0_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0 | 0);
      continue label$2;
     case 3:
      break label$3;
     default:
      continue label$2;
     };
    }
    $272($0_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0 | 0);
    continue label$2;
   };
  }
 }
 
 function $352($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ($0_1 >>> 0 > 197 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[((global$1 + 12736 | 0) + Math_imul($0_1, 152) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $353($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 >>> 0 > 197 >>> 0 ? 0 : (global$1 + 12736 | 0) + Math_imul($0_1, 152) | 0) | 0;
 }
 
 function $354($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    $2_1 = $353($0_1 | 0) | 0;
    if ($2_1) {
     break label$2
    }
    $3_1 = -28;
    break label$1;
   }
   $4_1 = HEAPU8[($2_1 + 4 | 0) >> 0] | 0;
   $0_1 = 0;
   $3_1 = 0;
   label$3 : while (1) {
    label$4 : {
     if (($3_1 | 0) != ($4_1 | 0)) {
      break label$4
     }
     $3_1 = 0;
     label$5 : while (1) {
      if (($0_1 | 0) == (4 | 0)) {
       break label$1
      }
      $3_1 = (HEAP32[($1_1 + ($0_1 << 2 | 0) | 0) >> 2] | 0) + $3_1 | 0;
      $0_1 = $0_1 + 1 | 0;
      continue label$5;
     };
    }
    HEAP32[($1_1 + ((HEAP32[(($2_1 + ($3_1 << 5 | 0) | 0) + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
    $3_1 = $3_1 + 1 | 0;
    continue label$3;
   };
  }
  global$0 = $1_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $355($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $7$hi = 0, $7_1 = 0, $5$hi = 0, $6$hi = 0, $8$hi = 0, $14_1 = 0, $9$hi = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $19_1 = 0, $9_1 = 0, $17_1 = 0, $16_1 = 0, i64toi32_i32$6 = 0, $15_1 = 0, $18_1 = 0, $10$hi = 0, $11$hi = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $12$hi = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $13$hi = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $22_1 = 0, $22$hi = 0, $26$hi = 0, $29_1 = 0, $29$hi = 0, $30_1 = 0, $30$hi = 0, $34$hi = 0, $47_1 = 0, $47$hi = 0, $50_1 = 0, $10_1 = 0, $82_1 = 0, $82$hi = 0, $11_1 = 0, $12_1 = 0, $92$hi = 0, $13_1 = 0, $102$hi = 0, $109$hi = 0, $124_1 = 0, $125_1 = 0, $129$hi = 0, $131$hi = 0, $133_1 = 0, $133$hi = 0, $136_1 = 0, $136$hi = 0, $148_1 = 0, $149_1 = 0, $151_1 = 0, $163_1 = 0, $163$hi = 0;
  i64toi32_i32$0 = $3$hi;
  $5_1 = $3_1;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $6_1 = $2_1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   $22_1 = $6_1;
   $22$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $68_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
    $68_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $7_1 = $68_1;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$0 = $22_1;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $26$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$5 = $26$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $8_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $8$hi = i64toi32_i32$0;
   $29_1 = $8_1;
   $29$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   $30_1 = $3_1;
   $30$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $69_1 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
    $69_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   $7_1 = $69_1;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $30$hi;
   i64toi32_i32$0 = $30_1;
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $34$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$4 = $34$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
   $9_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $29$hi;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$1 = $334($29_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $7_1 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
   if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = __wasm_i64_sdiv($9_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = __wasm_i64_sdiv($8_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $5$hi;
  $47_1 = $5_1;
  $47$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$3 = $4_1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $70_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $71_1 = 0
    } else {
     $71_1 = 1
    }
    $72_1 = $71_1;
   } else {
    $72_1 = 0
   }
   $70_1 = $72_1;
  }
  $50_1 = $70_1;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $4_1;
  if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
   $73_1 = 1
  } else {
   if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
    if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$1 >>> 0) {
     $74_1 = 0
    } else {
     $74_1 = 1
    }
    $75_1 = $74_1;
   } else {
    $75_1 = 0
   }
   $73_1 = $75_1;
  }
  $14_1 = $50_1 | $73_1 | 0;
  i64toi32_i32$5 = $14_1;
  i64toi32_i32$3 = $47$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$0 = i64toi32_i32$5 ? $47_1 : 0;
  i64toi32_i32$1 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$4;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $15_1 = 0;
  i64toi32_i32$1 = $5$hi;
  $16_1 = i64toi32_i32$5 ? 0 : $5_1;
  $17_1 = 1;
  i64toi32_i32$1 = $6$hi;
  $18_1 = i64toi32_i32$5 ? 1 : $6_1;
  label$2 : while (1) {
   $19_1 = $16_1;
   $14_1 = $18_1;
   label$3 : {
    label$4 : {
     i64toi32_i32$1 = $7$hi;
     $5_1 = $7_1;
     $5$hi = i64toi32_i32$1;
     $16_1 = !($7_1 | i64toi32_i32$1 | 0);
     if ($16_1) {
      break label$4
     }
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $8_1 = i64toi32_i32$0;
     $8$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $9_1 = i64toi32_i32$0;
     $9$hi = i64toi32_i32$1;
     label$5 : {
      i64toi32_i32$1 = $6$hi;
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$1 = $6$hi;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$0 = __wasm_i64_sdiv($6_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $7_1 = i64toi32_i32$0;
      $7$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $10_1 = i64toi32_i32$0;
      $10$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $82_1 = i64toi32_i32$0;
      $82$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $82$hi;
      i64toi32_i32$5 = $82_1;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$3 = $15_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$3 = $4_1;
      if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
       $76_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $77_1 = 0
        } else {
         $77_1 = 1
        }
        $78_1 = $77_1;
       } else {
        $78_1 = 0
       }
       $76_1 = $78_1;
      }
      if ($76_1) {
       break label$5
      }
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$1 | 0, $8_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $92$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$1 = $92$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$5 = $9_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $13_1 = i64toi32_i32$0;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
       $79_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0) {
         $80_1 = 0
        } else {
         $80_1 = 1
        }
        $81_1 = $80_1;
       } else {
        $81_1 = 0
       }
       $79_1 = $81_1;
      }
      if ($79_1) {
       break label$3
      }
     }
     label$6 : {
      if (!$14_1) {
       break label$6
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
      $102$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = $102$hi;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$5 = __wasm_i64_sdiv(i64toi32_i32$2 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $7_1 = i64toi32_i32$5;
      $7$hi = i64toi32_i32$0;
     }
     label$7 : {
      if (!$19_1) {
       break label$7
      }
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
      $109$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $109$hi;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, $8_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $4_1 = i64toi32_i32$1;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$5 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$5 ? i64toi32_i32$3 : $7_1;
      i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$2;
      $7_1 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$3;
     }
     i64toi32_i32$3 = $7$hi;
     $18_1 = $7_1;
     $124_1 = Math_imul($19_1, $7_1) + $17_1 | 0;
     $125_1 = $19_1;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = __wasm_i64_mul($8_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      $83_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $83_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     }
     $129$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $129$hi;
     i64toi32_i32$3 = $83_1;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $131$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $5$hi;
     i64toi32_i32$4 = $131$hi;
     i64toi32_i32$3 = $5$hi;
     i64toi32_i32$3 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, $5_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $133_1 = i64toi32_i32$3;
     $133$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $6$hi;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$4 = $6$hi;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$3 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$4 | 0, $8_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $136_1 = i64toi32_i32$3;
     $136$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $133$hi;
     i64toi32_i32$1 = $133_1;
     i64toi32_i32$3 = $136$hi;
     i64toi32_i32$0 = $136_1;
     $17_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
     $19_1 = $17_1 ? $124_1 : $125_1;
     $14_1 = $17_1 ? Math_imul($14_1, $18_1) + $15_1 | 0 : $14_1;
    }
    $148_1 = $0_1;
    $149_1 = $14_1;
    $151_1 = 0 - $14_1 | 0;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
     $84_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $85_1 = 0
      } else {
       $85_1 = 1
      }
      $86_1 = $85_1;
     } else {
      $86_1 = 0
     }
     $84_1 = $86_1;
    }
    HEAP32[$148_1 >> 2] = $84_1 ? $149_1 : $151_1;
    HEAP32[$1_1 >> 2] = $19_1;
    return $16_1 | 0;
   }
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$4 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $163_1 = i64toi32_i32$4;
   $163$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$4 = $163$hi;
   i64toi32_i32$0 = $163_1;
   i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $13$hi;
   $16_1 = $13_1;
   i64toi32_i32$2 = $12$hi;
   $18_1 = $12_1;
   $15_1 = $14_1;
   $17_1 = $19_1;
   i64toi32_i32$2 = $5$hi;
   $6_1 = $5_1;
   $6$hi = i64toi32_i32$2;
   continue label$2;
  };
 }
 
 function $356($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $10_1 = 0, $10$hi = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0, $15_1 = 0, $15$hi = 0, $19_1 = 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$1 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $10_1 = i64toi32_i32$1;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  i64toi32_i32$1 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $15_1 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$2 = 0;
  $355($1_1 | 0, $1_1 + 4 | 0 | 0, $10_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0, 2147483647 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$2;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $357($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ($0_1 >>> 0 > 11 >>> 0) {
    break label$1
   }
   $1_1 = (HEAP32[(((global$1 + 9104 | 0) + Math_imul($0_1, 20) | 0) + 8 | 0) >> 2] | 0) >> 3 | 0;
  }
  return $1_1 | 0;
 }
 
 function $358($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ($0_1 >>> 0 > 11 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(((global$1 + 9104 | 0) + Math_imul($0_1, 20) | 0) + 12 | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $359($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $28$hi = 0, $30$hi = 0, $31_1 = 0, $31$hi = 0, $38_1 = 0, $38$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0;
  $5_1 = -28;
  $6_1 = $357($3_1 | 0) | 0;
  $3_1 = $358($3_1 | 0) | 0;
  label$1 : {
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if ($4_1) {
     break label$2
    }
    if (($2_1 | 0) > (2147483616 | 0)) {
     break label$1
    }
    $2_1 = ($2_1 + 31 | 0) & -32 | 0;
    $4_1 = 1;
   }
   if (((2147483647 | 0) / ($4_1 | 0) | 0 | 0) < ($1_1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $28$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $30$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $28$hi;
   i64toi32_i32$1 = $30$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $31_1 = i64toi32_i32$1;
   $31$hi = i64toi32_i32$0;
   i64toi32_i32$1 = (2147483647 - Math_imul($4_1, $1_1) | 0 | 0) / ($6_1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $38_1 = i64toi32_i32$1;
   $38$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$2 = $31_1;
   i64toi32_i32$1 = $38$hi;
   i64toi32_i32$3 = $38_1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $17_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $18_1 = 0
     } else {
      $18_1 = 1
     }
     $19_1 = $18_1;
    } else {
     $19_1 = 0
    }
    $17_1 = $19_1;
   }
   if ($17_1) {
    break label$1
   }
   $2_1 = (($4_1 + Math_imul(Math_imul($2_1, $6_1), $3_1 ? 1 : $1_1) | 0) + -1 | 0) & (0 - $4_1 | 0) | 0;
   label$3 : {
    if (!$0_1) {
     break label$3
    }
    HEAP32[$0_1 >> 2] = $2_1;
   }
   $5_1 = Math_imul($2_1, $3_1 ? $1_1 : 1);
  }
  return $5_1 | 0;
 }
 
 function $360($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $8_1 = 0, $7_1 = 0, $9_1 = 0;
  $7_1 = 0;
  $8_1 = $358($6_1 | 0) | 0;
  $9_1 = $8_1 ? $5_1 : 1;
  $9_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
  $8_1 = Math_imul($8_1 ? 1 : $5_1, $357($6_1 | 0) | 0);
  $6_1 = Math_imul($8_1, $3_1);
  $5_1 = Math_imul($8_1, $2_1);
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $8_1 = Math_imul($8_1, $4_1);
    if ((($3_1 >>> 0 < $2_1 >>> 0 ? $2_1 - $3_1 | 0 : $3_1 - $2_1 | 0) | 0) >= ($8_1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     if (($7_1 | 0) == ($9_1 | 0)) {
      break label$1
     }
     $2_1 = $7_1 << 2 | 0;
     wasm2js_memory_copy((HEAP32[($0_1 + $2_1 | 0) >> 2] | 0) + $5_1 | 0, (HEAP32[($1_1 + $2_1 | 0) >> 2] | 0) + $6_1 | 0, $8_1);
     $7_1 = $7_1 + 1 | 0;
     continue label$3;
    };
   }
   label$4 : while (1) {
    if (($7_1 | 0) == ($9_1 | 0)) {
     break label$1
    }
    $2_1 = $7_1 << 2 | 0;
    wasm2js_memory_copy((HEAP32[($0_1 + $2_1 | 0) >> 2] | 0) + $5_1 | 0, (HEAP32[($1_1 + $2_1 | 0) >> 2] | 0) + $6_1 | 0, $8_1);
    $7_1 = $7_1 + 1 | 0;
    continue label$4;
   };
  }
  return 0 | 0;
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($1_1 + 104 | 0) >> 2] = 1;
   $2_1 = 0;
   $3_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - !(HEAP32[($1_1 + 116 | 0) >> 2] | 0) | 0;
   $4_1 = ($3_1 | 0) > (0 | 0) ? $3_1 : 0;
   $3_1 = 0;
   label$2 : while (1) {
    label$3 : {
     if (($3_1 | 0) != ($4_1 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : while (1) {
       if (($2_1 | 0) == ($4_1 | 0)) {
        break label$4
       }
       $3_1 = (HEAP32[$1_1 >> 2] | 0) + Math_imul($2_1, 88) | 0;
       fimport$8(HEAP32[($3_1 + 80 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
       $573($3_1 + 32 | 0 | 0) | 0;
       $569($3_1 + 4 | 0 | 0) | 0;
       $2_1 = $2_1 + 1 | 0;
       continue label$5;
      };
     }
     $573($1_1 + 52 | 0 | 0) | 0;
     $569($1_1 + 24 | 0 | 0) | 0;
     $343($1_1 | 0);
     $343($0_1 | 0);
     break label$1;
    }
    $5_1 = (HEAP32[$1_1 >> 2] | 0) + Math_imul($3_1, 88) | 0;
    $6_1 = $5_1 + 4 | 0;
    $567($6_1 | 0) | 0;
    HEAP32[($5_1 + 84 | 0) >> 2] = 0;
    $571($5_1 + 32 | 0 | 0) | 0;
    $568($6_1 | 0) | 0;
    $3_1 = $3_1 + 1 | 0;
    continue label$2;
   };
  }
 }
 
 function $362($0_1) {
  $0_1 = $0_1 | 0;
  $343($0_1 | 0);
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  $343($0_1 + 62608 | 0 | 0);
  $343($0_1 + 62612 | 0 | 0);
  $343($0_1 + 62620 | 0 | 0);
  $343($0_1 + 62616 | 0 | 0);
 }
 
 function $364($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $365($1_1 | 0);
   $2_1 = HEAP32[($1_1 + 13448 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0]($1_1 + 13444 | 0);
  }
  $343($0_1 | 0);
 }
 
 function $365($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 13388 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 13380 | 0) >> 2] = 0;
  HEAP32[($0_1 + 13384 | 0) >> 2] = i64toi32_i32$0;
  wasm2js_memory_fill($0_1 + 11140 | 0, 0, 256);
  wasm2js_memory_fill($0_1 + 12260 | 0, 0, 256);
  $366($0_1 + 11420 | 0 | 0);
  $366($0_1 + 11700 | 0 | 0);
  $366($0_1 + 11980 | 0 | 0);
  $366($0_1 + 12540 | 0 | 0);
  $366($0_1 + 12820 | 0 | 0);
  $366($0_1 + 13100 | 0 | 0);
  $366($0_1 + 10480 | 0 | 0);
  $366($0_1 + 10760 | 0 | 0);
  $362($0_1 + 13432 | 0 | 0);
  $362($0_1 + 13436 | 0 | 0);
  $362($0_1 + 13440 | 0 | 0);
  $363($0_1 | 0);
  HEAP32[($0_1 + 13392 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 13424 | 0) >> 2] = 0;
  HEAP32[($0_1 + 13428 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $366($0_1) {
  $0_1 = $0_1 | 0;
  $342(HEAP32[($0_1 + 256 | 0) >> 2] | 0 | 0);
  wasm2js_memory_fill($0_1, 0, 280);
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $551($368(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $368($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $369() {
  fimport$9($370() | 0 | 0, 9344 | 0);
  fimport$10($371() | 0 | 0, 9349 | 0, 1 | 0, 1 & 1 | 0 | 0, 0 & 1 | 0 | 0);
  $372(9354 | 0);
  $373(9359 | 0);
  $374(9371 | 0);
  $375(9385 | 0);
  $376(9391 | 0);
  $377(9406 | 0);
  $378(9410 | 0);
  $379(9423 | 0);
  $380(9428 | 0);
  $381(9442 | 0);
  $382(9450 | 0);
  $383(9459 | 0);
  $384(9465 | 0);
  fimport$11($385() | 0 | 0, 9472 | 0);
  fimport$11($386() | 0 | 0, 9484 | 0);
  fimport$12($387() | 0 | 0, 4 | 0, 9517 | 0);
  fimport$12($388() | 0 | 0, 2 | 0, 9530 | 0);
  fimport$12($389() | 0 | 0, 4 | 0, 9545 | 0);
  fimport$13($390() | 0 | 0, 9560 | 0);
  $391(9576 | 0);
  $392(9606 | 0);
  $393(9643 | 0);
  $394(9682 | 0);
  $395(9713 | 0);
  $396(9753 | 0);
  $397(9782 | 0);
  $398(9820 | 0);
  $399(9850 | 0);
  $392(9889 | 0);
  $393(9921 | 0);
  $394(9954 | 0);
  $395(9987 | 0);
  $396(10021 | 0);
  $397(10054 | 0);
  $400(10088 | 0);
  $401(10119 | 0);
  return;
 }
 
 function $370() {
  return $402() | 0 | 0;
 }
 
 function $371() {
  return $403() | 0 | 0;
 }
 
 function $372($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 24;
  $11_1 = 24;
  fimport$14($404() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, (($405() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($406() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $373($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 24;
  $11_1 = 24;
  fimport$14($407() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, (($408() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($409() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $374($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($410() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, ($411() | 0) & 255 | 0 | 0, ($412() | 0) & 255 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 16;
  $11_1 = 16;
  fimport$14($413() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2 | 0, (($414() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($415() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $376($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($416() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2 | 0, ($417() | 0) & 65535 | 0 | 0, ($418() | 0) & 65535 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $377($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($419() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $420() | 0 | 0, $421() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $378($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($422() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $423() | 0 | 0, $424() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($425() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $426() | 0 | 0, $427() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $380($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($428() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $429() | 0 | 0, $430() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $9$hi = 0, $10$hi = 0, $4_1 = 0, $5_1 = 0, $9_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $431() | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = $432() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $433() | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$0 = $10$hi;
  $27_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$1 = $10$hi;
  $691($4_1 | 0, $5_1 | 0, 8 | 0, $9_1 | 0, i64toi32_i32$0 | 0, $27_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $382($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $9$hi = 0, $10$hi = 0, $4_1 = 0, $5_1 = 0, $9_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $434() | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = $435() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $436() | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$0 = $10$hi;
  $27_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$1 = $10$hi;
  $691($4_1 | 0, $5_1 | 0, 8 | 0, $9_1 | 0, i64toi32_i32$0 | 0, $27_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $383($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$15($437() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $384($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$15($438() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 8 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $385() {
  return $439() | 0 | 0;
 }
 
 function $386() {
  return $440() | 0 | 0;
 }
 
 function $387() {
  return $441() | 0 | 0;
 }
 
 function $388() {
  return $442() | 0 | 0;
 }
 
 function $389() {
  return $443() | 0 | 0;
 }
 
 function $390() {
  return $444() | 0 | 0;
 }
 
 function $391($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($445() | 0 | 0, $446() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $392($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($447() | 0 | 0, $448() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $393($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($449() | 0 | 0, $450() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $394($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($451() | 0 | 0, $452() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $395($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($453() | 0 | 0, $454() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $396($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($455() | 0 | 0, $456() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $397($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($457() | 0 | 0, $458() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $398($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($459() | 0 | 0, $460() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $399($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($461() | 0 | 0, $462() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $400($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($463() | 0 | 0, $464() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $401($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($465() | 0 | 0, $466() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $402() {
  return 12184 | 0;
 }
 
 function $403() {
  return 12208 | 0;
 }
 
 function $404() {
  return $469() | 0 | 0;
 }
 
 function $405() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($470() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $406() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($471() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $407() {
  return $472() | 0 | 0;
 }
 
 function $408() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($473() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $409() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($474() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $410() {
  return $475() | 0 | 0;
 }
 
 function $411() {
  return ($476() | 0) & 255 | 0 | 0;
 }
 
 function $412() {
  return ($477() | 0) & 255 | 0 | 0;
 }
 
 function $413() {
  return $478() | 0 | 0;
 }
 
 function $414() {
  var $1_1 = 0;
  $1_1 = 16;
  return (($479() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $415() {
  var $1_1 = 0;
  $1_1 = 16;
  return (($480() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $416() {
  return $481() | 0 | 0;
 }
 
 function $417() {
  return ($482() | 0) & 65535 | 0 | 0;
 }
 
 function $418() {
  return ($483() | 0) & 65535 | 0 | 0;
 }
 
 function $419() {
  return $484() | 0 | 0;
 }
 
 function $420() {
  return $485() | 0 | 0;
 }
 
 function $421() {
  return $486() | 0 | 0;
 }
 
 function $422() {
  return $487() | 0 | 0;
 }
 
 function $423() {
  return $488() | 0 | 0;
 }
 
 function $424() {
  return $489() | 0 | 0;
 }
 
 function $425() {
  return $490() | 0 | 0;
 }
 
 function $426() {
  return $491() | 0 | 0;
 }
 
 function $427() {
  return $492() | 0 | 0;
 }
 
 function $428() {
  return $493() | 0 | 0;
 }
 
 function $429() {
  return $494() | 0 | 0;
 }
 
 function $430() {
  return $495() | 0 | 0;
 }
 
 function $431() {
  return $496() | 0 | 0;
 }
 
 function $432() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $497() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $433() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $498() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $434() {
  return $499() | 0 | 0;
 }
 
 function $435() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $500() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $436() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $501() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $437() {
  return $502() | 0 | 0;
 }
 
 function $438() {
  return $503() | 0 | 0;
 }
 
 function $439() {
  return 1564 | 0;
 }
 
 function $440() {
  return 10216 | 0;
 }
 
 function $441() {
  return 10304 | 0;
 }
 
 function $442() {
  return 10396 | 0;
 }
 
 function $443() {
  return 10488 | 0;
 }
 
 function $444() {
  return 1224 | 0;
 }
 
 function $445() {
  return $504() | 0 | 0;
 }
 
 function $446() {
  return 0 | 0;
 }
 
 function $447() {
  return $505() | 0 | 0;
 }
 
 function $448() {
  return 0 | 0;
 }
 
 function $449() {
  return $506() | 0 | 0;
 }
 
 function $450() {
  return 1 | 0;
 }
 
 function $451() {
  return $507() | 0 | 0;
 }
 
 function $452() {
  return 2 | 0;
 }
 
 function $453() {
  return $508() | 0 | 0;
 }
 
 function $454() {
  return 3 | 0;
 }
 
 function $455() {
  return $509() | 0 | 0;
 }
 
 function $456() {
  return 4 | 0;
 }
 
 function $457() {
  return $510() | 0 | 0;
 }
 
 function $458() {
  return 5 | 0;
 }
 
 function $459() {
  return $511() | 0 | 0;
 }
 
 function $460() {
  return 4 | 0;
 }
 
 function $461() {
  return $512() | 0 | 0;
 }
 
 function $462() {
  return 5 | 0;
 }
 
 function $463() {
  return $513() | 0 | 0;
 }
 
 function $464() {
  return 6 | 0;
 }
 
 function $465() {
  return $514() | 0 | 0;
 }
 
 function $466() {
  return 7 | 0;
 }
 
 function $467() {
  FUNCTION_TABLE[38 | 0](44324) | 0;
  return;
 }
 
 function $468($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $369();
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $469() {
  return 12220 | 0;
 }
 
 function $470() {
  var $1_1 = 0;
  $1_1 = 24;
  return (128 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $471() {
  var $1_1 = 0;
  $1_1 = 24;
  return (127 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $472() {
  return 12244 | 0;
 }
 
 function $473() {
  var $1_1 = 0;
  $1_1 = 24;
  return (128 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $474() {
  var $1_1 = 0;
  $1_1 = 24;
  return (127 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $475() {
  return 12232 | 0;
 }
 
 function $476() {
  return 0 & 255 | 0 | 0;
 }
 
 function $477() {
  return 255 & 255 | 0 | 0;
 }
 
 function $478() {
  return 12256 | 0;
 }
 
 function $479() {
  var $1_1 = 0;
  $1_1 = 16;
  return (32768 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $480() {
  var $1_1 = 0;
  $1_1 = 16;
  return (32767 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $481() {
  return 12268 | 0;
 }
 
 function $482() {
  return 0 & 65535 | 0 | 0;
 }
 
 function $483() {
  return 65535 & 65535 | 0 | 0;
 }
 
 function $484() {
  return 12280 | 0;
 }
 
 function $485() {
  return -2147483648 | 0;
 }
 
 function $486() {
  return 2147483647 | 0;
 }
 
 function $487() {
  return 12292 | 0;
 }
 
 function $488() {
  return 0 | 0;
 }
 
 function $489() {
  return -1 | 0;
 }
 
 function $490() {
  return 12304 | 0;
 }
 
 function $491() {
  return -2147483648 | 0;
 }
 
 function $492() {
  return 2147483647 | 0;
 }
 
 function $493() {
  return 12316 | 0;
 }
 
 function $494() {
  return 0 | 0;
 }
 
 function $495() {
  return -1 | 0;
 }
 
 function $496() {
  return 12328 | 0;
 }
 
 function $497() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return 0 | 0;
 }
 
 function $498() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 2147483647;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return -1 | 0;
 }
 
 function $499() {
  return 12340 | 0;
 }
 
 function $500() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return 0 | 0;
 }
 
 function $501() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return -1 | 0;
 }
 
 function $502() {
  return 12352 | 0;
 }
 
 function $503() {
  return 12364 | 0;
 }
 
 function $504() {
  return 10544 | 0;
 }
 
 function $505() {
  return 10584 | 0;
 }
 
 function $506() {
  return 10624 | 0;
 }
 
 function $507() {
  return 10664 | 0;
 }
 
 function $508() {
  return 10704 | 0;
 }
 
 function $509() {
  return 10744 | 0;
 }
 
 function $510() {
  return 10784 | 0;
 }
 
 function $511() {
  return 10824 | 0;
 }
 
 function $512() {
  return 10864 | 0;
 }
 
 function $513() {
  return 10904 | 0;
 }
 
 function $514() {
  return 10944 | 0;
 }
 
 function $515() {
  $467();
  return;
 }
 
 function $516() {
  return 44328 | 0;
 }
 
 function $517($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $0_1 = fimport$17($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
    if ($0_1) {
     break label$2
    }
    $0_1 = 59;
    $2_1 = 1;
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) == (2 | 0)) {
     break label$1
    }
   }
   (wasm2js_i32$0 = $516() | 0, wasm2js_i32$1 = $0_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $2_1 = 0;
  }
  global$0 = $1_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $518($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $519($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $3_1 = 0;
      break label$3;
     }
     $0_1 = +$519(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $520($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $0_1 = $563($692(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $0_1 ? -1 : $1_1;
  i64toi32_i32$2 = $0_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $521($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$18($518(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $522($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($563(fimport$19(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$3
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($563(fimport$19(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $523($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $524($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $678($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($525(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2_1 = $683($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1_1 = $525($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$5;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $525($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
   $684($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $525($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, i64toi32_i32$1 = 0, $20_1 = 0, $14_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $19_1 = 0, $16_1 = 0, $18_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $10_1 = 0, $21_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $8_1 = 0, $316_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($11_1 | 0) < (0 | 0)) {
     break label$2
    }
    label$3 : {
     if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
      break label$3
     }
     (wasm2js_i32$0 = $516() | 0, wasm2js_i32$1 = 61), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $11_1 = -1;
     break label$2;
    }
    $11_1 = $1_1 + $11_1 | 0;
   }
   $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
   $1_1 = $12_1;
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               $13_1 = HEAPU8[$1_1 >> 0] | 0;
               if (!$13_1) {
                break label$15
               }
               label$16 : while (1) {
                label$17 : {
                 label$18 : {
                  label$19 : {
                   $13_1 = $13_1 & 255 | 0;
                   if ($13_1) {
                    break label$19
                   }
                   $13_1 = $1_1;
                   break label$18;
                  }
                  if (($13_1 | 0) != (37 | 0)) {
                   break label$17
                  }
                  $13_1 = $1_1;
                  label$20 : while (1) {
                   if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
                    break label$18
                   }
                   $14_1 = $1_1 + 2 | 0;
                   HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                   $13_1 = $13_1 + 1 | 0;
                   $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
                   $1_1 = $14_1;
                   if (($15_1 | 0) == (37 | 0)) {
                    continue label$20
                   }
                   break label$20;
                  };
                 }
                 $1_1 = $13_1 - $12_1 | 0;
                 label$21 : {
                  if (!$0_1) {
                   break label$21
                  }
                  $526($0_1 | 0, $12_1 | 0, $1_1 | 0);
                 }
                 if ($1_1) {
                  continue label$1
                 }
                 $1_1 = $523(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
                 $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                 if (!$1_1) {
                  break label$14
                 }
                 if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                  break label$14
                 }
                 $1_1 = $13_1 + 3 | 0;
                 $16_1 = (HEAP8[($13_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                 $10_1 = 1;
                 break label$13;
                }
                $14_1 = $1_1 + 1 | 0;
                HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                $1_1 = $14_1;
                continue label$16;
               };
              }
              $17_1 = $11_1;
              if ($0_1) {
               break label$6
              }
              if (!$10_1) {
               break label$12
              }
              $1_1 = 1;
              label$22 : {
               label$23 : while (1) {
                $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
                if (!$13_1) {
                 break label$22
                }
                $527($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
                $17_1 = 1;
                $1_1 = $1_1 + 1 | 0;
                if (($1_1 | 0) != (10 | 0)) {
                 continue label$23
                }
                break label$6;
               };
              }
              $17_1 = 1;
              if ($1_1 >>> 0 >= 10 >>> 0) {
               break label$6
              }
              label$24 : while (1) {
               if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
                break label$7
               }
               $17_1 = 1;
               $1_1 = $1_1 + 1 | 0;
               if (($1_1 | 0) == (10 | 0)) {
                break label$6
               }
               continue label$24;
              };
             }
             $1_1 = $13_1 + 1 | 0;
             $16_1 = -1;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
            $18_1 = 0;
            label$25 : {
             $15_1 = HEAP8[$1_1 >> 0] | 0;
             $13_1 = $15_1 + -32 | 0;
             if ($13_1 >>> 0 > 31 >>> 0) {
              break label$25
             }
             $13_1 = 1 << $13_1 | 0;
             if (!($13_1 & 75913 | 0)) {
              break label$25
             }
             label$26 : {
              label$27 : while (1) {
               $14_1 = $1_1 + 1 | 0;
               HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
               $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
               $1_1 = $15_1 + -32 | 0;
               if ($1_1 >>> 0 >= 32 >>> 0) {
                break label$26
               }
               $1_1 = 1 << $1_1 | 0;
               if (!($1_1 & 75913 | 0)) {
                break label$26
               }
               $13_1 = $1_1 | $13_1 | 0;
               $1_1 = $14_1;
               continue label$27;
              };
             }
             $1_1 = $14_1;
             $18_1 = $13_1;
            }
            label$28 : {
             label$29 : {
              if (($15_1 | 0) != (42 | 0)) {
               break label$29
              }
              label$30 : {
               label$31 : {
                if (!($523(HEAP8[($1_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                 break label$31
                }
                $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                 break label$31
                }
                HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                $1_1 = $13_1 + 3 | 0;
                $19_1 = HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                $10_1 = 1;
                break label$30;
               }
               if ($10_1) {
                break label$7
               }
               $10_1 = 0;
               $19_1 = 0;
               label$32 : {
                if (!$0_1) {
                 break label$32
                }
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                $19_1 = HEAP32[$1_1 >> 2] | 0;
               }
               $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
              }
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              if (($19_1 | 0) > (-1 | 0)) {
               break label$28
              }
              $19_1 = 0 - $19_1 | 0;
              $18_1 = $18_1 | 8192 | 0;
              break label$28;
             }
             $19_1 = $528($7_1 + 76 | 0 | 0) | 0;
             if (($19_1 | 0) < (0 | 0)) {
              break label$7
             }
             $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
            }
            $20_1 = -1;
            label$33 : {
             if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
              break label$33
             }
             label$34 : {
              if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
               break label$34
              }
              label$35 : {
               if (!($523(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
                break label$35
               }
               $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$35
               }
               HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $20_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $1_1 = $1_1 + 4 | 0;
               HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
               break label$33;
              }
              if ($10_1) {
               break label$7
              }
              label$36 : {
               label$37 : {
                if ($0_1) {
                 break label$37
                }
                $20_1 = 0;
                break label$36;
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $20_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$33;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
             $20_1 = $528($7_1 + 76 | 0 | 0) | 0;
             $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
            }
            $13_1 = 0;
            label$38 : while (1) {
             $14_1 = $13_1;
             $17_1 = -1;
             if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
              break label$6
             }
             $15_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
             $13_1 = HEAP8[$1_1 >> 0] | 0;
             $1_1 = $15_1;
             $13_1 = HEAPU8[(($13_1 + Math_imul($14_1, 58) | 0) + 10911 | 0) >> 0] | 0;
             if (($13_1 + -1 | 0) >>> 0 < 8 >>> 0) {
              continue label$38
             }
             break label$38;
            };
            if (($13_1 | 0) == (19 | 0)) {
             break label$10
            }
            if (!$13_1) {
             break label$6
            }
            label$39 : {
             if (($16_1 | 0) < (0 | 0)) {
              break label$39
             }
             HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $13_1;
             i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $316_1 = i64toi32_i32$0;
             i64toi32_i32$0 = $7_1;
             HEAP32[($7_1 + 64 | 0) >> 2] = $316_1;
             HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
             break label$9;
            }
            if ($0_1) {
             break label$11
            }
           }
           $17_1 = 0;
           break label$6;
          }
          $527($7_1 + 64 | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
          break label$8;
         }
         $17_1 = -1;
         if (($16_1 | 0) > (-1 | 0)) {
          break label$6
         }
        }
        $1_1 = 0;
        if (!$0_1) {
         continue label$1
        }
       }
       $21_1 = $18_1 & -65537 | 0;
       $13_1 = $18_1 & 8192 | 0 ? $21_1 : $18_1;
       $17_1 = 0;
       $16_1 = 10956;
       $18_1 = $9_1;
       label$40 : {
        label$41 : {
         label$42 : {
          label$43 : {
           label$44 : {
            label$45 : {
             label$46 : {
              label$47 : {
               label$48 : {
                label$49 : {
                 label$50 : {
                  label$51 : {
                   label$52 : {
                    label$53 : {
                     label$54 : {
                      label$55 : {
                       $1_1 = HEAP8[($15_1 + -1 | 0) >> 0] | 0;
                       $1_1 = $14_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                       switch ($1_1 + -88 | 0 | 0) {
                       case 1:
                       case 2:
                       case 3:
                       case 4:
                       case 5:
                       case 6:
                       case 7:
                       case 8:
                       case 10:
                       case 16:
                       case 18:
                       case 19:
                       case 20:
                       case 21:
                       case 25:
                       case 26:
                       case 28:
                       case 30:
                       case 31:
                        break label$4;
                       case 11:
                        break label$40;
                       case 9:
                       case 13:
                       case 14:
                       case 15:
                        break label$41;
                       case 27:
                        break label$46;
                       case 12:
                       case 17:
                        break label$49;
                       case 23:
                        break label$50;
                       case 0:
                       case 32:
                        break label$51;
                       case 24:
                        break label$52;
                       case 22:
                        break label$53;
                       case 29:
                        break label$54;
                       default:
                        break label$55;
                       };
                      }
                      $18_1 = $9_1;
                      label$56 : {
                       switch ($1_1 + -65 | 0 | 0) {
                       case 1:
                       case 3:
                        break label$4;
                       case 0:
                       case 4:
                       case 5:
                       case 6:
                        break label$41;
                       case 2:
                        break label$44;
                       default:
                        break label$56;
                       };
                      }
                      if (($1_1 | 0) == (83 | 0)) {
                       break label$45
                      }
                      break label$5;
                     }
                     $17_1 = 0;
                     $16_1 = 10956;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $22_1 = i64toi32_i32$1;
                     $22$hi = i64toi32_i32$0;
                     break label$48;
                    }
                    $1_1 = 0;
                    label$57 : {
                     switch ($14_1 & 255 | 0 | 0) {
                     case 0:
                      HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                      continue label$1;
                     case 1:
                      HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                      continue label$1;
                     case 2:
                      i64toi32_i32$1 = $11_1;
                      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      continue label$1;
                     case 3:
                      HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                      continue label$1;
                     case 4:
                      HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                      continue label$1;
                     case 6:
                      HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                      continue label$1;
                     case 7:
                      break label$57;
                     default:
                      continue label$1;
                     };
                    }
                    i64toi32_i32$1 = $11_1;
                    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                    i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                    HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    continue label$1;
                   }
                   $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                   $13_1 = $13_1 | 8 | 0;
                   $1_1 = 120;
                  }
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  $12_1 = $529(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                  $17_1 = 0;
                  $16_1 = 10956;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                   break label$47
                  }
                  if (!($13_1 & 8 | 0)) {
                   break label$47
                  }
                  $16_1 = ($1_1 >>> 4 | 0) + 10956 | 0;
                  $17_1 = 2;
                  break label$47;
                 }
                 $17_1 = 0;
                 $16_1 = 10956;
                 i64toi32_i32$2 = $7_1;
                 i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                 $12_1 = $530(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                 if (!($13_1 & 8 | 0)) {
                  break label$47
                 }
                 $1_1 = $9_1 - $12_1 | 0;
                 $20_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1 + 1 | 0;
                 break label$47;
                }
                label$64 : {
                 i64toi32_i32$2 = $7_1;
                 i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                 $22_1 = i64toi32_i32$1;
                 $22$hi = i64toi32_i32$0;
                 i64toi32_i32$2 = i64toi32_i32$1;
                 i64toi32_i32$1 = -1;
                 i64toi32_i32$3 = -1;
                 if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                  $30_1 = 1
                 } else {
                  if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                   if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                    $31_1 = 0
                   } else {
                    $31_1 = 1
                   }
                   $32_1 = $31_1;
                  } else {
                   $32_1 = 0
                  }
                  $30_1 = $32_1;
                 }
                 if ($30_1) {
                  break label$64
                 }
                 i64toi32_i32$2 = $22$hi;
                 i64toi32_i32$2 = 0;
                 i64toi32_i32$3 = 0;
                 i64toi32_i32$0 = $22$hi;
                 i64toi32_i32$1 = $22_1;
                 i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                 i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                 $22_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                 $22$hi = i64toi32_i32$5;
                 i64toi32_i32$3 = $7_1;
                 HEAP32[($7_1 + 64 | 0) >> 2] = $22_1;
                 HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                 $17_1 = 1;
                 $16_1 = 10956;
                 break label$48;
                }
                label$65 : {
                 if (!($13_1 & 2048 | 0)) {
                  break label$65
                 }
                 $17_1 = 1;
                 $16_1 = 10957;
                 break label$48;
                }
                $17_1 = $13_1 & 1 | 0;
                $16_1 = $17_1 ? 10958 : 10956;
               }
               i64toi32_i32$5 = $22$hi;
               $12_1 = $531($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
              }
              $13_1 = ($20_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
              label$66 : {
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               $22_1 = i64toi32_i32$5;
               $22$hi = i64toi32_i32$3;
               i64toi32_i32$2 = i64toi32_i32$5;
               i64toi32_i32$5 = 0;
               i64toi32_i32$1 = 0;
               if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                break label$66
               }
               if ($20_1) {
                break label$66
               }
               $20_1 = 0;
               $12_1 = $9_1;
               break label$5;
              }
              i64toi32_i32$2 = $22$hi;
              $1_1 = ($9_1 - $12_1 | 0) + !($22_1 | i64toi32_i32$2 | 0) | 0;
              $20_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1;
              break label$5;
             }
             $17_1 = 0;
             $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
             $12_1 = $1_1 ? $1_1 : 10966;
             $1_1 = $555($12_1 | 0, 0 | 0, $20_1 | 0) | 0;
             $18_1 = $1_1 ? $1_1 : $12_1 + $20_1 | 0;
             $13_1 = $21_1;
             $20_1 = $1_1 ? $1_1 - $12_1 | 0 : $20_1;
             break label$4;
            }
            label$67 : {
             if (!$20_1) {
              break label$67
             }
             $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
             break label$43;
            }
            $1_1 = 0;
            $532($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $13_1 | 0);
            break label$42;
           }
           HEAP32[($7_1 + 12 | 0) >> 2] = 0;
           i64toi32_i32$1 = $7_1;
           i64toi32_i32$2 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$2;
           HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
           $20_1 = -1;
           $14_1 = $7_1 + 8 | 0;
          }
          $1_1 = 0;
          label$68 : {
           label$69 : while (1) {
            $15_1 = HEAP32[$14_1 >> 2] | 0;
            if (!$15_1) {
             break label$68
            }
            label$70 : {
             $15_1 = $556($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
             $12_1 = ($15_1 | 0) < (0 | 0);
             if ($12_1) {
              break label$70
             }
             if ($15_1 >>> 0 > ($20_1 - $1_1 | 0) >>> 0) {
              break label$70
             }
             $14_1 = $14_1 + 4 | 0;
             $1_1 = $15_1 + $1_1 | 0;
             if ($20_1 >>> 0 > $1_1 >>> 0) {
              continue label$69
             }
             break label$68;
            }
            break label$69;
           };
           $17_1 = -1;
           if ($12_1) {
            break label$6
           }
          }
          $532($0_1 | 0, 32 | 0, $19_1 | 0, $1_1 | 0, $13_1 | 0);
          label$71 : {
           if ($1_1) {
            break label$71
           }
           $1_1 = 0;
           break label$42;
          }
          $14_1 = 0;
          $15_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
          label$72 : while (1) {
           $12_1 = HEAP32[$15_1 >> 2] | 0;
           if (!$12_1) {
            break label$42
           }
           $12_1 = $556($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
           $14_1 = $12_1 + $14_1 | 0;
           if (($14_1 | 0) > ($1_1 | 0)) {
            break label$42
           }
           $526($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
           $15_1 = $15_1 + 4 | 0;
           if ($14_1 >>> 0 < $1_1 >>> 0) {
            continue label$72
           }
           break label$72;
          };
         }
         $532($0_1 | 0, 32 | 0, $19_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
         $1_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
         continue label$1;
        }
        $1_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $19_1, $20_1, $13_1, $1_1) | 0;
        continue label$1;
       }
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
       HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$3;
       $20_1 = 1;
       $12_1 = $8_1;
       $18_1 = $9_1;
       $13_1 = $21_1;
       break label$4;
      }
      $17_1 = -1;
     }
     global$0 = $7_1 + 80 | 0;
     return $17_1 | 0;
    }
    $18_1 = $9_1;
   }
   $15_1 = $18_1 - $12_1 | 0;
   $20_1 = ($20_1 | 0) < ($15_1 | 0) ? $15_1 : $20_1;
   $14_1 = $17_1 + $20_1 | 0;
   $1_1 = ($19_1 | 0) < ($14_1 | 0) ? $14_1 : $19_1;
   $532($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
   $526($0_1 | 0, $16_1 | 0, $17_1 | 0);
   $532($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
   $532($0_1 | 0, 48 | 0, $20_1 | 0, $15_1 | 0, 0 | 0);
   $526($0_1 | 0, $12_1 | 0, $15_1 | 0);
   $532($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
   continue label$1;
  };
 }
 
 function $526($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $680($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $527($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
  }
 }
 
 function $528($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($523(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   $1_1 = 0;
   label$3 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($1_1 + $3_1 | 0) + -48 | 0;
    if (!($523(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
     break label$1
    }
    $1_1 = Math_imul($1_1, 10);
    continue label$3;
   };
  }
  return $1_1 | 0;
 }
 
 function $529($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 11440 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $530($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $8_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $531($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$5 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3_1 = $2_1;
   if (!$3_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $532($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $678($5_1 | 0, $1_1 & 255 | 0 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : while (1) {
     $526($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $526($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $533($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $524($0_1 | 0, $1_1 | 0, $2_1 | 0, 42 | 0, 43 | 0) | 0 | 0;
 }
 
 function $534($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $11_1 = 0, $18_1 = 0, $17_1 = 0, $23_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $14_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $21_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $22_1 = 0, i64toi32_i32$3 = 0, $16_1 = 0, $24_1 = 0, $24$hi = 0, $12_1 = 0, $26_1 = 0.0, $8_1 = 0, $19_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $20_1 = 0, $7_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $25$hi = 0, $46_1 = 0, $25_1 = 0, $162_1 = 0, $164$hi = 0, $166$hi = 0, $169$hi = 0, $173_1 = 0, $173$hi = 0, $377_1 = 0.0, $821 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $536(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $43_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $44_1 = 0
      } else {
       $44_1 = 1
      }
      $45_1 = $44_1;
     } else {
      $45_1 = 0
     }
     $43_1 = $45_1;
    }
    if ($43_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 11456;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $536(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $8_1 = 1;
    $9_1 = 11459;
    break label$1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 11462 : 11457;
   $7_1 = !$8_1;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $532($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $526($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $526($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 11483 : 11487) : $11_1 ? 11475 : 11479) | 0, 3 | 0);
    $532($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $12_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$519(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $11_1 + -1 | 0;
       $13_1 = $5_1 | 32 | 0;
       if (($13_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $13_1 = $5_1 | 32 | 0;
      if (($13_1 | 0) == (97 | 0)) {
       break label$6
      }
      $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $15_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $15_1 = $11_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $15_1;
     $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $16_1 = ($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $17_1 = $16_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $11_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $11_1 = 0;
     }
     HEAP32[$17_1 >> 2] = $11_1;
     $17_1 = $17_1 + 4 | 0;
     $1_1 = ($1_1 - +($11_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($15_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $15_1;
      $11_1 = $17_1;
      $18_1 = $16_1;
      break label$13;
     }
     $18_1 = $16_1;
     $3_1 = $15_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $11_1 = $17_1 + -4 | 0;
       if ($11_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : {
        label$18 : while (1) {
         $162_1 = $11_1;
         i64toi32_i32$0 = $11_1;
         i64toi32_i32$1 = HEAP32[$11_1 >> 2] | 0;
         i64toi32_i32$2 = 0;
         $164$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $25$hi;
         i64toi32_i32$2 = $164$hi;
         i64toi32_i32$0 = i64toi32_i32$1;
         i64toi32_i32$1 = $25$hi;
         i64toi32_i32$3 = $25_1;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          $46_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
          $46_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         }
         $166$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $24$hi;
         i64toi32_i32$1 = $166$hi;
         i64toi32_i32$2 = $46_1;
         i64toi32_i32$0 = $24$hi;
         i64toi32_i32$3 = $24_1;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $24_1 = i64toi32_i32$4;
         $24$hi = i64toi32_i32$5;
         $169$hi = i64toi32_i32$5;
         i64toi32_i32$2 = 0;
         i64toi32_i32$2 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$2 | 0) | 0;
         i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
         $24_1 = i64toi32_i32$2;
         $24$hi = i64toi32_i32$5;
         i64toi32_i32$2 = 0;
         i64toi32_i32$2 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$2 | 0) | 0;
         i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
         $173_1 = i64toi32_i32$2;
         $173$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $169$hi;
         i64toi32_i32$1 = i64toi32_i32$4;
         i64toi32_i32$2 = $173$hi;
         i64toi32_i32$3 = $173_1;
         i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
         i64toi32_i32$4 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
         HEAP32[$162_1 >> 2] = i64toi32_i32$0;
         $11_1 = $11_1 + -4 | 0;
         if ($11_1 >>> 0 < $18_1 >>> 0) {
          break label$17
         }
         i64toi32_i32$4 = $24$hi;
         i64toi32_i32$5 = $24_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = -1;
         i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
         $24_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
         $24$hi = i64toi32_i32$1;
         continue label$18;
        };
       }
       i64toi32_i32$1 = $24$hi;
       $11_1 = $24_1;
       if (!$11_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $11_1;
      }
      label$19 : {
       label$20 : while (1) {
        $11_1 = $17_1;
        if ($11_1 >>> 0 <= $18_1 >>> 0) {
         break label$19
        }
        $17_1 = $11_1 + -4 | 0;
        if (!(HEAP32[$17_1 >> 2] | 0)) {
         continue label$20
        }
        break label$20;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $11_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    $17_1 = ($14_1 + 25 | 0 | 0) / (9 | 0) | 0;
    label$21 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$21
     }
     $19_1 = $17_1 + 1 | 0;
     $20_1 = ($13_1 | 0) == (102 | 0);
     label$22 : while (1) {
      $10_1 = ($3_1 | 0) < (-9 | 0) ? 9 : 0 - $3_1 | 0;
      label$23 : {
       label$24 : {
        if ($18_1 >>> 0 >= $11_1 >>> 0) {
         break label$24
        }
        $21_1 = 1e9 >>> $10_1 | 0;
        $22_1 = (-1 << $10_1 | 0) ^ -1 | 0;
        $3_1 = 0;
        $17_1 = $18_1;
        label$25 : while (1) {
         $23_1 = HEAP32[$17_1 >> 2] | 0;
         HEAP32[$17_1 >> 2] = ($23_1 >>> $10_1 | 0) + $3_1 | 0;
         $3_1 = Math_imul($23_1 & $22_1 | 0, $21_1);
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 < $11_1 >>> 0) {
          continue label$25
         }
         break label$25;
        };
        $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
        if (!$3_1) {
         break label$23
        }
        HEAP32[$11_1 >> 2] = $3_1;
        $11_1 = $11_1 + 4 | 0;
        break label$23;
       }
       $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $10_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $20_1 ? $16_1 : $18_1;
      $11_1 = (($11_1 - $17_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $17_1 + ($19_1 << 2 | 0) | 0 : $11_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$22
      }
      break label$22;
     };
    }
    $17_1 = 0;
    label$26 : {
     if ($18_1 >>> 0 >= $11_1 >>> 0) {
      break label$26
     }
     $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
     $23_1 = HEAP32[$18_1 >> 2] | 0;
     if ($23_1 >>> 0 < 10 >>> 0) {
      break label$26
     }
     $3_1 = 100;
     label$27 : while (1) {
      $17_1 = $17_1 + 1 | 0;
      if ($23_1 >>> 0 < $3_1 >>> 0) {
       break label$26
      }
      $3_1 = Math_imul($3_1, 10);
      continue label$27;
     };
    }
    label$28 : {
     $3_1 = ($14_1 - (($13_1 | 0) == (102 | 0) ? 0 : $17_1) | 0) - (($13_1 | 0) == (103 | 0) & ($14_1 | 0) != (0 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($11_1 - $16_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$28
     }
     $23_1 = $3_1 + 9216 | 0;
     $21_1 = ($23_1 | 0) / (9 | 0) | 0;
     $10_1 = (($21_1 << 2 | 0) + (($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 | 4 | 0 : $6_1 + 340 | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$29 : {
      $23_1 = $23_1 - Math_imul($21_1, 9) | 0;
      if (($23_1 | 0) > (7 | 0)) {
       break label$29
      }
      $3_1 = 100;
      label$30 : while (1) {
       $23_1 = $23_1 + 1 | 0;
       if (($23_1 | 0) == (8 | 0)) {
        break label$29
       }
       $3_1 = Math_imul($3_1, 10);
       continue label$30;
      };
     }
     $22_1 = $10_1 + 4 | 0;
     label$31 : {
      label$32 : {
       $23_1 = HEAP32[$10_1 >> 2] | 0;
       $19_1 = ($23_1 >>> 0) / ($3_1 >>> 0) | 0;
       $21_1 = $23_1 - Math_imul($19_1, $3_1) | 0;
       if ($21_1) {
        break label$32
       }
       if (($22_1 | 0) == ($11_1 | 0)) {
        break label$31
       }
      }
      $377_1 = ($22_1 | 0) == ($11_1 | 0) ? 1.0 : 1.5;
      $22_1 = $3_1 >>> 1 | 0;
      $26_1 = $21_1 >>> 0 < $22_1 >>> 0 ? .5 : ($21_1 | 0) == ($22_1 | 0) ? $377_1 : 1.5;
      $1_1 = $19_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$33 : {
       if ($7_1) {
        break label$33
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$33
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $23_1 = $23_1 - $21_1 | 0;
      HEAP32[$10_1 >> 2] = $23_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$31
      }
      $17_1 = $23_1 + $3_1 | 0;
      HEAP32[$10_1 >> 2] = $17_1;
      label$34 : {
       if ($17_1 >>> 0 < 1e9 >>> 0) {
        break label$34
       }
       label$35 : while (1) {
        HEAP32[$10_1 >> 2] = 0;
        label$36 : {
         $10_1 = $10_1 + -4 | 0;
         if ($10_1 >>> 0 >= $18_1 >>> 0) {
          break label$36
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $17_1 = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
        HEAP32[$10_1 >> 2] = $17_1;
        if ($17_1 >>> 0 > 999999999 >>> 0) {
         continue label$35
        }
        break label$35;
       };
      }
      $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
      $23_1 = HEAP32[$18_1 >> 2] | 0;
      if ($23_1 >>> 0 < 10 >>> 0) {
       break label$31
      }
      $3_1 = 100;
      label$37 : while (1) {
       $17_1 = $17_1 + 1 | 0;
       if ($23_1 >>> 0 < $3_1 >>> 0) {
        break label$31
       }
       $3_1 = Math_imul($3_1, 10);
       continue label$37;
      };
     }
     $3_1 = $10_1 + 4 | 0;
     $11_1 = $11_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $11_1;
    }
    label$38 : {
     label$39 : while (1) {
      $3_1 = $11_1;
      $23_1 = $11_1 >>> 0 <= $18_1 >>> 0;
      if ($23_1) {
       break label$38
      }
      $11_1 = $3_1 + -4 | 0;
      if (!(HEAP32[$11_1 >> 2] | 0)) {
       continue label$39
      }
      break label$39;
     };
    }
    label$40 : {
     label$41 : {
      if (($13_1 | 0) == (103 | 0)) {
       break label$41
      }
      $22_1 = $4_1 & 8 | 0;
      break label$40;
     }
     $11_1 = $14_1 ? $14_1 : 1;
     $10_1 = ($11_1 | 0) > ($17_1 | 0) & ($17_1 | 0) > (-5 | 0) | 0;
     $14_1 = ($10_1 ? $17_1 ^ -1 | 0 : -1) + $11_1 | 0;
     $5_1 = ($10_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break label$40
     }
     $11_1 = -9;
     label$42 : {
      if ($23_1) {
       break label$42
      }
      $10_1 = HEAP32[($3_1 + -4 | 0) >> 2] | 0;
      if (!$10_1) {
       break label$42
      }
      $11_1 = 0;
      if (($10_1 >>> 0) % (10 >>> 0) | 0) {
       break label$42
      }
      $23_1 = 0;
      $11_1 = 100;
      label$43 : {
       label$44 : while (1) {
        if (($10_1 >>> 0) % ($11_1 >>> 0) | 0) {
         break label$43
        }
        $23_1 = $23_1 + 1 | 0;
        $11_1 = Math_imul($11_1, 10);
        continue label$44;
       };
      }
      $11_1 = $23_1 ^ -1 | 0;
     }
     $23_1 = Math_imul(($3_1 - $16_1 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $22_1 = 0;
      $11_1 = ($23_1 + $11_1 | 0) + -9 | 0;
      $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
      $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
      break label$40;
     }
     $22_1 = 0;
     $11_1 = (($17_1 + $23_1 | 0) + $11_1 | 0) + -9 | 0;
     $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
     $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
    }
    $19_1 = ($14_1 | $22_1 | 0 | 0) != (0 | 0);
    label$46 : {
     label$47 : {
      $23_1 = $5_1 & -33 | 0;
      if (($23_1 | 0) != (70 | 0)) {
       break label$47
      }
      $11_1 = ($17_1 | 0) > (0 | 0) ? $17_1 : 0;
      break label$46;
     }
     label$48 : {
      $11_1 = $17_1 >> 31 | 0;
      i64toi32_i32$1 = 0;
      $11_1 = $531(($17_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0) | 0;
      if (($12_1 - $11_1 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $11_1 = $11_1 + -1 | 0;
       HEAP8[$11_1 >> 0] = 48;
       if (($12_1 - $11_1 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $20_1 = $11_1 + -2 | 0;
     HEAP8[$20_1 >> 0] = $5_1;
     HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
     $11_1 = $12_1 - $20_1 | 0;
    }
    $10_1 = ((($8_1 + $14_1 | 0) + $19_1 | 0) + $11_1 | 0) + 1 | 0;
    $532($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
    $526($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $532($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($23_1 | 0) != (70 | 0)) {
         break label$53
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $6_1 + 16 | 0 | 9 | 0;
        $23_1 = $18_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $18_1;
        $18_1 = $23_1;
        label$54 : while (1) {
         i64toi32_i32$4 = $18_1;
         i64toi32_i32$1 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$5 = 0;
         $11_1 = $531(i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, $17_1 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($18_1 | 0) == ($23_1 | 0)) {
            break label$56
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($11_1 | 0) != ($17_1 | 0)) {
           break label$55
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $21_1;
         }
         $526($0_1 | 0, $11_1 | 0, $17_1 - $11_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $16_1 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        $11_1 = 0;
        if (!$19_1) {
         break label$51
        }
        $526($0_1 | 0, 11491 | 0, 1 | 0);
        if ($18_1 >>> 0 >= $3_1 >>> 0) {
         break label$52
        }
        if (($14_1 | 0) < (1 | 0)) {
         break label$52
        }
        label$58 : while (1) {
         label$59 : {
          i64toi32_i32$4 = $18_1;
          i64toi32_i32$5 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$1 = 0;
          $11_1 = $531(i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, $17_1 | 0) | 0;
          if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$59
          }
          label$60 : while (1) {
           $11_1 = $11_1 + -1 | 0;
           HEAP8[$11_1 >> 0] = 48;
           if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$60
           }
           break label$60;
          };
         }
         $526($0_1 | 0, $11_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
         $11_1 = $14_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $3_1 >>> 0) {
          break label$51
         }
         $23_1 = ($14_1 | 0) > (9 | 0);
         $14_1 = $11_1;
         if ($23_1) {
          continue label$58
         }
         break label$51;
        };
       }
       label$61 : {
        if (($14_1 | 0) < (0 | 0)) {
         break label$61
        }
        $21_1 = $3_1 >>> 0 > $18_1 >>> 0 ? $3_1 : $18_1 + 4 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $16_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $18_1;
        label$62 : while (1) {
         label$63 : {
          i64toi32_i32$4 = $17_1;
          i64toi32_i32$1 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$5 = 0;
          $11_1 = $531(i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, $3_1 | 0) | 0;
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$63
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $16_1;
         }
         label$64 : {
          label$65 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$65
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$64
           }
           label$66 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$66
            }
            break label$64;
           };
          }
          $526($0_1 | 0, $11_1 | 0, 1 | 0);
          $11_1 = $11_1 + 1 | 0;
          label$67 : {
           if (($14_1 | 0) > (0 | 0)) {
            break label$67
           }
           if (!$22_1) {
            break label$64
           }
          }
          $526($0_1 | 0, 11491 | 0, 1 | 0);
         }
         $23_1 = $3_1 - $11_1 | 0;
         $526($0_1 | 0, $11_1 | 0, (($14_1 | 0) > ($23_1 | 0) ? $23_1 : $14_1) | 0);
         $14_1 = $14_1 - $23_1 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $21_1 >>> 0) {
          break label$61
         }
         if (($14_1 | 0) > (-1 | 0)) {
          continue label$62
         }
         break label$62;
        };
       }
       $532($0_1 | 0, 48 | 0, $14_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $526($0_1 | 0, $20_1 | 0, $12_1 - $20_1 | 0 | 0);
       break label$50;
      }
      $11_1 = $14_1;
     }
     $532($0_1 | 0, 48 | 0, $11_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $532($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $17_1 = $5_1 & 32 | 0;
   $14_1 = $17_1 ? $9_1 + 9 | 0 : $9_1;
   label$68 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $11_1 = 12 - $3_1 | 0;
    if (!$11_1) {
     break label$68
    }
    $26_1 = 8.0;
    label$69 : while (1) {
     $26_1 = $26_1 * 16.0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$68;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$71 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $821 = $11_1;
    $11_1 = $11_1 >> 31 | 0;
    i64toi32_i32$5 = 0;
    $11_1 = $531(($821 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$5 | 0, $12_1 | 0) | 0;
    if (($11_1 | 0) != ($12_1 | 0)) {
     break label$71
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $11_1 = $6_1 + 15 | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $18_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $21_1 = $11_1 + -2 | 0;
   HEAP8[$21_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($11_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
   $23_1 = $4_1 & 8 | 0;
   $18_1 = $6_1 + 16 | 0;
   label$72 : while (1) {
    $11_1 = $18_1;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$74
      }
      $18_1 = ~~$1_1;
      break label$73;
     }
     $18_1 = -2147483648;
    }
    HEAP8[$11_1 >> 0] = HEAPU8[($18_1 + 11440 | 0) >> 0] | 0 | $17_1 | 0;
    $1_1 = ($1_1 - +($18_1 | 0)) * 16.0;
    label$75 : {
     $18_1 = $11_1 + 1 | 0;
     if (($18_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     label$76 : {
      if ($1_1 != 0.0) {
       break label$76
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$76
      }
      if (!$23_1) {
       break label$75
      }
     }
     HEAP8[($11_1 + 1 | 0) >> 0] = 46;
     $18_1 = $11_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   label$77 : {
    label$78 : {
     if (!$3_1) {
      break label$78
     }
     if ((($18_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$78
     }
     $11_1 = (($3_1 + $12_1 | 0) - $21_1 | 0) + 2 | 0;
     break label$77;
    }
    $11_1 = ($12_1 - (($6_1 + 16 | 0) + $21_1 | 0) | 0) + $18_1 | 0;
   }
   $10_1 = $11_1 + $22_1 | 0;
   $532($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $526($0_1 | 0, $14_1 | 0, $22_1 | 0);
   $532($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $18_1 = $18_1 - ($6_1 + 16 | 0) | 0;
   $526($0_1 | 0, $6_1 + 16 | 0 | 0, $18_1 | 0);
   $17_1 = $12_1 - $21_1 | 0;
   $532($0_1 | 0, 48 | 0, $11_1 - ($18_1 + $17_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $526($0_1 | 0, $21_1 | 0, $17_1 | 0);
   $532($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  global$0 = $6_1 + 560 | 0;
  return (($10_1 | 0) < ($2_1 | 0) ? $2_1 : $10_1) | 0;
 }
 
 function $535($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  (wasm2js_i32$0 = $0_1, wasm2js_f64$0 = +$575($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
 }
 
 function $536($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $537($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $524($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function $538($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $537($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $539($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $540($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $540($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $677($4_1 + 8 | 0 | 0, 11496 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1_1) {
      break label$2
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $533($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   (wasm2js_i32$0 = $516() | 0, wasm2js_i32$1 = 61), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $0_1 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $541($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $677($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $542($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($685($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $543($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $542($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $544($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP8[$1_1 >> 0] | 0;
   if ($2_1) {
    break label$1
   }
   return $0_1 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $0_1 = $543($0_1 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$2
   }
   label$3 : {
    if (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) {
     break label$3
    }
    return $0_1 | 0;
   }
   if (!(HEAPU8[($0_1 + 1 | 0) >> 0] | 0)) {
    break label$2
   }
   label$4 : {
    if (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) {
     break label$4
    }
    return $545($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0_1 + 2 | 0) >> 0] | 0)) {
    break label$2
   }
   label$5 : {
    if (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) {
     break label$5
    }
    return $546($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0_1 + 3 | 0) >> 0] | 0)) {
    break label$2
   }
   label$6 : {
    if (HEAPU8[($1_1 + 4 | 0) >> 0] | 0) {
     break label$6
    }
    return $547($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   $3_1 = $548($0_1 | 0, $1_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $545($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $4_1 = (HEAPU8[$0_1 >> 0] | 0) << 8 | 0 | $2_1 | 0;
   $5_1 = (HEAPU8[$1_1 >> 0] | 0) << 8 | 0 | (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) | 0;
   if (($4_1 | 0) == ($5_1 | 0)) {
    break label$1
   }
   $1_1 = $0_1 + 1 | 0;
   label$2 : while (1) {
    $0_1 = $1_1;
    $2_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    $3_1 = ($2_1 | 0) != (0 | 0);
    if (!$2_1) {
     break label$1
    }
    $1_1 = $0_1 + 1 | 0;
    $4_1 = ($4_1 << 8 | 0) & 65280 | 0 | $2_1 | 0;
    if (($4_1 | 0) != ($5_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($3_1 ? $0_1 : 0) | 0;
 }
 
 function $546($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = $0_1 + 2 | 0;
  $3_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
  $4_1 = ($3_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $3_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0_1 >> 0] | 0) << 24 | 0) | 0 | ($3_1 << 8 | 0) | 0;
    $5_1 = (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$1_1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0;
    if (($3_1 | 0) == ($5_1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $1_1 = $2_1 + 1 | 0;
     $0_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
     $4_1 = ($0_1 | 0) != (0 | 0);
     if (!$0_1) {
      break label$1
     }
     $2_1 = $1_1;
     $3_1 = ($3_1 | $0_1 | 0) << 8 | 0;
     if (($3_1 | 0) != ($5_1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $1_1 = $2_1;
  }
  return ($4_1 ? $1_1 + -2 | 0 : 0) | 0;
 }
 
 function $547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0;
  $2_1 = $0_1 + 3 | 0;
  $3_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
  $4_1 = ($3_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $5_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0_1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0 | $3_1 | 0;
    $6_1 = $1_1;
    $0_1 = HEAPU8[$6_1 >> 0] | 0 | ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $1_1 = $0_1 << 24 | 0 | (($0_1 << 8 | 0) & 16711680 | 0) | 0 | (($0_1 >>> 8 | 0) & 65280 | 0 | ($0_1 >>> 24 | 0) | 0) | 0;
    if (($5_1 | 0) == ($1_1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $3_1 = $2_1 + 1 | 0;
     $0_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
     $4_1 = ($0_1 | 0) != (0 | 0);
     if (!$0_1) {
      break label$1
     }
     $2_1 = $3_1;
     $5_1 = $5_1 << 8 | 0 | $0_1 | 0;
     if (($5_1 | 0) != ($1_1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = $2_1;
  }
  return ($4_1 ? $3_1 + -3 | 0 : 0) | 0;
 }
 
 function $548($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $7_1 = 0, $2_1 = 0, $11_1 = 0, $5_1 = 0, $9_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $2_1 = global$0 - 1056 | 0;
  global$0 = $2_1;
  i64toi32_i32$1 = $2_1 + 1048 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 1040 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 1032 | 0) >> 2] = 0;
  HEAP32[($2_1 + 1036 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 1024 | 0) >> 2] = 0;
  HEAP32[($2_1 + 1028 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $4_1 = HEAPU8[$1_1 >> 0] | 0;
        if ($4_1) {
         break label$6
        }
        $5_1 = -1;
        $6_1 = 1;
        break label$5;
       }
       label$7 : while (1) {
        if (!(HEAPU8[($0_1 + $3_1 | 0) >> 0] | 0)) {
         break label$2
        }
        $4_1 = $4_1 & 255 | 0;
        $3_1 = $3_1 + 1 | 0;
        HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] = $3_1;
        $6_1 = ($2_1 + 1024 | 0) + (($4_1 >>> 3 | 0) & 28 | 0) | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] | 0 | (1 << ($4_1 & 31 | 0) | 0) | 0;
        $4_1 = HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0;
        if ($4_1) {
         continue label$7
        }
        break label$7;
       };
       $6_1 = 1;
       $5_1 = -1;
       if ($3_1 >>> 0 > 1 >>> 0) {
        break label$4
       }
      }
      $7_1 = -1;
      $8_1 = 1;
      break label$3;
     }
     $8_1 = 0;
     $9_1 = 1;
     $4_1 = 1;
     label$8 : while (1) {
      label$9 : {
       label$10 : {
        $7_1 = HEAPU8[($1_1 + ($4_1 + $5_1 | 0) | 0) >> 0] | 0;
        $10_1 = HEAPU8[($1_1 + $6_1 | 0) >> 0] | 0;
        if (($7_1 | 0) != ($10_1 | 0)) {
         break label$10
        }
        label$11 : {
         if (($4_1 | 0) != ($9_1 | 0)) {
          break label$11
         }
         $8_1 = $9_1 + $8_1 | 0;
         $4_1 = 1;
         break label$9;
        }
        $4_1 = $4_1 + 1 | 0;
        break label$9;
       }
       label$12 : {
        if ($7_1 >>> 0 <= $10_1 >>> 0) {
         break label$12
        }
        $9_1 = $6_1 - $5_1 | 0;
        $4_1 = 1;
        $8_1 = $6_1;
        break label$9;
       }
       $4_1 = 1;
       $5_1 = $8_1;
       $8_1 = $8_1 + 1 | 0;
       $9_1 = 1;
      }
      $6_1 = $4_1 + $8_1 | 0;
      if ($6_1 >>> 0 < $3_1 >>> 0) {
       continue label$8
      }
      break label$8;
     };
     $8_1 = 1;
     $7_1 = -1;
     label$13 : {
      if ($3_1 >>> 0 > 1 >>> 0) {
       break label$13
      }
      $6_1 = $9_1;
      break label$3;
     }
     $6_1 = 0;
     $11_1 = 1;
     $4_1 = 1;
     label$14 : while (1) {
      label$15 : {
       label$16 : {
        $10_1 = HEAPU8[($1_1 + ($4_1 + $7_1 | 0) | 0) >> 0] | 0;
        $12_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
        if (($10_1 | 0) != ($12_1 | 0)) {
         break label$16
        }
        label$17 : {
         if (($4_1 | 0) != ($11_1 | 0)) {
          break label$17
         }
         $6_1 = $11_1 + $6_1 | 0;
         $4_1 = 1;
         break label$15;
        }
        $4_1 = $4_1 + 1 | 0;
        break label$15;
       }
       label$18 : {
        if ($10_1 >>> 0 >= $12_1 >>> 0) {
         break label$18
        }
        $11_1 = $8_1 - $7_1 | 0;
        $4_1 = 1;
        $6_1 = $8_1;
        break label$15;
       }
       $4_1 = 1;
       $7_1 = $6_1;
       $6_1 = $6_1 + 1 | 0;
       $11_1 = 1;
      }
      $8_1 = $4_1 + $6_1 | 0;
      if ($8_1 >>> 0 < $3_1 >>> 0) {
       continue label$14
      }
      break label$14;
     };
     $6_1 = $9_1;
     $8_1 = $11_1;
    }
    label$19 : {
     label$20 : {
      $4_1 = ($7_1 + 1 | 0) >>> 0 > ($5_1 + 1 | 0) >>> 0;
      $11_1 = $4_1 ? $8_1 : $6_1;
      $13_1 = $4_1 ? $7_1 : $5_1;
      $9_1 = $13_1 + 1 | 0;
      if (!($549($1_1 | 0, $1_1 + $11_1 | 0 | 0, $9_1 | 0) | 0)) {
       break label$20
      }
      $4_1 = $3_1 + ($13_1 ^ -1 | 0) | 0;
      $11_1 = ($13_1 >>> 0 > $4_1 >>> 0 ? $13_1 : $4_1) + 1 | 0;
      $14_1 = $3_1 - $11_1 | 0;
      $15_1 = 0;
      break label$19;
     }
     $14_1 = $3_1 - $11_1 | 0;
     $15_1 = $14_1;
    }
    $10_1 = $3_1 + -1 | 0;
    $12_1 = $3_1 | 63 | 0;
    $7_1 = 0;
    $6_1 = $0_1;
    label$21 : while (1) {
     label$22 : {
      if (($0_1 - $6_1 | 0) >>> 0 >= $3_1 >>> 0) {
       break label$22
      }
      label$23 : {
       $4_1 = $555($0_1 | 0, 0 | 0, $12_1 | 0) | 0;
       if (!$4_1) {
        break label$23
       }
       $0_1 = $4_1;
       if (($4_1 - $6_1 | 0) >>> 0 < $3_1 >>> 0) {
        break label$2
       }
       break label$22;
      }
      $0_1 = $0_1 + $12_1 | 0;
     }
     label$24 : {
      label$25 : {
       label$26 : {
        $4_1 = HEAPU8[($6_1 + $10_1 | 0) >> 0] | 0;
        if (((HEAP32[(($2_1 + 1024 | 0) + (($4_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> ($4_1 & 31 | 0) | 0) & 1 | 0) {
         break label$26
        }
        $4_1 = $3_1;
        break label$25;
       }
       label$27 : {
        $4_1 = $3_1 - (HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0) | 0;
        if (!$4_1) {
         break label$27
        }
        $4_1 = $15_1 ? ($7_1 ? ($4_1 >>> 0 < $11_1 >>> 0 ? $14_1 : $4_1) : $4_1) : $4_1;
        break label$25;
       }
       $4_1 = $9_1;
       label$28 : {
        label$29 : {
         $8_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $4_1 : $7_1;
         $5_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
         if (!$5_1) {
          break label$29
         }
         label$30 : while (1) {
          if (($5_1 & 255 | 0 | 0) != (HEAPU8[($6_1 + $8_1 | 0) >> 0] | 0 | 0)) {
           break label$28
          }
          $8_1 = $8_1 + 1 | 0;
          $5_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
          if ($5_1) {
           continue label$30
          }
          break label$30;
         };
         $4_1 = $9_1;
        }
        label$31 : while (1) {
         if ($4_1 >>> 0 <= $7_1 >>> 0) {
          break label$1
         }
         $4_1 = $4_1 + -1 | 0;
         if ((HEAPU8[($1_1 + $4_1 | 0) >> 0] | 0 | 0) == (HEAPU8[($6_1 + $4_1 | 0) >> 0] | 0 | 0)) {
          continue label$31
         }
         break label$31;
        };
        $4_1 = $11_1;
        $7_1 = $15_1;
        break label$24;
       }
       $4_1 = $8_1 - $13_1 | 0;
      }
      $7_1 = 0;
     }
     $6_1 = $6_1 + $4_1 | 0;
     continue label$21;
    };
   }
   $6_1 = 0;
  }
  global$0 = $2_1 + 1056 | 0;
  return $6_1 | 0;
 }
 
 function $549($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = HEAPU8[$0_1 >> 0] | 0;
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = $4_1 - $5_1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $550($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if (!$3_1) {
     break label$3
    }
    label$4 : while (1) {
     label$5 : {
      label$6 : {
       $4_1 = HEAPU8[$1_1 >> 0] | 0;
       if (!$4_1) {
        break label$6
       }
       $2_1 = $2_1 + -1 | 0;
       if (!$2_1) {
        break label$6
       }
       if (($3_1 & 255 | 0 | 0) == ($4_1 | 0)) {
        break label$5
       }
      }
      $0_1 = $3_1 & 255 | 0;
      break label$2;
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($3_1) {
      continue label$4
     }
     break label$4;
    };
   }
   $0_1 = 0;
  }
  return $0_1 - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $551($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = ($685($0_1 | 0) | 0) + 1 | 0;
   $2_1 = $667($1_1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $677($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $552($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $553($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$2
    }
    label$3 : {
     if (!($1_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$5 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $0_1 = $0_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     if (!((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = HEAPU8[$1_1 >> 0] | 0;
   HEAP8[$0_1 >> 0] = $2_1;
   if (!$2_1) {
    break label$1
   }
   label$6 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $0_1 | 0;
 }
 
 function $554($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $553($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $555($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     if (!$2_1) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3 | 0)) {
       break label$3
      }
      if ($2_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $557($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $557($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($564() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      (wasm2js_i32$0 = $516() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     (wasm2js_i32$0 = $516() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $558() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  label$1 : {
   if (fimport$20($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $1_1 = $667(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 44404 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $667(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    HEAP32[((HEAP32[(0 + 44404 | 0) >> 2] | 0) + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    if (!(fimport$21(HEAP32[(0 + 44404 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 44404 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $559($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $1_1 = 0;
  $2_1 = $685($0_1 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 44404 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   if ($543($0_1 | 0, 61 | 0) | 0) {
    break label$1
   }
   $1_1 = 0;
   $3_1 = HEAP32[(HEAP32[(0 + 44404 | 0) >> 2] | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = $550($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
     $3_1 = HEAP32[(0 + 44404 | 0) >> 2] | 0;
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $4_1 = (HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) + $2_1 | 0;
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
       break label$2
      }
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
     if ($3_1) {
      continue label$3
     }
     break label$3;
    };
    return 0 | 0;
   }
   $1_1 = $4_1 + 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $560() {
  return 44408 | 0;
 }
 
 function $561() {
  return 44416 | 0;
 }
 
 function $562() {
  return 44420 | 0;
 }
 
 function $563($0_1) {
  $0_1 = $0_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  (wasm2js_i32$0 = $516() | 0, wasm2js_i32$1 = $0_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function $564() {
  return 42976 | 0;
 }
 
 function $565() {
  
 }
 
 function $566($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $567($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $569($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $570($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $571($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $572($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $573($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $574($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $575($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $34_1 = 0, $34$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $43_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $43_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $43_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $34_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = $34_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $46_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $46_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $47_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $47_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $47_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $48_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $48_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $576($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $574($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $49_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $49_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $50_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $50_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $576($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($3_1 & 64 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$3 = $3_1 + -64 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $18_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $2_1 = $18_1;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    if (!$3_1) {
     break label$1
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = 0;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$3 = 64 - $3_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $19_1 = $20_1;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = 0;
    $4_1 = $3_1;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $21_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $24$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $21_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $22_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $1_1 = $22_1;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $577($0_1) {
  $0_1 = $0_1 | 0;
  $578(11640 | 0);
  abort();
 }
 
 function $578($0_1) {
  $0_1 = $0_1 | 0;
  fimport$7();
  abort();
 }
 
 function $579($0_1) {
  $0_1 = $0_1 | 0;
  $580(11640 | 0);
  abort();
 }
 
 function $580($0_1) {
  $0_1 = $0_1 | 0;
  fimport$7();
  abort();
 }
 
 function $581($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($582($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $583($0_1 | 0, $2_1 | 0);
     $4_1 = $85($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $584($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $586($585($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $587($0_1 | 0, $4_1 | 0);
    $588($0_1 | 0, $5_1 | 0);
    $589($0_1 | 0, $2_1 | 0);
   }
   $591($590($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $592($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $577($0_1 | 0);
  abort();
 }
 
 function $582($0_1) {
  $0_1 = $0_1 | 0;
  return ($604($81($0_1 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function $583($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $86($0_1 | 0) | 0, wasm2js_i32$1 = $1_1), HEAP8[(wasm2js_i32$0 + 11 | 0) >> 0] = wasm2js_i32$1;
 }
 
 function $584($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  label$1 : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0_1 = $605($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $585($0_1) {
  $0_1 = $0_1 | 0;
  return $603($0_1 | 0) | 0 | 0;
 }
 
 function $586($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $606($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $587($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $86($0_1 | 0) | 0, wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $588($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $86($0_1 | 0) | 0, wasm2js_i32$1 = $1_1 | -2147483648 | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
 }
 
 function $589($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $86($0_1 | 0) | 0, wasm2js_i32$1 = $1_1), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
 }
 
 function $590($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $591($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $677($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $592($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
 }
 
 function $593($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $128($1_1 | 0) | 0;
  $129($0_1 | 0) | 0;
  $595($0_1 | 0, $594($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $594($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $595($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $594($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $596($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
  $593($0_1 | 0, $5_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  label$1 : {
   $4_1 = $70($1_1 | 0) | 0;
   if ($4_1 >>> 0 >= $2_1 >>> 0) {
    break label$1
   }
   $579($0_1 | 0);
   abort();
  }
  $1_1 = $65($1_1 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 - $2_1 | 0;
  $581($0_1 | 0, $1_1 + $2_1 | 0 | 0, HEAP32[($597($5_1 + 12 | 0 | 0, $5_1 + 4 | 0 | 0) | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $597($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $598($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $598($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $607($2_1 + 8 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($71($0_1 | 0) | 0)) {
    break label$1
   }
   $601($585($0_1 | 0) | 0 | 0, $84($0_1 | 0) | 0 | 0, $600($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $600($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($74($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $601($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $602($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $602($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $608($1_1 | 0, $2_1 | 0, 1 | 0);
 }
 
 function $603($0_1) {
  $0_1 = $0_1 | 0;
  return $612($0_1 | 0) | 0 | 0;
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  return $613($0_1 | 0) | 0 | 0;
 }
 
 function $605($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 15 | 0) & -16 | 0 | 0;
 }
 
 function $606($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($614($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $578(11653 | 0);
   abort();
  }
  return $615($1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $607($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $608($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $609($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $609($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $610($0_1 | 0, $1_1 | 0);
 }
 
 function $610($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $611($0_1 | 0);
 }
 
 function $611($0_1) {
  $0_1 = $0_1 | 0;
  $617($0_1 | 0);
 }
 
 function $612($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $613($0_1) {
  $0_1 = $0_1 | 0;
  return $614($0_1 | 0) | 0 | 0;
 }
 
 function $614($0_1) {
  $0_1 = $0_1 | 0;
  return -1 | 0;
 }
 
 function $615($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $616($0_1 | 0) | 0 | 0;
 }
 
 function $616($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $0_1 = $667($1_1 | 0) | 0;
    if ($0_1) {
     break label$1
    }
    label$3 : {
     $0_1 = $634() | 0;
     if (!$0_1) {
      break label$3
     }
     FUNCTION_TABLE[$0_1 | 0]();
     continue label$2;
    }
    break label$2;
   };
   fimport$7();
   abort();
  }
  return $0_1 | 0;
 }
 
 function $617($0_1) {
  $0_1 = $0_1 | 0;
  $668($0_1 | 0);
 }
 
 function $618($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  abort();
 }
 
 function $619($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $621($620($1_1 | 0, $0_1 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $620($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $622($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $621($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   if ($624($623($1_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
    break label$1
   }
   $2_1 = $626($625($0_1 | 0) | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $622($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 1 | 0;
  return $0_1 | 0;
 }
 
 function $623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $624($0_1) {
  $0_1 = $0_1 | 0;
  return $631(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $625($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $626($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    if (($0_1 | 0) == (1 | 0)) {
     break label$2
    }
    if ($0_1 & 2 | 0) {
     break label$1
    }
    HEAP8[$2_1 >> 0] = 2;
    $1_1 = 1;
   }
   return $1_1 | 0;
  }
  $618(11721 | 0, 0 | 0);
  abort();
 }
 
 function $627($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $628($620($1_1 | 0, $0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $628($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $629($623($1_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  $630($625($0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $629($0_1) {
  $0_1 = $0_1 | 0;
  $632(HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $630($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 0] = 1;
 }
 
 function $631($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $632($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[$0_1 >> 0] = 1;
 }
 
 function $633($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $634() {
  return $633(44424 | 0) | 0 | 0;
 }
 
 function $635($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $636($0_1) {
  $0_1 = $0_1 | 0;
  $635($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $637($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $638($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $639($0_1) {
  $0_1 = $0_1 | 0;
  $636($0_1 | 0) | 0;
  $617($0_1 | 0);
 }
 
 function $640($0_1) {
  $0_1 = $0_1 | 0;
  $636($0_1 | 0) | 0;
  $617($0_1 | 0);
 }
 
 function $641($0_1) {
  $0_1 = $0_1 | 0;
  $636($0_1 | 0) | 0;
  $617($0_1 | 0);
 }
 
 function $642($0_1) {
  $0_1 = $0_1 | 0;
  $636($0_1 | 0) | 0;
  $617($0_1 | 0);
 }
 
 function $643($0_1) {
  $0_1 = $0_1 | 0;
  $636($0_1 | 0) | 0;
  $617($0_1 | 0);
 }
 
 function $644($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $645($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $645($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($552($368($0_1 | 0) | 0 | 0, $368($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $646($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($645($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   $1_1 = $647($1_1 | 0, 11832 | 0, 11880 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $678($3_1 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   label$2 : {
    $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
    if (($4_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   }
   $4_1 = ($4_1 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $647($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $1_1 = 0;
  $678($4_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
  $0_1 = $0_1 + $5_1 | 0;
  label$1 : {
   label$2 : {
    if (!($645($6_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $1_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, 1, 0);
   label$3 : {
    switch (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $1_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $1_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $1_1 | 0;
 }
 
 function $648($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $649($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($645($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $648($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $650($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($645($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $648($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $651($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $5_1 = $4_1 >> 8 | 0;
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $5_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $652($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($645($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $648($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $651($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  label$2 : {
   if (($4_1 | 0) < (2 | 0)) {
    break label$2
   }
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   $0_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    $651($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $653($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 24 | 0) {
     break label$2
    }
    $3_1 = 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $647($1_1 | 0, 11832 | 0, 11928 | 0, 0 | 0) | 0;
    if (!$4_1) {
     break label$1
    }
    $3_1 = ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 24 | 0 | 0) != (0 | 0);
   }
   $3_1 = $645($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $654($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!($645($1_1 | 0, 12196 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = 0;
    $4_1 = 1;
    break label$1;
   }
   label$3 : {
    if (!($653($0_1 | 0, $1_1 | 0, $1_1 | 0) | 0)) {
     break label$3
    }
    $4_1 = 1;
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    break label$1;
   }
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    $4_1 = 0;
    $1_1 = $647($1_1 | 0, 11832 | 0, 11976 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    label$5 : {
     $5_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$5_1) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($5_1 & ($6_1 ^ -1 | 0) | 0) & 7 | 0) {
     break label$1
    }
    if ((($5_1 ^ -1 | 0) & $6_1 | 0) & 96 | 0) {
     break label$1
    }
    $4_1 = 1;
    if ($645(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
     break label$1
    }
    label$6 : {
     if (!($645(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 12184 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$1
     }
     $4_1 = !($647($1_1 | 0, 11832 | 0, 12028 | 0, 0 | 0) | 0);
     break label$1;
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    $4_1 = 0;
    label$7 : {
     $5_1 = $647($5_1 | 0, 11832 | 0, 11976 | 0, 0 | 0) | 0;
     if (!$5_1) {
      break label$7
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $655($5_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$1
    }
    $4_1 = 0;
    label$8 : {
     $5_1 = $647($5_1 | 0, 11832 | 0, 12088 | 0, 0 | 0) | 0;
     if (!$5_1) {
      break label$8
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $656($5_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    $4_1 = 0;
    $0_1 = $647($0_1 | 0, 11832 | 0, 11880 | 0, 0 | 0) | 0;
    if (!$0_1) {
     break label$1
    }
    $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = 0;
    $1_1 = $647($1_1 | 0, 11832 | 0, 11880 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $678($3_1 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
    HEAP32[($3_1 + 56 | 0) >> 2] = 1;
    HEAP32[($3_1 + 20 | 0) >> 2] = -1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
    label$9 : {
     $1_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
     if (($1_1 | 0) != (1 | 0)) {
      break label$9
     }
     if (!(HEAP32[$2_1 >> 2] | 0)) {
      break label$9
     }
     HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
    }
    $4_1 = ($1_1 | 0) == (1 | 0);
    break label$1;
   }
   $4_1 = 0;
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $655($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     return 0 | 0;
    }
    $2_1 = 0;
    $1_1 = $647($1_1 | 0, 11832 | 0, 11976 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
     break label$1
    }
    label$4 : {
     if (!($645(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     return 1 | 0;
    }
    if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$1
    }
    label$5 : {
     $3_1 = $647($3_1 | 0, 11832 | 0, 11976 | 0, 0 | 0) | 0;
     if (!$3_1) {
      break label$5
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $0_1 = $3_1;
     continue label$2;
    }
    break label$2;
   };
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = 0;
   $0_1 = $647($0_1 | 0, 11832 | 0, 12088 | 0, 0 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = $656($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $656($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = $647($1_1 | 0, 11832 | 0, 12088 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
    break label$1
   }
   $2_1 = 0;
   if (!($645(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2_1 = $645(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $657($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if ($3_1) {
      break label$3
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = 1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($4_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    label$4 : {
     if (($3_1 | 0) != ($2_1 | 0)) {
      break label$4
     }
     label$5 : {
      $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      if (($3_1 | 0) != (2 | 0)) {
       break label$5
      }
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
      $3_1 = $4_1;
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($3_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function $658($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $659($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!($645($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $658($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($645($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         if ($5_1 >>> 0 >= $3_1 >>> 0) {
          break label$9
         }
         HEAP16[($1_1 + 52 | 0) >> 1] = 0;
         $660($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
         if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
          break label$9
         }
         label$11 : {
          if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
           break label$11
          }
          label$12 : {
           if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
            break label$12
           }
           $8_1 = 1;
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$8
           }
           $6_1 = 1;
           $7_1 = 1;
           $8_1 = 1;
           if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
            break label$11
           }
           break label$8;
          }
          $6_1 = 1;
          $8_1 = $7_1;
          if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue label$10;
        };
       }
       $5_1 = 4;
       $8_1 = $7_1;
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
      }
      $5_1 = 3;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
     if ($8_1 & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $8_1 = $0_1 + 16 | 0;
   $661($8_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   if (($5_1 | 0) < (2 | 0)) {
    break label$2
   }
   $8_1 = $8_1 + ($5_1 << 3 | 0) | 0;
   $5_1 = $0_1 + 24 | 0;
   label$13 : {
    label$14 : {
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1 & 2 | 0) {
      break label$14
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$13
     }
    }
    label$15 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     $661($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$15
     }
     break label$2;
    };
   }
   label$16 : {
    if ($0_1 & 1 | 0) {
     break label$16
    }
    label$17 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     $661($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$17
     }
     break label$2;
    };
   }
   label$18 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$19 : {
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$19
     }
     if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
    }
    $661($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $8_1 >>> 0) {
     continue label$18
    }
    break label$18;
   };
  }
 }
 
 function $660($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  label$1 : {
   if (!($6_1 & 1 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[((HEAP32[$3_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $661($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  label$1 : {
   if (!($5_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $662($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($645($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $658($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($645($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $663($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($645($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $658($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($645($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $664($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   if (!($645($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $657($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $660($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $11_1 | 0;
  label$2 : {
   if (($7_1 | 0) < (2 | 0)) {
    break label$2
   }
   $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   $7_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($11_1 & 255 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($10_1 & 255 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $660($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = $10_1 | $6_1 | 0;
    $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = $11_1 | $8_1 | 0;
    $7_1 = $7_1 + 8 | 0;
    if ($7_1 >>> 0 < $9_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = ($6_1 & 255 | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 52 | 0) >> 0] = ($8_1 & 255 | 0 | 0) != (0 | 0);
 }
 
 function $665($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($645($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $657($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $666($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($645($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $657($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $667($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $12_1 = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $11_1 = 0, $1_1 = 0, $80_1 = 0, $93_1 = 0, $104_1 = 0, $112_1 = 0, $120_1 = 0, $211_1 = 0, $222_1 = 0, $230_1 = 0, $238_1 = 0, $273_1 = 0, $344_1 = 0, $351_1 = 0, $358_1 = 0, $449_1 = 0, $460_1 = 0, $468_1 = 0, $476_1 = 0, $1168 = 0, $1175 = 0, $1182 = 0, $1304 = 0, $1306 = 0, $1367 = 0, $1374 = 0, $1381 = 0, $1614 = 0, $1621 = 0, $1628 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if ($0_1 >>> 0 > 244 >>> 0) {
                break label$13
               }
               label$14 : {
                $2_1 = HEAP32[(0 + 44428 | 0) >> 2] | 0;
                $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
                $4_1 = $3_1 >>> 3 | 0;
                $0_1 = $2_1 >>> $4_1 | 0;
                if (!($0_1 & 3 | 0)) {
                 break label$14
                }
                $5_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                $6_1 = $5_1 << 3 | 0;
                $4_1 = HEAP32[($6_1 + 44476 | 0) >> 2] | 0;
                $0_1 = $4_1 + 8 | 0;
                label$15 : {
                 label$16 : {
                  $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $6_1 = $6_1 + 44468 | 0;
                  if (($3_1 | 0) != ($6_1 | 0)) {
                   break label$16
                  }
                  (wasm2js_i32$0 = 0, wasm2js_i32$1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44428 | 0) >> 2] = wasm2js_i32$1;
                  break label$15;
                 }
                 HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
                 HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
                }
                $5_1 = $5_1 << 3 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
                $4_1 = $4_1 + $5_1 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$1;
               }
               $7_1 = HEAP32[(0 + 44436 | 0) >> 2] | 0;
               if ($3_1 >>> 0 <= $7_1 >>> 0) {
                break label$12
               }
               label$17 : {
                if (!$0_1) {
                 break label$17
                }
                label$18 : {
                 label$19 : {
                  $80_1 = $0_1 << $4_1 | 0;
                  $0_1 = 2 << $4_1 | 0;
                  $0_1 = $80_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                  $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                  $93_1 = $0_1;
                  $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                  $4_1 = $93_1 >>> $0_1 | 0;
                  $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                  $104_1 = $5_1 | $0_1 | 0;
                  $0_1 = $4_1 >>> $5_1 | 0;
                  $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                  $112_1 = $104_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                  $120_1 = $112_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                  $5_1 = ($120_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                  $6_1 = $5_1 << 3 | 0;
                  $4_1 = HEAP32[($6_1 + 44476 | 0) >> 2] | 0;
                  $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $6_1 = $6_1 + 44468 | 0;
                  if (($0_1 | 0) != ($6_1 | 0)) {
                   break label$19
                  }
                  $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                  HEAP32[(0 + 44428 | 0) >> 2] = $2_1;
                  break label$18;
                 }
                 HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
                 HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
                }
                $0_1 = $4_1 + 8 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                $6_1 = $4_1 + $3_1 | 0;
                $8_1 = $5_1 << 3 | 0;
                $5_1 = $8_1 - $3_1 | 0;
                HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
                HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
                label$20 : {
                 if (!$7_1) {
                  break label$20
                 }
                 $8_1 = $7_1 >>> 3 | 0;
                 $3_1 = ($8_1 << 3 | 0) + 44468 | 0;
                 $4_1 = HEAP32[(0 + 44448 | 0) >> 2] | 0;
                 label$21 : {
                  label$22 : {
                   $8_1 = 1 << $8_1 | 0;
                   if ($2_1 & $8_1 | 0) {
                    break label$22
                   }
                   HEAP32[(0 + 44428 | 0) >> 2] = $2_1 | $8_1 | 0;
                   $8_1 = $3_1;
                   break label$21;
                  }
                  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                 }
                 HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                 HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                 HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                 HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
                }
                HEAP32[(0 + 44448 | 0) >> 2] = $6_1;
                HEAP32[(0 + 44436 | 0) >> 2] = $5_1;
                break label$1;
               }
               $9_1 = HEAP32[(0 + 44432 | 0) >> 2] | 0;
               if (!$9_1) {
                break label$12
               }
               $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
               $211_1 = $0_1;
               $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
               $4_1 = $211_1 >>> $0_1 | 0;
               $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
               $222_1 = $5_1 | $0_1 | 0;
               $0_1 = $4_1 >>> $5_1 | 0;
               $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
               $230_1 = $222_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
               $238_1 = $230_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
               $6_1 = HEAP32[(((($238_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 44732 | 0) >> 2] | 0;
               $4_1 = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $5_1 = $6_1;
               label$23 : {
                label$24 : while (1) {
                 label$25 : {
                  $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                  if ($0_1) {
                   break label$25
                  }
                  $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                  if (!$0_1) {
                   break label$23
                  }
                 }
                 $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                 $273_1 = $5_1;
                 $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
                 $4_1 = $5_1 ? $273_1 : $4_1;
                 $6_1 = $5_1 ? $0_1 : $6_1;
                 $5_1 = $0_1;
                 continue label$24;
                };
               }
               $10_1 = $6_1 + $3_1 | 0;
               if ($10_1 >>> 0 <= $6_1 >>> 0) {
                break label$11
               }
               $11_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
               label$26 : {
                $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
                if (($8_1 | 0) == ($6_1 | 0)) {
                 break label$26
                }
                $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
                HEAP32[(0 + 44444 | 0) >> 2] | 0;
                HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
                HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
                break label$2;
               }
               label$27 : {
                $5_1 = $6_1 + 20 | 0;
                $0_1 = HEAP32[$5_1 >> 2] | 0;
                if ($0_1) {
                 break label$27
                }
                $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$10
                }
                $5_1 = $6_1 + 16 | 0;
               }
               label$28 : while (1) {
                $12_1 = $5_1;
                $8_1 = $0_1;
                $5_1 = $0_1 + 20 | 0;
                $0_1 = HEAP32[$5_1 >> 2] | 0;
                if ($0_1) {
                 continue label$28
                }
                $5_1 = $8_1 + 16 | 0;
                $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$28
                }
                break label$28;
               };
               HEAP32[$12_1 >> 2] = 0;
               break label$2;
              }
              $3_1 = -1;
              if ($0_1 >>> 0 > -65 >>> 0) {
               break label$12
              }
              $0_1 = $0_1 + 11 | 0;
              $3_1 = $0_1 & -8 | 0;
              $7_1 = HEAP32[(0 + 44432 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$12
              }
              $12_1 = 31;
              label$29 : {
               if ($3_1 >>> 0 > 16777215 >>> 0) {
                break label$29
               }
               $0_1 = $0_1 >>> 8 | 0;
               $344_1 = $0_1;
               $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
               $4_1 = $344_1 << $0_1 | 0;
               $351_1 = $4_1;
               $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
               $5_1 = $351_1 << $4_1 | 0;
               $358_1 = $5_1;
               $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
               $0_1 = (($358_1 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $5_1 | 0) | 0;
               $12_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
              }
              $4_1 = 0 - $3_1 | 0;
              label$30 : {
               label$31 : {
                label$32 : {
                 label$33 : {
                  $5_1 = HEAP32[(($12_1 << 2 | 0) + 44732 | 0) >> 2] | 0;
                  if ($5_1) {
                   break label$33
                  }
                  $0_1 = 0;
                  $8_1 = 0;
                  break label$32;
                 }
                 $0_1 = 0;
                 $6_1 = $3_1 << (($12_1 | 0) == (31 | 0) ? 0 : 25 - ($12_1 >>> 1 | 0) | 0) | 0;
                 $8_1 = 0;
                 label$34 : while (1) {
                  label$35 : {
                   $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                   if ($2_1 >>> 0 >= $4_1 >>> 0) {
                    break label$35
                   }
                   $4_1 = $2_1;
                   $8_1 = $5_1;
                   if ($4_1) {
                    break label$35
                   }
                   $4_1 = 0;
                   $8_1 = $5_1;
                   $0_1 = $5_1;
                   break label$31;
                  }
                  $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                  $5_1 = HEAP32[(($5_1 + (($6_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                  $0_1 = $2_1 ? (($2_1 | 0) == ($5_1 | 0) ? $0_1 : $2_1) : $0_1;
                  $6_1 = $6_1 << 1 | 0;
                  if ($5_1) {
                   continue label$34
                  }
                  break label$34;
                 };
                }
                label$36 : {
                 if ($0_1 | $8_1 | 0) {
                  break label$36
                 }
                 $0_1 = 2 << $12_1 | 0;
                 $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                 if (!$0_1) {
                  break label$12
                 }
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $449_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $5_1 = $449_1 >>> $0_1 | 0;
                 $6_1 = ($5_1 >>> 5 | 0) & 8 | 0;
                 $460_1 = $6_1 | $0_1 | 0;
                 $0_1 = $5_1 >>> $6_1 | 0;
                 $5_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $468_1 = $460_1 | $5_1 | 0;
                 $0_1 = $0_1 >>> $5_1 | 0;
                 $5_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $476_1 = $468_1 | $5_1 | 0;
                 $0_1 = $0_1 >>> $5_1 | 0;
                 $5_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $0_1 = HEAP32[(((($476_1 | $5_1 | 0) + ($0_1 >>> $5_1 | 0) | 0) << 2 | 0) + 44732 | 0) >> 2] | 0;
                }
                if (!$0_1) {
                 break label$30
                }
               }
               label$37 : while (1) {
                $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $6_1 = $2_1 >>> 0 < $4_1 >>> 0;
                label$38 : {
                 $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                 if ($5_1) {
                  break label$38
                 }
                 $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                }
                $4_1 = $6_1 ? $2_1 : $4_1;
                $8_1 = $6_1 ? $0_1 : $8_1;
                $0_1 = $5_1;
                if ($0_1) {
                 continue label$37
                }
                break label$37;
               };
              }
              if (!$8_1) {
               break label$12
              }
              if ($4_1 >>> 0 >= ((HEAP32[(0 + 44436 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
               break label$12
              }
              $12_1 = $8_1 + $3_1 | 0;
              if ($12_1 >>> 0 <= $8_1 >>> 0) {
               break label$11
              }
              $9_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
              label$39 : {
               $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
               if (($6_1 | 0) == ($8_1 | 0)) {
                break label$39
               }
               $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
               HEAP32[(0 + 44444 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               break label$3;
              }
              label$40 : {
               $5_1 = $8_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                break label$40
               }
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$9
               }
               $5_1 = $8_1 + 16 | 0;
              }
              label$41 : while (1) {
               $2_1 = $5_1;
               $6_1 = $0_1;
               $5_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                continue label$41
               }
               $5_1 = $6_1 + 16 | 0;
               $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$41
               }
               break label$41;
              };
              HEAP32[$2_1 >> 2] = 0;
              break label$3;
             }
             label$42 : {
              $0_1 = HEAP32[(0 + 44436 | 0) >> 2] | 0;
              if ($0_1 >>> 0 < $3_1 >>> 0) {
               break label$42
              }
              $4_1 = HEAP32[(0 + 44448 | 0) >> 2] | 0;
              label$43 : {
               label$44 : {
                $5_1 = $0_1 - $3_1 | 0;
                if ($5_1 >>> 0 < 16 >>> 0) {
                 break label$44
                }
                HEAP32[(0 + 44436 | 0) >> 2] = $5_1;
                $6_1 = $4_1 + $3_1 | 0;
                HEAP32[(0 + 44448 | 0) >> 2] = $6_1;
                HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
                HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                break label$43;
               }
               HEAP32[(0 + 44448 | 0) >> 2] = 0;
               HEAP32[(0 + 44436 | 0) >> 2] = 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
               $0_1 = $4_1 + $0_1 | 0;
               HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              }
              $0_1 = $4_1 + 8 | 0;
              break label$1;
             }
             label$45 : {
              $6_1 = HEAP32[(0 + 44440 | 0) >> 2] | 0;
              if ($6_1 >>> 0 <= $3_1 >>> 0) {
               break label$45
              }
              $4_1 = $6_1 - $3_1 | 0;
              HEAP32[(0 + 44440 | 0) >> 2] = $4_1;
              $0_1 = HEAP32[(0 + 44452 | 0) >> 2] | 0;
              $5_1 = $0_1 + $3_1 | 0;
              HEAP32[(0 + 44452 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $0_1 = $0_1 + 8 | 0;
              break label$1;
             }
             label$46 : {
              label$47 : {
               if (!(HEAP32[(0 + 44900 | 0) >> 2] | 0)) {
                break label$47
               }
               $4_1 = HEAP32[(0 + 44908 | 0) >> 2] | 0;
               break label$46;
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              HEAP32[(i64toi32_i32$1 + 44912 | 0) >> 2] = -1;
              HEAP32[(i64toi32_i32$1 + 44916 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 4096;
              HEAP32[(i64toi32_i32$1 + 44904 | 0) >> 2] = 4096;
              HEAP32[(i64toi32_i32$1 + 44908 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(0 + 44900 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
              HEAP32[(0 + 44920 | 0) >> 2] = 0;
              HEAP32[(0 + 44872 | 0) >> 2] = 0;
              $4_1 = 4096;
             }
             $0_1 = 0;
             $7_1 = $3_1 + 47 | 0;
             $2_1 = $4_1 + $7_1 | 0;
             $12_1 = 0 - $4_1 | 0;
             $8_1 = $2_1 & $12_1 | 0;
             if ($8_1 >>> 0 <= $3_1 >>> 0) {
              break label$1
             }
             $0_1 = 0;
             label$48 : {
              $4_1 = HEAP32[(0 + 44868 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$48
              }
              $5_1 = HEAP32[(0 + 44860 | 0) >> 2] | 0;
              $9_1 = $5_1 + $8_1 | 0;
              if ($9_1 >>> 0 <= $5_1 >>> 0) {
               break label$1
              }
              if ($9_1 >>> 0 > $4_1 >>> 0) {
               break label$1
              }
             }
             if ((HEAPU8[(0 + 44872 | 0) >> 0] | 0) & 4 | 0) {
              break label$6
             }
             label$49 : {
              label$50 : {
               label$51 : {
                $4_1 = HEAP32[(0 + 44452 | 0) >> 2] | 0;
                if (!$4_1) {
                 break label$51
                }
                $0_1 = 44876;
                label$52 : while (1) {
                 label$53 : {
                  $5_1 = HEAP32[$0_1 >> 2] | 0;
                  if ($5_1 >>> 0 > $4_1 >>> 0) {
                   break label$53
                  }
                  if (($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                   break label$50
                  }
                 }
                 $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if ($0_1) {
                  continue label$52
                 }
                 break label$52;
                };
               }
               $6_1 = $676(0 | 0) | 0;
               if (($6_1 | 0) == (-1 | 0)) {
                break label$7
               }
               $2_1 = $8_1;
               label$54 : {
                $0_1 = HEAP32[(0 + 44904 | 0) >> 2] | 0;
                $4_1 = $0_1 + -1 | 0;
                if (!($4_1 & $6_1 | 0)) {
                 break label$54
                }
                $2_1 = ($8_1 - $6_1 | 0) + (($4_1 + $6_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
               }
               if ($2_1 >>> 0 <= $3_1 >>> 0) {
                break label$7
               }
               if ($2_1 >>> 0 > 2147483646 >>> 0) {
                break label$7
               }
               label$55 : {
                $0_1 = HEAP32[(0 + 44868 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$55
                }
                $4_1 = HEAP32[(0 + 44860 | 0) >> 2] | 0;
                $5_1 = $4_1 + $2_1 | 0;
                if ($5_1 >>> 0 <= $4_1 >>> 0) {
                 break label$7
                }
                if ($5_1 >>> 0 > $0_1 >>> 0) {
                 break label$7
                }
               }
               $0_1 = $676($2_1 | 0) | 0;
               if (($0_1 | 0) != ($6_1 | 0)) {
                break label$49
               }
               break label$5;
              }
              $2_1 = ($2_1 - $6_1 | 0) & $12_1 | 0;
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              $6_1 = $676($2_1 | 0) | 0;
              if (($6_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
               break label$8
              }
              $0_1 = $6_1;
             }
             label$56 : {
              if (($0_1 | 0) == (-1 | 0)) {
               break label$56
              }
              if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
               break label$56
              }
              label$57 : {
               $4_1 = HEAP32[(0 + 44908 | 0) >> 2] | 0;
               $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
               if ($4_1 >>> 0 <= 2147483646 >>> 0) {
                break label$57
               }
               $6_1 = $0_1;
               break label$5;
              }
              label$58 : {
               if (($676($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                break label$58
               }
               $2_1 = $4_1 + $2_1 | 0;
               $6_1 = $0_1;
               break label$5;
              }
              $676(0 - $2_1 | 0 | 0) | 0;
              break label$7;
             }
             $6_1 = $0_1;
             if (($0_1 | 0) != (-1 | 0)) {
              break label$5
             }
             break label$7;
            }
            abort();
           }
           $8_1 = 0;
           break label$2;
          }
          $6_1 = 0;
          break label$3;
         }
         if (($6_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 44872 | 0) >> 2] = HEAP32[(0 + 44872 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $6_1 = $676($8_1 | 0) | 0;
       $0_1 = $676(0 | 0) | 0;
       if (($6_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if ($6_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       $2_1 = $0_1 - $6_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 44860 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 44860 | 0) >> 2] = $0_1;
      label$59 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 44864 | 0) >> 2] | 0) >>> 0) {
        break label$59
       }
       HEAP32[(0 + 44864 | 0) >> 2] = $0_1;
      }
      label$60 : {
       label$61 : {
        label$62 : {
         label$63 : {
          $4_1 = HEAP32[(0 + 44452 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$63
          }
          $0_1 = 44876;
          label$64 : while (1) {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($6_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
            break label$62
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$64
           }
           break label$61;
          };
         }
         label$65 : {
          label$66 : {
           $0_1 = HEAP32[(0 + 44444 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$66
           }
           if ($6_1 >>> 0 >= $0_1 >>> 0) {
            break label$65
           }
          }
          HEAP32[(0 + 44444 | 0) >> 2] = $6_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 44880 | 0) >> 2] = $2_1;
         HEAP32[(0 + 44876 | 0) >> 2] = $6_1;
         HEAP32[(0 + 44460 | 0) >> 2] = -1;
         HEAP32[(0 + 44464 | 0) >> 2] = HEAP32[(0 + 44900 | 0) >> 2] | 0;
         HEAP32[(0 + 44888 | 0) >> 2] = 0;
         label$67 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $5_1 = $4_1 + 44468 | 0;
          HEAP32[($4_1 + 44476 | 0) >> 2] = $5_1;
          HEAP32[($4_1 + 44480 | 0) >> 2] = $5_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$67
          }
          break label$67;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
         $5_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 44440 | 0) >> 2] = $5_1;
         $4_1 = $6_1 + $4_1 | 0;
         HEAP32[(0 + 44452 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
         HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 44456 | 0) >> 2] = HEAP32[(0 + 44916 | 0) >> 2] | 0;
         break label$60;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$61
        }
        if ($5_1 >>> 0 > $4_1 >>> 0) {
         break label$61
        }
        if ($6_1 >>> 0 <= $4_1 >>> 0) {
         break label$61
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $5_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 44452 | 0) >> 2] = $5_1;
        $6_1 = (HEAP32[(0 + 44440 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $6_1 - $0_1 | 0;
        HEAP32[(0 + 44440 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $6_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 44456 | 0) >> 2] = HEAP32[(0 + 44916 | 0) >> 2] | 0;
        break label$60;
       }
       label$68 : {
        $8_1 = HEAP32[(0 + 44444 | 0) >> 2] | 0;
        if ($6_1 >>> 0 >= $8_1 >>> 0) {
         break label$68
        }
        HEAP32[(0 + 44444 | 0) >> 2] = $6_1;
        $8_1 = $6_1;
       }
       $5_1 = $6_1 + $2_1 | 0;
       $0_1 = 44876;
       label$69 : {
        label$70 : {
         label$71 : {
          label$72 : {
           label$73 : {
            label$74 : {
             label$75 : {
              label$76 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                break label$75
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$76
               }
               break label$74;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$73
             }
            }
            $0_1 = 44876;
            label$77 : while (1) {
             label$78 : {
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$78
              }
              $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$72
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$77;
            };
           }
           HEAP32[$0_1 >> 2] = $6_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $12_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($12_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $2_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           $3_1 = $12_1 + $3_1 | 0;
           $5_1 = $2_1 - $3_1 | 0;
           label$79 : {
            if (($4_1 | 0) != ($2_1 | 0)) {
             break label$79
            }
            HEAP32[(0 + 44452 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 44440 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 44440 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$70;
           }
           label$80 : {
            if ((HEAP32[(0 + 44448 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$80
            }
            HEAP32[(0 + 44448 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 44436 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 44436 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
            break label$70;
           }
           label$81 : {
            $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            if (($0_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$81
            }
            $7_1 = $0_1 & -8 | 0;
            label$82 : {
             label$83 : {
              if ($0_1 >>> 0 > 255 >>> 0) {
               break label$83
              }
              $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              $8_1 = $0_1 >>> 3 | 0;
              $6_1 = ($8_1 << 3 | 0) + 44468 | 0;
              label$84 : {
               $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($0_1 | 0) != ($4_1 | 0)) {
                break label$84
               }
               (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44428 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44428 | 0) >> 2] = wasm2js_i32$1;
               break label$82;
              }
              HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
              break label$82;
             }
             $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
             label$85 : {
              label$86 : {
               $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($6_1 | 0) == ($2_1 | 0)) {
                break label$86
               }
               $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               break label$85;
              }
              label$87 : {
               $0_1 = $2_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$87
               }
               $0_1 = $2_1 + 16 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$87
               }
               $6_1 = 0;
               break label$85;
              }
              label$88 : while (1) {
               $8_1 = $0_1;
               $6_1 = $4_1;
               $0_1 = $4_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                continue label$88
               }
               $0_1 = $6_1 + 16 | 0;
               $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if ($4_1) {
                continue label$88
               }
               break label$88;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$82
             }
             label$89 : {
              label$90 : {
               $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
               $0_1 = ($4_1 << 2 | 0) + 44732 | 0;
               if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                break label$90
               }
               HEAP32[$0_1 >> 2] = $6_1;
               if ($6_1) {
                break label$89
               }
               (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44432 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44432 | 0) >> 2] = wasm2js_i32$1;
               break label$82;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
              if (!$6_1) {
               break label$82
              }
             }
             HEAP32[($6_1 + 24 | 0) >> 2] = $9_1;
             label$91 : {
              $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$91
              }
              HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
             }
             $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
             if (!$0_1) {
              break label$82
             }
             HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
             HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
            }
            $5_1 = $7_1 + $5_1 | 0;
            $2_1 = $2_1 + $7_1 | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
           HEAP32[($3_1 + $5_1 | 0) >> 2] = $5_1;
           label$92 : {
            if ($5_1 >>> 0 > 255 >>> 0) {
             break label$92
            }
            $4_1 = $5_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 44468 | 0;
            label$93 : {
             label$94 : {
              $5_1 = HEAP32[(0 + 44428 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($5_1 & $4_1 | 0) {
               break label$94
              }
              HEAP32[(0 + 44428 | 0) >> 2] = $5_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$93;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
            break label$70;
           }
           $0_1 = 31;
           label$95 : {
            if ($5_1 >>> 0 > 16777215 >>> 0) {
             break label$95
            }
            $0_1 = $5_1 >>> 8 | 0;
            $1168 = $0_1;
            $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $4_1 = $1168 << $0_1 | 0;
            $1175 = $4_1;
            $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $6_1 = $1175 << $4_1 | 0;
            $1182 = $6_1;
            $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $0_1 = (($1182 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
            $0_1 = ($0_1 << 1 | 0 | (($5_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $4_1 = ($0_1 << 2 | 0) + 44732 | 0;
           label$96 : {
            label$97 : {
             $6_1 = HEAP32[(0 + 44432 | 0) >> 2] | 0;
             $8_1 = 1 << $0_1 | 0;
             if ($6_1 & $8_1 | 0) {
              break label$97
             }
             HEAP32[(0 + 44432 | 0) >> 2] = $6_1 | $8_1 | 0;
             HEAP32[$4_1 >> 2] = $3_1;
             HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
             break label$96;
            }
            $0_1 = $5_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
            $6_1 = HEAP32[$4_1 >> 2] | 0;
            label$98 : while (1) {
             $4_1 = $6_1;
             if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($5_1 | 0)) {
              break label$71
             }
             $6_1 = $0_1 >>> 29 | 0;
             $0_1 = $0_1 << 1 | 0;
             $8_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
             $6_1 = HEAP32[$8_1 >> 2] | 0;
             if ($6_1) {
              continue label$98
             }
             break label$98;
            };
            HEAP32[$8_1 >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
           HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
           break label$70;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
          $12_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 44440 | 0) >> 2] = $12_1;
          $8_1 = $6_1 + $8_1 | 0;
          HEAP32[(0 + 44452 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $12_1 | 1 | 0;
          HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 44456 | 0) >> 2] = HEAP32[(0 + 44916 | 0) >> 2] | 0;
          $0_1 = ($5_1 + (($5_1 + -39 | 0) & 7 | 0 ? (39 - $5_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 44884 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44888 | 0) >> 2] | 0;
          $1304 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1304;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44876 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 44880 | 0) >> 2] | 0;
          $1306 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1306;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 44884 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 44880 | 0) >> 2] = $2_1;
          HEAP32[(0 + 44876 | 0) >> 2] = $6_1;
          HEAP32[(0 + 44888 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$99 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $6_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($5_1 >>> 0 > $6_1 >>> 0) {
            continue label$99
           }
           break label$99;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$60
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$100 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$100
           }
           $5_1 = $2_1 >>> 3 | 0;
           $0_1 = ($5_1 << 3 | 0) + 44468 | 0;
           label$101 : {
            label$102 : {
             $6_1 = HEAP32[(0 + 44428 | 0) >> 2] | 0;
             $5_1 = 1 << $5_1 | 0;
             if ($6_1 & $5_1 | 0) {
              break label$102
             }
             HEAP32[(0 + 44428 | 0) >> 2] = $6_1 | $5_1 | 0;
             $5_1 = $0_1;
             break label$101;
            }
            $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
           break label$60;
          }
          $0_1 = 31;
          label$103 : {
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$103
           }
           $0_1 = $2_1 >>> 8 | 0;
           $1367 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $5_1 = $1367 << $0_1 | 0;
           $1374 = $5_1;
           $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $6_1 = $1374 << $5_1 | 0;
           $1381 = $6_1;
           $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1381 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $6_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $5_1 = ($0_1 << 2 | 0) + 44732 | 0;
          label$104 : {
           label$105 : {
            $6_1 = HEAP32[(0 + 44432 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($6_1 & $8_1 | 0) {
             break label$105
            }
            HEAP32[(0 + 44432 | 0) >> 2] = $6_1 | $8_1 | 0;
            HEAP32[$5_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            break label$104;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $6_1 = HEAP32[$5_1 >> 2] | 0;
           label$106 : while (1) {
            $5_1 = $6_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$69
            }
            $6_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
            $6_1 = HEAP32[$8_1 >> 2] | 0;
            if ($6_1) {
             continue label$106
            }
            break label$106;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$60;
         }
         $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 24 | 0) >> 2] = 0;
         HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $12_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 44440 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 44440 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 44452 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 44452 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     (wasm2js_i32$0 = $516() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $0_1 = 0;
     break label$1;
    }
    label$107 : {
     if (!$9_1) {
      break label$107
     }
     label$108 : {
      label$109 : {
       $5_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($5_1 << 2 | 0) + 44732 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$109
       }
       HEAP32[$0_1 >> 2] = $6_1;
       if ($6_1) {
        break label$108
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       HEAP32[(0 + 44432 | 0) >> 2] = $7_1;
       break label$107;
      }
      HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$107
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $9_1;
     label$110 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$110
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$107
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
    }
    label$111 : {
     label$112 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$112
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$111;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($12_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($12_1 + $4_1 | 0) >> 2] = $4_1;
     label$113 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$113
      }
      $4_1 = $4_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 44468 | 0;
      label$114 : {
       label$115 : {
        $5_1 = HEAP32[(0 + 44428 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($5_1 & $4_1 | 0) {
         break label$115
        }
        HEAP32[(0 + 44428 | 0) >> 2] = $5_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$114;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $12_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $4_1;
      break label$111;
     }
     $0_1 = 31;
     label$116 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$116
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1614 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $5_1 = $1614 << $0_1 | 0;
      $1621 = $5_1;
      $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1621 << $5_1 | 0;
      $1628 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1628 << $3_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($12_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$0 = 0;
     HEAP32[($12_1 + 16 | 0) >> 2] = 0;
     HEAP32[($12_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = ($0_1 << 2 | 0) + 44732 | 0;
     label$117 : {
      label$118 : {
       label$119 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$119
        }
        HEAP32[(0 + 44432 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$5_1 >> 2] = $12_1;
        HEAP32[($12_1 + 24 | 0) >> 2] = $5_1;
        break label$118;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       label$120 : while (1) {
        $5_1 = $3_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$117
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $6_1 = ($5_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$6_1 >> 2] | 0;
        if ($3_1) {
         continue label$120
        }
        break label$120;
       };
       HEAP32[$6_1 >> 2] = $12_1;
       HEAP32[($12_1 + 24 | 0) >> 2] = $5_1;
      }
      HEAP32[($12_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $12_1;
      break label$111;
     }
     $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $12_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $12_1;
     HEAP32[($12_1 + 24 | 0) >> 2] = 0;
     HEAP32[($12_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($12_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$121 : {
    if (!$11_1) {
     break label$121
    }
    label$122 : {
     label$123 : {
      $5_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($5_1 << 2 | 0) + 44732 | 0;
      if (($6_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$123
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$122
      }
      (wasm2js_i32$0 = 0, wasm2js_i32$1 = $9_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44432 | 0) >> 2] = wasm2js_i32$1;
      break label$121;
     }
     HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($6_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$121
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $11_1;
    label$124 : {
     $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$124
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$121
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$125 : {
    label$126 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$126
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $6_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$125;
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    HEAP32[($10_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($10_1 + $4_1 | 0) >> 2] = $4_1;
    label$127 : {
     if (!$7_1) {
      break label$127
     }
     $3_1 = $7_1 >>> 3 | 0;
     $5_1 = ($3_1 << 3 | 0) + 44468 | 0;
     $0_1 = HEAP32[(0 + 44448 | 0) >> 2] | 0;
     label$128 : {
      label$129 : {
       $3_1 = 1 << $3_1 | 0;
       if ($3_1 & $2_1 | 0) {
        break label$129
       }
       HEAP32[(0 + 44428 | 0) >> 2] = $3_1 | $2_1 | 0;
       $3_1 = $5_1;
       break label$128;
      }
      $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    }
    HEAP32[(0 + 44448 | 0) >> 2] = $10_1;
    HEAP32[(0 + 44436 | 0) >> 2] = $4_1;
   }
   $0_1 = $6_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $668($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $6_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $379_1 = 0, $386_1 = 0, $393_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 44444 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 44448 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $5_1 = $2_1 >>> 3 | 0;
      $6_1 = ($5_1 << 3 | 0) + 44468 | 0;
      label$5 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($4_1 | 0)) {
        break label$5
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44428 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44428 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$7
       }
       $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
       break label$6;
      }
      label$8 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $6_1 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5_1 = $2_1;
       $6_1 = $4_1;
       $2_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       $2_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 44732 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$11
       }
       HEAP32[$2_1 >> 2] = $6_1;
       if ($6_1) {
        break label$10
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44432 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44432 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$12 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$12
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 44436 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 44452 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$15
      }
      HEAP32[(0 + 44452 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 44440 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 44440 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 44448 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 44436 | 0) >> 2] = 0;
      HEAP32[(0 + 44448 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 44448 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$16
      }
      HEAP32[(0 + 44448 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 44436 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 44436 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$17 : {
      label$18 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $5_1 = $2_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 44468 | 0;
       label$19 : {
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($2_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44428 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44428 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 44444 | 0) >> 2] | 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
        break label$20;
       }
       label$22 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $2_1;
        $6_1 = $4_1;
        $2_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        $2_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 44732 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$25
        }
        HEAP32[$2_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44432 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44432 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 44448 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 44436 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$27 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 44468 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 44428 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 44428 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$28;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 31;
   label$30 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2_1 = $0_1 >>> 8 | 0;
    $379_1 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $379_1 << $2_1 | 0;
    $386_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $386_1 << $4_1 | 0;
    $393_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($393_1 << $6_1 | 0) >>> 15 | 0) - ($2_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 44732 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6_1 = HEAP32[(0 + 44432 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($6_1 & $3_1 | 0) {
        break label$34
       }
       HEAP32[(0 + 44432 | 0) >> 2] = $6_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$33;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      label$35 : while (1) {
       $4_1 = $6_1;
       if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$32
       }
       $6_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$31;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 44460 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 44460 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $669($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $667($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   (wasm2js_i32$0 = $516() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $670($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $667($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $677($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $668($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $670($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & -8 | 0;
  label$1 : {
   label$2 : {
    if ($2_1 & 3 | 0) {
     break label$2
    }
    label$3 : {
     if ($1_1 >>> 0 >= 256 >>> 0) {
      break label$3
     }
     return 0 | 0;
    }
    label$4 : {
     if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $4_1 = $0_1;
     if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 44908 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$1
     }
    }
    return 0 | 0;
   }
   $5_1 = $0_1 + $3_1 | 0;
   label$5 : {
    label$6 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $3_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $674($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $4_1 = 0;
    label$7 : {
     if ((HEAP32[(0 + 44452 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$7
     }
     $3_1 = (HEAP32[(0 + 44440 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 <= $1_1 >>> 0) {
      break label$1
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $2_1 = $0_1 + $1_1 | 0;
     $1_1 = $3_1 - $1_1 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 44440 | 0) >> 2] = $1_1;
     HEAP32[(0 + 44452 | 0) >> 2] = $2_1;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 44448 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$8
     }
     $4_1 = 0;
     $3_1 = (HEAP32[(0 + 44436 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$1
     }
     label$9 : {
      label$10 : {
       $4_1 = $3_1 - $1_1 | 0;
       if ($4_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       $3_1 = $0_1 + $3_1 | 0;
       HEAP32[$3_1 >> 2] = $4_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $3_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 44448 | 0) >> 2] = $1_1;
     HEAP32[(0 + 44436 | 0) >> 2] = $4_1;
     break label$5;
    }
    $4_1 = 0;
    $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($6_1 & 2 | 0) {
     break label$1
    }
    $7_1 = ($6_1 & -8 | 0) + $3_1 | 0;
    if ($7_1 >>> 0 < $1_1 >>> 0) {
     break label$1
    }
    $8_1 = $7_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      $9_1 = $6_1 >>> 3 | 0;
      $6_1 = ($9_1 << 3 | 0) + 44468 | 0;
      label$13 : {
       $4_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($4_1 | 0) != ($3_1 | 0)) {
        break label$13
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44428 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44428 | 0) >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($5_1 | 0)) {
        break label$15
       }
       $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[(0 + 44444 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$14;
      }
      label$16 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $6_1 = 0;
       break label$14;
      }
      label$17 : while (1) {
       $9_1 = $3_1;
       $6_1 = $4_1;
       $3_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       $3_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       break label$17;
      };
      HEAP32[$9_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$18 : {
      label$19 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 44732 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$19
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$18
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44432 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44432 | 0) >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$11
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $10_1;
     label$20 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$11
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
    }
    label$21 : {
     if ($8_1 >>> 0 > 15 >>> 0) {
      break label$21
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $7_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $7_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 3 | 0;
    $3_1 = $0_1 + $7_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $674($1_1 | 0, $8_1 | 0);
   }
   $4_1 = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $671($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 > 8 >>> 0) {
    break label$1
   }
   return $667($1_1 | 0) | 0 | 0;
  }
  return $672($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $672($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = 16;
  label$1 : {
   label$2 : {
    $3_1 = $0_1 >>> 0 > 16 >>> 0 ? $0_1 : 16;
    if ($3_1 & ($3_1 + -1 | 0) | 0) {
     break label$2
    }
    $0_1 = $3_1;
    break label$1;
   }
   label$3 : while (1) {
    $0_1 = $2_1;
    $2_1 = $0_1 << 1 | 0;
    if ($0_1 >>> 0 < $3_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   if ((-64 - $0_1 | 0) >>> 0 > $1_1 >>> 0) {
    break label$4
   }
   (wasm2js_i32$0 = $516() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   return 0 | 0;
  }
  label$5 : {
   $1_1 = $1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0;
   $2_1 = $667(($1_1 + $0_1 | 0) + 12 | 0 | 0) | 0;
   if ($2_1) {
    break label$5
   }
   return 0 | 0;
  }
  $3_1 = $2_1 + -8 | 0;
  label$6 : {
   label$7 : {
    if (($0_1 + -1 | 0) & $2_1 | 0) {
     break label$7
    }
    $0_1 = $3_1;
    break label$6;
   }
   $4_1 = $2_1 + -4 | 0;
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   $2_1 = ((($2_1 + $0_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0) + -8 | 0;
   $0_1 = ($2_1 - $3_1 | 0) >>> 0 > 15 >>> 0 ? $2_1 : $2_1 + $0_1 | 0;
   $2_1 = $0_1 - $3_1 | 0;
   $6_1 = ($5_1 & -8 | 0) - $2_1 | 0;
   label$8 : {
    if ($5_1 & 3 | 0) {
     break label$8
    }
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    HEAP32[$0_1 >> 2] = $3_1 + $2_1 | 0;
    break label$6;
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 | ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $0_1 + $6_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   HEAP32[$4_1 >> 2] = $2_1 | ((HEAP32[$4_1 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $3_1 + $2_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $674($3_1 | 0, $2_1 | 0);
  }
  label$9 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 3 | 0)) {
    break label$9
   }
   $3_1 = $2_1 & -8 | 0;
   if ($3_1 >>> 0 <= ($1_1 + 16 | 0) >>> 0) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
   $2_1 = $0_1 + $1_1 | 0;
   $1_1 = $3_1 - $1_1 | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 3 | 0;
   $3_1 = $0_1 + $3_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $674($2_1 | 0, $1_1 | 0);
  }
  return $0_1 + 8 | 0 | 0;
 }
 
 function $673($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 | 0) != (8 | 0)) {
      break label$3
     }
     $1_1 = $667($2_1 | 0) | 0;
     break label$2;
    }
    $3_1 = 28;
    if ($1_1 & 3 | 0) {
     break label$1
    }
    if ((__wasm_popcnt_i32($1_1 >>> 2 | 0 | 0) | 0 | 0) != (1 | 0)) {
     break label$1
    }
    $3_1 = 48;
    if ((-64 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$1
    }
    $1_1 = $672(($1_1 >>> 0 > 16 >>> 0 ? $1_1 : 16) | 0, $2_1 | 0) | 0;
   }
   label$4 : {
    if ($1_1) {
     break label$4
    }
    return 48 | 0;
   }
   HEAP32[$0_1 >> 2] = $1_1;
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $674($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0, $360_1 = 0, $367_1 = 0, $374_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     label$4 : {
      $0_1 = $0_1 - $3_1 | 0;
      if ((HEAP32[(0 + 44448 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 44468 | 0;
       $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        break label$3
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44428 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44428 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($0_1 | 0)) {
         break label$7
        }
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 44444 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$6;
       }
       label$8 : {
        $3_1 = $0_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $3_1 = $0_1 + 16 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $6_1 = 0;
        break label$6;
       }
       label$9 : while (1) {
        $5_1 = $3_1;
        $6_1 = $4_1;
        $3_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        $3_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        break label$9;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$2
      }
      label$10 : {
       label$11 : {
        $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 44732 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
         break label$11
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$10
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44432 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44432 | 0) >> 2] = wasm2js_i32$1;
        break label$2;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$2
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$12 : {
       $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$12
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$2
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      break label$2;
     }
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[(0 + 44436 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     return;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
   }
   label$13 : {
    label$14 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 44452 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$15
      }
      HEAP32[(0 + 44452 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 44440 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 44440 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 44448 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 44436 | 0) >> 2] = 0;
      HEAP32[(0 + 44448 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 44448 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$16
      }
      HEAP32[(0 + 44448 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 44436 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 44436 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$17 : {
      label$18 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 44468 | 0;
       label$19 : {
        $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44428 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44428 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$21
        }
        $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 44444 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$20;
       }
       label$22 : {
        $4_1 = $2_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $4_1 = $2_1 + 16 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $4_1;
        $6_1 = $3_1;
        $4_1 = $3_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        $4_1 = $6_1 + 16 | 0;
        $3_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 44732 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$25
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 44432 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44432 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 44448 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 44436 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$27 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $3_1 = $1_1 >>> 3 | 0;
    $1_1 = ($3_1 << 3 | 0) + 44468 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 44428 | 0) >> 2] | 0;
      $3_1 = 1 << $3_1 | 0;
      if ($4_1 & $3_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 44428 | 0) >> 2] = $4_1 | $3_1 | 0;
      $3_1 = $1_1;
      break label$28;
     }
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    return;
   }
   $3_1 = 31;
   label$30 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $3_1 = $1_1 >>> 8 | 0;
    $360_1 = $3_1;
    $3_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $360_1 << $3_1 | 0;
    $367_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $367_1 << $4_1 | 0;
    $374_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($374_1 << $6_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   $4_1 = ($3_1 << 2 | 0) + 44732 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      $6_1 = HEAP32[(0 + 44432 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$33
      }
      HEAP32[(0 + 44432 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$4_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
      break label$32;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$4_1 >> 2] | 0;
     label$34 : while (1) {
      $4_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$31
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $675() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $676($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = HEAP32[(0 + 43204 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= ($675() | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$22($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 43204 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  (wasm2js_i32$0 = $516() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function $677($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$23($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break label$4
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $678($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $679($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $680($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($679($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) <= (-1 | 0)) {
      break label$5
     }
     $4_1 = $1_1;
     label$6 : while (1) {
      label$7 : {
       $3_1 = $4_1;
       if ($3_1) {
        break label$7
       }
       $3_1 = $1_1;
       break label$4;
      }
      $4_1 = $3_1 + -1 | 0;
      if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
     if ($4_1 >>> 0 < $3_1 >>> 0) {
      break label$1
     }
     $0_1 = $0_1 + $3_1 | 0;
     $3_1 = $1_1 - $3_1 | 0;
     $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
     break label$4;
    }
    $3_1 = $1_1;
   }
   $677($5_1 | 0, $0_1 | 0, $3_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
   $4_1 = $1_1;
  }
  return $4_1 | 0;
 }
 
 function $681($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $680($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $683($3_1 | 0) | 0;
   $0_1 = $680($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $684($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $685($0_1 | 0) | 0;
  return (($2_1 | 0) != ($681($0_1 | 0, 1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) ? -1 : 0) | 0;
 }
 
 function $683($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $684($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $685($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    $1_1 = $0_1;
    label$3 : while (1) {
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : {
    if ($3_1 & 255 | 0) {
     break label$5
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$6 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $686() {
  return global$0 | 0;
 }
 
 function $687($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $688($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $689($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $690($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $689($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$24($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $691($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18_1 = 0, $19_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0;
  $5_1 = $0_1;
  $6_1 = $1_1;
  $7_1 = $2_1;
  i64toi32_i32$0 = $3$hi;
  $9_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $12_1 = $18_1;
  i64toi32_i32$1 = $4$hi;
  $14_1 = $4_1;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$25($5_1 | 0, $6_1 | 0, $7_1 | 0, $9_1 | 0, $12_1 | 0, $14_1 | 0, $19_1 | 0);
 }
 
 function $692($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$26($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $23$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $21_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $21_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $22_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $22_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$2 = $22_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$5 = var$2;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_udiv($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17_1 = i64toi32_i32$1;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $23_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
   $23_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
  }
  var$0 = $23_1;
  var$0$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$1 = $17_1;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $23$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = $23$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_sdiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_popcnt_i32(var$0) {
  var$0 = var$0 | 0;
  var var$1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $5_1 = var$1;
    if (!var$0) {
     break label$1
    }
    var$0 = var$0 & (var$0 - 1 | 0) | 0;
    var$1 = var$1 + 1 | 0;
    continue label$2;
   };
  }
  return $5_1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, $2, $4, $7, $15, $37, $118, $19, $21, $24, $28, $137, $167, $51, $53, $54, $61, $63, $52, $64, $57, $67, $142, $143, $144, $145, $148, $254, $221, $217, $205, $209, $252, $253, $266, $320, $323, $327, $468, $521, $522, $520, $534, $535, $541, $636, $639, $637, $638, $644, $640, $646, $666, $663, $649, $641, $665, $662, $650, $642, $664, $659, $652, $643, $654]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "free": $668, 
  "malloc": $667, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "strlen": $685, 
  "ff_h264_cabac_tables": global$7, 
  "__errno_location": $516, 
  "__getTypeName": $367, 
  "__embind_register_native_and_builtin_types": $369, 
  "memset": $678, 
  "_get_tzname": $560, 
  "_get_daylight": $561, 
  "_get_timezone": $562, 
  "emscripten_main_thread_process_queued_calls": $565, 
  "stackSave": $686, 
  "stackRestore": $687, 
  "stackAlloc": $688, 
  "memalign": $671, 
  "dynCall_jiji": $690
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 67108864;

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536
      ,
      'maximum': 2147483648 / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// end include: runtime_stack_check.js
// include: runtime_assertions.js


// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  runtimeInitialized = true;

  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  what = 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
var wasmBinaryFile = 'ff.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
  }
    
  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      var result = WebAssembly.instantiate(binary, info);
      return result;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiationResult, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  var runtimeKeepaliveCounter=0;
  function keepRuntimeAlive() {
      return noExitRuntime || runtimeKeepaliveCounter > 0;
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes=undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  var char_0=48;
  
  var char_9=57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }
  var BindingError=undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  var InternalError=undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  
  var finalizationGroup=false;
  
  function detachFinalizer(handle) {}
  
  function runDestructor($$) {
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
  function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
          runDestructor($$);
      }
    }
  function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationGroup) {
          attachFinalizer = function (handle) { return handle; };
          return handle;
      }
      // If the running environment has a FinalizationGroup (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationGroup
      // at run-time, not build-time.
      finalizationGroup = new FinalizationGroup(function (iter) {
          for (var result = iter.next(); !result.done; result = iter.next()) {
              var $$ = result.value;
              if (!$$.ptr) {
                  console.warn('object already deleted: ' + $$.ptr);
              } else {
                  releaseClassHandle($$);
              }
          }
      });
      attachFinalizer = function(handle) {
          finalizationGroup.register(handle, handle.$$, handle.$$);
          return handle;
      };
      detachFinalizer = function(handle) {
          finalizationGroup.unregister(handle.$$);
      };
      return attachFinalizer(handle);
    }
  function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          }));
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }
  function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
  function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }
  function ClassHandle() {
    }
  
  var registeredPointers={};
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  /** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  /** @constructor */
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }
  function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }
  var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }
  function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
          $$: {
              value: record,
          },
      }));
    }
  function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }
  function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }
  /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function dynCallLegacy(sig, ptr, args) {
      var f = Module["dynCall_" + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      return wasmTable.get(ptr).apply(null, args)
    }
  function getDynCaller(sig, ptr) {
      var argCache = [];
      return function() {
        argCache.length = arguments.length;
        for (var i = 0; i < arguments.length; i++) {
          argCache[i] = arguments[i];
        }
        return dynCall(sig, ptr, argCache);
      };
    }
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.includes('j')) {
          return getDynCaller(signature, rawFunction);
        }
        return wasmTable.get(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  destructors.length = 0;
                  args.length = argCount;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for (var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for (var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];
  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }
  function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  function __emval_register(value) {
      switch (value) {
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.includes('unsigned'));
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if (stdStringIsUTF8) {
                  var decodeStartPtr = value + 4;
                  // Looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                      var currentBytePtr = value + 4 + i;
                      if (i == length || HEAPU8[currentBytePtr] == 0) {
                          var maxRead = currentBytePtr - decodeStartPtr;
                          var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                          if (str === undefined) {
                              str = stringSegment;
                          } else {
                              str += String.fromCharCode(0);
                              str += stringSegment;
                          }
                          decodeStartPtr = currentBytePtr + 1;
                      }
                  }
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if (valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
  
              var decodeStartPtr = value + 4;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if (i == length || HEAP[currentBytePtr >> shift] == 0) {
                      var maxReadBytes = currentBytePtr - decodeStartPtr;
                      var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                      if (str === undefined) {
                          str = stringSegment;
                      } else {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function __emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAP32[destructorsRef >> 2] = __emval_register(destructors);
      return destructors;
    }
  
  var emval_symbols={};
  function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
          return readLatin1String(address);
      } else {
          return symbol;
      }
    }
  
  var emval_methodCallers=[];
  
  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }
  function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }


  function __emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
  function __emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  function __emval_get_method_caller(argCount, argTypes) {
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
          argsList += (i !== 0 ? ", " : "") + "arg" + i;
          params.push("argType" + i);
          args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody +=
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      return __emval_addMethodCaller(invokerFunction);
    }

  function _abort() {
      abort();
    }

  function reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }
  
  function convertI32PairToI53(lo, hi) {
      return (lo >>> 0) + hi * 4294967296;
    }
  
  function convertU32PairToI53(lo, hi) {
      return (lo >>> 0) + (hi >>> 0) * 4294967296;
    }
  
  function reSign(value, bits) {
      if (value <= 0) {
        return value;
      }
      var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                            : Math.pow(2, bits-1);
      // for huge values, we can hit the precision limit and always get true here.
      // so don't do that but, in general there is no perfect solution here. With
      // 64-bit ints, we get rounding and errors
      // TODO: In i64 mode 1, resign the two parts separately and safely
      if (value >= half && (bits <= 32 || value > half)) {
        // Cannot bitshift half, as it may be at the limit of the bits JS uses in
        // bitshifts
        value = -2*half + value;
      }
      return value;
    }
  
  function unSign(value, bits) {
      if (value >= 0) {
        return value;
      }
      // Need some trickery, since if bits == 32, we are right at the limit of the
      // bits JS uses in bitshifts
      return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value
                        : Math.pow(2, bits)         + value;
    }
  function formatString(format, varargs) {
      var textIndex = format;
      var argIndex = varargs;
      // This must be called before reading a double or i64 vararg. It will bump the pointer properly.
      // It also does an assert on i32 values, so it's nice to call it before all varargs calls.
      function prepVararg(ptr, type) {
        if (type === 'double' || type === 'i64') {
          // move so the load is aligned
          if (ptr & 7) {
            ptr += 4;
          }
        } else {
        }
        return ptr;
      }
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = prepVararg(argIndex, type);
        if (type === 'double') {
          ret = HEAPF64[((argIndex)>>3)];
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[((argIndex)>>2)],
                 HEAP32[(((argIndex)+(4))>>2)]];
          argIndex += 8;
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[((argIndex)>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while (1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while (1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              currArg = getNextArg('i' + (argSize * 8));
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = next == 117 ? convertU32PairToI53(currArg[0], currArg[1]) : convertI32PairToI53(currArg[0], currArg[1]);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].includes('.') &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)] = ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }
  
  function traverseStack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for (var i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }
  /** @param {number=} flags */
  function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everything up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      if (flags & 32/*EM_LOG_DEMANGLE*/) {
        warnOnce('EM_LOG_DEMANGLE is deprecated; ignoring');
      }
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        stack_args = traverseStack(arguments);
        while (stack_args[1].includes('_emscripten_'))
          stack_args = traverseStack(stack_args[0]);
      }
  
      // Process all lines:
      var lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
  
      for (var l in lines) {
        var line = lines[l];
  
        var symbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          symbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            symbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + symbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = ' + symbolName) : ('    at '+ symbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
  
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == symbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = traverseStack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }
  function _emscripten_log_js(flags, str) {
      if (flags & 24/*EM_LOG_C_STACK | EM_LOG_JS_STACK*/) {
        str = str.replace(/\s+$/, ''); // Ensure the message and the callstack are joined cleanly with exactly one newline.
        str += (str.length > 0 ? '\n' : '') + _emscripten_get_callstack_js(flags);
      }
  
      if (flags & 1 /*EM_LOG_CONSOLE*/) {
        if (flags & 4 /*EM_LOG_ERROR*/) {
          console.error(str);
        } else if (flags & 2 /*EM_LOG_WARN*/) {
          console.warn(str);
        } else if (flags & 512 /*EM_LOG_INFO*/) {
          console.info(str);
        } else if (flags & 256 /*EM_LOG_DEBUG*/) {
          console.debug(str);
        } else {
          console.log(str);
        }
      } else if (flags & 6 /*EM_LOG_ERROR|EM_LOG_WARN*/) {
        err(str);
      } else {
        out(str);
      }
    }
  function _emscripten_log(flags, format, varargs) {
      var result = formatString(format, varargs);
      var str = UTF8ArrayToString(result, 0);
      _emscripten_log_js(flags, str);
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
  
      // Memory resize rules:
      // 1. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 3. Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 4. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit is set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      // In CAN_ADDRESS_2GB mode, stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate full 4GB Wasm memories, the size will wrap
      // back to 0 bytes in Wasm side for any code that deals with heap sizes, which would require special casing all heap size related code to treat
      // 0 specially.
      var maxHeapSize = 2147483648;
      if (requestedSize > maxHeapSize) {
        return false;
      }
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
  
          return true;
        }
      }
      return false;
    }

  var ENV={};
  
  function getExecutableName() {
      return thisProgram || './this.program';
    }
  function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("randomDevice"); };
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function mmapAlloc(size) {
      var alignedSize = alignMemory(size, 65536);
      var ptr = _malloc(alignedSize);
      while (size < alignedSize) HEAP8[ptr + size++] = 0;
      return ptr;
    }
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          if (address !== 0) {
            // We don't currently support location hints for the address of the mapping
            throw new FS.ErrnoError(28);
          }
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
          };
          this.setErrno(errno);
          this.message = 'FS error';
  
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          FS.forceLoadFile(node);
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path, allowEmpty) {
        if (path[0] === '/') {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = FS.getStream(dirfd);
          if (!dirstream) throw new FS.ErrnoError(8);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = 0;
        HEAP32[(((buf)+(8))>>2)] = stat.ino;
        HEAP32[(((buf)+(12))>>2)] = stat.mode;
        HEAP32[(((buf)+(16))>>2)] = stat.nlink;
        HEAP32[(((buf)+(20))>>2)] = stat.uid;
        HEAP32[(((buf)+(24))>>2)] = stat.gid;
        HEAP32[(((buf)+(28))>>2)] = stat.rdev;
        HEAP32[(((buf)+(32))>>2)] = 0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(48))>>2)] = 4096;
        HEAP32[(((buf)+(52))>>2)] = stat.blocks;
        HEAP32[(((buf)+(56))>>2)] = (stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)] = 0;
        HEAP32[(((buf)+(64))>>2)] = (stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)] = 0;
        HEAP32[(((buf)+(72))>>2)] = (stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)] = 0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)] = tempI64[0],HEAP32[(((buf)+(84))>>2)] = tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        return low;
      }};
  function _environ_get(__environ, environ_buf) {try {
  
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)] = ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {try {
  
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_fdstat_get(fd, pbuf) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      // All character devices are terminals (other things a Linux system would
      // assume is a character device, like the mouse, we have special APIs for).
      var type = stream.tty ? 2 :
                 FS.isDir(stream.mode) ? 3 :
                 FS.isLink(stream.mode) ? 7 :
                 4;
      HEAP8[((pbuf)>>0)] = type;
      // TODO HEAP16[(((pbuf)+(2))>>1)] = ?;
      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(8))>>2)] = tempI64[0],HEAP32[(((pbuf)+(12))>>2)] = tempI64[1]);
      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(16))>>2)] = tempI64[0],HEAP32[(((pbuf)+(20))>>2)] = tempI64[1]);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _pthread_join() {
      return 28;
    }

  function _setTempRet0(val) {
      setTempRet0(val);
    }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
var ASSERTIONS = false;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "_embind_register_bigint": __embind_register_bigint,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_class": __embind_register_class,
  "_embind_register_class_constructor": __embind_register_class_constructor,
  "_embind_register_class_function": __embind_register_class_function,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_float": __embind_register_float,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_void": __embind_register_void,
  "_emval_call_void_method": __emval_call_void_method,
  "_emval_decref": __emval_decref,
  "_emval_get_method_caller": __emval_get_method_caller,
  "abort": _abort,
  "emscripten_log": _emscripten_log,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "environ_get": _environ_get,
  "environ_sizes_get": _environ_sizes_get,
  "fd_close": _fd_close,
  "fd_fdstat_get": _fd_fdstat_get,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "memory": wasmMemory,
  "pthread_join": _pthread_join,
  "setTempRet0": setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["__wasm_call_ctors"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _free = Module["_free"] = function() {
  return (_free = Module["_free"] = Module["asm"]["free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = function() {
  return (_malloc = Module["_malloc"] = Module["asm"]["malloc"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _strlen = Module["_strlen"] = function() {
  return (_strlen = Module["_strlen"] = Module["asm"]["strlen"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = function() {
  return (___errno_location = Module["___errno_location"] = Module["asm"]["__errno_location"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = function() {
  return (___getTypeName = Module["___getTypeName"] = Module["asm"]["__getTypeName"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function() {
  return (___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = Module["asm"]["__embind_register_native_and_builtin_types"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _memset = Module["_memset"] = function() {
  return (_memset = Module["_memset"] = Module["asm"]["memset"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var __get_tzname = Module["__get_tzname"] = function() {
  return (__get_tzname = Module["__get_tzname"] = Module["asm"]["_get_tzname"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var __get_daylight = Module["__get_daylight"] = function() {
  return (__get_daylight = Module["__get_daylight"] = Module["asm"]["_get_daylight"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var __get_timezone = Module["__get_timezone"] = function() {
  return (__get_timezone = Module["__get_timezone"] = Module["asm"]["_get_timezone"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = function() {
  return (_emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = Module["asm"]["emscripten_main_thread_process_queued_calls"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = function() {
  return (stackSave = Module["stackSave"] = Module["asm"]["stackSave"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = function() {
  return (stackRestore = Module["stackRestore"] = Module["asm"]["stackRestore"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = function() {
  return (stackAlloc = Module["stackAlloc"] = Module["asm"]["stackAlloc"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _memalign = Module["_memalign"] = function() {
  return (_memalign = Module["_memalign"] = Module["asm"]["memalign"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = function() {
  return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["dynCall_jiji"]).apply(null, arguments);
};

var _ff_h264_cabac_tables = Module['_ff_h264_cabac_tables'] = 4050;



// === Auto-generated postamble setup entry stuff ===



var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
}
Module['run'] = run;

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && keepRuntimeAlive() && status === 0) {
    return;
  }

  if (keepRuntimeAlive()) {
  } else {

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);

    ABORT = true;
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();





